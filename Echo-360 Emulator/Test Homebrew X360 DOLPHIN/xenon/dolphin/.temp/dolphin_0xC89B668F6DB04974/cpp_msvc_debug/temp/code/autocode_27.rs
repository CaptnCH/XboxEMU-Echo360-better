#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 82176098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176098);
		  /* 82176098h */ case    0:  		/* lwz R29, <#[R29 + 4]> */
		/* 82176098h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000004) );
		/* 82176098h case    0:*/		return 0x8217609C;
		  /* 8217609Ch */ case    1:  		/* b -196 */
		/* 8217609Ch case    1:*/		return 0x82175FD8;
		/* 8217609Ch case    1:*/		return 0x821760A0;
	}
	return 0x821760A0;
} // Block from 82176098h-821760A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821760A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821760A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821760A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821760A0);
		  /* 821760A0h */ case    0:  		/* lwz R28, <#[R28 + 32]> */
		/* 821760A0h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000020) );
		/* 821760A0h case    0:*/		return 0x821760A4;
		  /* 821760A4h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 821760A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821760A4h case    1:*/		return 0x821760A8;
		  /* 821760A8h */ case    2:  		/* bc 4, CR6_EQ, -212 */
		/* 821760A8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82175FD4;  }
		/* 821760A8h case    2:*/		return 0x821760AC;
		  /* 821760ACh */ case    3:  		/* b -468 */
		/* 821760ACh case    3:*/		return 0x82175ED8;
		/* 821760ACh case    3:*/		return 0x821760B0;
	}
	return 0x821760B0;
} // Block from 821760A0h-821760B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821760B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821760B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821760B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821760B0);
		  /* 821760B0h */ case    0:  		/* li R4, 4800 */
		/* 821760B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821760B0h case    0:*/		return 0x821760B4;
		  /* 821760B4h */ case    1:  		/* mr R3, R18 */
		/* 821760B4h case    1:*/		regs.R3 = regs.R18;
		/* 821760B4h case    1:*/		return 0x821760B8;
		  /* 821760B8h */ case    2:  		/* bl -148048 */
		/* 821760B8h case    2:*/		regs.LR = 0x821760BC; return 0x82151E68;
		/* 821760B8h case    2:*/		return 0x821760BC;
	}
	return 0x821760BC;
} // Block from 821760B0h-821760BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821760BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821760BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821760BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821760BC);
		  /* 821760BCh */ case    0:  		/* addi R3, R1, 112 */
		/* 821760BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x70);
		/* 821760BCh case    0:*/		return 0x821760C0;
		  /* 821760C0h */ case    1:  		/* bl -8024 */
		/* 821760C0h case    1:*/		regs.LR = 0x821760C4; return 0x82174168;
		/* 821760C0h case    1:*/		return 0x821760C4;
		  /* 821760C4h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821760C4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821760C4h case    2:*/		return 0x821760C8;
		  /* 821760C8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821760C8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821760D8;  }
		/* 821760C8h case    3:*/		return 0x821760CC;
		  /* 821760CCh */ case    4:  		/* li R4, 4800 */
		/* 821760CCh case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821760CCh case    4:*/		return 0x821760D0;
		  /* 821760D0h */ case    5:  		/* mr R3, R18 */
		/* 821760D0h case    5:*/		regs.R3 = regs.R18;
		/* 821760D0h case    5:*/		return 0x821760D4;
		  /* 821760D4h */ case    6:  		/* bl -148076 */
		/* 821760D4h case    6:*/		regs.LR = 0x821760D8; return 0x82151E68;
		/* 821760D4h case    6:*/		return 0x821760D8;
	}
	return 0x821760D8;
} // Block from 821760BCh-821760D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821760D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821760D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821760D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821760D8);
		  /* 821760D8h */ case    0:  		/* mr R31, R14 */
		/* 821760D8h case    0:*/		regs.R31 = regs.R14;
		/* 821760D8h case    0:*/		return 0x821760DC;
		  /* 821760DCh */ case    1:  		/* b -1196 */
		/* 821760DCh case    1:*/		return 0x82175C30;
		/* 821760DCh case    1:*/		return 0x821760E0;
	}
	return 0x821760E0;
} // Block from 821760D8h-821760E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821760E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821760E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821760E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821760E0);
		  /* 821760E0h */ case    0:  		/* lwz R11, <#[R18 + 52]> */
		/* 821760E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000034) );
		/* 821760E0h case    0:*/		return 0x821760E4;
		  /* 821760E4h */ case    1:  		/* rlwinm. R10, R11, 0, 21, 22 */
		/* 821760E4h case    1:*/		cpu::op::rlwinm<1,0,21,22>(regs,&regs.R10,regs.R11);
		/* 821760E4h case    1:*/		return 0x821760E8;
		  /* 821760E8h */ case    2:  		/* bc 4, CR0_EQ, 32 */
		/* 821760E8h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82176108;  }
		/* 821760E8h case    2:*/		return 0x821760EC;
		  /* 821760ECh */ case    3:  		/* lwz R10, <#[R18 + 44]> */
		/* 821760ECh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x0000002C) );
		/* 821760ECh case    3:*/		return 0x821760F0;
		  /* 821760F0h */ case    4:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 821760F0h case    4:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 821760F0h case    4:*/		return 0x821760F4;
		  /* 821760F4h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 821760F4h case    5:*/		if ( regs.CR[0].eq ) { return 0x82176108;  }
		/* 821760F4h case    5:*/		return 0x821760F8;
		  /* 821760F8h */ case    6:  		/* ori R11, R11, 1025 */
		/* 821760F8h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x401);
		/* 821760F8h case    6:*/		return 0x821760FC;
		  /* 821760FCh */ case    7:  		/* mr R3, R18 */
		/* 821760FCh case    7:*/		regs.R3 = regs.R18;
		/* 821760FCh case    7:*/		return 0x82176100;
		  /* 82176100h */ case    8:  		/* stw R11, <#[R18 + 52]> */
		/* 82176100h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000034) );
		/* 82176100h case    8:*/		return 0x82176104;
		  /* 82176104h */ case    9:  		/* bl -149004 */
		/* 82176104h case    9:*/		regs.LR = 0x82176108; return 0x82151AF8;
		/* 82176104h case    9:*/		return 0x82176108;
	}
	return 0x82176108;
} // Block from 821760E0h-82176108h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82176108h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176108);
		  /* 82176108h */ case    0:  		/* lwz R11, <#[R18 + 52]> */
		/* 82176108h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000034) );
		/* 82176108h case    0:*/		return 0x8217610C;
		  /* 8217610Ch */ case    1:  		/* rlwinm. R10, R11, 0, 25, 25 */
		/* 8217610Ch case    1:*/		cpu::op::rlwinm<1,0,25,25>(regs,&regs.R10,regs.R11);
		/* 8217610Ch case    1:*/		return 0x82176110;
		  /* 82176110h */ case    2:  		/* bc 4, CR0_EQ, 20 */
		/* 82176110h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82176124;  }
		/* 82176110h case    2:*/		return 0x82176114;
		  /* 82176114h */ case    3:  		/* ori R11, R11, 64 */
		/* 82176114h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 82176114h case    3:*/		return 0x82176118;
		  /* 82176118h */ case    4:  		/* mr R3, R18 */
		/* 82176118h case    4:*/		regs.R3 = regs.R18;
		/* 82176118h case    4:*/		return 0x8217611C;
		  /* 8217611Ch */ case    5:  		/* stw R11, <#[R18 + 52]> */
		/* 8217611Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x00000034) );
		/* 8217611Ch case    5:*/		return 0x82176120;
		  /* 82176120h */ case    6:  		/* bl -149032 */
		/* 82176120h case    6:*/		regs.LR = 0x82176124; return 0x82151AF8;
		/* 82176120h case    6:*/		return 0x82176124;
	}
	return 0x82176124;
} // Block from 82176108h-82176124h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82176124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176124);
		  /* 82176124h */ case    0:  		/* lwz R11, <#[R18 + 792]> */
		/* 82176124h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000318) );
		/* 82176124h case    0:*/		return 0x82176128;
		  /* 82176128h */ case    1:  		/* mr R3, R18 */
		/* 82176128h case    1:*/		regs.R3 = regs.R18;
		/* 82176128h case    1:*/		return 0x8217612C;
		  /* 8217612Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8217612Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217612Ch case    2:*/		return 0x82176130;
		  /* 82176130h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 82176130h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217613C;  }
		/* 82176130h case    3:*/		return 0x82176134;
		  /* 82176134h */ case    4:  		/* li R4, 3518 */
		/* 82176134h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDBE);
		/* 82176134h case    4:*/		return 0x82176138;
		  /* 82176138h */ case    5:  		/* bl -148176 */
		/* 82176138h case    5:*/		regs.LR = 0x8217613C; return 0x82151E68;
		/* 82176138h case    5:*/		return 0x8217613C;
	}
	return 0x8217613C;
} // Block from 82176124h-8217613Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217613Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217613C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217613C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217613C);
		  /* 8217613Ch */ case    0:  		/* li R4, 3565 */
		/* 8217613Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDED);
		/* 8217613Ch case    0:*/		return 0x82176140;
		  /* 82176140h */ case    1:  		/* bl -148184 */
		/* 82176140h case    1:*/		regs.LR = 0x82176144; return 0x82151E68;
		/* 82176140h case    1:*/		return 0x82176144;
		  /* 82176144h */ case    2:  		/* nop */
		/* 82176144h case    2:*/		cpu::op::nop();
		/* 82176144h case    2:*/		return 0x82176148;
	}
	return 0x82176148;
} // Block from 8217613Ch-82176148h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82176148h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176148);
		  /* 82176148h */ case    0:  		/* mfspr R12, LR */
		/* 82176148h case    0:*/		regs.R12 = regs.LR;
		/* 82176148h case    0:*/		return 0x8217614C;
		  /* 8217614Ch */ case    1:  		/* bl -937748 */
		/* 8217614Ch case    1:*/		regs.LR = 0x82176150; return 0x82091238;
		/* 8217614Ch case    1:*/		return 0x82176150;
		  /* 82176150h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82176150h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82176150h case    2:*/		return 0x82176154;
		  /* 82176154h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 82176154h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82176154h case    3:*/		return 0x82176158;
		  /* 82176158h */ case    4:  		/* mr R24, R3 */
		/* 82176158h case    4:*/		regs.R24 = regs.R3;
		/* 82176158h case    4:*/		return 0x8217615C;
		  /* 8217615Ch */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217615Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217615Ch case    5:*/		return 0x82176160;
		  /* 82176160h */ case    6:  		/* bc 4, CR0_EQ, 172 */
		/* 82176160h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217620C;  }
		/* 82176160h case    6:*/		return 0x82176164;
		  /* 82176164h */ case    7:  		/* mr R8, R11 */
		/* 82176164h case    7:*/		regs.R8 = regs.R11;
		/* 82176164h case    7:*/		return 0x82176168;
		  /* 82176168h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 82176168h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82176168h case    8:*/		return 0x8217616C;
		  /* 8217616Ch */ case    9:  		/* bc 12, CR0_EQ, 160 */
		/* 8217616Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8217620C;  }
		/* 8217616Ch case    9:*/		return 0x82176170;
		  /* 82176170h */ case   10:  		/* lwz R11, <#[R8 + 20]> */
		/* 82176170h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 82176170h case   10:*/		return 0x82176174;
		  /* 82176174h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82176174h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82176174h case   11:*/		return 0x82176178;
		  /* 82176178h */ case   12:  		/* bc 12, CR0_EQ, 16 */
		/* 82176178h case   12:*/		if ( regs.CR[0].eq ) { return 0x82176188;  }
		/* 82176178h case   12:*/		return 0x8217617C;
		  /* 8217617Ch */ case   13:  		/* lwz R11, <#[R8 + 28]> */
		/* 8217617Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000001C) );
		/* 8217617Ch case   13:*/		return 0x82176180;
		  /* 82176180h */ case   14:  		/* addi R9, R8, 24 */
		/* 82176180h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x18);
		/* 82176180h case   14:*/		return 0x82176184;
		  /* 82176184h */ case   15:  		/* b 12 */
		/* 82176184h case   15:*/		return 0x82176190;
		/* 82176184h case   15:*/		return 0x82176188;
	}
	return 0x82176188;
} // Block from 82176148h-82176188h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82176188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176188);
		  /* 82176188h */ case    0:  		/* lwz R11, <#[R8 + 20]> */
		/* 82176188h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000014) );
		/* 82176188h case    0:*/		return 0x8217618C;
		  /* 8217618Ch */ case    1:  		/* addi R9, R8, 16 */
		/* 8217618Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R8,0x10);
		/* 8217618Ch case    1:*/		return 0x82176190;
	}
	return 0x82176190;
} // Block from 82176188h-82176190h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176190);
		  /* 82176190h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82176190h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82176190h case    0:*/		return 0x82176194;
		  /* 82176194h */ case    1:  		/* addic R10, R10, -1 */
		/* 82176194h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82176194h case    1:*/		return 0x82176198;
		  /* 82176198h */ case    2:  		/* subfe R10, R10, R10 */
		/* 82176198h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82176198h case    2:*/		return 0x8217619C;
		  /* 8217619Ch */ case    3:  		/* and R11, R10, R11 */
		/* 8217619Ch case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217619Ch case    3:*/		return 0x821761A0;
		  /* 821761A0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821761A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821761A0h case    4:*/		return 0x821761A4;
		  /* 821761A4h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 821761A4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821761F0;  }
		/* 821761A4h case    5:*/		return 0x821761A8;
		  /* 821761A8h */ case    6:  		/* lwz R10, <#[R11 + 8]> */
		/* 821761A8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821761A8h case    6:*/		return 0x821761AC;
		  /* 821761ACh */ case    7:  		/* rlwinm R7, R11, 0, 0, 30 */
		/* 821761ACh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R11);
		/* 821761ACh case    7:*/		return 0x821761B0;
		  /* 821761B0h */ case    8:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821761B0h case    8:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821761B0h case    8:*/		return 0x821761B4;
		  /* 821761B4h */ case    9:  		/* stw R10, <#[R11 + 8]> */
		/* 821761B4h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821761B4h case    9:*/		return 0x821761B8;
		  /* 821761B8h */ case   10:  		/* lwz R11, <#[R7 + 40]> */
		/* 821761B8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000028) );
		/* 821761B8h case   10:*/		return 0x821761BC;
		  /* 821761BCh */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821761BCh case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821761BCh case   11:*/		return 0x821761C0;
		  /* 821761C0h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 821761C0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821761CC;  }
		/* 821761C0h case   12:*/		return 0x821761C4;
		  /* 821761C4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821761C4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821761C4h case   13:*/		return 0x821761C8;
		  /* 821761C8h */ case   14:  		/* bc 4, CR6_EQ, -32 */
		/* 821761C8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821761A8;  }
		/* 821761C8h case   14:*/		return 0x821761CC;
	}
	return 0x821761CC;
} // Block from 82176190h-821761CCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821761CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821761CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821761CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821761CC);
		  /* 821761CCh */ case    0:  		/* addi R10, R8, 24 */
		/* 821761CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x18);
		/* 821761CCh case    0:*/		return 0x821761D0;
		  /* 821761D0h */ case    1:  		/* cmplw CR6, R9, R10 */
		/* 821761D0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821761D0h case    1:*/		return 0x821761D4;
		  /* 821761D4h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821761D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821761F0;  }
		/* 821761D4h case    2:*/		return 0x821761D8;
		  /* 821761D8h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 821761D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821761D8h case    3:*/		return 0x821761DC;
		  /* 821761DCh */ case    4:  		/* mr R9, R10 */
		/* 821761DCh case    4:*/		regs.R9 = regs.R10;
		/* 821761DCh case    4:*/		return 0x821761E0;
		  /* 821761E0h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821761E0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821761E0h case    5:*/		return 0x821761E4;
		  /* 821761E4h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 821761E4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821761F0;  }
		/* 821761E4h case    6:*/		return 0x821761E8;
		  /* 821761E8h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821761E8h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821761E8h case    7:*/		return 0x821761EC;
		  /* 821761ECh */ case    8:  		/* bc 4, CR0_EQ, -68 */
		/* 821761ECh case    8:*/		if ( !regs.CR[0].eq ) { return 0x821761A8;  }
		/* 821761ECh case    8:*/		return 0x821761F0;
	}
	return 0x821761F0;
} // Block from 821761CCh-821761F0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821761F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821761F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821761F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821761F0);
		  /* 821761F0h */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821761F0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821761F0h case    0:*/		return 0x821761F4;
		  /* 821761F4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821761F4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821761F4h case    1:*/		return 0x821761F8;
		  /* 821761F8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821761F8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821761F8h case    2:*/		return 0x821761FC;
		  /* 821761FCh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821761FCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217620C;  }
		/* 821761FCh case    3:*/		return 0x82176200;
		  /* 82176200h */ case    4:  		/* mr R8, R11 */
		/* 82176200h case    4:*/		regs.R8 = regs.R11;
		/* 82176200h case    4:*/		return 0x82176204;
		  /* 82176204h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82176204h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176204h case    5:*/		return 0x82176208;
		  /* 82176208h */ case    6:  		/* bc 4, CR6_EQ, -152 */
		/* 82176208h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82176170;  }
		/* 82176208h case    6:*/		return 0x8217620C;
	}
	return 0x8217620C;
} // Block from 821761F0h-8217620Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217620Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217620C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217620C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217620C);
		  /* 8217620Ch */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 8217620Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8217620Ch case    0:*/		return 0x82176210;
		  /* 82176210h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82176210h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82176210h case    1:*/		return 0x82176214;
		  /* 82176214h */ case    2:  		/* bc 4, CR0_EQ, 1016 */
		/* 82176214h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217660C;  }
		/* 82176214h case    2:*/		return 0x82176218;
		  /* 82176218h */ case    3:  		/* mr R23, R11 */
		/* 82176218h case    3:*/		regs.R23 = regs.R11;
		/* 82176218h case    3:*/		return 0x8217621C;
		  /* 8217621Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8217621Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217621Ch case    4:*/		return 0x82176220;
		  /* 82176220h */ case    5:  		/* bc 12, CR0_EQ, 1004 */
		/* 82176220h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217660C;  }
		/* 82176220h case    5:*/		return 0x82176224;
		  /* 82176224h */ case    6:  		/* lis R11, -32252 */
		/* 82176224h case    6:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82176224h case    6:*/		return 0x82176228;
		  /* 82176228h */ case    7:  		/* addi R22, R11, -17164 */
		/* 82176228h case    7:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R11,0xFFFFBCF4);
		/* 82176228h case    7:*/		return 0x8217622C;
		  /* 8217622Ch */ case    8:  		/* lwz R11, <#[R23 + 68]> */
		/* 8217622Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000044) );
		/* 8217622Ch case    8:*/		return 0x82176230;
		  /* 82176230h */ case    9:  		/* rlwinm. R11, R11, 0, 2, 2 */
		/* 82176230h case    9:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R11,regs.R11);
		/* 82176230h case    9:*/		return 0x82176234;
		  /* 82176234h */ case   10:  		/* bc 12, CR0_EQ, 956 */
		/* 82176234h case   10:*/		if ( regs.CR[0].eq ) { return 0x821765F0;  }
		/* 82176234h case   10:*/		return 0x82176238;
		  /* 82176238h */ case   11:  		/* lwz R11, <#[R23 + 20]> */
		/* 82176238h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 82176238h case   11:*/		return 0x8217623C;
		  /* 8217623Ch */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217623Ch case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217623Ch case   12:*/		return 0x82176240;
		  /* 82176240h */ case   13:  		/* bc 4, CR0_EQ, 136 */
		/* 82176240h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821762C8;  }
		/* 82176240h case   13:*/		return 0x82176244;
		  /* 82176244h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 82176244h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82176244h case   14:*/		return 0x82176248;
		  /* 82176248h */ case   15:  		/* bc 12, CR0_EQ, 128 */
		/* 82176248h case   15:*/		if ( regs.CR[0].eq ) { return 0x821762C8;  }
		/* 82176248h case   15:*/		return 0x8217624C;
		  /* 8217624Ch */ case   16:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217624Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217624Ch case   16:*/		return 0x82176250;
		  /* 82176250h */ case   17:  		/* rlwinm. R10, R10, 0, 15, 17 */
		/* 82176250h case   17:*/		cpu::op::rlwinm<1,0,15,17>(regs,&regs.R10,regs.R10);
		/* 82176250h case   17:*/		return 0x82176254;
		  /* 82176254h */ case   18:  		/* bc 12, CR0_EQ, 60 */
		/* 82176254h case   18:*/		if ( regs.CR[0].eq ) { return 0x82176290;  }
		/* 82176254h case   18:*/		return 0x82176258;
		  /* 82176258h */ case   19:  		/* lwz R10, <#[R11 + 4]> */
		/* 82176258h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82176258h case   19:*/		return 0x8217625C;
		  /* 8217625Ch */ case   20:  		/* cmplwi CR6, R10, 0 */
		/* 8217625Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217625Ch case   20:*/		return 0x82176260;
		  /* 82176260h */ case   21:  		/* bc 12, CR6_EQ, 36 */
		/* 82176260h case   21:*/		if ( regs.CR[6].eq ) { return 0x82176284;  }
		/* 82176260h case   21:*/		return 0x82176264;
		  /* 82176264h */ case   22:  		/* lwz R9, <#[R10]> */
		/* 82176264h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82176264h case   22:*/		return 0x82176268;
		  /* 82176268h */ case   23:  		/* rlwinm. R8, R9, 0, 4, 6 */
		/* 82176268h case   23:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R9);
		/* 82176268h case   23:*/		return 0x8217626C;
		  /* 8217626Ch */ case   24:  		/* bc 4, CR0_EQ, 12 */
		/* 8217626Ch case   24:*/		if ( !regs.CR[0].eq ) { return 0x82176278;  }
		/* 8217626Ch case   24:*/		return 0x82176270;
		  /* 82176270h */ case   25:  		/* lwz R10, <#[R10 + 8]> */
		/* 82176270h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82176270h case   25:*/		return 0x82176274;
		  /* 82176274h */ case   26:  		/* b -24 */
		/* 82176274h case   26:*/		return 0x8217625C;
		/* 82176274h case   26:*/		return 0x82176278;
	}
	return 0x82176278;
} // Block from 8217620Ch-82176278h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82176278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176278);
		  /* 82176278h */ case    0:  		/* rlwinm. R10, R9, 2, 31, 31 */
		/* 82176278h case    0:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R9);
		/* 82176278h case    0:*/		return 0x8217627C;
		  /* 8217627Ch */ case    1:  		/* li R10, 1 */
		/* 8217627Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8217627Ch case    1:*/		return 0x82176280;
		  /* 82176280h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 82176280h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82176288;  }
		/* 82176280h case    2:*/		return 0x82176284;
	}
	return 0x82176284;
} // Block from 82176278h-82176284h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82176284h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176284( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176284) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176284);
		  /* 82176284h */ case    0:  		/* li R10, 0 */
		/* 82176284h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82176284h case    0:*/		return 0x82176288;
	}
	return 0x82176288;
} // Block from 82176284h-82176288h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82176288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176288);
		  /* 82176288h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 82176288h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82176288h case    0:*/		return 0x8217628C;
		  /* 8217628Ch */ case    1:  		/* bc 12, CR0_EQ, 904 */
		/* 8217628Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82176614;  }
		/* 8217628Ch case    1:*/		return 0x82176290;
	}
	return 0x82176290;
} // Block from 82176288h-82176290h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176290h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176290);
		  /* 82176290h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 82176290h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82176290h case    0:*/		return 0x82176294;
		  /* 82176294h */ case    1:  		/* rlwinm. R9, R10, 8, 31, 31 */
		/* 82176294h case    1:*/		cpu::op::rlwinm<1,8,31,31>(regs,&regs.R9,regs.R10);
		/* 82176294h case    1:*/		return 0x82176298;
		  /* 82176298h */ case    2:  		/* bc 4, CR0_EQ, 24 */
		/* 82176298h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821762B0;  }
		/* 82176298h case    2:*/		return 0x8217629C;
		  /* 8217629Ch */ case    3:  		/* lwz R9, <#[R11 + 20]> */
		/* 8217629Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 8217629Ch case    3:*/		return 0x821762A0;
		  /* 821762A0h */ case    4:  		/* oris R10, R10, 256 */
		/* 821762A0h case    4:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x100);
		/* 821762A0h case    4:*/		return 0x821762A4;
		  /* 821762A4h */ case    5:  		/* ori R9, R9, 8191 */
		/* 821762A4h case    5:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1FFF);
		/* 821762A4h case    5:*/		return 0x821762A8;
		  /* 821762A8h */ case    6:  		/* stw R10, <#[R11 + 16]> */
		/* 821762A8h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821762A8h case    6:*/		return 0x821762AC;
		  /* 821762ACh */ case    7:  		/* stw R9, <#[R11 + 20]> */
		/* 821762ACh case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000014) );
		/* 821762ACh case    7:*/		return 0x821762B0;
	}
	return 0x821762B0;
} // Block from 82176290h-821762B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821762B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821762B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821762B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821762B0);
		  /* 821762B0h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821762B0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821762B0h case    0:*/		return 0x821762B4;
		  /* 821762B4h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821762B4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821762B4h case    1:*/		return 0x821762B8;
		  /* 821762B8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821762B8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821762B8h case    2:*/		return 0x821762BC;
		  /* 821762BCh */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821762BCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821762C8;  }
		/* 821762BCh case    3:*/		return 0x821762C0;
		  /* 821762C0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821762C0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821762C0h case    4:*/		return 0x821762C4;
		  /* 821762C4h */ case    5:  		/* bc 4, CR6_EQ, -120 */
		/* 821762C4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217624C;  }
		/* 821762C4h case    5:*/		return 0x821762C8;
	}
	return 0x821762C8;
} // Block from 821762B0h-821762C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821762C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821762C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821762C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821762C8);
		  /* 821762C8h */ case    0:  		/* li R30, 0 */
		/* 821762C8h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821762C8h case    0:*/		return 0x821762CC;
		  /* 821762CCh */ case    1:  		/* li R5, 33 */
		/* 821762CCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x21);
		/* 821762CCh case    1:*/		return 0x821762D0;
		  /* 821762D0h */ case    2:  		/* li R4, 20 */
		/* 821762D0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 821762D0h case    2:*/		return 0x821762D4;
		  /* 821762D4h */ case    3:  		/* mr R3, R24 */
		/* 821762D4h case    3:*/		regs.R3 = regs.R24;
		/* 821762D4h case    3:*/		return 0x821762D8;
		  /* 821762D8h */ case    4:  		/* bl -72168 */
		/* 821762D8h case    4:*/		regs.LR = 0x821762DC; return 0x821648F0;
		/* 821762D8h case    4:*/		return 0x821762DC;
		  /* 821762DCh */ case    5:  		/* mr R4, R24 */
		/* 821762DCh case    5:*/		regs.R4 = regs.R24;
		/* 821762DCh case    5:*/		return 0x821762E0;
		  /* 821762E0h */ case    6:  		/* mr R31, R3 */
		/* 821762E0h case    6:*/		regs.R31 = regs.R3;
		/* 821762E0h case    6:*/		return 0x821762E4;
		  /* 821762E4h */ case    7:  		/* bl -13844 */
		/* 821762E4h case    7:*/		regs.LR = 0x821762E8; return 0x82172CD0;
		/* 821762E4h case    7:*/		return 0x821762E8;
		  /* 821762E8h */ case    8:  		/* mr R5, R31 */
		/* 821762E8h case    8:*/		regs.R5 = regs.R31;
		/* 821762E8h case    8:*/		return 0x821762EC;
		  /* 821762ECh */ case    9:  		/* mr R4, R23 */
		/* 821762ECh case    9:*/		regs.R4 = regs.R23;
		/* 821762ECh case    9:*/		return 0x821762F0;
		  /* 821762F0h */ case   10:  		/* mr R3, R24 */
		/* 821762F0h case   10:*/		regs.R3 = regs.R24;
		/* 821762F0h case   10:*/		return 0x821762F4;
		  /* 821762F4h */ case   11:  		/* bl -8020 */
		/* 821762F4h case   11:*/		regs.LR = 0x821762F8; return 0x821743A0;
		/* 821762F4h case   11:*/		return 0x821762F8;
		  /* 821762F8h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821762F8h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821762F8h case   12:*/		return 0x821762FC;
		  /* 821762FCh */ case   13:  		/* bc 12, CR0_EQ, 60 */
		/* 821762FCh case   13:*/		if ( regs.CR[0].eq ) { return 0x82176338;  }
		/* 821762FCh case   13:*/		return 0x82176300;
		  /* 82176300h */ case   14:  		/* lwz R11, <#[R24 + 796]> */
		/* 82176300h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000031C) );
		/* 82176300h case   14:*/		return 0x82176304;
		  /* 82176304h */ case   15:  		/* lwz R10, <#[R31 + 16]> */
		/* 82176304h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 82176304h case   15:*/		return 0x82176308;
		  /* 82176308h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82176308h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176308h case   16:*/		return 0x8217630C;
		  /* 8217630Ch */ case   17:  		/* bc 4, CR6_EQ, 20 */
		/* 8217630Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x82176320;  }
		/* 8217630Ch case   17:*/		return 0x82176310;
		  /* 82176310h */ case   18:  		/* lwz R11, <#[R24 + 792]> */
		/* 82176310h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000318) );
		/* 82176310h case   18:*/		return 0x82176314;
		  /* 82176314h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 82176314h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176314h case   19:*/		return 0x82176318;
		  /* 82176318h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 82176318h case   20:*/		if ( !regs.CR[6].eq ) { return 0x82176320;  }
		/* 82176318h case   20:*/		return 0x8217631C;
		  /* 8217631Ch */ case   21:  		/* li R11, 32 */
		/* 8217631Ch case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 8217631Ch case   21:*/		return 0x82176320;
	}
	return 0x82176320;
} // Block from 821762C8h-82176320h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82176320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176320);
		  /* 82176320h */ case    0:  		/* cmplw CR6, R10, R11 */
		/* 82176320h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82176320h case    0:*/		return 0x82176324;
		  /* 82176324h */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 82176324h case    1:*/		if ( regs.CR[6].lt ) { return 0x82176338;  }
		/* 82176324h case    1:*/		return 0x82176328;
		  /* 82176328h */ case    2:  		/* addi R30, R30, 1 */
		/* 82176328h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 82176328h case    2:*/		return 0x8217632C;
		  /* 8217632Ch */ case    3:  		/* li R31, 0 */
		/* 8217632Ch case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8217632Ch case    3:*/		return 0x82176330;
		  /* 82176330h */ case    4:  		/* cmplwi CR6, R30, 100 */
		/* 82176330h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000064);
		/* 82176330h case    4:*/		return 0x82176334;
		  /* 82176334h */ case    5:  		/* bc 12, CR6_LT, -104 */
		/* 82176334h case    5:*/		if ( regs.CR[6].lt ) { return 0x821762CC;  }
		/* 82176334h case    5:*/		return 0x82176338;
	}
	return 0x82176338;
} // Block from 82176320h-82176338h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82176338h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176338( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176338) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176338);
		  /* 82176338h */ case    0:  		/* cmplwi CR6, R30, 100 */
		/* 82176338h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000064);
		/* 82176338h case    0:*/		return 0x8217633C;
		  /* 8217633Ch */ case    1:  		/* bc 12, CR6_EQ, 740 */
		/* 8217633Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82176620;  }
		/* 8217633Ch case    1:*/		return 0x82176340;
		  /* 82176340h */ case    2:  		/* lwz R10, <#[R24 + 792]> */
		/* 82176340h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000318) );
		/* 82176340h case    2:*/		return 0x82176344;
		  /* 82176344h */ case    3:  		/* lwz R9, <#[R31 + 16]> */
		/* 82176344h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82176344h case    3:*/		return 0x82176348;
		  /* 82176348h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82176348h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82176348h case    4:*/		return 0x8217634C;
		  /* 8217634Ch */ case    5:  		/* mr R11, R10 */
		/* 8217634Ch case    5:*/		regs.R11 = regs.R10;
		/* 8217634Ch case    5:*/		return 0x82176350;
		  /* 82176350h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 82176350h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82176358;  }
		/* 82176350h case    6:*/		return 0x82176354;
		  /* 82176354h */ case    7:  		/* li R11, 32 */
		/* 82176354h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82176354h case    7:*/		return 0x82176358;
	}
	return 0x82176358;
} // Block from 82176338h-82176358h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82176358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176358);
		  /* 82176358h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 82176358h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82176358h case    0:*/		return 0x8217635C;
		  /* 8217635Ch */ case    1:  		/* bc 4, CR6_LT, 740 */
		/* 8217635Ch case    1:*/		if ( !regs.CR[6].lt ) { return 0x82176640;  }
		/* 8217635Ch case    1:*/		return 0x82176360;
		  /* 82176360h */ case    2:  		/* lwz R5, <#[R24 + 796]> */
		/* 82176360h case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x0000031C) );
		/* 82176360h case    2:*/		return 0x82176364;
		  /* 82176364h */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 82176364h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82176364h case    3:*/		return 0x82176368;
		  /* 82176368h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 82176368h case    4:*/		if ( regs.CR[6].eq ) { return 0x82176374;  }
		/* 82176368h case    4:*/		return 0x8217636C;
		  /* 8217636Ch */ case    5:  		/* mr R11, R5 */
		/* 8217636Ch case    5:*/		regs.R11 = regs.R5;
		/* 8217636Ch case    5:*/		return 0x82176370;
		  /* 82176370h */ case    6:  		/* b 20 */
		/* 82176370h case    6:*/		return 0x82176384;
		/* 82176370h case    6:*/		return 0x82176374;
	}
	return 0x82176374;
} // Block from 82176358h-82176374h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82176374h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176374( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176374) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176374);
		  /* 82176374h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82176374h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82176374h case    0:*/		return 0x82176378;
		  /* 82176378h */ case    1:  		/* mr R11, R10 */
		/* 82176378h case    1:*/		regs.R11 = regs.R10;
		/* 82176378h case    1:*/		return 0x8217637C;
		  /* 8217637Ch */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8217637Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82176384;  }
		/* 8217637Ch case    2:*/		return 0x82176380;
		  /* 82176380h */ case    3:  		/* li R11, 32 */
		/* 82176380h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82176380h case    3:*/		return 0x82176384;
	}
	return 0x82176384;
} // Block from 82176374h-82176384h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82176384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176384);
		  /* 82176384h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 82176384h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82176384h case    0:*/		return 0x82176388;
		  /* 82176388h */ case    1:  		/* bc 12, CR6_LT, 44 */
		/* 82176388h case    1:*/		if ( regs.CR[6].lt ) { return 0x821763B4;  }
		/* 82176388h case    1:*/		return 0x8217638C;
		  /* 8217638Ch */ case    2:  		/* cmplwi CR6, R5, 0 */
		/* 8217638Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8217638Ch case    2:*/		return 0x82176390;
		  /* 82176390h */ case    3:  		/* bc 4, CR6_EQ, 20 */
		/* 82176390h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821763A4;  }
		/* 82176390h case    3:*/		return 0x82176394;
		  /* 82176394h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82176394h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82176394h case    4:*/		return 0x82176398;
		  /* 82176398h */ case    5:  		/* mr R5, R10 */
		/* 82176398h case    5:*/		regs.R5 = regs.R10;
		/* 82176398h case    5:*/		return 0x8217639C;
		  /* 8217639Ch */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8217639Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821763A4;  }
		/* 8217639Ch case    6:*/		return 0x821763A0;
		  /* 821763A0h */ case    7:  		/* li R5, 32 */
		/* 821763A0h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x20);
		/* 821763A0h case    7:*/		return 0x821763A4;
	}
	return 0x821763A4;
} // Block from 82176384h-821763A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821763A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821763A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821763A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821763A4);
		  /* 821763A4h */ case    0:  		/* addi R6, R9, 1 */
		/* 821763A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0x1);
		/* 821763A4h case    0:*/		return 0x821763A8;
		  /* 821763A8h */ case    1:  		/* li R4, 3604 */
		/* 821763A8h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0xE14);
		/* 821763A8h case    1:*/		return 0x821763AC;
		  /* 821763ACh */ case    2:  		/* mr R3, R24 */
		/* 821763ACh case    2:*/		regs.R3 = regs.R24;
		/* 821763ACh case    2:*/		return 0x821763B0;
		  /* 821763B0h */ case    3:  		/* bl -149048 */
		/* 821763B0h case    3:*/		regs.LR = 0x821763B4; return 0x82151D78;
		/* 821763B0h case    3:*/		return 0x821763B4;
	}
	return 0x821763B4;
} // Block from 821763A4h-821763B4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821763B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821763B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821763B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821763B4);
		  /* 821763B4h */ case    0:  		/* lwz R11, <#[R23 + 28]> */
		/* 821763B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 821763B4h case    0:*/		return 0x821763B8;
		  /* 821763B8h */ case    1:  		/* addi R26, R23, 24 */
		/* 821763B8h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R23,0x18);
		/* 821763B8h case    1:*/		return 0x821763BC;
		  /* 821763BCh */ case    2:  		/* li R25, 0 */
		/* 821763BCh case    2:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821763BCh case    2:*/		return 0x821763C0;
		  /* 821763C0h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821763C0h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821763C0h case    3:*/		return 0x821763C4;
		  /* 821763C4h */ case    4:  		/* bc 4, CR0_EQ, 556 */
		/* 821763C4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821765F0;  }
		/* 821763C4h case    4:*/		return 0x821763C8;
		  /* 821763C8h */ case    5:  		/* lwz R11, <#[R26]> */
		/* 821763C8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821763C8h case    5:*/		return 0x821763CC;
		  /* 821763CCh */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821763CCh case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821763CCh case    6:*/		return 0x821763D0;
		  /* 821763D0h */ case    7:  		/* addic. R31, R11, -40 */
		/* 821763D0h case    7:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821763D0h case    7:*/		return 0x821763D4;
		  /* 821763D4h */ case    8:  		/* bc 12, CR0_EQ, 540 */
		/* 821763D4h case    8:*/		if ( regs.CR[0].eq ) { return 0x821765F0;  }
		/* 821763D4h case    8:*/		return 0x821763D8;
		  /* 821763D8h */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 821763D8h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821763D8h case    9:*/		return 0x821763DC;
		  /* 821763DCh */ case   10:  		/* mr R3, R31 */
		/* 821763DCh case   10:*/		regs.R3 = regs.R31;
		/* 821763DCh case   10:*/		return 0x821763E0;
		  /* 821763E0h */ case   11:  		/* rlwinm R30, R11, 0, 6, 4 */
		/* 821763E0h case   11:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R30,regs.R11);
		/* 821763E0h case   11:*/		return 0x821763E4;
		  /* 821763E4h */ case   12:  		/* stw R30, <#[R31 + 8]> */
		/* 821763E4h case   12:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821763E4h case   12:*/		return 0x821763E8;
		  /* 821763E8h */ case   13:  		/* bl -72296 */
		/* 821763E8h case   13:*/		regs.LR = 0x821763EC; return 0x82164980;
		/* 821763E8h case   13:*/		return 0x821763EC;
		  /* 821763ECh */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821763ECh case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821763ECh case   14:*/		return 0x821763F0;
		  /* 821763F0h */ case   15:  		/* bc 12, CR0_EQ, 36 */
		/* 821763F0h case   15:*/		if ( regs.CR[0].eq ) { return 0x82176414;  }
		/* 821763F0h case   15:*/		return 0x821763F4;
		  /* 821763F4h */ case   16:  		/* rlwinm. R11, R30, 26, 31, 31 */
		/* 821763F4h case   16:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R11,regs.R30);
		/* 821763F4h case   16:*/		return 0x821763F8;
		  /* 821763F8h */ case   17:  		/* mr R3, R24 */
		/* 821763F8h case   17:*/		regs.R3 = regs.R24;
		/* 821763F8h case   17:*/		return 0x821763FC;
		  /* 821763FCh */ case   18:  		/* bc 12, CR0_EQ, 608 */
		/* 821763FCh case   18:*/		if ( regs.CR[0].eq ) { return 0x8217665C;  }
		/* 821763FCh case   18:*/		return 0x82176400;
		  /* 82176400h */ case   19:  		/* li R6, 1 */
		/* 82176400h case   19:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82176400h case   19:*/		return 0x82176404;
		  /* 82176404h */ case   20:  		/* li R5, 0 */
		/* 82176404h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82176404h case   20:*/		return 0x82176408;
		  /* 82176408h */ case   21:  		/* mr R4, R31 */
		/* 82176408h case   21:*/		regs.R4 = regs.R31;
		/* 82176408h case   21:*/		return 0x8217640C;
		  /* 8217640Ch */ case   22:  		/* bl 741308 */
		/* 8217640Ch case   22:*/		regs.LR = 0x82176410; return 0x8222B3C8;
		/* 8217640Ch case   22:*/		return 0x82176410;
		  /* 82176410h */ case   23:  		/* b 324 */
		/* 82176410h case   23:*/		return 0x82176554;
		/* 82176410h case   23:*/		return 0x82176414;
	}
	return 0x82176414;
} // Block from 821763B4h-82176414h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82176414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176414);
		  /* 82176414h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 82176414h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 82176414h case    0:*/		return 0x82176418;
		  /* 82176418h */ case    1:  		/* rlwinm R11, R11, 19, 13, 31 */
		/* 82176418h case    1:*/		cpu::op::rlwinm<0,19,13,31>(regs,&regs.R11,regs.R11);
		/* 82176418h case    1:*/		return 0x8217641C;
		  /* 8217641Ch */ case    2:  		/* rlwinm. R10, R11, 0, 28, 31 */
		/* 8217641Ch case    2:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R10,regs.R11);
		/* 8217641Ch case    2:*/		return 0x82176420;
		  /* 82176420h */ case    3:  		/* bc 12, CR0_EQ, 308 */
		/* 82176420h case    3:*/		if ( regs.CR[0].eq ) { return 0x82176554;  }
		/* 82176420h case    3:*/		return 0x82176424;
		  /* 82176424h */ case    4:  		/* rlwinm R10, R30, 0, 18, 24 */
		/* 82176424h case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R30);
		/* 82176424h case    4:*/		return 0x82176428;
		  /* 82176428h */ case    5:  		/* rlwinm R27, R11, 0, 20, 31 */
		/* 82176428h case    5:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R27,regs.R11);
		/* 82176428h case    5:*/		return 0x8217642C;
		  /* 8217642Ch */ case    6:  		/* cmplwi CR6, R10, 14080 */
		/* 8217642Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 8217642Ch case    6:*/		return 0x82176430;
		  /* 82176430h */ case    7:  		/* bc 4, CR6_EQ, 256 */
		/* 82176430h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82176530;  }
		/* 82176430h case    7:*/		return 0x82176434;
		  /* 82176434h */ case    8:  		/* li R29, 0 */
		/* 82176434h case    8:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82176434h case    8:*/		return 0x82176438;
		  /* 82176438h */ case    9:  		/* mr R28, R31 */
		/* 82176438h case    9:*/		regs.R28 = regs.R31;
		/* 82176438h case    9:*/		return 0x8217643C;
		  /* 8217643Ch */ case   10:  		/* lwz R30, <#[R28]> */
		/* 8217643Ch case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 8217643Ch case   10:*/		return 0x82176440;
		  /* 82176440h */ case   11:  		/* cmplwi CR6, R30, 0 */
		/* 82176440h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82176440h case   11:*/		return 0x82176444;
		  /* 82176444h */ case   12:  		/* bc 12, CR6_EQ, 140 */
		/* 82176444h case   12:*/		if ( regs.CR[6].eq ) { return 0x821764D0;  }
		/* 82176444h case   12:*/		return 0x82176448;
		  /* 82176448h */ case   13:  		/* lwz R11, <#[R30]> */
		/* 82176448h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82176448h case   13:*/		return 0x8217644C;
		  /* 8217644Ch */ case   14:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 8217644Ch case   14:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 8217644Ch case   14:*/		return 0x82176450;
		  /* 82176450h */ case   15:  		/* bc 4, CR0_EQ, 24 */
		/* 82176450h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82176468;  }
		/* 82176450h case   15:*/		return 0x82176454;
		  /* 82176454h */ case   16:  		/* mr R5, R24 */
		/* 82176454h case   16:*/		regs.R5 = regs.R24;
		/* 82176454h case   16:*/		return 0x82176458;
		  /* 82176458h */ case   17:  		/* mr R4, R30 */
		/* 82176458h case   17:*/		regs.R4 = regs.R30;
		/* 82176458h case   17:*/		return 0x8217645C;
		  /* 8217645Ch */ case   18:  		/* mr R3, R31 */
		/* 8217645Ch case   18:*/		regs.R3 = regs.R31;
		/* 8217645Ch case   18:*/		return 0x82176460;
		  /* 82176460h */ case   19:  		/* bl 9392 */
		/* 82176460h case   19:*/		regs.LR = 0x82176464; return 0x82178910;
		/* 82176460h case   19:*/		return 0x82176464;
		  /* 82176464h */ case   20:  		/* b 88 */
		/* 82176464h case   20:*/		return 0x821764BC;
		/* 82176464h case   20:*/		return 0x82176468;
	}
	return 0x82176468;
} // Block from 82176414h-82176468h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82176468h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176468( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176468) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176468);
		  /* 82176468h */ case    0:  		/* nor R11, R11, R11 */
		/* 82176468h case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82176468h case    0:*/		return 0x8217646C;
		  /* 8217646Ch */ case    1:  		/* rlwinm. R11, R11, 2, 31, 31 */
		/* 8217646Ch case    1:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R11);
		/* 8217646Ch case    1:*/		return 0x82176470;
		  /* 82176470h */ case    2:  		/* bc 12, CR0_EQ, 76 */
		/* 82176470h case    2:*/		if ( regs.CR[0].eq ) { return 0x821764BC;  }
		/* 82176470h case    2:*/		return 0x82176474;
		  /* 82176474h */ case    3:  		/* lwz R21, <#[R30 + 12]> */
		/* 82176474h case    3:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R30 + 0x0000000C) );
		/* 82176474h case    3:*/		return 0x82176478;
		  /* 82176478h */ case    4:  		/* addi R8, R1, 80 */
		/* 82176478h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82176478h case    4:*/		return 0x8217647C;
		  /* 8217647Ch */ case    5:  		/* mr R6, R31 */
		/* 8217647Ch case    5:*/		regs.R6 = regs.R31;
		/* 8217647Ch case    5:*/		return 0x82176480;
		  /* 82176480h */ case    6:  		/* mr R7, R21 */
		/* 82176480h case    6:*/		regs.R7 = regs.R21;
		/* 82176480h case    6:*/		return 0x82176484;
		  /* 82176484h */ case    7:  		/* mr R5, R29 */
		/* 82176484h case    7:*/		regs.R5 = regs.R29;
		/* 82176484h case    7:*/		return 0x82176488;
		  /* 82176488h */ case    8:  		/* mr R4, R27 */
		/* 82176488h case    8:*/		regs.R4 = regs.R27;
		/* 82176488h case    8:*/		return 0x8217648C;
		  /* 8217648Ch */ case    9:  		/* mr R3, R24 */
		/* 8217648Ch case    9:*/		regs.R3 = regs.R24;
		/* 8217648Ch case    9:*/		return 0x82176490;
		  /* 82176490h */ case   10:  		/* bl 472 */
		/* 82176490h case   10:*/		regs.LR = 0x82176494; return 0x82176668;
		/* 82176490h case   10:*/		return 0x82176494;
		  /* 82176494h */ case   11:  		/* lwz R11, <#[R21 + 20]> */
		/* 82176494h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 82176494h case   11:*/		return 0x82176498;
		  /* 82176498h */ case   12:  		/* mr R20, R3 */
		/* 82176498h case   12:*/		regs.R20 = regs.R3;
		/* 82176498h case   12:*/		return 0x8217649C;
		  /* 8217649Ch */ case   13:  		/* rlwinm R11, R11, 0, 19, 6 */
		/* 8217649Ch case   13:*/		cpu::op::rlwinm<0,0,19,6>(regs,&regs.R11,regs.R11);
		/* 8217649Ch case   13:*/		return 0x821764A0;
		  /* 821764A0h */ case   14:  		/* mr R4, R3 */
		/* 821764A0h case   14:*/		regs.R4 = regs.R3;
		/* 821764A0h case   14:*/		return 0x821764A4;
		  /* 821764A4h */ case   15:  		/* stw R11, <#[R21 + 20]> */
		/* 821764A4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 821764A4h case   15:*/		return 0x821764A8;
		  /* 821764A8h */ case   16:  		/* mr R3, R21 */
		/* 821764A8h case   16:*/		regs.R3 = regs.R21;
		/* 821764A8h case   16:*/		return 0x821764AC;
		  /* 821764ACh */ case   17:  		/* lwz R5, <#[R1 + 80]> */
		/* 821764ACh case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821764ACh case   17:*/		return 0x821764B0;
		  /* 821764B0h */ case   18:  		/* bl 704632 */
		/* 821764B0h case   18:*/		regs.LR = 0x821764B4; return 0x82222528;
		/* 821764B0h case   18:*/		return 0x821764B4;
		  /* 821764B4h */ case   19:  		/* rlwinm R11, R20, 0, 28, 31 */
		/* 821764B4h case   19:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R20);
		/* 821764B4h case   19:*/		return 0x821764B8;
		  /* 821764B8h */ case   20:  		/* or R29, R11, R29 */
		/* 821764B8h case   20:*/		cpu::op::or<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 821764B8h case   20:*/		return 0x821764BC;
	}
	return 0x821764BC;
} // Block from 82176468h-821764BCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821764BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821764BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821764BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821764BC);
		  /* 821764BCh */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821764BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821764BCh case    0:*/		return 0x821764C0;
		  /* 821764C0h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821764C0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821764C0h case    1:*/		return 0x821764C4;
		  /* 821764C4h */ case    2:  		/* bc 4, CR6_EQ, -136 */
		/* 821764C4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217643C;  }
		/* 821764C4h case    2:*/		return 0x821764C8;
		  /* 821764C8h */ case    3:  		/* addi R28, R30, 4 */
		/* 821764C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R30,0x4);
		/* 821764C8h case    3:*/		return 0x821764CC;
		  /* 821764CCh */ case    4:  		/* b -144 */
		/* 821764CCh case    4:*/		return 0x8217643C;
		/* 821764CCh case    4:*/		return 0x821764D0;
	}
	return 0x821764D0;
} // Block from 821764BCh-821764D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821764D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821764D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821764D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821764D0);
		  /* 821764D0h */ case    0:  		/* addi R29, R31, 4 */
		/* 821764D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x4);
		/* 821764D0h case    0:*/		return 0x821764D4;
		  /* 821764D4h */ case    1:  		/* lwz R30, <#[R29]> */
		/* 821764D4h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 821764D4h case    1:*/		return 0x821764D8;
		  /* 821764D8h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821764D8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821764D8h case    2:*/		return 0x821764DC;
		  /* 821764DCh */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 821764DCh case    3:*/		if ( regs.CR[6].eq ) { return 0x82176530;  }
		/* 821764DCh case    3:*/		return 0x821764E0;
		  /* 821764E0h */ case    4:  		/* lwz R3, <#[R30 + 16]> */
		/* 821764E0h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821764E0h case    4:*/		return 0x821764E4;
		  /* 821764E4h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 821764E4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821764E4h case    5:*/		return 0x821764E8;
		  /* 821764E8h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 821764E8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217651C;  }
		/* 821764E8h case    6:*/		return 0x821764EC;
		  /* 821764ECh */ case    7:  		/* lwz R11, <#[R30]> */
		/* 821764ECh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821764ECh case    7:*/		return 0x821764F0;
		  /* 821764F0h */ case    8:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 821764F0h case    8:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 821764F0h case    8:*/		return 0x821764F4;
		  /* 821764F4h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 821764F4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x82176504;  }
		/* 821764F4h case    9:*/		return 0x821764F8;
		  /* 821764F8h */ case   10:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821764F8h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821764F8h case   10:*/		return 0x821764FC;
		  /* 821764FCh */ case   11:  		/* li R11, 1 */
		/* 821764FCh case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821764FCh case   11:*/		return 0x82176500;
		  /* 82176500h */ case   12:  		/* bc 12, CR0_EQ, 8 */
		/* 82176500h case   12:*/		if ( regs.CR[0].eq ) { return 0x82176508;  }
		/* 82176500h case   12:*/		return 0x82176504;
	}
	return 0x82176504;
} // Block from 821764D0h-82176504h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82176504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176504);
		  /* 82176504h */ case    0:  		/* li R11, 0 */
		/* 82176504h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82176504h case    0:*/		return 0x82176508;
	}
	return 0x82176508;
} // Block from 82176504h-82176508h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82176508h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176508( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176508) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176508);
		  /* 82176508h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82176508h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82176508h case    0:*/		return 0x8217650C;
		  /* 8217650Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8217650Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8217651C;  }
		/* 8217650Ch case    1:*/		return 0x82176510;
		  /* 82176510h */ case    2:  		/* mr R5, R24 */
		/* 82176510h case    2:*/		regs.R5 = regs.R24;
		/* 82176510h case    2:*/		return 0x82176514;
		  /* 82176514h */ case    3:  		/* mr R4, R30 */
		/* 82176514h case    3:*/		regs.R4 = regs.R30;
		/* 82176514h case    3:*/		return 0x82176518;
		  /* 82176518h */ case    4:  		/* bl 9208 */
		/* 82176518h case    4:*/		regs.LR = 0x8217651C; return 0x82178910;
		/* 82176518h case    4:*/		return 0x8217651C;
	}
	return 0x8217651C;
} // Block from 82176508h-8217651Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217651Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217651C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217651C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217651C);
		  /* 8217651Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 8217651Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8217651Ch case    0:*/		return 0x82176520;
		  /* 82176520h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 82176520h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82176520h case    1:*/		return 0x82176524;
		  /* 82176524h */ case    2:  		/* bc 4, CR6_EQ, -80 */
		/* 82176524h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821764D4;  }
		/* 82176524h case    2:*/		return 0x82176528;
		  /* 82176528h */ case    3:  		/* addi R29, R30, 8 */
		/* 82176528h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 82176528h case    3:*/		return 0x8217652C;
		  /* 8217652Ch */ case    4:  		/* b -88 */
		/* 8217652Ch case    4:*/		return 0x821764D4;
		/* 8217652Ch case    4:*/		return 0x82176530;
	}
	return 0x82176530;
} // Block from 8217651Ch-82176530h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82176530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176530);
		  /* 82176530h */ case    0:  		/* lwz R10, <#[R31 + 20]> */
		/* 82176530h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82176530h case    0:*/		return 0x82176534;
		  /* 82176534h */ case    1:  		/* rlwinm R11, R27, 0, 28, 31 */
		/* 82176534h case    1:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R27);
		/* 82176534h case    1:*/		return 0x82176538;
		  /* 82176538h */ case    2:  		/* mr R4, R27 */
		/* 82176538h case    2:*/		regs.R4 = regs.R27;
		/* 82176538h case    2:*/		return 0x8217653C;
		  /* 8217653Ch */ case    3:  		/* rlwinm R10, R10, 0, 19, 6 */
		/* 8217653Ch case    3:*/		cpu::op::rlwinm<0,0,19,6>(regs,&regs.R10,regs.R10);
		/* 8217653Ch case    3:*/		return 0x82176540;
		  /* 82176540h */ case    4:  		/* add R11, R11, R22 */
		/* 82176540h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R22);
		/* 82176540h case    4:*/		return 0x82176544;
		  /* 82176544h */ case    5:  		/* stw R10, <#[R31 + 20]> */
		/* 82176544h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 82176544h case    5:*/		return 0x82176548;
		  /* 82176548h */ case    6:  		/* mr R3, R31 */
		/* 82176548h case    6:*/		regs.R3 = regs.R31;
		/* 82176548h case    6:*/		return 0x8217654C;
		  /* 8217654Ch */ case    7:  		/* lbz R5, <#[R11 - 1]> */
		/* 8217654Ch case    7:*/		cpu::mem::load8z( regs, &regs.R5, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 8217654Ch case    7:*/		return 0x82176550;
		  /* 82176550h */ case    8:  		/* bl 704472 */
		/* 82176550h case    8:*/		regs.LR = 0x82176554; return 0x82222528;
		/* 82176550h case    8:*/		return 0x82176554;
	}
	return 0x82176554;
} // Block from 82176530h-82176554h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82176554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176554);
		  /* 82176554h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82176554h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82176554h case    0:*/		return 0x82176558;
		  /* 82176558h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 82176558h case    1:*/		if ( regs.CR[6].eq ) { return 0x821765AC;  }
		/* 82176558h case    1:*/		return 0x8217655C;
		  /* 8217655Ch */ case    2:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 8217655Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 8217655Ch case    2:*/		return 0x82176560;
		  /* 82176560h */ case    3:  		/* lwz R10, <#[R11 + 36]> */
		/* 82176560h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 82176560h case    3:*/		return 0x82176564;
		  /* 82176564h */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 82176564h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 82176564h case    4:*/		return 0x82176568;
		  /* 82176568h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 82176568h case    5:*/		if ( regs.CR[0].eq ) { return 0x82176574;  }
		/* 82176568h case    5:*/		return 0x8217656C;
		  /* 8217656Ch */ case    6:  		/* li R11, 0 */
		/* 8217656Ch case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217656Ch case    6:*/		return 0x82176570;
		  /* 82176570h */ case    7:  		/* b 12 */
		/* 82176570h case    7:*/		return 0x8217657C;
		/* 82176570h case    7:*/		return 0x82176574;
	}
	return 0x82176574;
} // Block from 82176554h-82176574h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82176574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176574);
		  /* 82176574h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 82176574h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 82176574h case    0:*/		return 0x82176578;
		  /* 82176578h */ case    1:  		/* addi R11, R11, -40 */
		/* 82176578h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 82176578h case    1:*/		return 0x8217657C;
	}
	return 0x8217657C;
} // Block from 82176574h-8217657Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217657Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217657C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217657C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217657C);
		  /* 8217657Ch */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 8217657Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8217657Ch case    0:*/		return 0x82176580;
		  /* 82176580h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 82176580h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217659C;  }
		/* 82176580h case    1:*/		return 0x82176584;
		  /* 82176584h */ case    2:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82176584h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82176584h case    2:*/		return 0x82176588;
		  /* 82176588h */ case    3:  		/* mr R25, R31 */
		/* 82176588h case    3:*/		regs.R25 = regs.R31;
		/* 82176588h case    3:*/		return 0x8217658C;
		  /* 8217658Ch */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 8217658Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8217658Ch case    4:*/		return 0x82176590;
		  /* 82176590h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82176590h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82176590h case    5:*/		return 0x82176594;
		  /* 82176594h */ case    6:  		/* bc 4, CR0_EQ, 92 */
		/* 82176594h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821765F0;  }
		/* 82176594h case    6:*/		return 0x82176598;
		  /* 82176598h */ case    7:  		/* b 72 */
		/* 82176598h case    7:*/		return 0x821765E0;
		/* 82176598h case    7:*/		return 0x8217659C;
	}
	return 0x8217659C;
} // Block from 8217657Ch-8217659Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217659Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217659C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217659C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217659C);
		  /* 8217659Ch */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 8217659Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 8217659Ch case    0:*/		return 0x821765A0;
		  /* 821765A0h */ case    1:  		/* bc 4, CR0_EQ, 80 */
		/* 821765A0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821765F0;  }
		/* 821765A0h case    1:*/		return 0x821765A4;
		  /* 821765A4h */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 821765A4h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 821765A4h case    2:*/		return 0x821765A8;
		  /* 821765A8h */ case    3:  		/* b 60 */
		/* 821765A8h case    3:*/		return 0x821765E4;
		/* 821765A8h case    3:*/		return 0x821765AC;
	}
	return 0x821765AC;
} // Block from 8217659Ch-821765ACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821765ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821765AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821765AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821765AC);
		  /* 821765ACh */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 821765ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821765ACh case    0:*/		return 0x821765B0;
		  /* 821765B0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821765B0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821765B0h case    1:*/		return 0x821765B4;
		  /* 821765B4h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821765B4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821765C0;  }
		/* 821765B4h case    2:*/		return 0x821765B8;
		  /* 821765B8h */ case    3:  		/* li R11, 0 */
		/* 821765B8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821765B8h case    3:*/		return 0x821765BC;
		  /* 821765BCh */ case    4:  		/* b 16 */
		/* 821765BCh case    4:*/		return 0x821765CC;
		/* 821765BCh case    4:*/		return 0x821765C0;
	}
	return 0x821765C0;
} // Block from 821765ACh-821765C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821765C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821765C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821765C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821765C0);
		  /* 821765C0h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821765C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821765C0h case    0:*/		return 0x821765C4;
		  /* 821765C4h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821765C4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821765C4h case    1:*/		return 0x821765C8;
		  /* 821765C8h */ case    2:  		/* addi R11, R11, -40 */
		/* 821765C8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821765C8h case    2:*/		return 0x821765CC;
	}
	return 0x821765CC;
} // Block from 821765C0h-821765CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821765CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821765CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821765CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821765CC);
		  /* 821765CCh */ case    0:  		/* cmplw CR6, R31, R11 */
		/* 821765CCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821765CCh case    0:*/		return 0x821765D0;
		  /* 821765D0h */ case    1:  		/* bc 12, CR6_EQ, -76 */
		/* 821765D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82176584;  }
		/* 821765D0h case    1:*/		return 0x821765D4;
		  /* 821765D4h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 821765D4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821765D4h case    2:*/		return 0x821765D8;
		  /* 821765D8h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 821765D8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821765F0;  }
		/* 821765D8h case    3:*/		return 0x821765DC;
		  /* 821765DCh */ case    4:  		/* lwz R11, <#[R26]> */
		/* 821765DCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821765DCh case    4:*/		return 0x821765E0;
	}
	return 0x821765E0;
} // Block from 821765CCh-821765E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821765E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821765E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821765E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821765E0);
		  /* 821765E0h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821765E0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821765E0h case    0:*/		return 0x821765E4;
	}
	return 0x821765E4;
} // Block from 821765E0h-821765E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821765E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821765E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821765E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821765E4);
		  /* 821765E4h */ case    0:  		/* addi R31, R11, -40 */
		/* 821765E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 821765E4h case    0:*/		return 0x821765E8;
		  /* 821765E8h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821765E8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821765E8h case    1:*/		return 0x821765EC;
		  /* 821765ECh */ case    2:  		/* bc 4, CR6_EQ, -532 */
		/* 821765ECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821763D8;  }
		/* 821765ECh case    2:*/		return 0x821765F0;
	}
	return 0x821765F0;
} // Block from 821765E4h-821765F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821765F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821765F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821765F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821765F0);
		  /* 821765F0h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821765F0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821765F0h case    0:*/		return 0x821765F4;
		  /* 821765F4h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 821765F4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821765F4h case    1:*/		return 0x821765F8;
		  /* 821765F8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821765F8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821765F8h case    2:*/		return 0x821765FC;
		  /* 821765FCh */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821765FCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217660C;  }
		/* 821765FCh case    3:*/		return 0x82176600;
		  /* 82176600h */ case    4:  		/* mr R23, R11 */
		/* 82176600h case    4:*/		regs.R23 = regs.R11;
		/* 82176600h case    4:*/		return 0x82176604;
		  /* 82176604h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82176604h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176604h case    5:*/		return 0x82176608;
		  /* 82176608h */ case    6:  		/* bc 4, CR6_EQ, -988 */
		/* 82176608h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217622C;  }
		/* 82176608h case    6:*/		return 0x8217660C;
	}
	return 0x8217660C;
} // Block from 821765F0h-8217660Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217660Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217660C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217660C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217660C);
		  /* 8217660Ch */ case    0:  		/* addi R1, R1, 192 */
		/* 8217660Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8217660Ch case    0:*/		return 0x82176610;
		  /* 82176610h */ case    1:  		/* b -938888 */
		/* 82176610h case    1:*/		return 0x82091288;
		/* 82176610h case    1:*/		return 0x82176614;
	}
	return 0x82176614;
} // Block from 8217660Ch-82176614h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176614);
		  /* 82176614h */ case    0:  		/* li R4, 4800 */
		/* 82176614h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82176614h case    0:*/		return 0x82176618;
		  /* 82176618h */ case    1:  		/* mr R3, R24 */
		/* 82176618h case    1:*/		regs.R3 = regs.R24;
		/* 82176618h case    1:*/		return 0x8217661C;
		  /* 8217661Ch */ case    2:  		/* bl -149428 */
		/* 8217661Ch case    2:*/		regs.LR = 0x82176620; return 0x82151E68;
		/* 8217661Ch case    2:*/		return 0x82176620;
	}
	return 0x82176620;
} // Block from 82176614h-82176620h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82176620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176620);
		  /* 82176620h */ case    0:  		/* lwz R11, <#[R24 + 792]> */
		/* 82176620h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000318) );
		/* 82176620h case    0:*/		return 0x82176624;
		  /* 82176624h */ case    1:  		/* mr R3, R24 */
		/* 82176624h case    1:*/		regs.R3 = regs.R24;
		/* 82176624h case    1:*/		return 0x82176628;
		  /* 82176628h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82176628h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176628h case    2:*/		return 0x8217662C;
		  /* 8217662Ch */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8217662Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82176638;  }
		/* 8217662Ch case    3:*/		return 0x82176630;
		  /* 82176630h */ case    4:  		/* li R4, 3518 */
		/* 82176630h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0xDBE);
		/* 82176630h case    4:*/		return 0x82176634;
		  /* 82176634h */ case    5:  		/* bl -149452 */
		/* 82176634h case    5:*/		regs.LR = 0x82176638; return 0x82151E68;
		/* 82176634h case    5:*/		return 0x82176638;
	}
	return 0x82176638;
} // Block from 82176620h-82176638h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82176638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176638);
		  /* 82176638h */ case    0:  		/* li R4, 3565 */
		/* 82176638h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDED);
		/* 82176638h case    0:*/		return 0x8217663C;
		  /* 8217663Ch */ case    1:  		/* bl -149460 */
		/* 8217663Ch case    1:*/		regs.LR = 0x82176640; return 0x82151E68;
		/* 8217663Ch case    1:*/		return 0x82176640;
	}
	return 0x82176640;
} // Block from 82176638h-82176640h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176640);
		  /* 82176640h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82176640h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82176640h case    0:*/		return 0x82176644;
		  /* 82176644h */ case    1:  		/* mr R3, R24 */
		/* 82176644h case    1:*/		regs.R3 = regs.R24;
		/* 82176644h case    1:*/		return 0x82176648;
		  /* 82176648h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 82176648h case    2:*/		if ( regs.CR[6].eq ) { return 0x82176654;  }
		/* 82176648h case    2:*/		return 0x8217664C;
		  /* 8217664Ch */ case    3:  		/* li R4, 3518 */
		/* 8217664Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0xDBE);
		/* 8217664Ch case    3:*/		return 0x82176650;
		  /* 82176650h */ case    4:  		/* bl -149480 */
		/* 82176650h case    4:*/		regs.LR = 0x82176654; return 0x82151E68;
		/* 82176650h case    4:*/		return 0x82176654;
	}
	return 0x82176654;
} // Block from 82176640h-82176654h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82176654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176654);
		  /* 82176654h */ case    0:  		/* li R4, 3565 */
		/* 82176654h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDED);
		/* 82176654h case    0:*/		return 0x82176658;
		  /* 82176658h */ case    1:  		/* bl -149488 */
		/* 82176658h case    1:*/		regs.LR = 0x8217665C; return 0x82151E68;
		/* 82176658h case    1:*/		return 0x8217665C;
	}
	return 0x8217665C;
} // Block from 82176654h-8217665Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217665Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217665C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217665C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217665C);
		  /* 8217665Ch */ case    0:  		/* li R4, 4800 */
		/* 8217665Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217665Ch case    0:*/		return 0x82176660;
		  /* 82176660h */ case    1:  		/* bl -149496 */
		/* 82176660h case    1:*/		regs.LR = 0x82176664; return 0x82151E68;
		/* 82176660h case    1:*/		return 0x82176664;
		  /* 82176664h */ case    2:  		/* nop */
		/* 82176664h case    2:*/		cpu::op::nop();
		/* 82176664h case    2:*/		return 0x82176668;
	}
	return 0x82176668;
} // Block from 8217665Ch-82176668h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82176668h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176668);
		  /* 82176668h */ case    0:  		/* mfspr R12, LR */
		/* 82176668h case    0:*/		regs.R12 = regs.LR;
		/* 82176668h case    0:*/		return 0x8217666C;
		  /* 8217666Ch */ case    1:  		/* bl -939048 */
		/* 8217666Ch case    1:*/		regs.LR = 0x82176670; return 0x82091244;
		/* 8217666Ch case    1:*/		return 0x82176670;
		  /* 82176670h */ case    2:  		/* lwz R11, <#[R7 + 8]> */
		/* 82176670h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000008) );
		/* 82176670h case    2:*/		return 0x82176674;
		  /* 82176674h */ case    3:  		/* rlwinm R9, R4, 0, 28, 31 */
		/* 82176674h case    3:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R4);
		/* 82176674h case    3:*/		return 0x82176678;
		  /* 82176678h */ case    4:  		/* lwz R10, <#[R6 + 8]> */
		/* 82176678h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000008) );
		/* 82176678h case    4:*/		return 0x8217667C;
		  /* 8217667Ch */ case    5:  		/* li R26, 3 */
		/* 8217667Ch case    5:*/		cpu::op::li<0>(regs,&regs.R26,0x3);
		/* 8217667Ch case    5:*/		return 0x82176680;
		  /* 82176680h */ case    6:  		/* rlwinm R28, R11, 31, 28, 31 */
		/* 82176680h case    6:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R28,regs.R11);
		/* 82176680h case    6:*/		return 0x82176684;
		  /* 82176684h */ case    7:  		/* rlwinm. R3, R10, 13, 29, 31 */
		/* 82176684h case    7:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R3,regs.R10);
		/* 82176684h case    7:*/		return 0x82176688;
		  /* 82176688h */ case    8:  		/* li R10, 0 */
		/* 82176688h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82176688h case    8:*/		return 0x8217668C;
		  /* 8217668Ch */ case    9:  		/* li R25, 1 */
		/* 8217668Ch case    9:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8217668Ch case    9:*/		return 0x82176690;
		  /* 82176690h */ case   10:  		/* mr R11, R28 */
		/* 82176690h case   10:*/		regs.R11 = regs.R28;
		/* 82176690h case   10:*/		return 0x82176694;
		  /* 82176694h */ case   11:  		/* li R31, 0 */
		/* 82176694h case   11:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82176694h case   11:*/		return 0x82176698;
		  /* 82176698h */ case   12:  		/* li R29, 0 */
		/* 82176698h case   12:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82176698h case   12:*/		return 0x8217669C;
		  /* 8217669Ch */ case   13:  		/* bc 12, CR0_EQ, 100 */
		/* 8217669Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x82176700;  }
		/* 8217669Ch case   13:*/		return 0x821766A0;
		  /* 821766A0h */ case   14:  		/* addi R27, R6, 44 */
		/* 821766A0h case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R6,0x2C);
		/* 821766A0h case   14:*/		return 0x821766A4;
		  /* 821766A4h */ case   15:  		/* lwz R30, <#[R27]> */
		/* 821766A4h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 821766A4h case   15:*/		return 0x821766A8;
		  /* 821766A8h */ case   16:  		/* addi R6, R9, -1 */
		/* 821766A8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0xFFFFFFFF);
		/* 821766A8h case   16:*/		return 0x821766AC;
		  /* 821766ACh */ case   17:  		/* andc R6, R9, R6 */
		/* 821766ACh case   17:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R9,regs.R6);
		/* 821766ACh case   17:*/		return 0x821766B0;
		  /* 821766B0h */ case   18:  		/* subf R9, R6, R9 */
		/* 821766B0h case   18:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821766B0h case   18:*/		return 0x821766B4;
		  /* 821766B4h */ case   19:  		/* lwz R24, <#[R30 + 12]> */
		/* 821766B4h case   19:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R30 + 0x0000000C) );
		/* 821766B4h case   19:*/		return 0x821766B8;
		  /* 821766B8h */ case   20:  		/* cmplw CR6, R24, R7 */
		/* 821766B8h case   20:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R7);
		/* 821766B8h case   20:*/		return 0x821766BC;
		  /* 821766BCh */ case   21:  		/* bc 4, CR6_EQ, 52 */
		/* 821766BCh case   21:*/		if ( !regs.CR[6].eq ) { return 0x821766F0;  }
		/* 821766BCh case   21:*/		return 0x821766C0;
		  /* 821766C0h */ case   22:  		/* lwz R30, <#[R30]> */
		/* 821766C0h case   22:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000000) );
		/* 821766C0h case   22:*/		return 0x821766C4;
		  /* 821766C4h */ case   23:  		/* cntlzw R24, R6 */
		/* 821766C4h case   23:*/		cpu::op::cntlzw<0>(regs,&regs.R24,regs.R6);
		/* 821766C4h case   23:*/		return 0x821766C8;
		  /* 821766C8h */ case   24:  		/* or R10, R6, R10 */
		/* 821766C8h case   24:*/		cpu::op::or<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 821766C8h case   24:*/		return 0x821766CC;
		  /* 821766CCh */ case   25:  		/* rlwinm R6, R30, 27, 30, 31 */
		/* 821766CCh case   25:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R6,regs.R30);
		/* 821766CCh case   25:*/		return 0x821766D0;
		  /* 821766D0h */ case   26:  		/* subfic R30, R24, 31 */
		/* 821766D0h case   26:*/		cpu::op::subfic<0>(regs,&regs.R30,regs.R24,0x1F);
		/* 821766D0h case   26:*/		return 0x821766D4;
		  /* 821766D4h */ case   27:  		/* rlwinm R24, R6, 1, 0, 30 */
		/* 821766D4h case   27:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R24,regs.R6);
		/* 821766D4h case   27:*/		return 0x821766D8;
		  /* 821766D8h */ case   28:  		/* slw R6, R25, R6 */
		/* 821766D8h case   28:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R25,regs.R6);
		/* 821766D8h case   28:*/		return 0x821766DC;
		  /* 821766DCh */ case   29:  		/* slw R23, R26, R24 */
		/* 821766DCh case   29:*/		cpu::op::slw<0>(regs,&regs.R23,regs.R26,regs.R24);
		/* 821766DCh case   29:*/		return 0x821766E0;
		  /* 821766E0h */ case   30:  		/* slw R30, R30, R24 */
		/* 821766E0h case   30:*/		cpu::op::slw<0>(regs,&regs.R30,regs.R30,regs.R24);
		/* 821766E0h case   30:*/		return 0x821766E4;
		  /* 821766E4h */ case   31:  		/* andc R31, R31, R23 */
		/* 821766E4h case   31:*/		cpu::op::andc<0>(regs,&regs.R31,regs.R31,regs.R23);
		/* 821766E4h case   31:*/		return 0x821766E8;
		  /* 821766E8h */ case   32:  		/* andc R11, R11, R6 */
		/* 821766E8h case   32:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R6);
		/* 821766E8h case   32:*/		return 0x821766EC;
		  /* 821766ECh */ case   33:  		/* or R31, R30, R31 */
		/* 821766ECh case   33:*/		cpu::op::or<0>(regs,&regs.R31,regs.R30,regs.R31);
		/* 821766ECh case   33:*/		return 0x821766F0;
	}
	return 0x821766F0;
} // Block from 82176668h-821766F0h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821766F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821766F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821766F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821766F0);
		  /* 821766F0h */ case    0:  		/* addi R29, R29, 1 */
		/* 821766F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821766F0h case    0:*/		return 0x821766F4;
		  /* 821766F4h */ case    1:  		/* addi R27, R27, 4 */
		/* 821766F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821766F4h case    1:*/		return 0x821766F8;
		  /* 821766F8h */ case    2:  		/* cmplw CR6, R29, R3 */
		/* 821766F8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R3);
		/* 821766F8h case    2:*/		return 0x821766FC;
		  /* 821766FCh */ case    3:  		/* bc 12, CR6_LT, -88 */
		/* 821766FCh case    3:*/		if ( regs.CR[6].lt ) { return 0x821766A4;  }
		/* 821766FCh case    3:*/		return 0x82176700;
	}
	return 0x82176700;
} // Block from 821766F0h-82176700h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82176700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176700);
		  /* 82176700h */ case    0:  		/* andc R9, R9, R5 */
		/* 82176700h case    0:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R9,regs.R5);
		/* 82176700h case    0:*/		return 0x82176704;
		  /* 82176704h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82176704h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176704h case    1:*/		return 0x82176708;
		  /* 82176708h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 82176708h case    2:*/		if ( regs.CR[6].eq ) { return 0x82176750;  }
		/* 82176708h case    2:*/		return 0x8217670C;
		  /* 8217670Ch */ case    3:  		/* addi R7, R11, -1 */
		/* 8217670Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 8217670Ch case    3:*/		return 0x82176710;
		  /* 82176710h */ case    4:  		/* addi R6, R9, -1 */
		/* 82176710h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R9,0xFFFFFFFF);
		/* 82176710h case    4:*/		return 0x82176714;
		  /* 82176714h */ case    5:  		/* andc R5, R11, R7 */
		/* 82176714h case    5:*/		cpu::op::andc<0>(regs,&regs.R5,regs.R11,regs.R7);
		/* 82176714h case    5:*/		return 0x82176718;
		  /* 82176718h */ case    6:  		/* andc R6, R9, R6 */
		/* 82176718h case    6:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R9,regs.R6);
		/* 82176718h case    6:*/		return 0x8217671C;
		  /* 8217671Ch */ case    7:  		/* cntlzw R7, R5 */
		/* 8217671Ch case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R7,regs.R5);
		/* 8217671Ch case    7:*/		return 0x82176720;
		  /* 82176720h */ case    8:  		/* cntlzw R3, R6 */
		/* 82176720h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R3,regs.R6);
		/* 82176720h case    8:*/		return 0x82176724;
		  /* 82176724h */ case    9:  		/* subfic R7, R7, 31 */
		/* 82176724h case    9:*/		cpu::op::subfic<0>(regs,&regs.R7,regs.R7,0x1F);
		/* 82176724h case    9:*/		return 0x82176728;
		  /* 82176728h */ case   10:  		/* subf. R11, R5, R11 */
		/* 82176728h case   10:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R5,regs.R11);
		/* 82176728h case   10:*/		return 0x8217672C;
		  /* 8217672Ch */ case   11:  		/* rlwinm R7, R7, 1, 0, 30 */
		/* 8217672Ch case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R7);
		/* 8217672Ch case   11:*/		return 0x82176730;
		  /* 82176730h */ case   12:  		/* subfic R3, R3, 31 */
		/* 82176730h case   12:*/		cpu::op::subfic<0>(regs,&regs.R3,regs.R3,0x1F);
		/* 82176730h case   12:*/		return 0x82176734;
		  /* 82176734h */ case   13:  		/* slw R5, R26, R7 */
		/* 82176734h case   13:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R26,regs.R7);
		/* 82176734h case   13:*/		return 0x82176738;
		  /* 82176738h */ case   14:  		/* slw R7, R3, R7 */
		/* 82176738h case   14:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R3,regs.R7);
		/* 82176738h case   14:*/		return 0x8217673C;
		  /* 8217673Ch */ case   15:  		/* andc R5, R31, R5 */
		/* 8217673Ch case   15:*/		cpu::op::andc<0>(regs,&regs.R5,regs.R31,regs.R5);
		/* 8217673Ch case   15:*/		return 0x82176740;
		  /* 82176740h */ case   16:  		/* subf R9, R6, R9 */
		/* 82176740h case   16:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 82176740h case   16:*/		return 0x82176744;
		  /* 82176744h */ case   17:  		/* or R31, R7, R5 */
		/* 82176744h case   17:*/		cpu::op::or<0>(regs,&regs.R31,regs.R7,regs.R5);
		/* 82176744h case   17:*/		return 0x82176748;
		  /* 82176748h */ case   18:  		/* or R10, R6, R10 */
		/* 82176748h case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 82176748h case   18:*/		return 0x8217674C;
		  /* 8217674Ch */ case   19:  		/* bc 4, CR0_EQ, -64 */
		/* 8217674Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x8217670C;  }
		/* 8217674Ch case   19:*/		return 0x82176750;
	}
	return 0x82176750;
} // Block from 82176700h-82176750h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82176750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176750);
		  /* 82176750h */ case    0:  		/* rlwimi R10, R4, 0, 0, 27 */
		/* 82176750h case    0:*/		cpu::op::rlwimi<0,0,0,27>(regs,&regs.R10,regs.R4);
		/* 82176750h case    0:*/		return 0x82176754;
		  /* 82176754h */ case    1:  		/* li R9, 0 */
		/* 82176754h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82176754h case    1:*/		return 0x82176758;
		  /* 82176758h */ case    2:  		/* mr R11, R28 */
		/* 82176758h case    2:*/		regs.R11 = regs.R28;
		/* 82176758h case    2:*/		return 0x8217675C;
		  /* 8217675Ch */ case    3:  		/* cntlzw R7, R11 */
		/* 8217675Ch case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R7,regs.R11);
		/* 8217675Ch case    3:*/		return 0x82176760;
		  /* 82176760h */ case    4:  		/* addi R7, R7, 1 */
		/* 82176760h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82176760h case    4:*/		return 0x82176764;
		  /* 82176764h */ case    5:  		/* subfic R7, R7, 32 */
		/* 82176764h case    5:*/		cpu::op::subfic<0>(regs,&regs.R7,regs.R7,0x20);
		/* 82176764h case    5:*/		return 0x82176768;
		  /* 82176768h */ case    6:  		/* rlwnm R7, R25, R7, 0, 31 */
		/* 82176768h case    6:*/		cpu::op::rlwnm<0,0,31>(regs,&regs.R7,regs.R25,regs.R7);
		/* 82176768h case    6:*/		return 0x8217676C;
		  /* 8217676Ch */ case    7:  		/* cntlzw R6, R7 */
		/* 8217676Ch case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R6,regs.R7);
		/* 8217676Ch case    7:*/		return 0x82176770;
		  /* 82176770h */ case    8:  		/* subf. R11, R7, R11 */
		/* 82176770h case    8:*/		cpu::op::subf<1>(regs,&regs.R11,regs.R7,regs.R11);
		/* 82176770h case    8:*/		return 0x82176774;
		  /* 82176774h */ case    9:  		/* subfic R7, R6, 31 */
		/* 82176774h case    9:*/		cpu::op::subfic<0>(regs,&regs.R7,regs.R6,0x1F);
		/* 82176774h case    9:*/		return 0x82176778;
		  /* 82176778h */ case   10:  		/* rlwinm R7, R7, 1, 0, 30 */
		/* 82176778h case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R7,regs.R7);
		/* 82176778h case   10:*/		return 0x8217677C;
		  /* 8217677Ch */ case   11:  		/* srw R7, R31, R7 */
		/* 8217677Ch case   11:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R31,regs.R7);
		/* 8217677Ch case   11:*/		return 0x82176780;
		  /* 82176780h */ case   12:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 82176780h case   12:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 82176780h case   12:*/		return 0x82176784;
		  /* 82176784h */ case   13:  		/* mr R9, R7 */
		/* 82176784h case   13:*/		regs.R9 = regs.R7;
		/* 82176784h case   13:*/		return 0x82176788;
		  /* 82176788h */ case   14:  		/* bc 4, CR0_EQ, -44 */
		/* 82176788h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8217675C;  }
		/* 82176788h case   14:*/		return 0x8217678C;
		  /* 8217678Ch */ case   15:  		/* stw R7, <#[R8]> */
		/* 8217678Ch case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R8 + 0x00000000) );
		/* 8217678Ch case   15:*/		return 0x82176790;
		  /* 82176790h */ case   16:  		/* mr R3, R10 */
		/* 82176790h case   16:*/		regs.R3 = regs.R10;
		/* 82176790h case   16:*/		return 0x82176794;
		  /* 82176794h */ case   17:  		/* b -939264 */
		/* 82176794h case   17:*/		return 0x82091294;
		/* 82176794h case   17:*/		return 0x82176798;
		  /* 82176798h */ case   18:  		/* rldicl R10, R4, 0, 58 */
		/* 82176798h case   18:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R4);
		/* 82176798h case   18:*/		return 0x8217679C;
		  /* 8217679Ch */ case   19:  		/* rlwinm R11, R4, 26, 6, 31 */
		/* 8217679Ch case   19:*/		cpu::op::rlwinm<0,26,6,31>(regs,&regs.R11,regs.R4);
		/* 8217679Ch case   19:*/		return 0x821767A0;
		  /* 821767A0h */ case   20:  		/* li R9, -1 */
		/* 821767A0h case   20:*/		cpu::op::li<0>(regs,&regs.R9,0xFFFFFFFF);
		/* 821767A0h case   20:*/		return 0x821767A4;
		  /* 821767A4h */ case   21:  		/* cmplwi CR6, R11, 4 */
		/* 821767A4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821767A4h case   21:*/		return 0x821767A8;
		  /* 821767A8h */ case   22:  		/* sld R10, R9, R10 */
		/* 821767A8h case   22:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821767A8h case   22:*/		return 0x821767AC;
		  /* 821767ACh */ case   23:  		/* bc 4, CR6_LT, 48 */
		/* 821767ACh case   23:*/		if ( !regs.CR[6].lt ) { return 0x821767DC;  }
		/* 821767ACh case   23:*/		return 0x821767B0;
		  /* 821767B0h */ case   24:  		/* rlwinm R9, R11, 3, 0, 28 */
		/* 821767B0h case   24:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R11);
		/* 821767B0h case   24:*/		return 0x821767B4;
		  /* 821767B4h */ case   25:  		/* add R9, R9, R3 */
		/* 821767B4h case   25:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R3);
		/* 821767B4h case   25:*/		return 0x821767B8;
		  /* 821767B8h */ case   26:  		/* ld R8, <#[R9]> */
		/* 821767B8h case   26:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821767B8h case   26:*/		return 0x821767BC;
		  /* 821767BCh */ case   27:  		/* andc R10, R10, R8 */
		/* 821767BCh case   27:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821767BCh case   27:*/		return 0x821767C0;
		  /* 821767C0h */ case   28:  		/* cmpldi CR6, R10, 0 */
		/* 821767C0h case   28:*/		cpu::op::cmpldi<6>(regs,regs.R10,0x00000000);
		/* 821767C0h case   28:*/		return 0x821767C4;
		  /* 821767C4h */ case   29:  		/* bc 4, CR6_EQ, 32 */
		/* 821767C4h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821767E4;  }
		/* 821767C4h case   29:*/		return 0x821767C8;
		  /* 821767C8h */ case   30:  		/* addi R11, R11, 1 */
		/* 821767C8h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821767C8h case   30:*/		return 0x821767CC;
		  /* 821767CCh */ case   31:  		/* li R10, -1 */
		/* 821767CCh case   31:*/		cpu::op::li<0>(regs,&regs.R10,0xFFFFFFFF);
		/* 821767CCh case   31:*/		return 0x821767D0;
		  /* 821767D0h */ case   32:  		/* addi R9, R9, 8 */
		/* 821767D0h case   32:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x8);
		/* 821767D0h case   32:*/		return 0x821767D4;
		  /* 821767D4h */ case   33:  		/* cmplwi CR6, R11, 4 */
		/* 821767D4h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821767D4h case   33:*/		return 0x821767D8;
		  /* 821767D8h */ case   34:  		/* bc 12, CR6_LT, -32 */
		/* 821767D8h case   34:*/		if ( regs.CR[6].lt ) { return 0x821767B8;  }
		/* 821767D8h case   34:*/		return 0x821767DC;
	}
	return 0x821767DC;
} // Block from 82176750h-821767DCh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821767DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821767DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821767DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821767DC);
		  /* 821767DCh */ case    0:  		/* li R3, -1 */
		/* 821767DCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 821767DCh case    0:*/		return 0x821767E0;
		  /* 821767E0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821767E0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821767E0h case    1:*/		return 0x821767E4;
	}
	return 0x821767E4;
} // Block from 821767DCh-821767E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821767E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821767E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821767E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821767E4);
		  /* 821767E4h */ case    0:  		/* addi R7, R10, -1 */
		/* 821767E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFFF);
		/* 821767E4h case    0:*/		return 0x821767E8;
		  /* 821767E8h */ case    1:  		/* rlwinm R9, R11, 6, 0, 25 */
		/* 821767E8h case    1:*/		cpu::op::rlwinm<0,6,0,25>(regs,&regs.R9,regs.R11);
		/* 821767E8h case    1:*/		return 0x821767EC;
		  /* 821767ECh */ case    2:  		/* andc R11, R10, R7 */
		/* 821767ECh case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R10,regs.R7);
		/* 821767ECh case    2:*/		return 0x821767F0;
		  /* 821767F0h */ case    3:  		/* cntlzd R11, R11 */
		/* 821767F0h case    3:*/		cpu::op::cntlzd<0>(regs,&regs.R11,regs.R11);
		/* 821767F0h case    3:*/		return 0x821767F4;
		  /* 821767F4h */ case    4:  		/* subfic R11, R11, 63 */
		/* 821767F4h case    4:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x3F);
		/* 821767F4h case    4:*/		return 0x821767F8;
		  /* 821767F8h */ case    5:  		/* rlwinm R10, R11, 0, 0, 29 */
		/* 821767F8h case    5:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R10,regs.R11);
		/* 821767F8h case    5:*/		return 0x821767FC;
		  /* 821767FCh */ case    6:  		/* add R3, R9, R11 */
		/* 821767FCh case    6:*/		cpu::op::add<0>(regs,&regs.R3,regs.R9,regs.R11);
		/* 821767FCh case    6:*/		return 0x82176800;
		  /* 82176800h */ case    7:  		/* srd R11, R8, R10 */
		/* 82176800h case    7:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R8,regs.R10);
		/* 82176800h case    7:*/		return 0x82176804;
		  /* 82176804h */ case    8:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 82176804h case    8:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 82176804h case    8:*/		return 0x82176808;
		  /* 82176808h */ case    9:  		/* stw R11, <#[R5]> */
		/* 82176808h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82176808h case    9:*/		return 0x8217680C;
		  /* 8217680Ch */ case   10:  		/* bclr 20, CR0_LT */
		/* 8217680Ch case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8217680Ch case   10:*/		return 0x82176810;
	}
	return 0x82176810;
} // Block from 821767E4h-82176810h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82176810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176810);
		  /* 82176810h */ case    0:  		/* rldicl R10, R4, 0, 58 */
		/* 82176810h case    0:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R10,regs.R4);
		/* 82176810h case    0:*/		return 0x82176814;
		  /* 82176814h */ case    1:  		/* li R9, 2 */
		/* 82176814h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x2);
		/* 82176814h case    1:*/		return 0x82176818;
		  /* 82176818h */ case    2:  		/* rlwinm. R11, R4, 26, 6, 31 */
		/* 82176818h case    2:*/		cpu::op::rlwinm<1,26,6,31>(regs,&regs.R11,regs.R4);
		/* 82176818h case    2:*/		return 0x8217681C;
		  /* 8217681Ch */ case    3:  		/* sld R10, R9, R10 */
		/* 8217681Ch case    3:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8217681Ch case    3:*/		return 0x82176820;
		  /* 82176820h */ case    4:  		/* addi R8, R10, -1 */
		/* 82176820h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFFF);
		/* 82176820h case    4:*/		return 0x82176824;
		  /* 82176824h */ case    5:  		/* bc 12, CR0_LT, 44 */
		/* 82176824h case    5:*/		if ( regs.CR[0].lt ) { return 0x82176850;  }
		/* 82176824h case    5:*/		return 0x82176828;
		  /* 82176828h */ case    6:  		/* rlwinm R10, R11, 3, 0, 28 */
		/* 82176828h case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R11);
		/* 82176828h case    6:*/		return 0x8217682C;
		  /* 8217682Ch */ case    7:  		/* add R10, R10, R3 */
		/* 8217682Ch case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R3);
		/* 8217682Ch case    7:*/		return 0x82176830;
		  /* 82176830h */ case    8:  		/* ld R9, <#[R10]> */
		/* 82176830h case    8:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82176830h case    8:*/		return 0x82176834;
		  /* 82176834h */ case    9:  		/* andc R8, R8, R9 */
		/* 82176834h case    9:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R8,regs.R9);
		/* 82176834h case    9:*/		return 0x82176838;
		  /* 82176838h */ case   10:  		/* cmpldi CR6, R8, 0 */
		/* 82176838h case   10:*/		cpu::op::cmpldi<6>(regs,regs.R8,0x00000000);
		/* 82176838h case   10:*/		return 0x8217683C;
		  /* 8217683Ch */ case   11:  		/* bc 4, CR6_EQ, 28 */
		/* 8217683Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x82176858;  }
		/* 8217683Ch case   11:*/		return 0x82176840;
		  /* 82176840h */ case   12:  		/* addic. R11, R11, -1 */
		/* 82176840h case   12:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82176840h case   12:*/		return 0x82176844;
		  /* 82176844h */ case   13:  		/* li R8, -1 */
		/* 82176844h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 82176844h case   13:*/		return 0x82176848;
		  /* 82176848h */ case   14:  		/* addi R10, R10, -8 */
		/* 82176848h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFF8);
		/* 82176848h case   14:*/		return 0x8217684C;
		  /* 8217684Ch */ case   15:  		/* bc 4, CR0_LT, -28 */
		/* 8217684Ch case   15:*/		if ( !regs.CR[0].lt ) { return 0x82176830;  }
		/* 8217684Ch case   15:*/		return 0x82176850;
	}
	return 0x82176850;
} // Block from 82176810h-82176850h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82176850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176850);
		  /* 82176850h */ case    0:  		/* li R3, -1 */
		/* 82176850h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82176850h case    0:*/		return 0x82176854;
		  /* 82176854h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82176854h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82176854h case    1:*/		return 0x82176858;
	}
	return 0x82176858;
} // Block from 82176850h-82176858h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176858);
		  /* 82176858h */ case    0:  		/* cntlzd R8, R8 */
		/* 82176858h case    0:*/		cpu::op::cntlzd<0>(regs,&regs.R8,regs.R8);
		/* 82176858h case    0:*/		return 0x8217685C;
		  /* 8217685Ch */ case    1:  		/* rlwinm R10, R11, 6, 0, 25 */
		/* 8217685Ch case    1:*/		cpu::op::rlwinm<0,6,0,25>(regs,&regs.R10,regs.R11);
		/* 8217685Ch case    1:*/		return 0x82176860;
		  /* 82176860h */ case    2:  		/* subfic R11, R8, 63 */
		/* 82176860h case    2:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R8,0x3F);
		/* 82176860h case    2:*/		return 0x82176864;
		  /* 82176864h */ case    3:  		/* rlwinm R8, R11, 0, 0, 29 */
		/* 82176864h case    3:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R8,regs.R11);
		/* 82176864h case    3:*/		return 0x82176868;
		  /* 82176868h */ case    4:  		/* add R3, R10, R11 */
		/* 82176868h case    4:*/		cpu::op::add<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82176868h case    4:*/		return 0x8217686C;
		  /* 8217686Ch */ case    5:  		/* srd R11, R9, R8 */
		/* 8217686Ch case    5:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R9,regs.R8);
		/* 8217686Ch case    5:*/		return 0x82176870;
		  /* 82176870h */ case    6:  		/* rlwinm R11, R11, 0, 28, 31 */
		/* 82176870h case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R11);
		/* 82176870h case    6:*/		return 0x82176874;
		  /* 82176874h */ case    7:  		/* stw R11, <#[R5]> */
		/* 82176874h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82176874h case    7:*/		return 0x82176878;
		  /* 82176878h */ case    8:  		/* bclr 20, CR0_LT */
		/* 82176878h case    8:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82176878h case    8:*/		return 0x8217687C;
	}
	return 0x8217687C;
} // Block from 82176858h-8217687Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217687Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217687C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217687C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217687C);
		  /* 8217687Ch */ case    0:  		/* nop */
		/* 8217687Ch case    0:*/		cpu::op::nop();
		/* 8217687Ch case    0:*/		return 0x82176880;
		  /* 82176880h */ case    1:  		/* lwz R11, <#[R3 + 4]> */
		/* 82176880h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82176880h case    1:*/		return 0x82176884;
		  /* 82176884h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82176884h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176884h case    2:*/		return 0x82176888;
		  /* 82176888h */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 82176888h case    3:*/		if ( regs.CR[6].eq ) { return 0x821768BC;  }
		/* 82176888h case    3:*/		return 0x8217688C;
		  /* 8217688Ch */ case    4:  		/* lwz R3, <#[R11 + 16]> */
		/* 8217688Ch case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 8217688Ch case    4:*/		return 0x82176890;
		  /* 82176890h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 82176890h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82176890h case    5:*/		return 0x82176894;
		  /* 82176894h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 82176894h case    6:*/		if ( regs.CR[6].eq ) { return 0x821768B4;  }
		/* 82176894h case    6:*/		return 0x82176898;
		  /* 82176898h */ case    7:  		/* lwz R10, <#[R3 + 8]> */
		/* 82176898h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82176898h case    7:*/		return 0x8217689C;
		  /* 8217689Ch */ case    8:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8217689Ch case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8217689Ch case    8:*/		return 0x821768A0;
		  /* 821768A0h */ case    9:  		/* cmplwi CR6, R10, 14080 */
		/* 821768A0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821768A0h case    9:*/		return 0x821768A4;
		  /* 821768A4h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 821768A4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821768B4;  }
		/* 821768A4h case   10:*/		return 0x821768A8;
		  /* 821768A8h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821768A8h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821768A8h case   11:*/		return 0x821768AC;
		  /* 821768ACh */ case   12:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821768ACh case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821768ACh case   12:*/		return 0x821768B0;
		  /* 821768B0h */ case   13:  		/* bclr 4, CR0_EQ */
		/* 821768B0h case   13:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 821768B0h case   13:*/		return 0x821768B4;
	}
	return 0x821768B4;
} // Block from 8217687Ch-821768B4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821768B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821768B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821768B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821768B4);
		  /* 821768B4h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821768B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821768B4h case    0:*/		return 0x821768B8;
		  /* 821768B8h */ case    1:  		/* b -52 */
		/* 821768B8h case    1:*/		return 0x82176884;
		/* 821768B8h case    1:*/		return 0x821768BC;
	}
	return 0x821768BC;
} // Block from 821768B4h-821768BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821768BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821768BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821768BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821768BC);
		  /* 821768BCh */ case    0:  		/* li R3, 0 */
		/* 821768BCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821768BCh case    0:*/		return 0x821768C0;
		  /* 821768C0h */ case    1:  		/* bclr 20, CR0_LT */
		/* 821768C0h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821768C0h case    1:*/		return 0x821768C4;
	}
	return 0x821768C4;
} // Block from 821768BCh-821768C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821768C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821768C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821768C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821768C4);
		  /* 821768C4h */ case    0:  		/* nop */
		/* 821768C4h case    0:*/		cpu::op::nop();
		/* 821768C4h case    0:*/		return 0x821768C8;
	}
	return 0x821768C8;
} // Block from 821768C4h-821768C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821768C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821768C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821768C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821768C8);
		  /* 821768C8h */ case    0:  		/* mfspr R12, LR */
		/* 821768C8h case    0:*/		regs.R12 = regs.LR;
		/* 821768C8h case    0:*/		return 0x821768CC;
		  /* 821768CCh */ case    1:  		/* bl -939632 */
		/* 821768CCh case    1:*/		regs.LR = 0x821768D0; return 0x8209125C;
		/* 821768CCh case    1:*/		return 0x821768D0;
		  /* 821768D0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821768D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821768D0h case    2:*/		return 0x821768D4;
		  /* 821768D4h */ case    3:  		/* mr R30, R3 */
		/* 821768D4h case    3:*/		regs.R30 = regs.R3;
		/* 821768D4h case    3:*/		return 0x821768D8;
		  /* 821768D8h */ case    4:  		/* mr R31, R5 */
		/* 821768D8h case    4:*/		regs.R31 = regs.R5;
		/* 821768D8h case    4:*/		return 0x821768DC;
		  /* 821768DCh */ case    5:  		/* mr R29, R6 */
		/* 821768DCh case    5:*/		regs.R29 = regs.R6;
		/* 821768DCh case    5:*/		return 0x821768E0;
		  /* 821768E0h */ case    6:  		/* rlwinm R4, R4, 2, 0, 29 */
		/* 821768E0h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R4);
		/* 821768E0h case    6:*/		return 0x821768E4;
		  /* 821768E4h */ case    7:  		/* cmpwi CR6, R29, 0 */
		/* 821768E4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R29,0x00000000);
		/* 821768E4h case    7:*/		return 0x821768E8;
		  /* 821768E8h */ case    8:  		/* addi R5, R1, 80 */
		/* 821768E8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821768E8h case    8:*/		return 0x821768EC;
		  /* 821768ECh */ case    9:  		/* addi R3, R30, 8 */
		/* 821768ECh case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R30,0x8);
		/* 821768ECh case    9:*/		return 0x821768F0;
		  /* 821768F0h */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 821768F0h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821768FC;  }
		/* 821768F0h case   10:*/		return 0x821768F4;
		  /* 821768F4h */ case   11:  		/* bl -348 */
		/* 821768F4h case   11:*/		regs.LR = 0x821768F8; return 0x82176798;
		/* 821768F4h case   11:*/		return 0x821768F8;
		  /* 821768F8h */ case   12:  		/* b 12 */
		/* 821768F8h case   12:*/		return 0x82176904;
		/* 821768F8h case   12:*/		return 0x821768FC;
	}
	return 0x821768FC;
} // Block from 821768C8h-821768FCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821768FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821768FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821768FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821768FC);
		  /* 821768FCh */ case    0:  		/* addi R4, R4, 3 */
		/* 821768FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x3);
		/* 821768FCh case    0:*/		return 0x82176900;
		  /* 82176900h */ case    1:  		/* bl -240 */
		/* 82176900h case    1:*/		regs.LR = 0x82176904; return 0x82176810;
		/* 82176900h case    1:*/		return 0x82176904;
	}
	return 0x82176904;
} // Block from 821768FCh-82176904h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176904h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176904( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176904) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176904);
		  /* 82176904h */ case    0:  		/* cmpwi CR6, R3, -1 */
		/* 82176904h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82176904h case    0:*/		return 0x82176908;
		  /* 82176908h */ case    1:  		/* bc 12, CR6_EQ, 80 */
		/* 82176908h case    1:*/		if ( regs.CR[6].eq ) { return 0x82176958;  }
		/* 82176908h case    1:*/		return 0x8217690C;
		  /* 8217690Ch */ case    2:  		/* cmplwi CR6, R31, 1 */
		/* 8217690Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 8217690Ch case    2:*/		return 0x82176910;
		  /* 82176910h */ case    3:  		/* bc 12, CR6_EQ, 84 */
		/* 82176910h case    3:*/		if ( regs.CR[6].eq ) { return 0x82176964;  }
		/* 82176910h case    3:*/		return 0x82176914;
		  /* 82176914h */ case    4:  		/* lis R10, -27863 */
		/* 82176914h case    4:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF9329);
		/* 82176914h case    4:*/		return 0x82176918;
		  /* 82176918h */ case    5:  		/* lwz R11, <#[R1 + 80]> */
		/* 82176918h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82176918h case    5:*/		return 0x8217691C;
		  /* 8217691Ch */ case    6:  		/* li R9, 1186 */
		/* 8217691Ch case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x4A2);
		/* 8217691Ch case    6:*/		return 0x82176920;
		  /* 82176920h */ case    7:  		/* ori R10, R10, 13532 */
		/* 82176920h case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x34DC);
		/* 82176920h case    7:*/		return 0x82176924;
		  /* 82176924h */ case    8:  		/* mr R8, R11 */
		/* 82176924h case    8:*/		regs.R8 = regs.R11;
		/* 82176924h case    8:*/		return 0x82176928;
		  /* 82176928h */ case    9:  		/* rldimi R10, R9, 32, 0 */
		/* 82176928h case    9:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R10,regs.R9);
		/* 82176928h case    9:*/		return 0x8217692C;
		  /* 8217692Ch */ case   10:  		/* srd R10, R10, R11 */
		/* 8217692Ch case   10:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8217692Ch case   10:*/		return 0x82176930;
		  /* 82176930h */ case   11:  		/* srd R10, R10, R11 */
		/* 82176930h case   11:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82176930h case   11:*/		return 0x82176934;
		  /* 82176934h */ case   12:  		/* srd R10, R10, R11 */
		/* 82176934h case   12:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82176934h case   12:*/		return 0x82176938;
		  /* 82176938h */ case   13:  		/* rlwinm R10, R10, 0, 29, 31 */
		/* 82176938h case   13:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R10);
		/* 82176938h case   13:*/		return 0x8217693C;
		  /* 8217693Ch */ case   14:  		/* cmplw CR6, R10, R31 */
		/* 8217693Ch case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 8217693Ch case   14:*/		return 0x82176940;
		  /* 82176940h */ case   15:  		/* bc 4, CR6_LT, 52 */
		/* 82176940h case   15:*/		if ( !regs.CR[6].lt ) { return 0x82176974;  }
		/* 82176940h case   15:*/		return 0x82176944;
		  /* 82176944h */ case   16:  		/* add R11, R3, R29 */
		/* 82176944h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R29);
		/* 82176944h case   16:*/		return 0x82176948;
		  /* 82176948h */ case   17:  		/* rlwinm R4, R11, 0, 0, 29 */
		/* 82176948h case   17:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R4,regs.R11);
		/* 82176948h case   17:*/		return 0x8217694C;
		  /* 8217694Ch */ case   18:  		/* add R11, R4, R31 */
		/* 8217694Ch case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R4,regs.R31);
		/* 8217694Ch case   18:*/		return 0x82176950;
		  /* 82176950h */ case   19:  		/* cmplwi CR6, R11, 256 */
		/* 82176950h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 82176950h case   19:*/		return 0x82176954;
		  /* 82176954h */ case   20:  		/* bc 4, CR6_GT, -112 */
		/* 82176954h case   20:*/		if ( !regs.CR[6].gt ) { return 0x821768E4;  }
		/* 82176954h case   20:*/		return 0x82176958;
	}
	return 0x82176958;
} // Block from 82176904h-82176958h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82176958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176958);
		  /* 82176958h */ case    0:  		/* li R3, -1 */
		/* 82176958h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 82176958h case    0:*/		return 0x8217695C;
		  /* 8217695Ch */ case    1:  		/* addi R1, R1, 128 */
		/* 8217695Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217695Ch case    1:*/		return 0x82176960;
		  /* 82176960h */ case    2:  		/* b -939700 */
		/* 82176960h case    2:*/		return 0x820912AC;
		/* 82176960h case    2:*/		return 0x82176964;
	}
	return 0x82176964;
} // Block from 82176958h-82176964h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82176964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176964);
		  /* 82176964h */ case    0:  		/* rlwinm R11, R3, 0, 30, 31 */
		/* 82176964h case    0:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R3);
		/* 82176964h case    0:*/		return 0x82176968;
		  /* 82176968h */ case    1:  		/* li R10, 1 */
		/* 82176968h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82176968h case    1:*/		return 0x8217696C;
		  /* 8217696Ch */ case    2:  		/* slw R11, R10, R11 */
		/* 8217696Ch case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217696Ch case    2:*/		return 0x82176970;
		  /* 82176970h */ case    3:  		/* b 8 */
		/* 82176970h case    3:*/		return 0x82176978;
		/* 82176970h case    3:*/		return 0x82176974;
	}
	return 0x82176974;
} // Block from 82176964h-82176974h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82176974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176974);
		  /* 82176974h */ case    0:  		/* nor R11, R11, R11 */
		/* 82176974h case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82176974h case    0:*/		return 0x82176978;
	}
	return 0x82176978;
} // Block from 82176974h-82176978h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82176978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176978);
		  /* 82176978h */ case    0:  		/* rlwimi R11, R3, 2, 0, 27 */
		/* 82176978h case    0:*/		cpu::op::rlwimi<0,2,0,27>(regs,&regs.R11,regs.R3);
		/* 82176978h case    0:*/		return 0x8217697C;
		  /* 8217697Ch */ case    1:  		/* mr R3, R11 */
		/* 8217697Ch case    1:*/		regs.R3 = regs.R11;
		/* 8217697Ch case    1:*/		return 0x82176980;
		  /* 82176980h */ case    2:  		/* b -36 */
		/* 82176980h case    2:*/		return 0x8217695C;
		/* 82176980h case    2:*/		return 0x82176984;
		  /* 82176984h */ case    3:  		/* nop */
		/* 82176984h case    3:*/		cpu::op::nop();
		/* 82176984h case    3:*/		return 0x82176988;
	}
	return 0x82176988;
} // Block from 82176978h-82176988h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82176988h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176988( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176988) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176988);
		  /* 82176988h */ case    0:  		/* mfspr R12, LR */
		/* 82176988h case    0:*/		regs.R12 = regs.LR;
		/* 82176988h case    0:*/		return 0x8217698C;
		  /* 8217698Ch */ case    1:  		/* bl -939828 */
		/* 8217698Ch case    1:*/		regs.LR = 0x82176990; return 0x82091258;
		/* 8217698Ch case    1:*/		return 0x82176990;
		  /* 82176990h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82176990h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82176990h case    2:*/		return 0x82176994;
		  /* 82176994h */ case    3:  		/* mr R28, R5 */
		/* 82176994h case    3:*/		regs.R28 = regs.R5;
		/* 82176994h case    3:*/		return 0x82176998;
		  /* 82176998h */ case    4:  		/* mr R29, R4 */
		/* 82176998h case    4:*/		regs.R29 = regs.R4;
		/* 82176998h case    4:*/		return 0x8217699C;
		  /* 8217699Ch */ case    5:  		/* mr R5, R4 */
		/* 8217699Ch case    5:*/		regs.R5 = regs.R4;
		/* 8217699Ch case    5:*/		return 0x821769A0;
		  /* 821769A0h */ case    6:  		/* li R6, 4 */
		/* 821769A0h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821769A0h case    6:*/		return 0x821769A4;
		  /* 821769A4h */ case    7:  		/* li R4, 0 */
		/* 821769A4h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821769A4h case    7:*/		return 0x821769A8;
		  /* 821769A8h */ case    8:  		/* mr R30, R3 */
		/* 821769A8h case    8:*/		regs.R30 = regs.R3;
		/* 821769A8h case    8:*/		return 0x821769AC;
		  /* 821769ACh */ case    9:  		/* bl -228 */
		/* 821769ACh case    9:*/		regs.LR = 0x821769B0; return 0x821768C8;
		/* 821769ACh case    9:*/		return 0x821769B0;
		  /* 821769B0h */ case   10:  		/* mr R31, R3 */
		/* 821769B0h case   10:*/		regs.R31 = regs.R3;
		/* 821769B0h case   10:*/		return 0x821769B4;
		  /* 821769B4h */ case   11:  		/* cmpwi CR6, R3, -1 */
		/* 821769B4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821769B4h case   11:*/		return 0x821769B8;
		  /* 821769B8h */ case   12:  		/* bc 4, CR6_EQ, 52 */
		/* 821769B8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821769EC;  }
		/* 821769B8h case   12:*/		return 0x821769BC;
		  /* 821769BCh */ case   13:  		/* rlwinm. R11, R28, 0, 24, 31 */
		/* 821769BCh case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R28);
		/* 821769BCh case   13:*/		return 0x821769C0;
		  /* 821769C0h */ case   14:  		/* bc 12, CR0_EQ, 36 */
		/* 821769C0h case   14:*/		if ( regs.CR[0].eq ) { return 0x821769E4;  }
		/* 821769C0h case   14:*/		return 0x821769C4;
		  /* 821769C4h */ case   15:  		/* lwz R3, <#[R30]> */
		/* 821769C4h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821769C4h case   15:*/		return 0x821769C8;
		  /* 821769C8h */ case   16:  		/* lwz R11, <#[R3 + 792]> */
		/* 821769C8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000318) );
		/* 821769C8h case   16:*/		return 0x821769CC;
		  /* 821769CCh */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821769CCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821769CCh case   17:*/		return 0x821769D0;
		  /* 821769D0h */ case   18:  		/* bc 12, CR6_EQ, 12 */
		/* 821769D0h case   18:*/		if ( regs.CR[6].eq ) { return 0x821769DC;  }
		/* 821769D0h case   18:*/		return 0x821769D4;
		  /* 821769D4h */ case   19:  		/* li R4, 3518 */
		/* 821769D4h case   19:*/		cpu::op::li<0>(regs,&regs.R4,0xDBE);
		/* 821769D4h case   19:*/		return 0x821769D8;
		  /* 821769D8h */ case   20:  		/* bl -150384 */
		/* 821769D8h case   20:*/		regs.LR = 0x821769DC; return 0x82151E68;
		/* 821769D8h case   20:*/		return 0x821769DC;
	}
	return 0x821769DC;
} // Block from 82176988h-821769DCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 821769DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821769DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821769DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821769DC);
		  /* 821769DCh */ case    0:  		/* li R4, 3565 */
		/* 821769DCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDED);
		/* 821769DCh case    0:*/		return 0x821769E0;
	}
	return 0x821769E0;
} // Block from 821769DCh-821769E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821769E0h
// Function '?OptimizeRegisterUsage@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821769E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821769E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821769E0);
		  /* 821769E0h */ case    0:  		/* bl -150392 */
		/* 821769E0h case    0:*/		regs.LR = 0x821769E4; return 0x82151E68;
		/* 821769E0h case    0:*/		return 0x821769E4;
	}
	return 0x821769E4;
} // Block from 821769E0h-821769E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821769E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821769E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821769E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821769E4);
		  /* 821769E4h */ case    0:  		/* li R3, -1 */
		/* 821769E4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 821769E4h case    0:*/		return 0x821769E8;
		  /* 821769E8h */ case    1:  		/* b 60 */
		/* 821769E8h case    1:*/		return 0x82176A24;
		/* 821769E8h case    1:*/		return 0x821769EC;
	}
	return 0x821769EC;
} // Block from 821769E4h-821769ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821769ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821769EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821769EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821769EC);
		  /* 821769ECh */ case    0:  		/* mr R4, R29 */
		/* 821769ECh case    0:*/		regs.R4 = regs.R29;
		/* 821769ECh case    0:*/		return 0x821769F0;
		  /* 821769F0h */ case    1:  		/* rlwinm R3, R31, 0, 28, 31 */
		/* 821769F0h case    1:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R3,regs.R31);
		/* 821769F0h case    1:*/		return 0x821769F4;
		  /* 821769F4h */ case    2:  		/* rlwinm R29, R31, 30, 2, 29 */
		/* 821769F4h case    2:*/		cpu::op::rlwinm<0,30,2,29>(regs,&regs.R29,regs.R31);
		/* 821769F4h case    2:*/		return 0x821769F8;
		  /* 821769F8h */ case    3:  		/* bl -23864 */
		/* 821769F8h case    3:*/		regs.LR = 0x821769FC; return 0x82170CC0;
		/* 821769F8h case    3:*/		return 0x821769FC;
		  /* 821769FCh */ case    4:  		/* rlwinm R11, R31, 24, 8, 31 */
		/* 821769FCh case    4:*/		cpu::op::rlwinm<0,24,8,31>(regs,&regs.R11,regs.R31);
		/* 821769FCh case    4:*/		return 0x82176A00;
		  /* 82176A00h */ case    5:  		/* rldicl R10, R3, 0, 32 */
		/* 82176A00h case    5:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R10,regs.R3);
		/* 82176A00h case    5:*/		return 0x82176A04;
		  /* 82176A04h */ case    6:  		/* addi R11, R11, 1 */
		/* 82176A04h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82176A04h case    6:*/		return 0x82176A08;
		  /* 82176A08h */ case    7:  		/* rldicl R9, R29, 0, 58 */
		/* 82176A08h case    7:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R29);
		/* 82176A08h case    7:*/		return 0x82176A0C;
		  /* 82176A0Ch */ case    8:  		/* rlwinm R11, R11, 3, 0, 28 */
		/* 82176A0Ch case    8:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R11);
		/* 82176A0Ch case    8:*/		return 0x82176A10;
		  /* 82176A10h */ case    9:  		/* sld R10, R10, R9 */
		/* 82176A10h case    9:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82176A10h case    9:*/		return 0x82176A14;
		  /* 82176A14h */ case   10:  		/* ldx R9, <#[R11 + R30]> */
		/* 82176A14h case   10:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82176A14h case   10:*/		return 0x82176A18;
		  /* 82176A18h */ case   11:  		/* rlwimi R3, R31, 0, 0, 27 */
		/* 82176A18h case   11:*/		cpu::op::rlwimi<0,0,0,27>(regs,&regs.R3,regs.R31);
		/* 82176A18h case   11:*/		return 0x82176A1C;
		  /* 82176A1Ch */ case   12:  		/* or R10, R10, R9 */
		/* 82176A1Ch case   12:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82176A1Ch case   12:*/		return 0x82176A20;
		  /* 82176A20h */ case   13:  		/* stdx R10, <#[R11 + R30]> */
		/* 82176A20h case   13:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 82176A20h case   13:*/		return 0x82176A24;
	}
	return 0x82176A24;
} // Block from 821769ECh-82176A24h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82176A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176A24);
		  /* 82176A24h */ case    0:  		/* addi R1, R1, 128 */
		/* 82176A24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82176A24h case    0:*/		return 0x82176A28;
		  /* 82176A28h */ case    1:  		/* b -939904 */
		/* 82176A28h case    1:*/		return 0x820912A8;
		/* 82176A28h case    1:*/		return 0x82176A2C;
		  /* 82176A2Ch */ case    2:  		/* nop */
		/* 82176A2Ch case    2:*/		cpu::op::nop();
		/* 82176A2Ch case    2:*/		return 0x82176A30;
	}
	return 0x82176A30;
} // Block from 82176A24h-82176A30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82176A30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176A30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176A30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176A30);
		  /* 82176A30h */ case    0:  		/* mfspr R12, LR */
		/* 82176A30h case    0:*/		regs.R12 = regs.LR;
		/* 82176A30h case    0:*/		return 0x82176A34;
		  /* 82176A34h */ case    1:  		/* bl -940040 */
		/* 82176A34h case    1:*/		regs.LR = 0x82176A38; return 0x8209122C;
		/* 82176A34h case    1:*/		return 0x82176A38;
		  /* 82176A38h */ case    2:  		/* stwu R1, <#[R1 - 496]> */
		/* 82176A38h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE10);
		/* 82176A38h case    2:*/		return 0x82176A3C;
		  /* 82176A3Ch */ case    3:  		/* mr R18, R3 */
		/* 82176A3Ch case    3:*/		regs.R18 = regs.R3;
		/* 82176A3Ch case    3:*/		return 0x82176A40;
		  /* 82176A40h */ case    4:  		/* mr R29, R4 */
		/* 82176A40h case    4:*/		regs.R29 = regs.R4;
		/* 82176A40h case    4:*/		return 0x82176A44;
		  /* 82176A44h */ case    5:  		/* mr R23, R5 */
		/* 82176A44h case    5:*/		regs.R23 = regs.R5;
		/* 82176A44h case    5:*/		return 0x82176A48;
		  /* 82176A48h */ case    6:  		/* mr R25, R6 */
		/* 82176A48h case    6:*/		regs.R25 = regs.R6;
		/* 82176A48h case    6:*/		return 0x82176A4C;
		  /* 82176A4Ch */ case    7:  		/* mr R17, R7 */
		/* 82176A4Ch case    7:*/		regs.R17 = regs.R7;
		/* 82176A4Ch case    7:*/		return 0x82176A50;
		  /* 82176A50h */ case    8:  		/* addi R30, R1, 208 */
		/* 82176A50h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0xD0);
		/* 82176A50h case    8:*/		return 0x82176A54;
		  /* 82176A54h */ case    9:  		/* li R28, 4 */
		/* 82176A54h case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x4);
		/* 82176A54h case    9:*/		return 0x82176A58;
		  /* 82176A58h */ case   10:  		/* li R22, 0 */
		/* 82176A58h case   10:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82176A58h case   10:*/		return 0x82176A5C;
		  /* 82176A5Ch */ case   11:  		/* stw R18, <#[R30]> */
		/* 82176A5Ch case   11:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R30 + 0x00000000) );
		/* 82176A5Ch case   11:*/		return 0x82176A60;
		  /* 82176A60h */ case   12:  		/* addi R31, R30, 8 */
		/* 82176A60h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x8);
		/* 82176A60h case   12:*/		return 0x82176A64;
		  /* 82176A64h */ case   13:  		/* lwz R11, <#[R18 + 792]> */
		/* 82176A64h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000318) );
		/* 82176A64h case   13:*/		return 0x82176A68;
		  /* 82176A68h */ case   14:  		/* std R22, <#[R30 + 8]> */
		/* 82176A68h case   14:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R30 + 0x00000008) );
		/* 82176A68h case   14:*/		return 0x82176A6C;
		  /* 82176A6Ch */ case   15:  		/* std R22, <#[R30 + 16]> */
		/* 82176A6Ch case   15:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R30 + 0x00000010) );
		/* 82176A6Ch case   15:*/		return 0x82176A70;
		  /* 82176A70h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 82176A70h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176A70h case   16:*/		return 0x82176A74;
		  /* 82176A74h */ case   17:  		/* std R22, <#[R30 + 24]> */
		/* 82176A74h case   17:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R30 + 0x00000018) );
		/* 82176A74h case   17:*/		return 0x82176A78;
		  /* 82176A78h */ case   18:  		/* std R22, <#[R30 + 32]> */
		/* 82176A78h case   18:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R30 + 0x00000020) );
		/* 82176A78h case   18:*/		return 0x82176A7C;
		  /* 82176A7Ch */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 82176A7Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x82176A84;  }
		/* 82176A7Ch case   19:*/		return 0x82176A80;
		  /* 82176A80h */ case   20:  		/* li R11, 32 */
		/* 82176A80h case   20:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82176A80h case   20:*/		return 0x82176A84;
	}
	return 0x82176A84;
} // Block from 82176A30h-82176A84h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82176A84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176A84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176A84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176A84);
		  /* 82176A84h */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 82176A84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82176A84h case    0:*/		return 0x82176A88;
		  /* 82176A88h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 82176A88h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82176A9C;  }
		/* 82176A88h case    1:*/		return 0x82176A8C;
		  /* 82176A8Ch */ case    2:  		/* subfic R5, R11, 64 */
		/* 82176A8Ch case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 82176A8Ch case    2:*/		return 0x82176A90;
		  /* 82176A90h */ case    3:  		/* mr R4, R11 */
		/* 82176A90h case    3:*/		regs.R4 = regs.R11;
		/* 82176A90h case    3:*/		return 0x82176A94;
		  /* 82176A94h */ case    4:  		/* mr R3, R30 */
		/* 82176A94h case    4:*/		regs.R3 = regs.R30;
		/* 82176A94h case    4:*/		return 0x82176A98;
		  /* 82176A98h */ case    5:  		/* bl -30144 */
		/* 82176A98h case    5:*/		regs.LR = 0x82176A9C; return 0x8216F4D8;
		/* 82176A98h case    5:*/		return 0x82176A9C;
	}
	return 0x82176A9C;
} // Block from 82176A84h-82176A9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82176A9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176A9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176A9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176A9C);
		  /* 82176A9Ch */ case    0:  		/* ld R11, <#[R29 + 8]> */
		/* 82176A9Ch case    0:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82176A9Ch case    0:*/		return 0x82176AA0;
		  /* 82176AA0h */ case    1:  		/* addic. R28, R28, -1 */
		/* 82176AA0h case    1:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 82176AA0h case    1:*/		return 0x82176AA4;
		  /* 82176AA4h */ case    2:  		/* ld R10, <#[R29 + 16]> */
		/* 82176AA4h case    2:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 82176AA4h case    2:*/		return 0x82176AA8;
		  /* 82176AA8h */ case    3:  		/* addi R30, R30, 40 */
		/* 82176AA8h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x28);
		/* 82176AA8h case    3:*/		return 0x82176AAC;
		  /* 82176AACh */ case    4:  		/* ld R9, <#[R29 + 24]> */
		/* 82176AACh case    4:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R29 + 0x00000018) );
		/* 82176AACh case    4:*/		return 0x82176AB0;
		  /* 82176AB0h */ case    5:  		/* ld R8, <#[R29 + 32]> */
		/* 82176AB0h case    5:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R29 + 0x00000020) );
		/* 82176AB0h case    5:*/		return 0x82176AB4;
		  /* 82176AB4h */ case    6:  		/* std R11, <#[R31]> */
		/* 82176AB4h case    6:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82176AB4h case    6:*/		return 0x82176AB8;
		  /* 82176AB8h */ case    7:  		/* std R10, <#[R31 + 8]> */
		/* 82176AB8h case    7:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82176AB8h case    7:*/		return 0x82176ABC;
		  /* 82176ABCh */ case    8:  		/* std R9, <#[R31 + 16]> */
		/* 82176ABCh case    8:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R31 + 0x00000010) );
		/* 82176ABCh case    8:*/		return 0x82176AC0;
		  /* 82176AC0h */ case    9:  		/* std R8, <#[R31 + 24]> */
		/* 82176AC0h case    9:*/		cpu::mem::store64( regs, regs.R8, (uint32)(regs.R31 + 0x00000018) );
		/* 82176AC0h case    9:*/		return 0x82176AC4;
		  /* 82176AC4h */ case   10:  		/* bc 4, CR0_EQ, -104 */
		/* 82176AC4h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82176A5C;  }
		/* 82176AC4h case   10:*/		return 0x82176AC8;
		  /* 82176AC8h */ case   11:  		/* mr R24, R22 */
		/* 82176AC8h case   11:*/		regs.R24 = regs.R22;
		/* 82176AC8h case   11:*/		return 0x82176ACC;
		  /* 82176ACCh */ case   12:  		/* mr R26, R22 */
		/* 82176ACCh case   12:*/		regs.R26 = regs.R22;
		/* 82176ACCh case   12:*/		return 0x82176AD0;
		  /* 82176AD0h */ case   13:  		/* addi R27, R1, 208 */
		/* 82176AD0h case   13:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0xD0);
		/* 82176AD0h case   13:*/		return 0x82176AD4;
		  /* 82176AD4h */ case   14:  		/* li R20, 1 */
		/* 82176AD4h case   14:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 82176AD4h case   14:*/		return 0x82176AD8;
		  /* 82176AD8h */ case   15:  		/* li R19, 2 */
		/* 82176AD8h case   15:*/		cpu::op::li<0>(regs,&regs.R19,0x2);
		/* 82176AD8h case   15:*/		return 0x82176ADC;
		  /* 82176ADCh */ case   16:  		/* li R21, -1 */
		/* 82176ADCh case   16:*/		cpu::op::li<0>(regs,&regs.R21,0xFFFFFFFF);
		/* 82176ADCh case   16:*/		return 0x82176AE0;
		  /* 82176AE0h */ case   17:  		/* lwz R11, <#[R25 + 8]> */
		/* 82176AE0h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 82176AE0h case   17:*/		return 0x82176AE4;
		  /* 82176AE4h */ case   18:  		/* slw R29, R20, R24 */
		/* 82176AE4h case   18:*/		cpu::op::slw<0>(regs,&regs.R29,regs.R20,regs.R24);
		/* 82176AE4h case   18:*/		return 0x82176AE8;
		  /* 82176AE8h */ case   19:  		/* rlwinm R11, R11, 0, 27, 30 */
		/* 82176AE8h case   19:*/		cpu::op::rlwinm<0,0,27,30>(regs,&regs.R11,regs.R11);
		/* 82176AE8h case   19:*/		return 0x82176AEC;
		  /* 82176AECh */ case   20:  		/* cntlzw R11, R11 */
		/* 82176AECh case   20:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 82176AECh case   20:*/		return 0x82176AF0;
		  /* 82176AF0h */ case   21:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 82176AF0h case   21:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82176AF0h case   21:*/		return 0x82176AF4;
		  /* 82176AF4h */ case   22:  		/* and. R11, R11, R29 */
		/* 82176AF4h case   22:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R29);
		/* 82176AF4h case   22:*/		return 0x82176AF8;
		  /* 82176AF8h */ case   23:  		/* bc 4, CR0_EQ, 920 */
		/* 82176AF8h case   23:*/		if ( !regs.CR[0].eq ) { return 0x82176E90;  }
		/* 82176AF8h case   23:*/		return 0x82176AFC;
		  /* 82176AFCh */ case   24:  		/* lwz R30, <#[R25 + 4]> */
		/* 82176AFCh case   24:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000004) );
		/* 82176AFCh case   24:*/		return 0x82176B00;
		  /* 82176B00h */ case   25:  		/* mr R28, R22 */
		/* 82176B00h case   25:*/		regs.R28 = regs.R22;
		/* 82176B00h case   25:*/		return 0x82176B04;
		  /* 82176B04h */ case   26:  		/* cmplwi CR6, R30, 0 */
		/* 82176B04h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82176B04h case   26:*/		return 0x82176B08;
		  /* 82176B08h */ case   27:  		/* bc 12, CR6_EQ, 140 */
		/* 82176B08h case   27:*/		if ( regs.CR[6].eq ) { return 0x82176B94;  }
		/* 82176B08h case   27:*/		return 0x82176B0C;
		  /* 82176B0Ch */ case   28:  		/* lwz R31, <#[R30 + 16]> */
		/* 82176B0Ch case   28:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000010) );
		/* 82176B0Ch case   28:*/		return 0x82176B10;
		  /* 82176B10h */ case   29:  		/* cmplwi CR6, R31, 0 */
		/* 82176B10h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82176B10h case   29:*/		return 0x82176B14;
		  /* 82176B14h */ case   30:  		/* bc 12, CR6_EQ, 120 */
		/* 82176B14h case   30:*/		if ( regs.CR[6].eq ) { return 0x82176B8C;  }
		/* 82176B14h case   30:*/		return 0x82176B18;
		  /* 82176B18h */ case   31:  		/* lwz R7, <#[R30]> */
		/* 82176B18h case   31:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 82176B18h case   31:*/		return 0x82176B1C;
		  /* 82176B1Ch */ case   32:  		/* rlwinm. R8, R7, 7, 29, 31 */
		/* 82176B1Ch case   32:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R8,regs.R7);
		/* 82176B1Ch case   32:*/		return 0x82176B20;
		  /* 82176B20h */ case   33:  		/* bc 12, CR0_EQ, 108 */
		/* 82176B20h case   33:*/		if ( regs.CR[0].eq ) { return 0x82176B8C;  }
		/* 82176B20h case   33:*/		return 0x82176B24;
		  /* 82176B24h */ case   34:  		/* mr R9, R22 */
		/* 82176B24h case   34:*/		regs.R9 = regs.R22;
		/* 82176B24h case   34:*/		return 0x82176B28;
		  /* 82176B28h */ case   35:  		/* mr R11, R22 */
		/* 82176B28h case   35:*/		regs.R11 = regs.R22;
		/* 82176B28h case   35:*/		return 0x82176B2C;
		  /* 82176B2Ch */ case   36:  		/* cmplwi CR6, R8, 0 */
		/* 82176B2Ch case   36:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82176B2Ch case   36:*/		return 0x82176B30;
		  /* 82176B30h */ case   37:  		/* bc 12, CR6_EQ, 44 */
		/* 82176B30h case   37:*/		if ( regs.CR[6].eq ) { return 0x82176B5C;  }
		/* 82176B30h case   37:*/		return 0x82176B34;
		  /* 82176B34h */ case   38:  		/* mr R10, R22 */
		/* 82176B34h case   38:*/		regs.R10 = regs.R22;
		/* 82176B34h case   38:*/		return 0x82176B38;
		  /* 82176B38h */ case   39:  		/* rlwinm R6, R7, 27, 24, 31 */
		/* 82176B38h case   39:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R7);
		/* 82176B38h case   39:*/		return 0x82176B3C;
		  /* 82176B3Ch */ case   40:  		/* addi R11, R11, 1 */
		/* 82176B3Ch case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82176B3Ch case   40:*/		return 0x82176B40;
		  /* 82176B40h */ case   41:  		/* srw R6, R6, R10 */
		/* 82176B40h case   41:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R6,regs.R10);
		/* 82176B40h case   41:*/		return 0x82176B44;
		  /* 82176B44h */ case   42:  		/* rlwinm R6, R6, 0, 30, 31 */
		/* 82176B44h case   42:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R6,regs.R6);
		/* 82176B44h case   42:*/		return 0x82176B48;
		  /* 82176B48h */ case   43:  		/* addi R10, R10, 2 */
		/* 82176B48h case   43:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 82176B48h case   43:*/		return 0x82176B4C;
		  /* 82176B4Ch */ case   44:  		/* slw R6, R20, R6 */
		/* 82176B4Ch case   44:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R20,regs.R6);
		/* 82176B4Ch case   44:*/		return 0x82176B50;
		  /* 82176B50h */ case   45:  		/* or R9, R6, R9 */
		/* 82176B50h case   45:*/		cpu::op::or<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 82176B50h case   45:*/		return 0x82176B54;
		  /* 82176B54h */ case   46:  		/* cmplw CR6, R11, R8 */
		/* 82176B54h case   46:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82176B54h case   46:*/		return 0x82176B58;
		  /* 82176B58h */ case   47:  		/* bc 12, CR6_LT, -32 */
		/* 82176B58h case   47:*/		if ( regs.CR[6].lt ) { return 0x82176B38;  }
		/* 82176B58h case   47:*/		return 0x82176B5C;
	}
	return 0x82176B5C;
} // Block from 82176A9Ch-82176B5Ch (48 instructions)

//////////////////////////////////////////////////////
// Block at 82176B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176B5C);
		  /* 82176B5Ch */ case    0:  		/* and. R11, R9, R29 */
		/* 82176B5Ch case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R29);
		/* 82176B5Ch case    0:*/		return 0x82176B60;
		  /* 82176B60h */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 82176B60h case    1:*/		if ( regs.CR[0].eq ) { return 0x82176B8C;  }
		/* 82176B60h case    1:*/		return 0x82176B64;
		  /* 82176B64h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 82176B64h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82176B64h case    2:*/		return 0x82176B68;
		  /* 82176B68h */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82176B68h case    3:*/		if ( regs.CR[6].eq ) { return 0x82176B88;  }
		/* 82176B68h case    3:*/		return 0x82176B6C;
		  /* 82176B6Ch */ case    4:  		/* cmplw CR6, R28, R31 */
		/* 82176B6Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R31);
		/* 82176B6Ch case    4:*/		return 0x82176B70;
		  /* 82176B70h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 82176B70h case    5:*/		if ( regs.CR[6].eq ) { return 0x82176B8C;  }
		/* 82176B70h case    5:*/		return 0x82176B74;
		  /* 82176B74h */ case    6:  		/* mr R4, R31 */
		/* 82176B74h case    6:*/		regs.R4 = regs.R31;
		/* 82176B74h case    6:*/		return 0x82176B78;
		  /* 82176B78h */ case    7:  		/* mr R3, R28 */
		/* 82176B78h case    7:*/		regs.R3 = regs.R28;
		/* 82176B78h case    7:*/		return 0x82176B7C;
		  /* 82176B7Ch */ case    8:  		/* bl -21172 */
		/* 82176B7Ch case    8:*/		regs.LR = 0x82176B80; return 0x821718C8;
		/* 82176B7Ch case    8:*/		return 0x82176B80;
		  /* 82176B80h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82176B80h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82176B80h case    9:*/		return 0x82176B84;
		  /* 82176B84h */ case   10:  		/* bc 12, CR0_EQ, 8 */
		/* 82176B84h case   10:*/		if ( regs.CR[0].eq ) { return 0x82176B8C;  }
		/* 82176B84h case   10:*/		return 0x82176B88;
	}
	return 0x82176B88;
} // Block from 82176B5Ch-82176B88h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82176B88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176B88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176B88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176B88);
		  /* 82176B88h */ case    0:  		/* mr R28, R31 */
		/* 82176B88h case    0:*/		regs.R28 = regs.R31;
		/* 82176B88h case    0:*/		return 0x82176B8C;
	}
	return 0x82176B8C;
} // Block from 82176B88h-82176B8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82176B8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176B8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176B8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176B8C);
		  /* 82176B8Ch */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 82176B8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 82176B8Ch case    0:*/		return 0x82176B90;
		  /* 82176B90h */ case    1:  		/* b -140 */
		/* 82176B90h case    1:*/		return 0x82176B04;
		/* 82176B90h case    1:*/		return 0x82176B94;
	}
	return 0x82176B94;
} // Block from 82176B8Ch-82176B94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176B94);
		  /* 82176B94h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 82176B94h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 82176B94h case    0:*/		return 0x82176B98;
		  /* 82176B98h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 82176B98h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82176BA0;  }
		/* 82176B98h case    1:*/		return 0x82176B9C;
		  /* 82176B9Ch */ case    2:  		/* mr R28, R25 */
		/* 82176B9Ch case    2:*/		regs.R28 = regs.R25;
		/* 82176B9Ch case    2:*/		return 0x82176BA0;
	}
	return 0x82176BA0;
} // Block from 82176B94h-82176BA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82176BA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176BA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176BA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176BA0);
		  /* 82176BA0h */ case    0:  		/* mr R29, R23 */
		/* 82176BA0h case    0:*/		regs.R29 = regs.R23;
		/* 82176BA0h case    0:*/		return 0x82176BA4;
		  /* 82176BA4h */ case    1:  		/* lwz R8, <#[R29 + 8]> */
		/* 82176BA4h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x00000008) );
		/* 82176BA4h case    1:*/		return 0x82176BA8;
		  /* 82176BA8h */ case    2:  		/* rlwinm. R11, R8, 27, 31, 31 */
		/* 82176BA8h case    2:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R8);
		/* 82176BA8h case    2:*/		return 0x82176BAC;
		  /* 82176BACh */ case    3:  		/* bc 4, CR0_EQ, 344 */
		/* 82176BACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x82176D04;  }
		/* 82176BACh case    3:*/		return 0x82176BB0;
		  /* 82176BB0h */ case    4:  		/* rlwinm R11, R8, 0, 18, 24 */
		/* 82176BB0h case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R8);
		/* 82176BB0h case    4:*/		return 0x82176BB4;
		  /* 82176BB4h */ case    5:  		/* cmplwi CR6, R11, 14080 */
		/* 82176BB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 82176BB4h case    5:*/		return 0x82176BB8;
		  /* 82176BB8h */ case    6:  		/* bc 12, CR6_EQ, 332 */
		/* 82176BB8h case    6:*/		if ( regs.CR[6].eq ) { return 0x82176D04;  }
		/* 82176BB8h case    6:*/		return 0x82176BBC;
		  /* 82176BBCh */ case    7:  		/* lbz R11, <#[R29 + 16]> */
		/* 82176BBCh case    7:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82176BBCh case    7:*/		return 0x82176BC0;
		  /* 82176BC0h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82176BC0h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82176BC0h case    8:*/		return 0x82176BC4;
		  /* 82176BC4h */ case    9:  		/* bc 12, CR0_EQ, 36 */
		/* 82176BC4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82176BE8;  }
		/* 82176BC4h case    9:*/		return 0x82176BC8;
		  /* 82176BC8h */ case   10:  		/* lbz R11, <#[R25 + 16]> */
		/* 82176BC8h case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 82176BC8h case   10:*/		return 0x82176BCC;
		  /* 82176BCCh */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82176BCCh case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82176BCCh case   11:*/		return 0x82176BD0;
		  /* 82176BD0h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 82176BD0h case   12:*/		if ( regs.CR[0].eq ) { return 0x82176BE8;  }
		/* 82176BD0h case   12:*/		return 0x82176BD4;
		  /* 82176BD4h */ case   13:  		/* lwz R11, <#[R29 + 20]> */
		/* 82176BD4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82176BD4h case   13:*/		return 0x82176BD8;
		  /* 82176BD8h */ case   14:  		/* lwz R10, <#[R25 + 20]> */
		/* 82176BD8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 82176BD8h case   14:*/		return 0x82176BDC;
		  /* 82176BDCh */ case   15:  		/* xor R11, R11, R10 */
		/* 82176BDCh case   15:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82176BDCh case   15:*/		return 0x82176BE0;
		  /* 82176BE0h */ case   16:  		/* rlwinm. R11, R11, 0, 19, 31 */
		/* 82176BE0h case   16:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R11,regs.R11);
		/* 82176BE0h case   16:*/		return 0x82176BE4;
		  /* 82176BE4h */ case   17:  		/* bc 12, CR0_EQ, 288 */
		/* 82176BE4h case   17:*/		if ( regs.CR[0].eq ) { return 0x82176D04;  }
		/* 82176BE4h case   17:*/		return 0x82176BE8;
	}
	return 0x82176BE8;
} // Block from 82176BA0h-82176BE8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82176BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176BE8);
		  /* 82176BE8h */ case    0:  		/* lwz R10, <#[R29 + 4]> */
		/* 82176BE8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 82176BE8h case    0:*/		return 0x82176BEC;
		  /* 82176BECh */ case    1:  		/* mr R11, R10 */
		/* 82176BECh case    1:*/		regs.R11 = regs.R10;
		/* 82176BECh case    1:*/		return 0x82176BF0;
		  /* 82176BF0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82176BF0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176BF0h case    2:*/		return 0x82176BF4;
		  /* 82176BF4h */ case    3:  		/* bc 12, CR6_EQ, 272 */
		/* 82176BF4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82176D04;  }
		/* 82176BF4h case    3:*/		return 0x82176BF8;
		  /* 82176BF8h */ case    4:  		/* lwz R9, <#[R11 + 16]> */
		/* 82176BF8h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 82176BF8h case    4:*/		return 0x82176BFC;
		  /* 82176BFCh */ case    5:  		/* cmplwi CR6, R9, 0 */
		/* 82176BFCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82176BFCh case    5:*/		return 0x82176C00;
		  /* 82176C00h */ case    6:  		/* bc 12, CR6_EQ, 16 */
		/* 82176C00h case    6:*/		if ( regs.CR[6].eq ) { return 0x82176C10;  }
		/* 82176C00h case    6:*/		return 0x82176C04;
		  /* 82176C04h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 82176C04h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82176C04h case    7:*/		return 0x82176C08;
		  /* 82176C08h */ case    8:  		/* rlwinm. R7, R9, 0, 4, 6 */
		/* 82176C08h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R7,regs.R9);
		/* 82176C08h case    8:*/		return 0x82176C0C;
		  /* 82176C0Ch */ case    9:  		/* bc 4, CR0_EQ, 12 */
		/* 82176C0Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x82176C18;  }
		/* 82176C0Ch case    9:*/		return 0x82176C10;
	}
	return 0x82176C10;
} // Block from 82176BE8h-82176C10h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82176C10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176C10);
		  /* 82176C10h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 82176C10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82176C10h case    0:*/		return 0x82176C14;
		  /* 82176C14h */ case    1:  		/* b -36 */
		/* 82176C14h case    1:*/		return 0x82176BF0;
		/* 82176C14h case    1:*/		return 0x82176C18;
	}
	return 0x82176C18;
} // Block from 82176C10h-82176C18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176C18);
		  /* 82176C18h */ case    0:  		/* rlwinm. R11, R9, 2, 31, 31 */
		/* 82176C18h case    0:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R9);
		/* 82176C18h case    0:*/		return 0x82176C1C;
		  /* 82176C1Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 82176C1Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82176C2C;  }
		/* 82176C1Ch case    1:*/		return 0x82176C20;
		  /* 82176C20h */ case    2:  		/* rlwimi R8, R9, 20, 19, 26 */
		/* 82176C20h case    2:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R8,regs.R9);
		/* 82176C20h case    2:*/		return 0x82176C24;
		  /* 82176C24h */ case    3:  		/* rlwinm R4, R8, 31, 20, 31 */
		/* 82176C24h case    3:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R4,regs.R8);
		/* 82176C24h case    3:*/		return 0x82176C28;
		  /* 82176C28h */ case    4:  		/* b 212 */
		/* 82176C28h case    4:*/		return 0x82176CFC;
		/* 82176C28h case    4:*/		return 0x82176C2C;
	}
	return 0x82176C2C;
} // Block from 82176C18h-82176C2Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82176C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176C2C);
		  /* 82176C2Ch */ case    0:  		/* mr R11, R10 */
		/* 82176C2Ch case    0:*/		regs.R11 = regs.R10;
		/* 82176C2Ch case    0:*/		return 0x82176C30;
		  /* 82176C30h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82176C30h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176C30h case    1:*/		return 0x82176C34;
		  /* 82176C34h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 82176C34h case    2:*/		if ( regs.CR[6].eq ) { return 0x82176C68;  }
		/* 82176C34h case    2:*/		return 0x82176C38;
		  /* 82176C38h */ case    3:  		/* lwz R6, <#[R11 + 16]> */
		/* 82176C38h case    3:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000010) );
		/* 82176C38h case    3:*/		return 0x82176C3C;
		  /* 82176C3Ch */ case    4:  		/* cmplwi CR6, R6, 0 */
		/* 82176C3Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82176C3Ch case    4:*/		return 0x82176C40;
		  /* 82176C40h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 82176C40h case    5:*/		if ( regs.CR[6].eq ) { return 0x82176C60;  }
		/* 82176C40h case    5:*/		return 0x82176C44;
		  /* 82176C44h */ case    6:  		/* lwz R9, <#[R6 + 8]> */
		/* 82176C44h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000008) );
		/* 82176C44h case    6:*/		return 0x82176C48;
		  /* 82176C48h */ case    7:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 82176C48h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 82176C48h case    7:*/		return 0x82176C4C;
		  /* 82176C4Ch */ case    8:  		/* cmplwi CR6, R9, 14080 */
		/* 82176C4Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 82176C4Ch case    8:*/		return 0x82176C50;
		  /* 82176C50h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 82176C50h case    9:*/		if ( !regs.CR[6].eq ) { return 0x82176C60;  }
		/* 82176C50h case    9:*/		return 0x82176C54;
		  /* 82176C54h */ case   10:  		/* lwz R9, <#[R11]> */
		/* 82176C54h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82176C54h case   10:*/		return 0x82176C58;
		  /* 82176C58h */ case   11:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 82176C58h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 82176C58h case   11:*/		return 0x82176C5C;
		  /* 82176C5Ch */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 82176C5Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x82176C6C;  }
		/* 82176C5Ch case   12:*/		return 0x82176C60;
	}
	return 0x82176C60;
} // Block from 82176C2Ch-82176C60h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82176C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176C60);
		  /* 82176C60h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 82176C60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82176C60h case    0:*/		return 0x82176C64;
		  /* 82176C64h */ case    1:  		/* b -52 */
		/* 82176C64h case    1:*/		return 0x82176C30;
		/* 82176C64h case    1:*/		return 0x82176C68;
	}
	return 0x82176C68;
} // Block from 82176C60h-82176C68h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176C68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176C68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176C68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176C68);
		  /* 82176C68h */ case    0:  		/* mr R6, R22 */
		/* 82176C68h case    0:*/		regs.R6 = regs.R22;
		/* 82176C68h case    0:*/		return 0x82176C6C;
	}
	return 0x82176C6C;
} // Block from 82176C68h-82176C6Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82176C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176C6C);
		  /* 82176C6Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82176C6Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82176C6Ch case    0:*/		return 0x82176C70;
		  /* 82176C70h */ case    1:  		/* bc 12, CR6_EQ, 148 */
		/* 82176C70h case    1:*/		if ( regs.CR[6].eq ) { return 0x82176D04;  }
		/* 82176C70h case    1:*/		return 0x82176C74;
		  /* 82176C74h */ case    2:  		/* lwz R11, <#[R10 + 16]> */
		/* 82176C74h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 82176C74h case    2:*/		return 0x82176C78;
		  /* 82176C78h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82176C78h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176C78h case    3:*/		return 0x82176C7C;
		  /* 82176C7Ch */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 82176C7Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82176C8C;  }
		/* 82176C7Ch case    4:*/		return 0x82176C80;
		  /* 82176C80h */ case    5:  		/* lwz R11, <#[R10]> */
		/* 82176C80h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82176C80h case    5:*/		return 0x82176C84;
		  /* 82176C84h */ case    6:  		/* rlwinm. R9, R11, 0, 4, 6 */
		/* 82176C84h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R11);
		/* 82176C84h case    6:*/		return 0x82176C88;
		  /* 82176C88h */ case    7:  		/* bc 4, CR0_EQ, 12 */
		/* 82176C88h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82176C94;  }
		/* 82176C88h case    7:*/		return 0x82176C8C;
	}
	return 0x82176C8C;
} // Block from 82176C6Ch-82176C8Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 82176C8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176C8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176C8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176C8C);
		  /* 82176C8Ch */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 82176C8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82176C8Ch case    0:*/		return 0x82176C90;
		  /* 82176C90h */ case    1:  		/* b -36 */
		/* 82176C90h case    1:*/		return 0x82176C6C;
		/* 82176C90h case    1:*/		return 0x82176C94;
	}
	return 0x82176C94;
} // Block from 82176C8Ch-82176C94h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176C94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176C94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176C94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176C94);
		  /* 82176C94h */ case    0:  		/* rlwinm. R10, R11, 2, 31, 31 */
		/* 82176C94h case    0:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R11);
		/* 82176C94h case    0:*/		return 0x82176C98;
		  /* 82176C98h */ case    1:  		/* bc 12, CR0_EQ, 108 */
		/* 82176C98h case    1:*/		if ( regs.CR[0].eq ) { return 0x82176D04;  }
		/* 82176C98h case    1:*/		return 0x82176C9C;
		  /* 82176C9Ch */ case    2:  		/* lwz R10, <#[R6 + 8]> */
		/* 82176C9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000008) );
		/* 82176C9Ch case    2:*/		return 0x82176CA0;
		  /* 82176CA0h */ case    3:  		/* addi R9, R1, 216 */
		/* 82176CA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xD8);
		/* 82176CA0h case    3:*/		return 0x82176CA4;
		  /* 82176CA4h */ case    4:  		/* addi R8, R1, 96 */
		/* 82176CA4h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 82176CA4h case    4:*/		return 0x82176CA8;
		  /* 82176CA8h */ case    5:  		/* rlwimi R10, R11, 20, 19, 26 */
		/* 82176CA8h case    5:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R10,regs.R11);
		/* 82176CA8h case    5:*/		return 0x82176CAC;
		  /* 82176CACh */ case    6:  		/* mr R7, R29 */
		/* 82176CACh case    6:*/		regs.R7 = regs.R29;
		/* 82176CACh case    6:*/		return 0x82176CB0;
		  /* 82176CB0h */ case    7:  		/* rlwinm R4, R10, 31, 20, 31 */
		/* 82176CB0h case    7:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R4,regs.R10);
		/* 82176CB0h case    7:*/		return 0x82176CB4;
		  /* 82176CB4h */ case    8:  		/* rlwinm R11, R4, 30, 2, 29 */
		/* 82176CB4h case    8:*/		cpu::op::rlwinm<0,30,2,29>(regs,&regs.R11,regs.R4);
		/* 82176CB4h case    8:*/		return 0x82176CB8;
		  /* 82176CB8h */ case    9:  		/* rlwinm R10, R4, 24, 8, 31 */
		/* 82176CB8h case    9:*/		cpu::op::rlwinm<0,24,8,31>(regs,&regs.R10,regs.R4);
		/* 82176CB8h case    9:*/		return 0x82176CBC;
		  /* 82176CBCh */ case   10:  		/* addi R5, R11, 3 */
		/* 82176CBCh case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x3);
		/* 82176CBCh case   10:*/		return 0x82176CC0;
		  /* 82176CC0h */ case   11:  		/* add R10, R10, R26 */
		/* 82176CC0h case   11:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R26);
		/* 82176CC0h case   11:*/		return 0x82176CC4;
		  /* 82176CC4h */ case   12:  		/* rldicl R5, R5, 0, 58 */
		/* 82176CC4h case   12:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R5,regs.R5);
		/* 82176CC4h case   12:*/		return 0x82176CC8;
		  /* 82176CC8h */ case   13:  		/* rlwinm R3, R10, 3, 0, 28 */
		/* 82176CC8h case   13:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R3,regs.R10);
		/* 82176CC8h case   13:*/		return 0x82176CCC;
		  /* 82176CCCh */ case   14:  		/* sld R10, R19, R5 */
		/* 82176CCCh case   14:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R19,regs.R5);
		/* 82176CCCh case   14:*/		return 0x82176CD0;
		  /* 82176CD0h */ case   15:  		/* ldx R9, <#[R3 + R9]> */
		/* 82176CD0h case   15:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R3 + regs.R9 + 0x00000000) );
		/* 82176CD0h case   15:*/		return 0x82176CD4;
		  /* 82176CD4h */ case   16:  		/* rldicl R11, R11, 0, 58 */
		/* 82176CD4h case   16:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R11,regs.R11);
		/* 82176CD4h case   16:*/		return 0x82176CD8;
		  /* 82176CD8h */ case   17:  		/* addi R10, R10, -1 */
		/* 82176CD8h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82176CD8h case   17:*/		return 0x82176CDC;
		  /* 82176CDCh */ case   18:  		/* sld R5, R21, R11 */
		/* 82176CDCh case   18:*/		cpu::op::sld<0>(regs,&regs.R5,regs.R21,regs.R11);
		/* 82176CDCh case   18:*/		return 0x82176CE0;
		  /* 82176CE0h */ case   19:  		/* and R10, R10, R9 */
		/* 82176CE0h case   19:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82176CE0h case   19:*/		return 0x82176CE4;
		  /* 82176CE4h */ case   20:  		/* mr R3, R18 */
		/* 82176CE4h case   20:*/		regs.R3 = regs.R18;
		/* 82176CE4h case   20:*/		return 0x82176CE8;
		  /* 82176CE8h */ case   21:  		/* and R10, R10, R5 */
		/* 82176CE8h case   21:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R5);
		/* 82176CE8h case   21:*/		return 0x82176CEC;
		  /* 82176CECh */ case   22:  		/* srd R11, R10, R11 */
		/* 82176CECh case   22:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82176CECh case   22:*/		return 0x82176CF0;
		  /* 82176CF0h */ case   23:  		/* rlwinm R5, R11, 0, 0, 31 */
		/* 82176CF0h case   23:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R11);
		/* 82176CF0h case   23:*/		return 0x82176CF4;
		  /* 82176CF4h */ case   24:  		/* bl -1676 */
		/* 82176CF4h case   24:*/		regs.LR = 0x82176CF8; return 0x82176668;
		/* 82176CF4h case   24:*/		return 0x82176CF8;
		  /* 82176CF8h */ case   25:  		/* mr R4, R3 */
		/* 82176CF8h case   25:*/		regs.R4 = regs.R3;
		/* 82176CF8h case   25:*/		return 0x82176CFC;
	}
	return 0x82176CFC;
} // Block from 82176C94h-82176CFCh (26 instructions)

//////////////////////////////////////////////////////
// Block at 82176CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176CFC);
		  /* 82176CFCh */ case    0:  		/* mr R3, R27 */
		/* 82176CFCh case    0:*/		regs.R3 = regs.R27;
		/* 82176CFCh case    0:*/		return 0x82176D00;
		  /* 82176D00h */ case    1:  		/* bl -30208 */
		/* 82176D00h case    1:*/		regs.LR = 0x82176D04; return 0x8216F700;
		/* 82176D00h case    1:*/		return 0x82176D04;
	}
	return 0x82176D04;
} // Block from 82176CFCh-82176D04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176D04);
		  /* 82176D04h */ case    0:  		/* cmplw CR6, R29, R28 */
		/* 82176D04h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R28);
		/* 82176D04h case    0:*/		return 0x82176D08;
		  /* 82176D08h */ case    1:  		/* bc 12, CR6_EQ, 180 */
		/* 82176D08h case    1:*/		if ( regs.CR[6].eq ) { return 0x82176DBC;  }
		/* 82176D08h case    1:*/		return 0x82176D0C;
		  /* 82176D0Ch */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 82176D0Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82176D0Ch case    2:*/		return 0x82176D10;
		  /* 82176D10h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82176D10h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82176D10h case    3:*/		return 0x82176D14;
		  /* 82176D14h */ case    4:  		/* cmplwi CR6, R11, 14080 */
		/* 82176D14h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 82176D14h case    4:*/		return 0x82176D18;
		  /* 82176D18h */ case    5:  		/* bc 12, CR6_EQ, 128 */
		/* 82176D18h case    5:*/		if ( regs.CR[6].eq ) { return 0x82176D98;  }
		/* 82176D18h case    5:*/		return 0x82176D1C;
		  /* 82176D1Ch */ case    6:  		/* lbz R11, <#[R29 + 16]> */
		/* 82176D1Ch case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82176D1Ch case    6:*/		return 0x82176D20;
		  /* 82176D20h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82176D20h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82176D20h case    7:*/		return 0x82176D24;
		  /* 82176D24h */ case    8:  		/* bc 12, CR0_EQ, 36 */
		/* 82176D24h case    8:*/		if ( regs.CR[0].eq ) { return 0x82176D48;  }
		/* 82176D24h case    8:*/		return 0x82176D28;
		  /* 82176D28h */ case    9:  		/* lbz R11, <#[R25 + 16]> */
		/* 82176D28h case    9:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 82176D28h case    9:*/		return 0x82176D2C;
		  /* 82176D2Ch */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82176D2Ch case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82176D2Ch case   10:*/		return 0x82176D30;
		  /* 82176D30h */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 82176D30h case   11:*/		if ( regs.CR[0].eq ) { return 0x82176D48;  }
		/* 82176D30h case   11:*/		return 0x82176D34;
		  /* 82176D34h */ case   12:  		/* lwz R11, <#[R29 + 20]> */
		/* 82176D34h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82176D34h case   12:*/		return 0x82176D38;
		  /* 82176D38h */ case   13:  		/* lwz R10, <#[R25 + 20]> */
		/* 82176D38h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000014) );
		/* 82176D38h case   13:*/		return 0x82176D3C;
		  /* 82176D3Ch */ case   14:  		/* xor R11, R11, R10 */
		/* 82176D3Ch case   14:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82176D3Ch case   14:*/		return 0x82176D40;
		  /* 82176D40h */ case   15:  		/* rlwinm. R11, R11, 0, 19, 31 */
		/* 82176D40h case   15:*/		cpu::op::rlwinm<1,0,19,31>(regs,&regs.R11,regs.R11);
		/* 82176D40h case   15:*/		return 0x82176D44;
		  /* 82176D44h */ case   16:  		/* bc 12, CR0_EQ, 84 */
		/* 82176D44h case   16:*/		if ( regs.CR[0].eq ) { return 0x82176D98;  }
		/* 82176D44h case   16:*/		return 0x82176D48;
	}
	return 0x82176D48;
} // Block from 82176D04h-82176D48h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82176D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176D48);
		  /* 82176D48h */ case    0:  		/* lwz R31, <#[R29]> */
		/* 82176D48h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 82176D48h case    0:*/		return 0x82176D4C;
		  /* 82176D4Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 82176D4Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82176D4Ch case    1:*/		return 0x82176D50;
		  /* 82176D50h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 82176D50h case    2:*/		if ( regs.CR[6].eq ) { return 0x82176D98;  }
		/* 82176D50h case    2:*/		return 0x82176D54;
		  /* 82176D54h */ case    3:  		/* lwz R30, <#[R31]> */
		/* 82176D54h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 82176D54h case    3:*/		return 0x82176D58;
		  /* 82176D58h */ case    4:  		/* rlwinm. R11, R30, 0, 4, 6 */
		/* 82176D58h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R30);
		/* 82176D58h case    4:*/		return 0x82176D5C;
		  /* 82176D5Ch */ case    5:  		/* bc 12, CR0_EQ, 52 */
		/* 82176D5Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82176D90;  }
		/* 82176D5Ch case    5:*/		return 0x82176D60;
		  /* 82176D60h */ case    6:  		/* rlwinm. R11, R30, 2, 31, 31 */
		/* 82176D60h case    6:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R30);
		/* 82176D60h case    6:*/		return 0x82176D64;
		  /* 82176D64h */ case    7:  		/* bc 12, CR0_EQ, 44 */
		/* 82176D64h case    7:*/		if ( regs.CR[0].eq ) { return 0x82176D90;  }
		/* 82176D64h case    7:*/		return 0x82176D68;
		  /* 82176D68h */ case    8:  		/* mr R3, R31 */
		/* 82176D68h case    8:*/		regs.R3 = regs.R31;
		/* 82176D68h case    8:*/		return 0x82176D6C;
		  /* 82176D6Ch */ case    9:  		/* bl -75068 */
		/* 82176D6Ch case    9:*/		regs.LR = 0x82176D70; return 0x82164830;
		/* 82176D6Ch case    9:*/		return 0x82176D70;
		  /* 82176D70h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82176D70h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82176D70h case   10:*/		return 0x82176D74;
		  /* 82176D74h */ case   11:  		/* bc 12, CR0_EQ, 28 */
		/* 82176D74h case   11:*/		if ( regs.CR[0].eq ) { return 0x82176D90;  }
		/* 82176D74h case   11:*/		return 0x82176D78;
		  /* 82176D78h */ case   12:  		/* lwz R11, <#[R31 + 12]> */
		/* 82176D78h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82176D78h case   12:*/		return 0x82176D7C;
		  /* 82176D7Ch */ case   13:  		/* mr R3, R27 */
		/* 82176D7Ch case   13:*/		regs.R3 = regs.R27;
		/* 82176D7Ch case   13:*/		return 0x82176D80;
		  /* 82176D80h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 82176D80h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82176D80h case   14:*/		return 0x82176D84;
		  /* 82176D84h */ case   15:  		/* rlwimi R11, R30, 20, 19, 26 */
		/* 82176D84h case   15:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R11,regs.R30);
		/* 82176D84h case   15:*/		return 0x82176D88;
		  /* 82176D88h */ case   16:  		/* rlwinm R4, R11, 31, 20, 31 */
		/* 82176D88h case   16:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R4,regs.R11);
		/* 82176D88h case   16:*/		return 0x82176D8C;
		  /* 82176D8Ch */ case   17:  		/* bl -30444 */
		/* 82176D8Ch case   17:*/		regs.LR = 0x82176D90; return 0x8216F6A0;
		/* 82176D8Ch case   17:*/		return 0x82176D90;
	}
	return 0x82176D90;
} // Block from 82176D48h-82176D90h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82176D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176D90);
		  /* 82176D90h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 82176D90h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 82176D90h case    0:*/		return 0x82176D94;
		  /* 82176D94h */ case    1:  		/* b -72 */
		/* 82176D94h case    1:*/		return 0x82176D4C;
		/* 82176D94h case    1:*/		return 0x82176D98;
	}
	return 0x82176D98;
} // Block from 82176D90h-82176D98h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176D98);
		  /* 82176D98h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 82176D98h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 82176D98h case    0:*/		return 0x82176D9C;
		  /* 82176D9Ch */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 82176D9Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82176D9Ch case    1:*/		return 0x82176DA0;
		  /* 82176DA0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82176DA0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82176DA0h case    2:*/		return 0x82176DA4;
		  /* 82176DA4h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82176DA4h case    3:*/		if ( regs.CR[0].eq ) { return 0x82176DB0;  }
		/* 82176DA4h case    3:*/		return 0x82176DA8;
		  /* 82176DA8h */ case    4:  		/* mr R29, R22 */
		/* 82176DA8h case    4:*/		regs.R29 = regs.R22;
		/* 82176DA8h case    4:*/		return 0x82176DAC;
		  /* 82176DACh */ case    5:  		/* b -520 */
		/* 82176DACh case    5:*/		return 0x82176BA4;
		/* 82176DACh case    5:*/		return 0x82176DB0;
	}
	return 0x82176DB0;
} // Block from 82176D98h-82176DB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82176DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176DB0);
		  /* 82176DB0h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82176DB0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82176DB0h case    0:*/		return 0x82176DB4;
		  /* 82176DB4h */ case    1:  		/* addi R29, R11, -40 */
		/* 82176DB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFD8);
		/* 82176DB4h case    1:*/		return 0x82176DB8;
		  /* 82176DB8h */ case    2:  		/* b -532 */
		/* 82176DB8h case    2:*/		return 0x82176BA4;
		/* 82176DB8h case    2:*/		return 0x82176DBC;
	}
	return 0x82176DBC;
} // Block from 82176DB0h-82176DBCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82176DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176DBC);
		  /* 82176DBCh */ case    0:  		/* cmplw CR6, R29, R25 */
		/* 82176DBCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 82176DBCh case    0:*/		return 0x82176DC0;
		  /* 82176DC0h */ case    1:  		/* bc 12, CR6_EQ, 208 */
		/* 82176DC0h case    1:*/		if ( regs.CR[6].eq ) { return 0x82176E90;  }
		/* 82176DC0h case    1:*/		return 0x82176DC4;
		  /* 82176DC4h */ case    2:  		/* lwz R31, <#[R29]> */
		/* 82176DC4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 82176DC4h case    2:*/		return 0x82176DC8;
		  /* 82176DC8h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 82176DC8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82176DC8h case    3:*/		return 0x82176DCC;
		  /* 82176DCCh */ case    4:  		/* bc 12, CR6_EQ, 72 */
		/* 82176DCCh case    4:*/		if ( regs.CR[6].eq ) { return 0x82176E14;  }
		/* 82176DCCh case    4:*/		return 0x82176DD0;
		  /* 82176DD0h */ case    5:  		/* lwz R30, <#[R31]> */
		/* 82176DD0h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000000) );
		/* 82176DD0h case    5:*/		return 0x82176DD4;
		  /* 82176DD4h */ case    6:  		/* rlwinm. R11, R30, 0, 4, 6 */
		/* 82176DD4h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R30);
		/* 82176DD4h case    6:*/		return 0x82176DD8;
		  /* 82176DD8h */ case    7:  		/* bc 12, CR0_EQ, 52 */
		/* 82176DD8h case    7:*/		if ( regs.CR[0].eq ) { return 0x82176E0C;  }
		/* 82176DD8h case    7:*/		return 0x82176DDC;
		  /* 82176DDCh */ case    8:  		/* rlwinm. R11, R30, 2, 31, 31 */
		/* 82176DDCh case    8:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R30);
		/* 82176DDCh case    8:*/		return 0x82176DE0;
		  /* 82176DE0h */ case    9:  		/* bc 12, CR0_EQ, 44 */
		/* 82176DE0h case    9:*/		if ( regs.CR[0].eq ) { return 0x82176E0C;  }
		/* 82176DE0h case    9:*/		return 0x82176DE4;
		  /* 82176DE4h */ case   10:  		/* mr R3, R31 */
		/* 82176DE4h case   10:*/		regs.R3 = regs.R31;
		/* 82176DE4h case   10:*/		return 0x82176DE8;
		  /* 82176DE8h */ case   11:  		/* bl -75192 */
		/* 82176DE8h case   11:*/		regs.LR = 0x82176DEC; return 0x82164830;
		/* 82176DE8h case   11:*/		return 0x82176DEC;
		  /* 82176DECh */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82176DECh case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82176DECh case   12:*/		return 0x82176DF0;
		  /* 82176DF0h */ case   13:  		/* bc 12, CR0_EQ, 28 */
		/* 82176DF0h case   13:*/		if ( regs.CR[0].eq ) { return 0x82176E0C;  }
		/* 82176DF0h case   13:*/		return 0x82176DF4;
		  /* 82176DF4h */ case   14:  		/* lwz R11, <#[R31 + 12]> */
		/* 82176DF4h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82176DF4h case   14:*/		return 0x82176DF8;
		  /* 82176DF8h */ case   15:  		/* mr R3, R27 */
		/* 82176DF8h case   15:*/		regs.R3 = regs.R27;
		/* 82176DF8h case   15:*/		return 0x82176DFC;
		  /* 82176DFCh */ case   16:  		/* lwz R11, <#[R11 + 8]> */
		/* 82176DFCh case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82176DFCh case   16:*/		return 0x82176E00;
		  /* 82176E00h */ case   17:  		/* rlwimi R11, R30, 20, 19, 26 */
		/* 82176E00h case   17:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R11,regs.R30);
		/* 82176E00h case   17:*/		return 0x82176E04;
		  /* 82176E04h */ case   18:  		/* rlwinm R4, R11, 31, 20, 31 */
		/* 82176E04h case   18:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R4,regs.R11);
		/* 82176E04h case   18:*/		return 0x82176E08;
		  /* 82176E08h */ case   19:  		/* bl -30568 */
		/* 82176E08h case   19:*/		regs.LR = 0x82176E0C; return 0x8216F6A0;
		/* 82176E08h case   19:*/		return 0x82176E0C;
	}
	return 0x82176E0C;
} // Block from 82176DBCh-82176E0Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 82176E0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176E0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176E0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176E0C);
		  /* 82176E0Ch */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 82176E0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 82176E0Ch case    0:*/		return 0x82176E10;
		  /* 82176E10h */ case    1:  		/* b -72 */
		/* 82176E10h case    1:*/		return 0x82176DC8;
		/* 82176E10h case    1:*/		return 0x82176E14;
	}
	return 0x82176E14;
} // Block from 82176E0Ch-82176E14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176E14);
		  /* 82176E14h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 82176E14h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 82176E14h case    0:*/		return 0x82176E18;
		  /* 82176E18h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 82176E18h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 82176E18h case    1:*/		return 0x82176E1C;
		  /* 82176E1Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82176E1Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82176E1Ch case    2:*/		return 0x82176E20;
		  /* 82176E20h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82176E20h case    3:*/		if ( regs.CR[0].eq ) { return 0x82176E2C;  }
		/* 82176E20h case    3:*/		return 0x82176E24;
		  /* 82176E24h */ case    4:  		/* mr R29, R22 */
		/* 82176E24h case    4:*/		regs.R29 = regs.R22;
		/* 82176E24h case    4:*/		return 0x82176E28;
		  /* 82176E28h */ case    5:  		/* b 12 */
		/* 82176E28h case    5:*/		return 0x82176E34;
		/* 82176E28h case    5:*/		return 0x82176E2C;
	}
	return 0x82176E2C;
} // Block from 82176E14h-82176E2Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82176E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176E2C);
		  /* 82176E2Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82176E2Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82176E2Ch case    0:*/		return 0x82176E30;
		  /* 82176E30h */ case    1:  		/* addi R29, R11, -40 */
		/* 82176E30h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFD8);
		/* 82176E30h case    1:*/		return 0x82176E34;
	}
	return 0x82176E34;
} // Block from 82176E2Ch-82176E34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176E34);
		  /* 82176E34h */ case    0:  		/* cmplw CR6, R29, R25 */
		/* 82176E34h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R25);
		/* 82176E34h case    0:*/		return 0x82176E38;
		  /* 82176E38h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 82176E38h case    1:*/		if ( regs.CR[6].eq ) { return 0x82176E90;  }
		/* 82176E38h case    1:*/		return 0x82176E3C;
		  /* 82176E3Ch */ case    2:  		/* lwz R9, <#[R29 + 8]> */
		/* 82176E3Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 82176E3Ch case    2:*/		return 0x82176E40;
		  /* 82176E40h */ case    3:  		/* rlwinm. R11, R9, 27, 31, 31 */
		/* 82176E40h case    3:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R9);
		/* 82176E40h case    3:*/		return 0x82176E44;
		  /* 82176E44h */ case    4:  		/* bc 4, CR0_EQ, -128 */
		/* 82176E44h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82176DC4;  }
		/* 82176E44h case    4:*/		return 0x82176E48;
		  /* 82176E48h */ case    5:  		/* lwz R11, <#[R29 + 4]> */
		/* 82176E48h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 82176E48h case    5:*/		return 0x82176E4C;
		  /* 82176E4Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82176E4Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176E4Ch case    6:*/		return 0x82176E50;
		  /* 82176E50h */ case    7:  		/* bc 12, CR6_EQ, -140 */
		/* 82176E50h case    7:*/		if ( regs.CR[6].eq ) { return 0x82176DC4;  }
		/* 82176E50h case    7:*/		return 0x82176E54;
		  /* 82176E54h */ case    8:  		/* lwz R10, <#[R11 + 16]> */
		/* 82176E54h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82176E54h case    8:*/		return 0x82176E58;
		  /* 82176E58h */ case    9:  		/* cmplwi CR6, R10, 0 */
		/* 82176E58h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82176E58h case    9:*/		return 0x82176E5C;
		  /* 82176E5Ch */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 82176E5Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x82176E6C;  }
		/* 82176E5Ch case   10:*/		return 0x82176E60;
		  /* 82176E60h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 82176E60h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82176E60h case   11:*/		return 0x82176E64;
		  /* 82176E64h */ case   12:  		/* rlwinm. R8, R10, 0, 4, 6 */
		/* 82176E64h case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R10);
		/* 82176E64h case   12:*/		return 0x82176E68;
		  /* 82176E68h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 82176E68h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82176E74;  }
		/* 82176E68h case   13:*/		return 0x82176E6C;
	}
	return 0x82176E6C;
} // Block from 82176E34h-82176E6Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 82176E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176E6C);
		  /* 82176E6Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 82176E6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82176E6Ch case    0:*/		return 0x82176E70;
		  /* 82176E70h */ case    1:  		/* b -36 */
		/* 82176E70h case    1:*/		return 0x82176E4C;
		/* 82176E70h case    1:*/		return 0x82176E74;
	}
	return 0x82176E74;
} // Block from 82176E6Ch-82176E74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82176E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176E74);
		  /* 82176E74h */ case    0:  		/* rlwinm. R11, R10, 2, 31, 31 */
		/* 82176E74h case    0:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R10);
		/* 82176E74h case    0:*/		return 0x82176E78;
		  /* 82176E78h */ case    1:  		/* bc 12, CR0_EQ, -180 */
		/* 82176E78h case    1:*/		if ( regs.CR[0].eq ) { return 0x82176DC4;  }
		/* 82176E78h case    1:*/		return 0x82176E7C;
		  /* 82176E7Ch */ case    2:  		/* rlwimi R9, R10, 20, 19, 26 */
		/* 82176E7Ch case    2:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R9,regs.R10);
		/* 82176E7Ch case    2:*/		return 0x82176E80;
		  /* 82176E80h */ case    3:  		/* mr R3, R27 */
		/* 82176E80h case    3:*/		regs.R3 = regs.R27;
		/* 82176E80h case    3:*/		return 0x82176E84;
		  /* 82176E84h */ case    4:  		/* rlwinm R4, R9, 31, 20, 31 */
		/* 82176E84h case    4:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R4,regs.R9);
		/* 82176E84h case    4:*/		return 0x82176E88;
		  /* 82176E88h */ case    5:  		/* bl -30696 */
		/* 82176E88h case    5:*/		regs.LR = 0x82176E8C; return 0x8216F6A0;
		/* 82176E88h case    5:*/		return 0x82176E8C;
		  /* 82176E8Ch */ case    6:  		/* b -200 */
		/* 82176E8Ch case    6:*/		return 0x82176DC4;
		/* 82176E8Ch case    6:*/		return 0x82176E90;
	}
	return 0x82176E90;
} // Block from 82176E74h-82176E90h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82176E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176E90);
		  /* 82176E90h */ case    0:  		/* addi R26, R26, 5 */
		/* 82176E90h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x5);
		/* 82176E90h case    0:*/		return 0x82176E94;
		  /* 82176E94h */ case    1:  		/* addi R24, R24, 1 */
		/* 82176E94h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 82176E94h case    1:*/		return 0x82176E98;
		  /* 82176E98h */ case    2:  		/* addi R27, R27, 40 */
		/* 82176E98h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x28);
		/* 82176E98h case    2:*/		return 0x82176E9C;
		  /* 82176E9Ch */ case    3:  		/* cmplwi CR6, R26, 20 */
		/* 82176E9Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000014);
		/* 82176E9Ch case    3:*/		return 0x82176EA0;
		  /* 82176EA0h */ case    4:  		/* bc 12, CR6_LT, -960 */
		/* 82176EA0h case    4:*/		if ( regs.CR[6].lt ) { return 0x82176AE0;  }
		/* 82176EA0h case    4:*/		return 0x82176EA4;
		  /* 82176EA4h */ case    5:  		/* addi R10, R1, 152 */
		/* 82176EA4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x98);
		/* 82176EA4h case    5:*/		return 0x82176EA8;
		  /* 82176EA8h */ case    6:  		/* stw R18, <#[R1 + 144]> */
		/* 82176EA8h case    6:*/		cpu::mem::store32( regs, regs.R18, (uint32)(regs.R1 + 0x00000090) );
		/* 82176EA8h case    6:*/		return 0x82176EAC;
		  /* 82176EACh */ case    7:  		/* lwz R11, <#[R18 + 792]> */
		/* 82176EACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000318) );
		/* 82176EACh case    7:*/		return 0x82176EB0;
		  /* 82176EB0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 82176EB0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82176EB0h case    8:*/		return 0x82176EB4;
		  /* 82176EB4h */ case    9:  		/* std R22, <#[R10]> */
		/* 82176EB4h case    9:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000000) );
		/* 82176EB4h case    9:*/		return 0x82176EB8;
		  /* 82176EB8h */ case   10:  		/* std R22, <#[R10 + 8]> */
		/* 82176EB8h case   10:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000008) );
		/* 82176EB8h case   10:*/		return 0x82176EBC;
		  /* 82176EBCh */ case   11:  		/* std R22, <#[R10 + 16]> */
		/* 82176EBCh case   11:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000010) );
		/* 82176EBCh case   11:*/		return 0x82176EC0;
		  /* 82176EC0h */ case   12:  		/* std R22, <#[R10 + 24]> */
		/* 82176EC0h case   12:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000018) );
		/* 82176EC0h case   12:*/		return 0x82176EC4;
		  /* 82176EC4h */ case   13:  		/* bc 4, CR6_EQ, 8 */
		/* 82176EC4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82176ECC;  }
		/* 82176EC4h case   13:*/		return 0x82176EC8;
		  /* 82176EC8h */ case   14:  		/* li R11, 32 */
		/* 82176EC8h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82176EC8h case   14:*/		return 0x82176ECC;
	}
	return 0x82176ECC;
} // Block from 82176E90h-82176ECCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82176ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176ECC);
		  /* 82176ECCh */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 82176ECCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82176ECCh case    0:*/		return 0x82176ED0;
		  /* 82176ED0h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 82176ED0h case    1:*/		if ( !regs.CR[6].lt ) { return 0x82176EE4;  }
		/* 82176ED0h case    1:*/		return 0x82176ED4;
		  /* 82176ED4h */ case    2:  		/* subfic R5, R11, 64 */
		/* 82176ED4h case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 82176ED4h case    2:*/		return 0x82176ED8;
		  /* 82176ED8h */ case    3:  		/* mr R4, R11 */
		/* 82176ED8h case    3:*/		regs.R4 = regs.R11;
		/* 82176ED8h case    3:*/		return 0x82176EDC;
		  /* 82176EDCh */ case    4:  		/* addi R3, R1, 144 */
		/* 82176EDCh case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 82176EDCh case    4:*/		return 0x82176EE0;
		  /* 82176EE0h */ case    5:  		/* bl -31240 */
		/* 82176EE0h case    5:*/		regs.LR = 0x82176EE4; return 0x8216F4D8;
		/* 82176EE0h case    5:*/		return 0x82176EE4;
	}
	return 0x82176EE4;
} // Block from 82176ECCh-82176EE4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82176EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176EE4);
		  /* 82176EE4h */ case    0:  		/* addi R11, R1, 152 */
		/* 82176EE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x98);
		/* 82176EE4h case    0:*/		return 0x82176EE8;
		  /* 82176EE8h */ case    1:  		/* lwz R6, <#[R25 + 8]> */
		/* 82176EE8h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R25 + 0x00000008) );
		/* 82176EE8h case    1:*/		return 0x82176EEC;
		  /* 82176EECh */ case    2:  		/* mr R7, R22 */
		/* 82176EECh case    2:*/		regs.R7 = regs.R22;
		/* 82176EECh case    2:*/		return 0x82176EF0;
		  /* 82176EF0h */ case    3:  		/* rlwinm R26, R6, 31, 1, 31 */
		/* 82176EF0h case    3:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R26,regs.R6);
		/* 82176EF0h case    3:*/		return 0x82176EF4;
		  /* 82176EF4h */ case    4:  		/* mr R8, R22 */
		/* 82176EF4h case    4:*/		regs.R8 = regs.R22;
		/* 82176EF4h case    4:*/		return 0x82176EF8;
		  /* 82176EF8h */ case    5:  		/* std R21, <#[R11]> */
		/* 82176EF8h case    5:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 82176EF8h case    5:*/		return 0x82176EFC;
		  /* 82176EFCh */ case    6:  		/* std R21, <#[R11 + 8]> */
		/* 82176EFCh case    6:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 82176EFCh case    6:*/		return 0x82176F00;
	}
	return 0x82176F00;
} // Block from 82176EE4h-82176F00h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82176F00h
// Function '?ComputeMERGEInputRegisterAssignment@Compiler@D3DXShader@@AAAIIIPAVInstruction@2@0PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176F00);
		  /* 82176F00h */ case    0:  		/* std R21, <#[R11 + 16]> */
		/* 82176F00h case    0:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000010) );
		/* 82176F00h case    0:*/		return 0x82176F04;
		  /* 82176F04h */ case    1:  		/* std R21, <#[R11 + 24]> */
		/* 82176F04h case    1:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000018) );
		/* 82176F04h case    1:*/		return 0x82176F08;
		  /* 82176F08h */ case    2:  		/* slw R11, R20, R7 */
		/* 82176F08h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R7);
		/* 82176F08h case    2:*/		return 0x82176F0C;
		  /* 82176F0Ch */ case    3:  		/* and R11, R11, R26 */
		/* 82176F0Ch case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 82176F0Ch case    3:*/		return 0x82176F10;
		  /* 82176F10h */ case    4:  		/* rlwinm. R11, R11, 0, 28, 31 */
		/* 82176F10h case    4:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R11,regs.R11);
		/* 82176F10h case    4:*/		return 0x82176F14;
		  /* 82176F14h */ case    5:  		/* bc 12, CR0_EQ, 56 */
		/* 82176F14h case    5:*/		if ( regs.CR[0].eq ) { return 0x82176F4C;  }
		/* 82176F14h case    5:*/		return 0x82176F18;
		  /* 82176F18h */ case    6:  		/* li R9, 4 */
		/* 82176F18h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82176F18h case    6:*/		return 0x82176F1C;
		  /* 82176F1Ch */ case    7:  		/* mr R11, R22 */
		/* 82176F1Ch case    7:*/		regs.R11 = regs.R22;
		/* 82176F1Ch case    7:*/		return 0x82176F20;
		  /* 82176F20h */ case    8:  		/* addi R10, R1, 144 */
		/* 82176F20h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x90);
		/* 82176F20h case    8:*/		return 0x82176F24;
		  /* 82176F24h */ case    9:  		/* mtspr CTR, R9 */
		/* 82176F24h case    9:*/		regs.CTR = regs.R9;
		/* 82176F24h case    9:*/		return 0x82176F28;
		  /* 82176F28h */ case   10:  		/* add R9, R11, R8 */
		/* 82176F28h case   10:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R8);
		/* 82176F28h case   10:*/		return 0x82176F2C;
		  /* 82176F2Ch */ case   11:  		/* ld R5, <#[R10 + 8]> */
		/* 82176F2Ch case   11:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R10 + 0x00000008) );
		/* 82176F2Ch case   11:*/		return 0x82176F30;
		  /* 82176F30h */ case   12:  		/* addi R4, R1, 216 */
		/* 82176F30h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xD8);
		/* 82176F30h case   12:*/		return 0x82176F34;
		  /* 82176F34h */ case   13:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 82176F34h case   13:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 82176F34h case   13:*/		return 0x82176F38;
		  /* 82176F38h */ case   14:  		/* addi R11, R11, 1 */
		/* 82176F38h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82176F38h case   14:*/		return 0x82176F3C;
		  /* 82176F3Ch */ case   15:  		/* ldx R9, <#[R9 + R4]> */
		/* 82176F3Ch case   15:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 82176F3Ch case   15:*/		return 0x82176F40;
		  /* 82176F40h */ case   16:  		/* and R9, R9, R5 */
		/* 82176F40h case   16:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R5);
		/* 82176F40h case   16:*/		return 0x82176F44;
		  /* 82176F44h */ case   17:  		/* stdu R9, <#[R10 + 8]> */
		/* 82176F44h case   17:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82176F44h case   17:*/		return 0x82176F48;
		  /* 82176F48h */ case   18:  		/* bc 16, CR0_LT, -32 */
		/* 82176F48h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82176F28;  }
		/* 82176F48h case   18:*/		return 0x82176F4C;
	}
	return 0x82176F4C;
} // Block from 82176F00h-82176F4Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82176F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82176F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82176F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82176F4C);
		  /* 82176F4Ch */ case    0:  		/* addi R8, R8, 5 */
		/* 82176F4Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x5);
		/* 82176F4Ch case    0:*/		return 0x82176F50;
		  /* 82176F50h */ case    1:  		/* addi R7, R7, 1 */
		/* 82176F50h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 82176F50h case    1:*/		return 0x82176F54;
		  /* 82176F54h */ case    2:  		/* cmplwi CR6, R8, 20 */
		/* 82176F54h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000014);
		/* 82176F54h case    2:*/		return 0x82176F58;
		  /* 82176F58h */ case    3:  		/* bc 12, CR6_LT, -80 */
		/* 82176F58h case    3:*/		if ( regs.CR[6].lt ) { return 0x82176F08;  }
		/* 82176F58h case    3:*/		return 0x82176F5C;
		  /* 82176F5Ch */ case    4:  		/* rlwinm R25, R6, 18, 29, 31 */
		/* 82176F5Ch case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R25,regs.R6);
		/* 82176F5Ch case    4:*/		return 0x82176F60;
		  /* 82176F60h */ case    5:  		/* li R6, 4 */
		/* 82176F60h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 82176F60h case    5:*/		return 0x82176F64;
		  /* 82176F64h */ case    6:  		/* mr R5, R25 */
		/* 82176F64h case    6:*/		regs.R5 = regs.R25;
		/* 82176F64h case    6:*/		return 0x82176F68;
		  /* 82176F68h */ case    7:  		/* li R4, 0 */
		/* 82176F68h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82176F68h case    7:*/		return 0x82176F6C;
		  /* 82176F6Ch */ case    8:  		/* addi R3, R1, 144 */
		/* 82176F6Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 82176F6Ch case    8:*/		return 0x82176F70;
		  /* 82176F70h */ case    9:  		/* bl -1704 */
		/* 82176F70h case    9:*/		regs.LR = 0x82176F74; return 0x821768C8;
		/* 82176F70h case    9:*/		return 0x82176F74;
		  /* 82176F74h */ case   10:  		/* cmpwi CR6, R3, -1 */
		/* 82176F74h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 82176F74h case   10:*/		return 0x82176F78;
		  /* 82176F78h */ case   11:  		/* bc 12, CR6_EQ, 632 */
		/* 82176F78h case   11:*/		if ( regs.CR[6].eq ) { return 0x821771F0;  }
		/* 82176F78h case   11:*/		return 0x82176F7C;
		  /* 82176F7Ch */ case   12:  		/* rlwinm R27, R26, 0, 28, 31 */
		/* 82176F7Ch case   12:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R27,regs.R26);
		/* 82176F7Ch case   12:*/		return 0x82176F80;
		  /* 82176F80h */ case   13:  		/* li R9, 4 */
		/* 82176F80h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82176F80h case   13:*/		return 0x82176F84;
		  /* 82176F84h */ case   14:  		/* rlwinm R28, R3, 28, 4, 31 */
		/* 82176F84h case   14:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R28,regs.R3);
		/* 82176F84h case   14:*/		return 0x82176F88;
		  /* 82176F88h */ case   15:  		/* mr R10, R22 */
		/* 82176F88h case   15:*/		regs.R10 = regs.R22;
		/* 82176F88h case   15:*/		return 0x82176F8C;
		  /* 82176F8Ch */ case   16:  		/* mr R6, R22 */
		/* 82176F8Ch case   16:*/		regs.R6 = regs.R22;
		/* 82176F8Ch case   16:*/		return 0x82176F90;
		  /* 82176F90h */ case   17:  		/* mr R8, R22 */
		/* 82176F90h case   17:*/		regs.R8 = regs.R22;
		/* 82176F90h case   17:*/		return 0x82176F94;
		  /* 82176F94h */ case   18:  		/* mr R11, R22 */
		/* 82176F94h case   18:*/		regs.R11 = regs.R22;
		/* 82176F94h case   18:*/		return 0x82176F98;
		  /* 82176F98h */ case   19:  		/* mtspr CTR, R9 */
		/* 82176F98h case   19:*/		regs.CTR = regs.R9;
		/* 82176F98h case   19:*/		return 0x82176F9C;
		  /* 82176F9Ch */ case   20:  		/* slw R9, R20, R6 */
		/* 82176F9Ch case   20:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R20,regs.R6);
		/* 82176F9Ch case   20:*/		return 0x82176FA0;
		  /* 82176FA0h */ case   21:  		/* and R9, R9, R26 */
		/* 82176FA0h case   21:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R26);
		/* 82176FA0h case   21:*/		return 0x82176FA4;
		  /* 82176FA4h */ case   22:  		/* rlwinm. R9, R9, 0, 28, 31 */
		/* 82176FA4h case   22:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R9,regs.R9);
		/* 82176FA4h case   22:*/		return 0x82176FA8;
		  /* 82176FA8h */ case   23:  		/* bc 12, CR0_EQ, 136 */
		/* 82176FA8h case   23:*/		if ( regs.CR[0].eq ) { return 0x82177030;  }
		/* 82176FA8h case   23:*/		return 0x82176FAC;
		  /* 82176FACh */ case   24:  		/* rlwinm R9, R28, 2, 0, 29 */
		/* 82176FACh case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R28);
		/* 82176FACh case   24:*/		return 0x82176FB0;
		  /* 82176FB0h */ case   25:  		/* rlwinm R7, R28, 28, 6, 31 */
		/* 82176FB0h case   25:*/		cpu::op::rlwinm<0,28,6,31>(regs,&regs.R7,regs.R28);
		/* 82176FB0h case   25:*/		return 0x82176FB4;
		  /* 82176FB4h */ case   26:  		/* addi R5, R9, 3 */
		/* 82176FB4h case   26:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R9,0x3);
		/* 82176FB4h case   26:*/		return 0x82176FB8;
		  /* 82176FB8h */ case   27:  		/* add R7, R7, R8 */
		/* 82176FB8h case   27:*/		cpu::op::add<0>(regs,&regs.R7,regs.R7,regs.R8);
		/* 82176FB8h case   27:*/		return 0x82176FBC;
		  /* 82176FBCh */ case   28:  		/* rldicl R5, R5, 0, 58 */
		/* 82176FBCh case   28:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R5,regs.R5);
		/* 82176FBCh case   28:*/		return 0x82176FC0;
		  /* 82176FC0h */ case   29:  		/* rlwinm R4, R7, 3, 0, 28 */
		/* 82176FC0h case   29:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R4,regs.R7);
		/* 82176FC0h case   29:*/		return 0x82176FC4;
		  /* 82176FC4h */ case   30:  		/* addi R3, R1, 216 */
		/* 82176FC4h case   30:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xD8);
		/* 82176FC4h case   30:*/		return 0x82176FC8;
		  /* 82176FC8h */ case   31:  		/* sld R7, R19, R5 */
		/* 82176FC8h case   31:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R19,regs.R5);
		/* 82176FC8h case   31:*/		return 0x82176FCC;
		  /* 82176FCCh */ case   32:  		/* ldx R5, <#[R4 + R3]> */
		/* 82176FCCh case   32:*/		cpu::mem::load64( regs, &regs.R5, (uint32)(regs.R4 + regs.R3 + 0x00000000) );
		/* 82176FCCh case   32:*/		return 0x82176FD0;
		  /* 82176FD0h */ case   33:  		/* rldicl R9, R9, 0, 58 */
		/* 82176FD0h case   33:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R9);
		/* 82176FD0h case   33:*/		return 0x82176FD4;
		  /* 82176FD4h */ case   34:  		/* addi R7, R7, -1 */
		/* 82176FD4h case   34:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 82176FD4h case   34:*/		return 0x82176FD8;
		  /* 82176FD8h */ case   35:  		/* sld R4, R21, R9 */
		/* 82176FD8h case   35:*/		cpu::op::sld<0>(regs,&regs.R4,regs.R21,regs.R9);
		/* 82176FD8h case   35:*/		return 0x82176FDC;
		  /* 82176FDCh */ case   36:  		/* and R7, R7, R5 */
		/* 82176FDCh case   36:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 82176FDCh case   36:*/		return 0x82176FE0;
		  /* 82176FE0h */ case   37:  		/* lis R5, -28311 */
		/* 82176FE0h case   37:*/		cpu::op::lis<0>(regs,&regs.R5,0xFFFF9169);
		/* 82176FE0h case   37:*/		return 0x82176FE4;
		  /* 82176FE4h */ case   38:  		/* and R7, R7, R4 */
		/* 82176FE4h case   38:*/		cpu::op::and<0>(regs,&regs.R7,regs.R7,regs.R4);
		/* 82176FE4h case   38:*/		return 0x82176FE8;
		  /* 82176FE8h */ case   39:  		/* lis R4, 0 */
		/* 82176FE8h case   39:*/		cpu::op::lis<0>(regs,&regs.R4,0x0);
		/* 82176FE8h case   39:*/		return 0x82176FEC;
		  /* 82176FECh */ case   40:  		/* srd R9, R7, R9 */
		/* 82176FECh case   40:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 82176FECh case   40:*/		return 0x82176FF0;
		  /* 82176FF0h */ case   41:  		/* ori R5, R5, 5192 */
		/* 82176FF0h case   41:*/		cpu::op::ori<0>(regs,&regs.R5,regs.R5,0x1448);
		/* 82176FF0h case   41:*/		return 0x82176FF4;
		  /* 82176FF4h */ case   42:  		/* ori R4, R4, 36262 */
		/* 82176FF4h case   42:*/		cpu::op::ori<0>(regs,&regs.R4,regs.R4,0x8DA6);
		/* 82176FF4h case   42:*/		return 0x82176FF8;
		  /* 82176FF8h */ case   43:  		/* nor R9, R9, R9 */
		/* 82176FF8h case   43:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82176FF8h case   43:*/		return 0x82176FFC;
		  /* 82176FFCh */ case   44:  		/* addi R7, R1, 192 */
		/* 82176FFCh case   44:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xC0);
		/* 82176FFCh case   44:*/		return 0x82177000;
		  /* 82177000h */ case   45:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 82177000h case   45:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 82177000h case   45:*/		return 0x82177004;
		  /* 82177004h */ case   46:  		/* rldimi R5, R4, 32, 0 */
		/* 82177004h case   46:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R5,regs.R4);
		/* 82177004h case   46:*/		return 0x82177008;
		  /* 82177008h */ case   47:  		/* addi R4, R1, 128 */
		/* 82177008h case   47:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 82177008h case   47:*/		return 0x8217700C;
		  /* 8217700Ch */ case   48:  		/* srd R5, R5, R9 */
		/* 8217700Ch case   48:*/		cpu::op::srd<0>(regs,&regs.R5,regs.R5,regs.R9);
		/* 8217700Ch case   48:*/		return 0x82177010;
		  /* 82177010h */ case   49:  		/* stwx R10, <#[R11 + R7]> */
		/* 82177010h case   49:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82177010h case   49:*/		return 0x82177014;
		  /* 82177014h */ case   50:  		/* addi R7, R1, 112 */
		/* 82177014h case   50:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 82177014h case   50:*/		return 0x82177018;
		  /* 82177018h */ case   51:  		/* srd R5, R5, R9 */
		/* 82177018h case   51:*/		cpu::op::srd<0>(regs,&regs.R5,regs.R5,regs.R9);
		/* 82177018h case   51:*/		return 0x8217701C;
		  /* 8217701Ch */ case   52:  		/* srd R5, R5, R9 */
		/* 8217701Ch case   52:*/		cpu::op::srd<0>(regs,&regs.R5,regs.R5,regs.R9);
		/* 8217701Ch case   52:*/		return 0x82177020;
		  /* 82177020h */ case   53:  		/* stwx R9, <#[R11 + R7]> */
		/* 82177020h case   53:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 82177020h case   53:*/		return 0x82177024;
		  /* 82177024h */ case   54:  		/* rlwinm R9, R5, 0, 29, 31 */
		/* 82177024h case   54:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R9,regs.R5);
		/* 82177024h case   54:*/		return 0x82177028;
		  /* 82177028h */ case   55:  		/* addi R10, R10, 1 */
		/* 82177028h case   55:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82177028h case   55:*/		return 0x8217702C;
		  /* 8217702Ch */ case   56:  		/* stwx R9, <#[R11 + R4]> */
		/* 8217702Ch case   56:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + regs.R4 + 0x00000000) );
		/* 8217702Ch case   56:*/		return 0x82177030;
	}
	return 0x82177030;
} // Block from 82176F4Ch-82177030h (57 instructions)

//////////////////////////////////////////////////////
// Block at 82177030h
// Function '?FindNibbleWithClearBit@?$FixedSizeBitSet@_K$03@D3DXShader@@QAAIIPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177030( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177030) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177030);
		  /* 82177030h */ case    0:  		/* addi R6, R6, 1 */
		/* 82177030h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 82177030h case    0:*/		return 0x82177034;
		  /* 82177034h */ case    1:  		/* addi R8, R8, 5 */
		/* 82177034h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x5);
		/* 82177034h case    1:*/		return 0x82177038;
		  /* 82177038h */ case    2:  		/* addi R11, R11, 4 */
		/* 82177038h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82177038h case    2:*/		return 0x8217703C;
		  /* 8217703Ch */ case    3:  		/* bc 16, CR0_LT, -160 */
		/* 8217703Ch case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82176F9C;  }
		/* 8217703Ch case    3:*/		return 0x82177040;
		  /* 82177040h */ case    4:  		/* stw R22, <#[R1 + 80]> */
		/* 82177040h case    4:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000050) );
		/* 82177040h case    4:*/		return 0x82177044;
		  /* 82177044h */ case    5:  		/* mr R6, R22 */
		/* 82177044h case    5:*/		regs.R6 = regs.R22;
		/* 82177044h case    5:*/		return 0x82177048;
		  /* 82177048h */ case    6:  		/* stw R22, <#[R1 + 84]> */
		/* 82177048h case    6:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000054) );
		/* 82177048h case    6:*/		return 0x8217704C;
		  /* 8217704Ch */ case    7:  		/* addi R7, R1, 112 */
		/* 8217704Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8217704Ch case    7:*/		return 0x82177050;
		  /* 82177050h */ case    8:  		/* stw R22, <#[R1 + 88]> */
		/* 82177050h case    8:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000058) );
		/* 82177050h case    8:*/		return 0x82177054;
		  /* 82177054h */ case    9:  		/* stw R22, <#[R1 + 92]> */
		/* 82177054h case    9:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x0000005C) );
		/* 82177054h case    9:*/		return 0x82177058;
		  /* 82177058h */ case   10:  		/* slw R11, R20, R6 */
		/* 82177058h case   10:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R6);
		/* 82177058h case   10:*/		return 0x8217705C;
		  /* 8217705Ch */ case   11:  		/* and R11, R11, R26 */
		/* 8217705Ch case   11:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 8217705Ch case   11:*/		return 0x82177060;
		  /* 82177060h */ case   12:  		/* rlwinm. R11, R11, 0, 28, 31 */
		/* 82177060h case   12:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R11,regs.R11);
		/* 82177060h case   12:*/		return 0x82177064;
		  /* 82177064h */ case   13:  		/* bc 12, CR0_EQ, 60 */
		/* 82177064h case   13:*/		if ( regs.CR[0].eq ) { return 0x821770A0;  }
		/* 82177064h case   13:*/		return 0x82177068;
		  /* 82177068h */ case   14:  		/* li R10, 4 */
		/* 82177068h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82177068h case   14:*/		return 0x8217706C;
		  /* 8217706Ch */ case   15:  		/* lwz R8, <#[R7]> */
		/* 8217706Ch case   15:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 8217706Ch case   15:*/		return 0x82177070;
		  /* 82177070h */ case   16:  		/* mr R9, R22 */
		/* 82177070h case   16:*/		regs.R9 = regs.R22;
		/* 82177070h case   16:*/		return 0x82177074;
		  /* 82177074h */ case   17:  		/* addi R11, R1, 80 */
		/* 82177074h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 82177074h case   17:*/		return 0x82177078;
		  /* 82177078h */ case   18:  		/* mtspr CTR, R10 */
		/* 82177078h case   18:*/		regs.CTR = regs.R10;
		/* 82177078h case   18:*/		return 0x8217707C;
		  /* 8217707Ch */ case   19:  		/* slw R10, R20, R9 */
		/* 8217707Ch case   19:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R20,regs.R9);
		/* 8217707Ch case   19:*/		return 0x82177080;
		  /* 82177080h */ case   20:  		/* and. R10, R10, R8 */
		/* 82177080h case   20:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R8);
		/* 82177080h case   20:*/		return 0x82177084;
		  /* 82177084h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 82177084h case   21:*/		if ( regs.CR[0].eq ) { return 0x82177094;  }
		/* 82177084h case   21:*/		return 0x82177088;
		  /* 82177088h */ case   22:  		/* lwz R10, <#[R11]> */
		/* 82177088h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82177088h case   22:*/		return 0x8217708C;
		  /* 8217708Ch */ case   23:  		/* addi R10, R10, 1 */
		/* 8217708Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217708Ch case   23:*/		return 0x82177090;
		  /* 82177090h */ case   24:  		/* stw R10, <#[R11]> */
		/* 82177090h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82177090h case   24:*/		return 0x82177094;
	}
	return 0x82177094;
} // Block from 82177030h-82177094h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82177094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177094);
		  /* 82177094h */ case    0:  		/* addi R9, R9, 1 */
		/* 82177094h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82177094h case    0:*/		return 0x82177098;
		  /* 82177098h */ case    1:  		/* addi R11, R11, 4 */
		/* 82177098h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82177098h case    1:*/		return 0x8217709C;
		  /* 8217709Ch */ case    2:  		/* bc 16, CR0_LT, -32 */
		/* 8217709Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8217707C;  }
		/* 8217709Ch case    2:*/		return 0x821770A0;
	}
	return 0x821770A0;
} // Block from 82177094h-821770A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821770A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821770A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821770A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821770A0);
		  /* 821770A0h */ case    0:  		/* addi R6, R6, 1 */
		/* 821770A0h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821770A0h case    0:*/		return 0x821770A4;
		  /* 821770A4h */ case    1:  		/* addi R7, R7, 4 */
		/* 821770A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821770A4h case    1:*/		return 0x821770A8;
	}
	return 0x821770A8;
} // Block from 821770A0h-821770A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821770A8h
// Function '?FindLastNibbleWithClearBit@?$FixedSizeBitSet@_K$03@D3DXShader@@QAAIIPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821770A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821770A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821770A8);
		  /* 821770A8h */ case    0:  		/* cmplwi CR6, R6, 4 */
		/* 821770A8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000004);
		/* 821770A8h case    0:*/		return 0x821770AC;
		  /* 821770ACh */ case    1:  		/* bc 12, CR6_LT, -84 */
		/* 821770ACh case    1:*/		if ( regs.CR[6].lt ) { return 0x82177058;  }
		/* 821770ACh case    1:*/		return 0x821770B0;
		  /* 821770B0h */ case    2:  		/* mr R30, R22 */
		/* 821770B0h case    2:*/		regs.R30 = regs.R22;
		/* 821770B0h case    2:*/		return 0x821770B4;
		  /* 821770B4h */ case    3:  		/* mr R3, R22 */
		/* 821770B4h case    3:*/		regs.R3 = regs.R22;
		/* 821770B4h case    3:*/		return 0x821770B8;
		  /* 821770B8h */ case    4:  		/* mr R29, R27 */
		/* 821770B8h case    4:*/		regs.R29 = regs.R27;
		/* 821770B8h case    4:*/		return 0x821770BC;
		  /* 821770BCh */ case    5:  		/* li R10, 4 */
		/* 821770BCh case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821770BCh case    5:*/		return 0x821770C0;
		  /* 821770C0h */ case    6:  		/* mr R31, R22 */
		/* 821770C0h case    6:*/		regs.R31 = regs.R22;
		/* 821770C0h case    6:*/		return 0x821770C4;
		  /* 821770C4h */ case    7:  		/* li R9, 5 */
		/* 821770C4h case    7:*/		cpu::op::li<0>(regs,&regs.R9,0x5);
		/* 821770C4h case    7:*/		return 0x821770C8;
		  /* 821770C8h */ case    8:  		/* mr R11, R22 */
		/* 821770C8h case    8:*/		regs.R11 = regs.R22;
		/* 821770C8h case    8:*/		return 0x821770CC;
		  /* 821770CCh */ case    9:  		/* addi R8, R1, 128 */
		/* 821770CCh case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x80);
		/* 821770CCh case    9:*/		return 0x821770D0;
		  /* 821770D0h */ case   10:  		/* mtspr CTR, R10 */
		/* 821770D0h case   10:*/		regs.CTR = regs.R10;
		/* 821770D0h case   10:*/		return 0x821770D4;
		  /* 821770D4h */ case   11:  		/* slw R10, R20, R11 */
		/* 821770D4h case   11:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R20,regs.R11);
		/* 821770D4h case   11:*/		return 0x821770D8;
		  /* 821770D8h */ case   12:  		/* and. R10, R10, R29 */
		/* 821770D8h case   12:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R29);
		/* 821770D8h case   12:*/		return 0x821770DC;
		  /* 821770DCh */ case   13:  		/* bc 12, CR0_EQ, 24 */
		/* 821770DCh case   13:*/		if ( regs.CR[0].eq ) { return 0x821770F4;  }
		/* 821770DCh case   13:*/		return 0x821770E0;
		  /* 821770E0h */ case   14:  		/* lwz R10, <#[R8]> */
		/* 821770E0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821770E0h case   14:*/		return 0x821770E4;
		  /* 821770E4h */ case   15:  		/* cmplw CR6, R10, R9 */
		/* 821770E4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821770E4h case   15:*/		return 0x821770E8;
		  /* 821770E8h */ case   16:  		/* bc 4, CR6_LT, 12 */
		/* 821770E8h case   16:*/		if ( !regs.CR[6].lt ) { return 0x821770F4;  }
		/* 821770E8h case   16:*/		return 0x821770EC;
		  /* 821770ECh */ case   17:  		/* mr R9, R10 */
		/* 821770ECh case   17:*/		regs.R9 = regs.R10;
		/* 821770ECh case   17:*/		return 0x821770F0;
		  /* 821770F0h */ case   18:  		/* mr R31, R11 */
		/* 821770F0h case   18:*/		regs.R31 = regs.R11;
		/* 821770F0h case   18:*/		return 0x821770F4;
	}
	return 0x821770F4;
} // Block from 821770A8h-821770F4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821770F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821770F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821770F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821770F4);
		  /* 821770F4h */ case    0:  		/* addi R11, R11, 1 */
		/* 821770F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821770F4h case    0:*/		return 0x821770F8;
		  /* 821770F8h */ case    1:  		/* addi R8, R8, 4 */
		/* 821770F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821770F8h case    1:*/		return 0x821770FC;
		  /* 821770FCh */ case    2:  		/* bc 16, CR0_LT, -40 */
		/* 821770FCh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821770D4;  }
		/* 821770FCh case    2:*/		return 0x82177100;
		  /* 82177100h */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 82177100h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82177100h case    3:*/		return 0x82177104;
		  /* 82177104h */ case    4:  		/* bc 12, CR6_EQ, 244 */
		/* 82177104h case    4:*/		if ( regs.CR[6].eq ) { return 0x821771F8;  }
		/* 82177104h case    4:*/		return 0x82177108;
		  /* 82177108h */ case    5:  		/* addi R6, R1, 112 */
		/* 82177108h case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x70);
		/* 82177108h case    5:*/		return 0x8217710C;
		  /* 8217710Ch */ case    6:  		/* rlwinm R9, R31, 2, 0, 29 */
		/* 8217710Ch case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R31);
		/* 8217710Ch case    6:*/		return 0x82177110;
		  /* 82177110h */ case    7:  		/* li R11, 4 */
		/* 82177110h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x4);
		/* 82177110h case    7:*/		return 0x82177114;
		  /* 82177114h */ case    8:  		/* li R7, 5 */
		/* 82177114h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x5);
		/* 82177114h case    8:*/		return 0x82177118;
	}
	return 0x82177118;
} // Block from 821770F4h-82177118h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82177118h
// Function '?FindMERGEDependent@Instruction@D3DXShader@@QAAPAV12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177118( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177118) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177118);
		  /* 82177118h */ case    0:  		/* mr R10, R22 */
		/* 82177118h case    0:*/		regs.R10 = regs.R22;
		/* 82177118h case    0:*/		return 0x8217711C;
		  /* 8217711Ch */ case    1:  		/* mr R8, R22 */
		/* 8217711Ch case    1:*/		regs.R8 = regs.R22;
		/* 8217711Ch case    1:*/		return 0x82177120;
		  /* 82177120h */ case    2:  		/* lwzx R4, <#[R9 + R6]> */
		/* 82177120h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 82177120h case    2:*/		return 0x82177124;
		  /* 82177124h */ case    3:  		/* addi R6, R1, 80 */
		/* 82177124h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82177124h case    3:*/		return 0x82177128;
		  /* 82177128h */ case    4:  		/* mtspr CTR, R11 */
		/* 82177128h case    4:*/		regs.CTR = regs.R11;
		/* 82177128h case    4:*/		return 0x8217712C;
		  /* 8217712Ch */ case    5:  		/* slw R5, R20, R8 */
		/* 8217712Ch case    5:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R20,regs.R8);
		/* 8217712Ch case    5:*/		return 0x82177130;
		  /* 82177130h */ case    6:  		/* and. R11, R4, R5 */
		/* 82177130h case    6:*/		cpu::op::and<1>(regs,&regs.R11,regs.R4,regs.R5);
		/* 82177130h case    6:*/		return 0x82177134;
		  /* 82177134h */ case    7:  		/* bc 12, CR0_EQ, 24 */
		/* 82177134h case    7:*/		if ( regs.CR[0].eq ) { return 0x8217714C;  }
		/* 82177134h case    7:*/		return 0x82177138;
		  /* 82177138h */ case    8:  		/* lwz R11, <#[R6]> */
		/* 82177138h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 82177138h case    8:*/		return 0x8217713C;
		  /* 8217713Ch */ case    9:  		/* cmplw CR6, R11, R7 */
		/* 8217713Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8217713Ch case    9:*/		return 0x82177140;
		  /* 82177140h */ case   10:  		/* bc 4, CR6_LT, 12 */
		/* 82177140h case   10:*/		if ( !regs.CR[6].lt ) { return 0x8217714C;  }
		/* 82177140h case   10:*/		return 0x82177144;
		  /* 82177144h */ case   11:  		/* mr R7, R11 */
		/* 82177144h case   11:*/		regs.R7 = regs.R11;
		/* 82177144h case   11:*/		return 0x82177148;
		  /* 82177148h */ case   12:  		/* mr R10, R5 */
		/* 82177148h case   12:*/		regs.R10 = regs.R5;
		/* 82177148h case   12:*/		return 0x8217714C;
	}
	return 0x8217714C;
} // Block from 82177118h-8217714Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217714Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217714C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217714C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217714C);
		  /* 8217714Ch */ case    0:  		/* addi R8, R8, 1 */
		/* 8217714Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 8217714Ch case    0:*/		return 0x82177150;
		  /* 82177150h */ case    1:  		/* addi R6, R6, 4 */
		/* 82177150h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 82177150h case    1:*/		return 0x82177154;
		  /* 82177154h */ case    2:  		/* bc 16, CR0_LT, -40 */
		/* 82177154h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8217712C;  }
		/* 82177154h case    2:*/		return 0x82177158;
		  /* 82177158h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 82177158h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82177158h case    3:*/		return 0x8217715C;
		  /* 8217715Ch */ case    4:  		/* bc 12, CR6_EQ, 188 */
		/* 8217715Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x82177218;  }
		/* 8217715Ch case    4:*/		return 0x82177160;
	}
	return 0x82177160;
} // Block from 8217714Ch-82177160h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177160h
// Function '?Find@?$RegisterSet@V?$FixedSizeBitSet@_K$03@D3DXShader@@$1?PrintTempRegister@2@YAXPAVCompiler@2@I@Z$0EA@$03$1?ReportOutOfTempRegistersError@2@YAX0@Z@D3DXShader@@QAAIIIH@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177160( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177160) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177160);
		  /* 82177160h */ case    0:  		/* cmplwi CR6, R7, 0 */
		/* 82177160h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 82177160h case    0:*/		return 0x82177164;
		  /* 82177164h */ case    1:  		/* bc 12, CR6_EQ, 180 */
		/* 82177164h case    1:*/		if ( regs.CR[6].eq ) { return 0x82177218;  }
		/* 82177164h case    1:*/		return 0x82177168;
		  /* 82177168h */ case    2:  		/* addi R8, R1, 192 */
		/* 82177168h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 82177168h case    2:*/		return 0x8217716C;
		  /* 8217716Ch */ case    3:  		/* cntlzw R11, R10 */
		/* 8217716Ch case    3:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R10);
		/* 8217716Ch case    3:*/		return 0x82177170;
		  /* 82177170h */ case    4:  		/* li R7, 3 */
		/* 82177170h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82177170h case    4:*/		return 0x82177174;
		  /* 82177174h */ case    5:  		/* subfic R11, R11, 31 */
		/* 82177174h case    5:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 82177174h case    5:*/		return 0x82177178;
		  /* 82177178h */ case    6:  		/* addi R6, R1, 80 */
		/* 82177178h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 82177178h case    6:*/		return 0x8217717C;
		  /* 8217717Ch */ case    7:  		/* lwzx R8, <#[R9 + R8]> */
		/* 8217717Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8217717Ch case    7:*/		return 0x82177180;
		  /* 82177180h */ case    8:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 82177180h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 82177180h case    8:*/		return 0x82177184;
		  /* 82177184h */ case    9:  		/* li R9, 4 */
		/* 82177184h case    9:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82177184h case    9:*/		return 0x82177188;
		  /* 82177188h */ case   10:  		/* rlwinm R8, R8, 1, 0, 30 */
		/* 82177188h case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R8);
		/* 82177188h case   10:*/		return 0x8217718C;
		  /* 8217718Ch */ case   11:  		/* or R3, R10, R3 */
		/* 8217718Ch case   11:*/		cpu::op::or<0>(regs,&regs.R3,regs.R10,regs.R3);
		/* 8217718Ch case   11:*/		return 0x82177190;
		  /* 82177190h */ case   12:  		/* slw R7, R7, R8 */
		/* 82177190h case   12:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R8);
		/* 82177190h case   12:*/		return 0x82177194;
		  /* 82177194h */ case   13:  		/* slw R8, R11, R8 */
		/* 82177194h case   13:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 82177194h case   13:*/		return 0x82177198;
		  /* 82177198h */ case   14:  		/* stwx R22, <#[R5 + R6]> */
		/* 82177198h case   14:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R5 + regs.R6 + 0x00000000) );
		/* 82177198h case   14:*/		return 0x8217719C;
		  /* 8217719Ch */ case   15:  		/* andc R7, R30, R7 */
		/* 8217719Ch case   15:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R30,regs.R7);
		/* 8217719Ch case   15:*/		return 0x821771A0;
		  /* 821771A0h */ case   16:  		/* mtspr CTR, R9 */
		/* 821771A0h case   16:*/		regs.CTR = regs.R9;
		/* 821771A0h case   16:*/		return 0x821771A4;
		  /* 821771A4h */ case   17:  		/* mr R11, R22 */
		/* 821771A4h case   17:*/		regs.R11 = regs.R22;
		/* 821771A4h case   17:*/		return 0x821771A8;
		  /* 821771A8h */ case   18:  		/* or R30, R7, R8 */
		/* 821771A8h case   18:*/		cpu::op::or<0>(regs,&regs.R30,regs.R7,regs.R8);
		/* 821771A8h case   18:*/		return 0x821771AC;
		  /* 821771ACh */ case   19:  		/* addi R7, R1, 112 */
		/* 821771ACh case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 821771ACh case   19:*/		return 0x821771B0;
		  /* 821771B0h */ case   20:  		/* lwzx R8, <#[R11 + R7]> */
		/* 821771B0h case   20:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821771B0h case   20:*/		return 0x821771B4;
		  /* 821771B4h */ case   21:  		/* and. R9, R8, R10 */
		/* 821771B4h case   21:*/		cpu::op::and<1>(regs,&regs.R9,regs.R8,regs.R10);
		/* 821771B4h case   21:*/		return 0x821771B8;
		  /* 821771B8h */ case   22:  		/* bc 12, CR0_EQ, 28 */
		/* 821771B8h case   22:*/		if ( regs.CR[0].eq ) { return 0x821771D4;  }
		/* 821771B8h case   22:*/		return 0x821771BC;
		  /* 821771BCh */ case   23:  		/* addi R9, R1, 128 */
		/* 821771BCh case   23:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 821771BCh case   23:*/		return 0x821771C0;
		  /* 821771C0h */ case   24:  		/* subf R8, R10, R8 */
		/* 821771C0h case   24:*/		cpu::op::subf<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 821771C0h case   24:*/		return 0x821771C4;
		  /* 821771C4h */ case   25:  		/* stwx R8, <#[R11 + R7]> */
		/* 821771C4h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821771C4h case   25:*/		return 0x821771C8;
		  /* 821771C8h */ case   26:  		/* lwzx R8, <#[R11 + R9]> */
		/* 821771C8h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821771C8h case   26:*/		return 0x821771CC;
		  /* 821771CCh */ case   27:  		/* addi R8, R8, -1 */
		/* 821771CCh case   27:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821771CCh case   27:*/		return 0x821771D0;
		  /* 821771D0h */ case   28:  		/* stwx R8, <#[R11 + R9]> */
		/* 821771D0h case   28:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821771D0h case   28:*/		return 0x821771D4;
	}
	return 0x821771D4;
} // Block from 82177160h-821771D4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821771D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821771D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821771D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821771D4);
		  /* 821771D4h */ case    0:  		/* addi R11, R11, 4 */
		/* 821771D4h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821771D4h case    0:*/		return 0x821771D8;
		  /* 821771D8h */ case    1:  		/* bc 16, CR0_LT, -44 */
		/* 821771D8h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821771AC;  }
		/* 821771D8h case    1:*/		return 0x821771DC;
		  /* 821771DCh */ case    2:  		/* slw R11, R20, R31 */
		/* 821771DCh case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R31);
		/* 821771DCh case    2:*/		return 0x821771E0;
		  /* 821771E0h */ case    3:  		/* subf. R29, R11, R29 */
		/* 821771E0h case    3:*/		cpu::op::subf<1>(regs,&regs.R29,regs.R11,regs.R29);
		/* 821771E0h case    3:*/		return 0x821771E4;
		  /* 821771E4h */ case    4:  		/* bc 4, CR0_EQ, -296 */
		/* 821771E4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821770BC;  }
		/* 821771E4h case    4:*/		return 0x821771E8;
		  /* 821771E8h */ case    5:  		/* stw R30, <#[R17]> */
		/* 821771E8h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R17 + 0x00000000) );
		/* 821771E8h case    5:*/		return 0x821771EC;
		  /* 821771ECh */ case    6:  		/* rlwimi R3, R28, 4, 0, 27 */
		/* 821771ECh case    6:*/		cpu::op::rlwimi<0,4,0,27>(regs,&regs.R3,regs.R28);
		/* 821771ECh case    6:*/		return 0x821771F0;
	}
	return 0x821771F0;
} // Block from 821771D4h-821771F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821771F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821771F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821771F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821771F0);
		  /* 821771F0h */ case    0:  		/* addi R1, R1, 496 */
		/* 821771F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x1F0);
		/* 821771F0h case    0:*/		return 0x821771F4;
		  /* 821771F4h */ case    1:  		/* b -941944 */
		/* 821771F4h case    1:*/		return 0x8209127C;
		/* 821771F4h case    1:*/		return 0x821771F8;
	}
	return 0x821771F8;
} // Block from 821771F0h-821771F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821771F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821771F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821771F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821771F8);
		  /* 821771F8h */ case    0:  		/* li R6, 4 */
		/* 821771F8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821771F8h case    0:*/		return 0x821771FC;
		  /* 821771FCh */ case    1:  		/* mr R5, R25 */
		/* 821771FCh case    1:*/		regs.R5 = regs.R25;
		/* 821771FCh case    1:*/		return 0x82177200;
		  /* 82177200h */ case    2:  		/* addi R4, R28, 1 */
		/* 82177200h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R28,0x1);
		/* 82177200h case    2:*/		return 0x82177204;
		  /* 82177204h */ case    3:  		/* addi R3, R1, 144 */
		/* 82177204h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x90);
		/* 82177204h case    3:*/		return 0x82177208;
		  /* 82177208h */ case    4:  		/* bl -2368 */
		/* 82177208h case    4:*/		regs.LR = 0x8217720C; return 0x821768C8;
		/* 82177208h case    4:*/		return 0x8217720C;
		  /* 8217720Ch */ case    5:  		/* cmpwi CR6, R3, -1 */
		/* 8217720Ch case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 8217720Ch case    5:*/		return 0x82177210;
		  /* 82177210h */ case    6:  		/* bc 4, CR6_EQ, -656 */
		/* 82177210h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82176F80;  }
		/* 82177210h case    6:*/		return 0x82177214;
		  /* 82177214h */ case    7:  		/* b -36 */
		/* 82177214h case    7:*/		return 0x821771F0;
		/* 82177214h case    7:*/		return 0x82177218;
	}
	return 0x82177218;
} // Block from 821771F8h-82177218h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82177218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177218);
		  /* 82177218h */ case    0:  		/* li R4, 4800 */
		/* 82177218h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82177218h case    0:*/		return 0x8217721C;
		  /* 8217721Ch */ case    1:  		/* mr R3, R18 */
		/* 8217721Ch case    1:*/		regs.R3 = regs.R18;
		/* 8217721Ch case    1:*/		return 0x82177220;
	}
	return 0x82177220;
} // Block from 82177218h-82177220h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177220h
// Function '?Alloc@?$RegisterSet@V?$FixedSizeBitSet@_K$03@D3DXShader@@$1?PrintTempRegister@2@YAXPAVCompiler@2@I@Z$0EA@$03$1?ReportOutOfTempRegistersError@2@YAX0@Z@D3DXShader@@QAAII_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177220( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177220) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177220);
		  /* 82177220h */ case    0:  		/* bl -152504 */
		/* 82177220h case    0:*/		regs.LR = 0x82177224; return 0x82151E68;
		/* 82177220h case    0:*/		return 0x82177224;
		  /* 82177224h */ case    1:  		/* nop */
		/* 82177224h case    1:*/		cpu::op::nop();
		/* 82177224h case    1:*/		return 0x82177228;
	}
	return 0x82177228;
} // Block from 82177220h-82177228h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177228h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177228);
		  /* 82177228h */ case    0:  		/* mfspr R12, LR */
		/* 82177228h case    0:*/		regs.R12 = regs.LR;
		/* 82177228h case    0:*/		return 0x8217722C;
		  /* 8217722Ch */ case    1:  		/* bl -942076 */
		/* 8217722Ch case    1:*/		regs.LR = 0x82177230; return 0x82091230;
		/* 8217722Ch case    1:*/		return 0x82177230;
		  /* 82177230h */ case    2:  		/* stwu R1, <#[R1 - 384]> */
		/* 82177230h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFE80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFE80);
		/* 82177230h case    2:*/		return 0x82177234;
		  /* 82177234h */ case    3:  		/* lwz R10, <#[R3 + 116]> */
		/* 82177234h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000074) );
		/* 82177234h case    3:*/		return 0x82177238;
		  /* 82177238h */ case    4:  		/* li R22, 0 */
		/* 82177238h case    4:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82177238h case    4:*/		return 0x8217723C;
		  /* 8217723Ch */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 8217723Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8217723Ch case    5:*/		return 0x82177240;
		  /* 82177240h */ case    6:  		/* mr R24, R3 */
		/* 82177240h case    6:*/		regs.R24 = regs.R3;
		/* 82177240h case    6:*/		return 0x82177244;
		  /* 82177244h */ case    7:  		/* addi R21, R10, 1 */
		/* 82177244h case    7:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R10,0x1);
		/* 82177244h case    7:*/		return 0x82177248;
		  /* 82177248h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82177248h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82177248h case    8:*/		return 0x8217724C;
		  /* 8217724Ch */ case    9:  		/* addi R9, R21, 63 */
		/* 8217724Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R21,0x3F);
		/* 8217724Ch case    9:*/		return 0x82177250;
		  /* 82177250h */ case   10:  		/* mr R18, R22 */
		/* 82177250h case   10:*/		regs.R18 = regs.R22;
		/* 82177250h case   10:*/		return 0x82177254;
		  /* 82177254h */ case   11:  		/* rlwinm R20, R9, 26, 6, 31 */
		/* 82177254h case   11:*/		cpu::op::rlwinm<0,26,6,31>(regs,&regs.R20,regs.R9);
		/* 82177254h case   11:*/		return 0x82177258;
		  /* 82177258h */ case   12:  		/* bc 4, CR0_EQ, 1780 */
		/* 82177258h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217794C;  }
		/* 82177258h case   12:*/		return 0x8217725C;
		  /* 8217725Ch */ case   13:  		/* mr R23, R11 */
		/* 8217725Ch case   13:*/		regs.R23 = regs.R11;
		/* 8217725Ch case   13:*/		return 0x82177260;
		  /* 82177260h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 82177260h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82177260h case   14:*/		return 0x82177264;
		  /* 82177264h */ case   15:  		/* bc 12, CR0_EQ, 1768 */
		/* 82177264h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217794C;  }
		/* 82177264h case   15:*/		return 0x82177268;
		  /* 82177268h */ case   16:  		/* lis R11, -32252 */
		/* 82177268h case   16:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 82177268h case   16:*/		return 0x8217726C;
		  /* 8217726Ch */ case   17:  		/* addi R19, R11, -17164 */
		/* 8217726Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0xFFFFBCF4);
		/* 8217726Ch case   17:*/		return 0x82177270;
		  /* 82177270h */ case   18:  		/* lwz R11, <#[R23 + 28]> */
		/* 82177270h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 82177270h case   18:*/		return 0x82177274;
		  /* 82177274h */ case   19:  		/* addi R29, R23, 24 */
		/* 82177274h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R23,0x18);
		/* 82177274h case   19:*/		return 0x82177278;
		  /* 82177278h */ case   20:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82177278h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82177278h case   20:*/		return 0x8217727C;
		  /* 8217727Ch */ case   21:  		/* bc 4, CR0_EQ, 48 */
		/* 8217727Ch case   21:*/		if ( !regs.CR[0].eq ) { return 0x821772AC;  }
		/* 8217727Ch case   21:*/		return 0x82177280;
		  /* 82177280h */ case   22:  		/* cmplwi CR0, R11, 0 */
		/* 82177280h case   22:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82177280h case   22:*/		return 0x82177284;
		  /* 82177284h */ case   23:  		/* bc 12, CR0_EQ, 40 */
		/* 82177284h case   23:*/		if ( regs.CR[0].eq ) { return 0x821772AC;  }
		/* 82177284h case   23:*/		return 0x82177288;
		  /* 82177288h */ case   24:  		/* lwz R10, <#[R11 + 20]> */
		/* 82177288h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 82177288h case   24:*/		return 0x8217728C;
		  /* 8217728Ch */ case   25:  		/* rlwinm R9, R11, 0, 0, 30 */
		/* 8217728Ch case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R11);
		/* 8217728Ch case   25:*/		return 0x82177290;
		  /* 82177290h */ case   26:  		/* rlwinm R10, R10, 0, 2, 0 */
		/* 82177290h case   26:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R10,regs.R10);
		/* 82177290h case   26:*/		return 0x82177294;
		  /* 82177294h */ case   27:  		/* stw R10, <#[R11 + 20]> */
		/* 82177294h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 82177294h case   27:*/		return 0x82177298;
		  /* 82177298h */ case   28:  		/* lwz R11, <#[R9 + 40]> */
		/* 82177298h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000028) );
		/* 82177298h case   28:*/		return 0x8217729C;
		  /* 8217729Ch */ case   29:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217729Ch case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217729Ch case   29:*/		return 0x821772A0;
		  /* 821772A0h */ case   30:  		/* bc 4, CR0_EQ, 12 */
		/* 821772A0h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821772AC;  }
		/* 821772A0h case   30:*/		return 0x821772A4;
		  /* 821772A4h */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 821772A4h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821772A4h case   31:*/		return 0x821772A8;
		  /* 821772A8h */ case   32:  		/* bc 4, CR6_EQ, -32 */
		/* 821772A8h case   32:*/		if ( !regs.CR[6].eq ) { return 0x82177288;  }
		/* 821772A8h case   32:*/		return 0x821772AC;
	}
	return 0x821772AC;
} // Block from 82177228h-821772ACh (33 instructions)

//////////////////////////////////////////////////////
// Block at 821772ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821772AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821772AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821772AC);
		  /* 821772ACh */ case    0:  		/* mr R4, R24 */
		/* 821772ACh case    0:*/		regs.R4 = regs.R24;
		/* 821772ACh case    0:*/		return 0x821772B0;
		  /* 821772B0h */ case    1:  		/* addi R3, R1, 96 */
		/* 821772B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821772B0h case    1:*/		return 0x821772B4;
		  /* 821772B4h */ case    2:  		/* bl -31892 */
		/* 821772B4h case    2:*/		regs.LR = 0x821772B8; return 0x8216F620;
		/* 821772B4h case    2:*/		return 0x821772B8;
		  /* 821772B8h */ case    3:  		/* lwz R3, <#[R23 + 88]> */
		/* 821772B8h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x00000058) );
		/* 821772B8h case    3:*/		return 0x821772BC;
		  /* 821772BCh */ case    4:  		/* cmplwi CR6, R3, 0 */
		/* 821772BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821772BCh case    4:*/		return 0x821772C0;
		  /* 821772C0h */ case    5:  		/* bc 12, CR6_EQ, 144 */
		/* 821772C0h case    5:*/		if ( regs.CR[6].eq ) { return 0x82177350;  }
		/* 821772C0h case    5:*/		return 0x821772C4;
		  /* 821772C4h */ case    6:  		/* mr R5, R20 */
		/* 821772C4h case    6:*/		regs.R5 = regs.R20;
		/* 821772C4h case    6:*/		return 0x821772C8;
	}
	return 0x821772C8;
} // Block from 821772ACh-821772C8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821772C8h
// Function '?AllocRegWithLocalInterference@Compiler@D3DXShader@@AAAIPAVGeneralRegisterSet@2@PAVInstruction@2@1PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821772C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821772C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821772C8);
		  /* 821772C8h */ case    0:  		/* li R4, 0 */
		/* 821772C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821772C8h case    0:*/		return 0x821772CC;
		  /* 821772CCh */ case    1:  		/* bl -33652 */
		/* 821772CCh case    1:*/		regs.LR = 0x821772D0; return 0x8216EF58;
		/* 821772CCh case    1:*/		return 0x821772D0;
		  /* 821772D0h */ case    2:  		/* addi R30, R21, -1 */
		/* 821772D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R21,0xFFFFFFFF);
		/* 821772D0h case    2:*/		return 0x821772D4;
		  /* 821772D4h */ case    3:  		/* b 112 */
		/* 821772D4h case    3:*/		return 0x82177344;
		/* 821772D4h case    3:*/		return 0x821772D8;
		  /* 821772D8h */ case    4:  		/* lwz R11, <#[R24 + 708]> */
		/* 821772D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x000002C4) );
		/* 821772D8h case    4:*/		return 0x821772DC;
		  /* 821772DCh */ case    5:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 821772DCh case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 821772DCh case    5:*/		return 0x821772E0;
		  /* 821772E0h */ case    6:  		/* lwzx R9, <#[R10 + R11]> */
		/* 821772E0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821772E0h case    6:*/		return 0x821772E4;
		  /* 821772E4h */ case    7:  		/* lwz R11, <#[R9 + 4]> */
		/* 821772E4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821772E4h case    7:*/		return 0x821772E8;
		  /* 821772E8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821772E8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821772E8h case    8:*/		return 0x821772EC;
		  /* 821772ECh */ case    9:  		/* bc 12, CR6_EQ, 56 */
		/* 821772ECh case    9:*/		if ( regs.CR[6].eq ) { return 0x82177324;  }
		/* 821772ECh case    9:*/		return 0x821772F0;
		  /* 821772F0h */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821772F0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821772F0h case   10:*/		return 0x821772F4;
		  /* 821772F4h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821772F4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821772F4h case   11:*/		return 0x821772F8;
		  /* 821772F8h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 821772F8h case   12:*/		if ( regs.CR[6].eq ) { return 0x82177308;  }
		/* 821772F8h case   12:*/		return 0x821772FC;
		  /* 821772FCh */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821772FCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821772FCh case   13:*/		return 0x82177300;
		  /* 82177300h */ case   14:  		/* rlwinm. R8, R10, 0, 4, 6 */
		/* 82177300h case   14:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R10);
		/* 82177300h case   14:*/		return 0x82177304;
		  /* 82177304h */ case   15:  		/* bc 4, CR0_EQ, 12 */
		/* 82177304h case   15:*/		if ( !regs.CR[0].eq ) { return 0x82177310;  }
		/* 82177304h case   15:*/		return 0x82177308;
	}
	return 0x82177308;
} // Block from 821772C8h-82177308h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82177308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177308);
		  /* 82177308h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 82177308h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82177308h case    0:*/		return 0x8217730C;
		  /* 8217730Ch */ case    1:  		/* b -36 */
		/* 8217730Ch case    1:*/		return 0x821772E8;
		/* 8217730Ch case    1:*/		return 0x82177310;
	}
	return 0x82177310;
} // Block from 82177308h-82177310h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177310);
		  /* 82177310h */ case    0:  		/* lwz R11, <#[R9 + 8]> */
		/* 82177310h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 82177310h case    0:*/		return 0x82177314;
		  /* 82177314h */ case    1:  		/* addi R3, R1, 96 */
		/* 82177314h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82177314h case    1:*/		return 0x82177318;
		  /* 82177318h */ case    2:  		/* rlwimi R11, R10, 20, 19, 26 */
		/* 82177318h case    2:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R11,regs.R10);
		/* 82177318h case    2:*/		return 0x8217731C;
		  /* 8217731Ch */ case    3:  		/* rlwinm R4, R11, 31, 20, 31 */
		/* 8217731Ch case    3:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R4,regs.R11);
		/* 8217731Ch case    3:*/		return 0x82177320;
		  /* 82177320h */ case    4:  		/* bl -31872 */
		/* 82177320h case    4:*/		regs.LR = 0x82177324; return 0x8216F6A0;
		/* 82177320h case    4:*/		return 0x82177324;
	}
	return 0x82177324;
} // Block from 82177310h-82177324h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177324h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177324( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177324) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177324);
		  /* 82177324h */ case    0:  		/* cmplw CR6, R31, R30 */
		/* 82177324h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82177324h case    0:*/		return 0x82177328;
		  /* 82177328h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 82177328h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82177334;  }
		/* 82177328h case    1:*/		return 0x8217732C;
		  /* 8217732Ch */ case    2:  		/* li R31, -1 */
		/* 8217732Ch case    2:*/		cpu::op::li<0>(regs,&regs.R31,0xFFFFFFFF);
		/* 8217732Ch case    2:*/		return 0x82177330;
		  /* 82177330h */ case    3:  		/* b 24 */
		/* 82177330h case    3:*/		return 0x82177348;
		/* 82177330h case    3:*/		return 0x82177334;
	}
	return 0x82177334;
} // Block from 82177324h-82177334h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177334h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177334( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177334) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177334);
		  /* 82177334h */ case    0:  		/* mr R5, R20 */
		/* 82177334h case    0:*/		regs.R5 = regs.R20;
		/* 82177334h case    0:*/		return 0x82177338;
		  /* 82177338h */ case    1:  		/* lwz R3, <#[R23 + 88]> */
		/* 82177338h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x00000058) );
		/* 82177338h case    1:*/		return 0x8217733C;
		  /* 8217733Ch */ case    2:  		/* addi R4, R31, 1 */
		/* 8217733Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R31,0x1);
		/* 8217733Ch case    2:*/		return 0x82177340;
		  /* 82177340h */ case    3:  		/* bl -33768 */
		/* 82177340h case    3:*/		regs.LR = 0x82177344; return 0x8216EF58;
		/* 82177340h case    3:*/		return 0x82177344;
	}
	return 0x82177344;
} // Block from 82177334h-82177344h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177344);
		  /* 82177344h */ case    0:  		/* mr R31, R3 */
		/* 82177344h case    0:*/		regs.R31 = regs.R3;
		/* 82177344h case    0:*/		return 0x82177348;
	}
	return 0x82177348;
} // Block from 82177344h-82177348h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177348);
		  /* 82177348h */ case    0:  		/* cmplw CR6, R31, R30 */
		/* 82177348h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R30);
		/* 82177348h case    0:*/		return 0x8217734C;
		  /* 8217734Ch */ case    1:  		/* bc 4, CR6_GT, -116 */
		/* 8217734Ch case    1:*/		if ( !regs.CR[6].gt ) { return 0x821772D8;  }
		/* 8217734Ch case    1:*/		return 0x82177350;
	}
	return 0x82177350;
} // Block from 82177348h-82177350h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177350h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177350( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177350) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177350);
		  /* 82177350h */ case    0:  		/* lwz R11, <#[R23 + 96]> */
		/* 82177350h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000060) );
		/* 82177350h case    0:*/		return 0x82177354;
		  /* 82177354h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82177354h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177354h case    1:*/		return 0x82177358;
		  /* 82177358h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 82177358h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217736C;  }
		/* 82177358h case    2:*/		return 0x8217735C;
		  /* 8217735Ch */ case    3:  		/* lwz R10, <#[R1 + 164]> */
		/* 8217735Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x000000A4) );
		/* 8217735Ch case    3:*/		return 0x82177360;
		  /* 82177360h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82177360h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82177360h case    4:*/		return 0x82177364;
		  /* 82177364h */ case    5:  		/* bc 4, CR6_EQ, 1712 */
		/* 82177364h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82177A14;  }
		/* 82177364h case    5:*/		return 0x82177368;
		  /* 82177368h */ case    6:  		/* stw R11, <#[R1 + 164]> */
		/* 82177368h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000000A4) );
		/* 82177368h case    6:*/		return 0x8217736C;
	}
	return 0x8217736C;
} // Block from 82177350h-8217736Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217736Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217736C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217736C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217736C);
		  /* 8217736Ch */ case    0:  		/* addi R10, R1, 232 */
		/* 8217736Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xE8);
		/* 8217736Ch case    0:*/		return 0x82177370;
		  /* 82177370h */ case    1:  		/* stw R24, <#[R1 + 224]> */
		/* 82177370h case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x000000E0) );
		/* 82177370h case    1:*/		return 0x82177374;
		  /* 82177374h */ case    2:  		/* lwz R11, <#[R24 + 792]> */
		/* 82177374h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000318) );
		/* 82177374h case    2:*/		return 0x82177378;
		  /* 82177378h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82177378h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177378h case    3:*/		return 0x8217737C;
		  /* 8217737Ch */ case    4:  		/* std R22, <#[R10]> */
		/* 8217737Ch case    4:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000000) );
		/* 8217737Ch case    4:*/		return 0x82177380;
		  /* 82177380h */ case    5:  		/* std R22, <#[R10 + 8]> */
		/* 82177380h case    5:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000008) );
		/* 82177380h case    5:*/		return 0x82177384;
		  /* 82177384h */ case    6:  		/* std R22, <#[R10 + 16]> */
		/* 82177384h case    6:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000010) );
		/* 82177384h case    6:*/		return 0x82177388;
		  /* 82177388h */ case    7:  		/* std R22, <#[R10 + 24]> */
		/* 82177388h case    7:*/		cpu::mem::store64( regs, regs.R22, (uint32)(regs.R10 + 0x00000018) );
		/* 82177388h case    7:*/		return 0x8217738C;
		  /* 8217738Ch */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 8217738Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x82177394;  }
		/* 8217738Ch case    8:*/		return 0x82177390;
		  /* 82177390h */ case    9:  		/* li R11, 32 */
		/* 82177390h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82177390h case    9:*/		return 0x82177394;
	}
	return 0x82177394;
} // Block from 8217736Ch-82177394h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82177394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177394);
		  /* 82177394h */ case    0:  		/* cmplwi CR6, R11, 64 */
		/* 82177394h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000040);
		/* 82177394h case    0:*/		return 0x82177398;
		  /* 82177398h */ case    1:  		/* bc 4, CR6_LT, 20 */
		/* 82177398h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821773AC;  }
		/* 82177398h case    1:*/		return 0x8217739C;
		  /* 8217739Ch */ case    2:  		/* subfic R5, R11, 64 */
		/* 8217739Ch case    2:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x40);
		/* 8217739Ch case    2:*/		return 0x821773A0;
		  /* 821773A0h */ case    3:  		/* mr R4, R11 */
		/* 821773A0h case    3:*/		regs.R4 = regs.R11;
		/* 821773A0h case    3:*/		return 0x821773A4;
		  /* 821773A4h */ case    4:  		/* addi R3, R1, 224 */
		/* 821773A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 821773A4h case    4:*/		return 0x821773A8;
		  /* 821773A8h */ case    5:  		/* bl -32464 */
		/* 821773A8h case    5:*/		regs.LR = 0x821773AC; return 0x8216F4D8;
		/* 821773A8h case    5:*/		return 0x821773AC;
	}
	return 0x821773AC;
} // Block from 82177394h-821773ACh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821773ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821773AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821773AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821773AC);
		  /* 821773ACh */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 821773ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821773ACh case    0:*/		return 0x821773B0;
		  /* 821773B0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821773B0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821773B0h case    1:*/		return 0x821773B4;
		  /* 821773B4h */ case    2:  		/* bc 4, CR0_EQ, 1404 */
		/* 821773B4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82177930;  }
		/* 821773B4h case    2:*/		return 0x821773B8;
		  /* 821773B8h */ case    3:  		/* lwz R11, <#[R29]> */
		/* 821773B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821773B8h case    3:*/		return 0x821773BC;
		  /* 821773BCh */ case    4:  		/* b 1608 */
		/* 821773BCh case    4:*/		return 0x82177A04;
		/* 821773BCh case    4:*/		return 0x821773C0;
		  /* 821773C0h */ case    5:  		/* lwz R11, <#[R26 + 8]> */
		/* 821773C0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821773C0h case    5:*/		return 0x821773C4;
		  /* 821773C4h */ case    6:  		/* mr R25, R22 */
		/* 821773C4h case    6:*/		regs.R25 = regs.R22;
		/* 821773C4h case    6:*/		return 0x821773C8;
		  /* 821773C8h */ case    7:  		/* rlwinm. R10, R11, 27, 31, 31 */
		/* 821773C8h case    7:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R10,regs.R11);
		/* 821773C8h case    7:*/		return 0x821773CC;
		  /* 821773CCh */ case    8:  		/* bc 12, CR0_EQ, 64 */
		/* 821773CCh case    8:*/		if ( regs.CR[0].eq ) { return 0x8217740C;  }
		/* 821773CCh case    8:*/		return 0x821773D0;
		  /* 821773D0h */ case    9:  		/* lwz R10, <#[R26 + 4]> */
		/* 821773D0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 821773D0h case    9:*/		return 0x821773D4;
		  /* 821773D4h */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 821773D4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821773D4h case   10:*/		return 0x821773D8;
		  /* 821773D8h */ case   11:  		/* bc 12, CR6_EQ, 36 */
		/* 821773D8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821773FC;  }
		/* 821773D8h case   11:*/		return 0x821773DC;
		  /* 821773DCh */ case   12:  		/* lwz R9, <#[R10 + 16]> */
		/* 821773DCh case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 821773DCh case   12:*/		return 0x821773E0;
		  /* 821773E0h */ case   13:  		/* cmplwi CR6, R9, 0 */
		/* 821773E0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821773E0h case   13:*/		return 0x821773E4;
		  /* 821773E4h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 821773E4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821773F4;  }
		/* 821773E4h case   14:*/		return 0x821773E8;
		  /* 821773E8h */ case   15:  		/* lwz R9, <#[R10]> */
		/* 821773E8h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821773E8h case   15:*/		return 0x821773EC;
		  /* 821773ECh */ case   16:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821773ECh case   16:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821773ECh case   16:*/		return 0x821773F0;
		  /* 821773F0h */ case   17:  		/* bc 4, CR0_EQ, 12 */
		/* 821773F0h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821773FC;  }
		/* 821773F0h case   17:*/		return 0x821773F4;
	}
	return 0x821773F4;
} // Block from 821773ACh-821773F4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821773F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821773F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821773F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821773F4);
		  /* 821773F4h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821773F4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821773F4h case    0:*/		return 0x821773F8;
		  /* 821773F8h */ case    1:  		/* b -36 */
		/* 821773F8h case    1:*/		return 0x821773D4;
		/* 821773F8h case    1:*/		return 0x821773FC;
	}
	return 0x821773FC;
} // Block from 821773F4h-821773FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821773FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821773FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821773FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821773FC);
		  /* 821773FCh */ case    0:  		/* lwz R10, <#[R10]> */
		/* 821773FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821773FCh case    0:*/		return 0x82177400;
		  /* 82177400h */ case    1:  		/* rlwimi R11, R10, 20, 27, 30 */
		/* 82177400h case    1:*/		cpu::op::rlwimi<0,20,27,30>(regs,&regs.R11,regs.R10);
		/* 82177400h case    1:*/		return 0x82177404;
		  /* 82177404h */ case    2:  		/* stw R11, <#[R26 + 8]> */
		/* 82177404h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 82177404h case    2:*/		return 0x82177408;
		  /* 82177408h */ case    3:  		/* b 236 */
		/* 82177408h case    3:*/		return 0x821774F4;
		/* 82177408h case    3:*/		return 0x8217740C;
	}
	return 0x8217740C;
} // Block from 821773FCh-8217740Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217740Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217740C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217740C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217740C);
		  /* 8217740Ch */ case    0:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 8217740Ch case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 8217740Ch case    0:*/		return 0x82177410;
		  /* 82177410h */ case    1:  		/* cmplwi CR6, R10, 15360 */
		/* 82177410h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003C00);
		/* 82177410h case    1:*/		return 0x82177414;
		  /* 82177414h */ case    2:  		/* bc 12, CR6_EQ, 224 */
		/* 82177414h case    2:*/		if ( regs.CR[6].eq ) { return 0x821774F4;  }
		/* 82177414h case    2:*/		return 0x82177418;
		  /* 82177418h */ case    3:  		/* lwz R10, <#[R26 + 4]> */
		/* 82177418h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000004) );
		/* 82177418h case    3:*/		return 0x8217741C;
		  /* 8217741Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8217741Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217741Ch case    4:*/		return 0x82177420;
		  /* 82177420h */ case    5:  		/* bc 12, CR6_EQ, 212 */
		/* 82177420h case    5:*/		if ( regs.CR[6].eq ) { return 0x821774F4;  }
		/* 82177420h case    5:*/		return 0x82177424;
		  /* 82177424h */ case    6:  		/* lwz R9, <#[R10 + 16]> */
		/* 82177424h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000010) );
		/* 82177424h case    6:*/		return 0x82177428;
		  /* 82177428h */ case    7:  		/* cmplwi CR6, R9, 0 */
		/* 82177428h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82177428h case    7:*/		return 0x8217742C;
		  /* 8217742Ch */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 8217742Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8217743C;  }
		/* 8217742Ch case    8:*/		return 0x82177430;
		  /* 82177430h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 82177430h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82177430h case    9:*/		return 0x82177434;
		  /* 82177434h */ case   10:  		/* rlwinm. R8, R9, 0, 4, 6 */
		/* 82177434h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R8,regs.R9);
		/* 82177434h case   10:*/		return 0x82177438;
		  /* 82177438h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 82177438h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82177444;  }
		/* 82177438h case   11:*/		return 0x8217743C;
	}
	return 0x8217743C;
} // Block from 8217740Ch-8217743Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217743Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217743C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217743C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217743C);
		  /* 8217743Ch */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 8217743Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8217743Ch case    0:*/		return 0x82177440;
		  /* 82177440h */ case    1:  		/* b -36 */
		/* 82177440h case    1:*/		return 0x8217741C;
		/* 82177440h case    1:*/		return 0x82177444;
	}
	return 0x82177444;
} // Block from 8217743Ch-82177444h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177444);
		  /* 82177444h */ case    0:  		/* rlwimi R11, R9, 20, 19, 26 */
		/* 82177444h case    0:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R11,regs.R9);
		/* 82177444h case    0:*/		return 0x82177448;
		  /* 82177448h */ case    1:  		/* addi R3, R1, 96 */
		/* 82177448h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82177448h case    1:*/		return 0x8217744C;
		  /* 8217744Ch */ case    2:  		/* rlwinm R25, R11, 31, 20, 31 */
		/* 8217744Ch case    2:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R25,regs.R11);
		/* 8217744Ch case    2:*/		return 0x82177450;
		  /* 82177450h */ case    3:  		/* mr R4, R25 */
		/* 82177450h case    3:*/		regs.R4 = regs.R25;
		/* 82177450h case    3:*/		return 0x82177454;
		  /* 82177454h */ case    4:  		/* bl -32084 */
		/* 82177454h case    4:*/		regs.LR = 0x82177458; return 0x8216F700;
		/* 82177454h case    4:*/		return 0x82177458;
		  /* 82177458h */ case    5:  		/* lwz R11, <#[R26 + 20]> */
		/* 82177458h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 82177458h case    5:*/		return 0x8217745C;
		  /* 8217745Ch */ case    6:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 8217745Ch case    6:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 8217745Ch case    6:*/		return 0x82177460;
		  /* 82177460h */ case    7:  		/* bc 12, CR0_EQ, 148 */
		/* 82177460h case    7:*/		if ( regs.CR[0].eq ) { return 0x821774F4;  }
		/* 82177460h case    7:*/		return 0x82177464;
		  /* 82177464h */ case    8:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 82177464h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 82177464h case    8:*/		return 0x82177468;
		  /* 82177468h */ case    9:  		/* rlwinm R4, R25, 0, 28, 31 */
		/* 82177468h case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R4,regs.R25);
		/* 82177468h case    9:*/		return 0x8217746C;
		  /* 8217746Ch */ case   10:  		/* b 92 */
		/* 8217746Ch case   10:*/		return 0x821774C8;
		/* 8217746Ch case   10:*/		return 0x82177470;
		  /* 82177470h */ case   11:  		/* lwz R10, <#[R11 + 20]> */
		/* 82177470h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000014) );
		/* 82177470h case   11:*/		return 0x82177474;
		  /* 82177474h */ case   12:  		/* rlwinm. R10, R10, 0, 1, 1 */
		/* 82177474h case   12:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R10);
		/* 82177474h case   12:*/		return 0x82177478;
		  /* 82177478h */ case   13:  		/* bc 12, CR0_EQ, 76 */
		/* 82177478h case   13:*/		if ( regs.CR[0].eq ) { return 0x821774C4;  }
		/* 82177478h case   13:*/		return 0x8217747C;
		  /* 8217747Ch */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217747Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217747Ch case   14:*/		return 0x82177480;
		  /* 82177480h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 82177480h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82177480h case   15:*/		return 0x82177484;
		  /* 82177484h */ case   16:  		/* bc 12, CR6_EQ, 24 */
		/* 82177484h case   16:*/		if ( regs.CR[6].eq ) { return 0x8217749C;  }
		/* 82177484h case   16:*/		return 0x82177488;
		  /* 82177488h */ case   17:  		/* lwz R9, <#[R10]> */
		/* 82177488h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82177488h case   17:*/		return 0x8217748C;
		  /* 8217748Ch */ case   18:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 8217748Ch case   18:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 8217748Ch case   18:*/		return 0x82177490;
		  /* 82177490h */ case   19:  		/* bc 4, CR0_EQ, 12 */
		/* 82177490h case   19:*/		if ( !regs.CR[0].eq ) { return 0x8217749C;  }
		/* 82177490h case   19:*/		return 0x82177494;
		  /* 82177494h */ case   20:  		/* lwz R10, <#[R10 + 8]> */
		/* 82177494h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82177494h case   20:*/		return 0x82177498;
		  /* 82177498h */ case   21:  		/* b -24 */
		/* 82177498h case   21:*/		return 0x82177480;
		/* 82177498h case   21:*/		return 0x8217749C;
	}
	return 0x8217749C;
} // Block from 82177444h-8217749Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217749Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217749C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217749C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217749C);
		  /* 8217749Ch */ case    0:  		/* lwz R10, <#[R10]> */
		/* 8217749Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8217749Ch case    0:*/		return 0x821774A0;
		  /* 821774A0h */ case    1:  		/* rlwinm R9, R25, 28, 4, 31 */
		/* 821774A0h case    1:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R9,regs.R25);
		/* 821774A0h case    1:*/		return 0x821774A4;
		  /* 821774A4h */ case    2:  		/* lwz R8, <#[R11 + 8]> */
		/* 821774A4h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821774A4h case    2:*/		return 0x821774A8;
		  /* 821774A8h */ case    3:  		/* rlwimi R8, R10, 20, 19, 26 */
		/* 821774A8h case    3:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R8,regs.R10);
		/* 821774A8h case    3:*/		return 0x821774AC;
		  /* 821774ACh */ case    4:  		/* rlwinm R10, R8, 31, 20, 31 */
		/* 821774ACh case    4:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R10,regs.R8);
		/* 821774ACh case    4:*/		return 0x821774B0;
		  /* 821774B0h */ case    5:  		/* rlwinm R8, R10, 28, 4, 31 */
		/* 821774B0h case    5:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R8,regs.R10);
		/* 821774B0h case    5:*/		return 0x821774B4;
		  /* 821774B4h */ case    6:  		/* cmplw CR6, R8, R9 */
		/* 821774B4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821774B4h case    6:*/		return 0x821774B8;
		  /* 821774B8h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 821774B8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821774C4;  }
		/* 821774B8h case    7:*/		return 0x821774BC;
		  /* 821774BCh */ case    8:  		/* rlwinm R10, R10, 0, 28, 31 */
		/* 821774BCh case    8:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R10);
		/* 821774BCh case    8:*/		return 0x821774C0;
		  /* 821774C0h */ case    9:  		/* andc R4, R4, R10 */
		/* 821774C0h case    9:*/		cpu::op::andc<0>(regs,&regs.R4,regs.R4,regs.R10);
		/* 821774C0h case    9:*/		return 0x821774C4;
	}
	return 0x821774C4;
} // Block from 8217749Ch-821774C4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821774C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821774C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821774C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821774C4);
		  /* 821774C4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821774C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821774C4h case    0:*/		return 0x821774C8;
	}
	return 0x821774C8;
} // Block from 821774C4h-821774C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821774C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821774C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821774C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821774C8);
		  /* 821774C8h */ case    0:  		/* lwz R11, <#[R11 + 36]> */
		/* 821774C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821774C8h case    0:*/		return 0x821774CC;
		  /* 821774CCh */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821774CCh case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821774CCh case    1:*/		return 0x821774D0;
		  /* 821774D0h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821774D0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821774E0;  }
		/* 821774D0h case    2:*/		return 0x821774D4;
		  /* 821774D4h */ case    3:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821774D4h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821774D4h case    3:*/		return 0x821774D8;
		  /* 821774D8h */ case    4:  		/* addic. R11, R11, -40 */
		/* 821774D8h case    4:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 821774D8h case    4:*/		return 0x821774DC;
		  /* 821774DCh */ case    5:  		/* bc 4, CR0_EQ, -108 */
		/* 821774DCh case    5:*/		if ( !regs.CR[0].eq ) { return 0x82177470;  }
		/* 821774DCh case    5:*/		return 0x821774E0;
	}
	return 0x821774E0;
} // Block from 821774C8h-821774E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821774E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821774E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821774E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821774E0);
		  /* 821774E0h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821774E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821774E0h case    0:*/		return 0x821774E4;
		  /* 821774E4h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821774E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821774F4;  }
		/* 821774E4h case    1:*/		return 0x821774E8;
		  /* 821774E8h */ case    2:  		/* addi R3, R1, 224 */
		/* 821774E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 821774E8h case    2:*/		return 0x821774EC;
		  /* 821774ECh */ case    3:  		/* rlwimi R4, R25, 0, 0, 27 */
		/* 821774ECh case    3:*/		cpu::op::rlwimi<0,0,0,27>(regs,&regs.R4,regs.R25);
		/* 821774ECh case    3:*/		return 0x821774F0;
		  /* 821774F0h */ case    4:  		/* bl -32240 */
		/* 821774F0h case    4:*/		regs.LR = 0x821774F4; return 0x8216F700;
		/* 821774F0h case    4:*/		return 0x821774F4;
	}
	return 0x821774F4;
} // Block from 821774E0h-821774F4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821774F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821774F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821774F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821774F4);
		  /* 821774F4h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 821774F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821774F4h case    0:*/		return 0x821774F8;
		  /* 821774F8h */ case    1:  		/* rlwinm. R10, R11, 26, 31, 31 */
		/* 821774F8h case    1:*/		cpu::op::rlwinm<1,26,31,31>(regs,&regs.R10,regs.R11);
		/* 821774F8h case    1:*/		return 0x821774FC;
		  /* 821774FCh */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821774FCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82177524;  }
		/* 821774FCh case    2:*/		return 0x82177500;
		  /* 82177500h */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82177500h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82177500h case    3:*/		return 0x82177504;
		  /* 82177504h */ case    4:  		/* cmplwi CR6, R11, 32 */
		/* 82177504h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 82177504h case    4:*/		return 0x82177508;
		  /* 82177508h */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 82177508h case    5:*/		if ( regs.CR[6].lt ) { return 0x82177518;  }
		/* 82177508h case    5:*/		return 0x8217750C;
		  /* 8217750Ch */ case    6:  		/* cmplwi CR6, R11, 82 */
		/* 8217750Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 8217750Ch case    6:*/		return 0x82177510;
		  /* 82177510h */ case    7:  		/* li R11, 1 */
		/* 82177510h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82177510h case    7:*/		return 0x82177514;
		  /* 82177514h */ case    8:  		/* bc 4, CR6_GT, 8 */
		/* 82177514h case    8:*/		if ( !regs.CR[6].gt ) { return 0x8217751C;  }
		/* 82177514h case    8:*/		return 0x82177518;
	}
	return 0x82177518;
} // Block from 821774F4h-82177518h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82177518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177518);
		  /* 82177518h */ case    0:  		/* mr R11, R22 */
		/* 82177518h case    0:*/		regs.R11 = regs.R22;
		/* 82177518h case    0:*/		return 0x8217751C;
	}
	return 0x8217751C;
} // Block from 82177518h-8217751Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217751Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217751C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217751C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217751C);
		  /* 8217751Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217751Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217751Ch case    0:*/		return 0x82177520;
		  /* 82177520h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 82177520h case    1:*/		if ( regs.CR[0].eq ) { return 0x82177548;  }
		/* 82177520h case    1:*/		return 0x82177524;
	}
	return 0x82177524;
} // Block from 8217751Ch-82177524h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177524);
		  /* 82177524h */ case    0:  		/* li R10, 9 */
		/* 82177524h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x9);
		/* 82177524h case    0:*/		return 0x82177528;
		  /* 82177528h */ case    1:  		/* addi R11, R1, 136 */
		/* 82177528h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 82177528h case    1:*/		return 0x8217752C;
		  /* 8217752Ch */ case    2:  		/* mtspr CTR, R10 */
		/* 8217752Ch case    2:*/		regs.CTR = regs.R10;
		/* 8217752Ch case    2:*/		return 0x82177530;
		  /* 82177530h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 82177530h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82177530h case    3:*/		return 0x82177534;
		  /* 82177534h */ case    4:  		/* cmplw CR6, R26, R10 */
		/* 82177534h case    4:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 82177534h case    4:*/		return 0x82177538;
		  /* 82177538h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 82177538h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82177540;  }
		/* 82177538h case    5:*/		return 0x8217753C;
		  /* 8217753Ch */ case    6:  		/* stw R22, <#[R11]> */
		/* 8217753Ch case    6:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 8217753Ch case    6:*/		return 0x82177540;
	}
	return 0x82177540;
} // Block from 82177524h-82177540h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82177540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177540);
		  /* 82177540h */ case    0:  		/* addi R11, R11, 4 */
		/* 82177540h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82177540h case    0:*/		return 0x82177544;
		  /* 82177544h */ case    1:  		/* bc 16, CR0_LT, -20 */
		/* 82177544h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82177530;  }
		/* 82177544h case    1:*/		return 0x82177548;
	}
	return 0x82177548;
} // Block from 82177540h-82177548h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177548);
		  /* 82177548h */ case    0:  		/* lwz R31, <#[R26]> */
		/* 82177548h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 82177548h case    0:*/		return 0x8217754C;
		  /* 8217754Ch */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8217754Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217754Ch case    1:*/		return 0x82177550;
		  /* 82177550h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 82177550h case    2:*/		if ( regs.CR[6].eq ) { return 0x82177584;  }
		/* 82177550h case    2:*/		return 0x82177554;
		  /* 82177554h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 82177554h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82177554h case    3:*/		return 0x82177558;
		  /* 82177558h */ case    4:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 82177558h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 82177558h case    4:*/		return 0x8217755C;
		  /* 8217755Ch */ case    5:  		/* bc 12, CR0_EQ, 32 */
		/* 8217755Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8217757C;  }
		/* 8217755Ch case    5:*/		return 0x82177560;
		  /* 82177560h */ case    6:  		/* lwz R10, <#[R31 + 12]> */
		/* 82177560h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 82177560h case    6:*/		return 0x82177564;
		  /* 82177564h */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 82177564h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82177564h case    7:*/		return 0x82177568;
		  /* 82177568h */ case    8:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 82177568h case    8:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 82177568h case    8:*/		return 0x8217756C;
		  /* 8217756Ch */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 8217756Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8217757C;  }
		/* 8217756Ch case    9:*/		return 0x82177570;
		  /* 82177570h */ case   10:  		/* rlwinm R4, R11, 19, 20, 31 */
		/* 82177570h case   10:*/		cpu::op::rlwinm<0,19,20,31>(regs,&regs.R4,regs.R11);
		/* 82177570h case   10:*/		return 0x82177574;
		  /* 82177574h */ case   11:  		/* addi R3, R1, 96 */
		/* 82177574h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82177574h case   11:*/		return 0x82177578;
		  /* 82177578h */ case   12:  		/* bl -32472 */
		/* 82177578h case   12:*/		regs.LR = 0x8217757C; return 0x8216F6A0;
		/* 82177578h case   12:*/		return 0x8217757C;
	}
	return 0x8217757C;
} // Block from 82177548h-8217757Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217757Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217757C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217757C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217757C);
		  /* 8217757Ch */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 8217757Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 8217757Ch case    0:*/		return 0x82177580;
		  /* 82177580h */ case    1:  		/* b -52 */
		/* 82177580h case    1:*/		return 0x8217754C;
		/* 82177580h case    1:*/		return 0x82177584;
	}
	return 0x82177584;
} // Block from 8217757Ch-82177584h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177584);
		  /* 82177584h */ case    0:  		/* lwz R27, <#[R26]> */
		/* 82177584h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R26 + 0x00000000) );
		/* 82177584h case    0:*/		return 0x82177588;
		  /* 82177588h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 82177588h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82177588h case    1:*/		return 0x8217758C;
		  /* 8217758Ch */ case    2:  		/* bc 12, CR6_EQ, 1128 */
		/* 8217758Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821779F4;  }
		/* 8217758Ch case    2:*/		return 0x82177590;
		  /* 82177590h */ case    3:  		/* lwz R10, <#[R27]> */
		/* 82177590h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 82177590h case    3:*/		return 0x82177594;
		  /* 82177594h */ case    4:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 82177594h case    4:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 82177594h case    4:*/		return 0x82177598;
		  /* 82177598h */ case    5:  		/* rlwinm R8, R10, 2, 30, 31 */
		/* 82177598h case    5:*/		cpu::op::rlwinm<0,2,30,31>(regs,&regs.R8,regs.R10);
		/* 82177598h case    5:*/		return 0x8217759C;
		  /* 8217759Ch */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 8217759Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821775AC;  }
		/* 8217759Ch case    6:*/		return 0x821775A0;
		  /* 821775A0h */ case    7:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821775A0h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821775A0h case    7:*/		return 0x821775A4;
		  /* 821775A4h */ case    8:  		/* mr R11, R22 */
		/* 821775A4h case    8:*/		regs.R11 = regs.R22;
		/* 821775A4h case    8:*/		return 0x821775A8;
		  /* 821775A8h */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 821775A8h case    9:*/		if ( regs.CR[0].eq ) { return 0x821775B0;  }
		/* 821775A8h case    9:*/		return 0x821775AC;
	}
	return 0x821775AC;
} // Block from 82177584h-821775ACh (10 instructions)

//////////////////////////////////////////////////////
// Block at 821775ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821775AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821775AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821775AC);
		  /* 821775ACh */ case    0:  		/* li R11, 1 */
		/* 821775ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821775ACh case    0:*/		return 0x821775B0;
	}
	return 0x821775B0;
} // Block from 821775ACh-821775B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821775B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821775B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821775B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821775B0);
		  /* 821775B0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821775B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821775B0h case    0:*/		return 0x821775B4;
		  /* 821775B4h */ case    1:  		/* bc 12, CR0_EQ, 1080 */
		/* 821775B4h case    1:*/		if ( regs.CR[0].eq ) { return 0x821779EC;  }
		/* 821775B4h case    1:*/		return 0x821775B8;
		  /* 821775B8h */ case    2:  		/* lwz R28, <#[R27 + 12]> */
		/* 821775B8h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x0000000C) );
		/* 821775B8h case    2:*/		return 0x821775BC;
		  /* 821775BCh */ case    3:  		/* cmplwi CR6, R9, 0 */
		/* 821775BCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821775BCh case    3:*/		return 0x821775C0;
		  /* 821775C0h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821775C0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821775D0;  }
		/* 821775C0h case    4:*/		return 0x821775C4;
		  /* 821775C4h */ case    5:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821775C4h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821775C4h case    5:*/		return 0x821775C8;
		  /* 821775C8h */ case    6:  		/* li R11, 1 */
		/* 821775C8h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821775C8h case    6:*/		return 0x821775CC;
		  /* 821775CCh */ case    7:  		/* bc 12, CR0_EQ, 8 */
		/* 821775CCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821775D4;  }
		/* 821775CCh case    7:*/		return 0x821775D0;
	}
	return 0x821775D0;
} // Block from 821775B0h-821775D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821775D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821775D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821775D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821775D0);
		  /* 821775D0h */ case    0:  		/* mr R11, R22 */
		/* 821775D0h case    0:*/		regs.R11 = regs.R22;
		/* 821775D0h case    0:*/		return 0x821775D4;
	}
	return 0x821775D4;
} // Block from 821775D0h-821775D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821775D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821775D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821775D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821775D4);
		  /* 821775D4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821775D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821775D4h case    0:*/		return 0x821775D8;
		  /* 821775D8h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821775D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217760C;  }
		/* 821775D8h case    1:*/		return 0x821775DC;
		  /* 821775DCh */ case    2:  		/* rlwinm R10, R10, 21, 18, 29 */
		/* 821775DCh case    2:*/		cpu::op::rlwinm<0,21,18,29>(regs,&regs.R10,regs.R10);
		/* 821775DCh case    2:*/		return 0x821775E0;
		  /* 821775E0h */ case    3:  		/* addi R11, R1, 136 */
		/* 821775E0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x88);
		/* 821775E0h case    3:*/		return 0x821775E4;
		  /* 821775E4h */ case    4:  		/* lwzx R9, <#[R10 + R11]> */
		/* 821775E4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821775E4h case    4:*/		return 0x821775E8;
		  /* 821775E8h */ case    5:  		/* cmplwi CR6, R9, 0 */
		/* 821775E8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821775E8h case    5:*/		return 0x821775EC;
		  /* 821775ECh */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 821775ECh case    6:*/		if ( regs.CR[6].eq ) { return 0x82177604;  }
		/* 821775ECh case    6:*/		return 0x821775F0;
		  /* 821775F0h */ case    7:  		/* cmplw CR6, R9, R28 */
		/* 821775F0h case    7:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R28);
		/* 821775F0h case    7:*/		return 0x821775F4;
		  /* 821775F4h */ case    8:  		/* bc 12, CR6_EQ, 1016 */
		/* 821775F4h case    8:*/		if ( regs.CR[6].eq ) { return 0x821779EC;  }
		/* 821775F4h case    8:*/		return 0x821775F8;
		  /* 821775F8h */ case    9:  		/* li R4, 4800 */
		/* 821775F8h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821775F8h case    9:*/		return 0x821775FC;
		  /* 821775FCh */ case   10:  		/* lwz R3, <#[R1 + 96]> */
		/* 821775FCh case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 821775FCh case   10:*/		return 0x82177600;
		  /* 82177600h */ case   11:  		/* bl -153496 */
		/* 82177600h case   11:*/		regs.LR = 0x82177604; return 0x82151E68;
		/* 82177600h case   11:*/		return 0x82177604;
	}
	return 0x82177604;
} // Block from 821775D4h-82177604h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82177604h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177604( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177604) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177604);
		  /* 82177604h */ case    0:  		/* stwx R28, <#[R10 + R11]> */
		/* 82177604h case    0:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82177604h case    0:*/		return 0x82177608;
		  /* 82177608h */ case    1:  		/* b 996 */
		/* 82177608h case    1:*/		return 0x821779EC;
		/* 82177608h case    1:*/		return 0x8217760C;
	}
	return 0x8217760C;
} // Block from 82177604h-8217760Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217760Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217760C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217760C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217760C);
		  /* 8217760Ch */ case    0:  		/* nor R11, R8, R8 */
		/* 8217760Ch case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R8,regs.R8);
		/* 8217760Ch case    0:*/		return 0x82177610;
		  /* 82177610h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82177610h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82177610h case    1:*/		return 0x82177614;
		  /* 82177614h */ case    2:  		/* bc 4, CR0_EQ, 60 */
		/* 82177614h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82177650;  }
		/* 82177614h case    2:*/		return 0x82177618;
		  /* 82177618h */ case    3:  		/* lwz R11, <#[R28 + 8]> */
		/* 82177618h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82177618h case    3:*/		return 0x8217761C;
		  /* 8217761Ch */ case    4:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217761Ch case    4:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217761Ch case    4:*/		return 0x82177620;
		  /* 82177620h */ case    5:  		/* cmplwi CR6, R11, 15360 */
		/* 82177620h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003C00);
		/* 82177620h case    5:*/		return 0x82177624;
		  /* 82177624h */ case    6:  		/* bc 12, CR6_EQ, 968 */
		/* 82177624h case    6:*/		if ( regs.CR[6].eq ) { return 0x821779EC;  }
		/* 82177624h case    6:*/		return 0x82177628;
		  /* 82177628h */ case    7:  		/* mr R3, R27 */
		/* 82177628h case    7:*/		regs.R3 = regs.R27;
		/* 82177628h case    7:*/		return 0x8217762C;
		  /* 8217762Ch */ case    8:  		/* bl -77308 */
		/* 8217762Ch case    8:*/		regs.LR = 0x82177630; return 0x82164830;
		/* 8217762Ch case    8:*/		return 0x82177630;
		  /* 82177630h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82177630h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82177630h case    9:*/		return 0x82177634;
		  /* 82177634h */ case   10:  		/* bc 12, CR0_EQ, 952 */
		/* 82177634h case   10:*/		if ( regs.CR[0].eq ) { return 0x821779EC;  }
		/* 82177634h case   10:*/		return 0x82177638;
		  /* 82177638h */ case   11:  		/* mr R3, R27 */
		/* 82177638h case   11:*/		regs.R3 = regs.R27;
		/* 82177638h case   11:*/		return 0x8217763C;
		  /* 8217763Ch */ case   12:  		/* bl -34980 */
		/* 8217763Ch case   12:*/		regs.LR = 0x82177640; return 0x8216ED98;
		/* 8217763Ch case   12:*/		return 0x82177640;
		  /* 82177640h */ case   13:  		/* mr R4, R3 */
		/* 82177640h case   13:*/		regs.R4 = regs.R3;
		/* 82177640h case   13:*/		return 0x82177644;
		  /* 82177644h */ case   14:  		/* addi R3, R1, 96 */
		/* 82177644h case   14:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82177644h case   14:*/		return 0x82177648;
		  /* 82177648h */ case   15:  		/* bl -32680 */
		/* 82177648h case   15:*/		regs.LR = 0x8217764C; return 0x8216F6A0;
		/* 82177648h case   15:*/		return 0x8217764C;
		  /* 8217764Ch */ case   16:  		/* b 928 */
		/* 8217764Ch case   16:*/		return 0x821779EC;
		/* 8217764Ch case   16:*/		return 0x82177650;
	}
	return 0x82177650;
} // Block from 8217760Ch-82177650h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82177650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177650);
		  /* 82177650h */ case    0:  		/* li R11, 5 */
		/* 82177650h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x5);
		/* 82177650h case    0:*/		return 0x82177654;
		  /* 82177654h */ case    1:  		/* addi R10, R1, 176 */
		/* 82177654h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB0);
		/* 82177654h case    1:*/		return 0x82177658;
		  /* 82177658h */ case    2:  		/* addi R9, R1, 96 */
		/* 82177658h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 82177658h case    2:*/		return 0x8217765C;
		  /* 8217765Ch */ case    3:  		/* addi R8, R10, -8 */
		/* 8217765Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFF8);
		/* 8217765Ch case    3:*/		return 0x82177660;
		  /* 82177660h */ case    4:  		/* addi R10, R9, -8 */
		/* 82177660h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0xFFFFFFF8);
		/* 82177660h case    4:*/		return 0x82177664;
		  /* 82177664h */ case    5:  		/* mtspr CTR, R11 */
		/* 82177664h case    5:*/		regs.CTR = regs.R11;
		/* 82177664h case    5:*/		return 0x82177668;
		  /* 82177668h */ case    6:  		/* ldu R11, <#[R10 + 8]> */
		/* 82177668h case    6:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		regs.R10 = (uint32)(regs.R10 + 0x00000008);
		/* 82177668h case    6:*/		return 0x8217766C;
		  /* 8217766Ch */ case    7:  		/* stdu R11, <#[R8 + 8]> */
		/* 8217766Ch case    7:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R8 + 0x00000008) );
		regs.R8 = (uint32)(regs.R8 + 0x00000008);
		/* 8217766Ch case    7:*/		return 0x82177670;
		  /* 82177670h */ case    8:  		/* bc 16, CR0_LT, -8 */
		/* 82177670h case    8:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x82177668;  }
		/* 82177670h case    8:*/		return 0x82177674;
		  /* 82177674h */ case    9:  		/* lwz R11, <#[R28 + 8]> */
		/* 82177674h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82177674h case    9:*/		return 0x82177678;
		  /* 82177678h */ case   10:  		/* mr R29, R28 */
		/* 82177678h case   10:*/		regs.R29 = regs.R28;
		/* 82177678h case   10:*/		return 0x8217767C;
		  /* 8217767Ch */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217767Ch case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217767Ch case   11:*/		return 0x82177680;
		  /* 82177680h */ case   12:  		/* cmplwi CR6, R11, 14080 */
		/* 82177680h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 82177680h case   12:*/		return 0x82177684;
		  /* 82177684h */ case   13:  		/* bc 4, CR6_EQ, 108 */
		/* 82177684h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821776F0;  }
		/* 82177684h case   13:*/		return 0x82177688;
		  /* 82177688h */ case   14:  		/* lwz R30, <#[R28]> */
		/* 82177688h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 82177688h case   14:*/		return 0x8217768C;
		  /* 8217768Ch */ case   15:  		/* cmplwi CR6, R30, 0 */
		/* 8217768Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217768Ch case   15:*/		return 0x82177690;
		  /* 82177690h */ case   16:  		/* bc 12, CR6_EQ, 96 */
		/* 82177690h case   16:*/		if ( regs.CR[6].eq ) { return 0x821776F0;  }
		/* 82177690h case   16:*/		return 0x82177694;
		  /* 82177694h */ case   17:  		/* lwz R11, <#[R30]> */
		/* 82177694h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82177694h case   17:*/		return 0x82177698;
		  /* 82177698h */ case   18:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 82177698h case   18:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 82177698h case   18:*/		return 0x8217769C;
		  /* 8217769Ch */ case   19:  		/* bc 12, CR0_EQ, 56 */
		/* 8217769Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x821776D4;  }
		/* 8217769Ch case   19:*/		return 0x821776A0;
		  /* 821776A0h */ case   20:  		/* lwz R31, <#[R30 + 12]> */
		/* 821776A0h case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000000C) );
		/* 821776A0h case   20:*/		return 0x821776A4;
		  /* 821776A4h */ case   21:  		/* lwz R11, <#[R31 + 8]> */
		/* 821776A4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821776A4h case   21:*/		return 0x821776A8;
		  /* 821776A8h */ case   22:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821776A8h case   22:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821776A8h case   22:*/		return 0x821776AC;
		  /* 821776ACh */ case   23:  		/* cmplwi CR6, R11, 14336 */
		/* 821776ACh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821776ACh case   23:*/		return 0x821776B0;
		  /* 821776B0h */ case   24:  		/* bc 12, CR6_EQ, 44 */
		/* 821776B0h case   24:*/		if ( regs.CR[6].eq ) { return 0x821776DC;  }
		/* 821776B0h case   24:*/		return 0x821776B4;
		  /* 821776B4h */ case   25:  		/* cmplw CR6, R31, R29 */
		/* 821776B4h case   25:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 821776B4h case   25:*/		return 0x821776B8;
		  /* 821776B8h */ case   26:  		/* bc 12, CR6_EQ, 28 */
		/* 821776B8h case   26:*/		if ( regs.CR[6].eq ) { return 0x821776D4;  }
		/* 821776B8h case   26:*/		return 0x821776BC;
		  /* 821776BCh */ case   27:  		/* mr R4, R29 */
		/* 821776BCh case   27:*/		regs.R4 = regs.R29;
		/* 821776BCh case   27:*/		return 0x821776C0;
		  /* 821776C0h */ case   28:  		/* mr R3, R31 */
		/* 821776C0h case   28:*/		regs.R3 = regs.R31;
		/* 821776C0h case   28:*/		return 0x821776C4;
		  /* 821776C4h */ case   29:  		/* bl -24060 */
		/* 821776C4h case   29:*/		regs.LR = 0x821776C8; return 0x821718C8;
		/* 821776C4h case   29:*/		return 0x821776C8;
		  /* 821776C8h */ case   30:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821776C8h case   30:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821776C8h case   30:*/		return 0x821776CC;
		  /* 821776CCh */ case   31:  		/* bc 12, CR0_EQ, 8 */
		/* 821776CCh case   31:*/		if ( regs.CR[0].eq ) { return 0x821776D4;  }
		/* 821776CCh case   31:*/		return 0x821776D0;
		  /* 821776D0h */ case   32:  		/* mr R29, R31 */
		/* 821776D0h case   32:*/		regs.R29 = regs.R31;
		/* 821776D0h case   32:*/		return 0x821776D4;
	}
	return 0x821776D4;
} // Block from 82177650h-821776D4h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821776D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821776D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821776D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821776D4);
		  /* 821776D4h */ case    0:  		/* lwz R30, <#[R30 + 4]> */
		/* 821776D4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821776D4h case    0:*/		return 0x821776D8;
		  /* 821776D8h */ case    1:  		/* b -76 */
		/* 821776D8h case    1:*/		return 0x8217768C;
		/* 821776D8h case    1:*/		return 0x821776DC;
	}
	return 0x821776DC;
} // Block from 821776D4h-821776DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821776DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821776DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821776DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821776DC);
		  /* 821776DCh */ case    0:  		/* lwz R11, <#[R23 + 20]> */
		/* 821776DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 821776DCh case    0:*/		return 0x821776E0;
		  /* 821776E0h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821776E0h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821776E0h case    1:*/		return 0x821776E4;
		  /* 821776E4h */ case    2:  		/* addic R10, R10, -1 */
		/* 821776E4h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821776E4h case    2:*/		return 0x821776E8;
		  /* 821776E8h */ case    3:  		/* subfe R10, R10, R10 */
		/* 821776E8h case    3:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821776E8h case    3:*/		return 0x821776EC;
		  /* 821776ECh */ case    4:  		/* and R29, R10, R11 */
		/* 821776ECh case    4:*/		cpu::op::and<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 821776ECh case    4:*/		return 0x821776F0;
	}
	return 0x821776F0;
} // Block from 821776DCh-821776F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821776F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821776F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821776F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821776F0);
		  /* 821776F0h */ case    0:  		/* mr R30, R26 */
		/* 821776F0h case    0:*/		regs.R30 = regs.R26;
		/* 821776F0h case    0:*/		return 0x821776F4;
		  /* 821776F4h */ case    1:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821776F4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821776F4h case    1:*/		return 0x821776F8;
		  /* 821776F8h */ case    2:  		/* lwz R11, <#[R11 + 36]> */
		/* 821776F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821776F8h case    2:*/		return 0x821776FC;
		  /* 821776FCh */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821776FCh case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821776FCh case    3:*/		return 0x82177700;
		  /* 82177700h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 82177700h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82177710;  }
		/* 82177700h case    4:*/		return 0x82177704;
		  /* 82177704h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82177704h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82177704h case    5:*/		return 0x82177708;
		  /* 82177708h */ case    6:  		/* addic. R30, R11, -40 */
		/* 82177708h case    6:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 82177708h case    6:*/		return 0x8217770C;
		  /* 8217770Ch */ case    7:  		/* bc 4, CR0_EQ, 36 */
		/* 8217770Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x82177730;  }
		/* 8217770Ch case    7:*/		return 0x82177710;
	}
	return 0x82177710;
} // Block from 821776F0h-82177710h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82177710h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177710( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177710) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177710);
		  /* 82177710h */ case    0:  		/* lwz R11, <#[R23 + 20]> */
		/* 82177710h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 82177710h case    0:*/		return 0x82177714;
		  /* 82177714h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82177714h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82177714h case    1:*/		return 0x82177718;
		  /* 82177718h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82177718h case    2:*/		if ( regs.CR[0].eq ) { return 0x82177724;  }
		/* 82177718h case    2:*/		return 0x8217771C;
		  /* 8217771Ch */ case    3:  		/* mr R30, R22 */
		/* 8217771Ch case    3:*/		regs.R30 = regs.R22;
		/* 8217771Ch case    3:*/		return 0x82177720;
		  /* 82177720h */ case    4:  		/* b 16 */
		/* 82177720h case    4:*/		return 0x82177730;
		/* 82177720h case    4:*/		return 0x82177724;
	}
	return 0x82177724;
} // Block from 82177710h-82177724h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177724);
		  /* 82177724h */ case    0:  		/* lwz R11, <#[R23 + 16]> */
		/* 82177724h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000010) );
		/* 82177724h case    0:*/		return 0x82177728;
		  /* 82177728h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82177728h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82177728h case    1:*/		return 0x8217772C;
		  /* 8217772Ch */ case    2:  		/* addi R30, R11, -40 */
		/* 8217772Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 8217772Ch case    2:*/		return 0x82177730;
	}
	return 0x82177730;
} // Block from 82177724h-82177730h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82177730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177730);
		  /* 82177730h */ case    0:  		/* cmplw CR6, R30, R29 */
		/* 82177730h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R29);
		/* 82177730h case    0:*/		return 0x82177734;
		  /* 82177734h */ case    1:  		/* bc 12, CR6_EQ, 184 */
		/* 82177734h case    1:*/		if ( regs.CR[6].eq ) { return 0x821777EC;  }
		/* 82177734h case    1:*/		return 0x82177738;
		  /* 82177738h */ case    2:  		/* lwz R8, <#[R30 + 8]> */
		/* 82177738h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000008) );
		/* 82177738h case    2:*/		return 0x8217773C;
		  /* 8217773Ch */ case    3:  		/* rlwinm. R11, R8, 9, 31, 31 */
		/* 8217773Ch case    3:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R8);
		/* 8217773Ch case    3:*/		return 0x82177740;
		  /* 82177740h */ case    4:  		/* bc 12, CR0_EQ, 112 */
		/* 82177740h case    4:*/		if ( regs.CR[0].eq ) { return 0x821777B0;  }
		/* 82177740h case    4:*/		return 0x82177744;
		  /* 82177744h */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 82177744h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82177744h case    5:*/		return 0x82177748;
		  /* 82177748h */ case    6:  		/* mr R10, R11 */
		/* 82177748h case    6:*/		regs.R10 = regs.R11;
		/* 82177748h case    6:*/		return 0x8217774C;
		  /* 8217774Ch */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 8217774Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217774Ch case    7:*/		return 0x82177750;
		  /* 82177750h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 82177750h case    8:*/		if ( regs.CR[6].eq ) { return 0x82177774;  }
		/* 82177750h case    8:*/		return 0x82177754;
		  /* 82177754h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 82177754h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82177754h case    9:*/		return 0x82177758;
		  /* 82177758h */ case   10:  		/* rlwinm. R7, R9, 0, 4, 6 */
		/* 82177758h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R7,regs.R9);
		/* 82177758h case   10:*/		return 0x8217775C;
		  /* 8217775Ch */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 8217775Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x82177768;  }
		/* 8217775Ch case   11:*/		return 0x82177760;
		  /* 82177760h */ case   12:  		/* lwz R10, <#[R10 + 8]> */
		/* 82177760h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82177760h case   12:*/		return 0x82177764;
		  /* 82177764h */ case   13:  		/* b -24 */
		/* 82177764h case   13:*/		return 0x8217774C;
		/* 82177764h case   13:*/		return 0x82177768;
	}
	return 0x82177768;
} // Block from 82177730h-82177768h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82177768h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177768);
		  /* 82177768h */ case    0:  		/* rlwinm. R10, R9, 2, 31, 31 */
		/* 82177768h case    0:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R9);
		/* 82177768h case    0:*/		return 0x8217776C;
		  /* 8217776Ch */ case    1:  		/* li R10, 1 */
		/* 8217776Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8217776Ch case    1:*/		return 0x82177770;
		  /* 82177770h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 82177770h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82177778;  }
		/* 82177770h case    2:*/		return 0x82177774;
	}
	return 0x82177774;
} // Block from 82177768h-82177774h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82177774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177774);
		  /* 82177774h */ case    0:  		/* mr R10, R22 */
		/* 82177774h case    0:*/		regs.R10 = regs.R22;
		/* 82177774h case    0:*/		return 0x82177778;
	}
	return 0x82177778;
} // Block from 82177774h-82177778h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177778);
		  /* 82177778h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 82177778h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82177778h case    0:*/		return 0x8217777C;
		  /* 8217777Ch */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 8217777Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821777B0;  }
		/* 8217777Ch case    1:*/		return 0x82177780;
		  /* 82177780h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82177780h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177780h case    2:*/		return 0x82177784;
		  /* 82177784h */ case    3:  		/* bc 12, CR6_EQ, 24 */
		/* 82177784h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217779C;  }
		/* 82177784h case    3:*/		return 0x82177788;
		  /* 82177788h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 82177788h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82177788h case    4:*/		return 0x8217778C;
		  /* 8217778Ch */ case    5:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 8217778Ch case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 8217778Ch case    5:*/		return 0x82177790;
		  /* 82177790h */ case    6:  		/* bc 4, CR0_EQ, 12 */
		/* 82177790h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217779C;  }
		/* 82177790h case    6:*/		return 0x82177794;
		  /* 82177794h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 82177794h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82177794h case    7:*/		return 0x82177798;
		  /* 82177798h */ case    8:  		/* b -24 */
		/* 82177798h case    8:*/		return 0x82177780;
		/* 82177798h case    8:*/		return 0x8217779C;
	}
	return 0x8217779C;
} // Block from 82177778h-8217779Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217779Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217779C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217779C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217779C);
		  /* 8217779Ch */ case    0:  		/* lwz R11, <#[R11]> */
		/* 8217779Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217779Ch case    0:*/		return 0x821777A0;
		  /* 821777A0h */ case    1:  		/* addi R3, R1, 176 */
		/* 821777A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 821777A0h case    1:*/		return 0x821777A4;
		  /* 821777A4h */ case    2:  		/* rlwimi R8, R11, 20, 19, 26 */
		/* 821777A4h case    2:*/		cpu::op::rlwimi<0,20,19,26>(regs,&regs.R8,regs.R11);
		/* 821777A4h case    2:*/		return 0x821777A8;
		  /* 821777A8h */ case    3:  		/* rlwinm R4, R8, 31, 20, 31 */
		/* 821777A8h case    3:*/		cpu::op::rlwinm<0,31,20,31>(regs,&regs.R4,regs.R8);
		/* 821777A8h case    3:*/		return 0x821777AC;
		  /* 821777ACh */ case    4:  		/* bl -33036 */
		/* 821777ACh case    4:*/		regs.LR = 0x821777B0; return 0x8216F6A0;
		/* 821777ACh case    4:*/		return 0x821777B0;
	}
	return 0x821777B0;
} // Block from 8217779Ch-821777B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821777B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821777B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821777B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821777B0);
		  /* 821777B0h */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821777B0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821777B0h case    0:*/		return 0x821777B4;
		  /* 821777B4h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821777B4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821777B4h case    1:*/		return 0x821777B8;
		  /* 821777B8h */ case    2:  		/* bc 12, CR6_EQ, -196 */
		/* 821777B8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821776F4;  }
		/* 821777B8h case    2:*/		return 0x821777BC;
		  /* 821777BCh */ case    3:  		/* lwz R11, <#[R31]> */
		/* 821777BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821777BCh case    3:*/		return 0x821777C0;
		  /* 821777C0h */ case    4:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821777C0h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821777C0h case    4:*/		return 0x821777C4;
		  /* 821777C4h */ case    5:  		/* bc 12, CR0_EQ, 32 */
		/* 821777C4h case    5:*/		if ( regs.CR[0].eq ) { return 0x821777E4;  }
		/* 821777C4h case    5:*/		return 0x821777C8;
		  /* 821777C8h */ case    6:  		/* lwz R10, <#[R31 + 12]> */
		/* 821777C8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821777C8h case    6:*/		return 0x821777CC;
		  /* 821777CCh */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 821777CCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821777CCh case    7:*/		return 0x821777D0;
		  /* 821777D0h */ case    8:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821777D0h case    8:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821777D0h case    8:*/		return 0x821777D4;
		  /* 821777D4h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821777D4h case    9:*/		if ( regs.CR[0].eq ) { return 0x821777E4;  }
		/* 821777D4h case    9:*/		return 0x821777D8;
		  /* 821777D8h */ case   10:  		/* rlwinm R4, R11, 19, 20, 31 */
		/* 821777D8h case   10:*/		cpu::op::rlwinm<0,19,20,31>(regs,&regs.R4,regs.R11);
		/* 821777D8h case   10:*/		return 0x821777DC;
		  /* 821777DCh */ case   11:  		/* addi R3, R1, 176 */
		/* 821777DCh case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 821777DCh case   11:*/		return 0x821777E0;
		  /* 821777E0h */ case   12:  		/* bl -33088 */
		/* 821777E0h case   12:*/		regs.LR = 0x821777E4; return 0x8216F6A0;
		/* 821777E0h case   12:*/		return 0x821777E4;
	}
	return 0x821777E4;
} // Block from 821777B0h-821777E4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821777E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821777E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821777E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821777E4);
		  /* 821777E4h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821777E4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821777E4h case    0:*/		return 0x821777E8;
		  /* 821777E8h */ case    1:  		/* b -52 */
		/* 821777E8h case    1:*/		return 0x821777B4;
		/* 821777E8h case    1:*/		return 0x821777EC;
	}
	return 0x821777EC;
} // Block from 821777E4h-821777ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821777ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821777EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821777EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821777EC);
		  /* 821777ECh */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 821777ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821777ECh case    0:*/		return 0x821777F0;
		  /* 821777F0h */ case    1:  		/* mr R30, R22 */
		/* 821777F0h case    1:*/		regs.R30 = regs.R22;
		/* 821777F0h case    1:*/		return 0x821777F4;
		  /* 821777F4h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821777F4h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821777F4h case    2:*/		return 0x821777F8;
		  /* 821777F8h */ case    3:  		/* cmplwi CR6, R11, 14080 */
		/* 821777F8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821777F8h case    3:*/		return 0x821777FC;
		  /* 821777FCh */ case    4:  		/* bc 12, CR6_EQ, 348 */
		/* 821777FCh case    4:*/		if ( regs.CR[6].eq ) { return 0x82177958;  }
		/* 821777FCh case    4:*/		return 0x82177800;
		  /* 82177800h */ case    5:  		/* lwz R6, <#[R28 + 8]> */
		/* 82177800h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000008) );
		/* 82177800h case    5:*/		return 0x82177804;
		  /* 82177804h */ case    6:  		/* rlwinm R11, R6, 0, 18, 24 */
		/* 82177804h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R6);
		/* 82177804h case    6:*/		return 0x82177808;
		  /* 82177808h */ case    7:  		/* rlwinm R4, R6, 18, 29, 31 */
		/* 82177808h case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R4,regs.R6);
		/* 82177808h case    7:*/		return 0x8217780C;
		  /* 8217780Ch */ case    8:  		/* cmplwi CR6, R11, 14080 */
		/* 8217780Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 8217780Ch case    8:*/		return 0x82177810;
		  /* 82177810h */ case    9:  		/* bc 12, CR6_EQ, 84 */
		/* 82177810h case    9:*/		if ( regs.CR[6].eq ) { return 0x82177864;  }
		/* 82177810h case    9:*/		return 0x82177814;
		  /* 82177814h */ case   10:  		/* lwz R8, <#[R27]> */
		/* 82177814h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000000) );
		/* 82177814h case   10:*/		return 0x82177818;
		  /* 82177818h */ case   11:  		/* mr R9, R22 */
		/* 82177818h case   11:*/		regs.R9 = regs.R22;
		/* 82177818h case   11:*/		return 0x8217781C;
		  /* 8217781Ch */ case   12:  		/* mr R11, R22 */
		/* 8217781Ch case   12:*/		regs.R11 = regs.R22;
		/* 8217781Ch case   12:*/		return 0x82177820;
		  /* 82177820h */ case   13:  		/* rlwinm. R7, R8, 7, 29, 31 */
		/* 82177820h case   13:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R7,regs.R8);
		/* 82177820h case   13:*/		return 0x82177824;
		  /* 82177824h */ case   14:  		/* bc 12, CR0_EQ, 48 */
		/* 82177824h case   14:*/		if ( regs.CR[0].eq ) { return 0x82177854;  }
		/* 82177824h case   14:*/		return 0x82177828;
		  /* 82177828h */ case   15:  		/* mr R10, R22 */
		/* 82177828h case   15:*/		regs.R10 = regs.R22;
		/* 82177828h case   15:*/		return 0x8217782C;
		  /* 8217782Ch */ case   16:  		/* rlwinm R5, R8, 27, 24, 31 */
		/* 8217782Ch case   16:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R5,regs.R8);
		/* 8217782Ch case   16:*/		return 0x82177830;
		  /* 82177830h */ case   17:  		/* li R3, 1 */
		/* 82177830h case   17:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82177830h case   17:*/		return 0x82177834;
		  /* 82177834h */ case   18:  		/* srw R5, R5, R10 */
		/* 82177834h case   18:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R5,regs.R10);
		/* 82177834h case   18:*/		return 0x82177838;
		  /* 82177838h */ case   19:  		/* rlwinm R5, R5, 0, 30, 31 */
		/* 82177838h case   19:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R5);
		/* 82177838h case   19:*/		return 0x8217783C;
		  /* 8217783Ch */ case   20:  		/* addi R11, R11, 1 */
		/* 8217783Ch case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217783Ch case   20:*/		return 0x82177840;
		  /* 82177840h */ case   21:  		/* slw R5, R3, R5 */
		/* 82177840h case   21:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R3,regs.R5);
		/* 82177840h case   21:*/		return 0x82177844;
		  /* 82177844h */ case   22:  		/* or R9, R5, R9 */
		/* 82177844h case   22:*/		cpu::op::or<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 82177844h case   22:*/		return 0x82177848;
		  /* 82177848h */ case   23:  		/* addi R10, R10, 2 */
		/* 82177848h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 82177848h case   23:*/		return 0x8217784C;
		  /* 8217784Ch */ case   24:  		/* cmplw CR6, R11, R7 */
		/* 8217784Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 8217784Ch case   24:*/		return 0x82177850;
		  /* 82177850h */ case   25:  		/* bc 12, CR6_LT, -36 */
		/* 82177850h case   25:*/		if ( regs.CR[6].lt ) { return 0x8217782C;  }
		/* 82177850h case   25:*/		return 0x82177854;
	}
	return 0x82177854;
} // Block from 821777ECh-82177854h (26 instructions)

//////////////////////////////////////////////////////
// Block at 82177854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177854);
		  /* 82177854h */ case    0:  		/* rlwinm R11, R6, 31, 28, 31 */
		/* 82177854h case    0:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R6);
		/* 82177854h case    0:*/		return 0x82177858;
		  /* 82177858h */ case    1:  		/* cmplw CR6, R9, R11 */
		/* 82177858h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82177858h case    1:*/		return 0x8217785C;
		  /* 8217785Ch */ case    2:  		/* li R11, 1 */
		/* 8217785Ch case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217785Ch case    2:*/		return 0x82177860;
		  /* 82177860h */ case    3:  		/* bc 4, CR6_EQ, 8 */
		/* 82177860h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82177868;  }
		/* 82177860h case    3:*/		return 0x82177864;
	}
	return 0x82177864;
} // Block from 82177854h-82177864h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177864);
		  /* 82177864h */ case    0:  		/* mr R11, R22 */
		/* 82177864h case    0:*/		regs.R11 = regs.R22;
		/* 82177864h case    0:*/		return 0x82177868;
	}
	return 0x82177868;
} // Block from 82177864h-82177868h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177868);
		  /* 82177868h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82177868h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82177868h case    0:*/		return 0x8217786C;
		  /* 8217786Ch */ case    1:  		/* bc 4, CR0_EQ, 88 */
		/* 8217786Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821778C4;  }
		/* 8217786Ch case    1:*/		return 0x82177870;
		  /* 82177870h */ case    2:  		/* li R10, 4 */
		/* 82177870h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 82177870h case    2:*/		return 0x82177874;
		  /* 82177874h */ case    3:  		/* mr R11, R22 */
		/* 82177874h case    3:*/		regs.R11 = regs.R22;
		/* 82177874h case    3:*/		return 0x82177878;
		  /* 82177878h */ case    4:  		/* mtspr CTR, R10 */
		/* 82177878h case    4:*/		regs.CTR = regs.R10;
		/* 82177878h case    4:*/		return 0x8217787C;
		  /* 8217787Ch */ case    5:  		/* addi R10, R1, 184 */
		/* 8217787Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xB8);
		/* 8217787Ch case    5:*/		return 0x82177880;
		  /* 82177880h */ case    6:  		/* addi R9, R1, 232 */
		/* 82177880h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xE8);
		/* 82177880h case    6:*/		return 0x82177884;
		  /* 82177884h */ case    7:  		/* add R10, R11, R10 */
		/* 82177884h case    7:*/		cpu::op::add<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 82177884h case    7:*/		return 0x82177888;
		  /* 82177888h */ case    8:  		/* ldx R9, <#[R11 + R9]> */
		/* 82177888h case    8:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 82177888h case    8:*/		return 0x8217788C;
		  /* 8217788Ch */ case    9:  		/* addi R11, R11, 8 */
		/* 8217788Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 8217788Ch case    9:*/		return 0x82177890;
		  /* 82177890h */ case   10:  		/* ld R8, <#[R10]> */
		/* 82177890h case   10:*/		cpu::mem::load64( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 82177890h case   10:*/		return 0x82177894;
		  /* 82177894h */ case   11:  		/* or R9, R9, R8 */
		/* 82177894h case   11:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 82177894h case   11:*/		return 0x82177898;
		  /* 82177898h */ case   12:  		/* std R9, <#[R10]> */
		/* 82177898h case   12:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82177898h case   12:*/		return 0x8217789C;
		  /* 8217789Ch */ case   13:  		/* bc 16, CR0_LT, -32 */
		/* 8217789Ch case   13:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x8217787C;  }
		/* 8217789Ch case   13:*/		return 0x821778A0;
		  /* 821778A0h */ case   14:  		/* li R5, 0 */
		/* 821778A0h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821778A0h case   14:*/		return 0x821778A4;
		  /* 821778A4h */ case   15:  		/* addi R3, R1, 176 */
		/* 821778A4h case   15:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xB0);
		/* 821778A4h case   15:*/		return 0x821778A8;
		  /* 821778A8h */ case   16:  		/* bl -3872 */
		/* 821778A8h case   16:*/		regs.LR = 0x821778AC; return 0x82176988;
		/* 821778A8h case   16:*/		return 0x821778AC;
		  /* 821778ACh */ case   17:  		/* rlwinm R11, R3, 0, 28, 31 */
		/* 821778ACh case   17:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R11,regs.R3);
		/* 821778ACh case   17:*/		return 0x821778B0;
		  /* 821778B0h */ case   18:  		/* mr R31, R3 */
		/* 821778B0h case   18:*/		regs.R31 = regs.R3;
		/* 821778B0h case   18:*/		return 0x821778B4;
		  /* 821778B4h */ case   19:  		/* add R11, R11, R19 */
		/* 821778B4h case   19:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R19);
		/* 821778B4h case   19:*/		return 0x821778B8;
		  /* 821778B8h */ case   20:  		/* lbz R11, <#[R11 - 1]> */
		/* 821778B8h case   20:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821778B8h case   20:*/		return 0x821778BC;
		  /* 821778BCh */ case   21:  		/* stw R11, <#[R1 + 80]> */
		/* 821778BCh case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821778BCh case   21:*/		return 0x821778C0;
		  /* 821778C0h */ case   22:  		/* b 48 */
		/* 821778C0h case   22:*/		return 0x821778F0;
		/* 821778C0h case   22:*/		return 0x821778C4;
	}
	return 0x821778C4;
} // Block from 82177868h-821778C4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821778C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821778C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821778C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821778C4);
		  /* 821778C4h */ case    0:  		/* lwz R11, <#[R28 + 20]> */
		/* 821778C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 821778C4h case    0:*/		return 0x821778C8;
		  /* 821778C8h */ case    1:  		/* addi R7, R1, 80 */
		/* 821778C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821778C8h case    1:*/		return 0x821778CC;
		  /* 821778CCh */ case    2:  		/* mr R6, R28 */
		/* 821778CCh case    2:*/		regs.R6 = regs.R28;
		/* 821778CCh case    2:*/		return 0x821778D0;
		  /* 821778D0h */ case    3:  		/* oris R11, R11, 16384 */
		/* 821778D0h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x4000);
		/* 821778D0h case    3:*/		return 0x821778D4;
		  /* 821778D4h */ case    4:  		/* mr R5, R26 */
		/* 821778D4h case    4:*/		regs.R5 = regs.R26;
		/* 821778D4h case    4:*/		return 0x821778D8;
		  /* 821778D8h */ case    5:  		/* stw R11, <#[R28 + 20]> */
		/* 821778D8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 821778D8h case    5:*/		return 0x821778DC;
		  /* 821778DCh */ case    6:  		/* addi R4, R1, 176 */
		/* 821778DCh case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB0);
		/* 821778DCh case    6:*/		return 0x821778E0;
		  /* 821778E0h */ case    7:  		/* mr R3, R24 */
		/* 821778E0h case    7:*/		regs.R3 = regs.R24;
		/* 821778E0h case    7:*/		return 0x821778E4;
		  /* 821778E4h */ case    8:  		/* bl -3764 */
		/* 821778E4h case    8:*/		regs.LR = 0x821778E8; return 0x82176A30;
		/* 821778E4h case    8:*/		return 0x821778E8;
		  /* 821778E8h */ case    9:  		/* mr R31, R3 */
		/* 821778E8h case    9:*/		regs.R31 = regs.R3;
		/* 821778E8h case    9:*/		return 0x821778EC;
		  /* 821778ECh */ case   10:  		/* li R30, 1 */
		/* 821778ECh case   10:*/		cpu::op::li<0>(regs,&regs.R30,0x1);
		/* 821778ECh case   10:*/		return 0x821778F0;
	}
	return 0x821778F0;
} // Block from 821778C4h-821778F0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821778F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821778F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821778F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821778F0);
		  /* 821778F0h */ case    0:  		/* cmpwi CR6, R31, -1 */
		/* 821778F0h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R31,0xFFFFFFFF);
		/* 821778F0h case    0:*/		return 0x821778F4;
		  /* 821778F4h */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 821778F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x82177920;  }
		/* 821778F4h case    1:*/		return 0x821778F8;
		  /* 821778F8h */ case    2:  		/* lwz R11, <#[R24 + 796]> */
		/* 821778F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000031C) );
		/* 821778F8h case    2:*/		return 0x821778FC;
		  /* 821778FCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821778FCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821778FCh case    3:*/		return 0x82177900;
		  /* 82177900h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 82177900h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82177914;  }
		/* 82177900h case    4:*/		return 0x82177904;
		  /* 82177904h */ case    5:  		/* lwz R11, <#[R24 + 792]> */
		/* 82177904h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000318) );
		/* 82177904h case    5:*/		return 0x82177908;
		  /* 82177908h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 82177908h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177908h case    6:*/		return 0x8217790C;
		  /* 8217790Ch */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8217790Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x82177914;  }
		/* 8217790Ch case    7:*/		return 0x82177910;
		  /* 82177910h */ case    8:  		/* li R11, 32 */
		/* 82177910h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x20);
		/* 82177910h case    8:*/		return 0x82177914;
	}
	return 0x82177914;
} // Block from 821778F0h-82177914h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82177914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177914);
		  /* 82177914h */ case    0:  		/* rlwinm R10, R31, 28, 4, 31 */
		/* 82177914h case    0:*/		cpu::op::rlwinm<0,28,4,31>(regs,&regs.R10,regs.R31);
		/* 82177914h case    0:*/		return 0x82177918;
		  /* 82177918h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 82177918h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82177918h case    1:*/		return 0x8217791C;
		  /* 8217791Ch */ case    2:  		/* bc 12, CR6_LT, 152 */
		/* 8217791Ch case    2:*/		if ( regs.CR[6].lt ) { return 0x821779B4;  }
		/* 8217791Ch case    2:*/		return 0x82177920;
	}
	return 0x82177920;
} // Block from 82177914h-82177920h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82177920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177920);
		  /* 82177920h */ case    0:  		/* lwz R11, <#[R23 + 68]> */
		/* 82177920h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000044) );
		/* 82177920h case    0:*/		return 0x82177924;
		  /* 82177924h */ case    1:  		/* li R18, 1 */
		/* 82177924h case    1:*/		cpu::op::li<0>(regs,&regs.R18,0x1);
		/* 82177924h case    1:*/		return 0x82177928;
		  /* 82177928h */ case    2:  		/* oris R11, R11, 8192 */
		/* 82177928h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 82177928h case    2:*/		return 0x8217792C;
		  /* 8217792Ch */ case    3:  		/* stw R11, <#[R23 + 68]> */
		/* 8217792Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000044) );
		/* 8217792Ch case    3:*/		return 0x82177930;
	}
	return 0x82177930;
} // Block from 82177920h-82177930h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177930);
		  /* 82177930h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 82177930h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 82177930h case    0:*/		return 0x82177934;
		  /* 82177934h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82177934h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82177934h case    1:*/		return 0x82177938;
		  /* 82177938h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82177938h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82177938h case    2:*/		return 0x8217793C;
		  /* 8217793Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217793Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217794C;  }
		/* 8217793Ch case    3:*/		return 0x82177940;
		  /* 82177940h */ case    4:  		/* mr R23, R11 */
		/* 82177940h case    4:*/		regs.R23 = regs.R11;
		/* 82177940h case    4:*/		return 0x82177944;
		  /* 82177944h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82177944h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177944h case    5:*/		return 0x82177948;
		  /* 82177948h */ case    6:  		/* bc 4, CR6_EQ, -1752 */
		/* 82177948h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82177270;  }
		/* 82177948h case    6:*/		return 0x8217794C;
	}
	return 0x8217794C;
} // Block from 82177930h-8217794Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217794Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217794C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217794C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217794C);
		  /* 8217794Ch */ case    0:  		/* mr R3, R18 */
		/* 8217794Ch case    0:*/		regs.R3 = regs.R18;
		/* 8217794Ch case    0:*/		return 0x82177950;
		  /* 82177950h */ case    1:  		/* addi R1, R1, 384 */
		/* 82177950h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x180);
		/* 82177950h case    1:*/		return 0x82177954;
		  /* 82177954h */ case    2:  		/* b -943828 */
		/* 82177954h case    2:*/		return 0x82091280;
		/* 82177954h case    2:*/		return 0x82177958;
	}
	return 0x82177958;
} // Block from 8217794Ch-82177958h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82177958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177958);
		  /* 82177958h */ case    0:  		/* rlwinm R11, R25, 30, 2, 29 */
		/* 82177958h case    0:*/		cpu::op::rlwinm<0,30,2,29>(regs,&regs.R11,regs.R25);
		/* 82177958h case    0:*/		return 0x8217795C;
		  /* 8217795Ch */ case    1:  		/* rlwinm R8, R25, 27, 5, 28 */
		/* 8217795Ch case    1:*/		cpu::op::rlwinm<0,27,5,28>(regs,&regs.R8,regs.R25);
		/* 8217795Ch case    1:*/		return 0x82177960;
		  /* 82177960h */ case    2:  		/* addi R9, R11, 3 */
		/* 82177960h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x3);
		/* 82177960h case    2:*/		return 0x82177964;
		  /* 82177964h */ case    3:  		/* addi R7, R1, 104 */
		/* 82177964h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x68);
		/* 82177964h case    3:*/		return 0x82177968;
		  /* 82177968h */ case    4:  		/* rldicl R9, R9, 0, 58 */
		/* 82177968h case    4:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R9);
		/* 82177968h case    4:*/		return 0x8217796C;
		  /* 8217796Ch */ case    5:  		/* li R10, 2 */
		/* 8217796Ch case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x2);
		/* 8217796Ch case    5:*/		return 0x82177970;
		  /* 82177970h */ case    6:  		/* rldicl R11, R11, 0, 58 */
		/* 82177970h case    6:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R11,regs.R11);
		/* 82177970h case    6:*/		return 0x82177974;
		  /* 82177974h */ case    7:  		/* sld R10, R10, R9 */
		/* 82177974h case    7:*/		cpu::op::sld<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82177974h case    7:*/		return 0x82177978;
		  /* 82177978h */ case    8:  		/* ldx R9, <#[R8 + R7]> */
		/* 82177978h case    8:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 82177978h case    8:*/		return 0x8217797C;
		  /* 8217797Ch */ case    9:  		/* addi R10, R10, -1 */
		/* 8217797Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217797Ch case    9:*/		return 0x82177980;
		  /* 82177980h */ case   10:  		/* li R8, -1 */
		/* 82177980h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 82177980h case   10:*/		return 0x82177984;
		  /* 82177984h */ case   11:  		/* and R10, R10, R9 */
		/* 82177984h case   11:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82177984h case   11:*/		return 0x82177988;
		  /* 82177988h */ case   12:  		/* sld R9, R8, R11 */
		/* 82177988h case   12:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R8,regs.R11);
		/* 82177988h case   12:*/		return 0x8217798C;
		  /* 8217798Ch */ case   13:  		/* and R10, R10, R9 */
		/* 8217798Ch case   13:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 8217798Ch case   13:*/		return 0x82177990;
		  /* 82177990h */ case   14:  		/* addi R8, R1, 80 */
		/* 82177990h case   14:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x50);
		/* 82177990h case   14:*/		return 0x82177994;
		  /* 82177994h */ case   15:  		/* srd R11, R10, R11 */
		/* 82177994h case   15:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82177994h case   15:*/		return 0x82177998;
		  /* 82177998h */ case   16:  		/* mr R7, R28 */
		/* 82177998h case   16:*/		regs.R7 = regs.R28;
		/* 82177998h case   16:*/		return 0x8217799C;
		  /* 8217799Ch */ case   17:  		/* mr R6, R26 */
		/* 8217799Ch case   17:*/		regs.R6 = regs.R26;
		/* 8217799Ch case   17:*/		return 0x821779A0;
		  /* 821779A0h */ case   18:  		/* rlwinm R5, R11, 0, 0, 31 */
		/* 821779A0h case   18:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R5,regs.R11);
		/* 821779A0h case   18:*/		return 0x821779A4;
		  /* 821779A4h */ case   19:  		/* mr R4, R25 */
		/* 821779A4h case   19:*/		regs.R4 = regs.R25;
		/* 821779A4h case   19:*/		return 0x821779A8;
		  /* 821779A8h */ case   20:  		/* mr R3, R24 */
		/* 821779A8h case   20:*/		regs.R3 = regs.R24;
		/* 821779A8h case   20:*/		return 0x821779AC;
		  /* 821779ACh */ case   21:  		/* bl -4932 */
		/* 821779ACh case   21:*/		regs.LR = 0x821779B0; return 0x82176668;
		/* 821779ACh case   21:*/		return 0x821779B0;
		  /* 821779B0h */ case   22:  		/* mr R31, R3 */
		/* 821779B0h case   22:*/		regs.R31 = regs.R3;
		/* 821779B0h case   22:*/		return 0x821779B4;
	}
	return 0x821779B4;
} // Block from 82177958h-821779B4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821779B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821779B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821779B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821779B4);
		  /* 821779B4h */ case    0:  		/* mr R4, R31 */
		/* 821779B4h case    0:*/		regs.R4 = regs.R31;
		/* 821779B4h case    0:*/		return 0x821779B8;
		  /* 821779B8h */ case    1:  		/* lwz R5, <#[R1 + 80]> */
		/* 821779B8h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000050) );
		/* 821779B8h case    1:*/		return 0x821779BC;
		  /* 821779BCh */ case    2:  		/* mr R3, R28 */
		/* 821779BCh case    2:*/		regs.R3 = regs.R28;
		/* 821779BCh case    2:*/		return 0x821779C0;
		  /* 821779C0h */ case    3:  		/* bl 699240 */
		/* 821779C0h case    3:*/		regs.LR = 0x821779C4; return 0x82222528;
		/* 821779C0h case    3:*/		return 0x821779C4;
		  /* 821779C4h */ case    4:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 821779C4h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 821779C4h case    4:*/		return 0x821779C8;
		  /* 821779C8h */ case    5:  		/* mr R4, R31 */
		/* 821779C8h case    5:*/		regs.R4 = regs.R31;
		/* 821779C8h case    5:*/		return 0x821779CC;
		  /* 821779CCh */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821779CCh case    6:*/		if ( regs.CR[0].eq ) { return 0x821779E4;  }
		/* 821779CCh case    6:*/		return 0x821779D0;
		  /* 821779D0h */ case    7:  		/* addi R3, R1, 224 */
		/* 821779D0h case    7:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0xE0);
		/* 821779D0h case    7:*/		return 0x821779D4;
		  /* 821779D4h */ case    8:  		/* bl -33588 */
		/* 821779D4h case    8:*/		regs.LR = 0x821779D8; return 0x8216F6A0;
		/* 821779D4h case    8:*/		return 0x821779D8;
		  /* 821779D8h */ case    9:  		/* mr R3, R27 */
		/* 821779D8h case    9:*/		regs.R3 = regs.R27;
		/* 821779D8h case    9:*/		return 0x821779DC;
		  /* 821779DCh */ case   10:  		/* bl -35908 */
		/* 821779DCh case   10:*/		regs.LR = 0x821779E0; return 0x8216ED98;
		/* 821779DCh case   10:*/		return 0x821779E0;
		  /* 821779E0h */ case   11:  		/* mr R4, R3 */
		/* 821779E0h case   11:*/		regs.R4 = regs.R3;
		/* 821779E0h case   11:*/		return 0x821779E4;
	}
	return 0x821779E4;
} // Block from 821779B4h-821779E4h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821779E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821779E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821779E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821779E4);
		  /* 821779E4h */ case    0:  		/* addi R3, R1, 96 */
		/* 821779E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821779E4h case    0:*/		return 0x821779E8;
		  /* 821779E8h */ case    1:  		/* bl -34184 */
		/* 821779E8h case    1:*/		regs.LR = 0x821779EC; return 0x8216F460;
		/* 821779E8h case    1:*/		return 0x821779EC;
	}
	return 0x821779EC;
} // Block from 821779E4h-821779ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821779ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821779EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821779EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821779EC);
		  /* 821779ECh */ case    0:  		/* lwz R27, <#[R27 + 4]> */
		/* 821779ECh case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R27 + 0x00000004) );
		/* 821779ECh case    0:*/		return 0x821779F0;
		  /* 821779F0h */ case    1:  		/* b -1128 */
		/* 821779F0h case    1:*/		return 0x82177588;
		/* 821779F0h case    1:*/		return 0x821779F4;
	}
	return 0x821779F4;
} // Block from 821779ECh-821779F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821779F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821779F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821779F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821779F4);
		  /* 821779F4h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 821779F4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 821779F4h case    0:*/		return 0x821779F8;
		  /* 821779F8h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 821779F8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821779F8h case    1:*/		return 0x821779FC;
		  /* 821779FCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821779FCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821779FCh case    2:*/		return 0x82177A00;
		  /* 82177A00h */ case    3:  		/* bc 4, CR0_EQ, -208 */
		/* 82177A00h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82177930;  }
		/* 82177A00h case    3:*/		return 0x82177A04;
	}
	return 0x82177A04;
} // Block from 821779F4h-82177A04h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177A04);
		  /* 82177A04h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82177A04h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82177A04h case    0:*/		return 0x82177A08;
		  /* 82177A08h */ case    1:  		/* addic. R26, R11, -40 */
		/* 82177A08h case    1:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R11,0xFFFFFFD8);
		/* 82177A08h case    1:*/		return 0x82177A0C;
		  /* 82177A0Ch */ case    2:  		/* bc 4, CR0_EQ, -1612 */
		/* 82177A0Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821773C0;  }
		/* 82177A0Ch case    2:*/		return 0x82177A10;
		  /* 82177A10h */ case    3:  		/* b -224 */
		/* 82177A10h case    3:*/		return 0x82177930;
		/* 82177A10h case    3:*/		return 0x82177A14;
	}
	return 0x82177A14;
} // Block from 82177A04h-82177A14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177A14);
		  /* 82177A14h */ case    0:  		/* li R4, 4800 */
		/* 82177A14h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82177A14h case    0:*/		return 0x82177A18;
		  /* 82177A18h */ case    1:  		/* lwz R3, <#[R1 + 96]> */
		/* 82177A18h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 82177A18h case    1:*/		return 0x82177A1C;
		  /* 82177A1Ch */ case    2:  		/* bl -154548 */
		/* 82177A1Ch case    2:*/		regs.LR = 0x82177A20; return 0x82151E68;
		/* 82177A1Ch case    2:*/		return 0x82177A20;
		  /* 82177A20h */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 82177A20h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82177A20h case    3:*/		return 0x82177A24;
		  /* 82177A24h */ case    4:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82177A24h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82177A24h case    4:*/		return 0x82177A28;
		  /* 82177A28h */ case    5:  		/* cmplwi CR6, R11, 83 */
		/* 82177A28h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000053);
		/* 82177A28h case    5:*/		return 0x82177A2C;
		  /* 82177A2Ch */ case    6:  		/* bc 12, CR6_LT, 16 */
		/* 82177A2Ch case    6:*/		if ( regs.CR[6].lt ) { return 0x82177A3C;  }
		/* 82177A2Ch case    6:*/		return 0x82177A30;
		  /* 82177A30h */ case    7:  		/* cmplwi CR6, R11, 95 */
		/* 82177A30h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 82177A30h case    7:*/		return 0x82177A34;
		  /* 82177A34h */ case    8:  		/* li R10, 1 */
		/* 82177A34h case    8:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82177A34h case    8:*/		return 0x82177A38;
		  /* 82177A38h */ case    9:  		/* bc 4, CR6_GT, 8 */
		/* 82177A38h case    9:*/		if ( !regs.CR[6].gt ) { return 0x82177A40;  }
		/* 82177A38h case    9:*/		return 0x82177A3C;
	}
	return 0x82177A3C;
} // Block from 82177A14h-82177A3Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 82177A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177A3C);
		  /* 82177A3Ch */ case    0:  		/* li R10, 0 */
		/* 82177A3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82177A3Ch case    0:*/		return 0x82177A40;
	}
	return 0x82177A40;
} // Block from 82177A3Ch-82177A40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177A40);
		  /* 82177A40h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 82177A40h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82177A40h case    0:*/		return 0x82177A44;
		  /* 82177A44h */ case    1:  		/* bc 12, CR0_EQ, 40 */
		/* 82177A44h case    1:*/		if ( regs.CR[0].eq ) { return 0x82177A6C;  }
		/* 82177A44h case    1:*/		return 0x82177A48;
		  /* 82177A48h */ case    2:  		/* cmplwi CR6, R11, 85 */
		/* 82177A48h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 82177A48h case    2:*/		return 0x82177A4C;
		  /* 82177A4Ch */ case    3:  		/* bc 12, CR6_EQ, 32 */
		/* 82177A4Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x82177A6C;  }
		/* 82177A4Ch case    3:*/		return 0x82177A50;
		  /* 82177A50h */ case    4:  		/* cmplwi CR6, R11, 87 */
		/* 82177A50h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 82177A50h case    4:*/		return 0x82177A54;
		  /* 82177A54h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 82177A54h case    5:*/		if ( regs.CR[6].eq ) { return 0x82177A6C;  }
		/* 82177A54h case    5:*/		return 0x82177A58;
		  /* 82177A58h */ case    6:  		/* cmplwi CR6, R11, 90 */
		/* 82177A58h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 82177A58h case    6:*/		return 0x82177A5C;
		  /* 82177A5Ch */ case    7:  		/* bc 12, CR6_EQ, 16 */
		/* 82177A5Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82177A6C;  }
		/* 82177A5Ch case    7:*/		return 0x82177A60;
		  /* 82177A60h */ case    8:  		/* cmplwi CR6, R11, 94 */
		/* 82177A60h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005E);
		/* 82177A60h case    8:*/		return 0x82177A64;
		  /* 82177A64h */ case    9:  		/* li R3, 0 */
		/* 82177A64h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82177A64h case    9:*/		return 0x82177A68;
		  /* 82177A68h */ case   10:  		/* bclr 4, CR6_EQ */
		/* 82177A68h case   10:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82177A68h case   10:*/		return 0x82177A6C;
	}
	return 0x82177A6C;
} // Block from 82177A40h-82177A6Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 82177A6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177A6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177A6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177A6C);
		  /* 82177A6Ch */ case    0:  		/* li R3, 1 */
		/* 82177A6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82177A6Ch case    0:*/		return 0x82177A70;
		  /* 82177A70h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82177A70h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177A70h case    1:*/		return 0x82177A74;
	}
	return 0x82177A74;
} // Block from 82177A6Ch-82177A74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177A74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177A74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177A74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177A74);
		  /* 82177A74h */ case    0:  		/* nop */
		/* 82177A74h case    0:*/		cpu::op::nop();
		/* 82177A74h case    0:*/		return 0x82177A78;
		  /* 82177A78h */ case    1:  		/* rlwinm. R11, R3, 0, 29, 29 */
		/* 82177A78h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R3);
		/* 82177A78h case    1:*/		return 0x82177A7C;
		  /* 82177A7Ch */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 82177A7Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82177A8C;  }
		/* 82177A7Ch case    2:*/		return 0x82177A80;
		  /* 82177A80h */ case    3:  		/* rlwinm. R11, R4, 0, 30, 30 */
		/* 82177A80h case    3:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R4);
		/* 82177A80h case    3:*/		return 0x82177A84;
		  /* 82177A84h */ case    4:  		/* bc 12, CR0_EQ, 8 */
		/* 82177A84h case    4:*/		if ( regs.CR[0].eq ) { return 0x82177A8C;  }
		/* 82177A84h case    4:*/		return 0x82177A88;
		  /* 82177A88h */ case    5:  		/* addi R3, R3, -4 */
		/* 82177A88h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xFFFFFFFC);
		/* 82177A88h case    5:*/		return 0x82177A8C;
	}
	return 0x82177A8C;
} // Block from 82177A74h-82177A8Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 82177A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177A8C);
		  /* 82177A8Ch */ case    0:  		/* and R11, R3, R4 */
		/* 82177A8Ch case    0:*/		cpu::op::and<0>(regs,&regs.R11,regs.R3,regs.R4);
		/* 82177A8Ch case    0:*/		return 0x82177A90;
		  /* 82177A90h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 82177A90h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 82177A90h case    1:*/		return 0x82177A94;
		  /* 82177A94h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82177A94h case    2:*/		if ( regs.CR[0].eq ) { return 0x82177AA0;  }
		/* 82177A94h case    2:*/		return 0x82177A98;
		  /* 82177A98h */ case    3:  		/* addi R3, R3, -4 */
		/* 82177A98h case    3:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R3,0xFFFFFFFC);
		/* 82177A98h case    3:*/		return 0x82177A9C;
		  /* 82177A9Ch */ case    4:  		/* addi R4, R4, -4 */
		/* 82177A9Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0xFFFFFFFC);
		/* 82177A9Ch case    4:*/		return 0x82177AA0;
	}
	return 0x82177AA0;
} // Block from 82177A8Ch-82177AA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177AA0);
		  /* 82177AA0h */ case    0:  		/* rlwinm. R11, R3, 0, 31, 31 */
		/* 82177AA0h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R3);
		/* 82177AA0h case    0:*/		return 0x82177AA4;
		  /* 82177AA4h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 82177AA4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82177AB4;  }
		/* 82177AA4h case    1:*/		return 0x82177AA8;
		  /* 82177AA8h */ case    2:  		/* rlwinm. R11, R4, 0, 30, 30 */
		/* 82177AA8h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R11,regs.R4);
		/* 82177AA8h case    2:*/		return 0x82177AAC;
		  /* 82177AACh */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 82177AACh case    3:*/		if ( regs.CR[0].eq ) { return 0x82177AB4;  }
		/* 82177AACh case    3:*/		return 0x82177AB0;
		  /* 82177AB0h */ case    4:  		/* addi R4, R4, -2 */
		/* 82177AB0h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0xFFFFFFFE);
		/* 82177AB0h case    4:*/		return 0x82177AB4;
	}
	return 0x82177AB4;
} // Block from 82177AA0h-82177AB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177AB4);
		  /* 82177AB4h */ case    0:  		/* or R3, R3, R4 */
		/* 82177AB4h case    0:*/		cpu::op::or<0>(regs,&regs.R3,regs.R3,regs.R4);
		/* 82177AB4h case    0:*/		return 0x82177AB8;
		  /* 82177AB8h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82177AB8h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177AB8h case    1:*/		return 0x82177ABC;
	}
	return 0x82177ABC;
} // Block from 82177AB4h-82177ABCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177ABCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177ABC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177ABC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177ABC);
		  /* 82177ABCh */ case    0:  		/* nop */
		/* 82177ABCh case    0:*/		cpu::op::nop();
		/* 82177ABCh case    0:*/		return 0x82177AC0;
	}
	return 0x82177AC0;
} // Block from 82177ABCh-82177AC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177AC0h
// Function '?LocalRegisterAllocation@Compiler@D3DXShader@@AAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177AC0);
		  /* 82177AC0h */ case    0:  		/* lwz R9, <#[R3]> */
		/* 82177AC0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82177AC0h case    0:*/		return 0x82177AC4;
		  /* 82177AC4h */ case    1:  		/* mr R10, R4 */
		/* 82177AC4h case    1:*/		regs.R10 = regs.R4;
		/* 82177AC4h case    1:*/		return 0x82177AC8;
		  /* 82177AC8h */ case    2:  		/* rlwinm. R8, R9, 0, 29, 29 */
		/* 82177AC8h case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R9);
		/* 82177AC8h case    2:*/		return 0x82177ACC;
		  /* 82177ACCh */ case    3:  		/* rlwinm R11, R9, 0, 27, 31 */
		/* 82177ACCh case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R9);
		/* 82177ACCh case    3:*/		return 0x82177AD0;
		  /* 82177AD0h */ case    4:  		/* bc 12, CR0_EQ, 16 */
		/* 82177AD0h case    4:*/		if ( regs.CR[0].eq ) { return 0x82177AE0;  }
		/* 82177AD0h case    4:*/		return 0x82177AD4;
		  /* 82177AD4h */ case    5:  		/* rlwinm. R8, R4, 0, 30, 30 */
		/* 82177AD4h case    5:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R8,regs.R4);
		/* 82177AD4h case    5:*/		return 0x82177AD8;
		  /* 82177AD8h */ case    6:  		/* bc 12, CR0_EQ, 8 */
		/* 82177AD8h case    6:*/		if ( regs.CR[0].eq ) { return 0x82177AE0;  }
		/* 82177AD8h case    6:*/		return 0x82177ADC;
		  /* 82177ADCh */ case    7:  		/* addi R11, R11, -4 */
		/* 82177ADCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82177ADCh case    7:*/		return 0x82177AE0;
	}
	return 0x82177AE0;
} // Block from 82177AC0h-82177AE0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82177AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177AE0);
		  /* 82177AE0h */ case    0:  		/* and R8, R11, R4 */
		/* 82177AE0h case    0:*/		cpu::op::and<0>(regs,&regs.R8,regs.R11,regs.R4);
		/* 82177AE0h case    0:*/		return 0x82177AE4;
		  /* 82177AE4h */ case    1:  		/* rlwinm. R8, R8, 0, 29, 29 */
		/* 82177AE4h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R8,regs.R8);
		/* 82177AE4h case    1:*/		return 0x82177AE8;
		  /* 82177AE8h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82177AE8h case    2:*/		if ( regs.CR[0].eq ) { return 0x82177AF4;  }
		/* 82177AE8h case    2:*/		return 0x82177AEC;
		  /* 82177AECh */ case    3:  		/* addi R11, R11, -4 */
		/* 82177AECh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 82177AECh case    3:*/		return 0x82177AF0;
		  /* 82177AF0h */ case    4:  		/* addi R10, R4, -4 */
		/* 82177AF0h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0xFFFFFFFC);
		/* 82177AF0h case    4:*/		return 0x82177AF4;
	}
	return 0x82177AF4;
} // Block from 82177AE0h-82177AF4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177AF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177AF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177AF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177AF4);
		  /* 82177AF4h */ case    0:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 82177AF4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 82177AF4h case    0:*/		return 0x82177AF8;
		  /* 82177AF8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 82177AF8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82177B08;  }
		/* 82177AF8h case    1:*/		return 0x82177AFC;
		  /* 82177AFCh */ case    2:  		/* rlwinm. R8, R10, 0, 30, 30 */
		/* 82177AFCh case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R8,regs.R10);
		/* 82177AFCh case    2:*/		return 0x82177B00;
		  /* 82177B00h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 82177B00h case    3:*/		if ( regs.CR[0].eq ) { return 0x82177B08;  }
		/* 82177B00h case    3:*/		return 0x82177B04;
		  /* 82177B04h */ case    4:  		/* addi R10, R10, -2 */
		/* 82177B04h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFE);
		/* 82177B04h case    4:*/		return 0x82177B08;
	}
	return 0x82177B08;
} // Block from 82177AF4h-82177B08h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177B08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177B08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177B08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177B08);
		  /* 82177B08h */ case    0:  		/* or R11, R11, R10 */
		/* 82177B08h case    0:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82177B08h case    0:*/		return 0x82177B0C;
		  /* 82177B0Ch */ case    1:  		/* rlwimi R11, R9, 0, 0, 26 */
		/* 82177B0Ch case    1:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R11,regs.R9);
		/* 82177B0Ch case    1:*/		return 0x82177B10;
		  /* 82177B10h */ case    2:  		/* stw R11, <#[R3]> */
		/* 82177B10h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82177B10h case    2:*/		return 0x82177B14;
		  /* 82177B14h */ case    3:  		/* bclr 20, CR0_LT */
		/* 82177B14h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177B14h case    3:*/		return 0x82177B18;
	}
	return 0x82177B18;
} // Block from 82177B08h-82177B18h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177B18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177B18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177B18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177B18);
		  /* 82177B18h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 82177B18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82177B18h case    0:*/		return 0x82177B1C;
		  /* 82177B1Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82177B1Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177B1Ch case    1:*/		return 0x82177B20;
		  /* 82177B20h */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 82177B20h case    2:*/		if ( regs.CR[6].eq ) { return 0x82177B60;  }
		/* 82177B20h case    2:*/		return 0x82177B24;
		  /* 82177B24h */ case    3:  		/* lwz R9, <#[R11]> */
		/* 82177B24h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82177B24h case    3:*/		return 0x82177B28;
		  /* 82177B28h */ case    4:  		/* rlwinm. R10, R9, 0, 1, 1 */
		/* 82177B28h case    4:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R9);
		/* 82177B28h case    4:*/		return 0x82177B2C;
		  /* 82177B2Ch */ case    5:  		/* bc 12, CR0_EQ, 16 */
		/* 82177B2Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82177B3C;  }
		/* 82177B2Ch case    5:*/		return 0x82177B30;
		  /* 82177B30h */ case    6:  		/* rlwinm. R10, R9, 0, 4, 6 */
		/* 82177B30h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R9);
		/* 82177B30h case    6:*/		return 0x82177B34;
		  /* 82177B34h */ case    7:  		/* li R10, 1 */
		/* 82177B34h case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82177B34h case    7:*/		return 0x82177B38;
		  /* 82177B38h */ case    8:  		/* bc 12, CR0_EQ, 8 */
		/* 82177B38h case    8:*/		if ( regs.CR[0].eq ) { return 0x82177B40;  }
		/* 82177B38h case    8:*/		return 0x82177B3C;
	}
	return 0x82177B3C;
} // Block from 82177B18h-82177B3Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82177B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177B3C);
		  /* 82177B3Ch */ case    0:  		/* li R10, 0 */
		/* 82177B3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82177B3Ch case    0:*/		return 0x82177B40;
	}
	return 0x82177B40;
} // Block from 82177B3Ch-82177B40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177B40);
		  /* 82177B40h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 82177B40h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82177B40h case    0:*/		return 0x82177B44;
		  /* 82177B44h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82177B44h case    1:*/		if ( regs.CR[0].eq ) { return 0x82177B50;  }
		/* 82177B44h case    1:*/		return 0x82177B48;
		  /* 82177B48h */ case    2:  		/* rlwinm. R10, R9, 0, 7, 18 */
		/* 82177B48h case    2:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R9);
		/* 82177B48h case    2:*/		return 0x82177B4C;
		  /* 82177B4Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 82177B4Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82177B58;  }
		/* 82177B4Ch case    3:*/		return 0x82177B50;
	}
	return 0x82177B50;
} // Block from 82177B40h-82177B50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177B50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177B50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177B50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177B50);
		  /* 82177B50h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 82177B50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82177B50h case    0:*/		return 0x82177B54;
		  /* 82177B54h */ case    1:  		/* b -56 */
		/* 82177B54h case    1:*/		return 0x82177B1C;
		/* 82177B54h case    1:*/		return 0x82177B58;
	}
	return 0x82177B58;
} // Block from 82177B50h-82177B58h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177B58);
		  /* 82177B58h */ case    0:  		/* lwz R3, <#[R11 + 12]> */
		/* 82177B58h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 82177B58h case    0:*/		return 0x82177B5C;
		  /* 82177B5Ch */ case    1:  		/* bclr 20, CR0_LT */
		/* 82177B5Ch case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177B5Ch case    1:*/		return 0x82177B60;
	}
	return 0x82177B60;
} // Block from 82177B58h-82177B60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177B60);
		  /* 82177B60h */ case    0:  		/* rlwinm R11, R3, 0, 0, 19 */
		/* 82177B60h case    0:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R3);
		/* 82177B60h case    0:*/		return 0x82177B64;
		  /* 82177B64h */ case    1:  		/* li R4, 4800 */
		/* 82177B64h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82177B64h case    1:*/		return 0x82177B68;
		  /* 82177B68h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 82177B68h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82177B68h case    2:*/		return 0x82177B6C;
		  /* 82177B6Ch */ case    3:  		/* lwz R3, <#[R11 + 148]> */
		/* 82177B6Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 82177B6Ch case    3:*/		return 0x82177B70;
		  /* 82177B70h */ case    4:  		/* b -154888 */
		/* 82177B70h case    4:*/		return 0x82151E68;
		/* 82177B70h case    4:*/		return 0x82177B74;
		  /* 82177B74h */ case    5:  		/* nop */
		/* 82177B74h case    5:*/		cpu::op::nop();
		/* 82177B74h case    5:*/		return 0x82177B78;
	}
	return 0x82177B78;
} // Block from 82177B60h-82177B78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82177B78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177B78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177B78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177B78);
		  /* 82177B78h */ case    0:  		/* mfspr R12, LR */
		/* 82177B78h case    0:*/		regs.R12 = regs.LR;
		/* 82177B78h case    0:*/		return 0x82177B7C;
		  /* 82177B7Ch */ case    1:  		/* bl -944420 */
		/* 82177B7Ch case    1:*/		regs.LR = 0x82177B80; return 0x82091258;
		/* 82177B7Ch case    1:*/		return 0x82177B80;
		  /* 82177B80h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82177B80h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82177B80h case    2:*/		return 0x82177B84;
		  /* 82177B84h */ case    3:  		/* lwz R31, <#[R4]> */
		/* 82177B84h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000000) );
		/* 82177B84h case    3:*/		return 0x82177B88;
		  /* 82177B88h */ case    4:  		/* mr R28, R4 */
		/* 82177B88h case    4:*/		regs.R28 = regs.R4;
		/* 82177B88h case    4:*/		return 0x82177B8C;
		  /* 82177B8Ch */ case    5:  		/* mr R29, R5 */
		/* 82177B8Ch case    5:*/		regs.R29 = regs.R5;
		/* 82177B8Ch case    5:*/		return 0x82177B90;
		  /* 82177B90h */ case    6:  		/* lwz R11, <#[R31 + 8]> */
		/* 82177B90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82177B90h case    6:*/		return 0x82177B94;
		  /* 82177B94h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82177B94h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82177B94h case    7:*/		return 0x82177B98;
		  /* 82177B98h */ case    8:  		/* cmplwi CR6, R11, 14080 */
		/* 82177B98h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 82177B98h case    8:*/		return 0x82177B9C;
		  /* 82177B9Ch */ case    9:  		/* bc 4, CR6_EQ, 44 */
		/* 82177B9Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x82177BC8;  }
		/* 82177B9Ch case    9:*/		return 0x82177BA0;
		  /* 82177BA0h */ case   10:  		/* lwz R11, <#[R5]> */
		/* 82177BA0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82177BA0h case   10:*/		return 0x82177BA4;
		  /* 82177BA4h */ case   11:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 82177BA4h case   11:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 82177BA4h case   11:*/		return 0x82177BA8;
		  /* 82177BA8h */ case   12:  		/* addi R11, R11, 11 */
		/* 82177BA8h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 82177BA8h case   12:*/		return 0x82177BAC;
		  /* 82177BACh */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82177BACh case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82177BACh case   13:*/		return 0x82177BB0;
		  /* 82177BB0h */ case   14:  		/* lwzx R11, <#[R11 + R31]> */
		/* 82177BB0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 82177BB0h case   14:*/		return 0x82177BB4;
		  /* 82177BB4h */ case   15:  		/* lwz R31, <#[R11 + 12]> */
		/* 82177BB4h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 82177BB4h case   15:*/		return 0x82177BB8;
		  /* 82177BB8h */ case   16:  		/* stw R31, <#[R4]> */
		/* 82177BB8h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R4 + 0x00000000) );
		/* 82177BB8h case   16:*/		return 0x82177BBC;
		  /* 82177BBCh */ case   17:  		/* lwz R11, <#[R11]> */
		/* 82177BBCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82177BBCh case   17:*/		return 0x82177BC0;
		  /* 82177BC0h */ case   18:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 82177BC0h case   18:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 82177BC0h case   18:*/		return 0x82177BC4;
		  /* 82177BC4h */ case   19:  		/* stw R11, <#[R5]> */
		/* 82177BC4h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82177BC4h case   19:*/		return 0x82177BC8;
	}
	return 0x82177BC8;
} // Block from 82177B78h-82177BC8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82177BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177BC8);
		  /* 82177BC8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82177BC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82177BC8h case    0:*/		return 0x82177BCC;
		  /* 82177BCCh */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82177BCCh case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82177BCCh case    1:*/		return 0x82177BD0;
		  /* 82177BD0h */ case    2:  		/* cmplwi CR6, R11, 384 */
		/* 82177BD0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 82177BD0h case    2:*/		return 0x82177BD4;
		  /* 82177BD4h */ case    3:  		/* bc 4, CR6_EQ, 112 */
		/* 82177BD4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82177C44;  }
		/* 82177BD4h case    3:*/		return 0x82177BD8;
		  /* 82177BD8h */ case    4:  		/* lwz R30, <#[R31 + 44]> */
		/* 82177BD8h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000002C) );
		/* 82177BD8h case    4:*/		return 0x82177BDC;
		  /* 82177BDCh */ case    5:  		/* lwz R11, <#[R30]> */
		/* 82177BDCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 82177BDCh case    5:*/		return 0x82177BE0;
		  /* 82177BE0h */ case    6:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 82177BE0h case    6:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 82177BE0h case    6:*/		return 0x82177BE4;
		  /* 82177BE4h */ case    7:  		/* bc 4, CR0_EQ, 96 */
		/* 82177BE4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82177C44;  }
		/* 82177BE4h case    7:*/		return 0x82177BE8;
		  /* 82177BE8h */ case    8:  		/* mr R3, R30 */
		/* 82177BE8h case    8:*/		regs.R3 = regs.R30;
		/* 82177BE8h case    8:*/		return 0x82177BEC;
		  /* 82177BECh */ case    9:  		/* lwz R4, <#[R31 + 48]> */
		/* 82177BECh case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 82177BECh case    9:*/		return 0x82177BF0;
		  /* 82177BF0h */ case   10:  		/* bl -80232 */
		/* 82177BF0h case   10:*/		regs.LR = 0x82177BF4; return 0x82164288;
		/* 82177BF0h case   10:*/		return 0x82177BF4;
		  /* 82177BF4h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82177BF4h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82177BF4h case   11:*/		return 0x82177BF8;
		  /* 82177BF8h */ case   12:  		/* bc 12, CR0_EQ, 76 */
		/* 82177BF8h case   12:*/		if ( regs.CR[0].eq ) { return 0x82177C44;  }
		/* 82177BF8h case   12:*/		return 0x82177BFC;
		  /* 82177BFCh */ case   13:  		/* lwz R11, <#[R30 + 12]> */
		/* 82177BFCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 82177BFCh case   13:*/		return 0x82177C00;
		  /* 82177C00h */ case   14:  		/* lwz R10, <#[R11 + 8]> */
		/* 82177C00h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82177C00h case   14:*/		return 0x82177C04;
		  /* 82177C04h */ case   15:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 82177C04h case   15:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 82177C04h case   15:*/		return 0x82177C08;
		  /* 82177C08h */ case   16:  		/* bc 12, CR0_EQ, 60 */
		/* 82177C08h case   16:*/		if ( regs.CR[0].eq ) { return 0x82177C44;  }
		/* 82177C08h case   16:*/		return 0x82177C0C;
		  /* 82177C0Ch */ case   17:  		/* lhz R10, <#[R11 + 18]> */
		/* 82177C0Ch case   17:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000012) );
		/* 82177C0Ch case   17:*/		return 0x82177C10;
		  /* 82177C10h */ case   18:  		/* lhz R9, <#[R31 + 18]> */
		/* 82177C10h case   18:*/		cpu::mem::load16z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000012) );
		/* 82177C10h case   18:*/		return 0x82177C14;
		  /* 82177C14h */ case   19:  		/* xor R10, R10, R9 */
		/* 82177C14h case   19:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82177C14h case   19:*/		return 0x82177C18;
		  /* 82177C18h */ case   20:  		/* rlwinm. R10, R10, 0, 16, 31 */
		/* 82177C18h case   20:*/		cpu::op::rlwinm<1,0,16,31>(regs,&regs.R10,regs.R10);
		/* 82177C18h case   20:*/		return 0x82177C1C;
		  /* 82177C1Ch */ case   21:  		/* bc 4, CR0_EQ, 40 */
		/* 82177C1Ch case   21:*/		if ( !regs.CR[0].eq ) { return 0x82177C44;  }
		/* 82177C1Ch case   21:*/		return 0x82177C20;
		  /* 82177C20h */ case   22:  		/* stw R11, <#[R28]> */
		/* 82177C20h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82177C20h case   22:*/		return 0x82177C24;
		  /* 82177C24h */ case   23:  		/* li R11, 57 */
		/* 82177C24h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x39);
		/* 82177C24h case   23:*/		return 0x82177C28;
		  /* 82177C28h */ case   24:  		/* lwz R9, <#[R30]> */
		/* 82177C28h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000000) );
		/* 82177C28h case   24:*/		return 0x82177C2C;
		  /* 82177C2Ch */ case   25:  		/* lwz R10, <#[R29]> */
		/* 82177C2Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82177C2Ch case   25:*/		return 0x82177C30;
		  /* 82177C30h */ case   26:  		/* rlwinm R10, R10, 1, 29, 30 */
		/* 82177C30h case   26:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R10,regs.R10);
		/* 82177C30h case   26:*/		return 0x82177C34;
		  /* 82177C34h */ case   27:  		/* rlwinm R9, R9, 27, 24, 31 */
		/* 82177C34h case   27:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R9);
		/* 82177C34h case   27:*/		return 0x82177C38;
		  /* 82177C38h */ case   28:  		/* srw R10, R9, R10 */
		/* 82177C38h case   28:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82177C38h case   28:*/		return 0x82177C3C;
		  /* 82177C3Ch */ case   29:  		/* rlwimi R10, R11, 2, 0, 29 */
		/* 82177C3Ch case   29:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 82177C3Ch case   29:*/		return 0x82177C40;
		  /* 82177C40h */ case   30:  		/* stw R10, <#[R29]> */
		/* 82177C40h case   30:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82177C40h case   30:*/		return 0x82177C44;
	}
	return 0x82177C44;
} // Block from 82177BC8h-82177C44h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82177C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177C44);
		  /* 82177C44h */ case    0:  		/* addi R1, R1, 128 */
		/* 82177C44h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82177C44h case    0:*/		return 0x82177C48;
		  /* 82177C48h */ case    1:  		/* b -944544 */
		/* 82177C48h case    1:*/		return 0x820912A8;
		/* 82177C48h case    1:*/		return 0x82177C4C;
		  /* 82177C4Ch */ case    2:  		/* nop */
		/* 82177C4Ch case    2:*/		cpu::op::nop();
		/* 82177C4Ch case    2:*/		return 0x82177C50;
	}
	return 0x82177C50;
} // Block from 82177C44h-82177C50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82177C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177C50);
		  /* 82177C50h */ case    0:  		/* mfspr R12, LR */
		/* 82177C50h case    0:*/		regs.R12 = regs.LR;
		/* 82177C50h case    0:*/		return 0x82177C54;
		  /* 82177C54h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82177C54h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177C54h case    1:*/		return 0x82177C58;
		  /* 82177C58h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82177C58h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177C58h case    2:*/		return 0x82177C5C;
		  /* 82177C5Ch */ case    3:  		/* stwu R1, <#[R1 - 128]> */
		/* 82177C5Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82177C5Ch case    3:*/		return 0x82177C60;
		  /* 82177C60h */ case    4:  		/* lwz R10, <#[R4 + 8]> */
		/* 82177C60h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 82177C60h case    4:*/		return 0x82177C64;
		  /* 82177C64h */ case    5:  		/* li R11, 0 */
		/* 82177C64h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82177C64h case    5:*/		return 0x82177C68;
		  /* 82177C68h */ case    6:  		/* li R9, 4 */
		/* 82177C68h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x4);
		/* 82177C68h case    6:*/		return 0x82177C6C;
		  /* 82177C6Ch */ case    7:  		/* mr R31, R3 */
		/* 82177C6Ch case    7:*/		regs.R31 = regs.R3;
		/* 82177C6Ch case    7:*/		return 0x82177C70;
		  /* 82177C70h */ case    8:  		/* stw R11, <#[R1 + 88]> */
		/* 82177C70h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 82177C70h case    8:*/		return 0x82177C74;
		  /* 82177C74h */ case    9:  		/* rlwinm. R10, R10, 0, 10, 12 */
		/* 82177C74h case    9:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R10,regs.R10);
		/* 82177C74h case    9:*/		return 0x82177C78;
		  /* 82177C78h */ case   10:  		/* stw R9, <#[R1 + 84]> */
		/* 82177C78h case   10:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000054) );
		/* 82177C78h case   10:*/		return 0x82177C7C;
		  /* 82177C7Ch */ case   11:  		/* stw R11, <#[R1 + 80]> */
		/* 82177C7Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82177C7Ch case   11:*/		return 0x82177C80;
		  /* 82177C80h */ case   12:  		/* bc 12, CR0_EQ, 128 */
		/* 82177C80h case   12:*/		if ( regs.CR[0].eq ) { return 0x82177D00;  }
		/* 82177C80h case   12:*/		return 0x82177C84;
		  /* 82177C84h */ case   13:  		/* lwz R3, <#[R4 + 44]> */
		/* 82177C84h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x0000002C) );
		/* 82177C84h case   13:*/		return 0x82177C88;
		  /* 82177C88h */ case   14:  		/* li R10, 0 */
		/* 82177C88h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82177C88h case   14:*/		return 0x82177C8C;
		  /* 82177C8Ch */ case   15:  		/* li R9, 0 */
		/* 82177C8Ch case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82177C8Ch case   15:*/		return 0x82177C90;
		  /* 82177C90h */ case   16:  		/* li R8, 0 */
		/* 82177C90h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82177C90h case   16:*/		return 0x82177C94;
		  /* 82177C94h */ case   17:  		/* addi R7, R1, 88 */
		/* 82177C94h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 82177C94h case   17:*/		return 0x82177C98;
		  /* 82177C98h */ case   18:  		/* addi R6, R1, 84 */
		/* 82177C98h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 82177C98h case   18:*/		return 0x82177C9C;
		  /* 82177C9Ch */ case   19:  		/* addi R5, R1, 80 */
		/* 82177C9Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 82177C9Ch case   19:*/		return 0x82177CA0;
		  /* 82177CA0h */ case   20:  		/* li R4, 0 */
		/* 82177CA0h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82177CA0h case   20:*/		return 0x82177CA4;
		  /* 82177CA4h */ case   21:  		/* bl 702508 */
		/* 82177CA4h case   21:*/		regs.LR = 0x82177CA8; return 0x822234D0;
		/* 82177CA4h case   21:*/		return 0x82177CA8;
		  /* 82177CA8h */ case   22:  		/* lwz R5, <#[R1 + 84]> */
		/* 82177CA8h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 82177CA8h case   22:*/		return 0x82177CAC;
		  /* 82177CACh */ case   23:  		/* lwz R6, <#[R1 + 88]> */
		/* 82177CACh case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 82177CACh case   23:*/		return 0x82177CB0;
		  /* 82177CB0h */ case   24:  		/* cmpwi CR6, R5, 0 */
		/* 82177CB0h case   24:*/		cpu::op::cmpwi<6>(regs,regs.R5,0x00000000);
		/* 82177CB0h case   24:*/		return 0x82177CB4;
		  /* 82177CB4h */ case   25:  		/* bc 4, CR6_EQ, 12 */
		/* 82177CB4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x82177CC0;  }
		/* 82177CB4h case   25:*/		return 0x82177CB8;
		  /* 82177CB8h */ case   26:  		/* cmplwi CR6, R6, 0 */
		/* 82177CB8h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82177CB8h case   26:*/		return 0x82177CBC;
		  /* 82177CBCh */ case   27:  		/* bc 12, CR6_EQ, 108 */
		/* 82177CBCh case   27:*/		if ( regs.CR[6].eq ) { return 0x82177D28;  }
		/* 82177CBCh case   27:*/		return 0x82177CC0;
	}
	return 0x82177CC0;
} // Block from 82177C50h-82177CC0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 82177CC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177CC0);
		  /* 82177CC0h */ case    0:  		/* lwz R3, <#[R1 + 80]> */
		/* 82177CC0h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82177CC0h case    0:*/		return 0x82177CC4;
		  /* 82177CC4h */ case    1:  		/* lwz R11, <#[R3 + 8]> */
		/* 82177CC4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82177CC4h case    1:*/		return 0x82177CC8;
		  /* 82177CC8h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82177CC8h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82177CC8h case    2:*/		return 0x82177CCC;
		  /* 82177CCCh */ case    3:  		/* cmplwi CR6, R11, 16000 */
		/* 82177CCCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 82177CCCh case    3:*/		return 0x82177CD0;
		  /* 82177CD0h */ case    4:  		/* bc 4, CR6_EQ, 80 */
		/* 82177CD0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82177D20;  }
		/* 82177CD0h case    4:*/		return 0x82177CD4;
		  /* 82177CD4h */ case    5:  		/* lwz R11, <#[R31 + 40]> */
		/* 82177CD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82177CD4h case    5:*/		return 0x82177CD8;
		  /* 82177CD8h */ case    6:  		/* rlwinm. R11, R11, 0, 17, 17 */
		/* 82177CD8h case    6:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R11);
		/* 82177CD8h case    6:*/		return 0x82177CDC;
		  /* 82177CDCh */ case    7:  		/* bc 4, CR0_EQ, 80 */
		/* 82177CDCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x82177D2C;  }
		/* 82177CDCh case    7:*/		return 0x82177CE0;
		  /* 82177CE0h */ case    8:  		/* mr R4, R3 */
		/* 82177CE0h case    8:*/		regs.R4 = regs.R3;
		/* 82177CE0h case    8:*/		return 0x82177CE4;
		  /* 82177CE4h */ case    9:  		/* addi R3, R1, 96 */
		/* 82177CE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 82177CE4h case    9:*/		return 0x82177CE8;
		  /* 82177CE8h */ case   10:  		/* bl 718408 */
		/* 82177CE8h case   10:*/		regs.LR = 0x82177CEC; return 0x82227330;
		/* 82177CE8h case   10:*/		return 0x82177CEC;
		  /* 82177CECh */ case   11:  		/* addi R5, R1, 96 */
		/* 82177CECh case   11:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 82177CECh case   11:*/		return 0x82177CF0;
		  /* 82177CF0h */ case   12:  		/* li R4, 1 */
		/* 82177CF0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82177CF0h case   12:*/		return 0x82177CF4;
		  /* 82177CF4h */ case   13:  		/* mr R3, R31 */
		/* 82177CF4h case   13:*/		regs.R3 = regs.R31;
		/* 82177CF4h case   13:*/		return 0x82177CF8;
		  /* 82177CF8h */ case   14:  		/* bl 718024 */
		/* 82177CF8h case   14:*/		regs.LR = 0x82177CFC; return 0x822271C0;
		/* 82177CF8h case   14:*/		return 0x82177CFC;
		  /* 82177CFCh */ case   15:  		/* b 48 */
		/* 82177CFCh case   15:*/		return 0x82177D2C;
		/* 82177CFCh case   15:*/		return 0x82177D00;
	}
	return 0x82177D00;
} // Block from 82177CC0h-82177D00h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82177D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177D00);
		  /* 82177D00h */ case    0:  		/* lwz R3, <#[R4]> */
		/* 82177D00h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x00000000) );
		/* 82177D00h case    0:*/		return 0x82177D04;
		  /* 82177D04h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 82177D04h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 82177D04h case    1:*/		return 0x82177D08;
		  /* 82177D08h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82177D08h case    2:*/		if ( regs.CR[6].eq ) { return 0x82177D20;  }
		/* 82177D08h case    2:*/		return 0x82177D0C;
		  /* 82177D0Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 82177D0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82177D0Ch case    3:*/		return 0x82177D10;
		  /* 82177D10h */ case    4:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 82177D10h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 82177D10h case    4:*/		return 0x82177D14;
		  /* 82177D14h */ case    5:  		/* bc 4, CR0_EQ, -140 */
		/* 82177D14h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82177C88;  }
		/* 82177D14h case    5:*/		return 0x82177D18;
		  /* 82177D18h */ case    6:  		/* lwz R3, <#[R3 + 4]> */
		/* 82177D18h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 82177D18h case    6:*/		return 0x82177D1C;
		  /* 82177D1Ch */ case    7:  		/* b -24 */
		/* 82177D1Ch case    7:*/		return 0x82177D04;
		/* 82177D1Ch case    7:*/		return 0x82177D20;
	}
	return 0x82177D20;
} // Block from 82177D00h-82177D20h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82177D20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177D20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177D20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177D20);
		  /* 82177D20h */ case    0:  		/* li R3, 0 */
		/* 82177D20h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82177D20h case    0:*/		return 0x82177D24;
		  /* 82177D24h */ case    1:  		/* b 8 */
		/* 82177D24h case    1:*/		return 0x82177D2C;
		/* 82177D24h case    1:*/		return 0x82177D28;
	}
	return 0x82177D28;
} // Block from 82177D20h-82177D28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177D28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177D28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177D28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177D28);
		  /* 82177D28h */ case    0:  		/* lwz R3, <#[R1 + 80]> */
		/* 82177D28h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 82177D28h case    0:*/		return 0x82177D2C;
	}
	return 0x82177D2C;
} // Block from 82177D28h-82177D2Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177D2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177D2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177D2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177D2C);
		  /* 82177D2Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 82177D2Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82177D2Ch case    0:*/		return 0x82177D30;
		  /* 82177D30h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82177D30h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177D30h case    1:*/		return 0x82177D34;
		  /* 82177D34h */ case    2:  		/* mtspr LR, R12 */
		/* 82177D34h case    2:*/		regs.LR = regs.R12;
		/* 82177D34h case    2:*/		return 0x82177D38;
		  /* 82177D38h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82177D38h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177D38h case    3:*/		return 0x82177D3C;
		  /* 82177D3Ch */ case    4:  		/* bclr 20, CR0_LT */
		/* 82177D3Ch case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177D3Ch case    4:*/		return 0x82177D40;
	}
	return 0x82177D40;
} // Block from 82177D2Ch-82177D40h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177D40h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177D40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177D40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177D40);
		  /* 82177D40h */ case    0:  		/* lwz R8, <#[R4 + 4]> */
		/* 82177D40h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000004) );
		/* 82177D40h case    0:*/		return 0x82177D44;
		  /* 82177D44h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 82177D44h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82177D44h case    1:*/		return 0x82177D48;
		  /* 82177D48h */ case    2:  		/* bclr 12, CR6_EQ */
		/* 82177D48h case    2:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82177D48h case    2:*/		return 0x82177D4C;
	}
	return 0x82177D4C;
} // Block from 82177D40h-82177D4Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82177D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177D4C);
		  /* 82177D4Ch */ case    0:  		/* lwz R11, <#[R8 + 16]> */
		/* 82177D4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000010) );
		/* 82177D4Ch case    0:*/		return 0x82177D50;
		  /* 82177D50h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82177D50h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177D50h case    1:*/		return 0x82177D54;
		  /* 82177D54h */ case    2:  		/* bc 12, CR6_EQ, 108 */
		/* 82177D54h case    2:*/		if ( regs.CR[6].eq ) { return 0x82177DC0;  }
		/* 82177D54h case    2:*/		return 0x82177D58;
		  /* 82177D58h */ case    3:  		/* lwz R10, <#[R8]> */
		/* 82177D58h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82177D58h case    3:*/		return 0x82177D5C;
		  /* 82177D5Ch */ case    4:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 82177D5Ch case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 82177D5Ch case    4:*/		return 0x82177D60;
		  /* 82177D60h */ case    5:  		/* bc 12, CR0_EQ, 96 */
		/* 82177D60h case    5:*/		if ( regs.CR[0].eq ) { return 0x82177DC0;  }
		/* 82177D60h case    5:*/		return 0x82177D64;
		  /* 82177D64h */ case    6:  		/* lwz R9, <#[R11 + 4]> */
		/* 82177D64h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 82177D64h case    6:*/		return 0x82177D68;
		  /* 82177D68h */ case    7:  		/* cmplwi CR6, R9, 0 */
		/* 82177D68h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82177D68h case    7:*/		return 0x82177D6C;
		  /* 82177D6Ch */ case    8:  		/* bc 12, CR6_EQ, 84 */
		/* 82177D6Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x82177DC0;  }
		/* 82177D6Ch case    8:*/		return 0x82177D70;
		  /* 82177D70h */ case    9:  		/* lwz R11, <#[R9 + 16]> */
		/* 82177D70h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000010) );
		/* 82177D70h case    9:*/		return 0x82177D74;
		  /* 82177D74h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 82177D74h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177D74h case   10:*/		return 0x82177D78;
		  /* 82177D78h */ case   11:  		/* bc 12, CR6_EQ, 64 */
		/* 82177D78h case   11:*/		if ( regs.CR[6].eq ) { return 0x82177DB8;  }
		/* 82177D78h case   11:*/		return 0x82177D7C;
		  /* 82177D7Ch */ case   12:  		/* lwz R10, <#[R11 + 8]> */
		/* 82177D7Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82177D7Ch case   12:*/		return 0x82177D80;
		  /* 82177D80h */ case   13:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 82177D80h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 82177D80h case   13:*/		return 0x82177D84;
		  /* 82177D84h */ case   14:  		/* cmplwi CR6, R10, 64 */
		/* 82177D84h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000040);
		/* 82177D84h case   14:*/		return 0x82177D88;
		  /* 82177D88h */ case   15:  		/* bc 4, CR6_EQ, 24 */
		/* 82177D88h case   15:*/		if ( !regs.CR[6].eq ) { return 0x82177DA0;  }
		/* 82177D88h case   15:*/		return 0x82177D8C;
		  /* 82177D8Ch */ case   16:  		/* lwz R10, <#[R6]> */
		/* 82177D8Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 82177D8Ch case   16:*/		return 0x82177D90;
		  /* 82177D90h */ case   17:  		/* cmplwi CR6, R10, 0 */
		/* 82177D90h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82177D90h case   17:*/		return 0x82177D94;
		  /* 82177D94h */ case   18:  		/* bc 4, CR6_EQ, 52 */
		/* 82177D94h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82177DC8;  }
		/* 82177D94h case   18:*/		return 0x82177D98;
		  /* 82177D98h */ case   19:  		/* stw R11, <#[R6]> */
		/* 82177D98h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 82177D98h case   19:*/		return 0x82177D9C;
		  /* 82177D9Ch */ case   20:  		/* b 28 */
		/* 82177D9Ch case   20:*/		return 0x82177DB8;
		/* 82177D9Ch case   20:*/		return 0x82177DA0;
	}
	return 0x82177DA0;
} // Block from 82177D4Ch-82177DA0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82177DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177DA0);
		  /* 82177DA0h */ case    0:  		/* cmplwi CR6, R10, 63 */
		/* 82177DA0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000003F);
		/* 82177DA0h case    0:*/		return 0x82177DA4;
		  /* 82177DA4h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 82177DA4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82177DB8;  }
		/* 82177DA4h case    1:*/		return 0x82177DA8;
		  /* 82177DA8h */ case    2:  		/* lwz R10, <#[R5]> */
		/* 82177DA8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000000) );
		/* 82177DA8h case    2:*/		return 0x82177DAC;
		  /* 82177DACh */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 82177DACh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82177DACh case    3:*/		return 0x82177DB0;
		  /* 82177DB0h */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 82177DB0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82177DD0;  }
		/* 82177DB0h case    4:*/		return 0x82177DB4;
		  /* 82177DB4h */ case    5:  		/* stw R11, <#[R5]> */
		/* 82177DB4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82177DB4h case    5:*/		return 0x82177DB8;
	}
	return 0x82177DB8;
} // Block from 82177DA0h-82177DB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82177DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177DB8);
		  /* 82177DB8h */ case    0:  		/* lwz R9, <#[R9 + 8]> */
		/* 82177DB8h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82177DB8h case    0:*/		return 0x82177DBC;
		  /* 82177DBCh */ case    1:  		/* b -84 */
		/* 82177DBCh case    1:*/		return 0x82177D68;
		/* 82177DBCh case    1:*/		return 0x82177DC0;
	}
	return 0x82177DC0;
} // Block from 82177DB8h-82177DC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177DC0);
		  /* 82177DC0h */ case    0:  		/* lwz R8, <#[R8 + 8]> */
		/* 82177DC0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 82177DC0h case    0:*/		return 0x82177DC4;
		  /* 82177DC4h */ case    1:  		/* b -128 */
		/* 82177DC4h case    1:*/		return 0x82177D44;
		/* 82177DC4h case    1:*/		return 0x82177DC8;
	}
	return 0x82177DC8;
} // Block from 82177DC0h-82177DC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177DC8);
		  /* 82177DC8h */ case    0:  		/* li R4, 4800 */
		/* 82177DC8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82177DC8h case    0:*/		return 0x82177DCC;
		  /* 82177DCCh */ case    1:  		/* b -155492 */
		/* 82177DCCh case    1:*/		return 0x82151E68;
		/* 82177DCCh case    1:*/		return 0x82177DD0;
	}
	return 0x82177DD0;
} // Block from 82177DC8h-82177DD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177DD0);
		  /* 82177DD0h */ case    0:  		/* li R4, 4800 */
		/* 82177DD0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82177DD0h case    0:*/		return 0x82177DD4;
		  /* 82177DD4h */ case    1:  		/* b -155500 */
		/* 82177DD4h case    1:*/		return 0x82151E68;
		/* 82177DD4h case    1:*/		return 0x82177DD8;
		  /* 82177DD8h */ case    2:  		/* bclr 20, CR0_LT */
		/* 82177DD8h case    2:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177DD8h case    2:*/		return 0x82177DDC;
	}
	return 0x82177DDC;
} // Block from 82177DD0h-82177DDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 82177DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177DDC);
		  /* 82177DDCh */ case    0:  		/* nop */
		/* 82177DDCh case    0:*/		cpu::op::nop();
		/* 82177DDCh case    0:*/		return 0x82177DE0;
		  /* 82177DE0h */ case    1:  		/* lwz R11, <#[R3 + 8]> */
		/* 82177DE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82177DE0h case    1:*/		return 0x82177DE4;
		  /* 82177DE4h */ case    2:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 82177DE4h case    2:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 82177DE4h case    2:*/		return 0x82177DE8;
		  /* 82177DE8h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82177DE8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82177DF4;  }
		/* 82177DE8h case    3:*/		return 0x82177DEC;
		  /* 82177DECh */ case    4:  		/* li R3, 0 */
		/* 82177DECh case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82177DECh case    4:*/		return 0x82177DF0;
		  /* 82177DF0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82177DF0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177DF0h case    5:*/		return 0x82177DF4;
	}
	return 0x82177DF4;
} // Block from 82177DDCh-82177DF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82177DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177DF4);
		  /* 82177DF4h */ case    0:  		/* lwz R11, <#[R3 + 4]> */
		/* 82177DF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82177DF4h case    0:*/		return 0x82177DF8;
		  /* 82177DF8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82177DF8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177DF8h case    1:*/		return 0x82177DFC;
		  /* 82177DFCh */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 82177DFCh case    2:*/		if ( regs.CR[6].eq ) { return 0x82177E14;  }
		/* 82177DFCh case    2:*/		return 0x82177E00;
		  /* 82177E00h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 82177E00h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82177E00h case    3:*/		return 0x82177E04;
		  /* 82177E04h */ case    4:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 82177E04h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 82177E04h case    4:*/		return 0x82177E08;
		  /* 82177E08h */ case    5:  		/* bc 4, CR0_EQ, 12 */
		/* 82177E08h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82177E14;  }
		/* 82177E08h case    5:*/		return 0x82177E0C;
		  /* 82177E0Ch */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 82177E0Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82177E0Ch case    6:*/		return 0x82177E10;
		  /* 82177E10h */ case    7:  		/* b -24 */
		/* 82177E10h case    7:*/		return 0x82177DF8;
		/* 82177E10h case    7:*/		return 0x82177E14;
	}
	return 0x82177E14;
} // Block from 82177DF4h-82177E14h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82177E14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E14);
		  /* 82177E14h */ case    0:  		/* lwz R11, <#[R11]> */
		/* 82177E14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82177E14h case    0:*/		return 0x82177E18;
		  /* 82177E18h */ case    1:  		/* rlwinm R11, R11, 15, 24, 31 */
		/* 82177E18h case    1:*/		cpu::op::rlwinm<0,15,24,31>(regs,&regs.R11,regs.R11);
		/* 82177E18h case    1:*/		return 0x82177E1C;
		  /* 82177E1Ch */ case    2:  		/* cmplwi CR6, R11, 32 */
		/* 82177E1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 82177E1Ch case    2:*/		return 0x82177E20;
		  /* 82177E20h */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 82177E20h case    3:*/		if ( regs.CR[6].lt ) { return 0x82177E30;  }
		/* 82177E20h case    3:*/		return 0x82177E24;
		  /* 82177E24h */ case    4:  		/* cmplwi CR6, R11, 37 */
		/* 82177E24h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000025);
		/* 82177E24h case    4:*/		return 0x82177E28;
		  /* 82177E28h */ case    5:  		/* li R11, 1 */
		/* 82177E28h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82177E28h case    5:*/		return 0x82177E2C;
		  /* 82177E2Ch */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 82177E2Ch case    6:*/		if ( !regs.CR[6].gt ) { return 0x82177E34;  }
		/* 82177E2Ch case    6:*/		return 0x82177E30;
	}
	return 0x82177E30;
} // Block from 82177E14h-82177E30h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82177E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E30);
		  /* 82177E30h */ case    0:  		/* li R11, 0 */
		/* 82177E30h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82177E30h case    0:*/		return 0x82177E34;
	}
	return 0x82177E34;
} // Block from 82177E30h-82177E34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177E34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E34);
		  /* 82177E34h */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 82177E34h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 82177E34h case    0:*/		return 0x82177E38;
		  /* 82177E38h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82177E38h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177E38h case    1:*/		return 0x82177E3C;
	}
	return 0x82177E3C;
} // Block from 82177E34h-82177E3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E3C);
		  /* 82177E3Ch */ case    0:  		/* nop */
		/* 82177E3Ch case    0:*/		cpu::op::nop();
		/* 82177E3Ch case    0:*/		return 0x82177E40;
	}
	return 0x82177E40;
} // Block from 82177E3Ch-82177E40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177E40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E40);
		  /* 82177E40h */ case    0:  		/* mfspr R12, LR */
		/* 82177E40h case    0:*/		regs.R12 = regs.LR;
		/* 82177E40h case    0:*/		return 0x82177E44;
		  /* 82177E44h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82177E44h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177E44h case    1:*/		return 0x82177E48;
		  /* 82177E48h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82177E48h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177E48h case    2:*/		return 0x82177E4C;
		  /* 82177E4Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82177E4Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82177E4Ch case    3:*/		return 0x82177E50;
		  /* 82177E50h */ case    4:  		/* mr R31, R3 */
		/* 82177E50h case    4:*/		regs.R31 = regs.R3;
		/* 82177E50h case    4:*/		return 0x82177E54;
		  /* 82177E54h */ case    5:  		/* bl -116 */
		/* 82177E54h case    5:*/		regs.LR = 0x82177E58; return 0x82177DE0;
		/* 82177E54h case    5:*/		return 0x82177E58;
		  /* 82177E58h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82177E58h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82177E58h case    6:*/		return 0x82177E5C;
		  /* 82177E5Ch */ case    7:  		/* bc 4, CR0_EQ, 68 */
		/* 82177E5Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x82177EA0;  }
		/* 82177E5Ch case    7:*/		return 0x82177E60;
		  /* 82177E60h */ case    8:  		/* lwz R11, <#[R31 + 8]> */
		/* 82177E60h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82177E60h case    8:*/		return 0x82177E64;
		  /* 82177E64h */ case    9:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82177E64h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82177E64h case    9:*/		return 0x82177E68;
		  /* 82177E68h */ case   10:  		/* cmplwi CR6, R11, 25 */
		/* 82177E68h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000019);
		/* 82177E68h case   10:*/		return 0x82177E6C;
		  /* 82177E6Ch */ case   11:  		/* bc 12, CR6_LT, 12 */
		/* 82177E6Ch case   11:*/		if ( regs.CR[6].lt ) { return 0x82177E78;  }
		/* 82177E6Ch case   11:*/		return 0x82177E70;
		  /* 82177E70h */ case   12:  		/* cmplwi CR6, R11, 28 */
		/* 82177E70h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001C);
		/* 82177E70h case   12:*/		return 0x82177E74;
		  /* 82177E74h */ case   13:  		/* bc 4, CR6_GT, 20 */
		/* 82177E74h case   13:*/		if ( !regs.CR[6].gt ) { return 0x82177E88;  }
		/* 82177E74h case   13:*/		return 0x82177E78;
	}
	return 0x82177E78;
} // Block from 82177E40h-82177E78h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82177E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E78);
		  /* 82177E78h */ case    0:  		/* cmplwi CR6, R11, 67 */
		/* 82177E78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000043);
		/* 82177E78h case    0:*/		return 0x82177E7C;
		  /* 82177E7Ch */ case    1:  		/* bc 12, CR6_LT, 20 */
		/* 82177E7Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x82177E90;  }
		/* 82177E7Ch case    1:*/		return 0x82177E80;
		  /* 82177E80h */ case    2:  		/* cmplwi CR6, R11, 71 */
		/* 82177E80h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000047);
		/* 82177E80h case    2:*/		return 0x82177E84;
		  /* 82177E84h */ case    3:  		/* bc 12, CR6_GT, 12 */
		/* 82177E84h case    3:*/		if ( regs.CR[6].gt ) { return 0x82177E90;  }
		/* 82177E84h case    3:*/		return 0x82177E88;
	}
	return 0x82177E88;
} // Block from 82177E78h-82177E88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82177E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E88);
		  /* 82177E88h */ case    0:  		/* li R11, 1 */
		/* 82177E88h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82177E88h case    0:*/		return 0x82177E8C;
		  /* 82177E8Ch */ case    1:  		/* b 8 */
		/* 82177E8Ch case    1:*/		return 0x82177E94;
		/* 82177E8Ch case    1:*/		return 0x82177E90;
	}
	return 0x82177E90;
} // Block from 82177E88h-82177E90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82177E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E90);
		  /* 82177E90h */ case    0:  		/* li R11, 0 */
		/* 82177E90h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82177E90h case    0:*/		return 0x82177E94;
	}
	return 0x82177E94;
} // Block from 82177E90h-82177E94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177E94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177E94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177E94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177E94);
		  /* 82177E94h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82177E94h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82177E94h case    0:*/		return 0x82177E98;
		  /* 82177E98h */ case    1:  		/* li R11, 0 */
		/* 82177E98h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82177E98h case    1:*/		return 0x82177E9C;
		  /* 82177E9Ch */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 82177E9Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82177EA4;  }
		/* 82177E9Ch case    2:*/		return 0x82177EA0;
	}
	return 0x82177EA0;
} // Block from 82177E94h-82177EA0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82177EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177EA0);
		  /* 82177EA0h */ case    0:  		/* li R11, 1 */
		/* 82177EA0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82177EA0h case    0:*/		return 0x82177EA4;
	}
	return 0x82177EA4;
} // Block from 82177EA0h-82177EA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177EA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177EA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177EA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177EA4);
		  /* 82177EA4h */ case    0:  		/* rlwinm R3, R11, 0, 24, 31 */
		/* 82177EA4h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R3,regs.R11);
		/* 82177EA4h case    0:*/		return 0x82177EA8;
		  /* 82177EA8h */ case    1:  		/* addi R1, R1, 96 */
		/* 82177EA8h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82177EA8h case    1:*/		return 0x82177EAC;
		  /* 82177EACh */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82177EACh case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177EACh case    2:*/		return 0x82177EB0;
		  /* 82177EB0h */ case    3:  		/* mtspr LR, R12 */
		/* 82177EB0h case    3:*/		regs.LR = regs.R12;
		/* 82177EB0h case    3:*/		return 0x82177EB4;
		  /* 82177EB4h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82177EB4h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177EB4h case    4:*/		return 0x82177EB8;
		  /* 82177EB8h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82177EB8h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177EB8h case    5:*/		return 0x82177EBC;
	}
	return 0x82177EBC;
} // Block from 82177EA4h-82177EBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 82177EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177EBC);
		  /* 82177EBCh */ case    0:  		/* nop */
		/* 82177EBCh case    0:*/		cpu::op::nop();
		/* 82177EBCh case    0:*/		return 0x82177EC0;
	}
	return 0x82177EC0;
} // Block from 82177EBCh-82177EC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177EC0);
		  /* 82177EC0h */ case    0:  		/* mfspr R12, LR */
		/* 82177EC0h case    0:*/		regs.R12 = regs.LR;
		/* 82177EC0h case    0:*/		return 0x82177EC4;
		  /* 82177EC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82177EC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177EC4h case    1:*/		return 0x82177EC8;
		  /* 82177EC8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82177EC8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177EC8h case    2:*/		return 0x82177ECC;
		  /* 82177ECCh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82177ECCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82177ECCh case    3:*/		return 0x82177ED0;
		  /* 82177ED0h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 82177ED0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82177ED0h case    4:*/		return 0x82177ED4;
		  /* 82177ED4h */ case    5:  		/* mr R31, R3 */
		/* 82177ED4h case    5:*/		regs.R31 = regs.R3;
		/* 82177ED4h case    5:*/		return 0x82177ED8;
		  /* 82177ED8h */ case    6:  		/* mr R3, R4 */
		/* 82177ED8h case    6:*/		regs.R3 = regs.R4;
		/* 82177ED8h case    6:*/		return 0x82177EDC;
		  /* 82177EDCh */ case    7:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82177EDCh case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82177EDCh case    7:*/		return 0x82177EE0;
		  /* 82177EE0h */ case    8:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82177EE0h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82177EE0h case    8:*/		return 0x82177EE4;
		  /* 82177EE4h */ case    9:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82177EE4h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82177EE4h case    9:*/		return 0x82177EE8;
		  /* 82177EE8h */ case   10:  		/* bl -80568 */
		/* 82177EE8h case   10:*/		regs.LR = 0x82177EEC; return 0x82164430;
		/* 82177EE8h case   10:*/		return 0x82177EEC;
		  /* 82177EECh */ case   11:  		/* addi R11, R31, -8 */
		/* 82177EECh case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF8);
		/* 82177EECh case   11:*/		return 0x82177EF0;
		  /* 82177EF0h */ case   12:  		/* add R3, R3, R11 */
		/* 82177EF0h case   12:*/		cpu::op::add<0>(regs,&regs.R3,regs.R3,regs.R11);
		/* 82177EF0h case   12:*/		return 0x82177EF4;
		  /* 82177EF4h */ case   13:  		/* addi R1, R1, 96 */
		/* 82177EF4h case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82177EF4h case   13:*/		return 0x82177EF8;
		  /* 82177EF8h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 82177EF8h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177EF8h case   14:*/		return 0x82177EFC;
		  /* 82177EFCh */ case   15:  		/* mtspr LR, R12 */
		/* 82177EFCh case   15:*/		regs.LR = regs.R12;
		/* 82177EFCh case   15:*/		return 0x82177F00;
		  /* 82177F00h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 82177F00h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177F00h case   16:*/		return 0x82177F04;
		  /* 82177F04h */ case   17:  		/* bclr 20, CR0_LT */
		/* 82177F04h case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177F04h case   17:*/		return 0x82177F08;
	}
	return 0x82177F08;
} // Block from 82177EC0h-82177F08h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82177F08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177F08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177F08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177F08);
		  /* 82177F08h */ case    0:  		/* mfspr R12, LR */
		/* 82177F08h case    0:*/		regs.R12 = regs.LR;
		/* 82177F08h case    0:*/		return 0x82177F0C;
		  /* 82177F0Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82177F0Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177F0Ch case    1:*/		return 0x82177F10;
		  /* 82177F10h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82177F10h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177F10h case    2:*/		return 0x82177F14;
		  /* 82177F14h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82177F14h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82177F14h case    3:*/		return 0x82177F18;
		  /* 82177F18h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 82177F18h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82177F18h case    4:*/		return 0x82177F1C;
		  /* 82177F1Ch */ case    5:  		/* mr R31, R3 */
		/* 82177F1Ch case    5:*/		regs.R31 = regs.R3;
		/* 82177F1Ch case    5:*/		return 0x82177F20;
		  /* 82177F20h */ case    6:  		/* mr R3, R4 */
		/* 82177F20h case    6:*/		regs.R3 = regs.R4;
		/* 82177F20h case    6:*/		return 0x82177F24;
		  /* 82177F24h */ case    7:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82177F24h case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82177F24h case    7:*/		return 0x82177F28;
		  /* 82177F28h */ case    8:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82177F28h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82177F28h case    8:*/		return 0x82177F2C;
		  /* 82177F2Ch */ case    9:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82177F2Ch case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82177F2Ch case    9:*/		return 0x82177F30;
		  /* 82177F30h */ case   10:  		/* bl -80640 */
		/* 82177F30h case   10:*/		regs.LR = 0x82177F34; return 0x82164430;
		/* 82177F30h case   10:*/		return 0x82177F34;
		  /* 82177F34h */ case   11:  		/* addi R11, R31, -8 */
		/* 82177F34h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF8);
		/* 82177F34h case   11:*/		return 0x82177F38;
		  /* 82177F38h */ case   12:  		/* lwzx R11, <#[R3 + R11]> */
		/* 82177F38h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 82177F38h case   12:*/		return 0x82177F3C;
		  /* 82177F3Ch */ case   13:  		/* rlwinm R3, R11, 0, 17, 31 */
		/* 82177F3Ch case   13:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R3,regs.R11);
		/* 82177F3Ch case   13:*/		return 0x82177F40;
		  /* 82177F40h */ case   14:  		/* addi R1, R1, 96 */
		/* 82177F40h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82177F40h case   14:*/		return 0x82177F44;
		  /* 82177F44h */ case   15:  		/* lwz R12, <#[R1 - 8]> */
		/* 82177F44h case   15:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177F44h case   15:*/		return 0x82177F48;
		  /* 82177F48h */ case   16:  		/* mtspr LR, R12 */
		/* 82177F48h case   16:*/		regs.LR = regs.R12;
		/* 82177F48h case   16:*/		return 0x82177F4C;
		  /* 82177F4Ch */ case   17:  		/* ld R31, <#[R1 - 16]> */
		/* 82177F4Ch case   17:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177F4Ch case   17:*/		return 0x82177F50;
		  /* 82177F50h */ case   18:  		/* bclr 20, CR0_LT */
		/* 82177F50h case   18:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177F50h case   18:*/		return 0x82177F54;
	}
	return 0x82177F54;
} // Block from 82177F08h-82177F54h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82177F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177F54);
		  /* 82177F54h */ case    0:  		/* nop */
		/* 82177F54h case    0:*/		cpu::op::nop();
		/* 82177F54h case    0:*/		return 0x82177F58;
	}
	return 0x82177F58;
} // Block from 82177F54h-82177F58h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177F58);
		  /* 82177F58h */ case    0:  		/* mfspr R12, LR */
		/* 82177F58h case    0:*/		regs.R12 = regs.LR;
		/* 82177F58h case    0:*/		return 0x82177F5C;
		  /* 82177F5Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82177F5Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177F5Ch case    1:*/		return 0x82177F60;
		  /* 82177F60h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82177F60h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177F60h case    2:*/		return 0x82177F64;
		  /* 82177F64h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82177F64h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82177F64h case    3:*/		return 0x82177F68;
		  /* 82177F68h */ case    4:  		/* lwz R11, <#[R3 + 8]> */
		/* 82177F68h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82177F68h case    4:*/		return 0x82177F6C;
		  /* 82177F6Ch */ case    5:  		/* mr R31, R3 */
		/* 82177F6Ch case    5:*/		regs.R31 = regs.R3;
		/* 82177F6Ch case    5:*/		return 0x82177F70;
		  /* 82177F70h */ case    6:  		/* mr R3, R4 */
		/* 82177F70h case    6:*/		regs.R3 = regs.R4;
		/* 82177F70h case    6:*/		return 0x82177F74;
		  /* 82177F74h */ case    7:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82177F74h case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82177F74h case    7:*/		return 0x82177F78;
		  /* 82177F78h */ case    8:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82177F78h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82177F78h case    8:*/		return 0x82177F7C;
		  /* 82177F7Ch */ case    9:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82177F7Ch case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82177F7Ch case    9:*/		return 0x82177F80;
		  /* 82177F80h */ case   10:  		/* bl -80720 */
		/* 82177F80h case   10:*/		regs.LR = 0x82177F84; return 0x82164430;
		/* 82177F80h case   10:*/		return 0x82177F84;
		  /* 82177F84h */ case   11:  		/* addi R11, R31, -24 */
		/* 82177F84h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFE8);
		/* 82177F84h case   11:*/		return 0x82177F88;
		  /* 82177F88h */ case   12:  		/* add R3, R3, R11 */
		/* 82177F88h case   12:*/		cpu::op::add<0>(regs,&regs.R3,regs.R3,regs.R11);
		/* 82177F88h case   12:*/		return 0x82177F8C;
		  /* 82177F8Ch */ case   13:  		/* addi R1, R1, 96 */
		/* 82177F8Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82177F8Ch case   13:*/		return 0x82177F90;
		  /* 82177F90h */ case   14:  		/* lwz R12, <#[R1 - 8]> */
		/* 82177F90h case   14:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82177F90h case   14:*/		return 0x82177F94;
		  /* 82177F94h */ case   15:  		/* mtspr LR, R12 */
		/* 82177F94h case   15:*/		regs.LR = regs.R12;
		/* 82177F94h case   15:*/		return 0x82177F98;
		  /* 82177F98h */ case   16:  		/* ld R31, <#[R1 - 16]> */
		/* 82177F98h case   16:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82177F98h case   16:*/		return 0x82177F9C;
		  /* 82177F9Ch */ case   17:  		/* bclr 20, CR0_LT */
		/* 82177F9Ch case   17:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177F9Ch case   17:*/		return 0x82177FA0;
	}
	return 0x82177FA0;
} // Block from 82177F58h-82177FA0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82177FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177FA0);
		  /* 82177FA0h */ case    0:  		/* lwz R8, <#[R3 + 4]> */
		/* 82177FA0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000004) );
		/* 82177FA0h case    0:*/		return 0x82177FA4;
		  /* 82177FA4h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 82177FA4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82177FA4h case    1:*/		return 0x82177FA8;
		  /* 82177FA8h */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 82177FA8h case    2:*/		if ( regs.CR[6].eq ) { return 0x82177FF8;  }
		/* 82177FA8h case    2:*/		return 0x82177FAC;
		  /* 82177FACh */ case    3:  		/* lwz R11, <#[R8 + 56]> */
		/* 82177FACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000038) );
		/* 82177FACh case    3:*/		return 0x82177FB0;
		  /* 82177FB0h */ case    4:  		/* mr R10, R8 */
		/* 82177FB0h case    4:*/		regs.R10 = regs.R8;
		/* 82177FB0h case    4:*/		return 0x82177FB4;
		  /* 82177FB4h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 82177FB4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177FB4h case    5:*/		return 0x82177FB8;
		  /* 82177FB8h */ case    6:  		/* bc 4, CR6_EQ, 60 */
		/* 82177FB8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82177FF4;  }
		/* 82177FB8h case    6:*/		return 0x82177FBC;
		  /* 82177FBCh */ case    7:  		/* lwz R9, <#[R3]> */
		/* 82177FBCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82177FBCh case    7:*/		return 0x82177FC0;
		  /* 82177FC0h */ case    8:  		/* cmplw CR6, R10, R9 */
		/* 82177FC0h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 82177FC0h case    8:*/		return 0x82177FC4;
		  /* 82177FC4h */ case    9:  		/* bc 12, CR6_EQ, 44 */
		/* 82177FC4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82177FF0;  }
		/* 82177FC4h case    9:*/		return 0x82177FC8;
		  /* 82177FC8h */ case   10:  		/* lwz R11, <#[R10 + 60]> */
		/* 82177FC8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000003C) );
		/* 82177FC8h case   10:*/		return 0x82177FCC;
		  /* 82177FCCh */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 82177FCCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177FCCh case   11:*/		return 0x82177FD0;
		  /* 82177FD0h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 82177FD0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82177FDC;  }
		/* 82177FD0h case   12:*/		return 0x82177FD4;
		  /* 82177FD4h */ case   13:  		/* lwz R10, <#[R10 + 52]> */
		/* 82177FD4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000034) );
		/* 82177FD4h case   13:*/		return 0x82177FD8;
		  /* 82177FD8h */ case   14:  		/* b -24 */
		/* 82177FD8h case   14:*/		return 0x82177FC0;
		/* 82177FD8h case   14:*/		return 0x82177FDC;
	}
	return 0x82177FDC;
} // Block from 82177FA0h-82177FDCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 82177FDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177FDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177FDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177FDC);
		  /* 82177FDCh */ case    0:  		/* mr R10, R11 */
		/* 82177FDCh case    0:*/		regs.R10 = regs.R11;
		/* 82177FDCh case    0:*/		return 0x82177FE0;
		  /* 82177FE0h */ case    1:  		/* lwz R11, <#[R11 + 56]> */
		/* 82177FE0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000038) );
		/* 82177FE0h case    1:*/		return 0x82177FE4;
		  /* 82177FE4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82177FE4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82177FE4h case    2:*/		return 0x82177FE8;
		  /* 82177FE8h */ case    3:  		/* bc 12, CR6_EQ, -40 */
		/* 82177FE8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82177FC0;  }
		/* 82177FE8h case    3:*/		return 0x82177FEC;
		  /* 82177FECh */ case    4:  		/* b 8 */
		/* 82177FECh case    4:*/		return 0x82177FF4;
		/* 82177FECh case    4:*/		return 0x82177FF0;
	}
	return 0x82177FF0;
} // Block from 82177FDCh-82177FF0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82177FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177FF0);
		  /* 82177FF0h */ case    0:  		/* li R11, 0 */
		/* 82177FF0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82177FF0h case    0:*/		return 0x82177FF4;
	}
	return 0x82177FF4;
} // Block from 82177FF0h-82177FF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177FF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177FF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177FF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177FF4);
		  /* 82177FF4h */ case    0:  		/* stw R11, <#[R3 + 4]> */
		/* 82177FF4h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 82177FF4h case    0:*/		return 0x82177FF8;
	}
	return 0x82177FF8;
} // Block from 82177FF4h-82177FF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82177FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82177FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82177FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82177FF8);
		  /* 82177FF8h */ case    0:  		/* mr R3, R8 */
		/* 82177FF8h case    0:*/		regs.R3 = regs.R8;
		/* 82177FF8h case    0:*/		return 0x82177FFC;
		  /* 82177FFCh */ case    1:  		/* bclr 20, CR0_LT */
		/* 82177FFCh case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82177FFCh case    1:*/		return 0x82178000;
	}
	return 0x82178000;
} // Block from 82177FF8h-82178000h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178000);
		  /* 82178000h */ case    0:  		/* mfspr R12, LR */
		/* 82178000h case    0:*/		regs.R12 = regs.LR;
		/* 82178000h case    0:*/		return 0x82178004;
		  /* 82178004h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82178004h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82178004h case    1:*/		return 0x82178008;
		  /* 82178008h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82178008h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82178008h case    2:*/		return 0x8217800C;
		  /* 8217800Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8217800Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8217800Ch case    3:*/		return 0x82178010;
		  /* 82178010h */ case    4:  		/* mr R31, R4 */
		/* 82178010h case    4:*/		regs.R31 = regs.R4;
		/* 82178010h case    4:*/		return 0x82178014;
		  /* 82178014h */ case    5:  		/* li R5, 26 */
		/* 82178014h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1A);
		/* 82178014h case    5:*/		return 0x82178018;
		  /* 82178018h */ case    6:  		/* li R4, 20 */
		/* 82178018h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 82178018h case    6:*/		return 0x8217801C;
		  /* 8217801Ch */ case    7:  		/* bl -46196 */
		/* 8217801Ch case    7:*/		regs.LR = 0x82178020; return 0x8216CBA8;
		/* 8217801Ch case    7:*/		return 0x82178020;
		  /* 82178020h */ case    8:  		/* lis R11, 4 */
		/* 82178020h case    8:*/		cpu::op::lis<0>(regs,&regs.R11,0x4);
		/* 82178020h case    8:*/		return 0x82178024;
		  /* 82178024h */ case    9:  		/* lwz R10, <#[R3]> */
		/* 82178024h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82178024h case    9:*/		return 0x82178028;
		  /* 82178028h */ case   10:  		/* ori R11, R11, 57 */
		/* 82178028h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x39);
		/* 82178028h case   10:*/		return 0x8217802C;
		  /* 8217802Ch */ case   11:  		/* stw R31, <#[R3 + 12]> */
		/* 8217802Ch case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217802Ch case   11:*/		return 0x82178030;
		  /* 82178030h */ case   12:  		/* rlwimi R10, R11, 7, 19, 26 */
		/* 82178030h case   12:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R10,regs.R11);
		/* 82178030h case   12:*/		return 0x82178034;
		  /* 82178034h */ case   13:  		/* rlwimi R10, R11, 7, 4, 6 */
		/* 82178034h case   13:*/		cpu::op::rlwimi<0,7,4,6>(regs,&regs.R10,regs.R11);
		/* 82178034h case   13:*/		return 0x82178038;
		  /* 82178038h */ case   14:  		/* stw R10, <#[R3]> */
		/* 82178038h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82178038h case   14:*/		return 0x8217803C;
		  /* 8217803Ch */ case   15:  		/* lwz R11, <#[R31 + 4]> */
		/* 8217803Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8217803Ch case   15:*/		return 0x82178040;
		  /* 82178040h */ case   16:  		/* stw R11, <#[R3 + 8]> */
		/* 82178040h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82178040h case   16:*/		return 0x82178044;
		  /* 82178044h */ case   17:  		/* stw R3, <#[R31 + 4]> */
		/* 82178044h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 82178044h case   17:*/		return 0x82178048;
		  /* 82178048h */ case   18:  		/* lwz R10, <#[R31 + 8]> */
		/* 82178048h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82178048h case   18:*/		return 0x8217804C;
		  /* 8217804Ch */ case   19:  		/* lwz R9, <#[R3]> */
		/* 8217804Ch case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8217804Ch case   19:*/		return 0x82178050;
		  /* 82178050h */ case   20:  		/* rlwimi R9, R10, 11, 4, 6 */
		/* 82178050h case   20:*/		cpu::op::rlwimi<0,11,4,6>(regs,&regs.R9,regs.R10);
		/* 82178050h case   20:*/		return 0x82178054;
		  /* 82178054h */ case   21:  		/* stw R9, <#[R3]> */
		/* 82178054h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 82178054h case   21:*/		return 0x82178058;
		  /* 82178058h */ case   22:  		/* b 20 */
		/* 82178058h case   22:*/		return 0x8217806C;
		/* 82178058h case   22:*/		return 0x8217805C;
		  /* 8217805Ch */ case   23:  		/* lwz R10, <#[R11]> */
		/* 8217805Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217805Ch case   23:*/		return 0x82178060;
		  /* 82178060h */ case   24:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 82178060h case   24:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 82178060h case   24:*/		return 0x82178064;
		  /* 82178064h */ case   25:  		/* bc 4, CR0_EQ, 20 */
		/* 82178064h case   25:*/		if ( !regs.CR[0].eq ) { return 0x82178078;  }
		/* 82178064h case   25:*/		return 0x82178068;
		  /* 82178068h */ case   26:  		/* lwz R11, <#[R11 + 8]> */
		/* 82178068h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82178068h case   26:*/		return 0x8217806C;
	}
	return 0x8217806C;
} // Block from 82178000h-8217806Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 8217806Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217806C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217806C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217806C);
		  /* 8217806Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8217806Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217806Ch case    0:*/		return 0x82178070;
		  /* 82178070h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 82178070h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217805C;  }
		/* 82178070h case    1:*/		return 0x82178074;
		  /* 82178074h */ case    2:  		/* b 28 */
		/* 82178074h case    2:*/		return 0x82178090;
		/* 82178074h case    2:*/		return 0x82178078;
	}
	return 0x82178078;
} // Block from 8217806Ch-82178078h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82178078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178078);
		  /* 82178078h */ case    0:  		/* rlwinm. R11, R10, 2, 31, 31 */
		/* 82178078h case    0:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R11,regs.R10);
		/* 82178078h case    0:*/		return 0x8217807C;
		  /* 8217807Ch */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 8217807Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x82178090;  }
		/* 8217807Ch case    1:*/		return 0x82178080;
		  /* 82178080h */ case    2:  		/* lwz R11, <#[R3]> */
		/* 82178080h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82178080h case    2:*/		return 0x82178084;
		  /* 82178084h */ case    3:  		/* rlwimi R10, R11, 0, 19, 6 */
		/* 82178084h case    3:*/		cpu::op::rlwimi<0,0,19,6>(regs,&regs.R10,regs.R11);
		/* 82178084h case    3:*/		return 0x82178088;
		  /* 82178088h */ case    4:  		/* oris R11, R10, 16384 */
		/* 82178088h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R10,0x4000);
		/* 82178088h case    4:*/		return 0x8217808C;
		  /* 8217808Ch */ case    5:  		/* stw R11, <#[R3]> */
		/* 8217808Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217808Ch case    5:*/		return 0x82178090;
	}
	return 0x82178090;
} // Block from 82178078h-82178090h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82178090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178090);
		  /* 82178090h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82178090h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82178090h case    0:*/		return 0x82178094;
		  /* 82178094h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82178094h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82178094h case    1:*/		return 0x82178098;
		  /* 82178098h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 82178098h case    2:*/		if ( regs.CR[0].eq ) { return 0x821780AC;  }
		/* 82178098h case    2:*/		return 0x8217809C;
		  /* 8217809Ch */ case    3:  		/* lwz R11, <#[R3]> */
		/* 8217809Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217809Ch case    3:*/		return 0x821780A0;
		  /* 821780A0h */ case    4:  		/* li R10, 1 */
		/* 821780A0h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821780A0h case    4:*/		return 0x821780A4;
		  /* 821780A4h */ case    5:  		/* rlwimi R11, R10, 0, 27, 31 */
		/* 821780A4h case    5:*/		cpu::op::rlwimi<0,0,27,31>(regs,&regs.R11,regs.R10);
		/* 821780A4h case    5:*/		return 0x821780A8;
		  /* 821780A8h */ case    6:  		/* stw R11, <#[R3]> */
		/* 821780A8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821780A8h case    6:*/		return 0x821780AC;
	}
	return 0x821780AC;
} // Block from 82178090h-821780ACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821780ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821780AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821780AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821780AC);
		  /* 821780ACh */ case    0:  		/* addi R1, R1, 96 */
		/* 821780ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821780ACh case    0:*/		return 0x821780B0;
		  /* 821780B0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821780B0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821780B0h case    1:*/		return 0x821780B4;
		  /* 821780B4h */ case    2:  		/* mtspr LR, R12 */
		/* 821780B4h case    2:*/		regs.LR = regs.R12;
		/* 821780B4h case    2:*/		return 0x821780B8;
		  /* 821780B8h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 821780B8h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821780B8h case    3:*/		return 0x821780BC;
		  /* 821780BCh */ case    4:  		/* bclr 20, CR0_LT */
		/* 821780BCh case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821780BCh case    4:*/		return 0x821780C0;
	}
	return 0x821780C0;
} // Block from 821780ACh-821780C0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821780C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821780C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821780C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821780C0);
		  /* 821780C0h */ case    0:  		/* mfspr R12, LR */
		/* 821780C0h case    0:*/		regs.R12 = regs.LR;
		/* 821780C0h case    0:*/		return 0x821780C4;
		  /* 821780C4h */ case    1:  		/* bl -945772 */
		/* 821780C4h case    1:*/		regs.LR = 0x821780C8; return 0x82091258;
		/* 821780C4h case    1:*/		return 0x821780C8;
		  /* 821780C8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821780C8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821780C8h case    2:*/		return 0x821780CC;
		  /* 821780CCh */ case    3:  		/* mr R31, R5 */
		/* 821780CCh case    3:*/		regs.R31 = regs.R5;
		/* 821780CCh case    3:*/		return 0x821780D0;
		  /* 821780D0h */ case    4:  		/* mr R30, R6 */
		/* 821780D0h case    4:*/		regs.R30 = regs.R6;
		/* 821780D0h case    4:*/		return 0x821780D4;
		  /* 821780D4h */ case    5:  		/* mr R29, R7 */
		/* 821780D4h case    5:*/		regs.R29 = regs.R7;
		/* 821780D4h case    5:*/		return 0x821780D8;
		  /* 821780D8h */ case    6:  		/* bl -216 */
		/* 821780D8h case    6:*/		regs.LR = 0x821780DC; return 0x82178000;
		/* 821780D8h case    6:*/		return 0x821780DC;
		  /* 821780DCh */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821780DCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821780DCh case    7:*/		return 0x821780E0;
		  /* 821780E0h */ case    8:  		/* mr R4, R29 */
		/* 821780E0h case    8:*/		regs.R4 = regs.R29;
		/* 821780E0h case    8:*/		return 0x821780E4;
		  /* 821780E4h */ case    9:  		/* mr R28, R3 */
		/* 821780E4h case    9:*/		regs.R28 = regs.R3;
		/* 821780E4h case    9:*/		return 0x821780E8;
		  /* 821780E8h */ case   10:  		/* rlwimi R11, R31, 25, 4, 6 */
		/* 821780E8h case   10:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R31);
		/* 821780E8h case   10:*/		return 0x821780EC;
		  /* 821780ECh */ case   11:  		/* stw R11, <#[R3]> */
		/* 821780ECh case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821780ECh case   11:*/		return 0x821780F0;
		  /* 821780F0h */ case   12:  		/* bl -1584 */
		/* 821780F0h case   12:*/		regs.LR = 0x821780F4; return 0x82177AC0;
		/* 821780F0h case   12:*/		return 0x821780F4;
		  /* 821780F4h */ case   13:  		/* lwz R11, <#[R28]> */
		/* 821780F4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821780F4h case   13:*/		return 0x821780F8;
		  /* 821780F8h */ case   14:  		/* mr R3, R28 */
		/* 821780F8h case   14:*/		regs.R3 = regs.R28;
		/* 821780F8h case   14:*/		return 0x821780FC;
		  /* 821780FCh */ case   15:  		/* rlwimi R11, R30, 5, 19, 26 */
		/* 821780FCh case   15:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R30);
		/* 821780FCh case   15:*/		return 0x82178100;
		  /* 82178100h */ case   16:  		/* stw R11, <#[R28]> */
		/* 82178100h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 82178100h case   16:*/		return 0x82178104;
		  /* 82178104h */ case   17:  		/* addi R1, R1, 128 */
		/* 82178104h case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82178104h case   17:*/		return 0x82178108;
		  /* 82178108h */ case   18:  		/* b -945760 */
		/* 82178108h case   18:*/		return 0x820912A8;
		/* 82178108h case   18:*/		return 0x8217810C;
		  /* 8217810Ch */ case   19:  		/* nop */
		/* 8217810Ch case   19:*/		cpu::op::nop();
		/* 8217810Ch case   19:*/		return 0x82178110;
	}
	return 0x82178110;
} // Block from 821780C0h-82178110h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82178110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178110);
		  /* 82178110h */ case    0:  		/* mfspr R12, LR */
		/* 82178110h case    0:*/		regs.R12 = regs.LR;
		/* 82178110h case    0:*/		return 0x82178114;
		  /* 82178114h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82178114h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82178114h case    1:*/		return 0x82178118;
		  /* 82178118h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82178118h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82178118h case    2:*/		return 0x8217811C;
		  /* 8217811Ch */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 8217811Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 8217811Ch case    3:*/		return 0x82178120;
		  /* 82178120h */ case    4:  		/* mr R31, R5 */
		/* 82178120h case    4:*/		regs.R31 = regs.R5;
		/* 82178120h case    4:*/		return 0x82178124;
		  /* 82178124h */ case    5:  		/* bl -292 */
		/* 82178124h case    5:*/		regs.LR = 0x82178128; return 0x82178000;
		/* 82178124h case    5:*/		return 0x82178128;
		  /* 82178128h */ case    6:  		/* rlwinm R11, R31, 5, 22, 26 */
		/* 82178128h case    6:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R11,regs.R31);
		/* 82178128h case    6:*/		return 0x8217812C;
		  /* 8217812Ch */ case    7:  		/* lwz R10, <#[R3]> */
		/* 8217812Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8217812Ch case    7:*/		return 0x82178130;
		  /* 82178130h */ case    8:  		/* lis R12, -3073 */
		/* 82178130h case    8:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFF3FF);
		/* 82178130h case    8:*/		return 0x82178134;
		  /* 82178134h */ case    9:  		/* rlwinm R11, R11, 0, 25, 23 */
		/* 82178134h case    9:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R11,regs.R11);
		/* 82178134h case    9:*/		return 0x82178138;
		  /* 82178138h */ case   10:  		/* ori R12, R12, 64671 */
		/* 82178138h case   10:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFC9F);
		/* 82178138h case   10:*/		return 0x8217813C;
		  /* 8217813Ch */ case   11:  		/* oris R11, R11, 512 */
		/* 8217813Ch case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8217813Ch case   11:*/		return 0x82178140;
		  /* 82178140h */ case   12:  		/* and R10, R10, R12 */
		/* 82178140h case   12:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 82178140h case   12:*/		return 0x82178144;
		  /* 82178144h */ case   13:  		/* ori R11, R11, 7296 */
		/* 82178144h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1C80);
		/* 82178144h case   13:*/		return 0x82178148;
		  /* 82178148h */ case   14:  		/* or R11, R11, R10 */
		/* 82178148h case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82178148h case   14:*/		return 0x8217814C;
		  /* 8217814Ch */ case   15:  		/* stw R11, <#[R3]> */
		/* 8217814Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217814Ch case   15:*/		return 0x82178150;
		  /* 82178150h */ case   16:  		/* addi R1, R1, 96 */
		/* 82178150h case   16:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82178150h case   16:*/		return 0x82178154;
		  /* 82178154h */ case   17:  		/* lwz R12, <#[R1 - 8]> */
		/* 82178154h case   17:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82178154h case   17:*/		return 0x82178158;
		  /* 82178158h */ case   18:  		/* mtspr LR, R12 */
		/* 82178158h case   18:*/		regs.LR = regs.R12;
		/* 82178158h case   18:*/		return 0x8217815C;
		  /* 8217815Ch */ case   19:  		/* ld R31, <#[R1 - 16]> */
		/* 8217815Ch case   19:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8217815Ch case   19:*/		return 0x82178160;
		  /* 82178160h */ case   20:  		/* bclr 20, CR0_LT */
		/* 82178160h case   20:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82178160h case   20:*/		return 0x82178164;
	}
	return 0x82178164;
} // Block from 82178110h-82178164h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82178164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178164);
		  /* 82178164h */ case    0:  		/* nop */
		/* 82178164h case    0:*/		cpu::op::nop();
		/* 82178164h case    0:*/		return 0x82178168;
	}
	return 0x82178168;
} // Block from 82178164h-82178168h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178168);
		  /* 82178168h */ case    0:  		/* mfspr R12, LR */
		/* 82178168h case    0:*/		regs.R12 = regs.LR;
		/* 82178168h case    0:*/		return 0x8217816C;
		  /* 8217816Ch */ case    1:  		/* bl -945936 */
		/* 8217816Ch case    1:*/		regs.LR = 0x82178170; return 0x8209125C;
		/* 8217816Ch case    1:*/		return 0x82178170;
		  /* 82178170h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82178170h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82178170h case    2:*/		return 0x82178174;
		  /* 82178174h */ case    3:  		/* mr R31, R5 */
		/* 82178174h case    3:*/		regs.R31 = regs.R5;
		/* 82178174h case    3:*/		return 0x82178178;
		  /* 82178178h */ case    4:  		/* mr R30, R6 */
		/* 82178178h case    4:*/		regs.R30 = regs.R6;
		/* 82178178h case    4:*/		return 0x8217817C;
		  /* 8217817Ch */ case    5:  		/* bl -380 */
		/* 8217817Ch case    5:*/		regs.LR = 0x82178180; return 0x82178000;
		/* 8217817Ch case    5:*/		return 0x82178180;
		  /* 82178180h */ case    6:  		/* lwz R10, <#[R3]> */
		/* 82178180h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82178180h case    6:*/		return 0x82178184;
		  /* 82178184h */ case    7:  		/* li R11, 1 */
		/* 82178184h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82178184h case    7:*/		return 0x82178188;
		  /* 82178188h */ case    8:  		/* mr R4, R30 */
		/* 82178188h case    8:*/		regs.R4 = regs.R30;
		/* 82178188h case    8:*/		return 0x8217818C;
		  /* 8217818Ch */ case    9:  		/* rlwimi R10, R11, 25, 4, 6 */
		/* 8217818Ch case    9:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R11);
		/* 8217818Ch case    9:*/		return 0x82178190;
		  /* 82178190h */ case   10:  		/* mr R29, R3 */
		/* 82178190h case   10:*/		regs.R29 = regs.R3;
		/* 82178190h case   10:*/		return 0x82178194;
		  /* 82178194h */ case   11:  		/* stw R10, <#[R3]> */
		/* 82178194h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82178194h case   11:*/		return 0x82178198;
		  /* 82178198h */ case   12:  		/* bl -1752 */
		/* 82178198h case   12:*/		regs.LR = 0x8217819C; return 0x82177AC0;
		/* 82178198h case   12:*/		return 0x8217819C;
		  /* 8217819Ch */ case   13:  		/* lwz R10, <#[R29]> */
		/* 8217819Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8217819Ch case   13:*/		return 0x821781A0;
		  /* 821781A0h */ case   14:  		/* rlwinm R11, R31, 5, 22, 26 */
		/* 821781A0h case   14:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R11,regs.R31);
		/* 821781A0h case   14:*/		return 0x821781A4;
		  /* 821781A4h */ case   15:  		/* rlwinm R10, R10, 0, 27, 24 */
		/* 821781A4h case   15:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R10,regs.R10);
		/* 821781A4h case   15:*/		return 0x821781A8;
		  /* 821781A8h */ case   16:  		/* rlwinm R11, R11, 0, 25, 23 */
		/* 821781A8h case   16:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R11,regs.R11);
		/* 821781A8h case   16:*/		return 0x821781AC;
		  /* 821781ACh */ case   17:  		/* rlwinm R10, R10, 0, 24, 21 */
		/* 821781ACh case   17:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R10,regs.R10);
		/* 821781ACh case   17:*/		return 0x821781B0;
		  /* 821781B0h */ case   18:  		/* ori R11, R11, 7296 */
		/* 821781B0h case   18:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1C80);
		/* 821781B0h case   18:*/		return 0x821781B4;
		  /* 821781B4h */ case   19:  		/* mr R3, R29 */
		/* 821781B4h case   19:*/		regs.R3 = regs.R29;
		/* 821781B4h case   19:*/		return 0x821781B8;
		  /* 821781B8h */ case   20:  		/* or R11, R11, R10 */
		/* 821781B8h case   20:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821781B8h case   20:*/		return 0x821781BC;
		  /* 821781BCh */ case   21:  		/* stw R11, <#[R29]> */
		/* 821781BCh case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821781BCh case   21:*/		return 0x821781C0;
		  /* 821781C0h */ case   22:  		/* addi R1, R1, 112 */
		/* 821781C0h case   22:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821781C0h case   22:*/		return 0x821781C4;
		  /* 821781C4h */ case   23:  		/* b -945944 */
		/* 821781C4h case   23:*/		return 0x820912AC;
		/* 821781C4h case   23:*/		return 0x821781C8;
	}
	return 0x821781C8;
} // Block from 82178168h-821781C8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821781C8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821781C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821781C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821781C8);
		  /* 821781C8h */ case    0:  		/* mfspr R12, LR */
		/* 821781C8h case    0:*/		regs.R12 = regs.LR;
		/* 821781C8h case    0:*/		return 0x821781CC;
		  /* 821781CCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821781CCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821781CCh case    1:*/		return 0x821781D0;
		  /* 821781D0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 821781D0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821781D0h case    2:*/		return 0x821781D4;
		  /* 821781D4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 821781D4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821781D4h case    3:*/		return 0x821781D8;
		  /* 821781D8h */ case    4:  		/* lwz R11, <#[R4 + 16]> */
		/* 821781D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 821781D8h case    4:*/		return 0x821781DC;
		  /* 821781DCh */ case    5:  		/* mr R31, R3 */
		/* 821781DCh case    5:*/		regs.R31 = regs.R3;
		/* 821781DCh case    5:*/		return 0x821781E0;
		  /* 821781E0h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821781E0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821781E0h case    6:*/		return 0x821781E4;
		  /* 821781E4h */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 821781E4h case    7:*/		if ( regs.CR[6].eq ) { return 0x82178200;  }
		/* 821781E4h case    7:*/		return 0x821781E8;
		  /* 821781E8h */ case    8:  		/* rlwinm R11, R4, 0, 0, 19 */
		/* 821781E8h case    8:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R4);
		/* 821781E8h case    8:*/		return 0x821781EC;
		  /* 821781ECh */ case    9:  		/* lwz R5, <#[R4 + 12]> */
		/* 821781ECh case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821781ECh case    9:*/		return 0x821781F0;
		  /* 821781F0h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 821781F0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821781F0h case   10:*/		return 0x821781F4;
		  /* 821781F4h */ case   11:  		/* lwz R3, <#[R11 + 148]> */
		/* 821781F4h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821781F4h case   11:*/		return 0x821781F8;
		  /* 821781F8h */ case   12:  		/* bl -28936 */
		/* 821781F8h case   12:*/		regs.LR = 0x821781FC; return 0x821710F0;
		/* 821781F8h case   12:*/		return 0x821781FC;
		  /* 821781FCh */ case   13:  		/* mr R4, R3 */
		/* 821781FCh case   13:*/		regs.R4 = regs.R3;
		/* 821781FCh case   13:*/		return 0x82178200;
	}
	return 0x82178200;
} // Block from 821781C8h-82178200h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82178200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178200);
		  /* 82178200h */ case    0:  		/* stw R31, <#[R4 + 16]> */
		/* 82178200h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R4 + 0x00000010) );
		/* 82178200h case    0:*/		return 0x82178204;
		  /* 82178204h */ case    1:  		/* mr R3, R4 */
		/* 82178204h case    1:*/		regs.R3 = regs.R4;
		/* 82178204h case    1:*/		return 0x82178208;
		  /* 82178208h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 82178208h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 82178208h case    2:*/		return 0x8217820C;
		  /* 8217820Ch */ case    3:  		/* stw R11, <#[R4 + 4]> */
		/* 8217820Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8217820Ch case    3:*/		return 0x82178210;
		  /* 82178210h */ case    4:  		/* stw R4, <#[R31]> */
		/* 82178210h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 82178210h case    4:*/		return 0x82178214;
		  /* 82178214h */ case    5:  		/* addi R1, R1, 96 */
		/* 82178214h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82178214h case    5:*/		return 0x82178218;
		  /* 82178218h */ case    6:  		/* lwz R12, <#[R1 - 8]> */
		/* 82178218h case    6:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82178218h case    6:*/		return 0x8217821C;
		  /* 8217821Ch */ case    7:  		/* mtspr LR, R12 */
		/* 8217821Ch case    7:*/		regs.LR = regs.R12;
		/* 8217821Ch case    7:*/		return 0x82178220;
		  /* 82178220h */ case    8:  		/* ld R31, <#[R1 - 16]> */
		/* 82178220h case    8:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82178220h case    8:*/		return 0x82178224;
		  /* 82178224h */ case    9:  		/* bclr 20, CR0_LT */
		/* 82178224h case    9:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82178224h case    9:*/		return 0x82178228;
	}
	return 0x82178228;
} // Block from 82178200h-82178228h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82178228h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178228( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178228) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178228);
		  /* 82178228h */ case    0:  		/* mfspr R12, LR */
		/* 82178228h case    0:*/		regs.R12 = regs.LR;
		/* 82178228h case    0:*/		return 0x8217822C;
		  /* 8217822Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8217822Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8217822Ch case    1:*/		return 0x82178230;
		  /* 82178230h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82178230h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82178230h case    2:*/		return 0x82178234;
		  /* 82178234h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82178234h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82178234h case    3:*/		return 0x82178238;
		  /* 82178238h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82178238h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82178238h case    4:*/		return 0x8217823C;
		  /* 8217823Ch */ case    5:  		/* mr R31, R3 */
		/* 8217823Ch case    5:*/		regs.R31 = regs.R3;
		/* 8217823Ch case    5:*/		return 0x82178240;
		  /* 82178240h */ case    6:  		/* mr R30, R4 */
		/* 82178240h case    6:*/		regs.R30 = regs.R4;
		/* 82178240h case    6:*/		return 0x82178244;
		  /* 82178244h */ case    7:  		/* mr R3, R5 */
		/* 82178244h case    7:*/		regs.R3 = regs.R5;
		/* 82178244h case    7:*/		return 0x82178248;
		  /* 82178248h */ case    8:  		/* li R5, 26 */
		/* 82178248h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x1A);
		/* 82178248h case    8:*/		return 0x8217824C;
		  /* 8217824Ch */ case    9:  		/* li R4, 20 */
		/* 8217824Ch case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 8217824Ch case    9:*/		return 0x82178250;
		  /* 82178250h */ case   10:  		/* bl -46760 */
		/* 82178250h case   10:*/		regs.LR = 0x82178254; return 0x8216CBA8;
		/* 82178250h case   10:*/		return 0x82178254;
		  /* 82178254h */ case   11:  		/* mr R11, R3 */
		/* 82178254h case   11:*/		regs.R11 = regs.R3;
		/* 82178254h case   11:*/		return 0x82178258;
		  /* 82178258h */ case   12:  		/* mr R3, R31 */
		/* 82178258h case   12:*/		regs.R3 = regs.R31;
		/* 82178258h case   12:*/		return 0x8217825C;
		  /* 8217825Ch */ case   13:  		/* mr R4, R11 */
		/* 8217825Ch case   13:*/		regs.R4 = regs.R11;
		/* 8217825Ch case   13:*/		return 0x82178260;
		  /* 82178260h */ case   14:  		/* stw R30, <#[R11 + 12]> */
		/* 82178260h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 82178260h case   14:*/		return 0x82178264;
		  /* 82178264h */ case   15:  		/* lwz R10, <#[R30 + 4]> */
		/* 82178264h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82178264h case   15:*/		return 0x82178268;
		  /* 82178268h */ case   16:  		/* stw R10, <#[R11 + 8]> */
		/* 82178268h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82178268h case   16:*/		return 0x8217826C;
		  /* 8217826Ch */ case   17:  		/* stw R11, <#[R30 + 4]> */
		/* 8217826Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8217826Ch case   17:*/		return 0x82178270;
		  /* 82178270h */ case   18:  		/* bl -168 */
		/* 82178270h case   18:*/		regs.LR = 0x82178274; return 0x821781C8;
		/* 82178270h case   18:*/		return 0x82178274;
		  /* 82178274h */ case   19:  		/* addi R1, R1, 112 */
		/* 82178274h case   19:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82178274h case   19:*/		return 0x82178278;
		  /* 82178278h */ case   20:  		/* lwz R12, <#[R1 - 8]> */
		/* 82178278h case   20:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82178278h case   20:*/		return 0x8217827C;
		  /* 8217827Ch */ case   21:  		/* mtspr LR, R12 */
		/* 8217827Ch case   21:*/		regs.LR = regs.R12;
		/* 8217827Ch case   21:*/		return 0x82178280;
		  /* 82178280h */ case   22:  		/* ld R30, <#[R1 - 24]> */
		/* 82178280h case   22:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82178280h case   22:*/		return 0x82178284;
		  /* 82178284h */ case   23:  		/* ld R31, <#[R1 - 16]> */
		/* 82178284h case   23:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82178284h case   23:*/		return 0x82178288;
		  /* 82178288h */ case   24:  		/* bclr 20, CR0_LT */
		/* 82178288h case   24:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82178288h case   24:*/		return 0x8217828C;
	}
	return 0x8217828C;
} // Block from 82178228h-8217828Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 8217828Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217828C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217828C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217828C);
		  /* 8217828Ch */ case    0:  		/* nop */
		/* 8217828Ch case    0:*/		cpu::op::nop();
		/* 8217828Ch case    0:*/		return 0x82178290;
	}
	return 0x82178290;
} // Block from 8217828Ch-82178290h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178290h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178290( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178290) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178290);
		  /* 82178290h */ case    0:  		/* lwz R8, <#[R3]> */
		/* 82178290h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 82178290h case    0:*/		return 0x82178294;
		  /* 82178294h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 82178294h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82178294h case    1:*/		return 0x82178298;
		  /* 82178298h */ case    2:  		/* bc 12, CR6_EQ, 124 */
		/* 82178298h case    2:*/		if ( regs.CR[6].eq ) { return 0x82178314;  }
		/* 82178298h case    2:*/		return 0x8217829C;
		  /* 8217829Ch */ case    3:  		/* lwz R9, <#[R8]> */
		/* 8217829Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 8217829Ch case    3:*/		return 0x821782A0;
		  /* 821782A0h */ case    4:  		/* rlwinm. R10, R9, 2, 31, 31 */
		/* 821782A0h case    4:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R9);
		/* 821782A0h case    4:*/		return 0x821782A4;
		  /* 821782A4h */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 821782A4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821782B4;  }
		/* 821782A4h case    5:*/		return 0x821782A8;
		  /* 821782A8h */ case    6:  		/* rlwinm. R11, R9, 0, 4, 6 */
		/* 821782A8h case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R9);
		/* 821782A8h case    6:*/		return 0x821782AC;
		  /* 821782ACh */ case    7:  		/* li R11, 1 */
		/* 821782ACh case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821782ACh case    7:*/		return 0x821782B0;
		  /* 821782B0h */ case    8:  		/* bc 12, CR0_EQ, 8 */
		/* 821782B0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821782B8;  }
		/* 821782B0h case    8:*/		return 0x821782B4;
	}
	return 0x821782B4;
} // Block from 82178290h-821782B4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821782B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821782B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821782B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821782B4);
		  /* 821782B4h */ case    0:  		/* li R11, 0 */
		/* 821782B4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821782B4h case    0:*/		return 0x821782B8;
	}
	return 0x821782B8;
} // Block from 821782B4h-821782B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821782B8h
// Function '?CanBePredicated@Instruction@D3DXShader@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821782B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821782B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821782B8);
		  /* 821782B8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821782B8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821782B8h case    0:*/		return 0x821782BC;
		  /* 821782BCh */ case    1:  		/* bc 12, CR0_EQ, 72 */
		/* 821782BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82178304;  }
		/* 821782BCh case    1:*/		return 0x821782C0;
		  /* 821782C0h */ case    2:  		/* lwz R11, <#[R8 + 12]> */
		/* 821782C0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x0000000C) );
		/* 821782C0h case    2:*/		return 0x821782C4;
		  /* 821782C4h */ case    3:  		/* cmplw CR6, R11, R4 */
		/* 821782C4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 821782C4h case    3:*/		return 0x821782C8;
		  /* 821782C8h */ case    4:  		/* bc 4, CR6_EQ, 60 */
		/* 821782C8h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82178304;  }
		/* 821782C8h case    4:*/		return 0x821782CC;
		  /* 821782CCh */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821782CCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821782CCh case    5:*/		return 0x821782D0;
		  /* 821782D0h */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 821782D0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821782E0;  }
		/* 821782D0h case    6:*/		return 0x821782D4;
		  /* 821782D4h */ case    7:  		/* rlwinm. R11, R9, 0, 4, 6 */
		/* 821782D4h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R9);
		/* 821782D4h case    7:*/		return 0x821782D8;
		  /* 821782D8h */ case    8:  		/* li R11, 1 */
		/* 821782D8h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821782D8h case    8:*/		return 0x821782DC;
		  /* 821782DCh */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 821782DCh case    9:*/		if ( regs.CR[0].eq ) { return 0x821782E4;  }
		/* 821782DCh case    9:*/		return 0x821782E0;
	}
	return 0x821782E0;
} // Block from 821782B8h-821782E0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821782E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821782E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821782E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821782E0);
		  /* 821782E0h */ case    0:  		/* li R11, 0 */
		/* 821782E0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821782E0h case    0:*/		return 0x821782E4;
	}
	return 0x821782E4;
} // Block from 821782E0h-821782E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821782E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821782E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821782E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821782E4);
		  /* 821782E4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821782E4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821782E4h case    0:*/		return 0x821782E8;
		  /* 821782E8h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821782E8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821782F8;  }
		/* 821782E8h case    1:*/		return 0x821782EC;
		  /* 821782ECh */ case    2:  		/* rlwinm. R11, R9, 0, 7, 18 */
		/* 821782ECh case    2:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R11,regs.R9);
		/* 821782ECh case    2:*/		return 0x821782F0;
		  /* 821782F0h */ case    3:  		/* li R11, 1 */
		/* 821782F0h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821782F0h case    3:*/		return 0x821782F4;
		  /* 821782F4h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821782F4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821782FC;  }
		/* 821782F4h case    4:*/		return 0x821782F8;
	}
	return 0x821782F8;
} // Block from 821782E4h-821782F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821782F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821782F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821782F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821782F8);
		  /* 821782F8h */ case    0:  		/* li R11, 0 */
		/* 821782F8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821782F8h case    0:*/		return 0x821782FC;
	}
	return 0x821782FC;
} // Block from 821782F8h-821782FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821782FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821782FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821782FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821782FC);
		  /* 821782FCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821782FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821782FCh case    0:*/		return 0x82178300;
		  /* 82178300h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82178300h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217830C;  }
		/* 82178300h case    1:*/		return 0x82178304;
	}
	return 0x82178304;
} // Block from 821782FCh-82178304h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178304);
		  /* 82178304h */ case    0:  		/* lwz R8, <#[R8 + 4]> */
		/* 82178304h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 82178304h case    0:*/		return 0x82178308;
		  /* 82178308h */ case    1:  		/* b -116 */
		/* 82178308h case    1:*/		return 0x82178294;
		/* 82178308h case    1:*/		return 0x8217830C;
	}
	return 0x8217830C;
} // Block from 82178304h-8217830Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217830Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217830C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217830C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217830C);
		  /* 8217830Ch */ case    0:  		/* mr R3, R8 */
		/* 8217830Ch case    0:*/		regs.R3 = regs.R8;
		/* 8217830Ch case    0:*/		return 0x82178310;
	}
	return 0x82178310;
} // Block from 8217830Ch-82178310h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178310h
// Function '?AddModifiers@D3DXShader@@YAIII@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178310);
		  /* 82178310h */ case    0:  		/* bclr 20, CR0_LT */
		/* 82178310h case    0:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82178310h case    0:*/		return 0x82178314;
	}
	return 0x82178314;
} // Block from 82178310h-82178314h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178314);
		  /* 82178314h */ case    0:  		/* b -236 */
		/* 82178314h case    0:*/		return 0x82178228;
		/* 82178314h case    0:*/		return 0x82178318;
		  /* 82178318h */ case    1:  		/* lwz R3, <#[R3]> */
		/* 82178318h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000000) );
		/* 82178318h case    1:*/		return 0x8217831C;
		  /* 8217831Ch */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 8217831Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8217831Ch case    2:*/		return 0x82178320;
		  /* 82178320h */ case    3:  		/* bc 12, CR6_EQ, 80 */
		/* 82178320h case    3:*/		if ( regs.CR[6].eq ) { return 0x82178370;  }
		/* 82178320h case    3:*/		return 0x82178324;
		  /* 82178324h */ case    4:  		/* lwz R10, <#[R3]> */
		/* 82178324h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 82178324h case    4:*/		return 0x82178328;
		  /* 82178328h */ case    5:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 82178328h case    5:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 82178328h case    5:*/		return 0x8217832C;
		  /* 8217832Ch */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 8217832Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217833C;  }
		/* 8217832Ch case    6:*/		return 0x82178330;
		  /* 82178330h */ case    7:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 82178330h case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 82178330h case    7:*/		return 0x82178334;
		  /* 82178334h */ case    8:  		/* li R11, 1 */
		/* 82178334h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82178334h case    8:*/		return 0x82178338;
		  /* 82178338h */ case    9:  		/* bc 12, CR0_EQ, 8 */
		/* 82178338h case    9:*/		if ( regs.CR[0].eq ) { return 0x82178340;  }
		/* 82178338h case    9:*/		return 0x8217833C;
	}
	return 0x8217833C;
} // Block from 82178314h-8217833Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217833Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217833C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217833C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217833C);
		  /* 8217833Ch */ case    0:  		/* li R11, 0 */
		/* 8217833Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217833Ch case    0:*/		return 0x82178340;
	}
	return 0x82178340;
} // Block from 8217833Ch-82178340h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178340h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178340( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178340) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178340);
		  /* 82178340h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82178340h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82178340h case    0:*/		return 0x82178344;
		  /* 82178344h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 82178344h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217835C;  }
		/* 82178344h case    1:*/		return 0x82178348;
		  /* 82178348h */ case    2:  		/* rlwinm R11, R10, 19, 20, 31 */
		/* 82178348h case    2:*/		cpu::op::rlwinm<0,19,20,31>(regs,&regs.R11,regs.R10);
		/* 82178348h case    2:*/		return 0x8217834C;
		  /* 8217834Ch */ case    3:  		/* addi R10, R4, 1 */
		/* 8217834Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x1);
		/* 8217834Ch case    3:*/		return 0x82178350;
		  /* 82178350h */ case    4:  		/* cmplw CR6, R11, R10 */
		/* 82178350h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 82178350h case    4:*/		return 0x82178354;
		  /* 82178354h */ case    5:  		/* li R11, 1 */
		/* 82178354h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82178354h case    5:*/		return 0x82178358;
	}
	return 0x82178358;
} // Block from 82178340h-82178358h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82178358h
// Function '?AddModifiers@Dependency@D3DXShader@@QAAXI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178358);
		  /* 82178358h */ case    0:  		/* bc 12, CR6_EQ, 8 */
		/* 82178358h case    0:*/		if ( regs.CR[6].eq ) { return 0x82178360;  }
		/* 82178358h case    0:*/		return 0x8217835C;
	}
	return 0x8217835C;
} // Block from 82178358h-8217835Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217835Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217835C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217835C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217835C);
		  /* 8217835Ch */ case    0:  		/* li R11, 0 */
		/* 8217835Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217835Ch case    0:*/		return 0x82178360;
	}
	return 0x82178360;
} // Block from 8217835Ch-82178360h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178360);
		  /* 82178360h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82178360h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82178360h case    0:*/		return 0x82178364;
		  /* 82178364h */ case    1:  		/* bclr 4, CR0_EQ */
		/* 82178364h case    1:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82178364h case    1:*/		return 0x82178368;
	}
	return 0x82178368;
} // Block from 82178360h-82178368h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178368h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178368);
		  /* 82178368h */ case    0:  		/* lwz R3, <#[R3 + 4]> */
		/* 82178368h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 82178368h case    0:*/		return 0x8217836C;
		  /* 8217836Ch */ case    1:  		/* b -80 */
		/* 8217836Ch case    1:*/		return 0x8217831C;
		/* 8217836Ch case    1:*/		return 0x82178370;
	}
	return 0x82178370;
} // Block from 82178368h-82178370h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178370);
		  /* 82178370h */ case    0:  		/* li R3, 0 */
		/* 82178370h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82178370h case    0:*/		return 0x82178374;
		  /* 82178374h */ case    1:  		/* bclr 20, CR0_LT */
		/* 82178374h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82178374h case    1:*/		return 0x82178378;
	}
	return 0x82178378;
} // Block from 82178370h-82178378h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178378);
		  /* 82178378h */ case    0:  		/* std R31, <#[R1 - 8]> */
		/* 82178378h case    0:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82178378h case    0:*/		return 0x8217837C;
		  /* 8217837Ch */ case    1:  		/* lwz R5, <#[R3 + 4]> */
		/* 8217837Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R3 + 0x00000004) );
		/* 8217837Ch case    1:*/		return 0x82178380;
		  /* 82178380h */ case    2:  		/* li R6, 0 */
		/* 82178380h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82178380h case    2:*/		return 0x82178384;
		  /* 82178384h */ case    3:  		/* cmplwi CR6, R5, 0 */
		/* 82178384h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 82178384h case    3:*/		return 0x82178388;
		  /* 82178388h */ case    4:  		/* bc 12, CR6_EQ, 112 */
		/* 82178388h case    4:*/		if ( regs.CR[6].eq ) { return 0x821783F8;  }
		/* 82178388h case    4:*/		return 0x8217838C;
		  /* 8217838Ch */ case    5:  		/* lwz R7, <#[R5]> */
		/* 8217838Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x00000000) );
		/* 8217838Ch case    5:*/		return 0x82178390;
		  /* 82178390h */ case    6:  		/* rlwinm. R11, R7, 0, 1, 1 */
		/* 82178390h case    6:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R7);
		/* 82178390h case    6:*/		return 0x82178394;
		  /* 82178394h */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 82178394h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821783A4;  }
		/* 82178394h case    7:*/		return 0x82178398;
		  /* 82178398h */ case    8:  		/* rlwinm. R11, R7, 0, 4, 6 */
		/* 82178398h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R7);
		/* 82178398h case    8:*/		return 0x8217839C;
		  /* 8217839Ch */ case    9:  		/* li R11, 0 */
		/* 8217839Ch case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217839Ch case    9:*/		return 0x821783A0;
		  /* 821783A0h */ case   10:  		/* bc 12, CR0_EQ, 8 */
		/* 821783A0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821783A8;  }
		/* 821783A0h case   10:*/		return 0x821783A4;
	}
	return 0x821783A4;
} // Block from 82178378h-821783A4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821783A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821783A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821783A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821783A4);
		  /* 821783A4h */ case    0:  		/* li R11, 1 */
		/* 821783A4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821783A4h case    0:*/		return 0x821783A8;
	}
	return 0x821783A8;
} // Block from 821783A4h-821783A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821783A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821783A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821783A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821783A8);
		  /* 821783A8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821783A8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821783A8h case    0:*/		return 0x821783AC;
		  /* 821783ACh */ case    1:  		/* bc 12, CR0_EQ, 68 */
		/* 821783ACh case    1:*/		if ( regs.CR[0].eq ) { return 0x821783F0;  }
		/* 821783ACh case    1:*/		return 0x821783B0;
	}
	return 0x821783B0;
} // Block from 821783A8h-821783B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821783B0h
// Function '?FindAddressDef_AfterCleanPhase@Instruction@D3DXShader@@QAAPAV12@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821783B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821783B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821783B0);
		  /* 821783B0h */ case    0:  		/* rlwinm. R8, R7, 7, 29, 31 */
		/* 821783B0h case    0:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R8,regs.R7);
		/* 821783B0h case    0:*/		return 0x821783B4;
		  /* 821783B4h */ case    1:  		/* li R9, 0 */
		/* 821783B4h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821783B4h case    1:*/		return 0x821783B8;
		  /* 821783B8h */ case    2:  		/* li R11, 0 */
		/* 821783B8h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821783B8h case    2:*/		return 0x821783BC;
		  /* 821783BCh */ case    3:  		/* bc 12, CR0_EQ, 48 */
		/* 821783BCh case    3:*/		if ( regs.CR[0].eq ) { return 0x821783EC;  }
		/* 821783BCh case    3:*/		return 0x821783C0;
		  /* 821783C0h */ case    4:  		/* li R10, 0 */
		/* 821783C0h case    4:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821783C0h case    4:*/		return 0x821783C4;
		  /* 821783C4h */ case    5:  		/* rlwinm R4, R7, 27, 24, 31 */
		/* 821783C4h case    5:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R4,regs.R7);
		/* 821783C4h case    5:*/		return 0x821783C8;
		  /* 821783C8h */ case    6:  		/* li R31, 1 */
		/* 821783C8h case    6:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821783C8h case    6:*/		return 0x821783CC;
		  /* 821783CCh */ case    7:  		/* srw R4, R4, R10 */
		/* 821783CCh case    7:*/		cpu::op::srw<0>(regs,&regs.R4,regs.R4,regs.R10);
		/* 821783CCh case    7:*/		return 0x821783D0;
		  /* 821783D0h */ case    8:  		/* rlwinm R4, R4, 0, 30, 31 */
		/* 821783D0h case    8:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R4);
		/* 821783D0h case    8:*/		return 0x821783D4;
		  /* 821783D4h */ case    9:  		/* addi R11, R11, 1 */
		/* 821783D4h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821783D4h case    9:*/		return 0x821783D8;
		  /* 821783D8h */ case   10:  		/* slw R4, R31, R4 */
		/* 821783D8h case   10:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R31,regs.R4);
		/* 821783D8h case   10:*/		return 0x821783DC;
		  /* 821783DCh */ case   11:  		/* or R9, R4, R9 */
		/* 821783DCh case   11:*/		cpu::op::or<0>(regs,&regs.R9,regs.R4,regs.R9);
		/* 821783DCh case   11:*/		return 0x821783E0;
		  /* 821783E0h */ case   12:  		/* addi R10, R10, 2 */
		/* 821783E0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821783E0h case   12:*/		return 0x821783E4;
		  /* 821783E4h */ case   13:  		/* cmplw CR6, R11, R8 */
		/* 821783E4h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821783E4h case   13:*/		return 0x821783E8;
		  /* 821783E8h */ case   14:  		/* bc 12, CR6_LT, -36 */
		/* 821783E8h case   14:*/		if ( regs.CR[6].lt ) { return 0x821783C4;  }
		/* 821783E8h case   14:*/		return 0x821783EC;
	}
	return 0x821783EC;
} // Block from 821783B0h-821783ECh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821783ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821783EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821783EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821783EC);
		  /* 821783ECh */ case    0:  		/* or R6, R9, R6 */
		/* 821783ECh case    0:*/		cpu::op::or<0>(regs,&regs.R6,regs.R9,regs.R6);
		/* 821783ECh case    0:*/		return 0x821783F0;
	}
	return 0x821783F0;
} // Block from 821783ECh-821783F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821783F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821783F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821783F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821783F0);
		  /* 821783F0h */ case    0:  		/* lwz R5, <#[R5 + 8]> */
		/* 821783F0h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x00000008) );
		/* 821783F0h case    0:*/		return 0x821783F4;
		  /* 821783F4h */ case    1:  		/* b -112 */
		/* 821783F4h case    1:*/		return 0x82178384;
		/* 821783F4h case    1:*/		return 0x821783F8;
	}
	return 0x821783F8;
} // Block from 821783F0h-821783F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821783F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821783F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821783F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821783F8);
		  /* 821783F8h */ case    0:  		/* lis R11, -28311 */
		/* 821783F8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821783F8h case    0:*/		return 0x821783FC;
		  /* 821783FCh */ case    1:  		/* lwz R10, <#[R3 + 8]> */
		/* 821783FCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821783FCh case    1:*/		return 0x82178400;
		  /* 82178400h */ case    2:  		/* lis R9, 0 */
		/* 82178400h case    2:*/		cpu::op::lis<0>(regs,&regs.R9,0x0);
		/* 82178400h case    2:*/		return 0x82178404;
		  /* 82178404h */ case    3:  		/* ori R11, R11, 5192 */
		/* 82178404h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 82178404h case    3:*/		return 0x82178408;
		  /* 82178408h */ case    4:  		/* ori R9, R9, 36262 */
		/* 82178408h case    4:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x8DA6);
		/* 82178408h case    4:*/		return 0x8217840C;
		  /* 8217840Ch */ case    5:  		/* rldicl R8, R6, 0, 32 */
		/* 8217840Ch case    5:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R6);
		/* 8217840Ch case    5:*/		return 0x82178410;
	}
	return 0x82178410;
} // Block from 821783F8h-82178410h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82178410h
// Function '?SimplifyScalarCNDDependency@Compiler@D3DXShader@@AAAXPAPAVInstruction@2@PAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178410);
		  /* 82178410h */ case    0:  		/* rldimi R11, R9, 32, 0 */
		/* 82178410h case    0:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R9);
		/* 82178410h case    0:*/		return 0x82178414;
		  /* 82178414h */ case    1:  		/* srd R11, R11, R8 */
		/* 82178414h case    1:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82178414h case    1:*/		return 0x82178418;
		  /* 82178418h */ case    2:  		/* srd R11, R11, R8 */
		/* 82178418h case    2:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82178418h case    2:*/		return 0x8217841C;
		  /* 8217841Ch */ case    3:  		/* srd R11, R11, R8 */
		/* 8217841Ch case    3:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8217841Ch case    3:*/		return 0x82178420;
		  /* 82178420h */ case    4:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 82178420h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 82178420h case    4:*/		return 0x82178424;
		  /* 82178424h */ case    5:  		/* rlwimi R6, R11, 13, 16, 18 */
		/* 82178424h case    5:*/		cpu::op::rlwimi<0,13,16,18>(regs,&regs.R6,regs.R11);
		/* 82178424h case    5:*/		return 0x82178428;
		  /* 82178428h */ case    6:  		/* rlwimi R10, R6, 1, 27, 30 */
		/* 82178428h case    6:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R10,regs.R6);
		/* 82178428h case    6:*/		return 0x8217842C;
		  /* 8217842Ch */ case    7:  		/* rlwimi R10, R6, 1, 15, 17 */
		/* 8217842Ch case    7:*/		cpu::op::rlwimi<0,1,15,17>(regs,&regs.R10,regs.R6);
		/* 8217842Ch case    7:*/		return 0x82178430;
		  /* 82178430h */ case    8:  		/* stw R10, <#[R3 + 8]> */
		/* 82178430h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 82178430h case    8:*/		return 0x82178434;
		  /* 82178434h */ case    9:  		/* ld R31, <#[R1 - 8]> */
		/* 82178434h case    9:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82178434h case    9:*/		return 0x82178438;
		  /* 82178438h */ case   10:  		/* bclr 20, CR0_LT */
		/* 82178438h case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82178438h case   10:*/		return 0x8217843C;
	}
	return 0x8217843C;
} // Block from 82178410h-8217843Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217843Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217843C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217843C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217843C);
		  /* 8217843Ch */ case    0:  		/* nop */
		/* 8217843Ch case    0:*/		cpu::op::nop();
		/* 8217843Ch case    0:*/		return 0x82178440;
		  /* 82178440h */ case    1:  		/* lwz R10, <#[R5 + 8]> */
		/* 82178440h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x00000008) );
		/* 82178440h case    1:*/		return 0x82178444;
		  /* 82178444h */ case    2:  		/* li R8, 0 */
		/* 82178444h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82178444h case    2:*/		return 0x82178448;
		  /* 82178448h */ case    3:  		/* li R7, 0 */
		/* 82178448h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 82178448h case    3:*/		return 0x8217844C;
		  /* 8217844Ch */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8217844Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217844Ch case    4:*/		return 0x82178450;
		  /* 82178450h */ case    5:  		/* bc 12, CR6_EQ, 72 */
		/* 82178450h case    5:*/		if ( regs.CR[6].eq ) { return 0x82178498;  }
		/* 82178450h case    5:*/		return 0x82178454;
		  /* 82178454h */ case    6:  		/* lwz R9, <#[R4 + 48]> */
		/* 82178454h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000030) );
		/* 82178454h case    6:*/		return 0x82178458;
		  /* 82178458h */ case    7:  		/* li R6, 1 */
		/* 82178458h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82178458h case    7:*/		return 0x8217845C;
		  /* 8217845Ch */ case    8:  		/* lwz R11, <#[R10 + 4]> */
		/* 8217845Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217845Ch case    8:*/		return 0x82178460;
		  /* 82178460h */ case    9:  		/* rlwinm R5, R9, 0, 13, 31 */
		/* 82178460h case    9:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R5,regs.R9);
		/* 82178460h case    9:*/		return 0x82178464;
		  /* 82178464h */ case   10:  		/* rlwinm R9, R5, 27, 5, 31 */
		/* 82178464h case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R5);
		/* 82178464h case   10:*/		return 0x82178468;
		  /* 82178468h */ case   11:  		/* rlwinm R5, R5, 0, 27, 31 */
		/* 82178468h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R5);
		/* 82178468h case   11:*/		return 0x8217846C;
		  /* 8217846Ch */ case   12:  		/* addi R9, R9, 1 */
		/* 8217846Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8217846Ch case   12:*/		return 0x82178470;
		  /* 82178470h */ case   13:  		/* lwz R3, <#[R11 + 40]> */
		/* 82178470h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000028) );
		/* 82178470h case   13:*/		return 0x82178474;
		  /* 82178474h */ case   14:  		/* slw R6, R6, R5 */
		/* 82178474h case   14:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R6,regs.R5);
		/* 82178474h case   14:*/		return 0x82178478;
		  /* 82178478h */ case   15:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82178478h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82178478h case   15:*/		return 0x8217847C;
		  /* 8217847Ch */ case   16:  		/* lwzx R9, <#[R9 + R3]> */
		/* 8217847Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R3 + 0x00000000) );
		/* 8217847Ch case   16:*/		return 0x82178480;
		  /* 82178480h */ case   17:  		/* and. R9, R9, R6 */
		/* 82178480h case   17:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R6);
		/* 82178480h case   17:*/		return 0x82178484;
		  /* 82178484h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 82178484h case   18:*/		if ( regs.CR[0].eq ) { return 0x82178490;  }
		/* 82178484h case   18:*/		return 0x82178488;
		  /* 82178488h */ case   19:  		/* addi R8, R8, 1 */
		/* 82178488h case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 82178488h case   19:*/		return 0x8217848C;
		  /* 8217848Ch */ case   20:  		/* mr R7, R11 */
		/* 8217848Ch case   20:*/		regs.R7 = regs.R11;
		/* 8217848Ch case   20:*/		return 0x82178490;
	}
	return 0x82178490;
} // Block from 8217843Ch-82178490h (21 instructions)

//////////////////////////////////////////////////////
// Block at 82178490h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178490( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178490) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178490);
		  /* 82178490h */ case    0:  		/* lwz R10, <#[R10 + 12]> */
		/* 82178490h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 82178490h case    0:*/		return 0x82178494;
		  /* 82178494h */ case    1:  		/* b -72 */
		/* 82178494h case    1:*/		return 0x8217844C;
		/* 82178494h case    1:*/		return 0x82178498;
	}
	return 0x82178498;
} // Block from 82178490h-82178498h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178498h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178498( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178498) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178498);
		  /* 82178498h */ case    0:  		/* addi R11, R8, -1 */
		/* 82178498h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R8,0xFFFFFFFF);
		/* 82178498h case    0:*/		return 0x8217849C;
		  /* 8217849Ch */ case    1:  		/* addic R11, R11, -1 */
		/* 8217849Ch case    1:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8217849Ch case    1:*/		return 0x821784A0;
		  /* 821784A0h */ case    2:  		/* subfe R11, R11, R11 */
		/* 821784A0h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821784A0h case    2:*/		return 0x821784A4;
		  /* 821784A4h */ case    3:  		/* and R3, R11, R7 */
		/* 821784A4h case    3:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R7);
		/* 821784A4h case    3:*/		return 0x821784A8;
		  /* 821784A8h */ case    4:  		/* bclr 20, CR0_LT */
		/* 821784A8h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821784A8h case    4:*/		return 0x821784AC;
	}
	return 0x821784AC;
} // Block from 82178498h-821784ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821784ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821784AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821784AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821784AC);
		  /* 821784ACh */ case    0:  		/* nop */
		/* 821784ACh case    0:*/		cpu::op::nop();
		/* 821784ACh case    0:*/		return 0x821784B0;
	}
	return 0x821784B0;
} // Block from 821784ACh-821784B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821784B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821784B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821784B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821784B0);
		  /* 821784B0h */ case    0:  		/* mfspr R12, LR */
		/* 821784B0h case    0:*/		regs.R12 = regs.LR;
		/* 821784B0h case    0:*/		return 0x821784B4;
		  /* 821784B4h */ case    1:  		/* bl -946784 */
		/* 821784B4h case    1:*/		regs.LR = 0x821784B8; return 0x82091254;
		/* 821784B4h case    1:*/		return 0x821784B8;
		  /* 821784B8h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821784B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821784B8h case    2:*/		return 0x821784BC;
		  /* 821784BCh */ case    3:  		/* lwz R11, <#[R4 + 8]> */
		/* 821784BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821784BCh case    3:*/		return 0x821784C0;
		  /* 821784C0h */ case    4:  		/* mr R27, R3 */
		/* 821784C0h case    4:*/		regs.R27 = regs.R3;
		/* 821784C0h case    4:*/		return 0x821784C4;
		  /* 821784C4h */ case    5:  		/* mr R28, R4 */
		/* 821784C4h case    5:*/		regs.R28 = regs.R4;
		/* 821784C4h case    5:*/		return 0x821784C8;
		  /* 821784C8h */ case    6:  		/* mr R30, R5 */
		/* 821784C8h case    6:*/		regs.R30 = regs.R5;
		/* 821784C8h case    6:*/		return 0x821784CC;
		  /* 821784CCh */ case    7:  		/* rlwinm. R11, R11, 0, 10, 12 */
		/* 821784CCh case    7:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821784CCh case    7:*/		return 0x821784D0;
		  /* 821784D0h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821784D0h case    8:*/		if ( regs.CR[0].eq ) { return 0x821784DC;  }
		/* 821784D0h case    8:*/		return 0x821784D4;
		  /* 821784D4h */ case    9:  		/* lwz R3, <#[R4 + 44]> */
		/* 821784D4h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R4 + 0x0000002C) );
		/* 821784D4h case    9:*/		return 0x821784D8;
		  /* 821784D8h */ case   10:  		/* b 128 */
		/* 821784D8h case   10:*/		return 0x82178558;
		/* 821784D8h case   10:*/		return 0x821784DC;
	}
	return 0x821784DC;
} // Block from 821784B0h-821784DCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 821784DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821784DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821784DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821784DC);
		  /* 821784DCh */ case    0:  		/* lwz R3, <#[R28]> */
		/* 821784DCh case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000000) );
		/* 821784DCh case    0:*/		return 0x821784E0;
		  /* 821784E0h */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 821784E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821784E0h case    1:*/		return 0x821784E4;
		  /* 821784E4h */ case    2:  		/* bc 12, CR6_EQ, 116 */
		/* 821784E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82178558;  }
		/* 821784E4h case    2:*/		return 0x821784E8;
	}
	return 0x821784E8;
} // Block from 821784DCh-821784E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821784E8h
// Function '?FindPredicateStackDef@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821784E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821784E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821784E8);
		  /* 821784E8h */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821784E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821784E8h case    0:*/		return 0x821784EC;
		  /* 821784ECh */ case    1:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821784ECh case    1:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821784ECh case    1:*/		return 0x821784F0;
		  /* 821784F0h */ case    2:  		/* bc 4, CR0_EQ, 104 */
		/* 821784F0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82178558;  }
		/* 821784F0h case    2:*/		return 0x821784F4;
		  /* 821784F4h */ case    3:  		/* lwz R3, <#[R3 + 4]> */
		/* 821784F4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000004) );
		/* 821784F4h case    3:*/		return 0x821784F8;
		  /* 821784F8h */ case    4:  		/* b -24 */
		/* 821784F8h case    4:*/		return 0x821784E0;
		/* 821784F8h case    4:*/		return 0x821784FC;
		  /* 821784FCh */ case    5:  		/* lwz R29, <#[R1 + 80]> */
		/* 821784FCh case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821784FCh case    5:*/		return 0x82178500;
		  /* 82178500h */ case    6:  		/* lwz R31, <#[R29 + 8]> */
		/* 82178500h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000008) );
		/* 82178500h case    6:*/		return 0x82178504;
		  /* 82178504h */ case    7:  		/* rlwinm R11, R31, 25, 25, 31 */
		/* 82178504h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R31);
		/* 82178504h case    7:*/		return 0x82178508;
		  /* 82178508h */ case    8:  		/* cmplwi CR6, R11, 125 */
		/* 82178508h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 82178508h case    8:*/		return 0x8217850C;
		  /* 8217850Ch */ case    9:  		/* bc 12, CR6_EQ, 132 */
		/* 8217850Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82178590;  }
		/* 8217850Ch case    9:*/		return 0x82178510;
		  /* 82178510h */ case   10:  		/* cmplwi CR6, R11, 21 */
		/* 82178510h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 82178510h case   10:*/		return 0x82178514;
		  /* 82178514h */ case   11:  		/* bc 12, CR6_LT, 16 */
		/* 82178514h case   11:*/		if ( regs.CR[6].lt ) { return 0x82178524;  }
		/* 82178514h case   11:*/		return 0x82178518;
		  /* 82178518h */ case   12:  		/* cmplwi CR6, R11, 24 */
		/* 82178518h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 82178518h case   12:*/		return 0x8217851C;
		  /* 8217851Ch */ case   13:  		/* li R11, 1 */
		/* 8217851Ch case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217851Ch case   13:*/		return 0x82178520;
		  /* 82178520h */ case   14:  		/* bc 4, CR6_GT, 8 */
		/* 82178520h case   14:*/		if ( !regs.CR[6].gt ) { return 0x82178528;  }
		/* 82178520h case   14:*/		return 0x82178524;
	}
	return 0x82178524;
} // Block from 821784E8h-82178524h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82178524h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178524( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178524) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178524);
		  /* 82178524h */ case    0:  		/* li R11, 0 */
		/* 82178524h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82178524h case    0:*/		return 0x82178528;
	}
	return 0x82178528;
} // Block from 82178524h-82178528h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178528);
		  /* 82178528h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82178528h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82178528h case    0:*/		return 0x8217852C;
		  /* 8217852Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8217852Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8217853C;  }
		/* 8217852Ch case    1:*/		return 0x82178530;
		  /* 82178530h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 82178530h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82178530h case    2:*/		return 0x82178534;
		  /* 82178534h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 82178534h case    3:*/		if ( regs.CR[6].eq ) { return 0x82178590;  }
		/* 82178534h case    3:*/		return 0x82178538;
		  /* 82178538h */ case    4:  		/* addi R30, R30, -1 */
		/* 82178538h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 82178538h case    4:*/		return 0x8217853C;
	}
	return 0x8217853C;
} // Block from 82178528h-8217853Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217853Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217853C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217853C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217853C);
		  /* 8217853Ch */ case    0:  		/* mr R3, R29 */
		/* 8217853Ch case    0:*/		regs.R3 = regs.R29;
		/* 8217853Ch case    0:*/		return 0x82178540;
		  /* 82178540h */ case    1:  		/* bl -82944 */
		/* 82178540h case    1:*/		regs.LR = 0x82178544; return 0x82164140;
		/* 82178540h case    1:*/		return 0x82178544;
		  /* 82178544h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82178544h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82178544h case    2:*/		return 0x82178548;
		  /* 82178548h */ case    3:  		/* bc 12, CR0_EQ, 796 */
		/* 82178548h case    3:*/		if ( regs.CR[0].eq ) { return 0x82178864;  }
		/* 82178548h case    3:*/		return 0x8217854C;
		  /* 8217854Ch */ case    4:  		/* rlwinm. R11, R31, 0, 10, 12 */
		/* 8217854Ch case    4:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R31);
		/* 8217854Ch case    4:*/		return 0x82178550;
		  /* 82178550h */ case    5:  		/* bc 12, CR0_EQ, 788 */
		/* 82178550h case    5:*/		if ( regs.CR[0].eq ) { return 0x82178864;  }
		/* 82178550h case    5:*/		return 0x82178554;
		  /* 82178554h */ case    6:  		/* lwz R3, <#[R29 + 44]> */
		/* 82178554h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000002C) );
		/* 82178554h case    6:*/		return 0x82178558;
	}
	return 0x82178558;
} // Block from 8217853Ch-82178558h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82178558h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178558( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178558) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178558);
		  /* 82178558h */ case    0:  		/* li R10, 0 */
		/* 82178558h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82178558h case    0:*/		return 0x8217855C;
		  /* 8217855Ch */ case    1:  		/* li R9, 0 */
		/* 8217855Ch case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8217855Ch case    1:*/		return 0x82178560;
		  /* 82178560h */ case    2:  		/* li R8, 0 */
		/* 82178560h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 82178560h case    2:*/		return 0x82178564;
		  /* 82178564h */ case    3:  		/* addi R7, R1, 84 */
		/* 82178564h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 82178564h case    3:*/		return 0x82178568;
		  /* 82178568h */ case    4:  		/* addi R6, R1, 88 */
		/* 82178568h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 82178568h case    4:*/		return 0x8217856C;
		  /* 8217856Ch */ case    5:  		/* addi R5, R1, 80 */
		/* 8217856Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8217856Ch case    5:*/		return 0x82178570;
		  /* 82178570h */ case    6:  		/* li R4, 0 */
		/* 82178570h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 82178570h case    6:*/		return 0x82178574;
		  /* 82178574h */ case    7:  		/* bl 700252 */
		/* 82178574h case    7:*/		regs.LR = 0x82178578; return 0x822234D0;
		/* 82178574h case    7:*/		return 0x82178578;
		  /* 82178578h */ case    8:  		/* lwz R11, <#[R1 + 84]> */
		/* 82178578h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 82178578h case    8:*/		return 0x8217857C;
		  /* 8217857Ch */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8217857Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217857Ch case    9:*/		return 0x82178580;
		  /* 82178580h */ case   10:  		/* bc 12, CR6_EQ, -132 */
		/* 82178580h case   10:*/		if ( regs.CR[6].eq ) { return 0x821784FC;  }
		/* 82178580h case   10:*/		return 0x82178584;
		  /* 82178584h */ case   11:  		/* li R4, 4800 */
		/* 82178584h case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82178584h case   11:*/		return 0x82178588;
		  /* 82178588h */ case   12:  		/* mr R3, R27 */
		/* 82178588h case   12:*/		regs.R3 = regs.R27;
		/* 82178588h case   12:*/		return 0x8217858C;
		  /* 8217858Ch */ case   13:  		/* bl -157476 */
		/* 8217858Ch case   13:*/		regs.LR = 0x82178590; return 0x82151E68;
		/* 8217858Ch case   13:*/		return 0x82178590;
	}
	return 0x82178590;
} // Block from 82178558h-82178590h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82178590h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178590( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178590) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178590);
		  /* 82178590h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 82178590h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82178590h case    0:*/		return 0x82178594;
		  /* 82178594h */ case    1:  		/* rlwinm. R11, R11, 15, 31, 31 */
		/* 82178594h case    1:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R11);
		/* 82178594h case    1:*/		return 0x82178598;
		  /* 82178598h */ case    2:  		/* bc 12, CR0_EQ, 244 */
		/* 82178598h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217868C;  }
		/* 82178598h case    2:*/		return 0x8217859C;
		  /* 8217859Ch */ case    3:  		/* mr R3, R28 */
		/* 8217859Ch case    3:*/		regs.R3 = regs.R28;
		/* 8217859Ch case    3:*/		return 0x821785A0;
		  /* 821785A0h */ case    4:  		/* bl -47464 */
		/* 821785A0h case    4:*/		regs.LR = 0x821785A4; return 0x8216CC38;
		/* 821785A0h case    4:*/		return 0x821785A4;
		  /* 821785A4h */ case    5:  		/* lwz R8, <#[R3 + 12]> */
		/* 821785A4h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x0000000C) );
		/* 821785A4h case    5:*/		return 0x821785A8;
		  /* 821785A8h */ case    6:  		/* addi R7, R28, 4 */
		/* 821785A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R28,0x4);
		/* 821785A8h case    6:*/		return 0x821785AC;
		  /* 821785ACh */ case    7:  		/* lwz R11, <#[R7]> */
		/* 821785ACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821785ACh case    7:*/		return 0x821785B0;
		  /* 821785B0h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821785B0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821785B0h case    8:*/		return 0x821785B4;
		  /* 821785B4h */ case    9:  		/* bc 12, CR6_EQ, 212 */
		/* 821785B4h case    9:*/		if ( regs.CR[6].eq ) { return 0x82178688;  }
		/* 821785B4h case    9:*/		return 0x821785B8;
		  /* 821785B8h */ case   10:  		/* lwz R9, <#[R11 + 16]> */
		/* 821785B8h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 821785B8h case   10:*/		return 0x821785BC;
		  /* 821785BCh */ case   11:  		/* cmplwi CR6, R9, 0 */
		/* 821785BCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821785BCh case   11:*/		return 0x821785C0;
		  /* 821785C0h */ case   12:  		/* bc 12, CR6_EQ, 168 */
		/* 821785C0h case   12:*/		if ( regs.CR[6].eq ) { return 0x82178668;  }
		/* 821785C0h case   12:*/		return 0x821785C4;
		  /* 821785C4h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821785C4h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821785C4h case   13:*/		return 0x821785C8;
		  /* 821785C8h */ case   14:  		/* rlwinm. R6, R10, 0, 1, 1 */
		/* 821785C8h case   14:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R6,regs.R10);
		/* 821785C8h case   14:*/		return 0x821785CC;
		  /* 821785CCh */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 821785CCh case   15:*/		if ( regs.CR[0].eq ) { return 0x821785DC;  }
		/* 821785CCh case   15:*/		return 0x821785D0;
		  /* 821785D0h */ case   16:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821785D0h case   16:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821785D0h case   16:*/		return 0x821785D4;
		  /* 821785D4h */ case   17:  		/* li R10, 1 */
		/* 821785D4h case   17:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821785D4h case   17:*/		return 0x821785D8;
	}
	return 0x821785D8;
} // Block from 82178590h-821785D8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821785D8h
// Function '?FindPredicateInvAndPop@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAPAV32@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821785D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821785D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821785D8);
		  /* 821785D8h */ case    0:  		/* bc 12, CR0_EQ, 8 */
		/* 821785D8h case    0:*/		if ( regs.CR[0].eq ) { return 0x821785E0;  }
		/* 821785D8h case    0:*/		return 0x821785DC;
	}
	return 0x821785DC;
} // Block from 821785D8h-821785DCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821785DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821785DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821785DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821785DC);
		  /* 821785DCh */ case    0:  		/* li R10, 0 */
		/* 821785DCh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821785DCh case    0:*/		return 0x821785E0;
	}
	return 0x821785E0;
} // Block from 821785DCh-821785E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821785E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821785E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821785E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821785E0);
		  /* 821785E0h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821785E0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821785E0h case    0:*/		return 0x821785E4;
		  /* 821785E4h */ case    1:  		/* bc 12, CR0_EQ, 132 */
		/* 821785E4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82178668;  }
		/* 821785E4h case    1:*/		return 0x821785E8;
		  /* 821785E8h */ case    2:  		/* lwz R10, <#[R9 + 8]> */
		/* 821785E8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 821785E8h case    2:*/		return 0x821785EC;
		  /* 821785ECh */ case    3:  		/* rlwinm R9, R10, 25, 25, 31 */
		/* 821785ECh case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R9,regs.R10);
		/* 821785ECh case    3:*/		return 0x821785F0;
		  /* 821785F0h */ case    4:  		/* cmplwi CR6, R9, 85 */
		/* 821785F0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000055);
		/* 821785F0h case    4:*/		return 0x821785F4;
		  /* 821785F4h */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 821785F4h case    5:*/		if ( regs.CR[6].eq ) { return 0x82178618;  }
		/* 821785F4h case    5:*/		return 0x821785F8;
		  /* 821785F8h */ case    6:  		/* lwz R6, <#[R28 + 8]> */
		/* 821785F8h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R28 + 0x00000008) );
		/* 821785F8h case    6:*/		return 0x821785FC;
		  /* 821785FCh */ case    7:  		/* rlwinm R5, R10, 14, 18, 31 */
		/* 821785FCh case    7:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R5,regs.R10);
		/* 821785FCh case    7:*/		return 0x82178600;
		  /* 82178600h */ case    8:  		/* rlwinm R6, R6, 14, 18, 31 */
		/* 82178600h case    8:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R6,regs.R6);
		/* 82178600h case    8:*/		return 0x82178604;
		  /* 82178604h */ case    9:  		/* xor R6, R5, R6 */
		/* 82178604h case    9:*/		cpu::op::xor<0>(regs,&regs.R6,regs.R5,regs.R6);
		/* 82178604h case    9:*/		return 0x82178608;
		  /* 82178608h */ case   10:  		/* rlwinm. R6, R6, 0, 31, 31 */
		/* 82178608h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R6,regs.R6);
		/* 82178608h case   10:*/		return 0x8217860C;
		  /* 8217860Ch */ case   11:  		/* bc 4, CR0_EQ, 112 */
		/* 8217860Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x8217867C;  }
		/* 8217860Ch case   11:*/		return 0x82178610;
		  /* 82178610h */ case   12:  		/* cmplwi CR6, R9, 85 */
		/* 82178610h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000055);
		/* 82178610h case   12:*/		return 0x82178614;
		  /* 82178614h */ case   13:  		/* bc 4, CR6_EQ, 28 */
		/* 82178614h case   13:*/		if ( !regs.CR[6].eq ) { return 0x82178630;  }
		/* 82178614h case   13:*/		return 0x82178618;
	}
	return 0x82178618;
} // Block from 821785E0h-82178618h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82178618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178618);
		  /* 82178618h */ case    0:  		/* lwz R9, <#[R28 + 8]> */
		/* 82178618h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000008) );
		/* 82178618h case    0:*/		return 0x8217861C;
		  /* 8217861Ch */ case    1:  		/* rlwinm R10, R10, 14, 18, 31 */
		/* 8217861Ch case    1:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R10,regs.R10);
		/* 8217861Ch case    1:*/		return 0x82178620;
		  /* 82178620h */ case    2:  		/* rlwinm R9, R9, 14, 18, 31 */
		/* 82178620h case    2:*/		cpu::op::rlwinm<0,14,18,31>(regs,&regs.R9,regs.R9);
		/* 82178620h case    2:*/		return 0x82178624;
		  /* 82178624h */ case    3:  		/* xor R10, R10, R9 */
		/* 82178624h case    3:*/		cpu::op::xor<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82178624h case    3:*/		return 0x82178628;
		  /* 82178628h */ case    4:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 82178628h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 82178628h case    4:*/		return 0x8217862C;
		  /* 8217862Ch */ case    5:  		/* bc 12, CR0_EQ, 80 */
		/* 8217862Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8217867C;  }
		/* 8217862Ch case    5:*/		return 0x82178630;
	}
	return 0x82178630;
} // Block from 82178618h-82178630h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82178630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178630);
		  /* 82178630h */ case    0:  		/* lwz R10, <#[R11 + 12]> */
		/* 82178630h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 82178630h case    0:*/		return 0x82178634;
		  /* 82178634h */ case    1:  		/* addi R10, R10, 4 */
		/* 82178634h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82178634h case    1:*/		return 0x82178638;
		  /* 82178638h */ case    2:  		/* lwz R9, <#[R10]> */
		/* 82178638h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82178638h case    2:*/		return 0x8217863C;
		  /* 8217863Ch */ case    3:  		/* b 12 */
		/* 8217863Ch case    3:*/		return 0x82178648;
		/* 8217863Ch case    3:*/		return 0x82178640;
		  /* 82178640h */ case    4:  		/* addi R10, R9, 8 */
		/* 82178640h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 82178640h case    4:*/		return 0x82178644;
		  /* 82178644h */ case    5:  		/* lwz R9, <#[R9 + 8]> */
		/* 82178644h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82178644h case    5:*/		return 0x82178648;
	}
	return 0x82178648;
} // Block from 82178630h-82178648h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82178648h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178648);
		  /* 82178648h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 82178648h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82178648h case    0:*/		return 0x8217864C;
		  /* 8217864Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8217864Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82178640;  }
		/* 8217864Ch case    1:*/		return 0x82178650;
		  /* 82178650h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 82178650h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82178650h case    2:*/		return 0x82178654;
		  /* 82178654h */ case    3:  		/* stw R9, <#[R10]> */
		/* 82178654h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82178654h case    3:*/		return 0x82178658;
		  /* 82178658h */ case    4:  		/* lwz R10, <#[R8 + 4]> */
		/* 82178658h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 82178658h case    4:*/		return 0x8217865C;
		  /* 8217865Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 8217865Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217865Ch case    5:*/		return 0x82178660;
		  /* 82178660h */ case    6:  		/* stw R11, <#[R8 + 4]> */
		/* 82178660h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 82178660h case    6:*/		return 0x82178664;
		  /* 82178664h */ case    7:  		/* stw R8, <#[R11 + 12]> */
		/* 82178664h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 82178664h case    7:*/		return 0x82178668;
	}
	return 0x82178668;
} // Block from 82178648h-82178668h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82178668h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178668( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178668) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178668);
		  /* 82178668h */ case    0:  		/* lwz R10, <#[R7]> */
		/* 82178668h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 82178668h case    0:*/		return 0x8217866C;
		  /* 8217866Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 8217866Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8217866Ch case    1:*/		return 0x82178670;
		  /* 82178670h */ case    2:  		/* bc 4, CR6_EQ, -196 */
		/* 82178670h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821785AC;  }
		/* 82178670h case    2:*/		return 0x82178674;
		  /* 82178674h */ case    3:  		/* addi R7, R11, 8 */
		/* 82178674h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x8);
		/* 82178674h case    3:*/		return 0x82178678;
	}
	return 0x82178678;
} // Block from 82178668h-82178678h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82178678h
// Function '?IsMemExport@Instruction@D3DXShader@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178678);
		  /* 82178678h */ case    0:  		/* b -204 */
		/* 82178678h case    0:*/		return 0x821785AC;
		/* 82178678h case    0:*/		return 0x8217867C;
	}
	return 0x8217867C;
} // Block from 82178678h-8217867Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217867Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217867C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217867C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217867C);
		  /* 8217867Ch */ case    0:  		/* li R4, 4800 */
		/* 8217867Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217867Ch case    0:*/		return 0x82178680;
		  /* 82178680h */ case    1:  		/* mr R3, R27 */
		/* 82178680h case    1:*/		regs.R3 = regs.R27;
		/* 82178680h case    1:*/		return 0x82178684;
		  /* 82178684h */ case    2:  		/* bl -157724 */
		/* 82178684h case    2:*/		regs.LR = 0x82178688; return 0x82151E68;
		/* 82178684h case    2:*/		return 0x82178688;
	}
	return 0x82178688;
} // Block from 8217867Ch-82178688h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82178688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178688);
		  /* 82178688h */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 82178688h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82178688h case    0:*/		return 0x8217868C;
	}
	return 0x8217868C;
} // Block from 82178688h-8217868Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217868Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217868C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217868C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217868C);
		  /* 8217868Ch */ case    0:  		/* addi R7, R28, 4 */
		/* 8217868Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R28,0x4);
		/* 8217868Ch case    0:*/		return 0x82178690;
		  /* 82178690h */ case    1:  		/* lwz R11, <#[R7]> */
		/* 82178690h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 82178690h case    1:*/		return 0x82178694;
		  /* 82178694h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82178694h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82178694h case    2:*/		return 0x82178698;
		  /* 82178698h */ case    3:  		/* bc 12, CR6_EQ, 212 */
		/* 82178698h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217876C;  }
		/* 82178698h case    3:*/		return 0x8217869C;
		  /* 8217869Ch */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 8217869Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8217869Ch case    4:*/		return 0x821786A0;
		  /* 821786A0h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821786A0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821786A0h case    5:*/		return 0x821786A4;
		  /* 821786A4h */ case    6:  		/* bc 12, CR6_EQ, 168 */
		/* 821786A4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217874C;  }
		/* 821786A4h case    6:*/		return 0x821786A8;
		  /* 821786A8h */ case    7:  		/* lwz R9, <#[R11]> */
		/* 821786A8h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821786A8h case    7:*/		return 0x821786AC;
		  /* 821786ACh */ case    8:  		/* rlwinm. R10, R9, 0, 1, 1 */
		/* 821786ACh case    8:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R9);
		/* 821786ACh case    8:*/		return 0x821786B0;
		  /* 821786B0h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821786B0h case    9:*/		if ( regs.CR[0].eq ) { return 0x821786C0;  }
		/* 821786B0h case    9:*/		return 0x821786B4;
		  /* 821786B4h */ case   10:  		/* rlwinm. R10, R9, 0, 4, 6 */
		/* 821786B4h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R9);
		/* 821786B4h case   10:*/		return 0x821786B8;
		  /* 821786B8h */ case   11:  		/* li R10, 1 */
		/* 821786B8h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821786B8h case   11:*/		return 0x821786BC;
		  /* 821786BCh */ case   12:  		/* bc 12, CR0_EQ, 8 */
		/* 821786BCh case   12:*/		if ( regs.CR[0].eq ) { return 0x821786C4;  }
		/* 821786BCh case   12:*/		return 0x821786C0;
	}
	return 0x821786C0;
} // Block from 8217868Ch-821786C0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821786C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821786C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821786C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821786C0);
		  /* 821786C0h */ case    0:  		/* li R10, 0 */
		/* 821786C0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821786C0h case    0:*/		return 0x821786C4;
	}
	return 0x821786C4;
} // Block from 821786C0h-821786C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821786C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821786C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821786C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821786C4);
		  /* 821786C4h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821786C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821786C4h case    0:*/		return 0x821786C8;
		  /* 821786C8h */ case    1:  		/* bc 4, CR0_EQ, 152 */
		/* 821786C8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82178760;  }
		/* 821786C8h case    1:*/		return 0x821786CC;
		  /* 821786CCh */ case    2:  		/* rlwinm. R10, R9, 0, 4, 6 */
		/* 821786CCh case    2:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R9);
		/* 821786CCh case    2:*/		return 0x821786D0;
		  /* 821786D0h */ case    3:  		/* bc 12, CR0_EQ, 124 */
		/* 821786D0h case    3:*/		if ( regs.CR[0].eq ) { return 0x8217874C;  }
		/* 821786D0h case    3:*/		return 0x821786D4;
		  /* 821786D4h */ case    4:  		/* lwz R10, <#[R11 + 12]> */
		/* 821786D4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821786D4h case    4:*/		return 0x821786D8;
	}
	return 0x821786D8;
} // Block from 821786C4h-821786D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821786D8h
// Function '?HasExternalSideEffects@Instruction@D3DXShader@@QAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821786D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821786D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821786D8);
		  /* 821786D8h */ case    0:  		/* mr R9, R29 */
		/* 821786D8h case    0:*/		regs.R9 = regs.R29;
		/* 821786D8h case    0:*/		return 0x821786DC;
		  /* 821786DCh */ case    1:  		/* addi R10, R10, 4 */
		/* 821786DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821786DCh case    1:*/		return 0x821786E0;
		  /* 821786E0h */ case    2:  		/* lwz R8, <#[R10]> */
		/* 821786E0h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821786E0h case    2:*/		return 0x821786E4;
		  /* 821786E4h */ case    3:  		/* b 12 */
		/* 821786E4h case    3:*/		return 0x821786F0;
		/* 821786E4h case    3:*/		return 0x821786E8;
		  /* 821786E8h */ case    4:  		/* addi R10, R8, 8 */
		/* 821786E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x8);
		/* 821786E8h case    4:*/		return 0x821786EC;
		  /* 821786ECh */ case    5:  		/* lwz R8, <#[R8 + 8]> */
		/* 821786ECh case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821786ECh case    5:*/		return 0x821786F0;
	}
	return 0x821786F0;
} // Block from 821786D8h-821786F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821786F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821786F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821786F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821786F0);
		  /* 821786F0h */ case    0:  		/* cmplw CR6, R8, R11 */
		/* 821786F0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821786F0h case    0:*/		return 0x821786F4;
		  /* 821786F4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821786F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821786E8;  }
		/* 821786F4h case    1:*/		return 0x821786F8;
		  /* 821786F8h */ case    2:  		/* lwz R8, <#[R11 + 8]> */
		/* 821786F8h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821786F8h case    2:*/		return 0x821786FC;
		  /* 821786FCh */ case    3:  		/* stw R8, <#[R10]> */
		/* 821786FCh case    3:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821786FCh case    3:*/		return 0x82178700;
		  /* 82178700h */ case    4:  		/* lwz R10, <#[R9 + 4]> */
		/* 82178700h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 82178700h case    4:*/		return 0x82178704;
		  /* 82178704h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 82178704h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82178704h case    5:*/		return 0x82178708;
		  /* 82178708h */ case    6:  		/* stw R11, <#[R9 + 4]> */
		/* 82178708h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 82178708h case    6:*/		return 0x8217870C;
		  /* 8217870Ch */ case    7:  		/* stw R9, <#[R11 + 12]> */
		/* 8217870Ch case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217870Ch case    7:*/		return 0x82178710;
		  /* 82178710h */ case    8:  		/* lwz R10, <#[R1 + 88]> */
		/* 82178710h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 82178710h case    8:*/		return 0x82178714;
		  /* 82178714h */ case    9:  		/* lwz R9, <#[R11]> */
		/* 82178714h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82178714h case    9:*/		return 0x82178718;
		  /* 82178718h */ case   10:  		/* rlwinm R9, R9, 0, 27, 18 */
		/* 82178718h case   10:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R9,regs.R9);
		/* 82178718h case   10:*/		return 0x8217871C;
		  /* 8217871Ch */ case   11:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 8217871Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 8217871Ch case   11:*/		return 0x82178720;
		  /* 82178720h */ case   12:  		/* rlwinm R6, R10, 0, 26, 31 */
		/* 82178720h case   12:*/		cpu::op::rlwinm<0,0,26,31>(regs,&regs.R6,regs.R10);
		/* 82178720h case   12:*/		return 0x82178724;
		  /* 82178724h */ case   13:  		/* or R8, R8, R10 */
		/* 82178724h case   13:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 82178724h case   13:*/		return 0x82178728;
		  /* 82178728h */ case   14:  		/* rlwinm R10, R10, 0, 24, 31 */
		/* 82178728h case   14:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R10);
		/* 82178728h case   14:*/		return 0x8217872C;
		  /* 8217872Ch */ case   15:  		/* rlwinm R8, R8, 2, 26, 29 */
		/* 8217872Ch case   15:*/		cpu::op::rlwinm<0,2,26,29>(regs,&regs.R8,regs.R8);
		/* 8217872Ch case   15:*/		return 0x82178730;
		  /* 82178730h */ case   16:  		/* or R8, R8, R6 */
		/* 82178730h case   16:*/		cpu::op::or<0>(regs,&regs.R8,regs.R8,regs.R6);
		/* 82178730h case   16:*/		return 0x82178734;
		  /* 82178734h */ case   17:  		/* rlwinm R8, R8, 2, 0, 29 */
		/* 82178734h case   17:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R8);
		/* 82178734h case   17:*/		return 0x82178738;
		  /* 82178738h */ case   18:  		/* or R10, R8, R10 */
		/* 82178738h case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 82178738h case   18:*/		return 0x8217873C;
		  /* 8217873Ch */ case   19:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 8217873Ch case   19:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 8217873Ch case   19:*/		return 0x82178740;
		  /* 82178740h */ case   20:  		/* or R10, R10, R9 */
		/* 82178740h case   20:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 82178740h case   20:*/		return 0x82178744;
		  /* 82178744h */ case   21:  		/* stw R10, <#[R11]> */
		/* 82178744h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82178744h case   21:*/		return 0x82178748;
		  /* 82178748h */ case   22:  		/* lwz R29, <#[R1 + 80]> */
		/* 82178748h case   22:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82178748h case   22:*/		return 0x8217874C;
	}
	return 0x8217874C;
} // Block from 821786F0h-8217874Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 8217874Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217874C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217874C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217874C);
		  /* 8217874Ch */ case    0:  		/* lwz R10, <#[R7]> */
		/* 8217874Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 8217874Ch case    0:*/		return 0x82178750;
		  /* 82178750h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 82178750h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82178750h case    1:*/		return 0x82178754;
		  /* 82178754h */ case    2:  		/* bc 4, CR6_EQ, -196 */
		/* 82178754h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82178690;  }
		/* 82178754h case    2:*/		return 0x82178758;
	}
	return 0x82178758;
} // Block from 8217874Ch-82178758h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82178758h
// Function '?GetVarInfo@Instruction@D3DXShader@@QAAPAUInstruction_VARIABLE@2@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178758);
		  /* 82178758h */ case    0:  		/* addi R7, R11, 8 */
		/* 82178758h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x8);
		/* 82178758h case    0:*/		return 0x8217875C;
		  /* 8217875Ch */ case    1:  		/* b -204 */
		/* 8217875Ch case    1:*/		return 0x82178690;
		/* 8217875Ch case    1:*/		return 0x82178760;
	}
	return 0x82178760;
} // Block from 82178758h-82178760h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178760);
		  /* 82178760h */ case    0:  		/* li R4, 4800 */
		/* 82178760h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82178760h case    0:*/		return 0x82178764;
		  /* 82178764h */ case    1:  		/* mr R3, R27 */
		/* 82178764h case    1:*/		regs.R3 = regs.R27;
		/* 82178764h case    1:*/		return 0x82178768;
		  /* 82178768h */ case    2:  		/* bl -157952 */
		/* 82178768h case    2:*/		regs.LR = 0x8217876C; return 0x82151E68;
		/* 82178768h case    2:*/		return 0x8217876C;
	}
	return 0x8217876C;
} // Block from 82178760h-8217876Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217876Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217876C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217876C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217876C);
		  /* 8217876Ch */ case    0:  		/* lwz R11, <#[R29 + 8]> */
		/* 8217876Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8217876Ch case    0:*/		return 0x82178770;
		  /* 82178770h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82178770h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82178770h case    1:*/		return 0x82178774;
		  /* 82178774h */ case    2:  		/* cmplwi CR6, R11, 16000 */
		/* 82178774h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 82178774h case    2:*/		return 0x82178778;
		  /* 82178778h */ case    3:  		/* bc 4, CR6_EQ, 216 */
		/* 82178778h case    3:*/		if ( !regs.CR[6].eq ) { return 0x82178850;  }
		/* 82178778h case    3:*/		return 0x8217877C;
		  /* 8217877Ch */ case    4:  		/* lwz R6, <#[R29 + 4]> */
		/* 8217877Ch case    4:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R29 + 0x00000004) );
		/* 8217877Ch case    4:*/		return 0x82178780;
		  /* 82178780h */ case    5:  		/* cmplwi CR6, R6, 0 */
		/* 82178780h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 82178780h case    5:*/		return 0x82178784;
		  /* 82178784h */ case    6:  		/* bc 12, CR6_EQ, 204 */
		/* 82178784h case    6:*/		if ( regs.CR[6].eq ) { return 0x82178850;  }
		/* 82178784h case    6:*/		return 0x82178788;
		  /* 82178788h */ case    7:  		/* lwz R31, <#[R6 + 16]> */
		/* 82178788h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R6 + 0x00000010) );
		/* 82178788h case    7:*/		return 0x8217878C;
		  /* 8217878Ch */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 8217878Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217878Ch case    8:*/		return 0x82178790;
		  /* 82178790h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 82178790h case    9:*/		if ( regs.CR[6].eq ) { return 0x821787A4;  }
		/* 82178790h case    9:*/		return 0x82178794;
		  /* 82178794h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 82178794h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82178794h case   10:*/		return 0x82178798;
		  /* 82178798h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82178798h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82178798h case   11:*/		return 0x8217879C;
		  /* 8217879Ch */ case   12:  		/* cmplwi CR6, R11, 14336 */
		/* 8217879Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8217879Ch case   12:*/		return 0x821787A0;
	}
	return 0x821787A0;
} // Block from 8217876Ch-821787A0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821787A0h
// Function '?GetVarIndex@Instruction@D3DXShader@@QAAIPAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821787A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821787A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821787A0);
		  /* 821787A0h */ case    0:  		/* bc 12, CR6_EQ, 12 */
		/* 821787A0h case    0:*/		if ( regs.CR[6].eq ) { return 0x821787AC;  }
		/* 821787A0h case    0:*/		return 0x821787A4;
	}
	return 0x821787A4;
} // Block from 821787A0h-821787A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821787A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821787A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821787A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821787A4);
		  /* 821787A4h */ case    0:  		/* lwz R6, <#[R6 + 8]> */
		/* 821787A4h case    0:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000008) );
		/* 821787A4h case    0:*/		return 0x821787A8;
		  /* 821787A8h */ case    1:  		/* b -40 */
		/* 821787A8h case    1:*/		return 0x82178780;
		/* 821787A8h case    1:*/		return 0x821787AC;
	}
	return 0x821787AC;
} // Block from 821787A4h-821787ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821787ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821787AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821787AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821787AC);
		  /* 821787ACh */ case    0:  		/* addi R7, R31, 4 */
		/* 821787ACh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R31,0x4);
		/* 821787ACh case    0:*/		return 0x821787B0;
		  /* 821787B0h */ case    1:  		/* lwz R11, <#[R7]> */
		/* 821787B0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821787B0h case    1:*/		return 0x821787B4;
		  /* 821787B4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821787B4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821787B4h case    2:*/		return 0x821787B8;
		  /* 821787B8h */ case    3:  		/* bc 12, CR6_EQ, 116 */
		/* 821787B8h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217882C;  }
		/* 821787B8h case    3:*/		return 0x821787BC;
		  /* 821787BCh */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821787BCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821787BCh case    4:*/		return 0x821787C0;
		  /* 821787C0h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821787C0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821787C0h case    5:*/		return 0x821787C4;
		  /* 821787C4h */ case    6:  		/* bc 12, CR6_EQ, 84 */
		/* 821787C4h case    6:*/		if ( regs.CR[6].eq ) { return 0x82178818;  }
		/* 821787C4h case    6:*/		return 0x821787C8;
		  /* 821787C8h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821787C8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821787C8h case    7:*/		return 0x821787CC;
		  /* 821787CCh */ case    8:  		/* mr R9, R29 */
		/* 821787CCh case    8:*/		regs.R9 = regs.R29;
		/* 821787CCh case    8:*/		return 0x821787D0;
		  /* 821787D0h */ case    9:  		/* addi R10, R10, 4 */
		/* 821787D0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821787D0h case    9:*/		return 0x821787D4;
		  /* 821787D4h */ case   10:  		/* lwz R8, <#[R10]> */
		/* 821787D4h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821787D4h case   10:*/		return 0x821787D8;
		  /* 821787D8h */ case   11:  		/* b 12 */
		/* 821787D8h case   11:*/		return 0x821787E4;
		/* 821787D8h case   11:*/		return 0x821787DC;
		  /* 821787DCh */ case   12:  		/* addi R10, R8, 8 */
		/* 821787DCh case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R8,0x8);
		/* 821787DCh case   12:*/		return 0x821787E0;
		  /* 821787E0h */ case   13:  		/* lwz R8, <#[R8 + 8]> */
		/* 821787E0h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 821787E0h case   13:*/		return 0x821787E4;
	}
	return 0x821787E4;
} // Block from 821787ACh-821787E4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821787E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821787E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821787E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821787E4);
		  /* 821787E4h */ case    0:  		/* cmplw CR6, R8, R11 */
		/* 821787E4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821787E4h case    0:*/		return 0x821787E8;
		  /* 821787E8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821787E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821787DC;  }
		/* 821787E8h case    1:*/		return 0x821787EC;
		  /* 821787ECh */ case    2:  		/* lwz R8, <#[R11 + 8]> */
		/* 821787ECh case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821787ECh case    2:*/		return 0x821787F0;
	}
	return 0x821787F0;
} // Block from 821787E4h-821787F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821787F0h
// Function '?GetTFETCHInfo@Instruction@D3DXShader@@QAAPAUInstruction_TFETCH@2@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821787F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821787F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821787F0);
		  /* 821787F0h */ case    0:  		/* stw R8, <#[R10]> */
		/* 821787F0h case    0:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821787F0h case    0:*/		return 0x821787F4;
		  /* 821787F4h */ case    1:  		/* lwz R10, <#[R9 + 4]> */
		/* 821787F4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 821787F4h case    1:*/		return 0x821787F8;
		  /* 821787F8h */ case    2:  		/* stw R10, <#[R11 + 8]> */
		/* 821787F8h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821787F8h case    2:*/		return 0x821787FC;
		  /* 821787FCh */ case    3:  		/* stw R11, <#[R9 + 4]> */
		/* 821787FCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821787FCh case    3:*/		return 0x82178800;
		  /* 82178800h */ case    4:  		/* stw R9, <#[R11 + 12]> */
		/* 82178800h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 82178800h case    4:*/		return 0x82178804;
		  /* 82178804h */ case    5:  		/* lwz R10, <#[R11]> */
		/* 82178804h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82178804h case    5:*/		return 0x82178808;
		  /* 82178808h */ case    6:  		/* lwz R9, <#[R6]> */
		/* 82178808h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 82178808h case    6:*/		return 0x8217880C;
		  /* 8217880Ch */ case    7:  		/* rlwimi R9, R10, 0, 27, 18 */
		/* 8217880Ch case    7:*/		cpu::op::rlwimi<0,0,27,18>(regs,&regs.R9,regs.R10);
		/* 8217880Ch case    7:*/		return 0x82178810;
		  /* 82178810h */ case    8:  		/* stw R9, <#[R11]> */
		/* 82178810h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82178810h case    8:*/		return 0x82178814;
		  /* 82178814h */ case    9:  		/* lwz R29, <#[R1 + 80]> */
		/* 82178814h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82178814h case    9:*/		return 0x82178818;
	}
	return 0x82178818;
} // Block from 821787F0h-82178818h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82178818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178818);
		  /* 82178818h */ case    0:  		/* lwz R10, <#[R7]> */
		/* 82178818h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 82178818h case    0:*/		return 0x8217881C;
		  /* 8217881Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 8217881Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8217881Ch case    1:*/		return 0x82178820;
		  /* 82178820h */ case    2:  		/* bc 4, CR6_EQ, -112 */
		/* 82178820h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821787B0;  }
		/* 82178820h case    2:*/		return 0x82178824;
		  /* 82178824h */ case    3:  		/* addi R7, R11, 8 */
		/* 82178824h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x8);
		/* 82178824h case    3:*/		return 0x82178828;
		  /* 82178828h */ case    4:  		/* b -120 */
		/* 82178828h case    4:*/		return 0x821787B0;
		/* 82178828h case    4:*/		return 0x8217882C;
	}
	return 0x8217882C;
} // Block from 82178818h-8217882Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217882Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217882C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217882C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217882C);
		  /* 8217882Ch */ case    0:  		/* mr R3, R31 */
		/* 8217882Ch case    0:*/		regs.R3 = regs.R31;
		/* 8217882Ch case    0:*/		return 0x82178830;
		  /* 82178830h */ case    1:  		/* bl -81584 */
		/* 82178830h case    1:*/		regs.LR = 0x82178834; return 0x82164980;
		/* 82178830h case    1:*/		return 0x82178834;
		  /* 82178834h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82178834h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82178834h case    2:*/		return 0x82178838;
	}
	return 0x82178838;
} // Block from 8217882Ch-82178838h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82178838h
// Function '?GetNext@DomGraphDepthFirstEnumerator@D3DXShader@@QAAPAVBlock@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178838);
		  /* 82178838h */ case    0:  		/* bc 12, CR0_EQ, -188 */
		/* 82178838h case    0:*/		if ( regs.CR[0].eq ) { return 0x8217877C;  }
		/* 82178838h case    0:*/		return 0x8217883C;
		  /* 8217883Ch */ case    1:  		/* mr R4, R31 */
		/* 8217883Ch case    1:*/		regs.R4 = regs.R31;
		/* 8217883Ch case    1:*/		return 0x82178840;
		  /* 82178840h */ case    2:  		/* mr R3, R27 */
		/* 82178840h case    2:*/		regs.R3 = regs.R27;
		/* 82178840h case    2:*/		return 0x82178844;
		  /* 82178844h */ case    3:  		/* bl 732684 */
		/* 82178844h case    3:*/		regs.LR = 0x82178848; return 0x8222B650;
		/* 82178844h case    3:*/		return 0x82178848;
		  /* 82178848h */ case    4:  		/* lwz R29, <#[R1 + 80]> */
		/* 82178848h case    4:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 82178848h case    4:*/		return 0x8217884C;
		  /* 8217884Ch */ case    5:  		/* b -208 */
		/* 8217884Ch case    5:*/		return 0x8217877C;
		/* 8217884Ch case    5:*/		return 0x82178850;
	}
	return 0x82178850;
} // Block from 82178838h-82178850h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82178850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178850);
		  /* 82178850h */ case    0:  		/* mr R4, R28 */
		/* 82178850h case    0:*/		regs.R4 = regs.R28;
		/* 82178850h case    0:*/		return 0x82178854;
		  /* 82178854h */ case    1:  		/* mr R3, R27 */
		/* 82178854h case    1:*/		regs.R3 = regs.R27;
		/* 82178854h case    1:*/		return 0x82178858;
		  /* 82178858h */ case    2:  		/* bl 732664 */
		/* 82178858h case    2:*/		regs.LR = 0x8217885C; return 0x8222B650;
		/* 82178858h case    2:*/		return 0x8217885C;
		  /* 8217885Ch */ case    3:  		/* addi R1, R1, 144 */
		/* 8217885Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217885Ch case    3:*/		return 0x82178860;
		  /* 82178860h */ case    4:  		/* b -947644 */
		/* 82178860h case    4:*/		return 0x820912A4;
		/* 82178860h case    4:*/		return 0x82178864;
	}
	return 0x82178864;
} // Block from 82178850h-82178864h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82178864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178864);
		  /* 82178864h */ case    0:  		/* li R4, 4800 */
		/* 82178864h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82178864h case    0:*/		return 0x82178868;
		  /* 82178868h */ case    1:  		/* mr R3, R27 */
		/* 82178868h case    1:*/		regs.R3 = regs.R27;
		/* 82178868h case    1:*/		return 0x8217886C;
		  /* 8217886Ch */ case    2:  		/* bl -158212 */
		/* 8217886Ch case    2:*/		regs.LR = 0x82178870; return 0x82151E68;
		/* 8217886Ch case    2:*/		return 0x82178870;
		  /* 82178870h */ case    3:  		/* lwz R11, <#[R3 + 40]> */
		/* 82178870h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 82178870h case    3:*/		return 0x82178874;
		  /* 82178874h */ case    4:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82178874h case    4:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82178874h case    4:*/		return 0x82178878;
		  /* 82178878h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 82178878h case    5:*/		if ( !regs.CR[0].eq ) { return 0x82178898;  }
		/* 82178878h case    5:*/		return 0x8217887C;
		  /* 8217887Ch */ case    6:  		/* lwz R11, <#[R4 + 36]> */
		/* 8217887Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 8217887Ch case    6:*/		return 0x82178880;
		  /* 82178880h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82178880h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82178880h case    7:*/		return 0x82178884;
		  /* 82178884h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 82178884h case    8:*/		if ( regs.CR[0].eq ) { return 0x82178890;  }
		/* 82178884h case    8:*/		return 0x82178888;
		  /* 82178888h */ case    9:  		/* li R3, 0 */
		/* 82178888h case    9:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82178888h case    9:*/		return 0x8217888C;
		  /* 8217888Ch */ case   10:  		/* bclr 20, CR0_LT */
		/* 8217888Ch case   10:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8217888Ch case   10:*/		return 0x82178890;
	}
	return 0x82178890;
} // Block from 82178864h-82178890h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82178890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178890);
		  /* 82178890h */ case    0:  		/* lwz R11, <#[R4 + 32]> */
		/* 82178890h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000020) );
		/* 82178890h case    0:*/		return 0x82178894;
		  /* 82178894h */ case    1:  		/* b 20 */
		/* 82178894h case    1:*/		return 0x821788A8;
		/* 82178894h case    1:*/		return 0x82178898;
	}
	return 0x82178898;
} // Block from 82178890h-82178898h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178898h
// Function '?CreateOutput@Compiler@D3DXShader@@QAAPAVDependency@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178898( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178898) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178898);
		  /* 82178898h */ case    0:  		/* lwz R11, <#[R4 + 28]> */
		/* 82178898h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 82178898h case    0:*/		return 0x8217889C;
		  /* 8217889Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217889Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217889Ch case    1:*/		return 0x821788A0;
		  /* 821788A0h */ case    2:  		/* bc 4, CR0_EQ, -24 */
		/* 821788A0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82178888;  }
		/* 821788A0h case    2:*/		return 0x821788A4;
		  /* 821788A4h */ case    3:  		/* lwz R11, <#[R4 + 24]> */
		/* 821788A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000018) );
		/* 821788A4h case    3:*/		return 0x821788A8;
	}
	return 0x821788A8;
} // Block from 82178898h-821788A8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821788A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821788A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821788A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821788A8);
		  /* 821788A8h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821788A8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821788A8h case    0:*/		return 0x821788AC;
		  /* 821788ACh */ case    1:  		/* addi R3, R11, -40 */
		/* 821788ACh case    1:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFFFD8);
		/* 821788ACh case    1:*/		return 0x821788B0;
		  /* 821788B0h */ case    2:  		/* cmplwi CR6, R3, 0 */
		/* 821788B0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821788B0h case    2:*/		return 0x821788B4;
		  /* 821788B4h */ case    3:  		/* bclr 12, CR6_EQ */
		/* 821788B4h case    3:*/		if ( regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 821788B4h case    3:*/		return 0x821788B8;
	}
	return 0x821788B8;
} // Block from 821788A8h-821788B8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821788B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821788B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821788B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821788B8);
		  /* 821788B8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821788B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821788B8h case    0:*/		return 0x821788BC;
		  /* 821788BCh */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821788BCh case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821788BCh case    1:*/		return 0x821788C0;
		  /* 821788C0h */ case    2:  		/* cmplwi CR6, R11, 86 */
		/* 821788C0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821788C0h case    2:*/		return 0x821788C4;
		  /* 821788C4h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 821788C4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821788F4;  }
		/* 821788C4h case    3:*/		return 0x821788C8;
		  /* 821788C8h */ case    4:  		/* cmplwi CR6, R11, 87 */
		/* 821788C8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821788C8h case    4:*/		return 0x821788CC;
		  /* 821788CCh */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 821788CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x821788F4;  }
		/* 821788CCh case    5:*/		return 0x821788D0;
		  /* 821788D0h */ case    6:  		/* cmplwi CR6, R11, 89 */
		/* 821788D0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821788D0h case    6:*/		return 0x821788D4;
		  /* 821788D4h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 821788D4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821788F4;  }
		/* 821788D4h case    7:*/		return 0x821788D8;
		  /* 821788D8h */ case    8:  		/* cmplwi CR6, R11, 90 */
		/* 821788D8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821788D8h case    8:*/		return 0x821788DC;
		  /* 821788DCh */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 821788DCh case    9:*/		if ( regs.CR[6].eq ) { return 0x821788F4;  }
		/* 821788DCh case    9:*/		return 0x821788E0;
		  /* 821788E0h */ case   10:  		/* cmplwi CR6, R11, 84 */
		/* 821788E0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821788E0h case   10:*/		return 0x821788E4;
		  /* 821788E4h */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 821788E4h case   11:*/		if ( regs.CR[6].eq ) { return 0x821788F4;  }
		/* 821788E4h case   11:*/		return 0x821788E8;
		  /* 821788E8h */ case   12:  		/* cmplwi CR6, R11, 85 */
		/* 821788E8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821788E8h case   12:*/		return 0x821788EC;
		  /* 821788ECh */ case   13:  		/* li R11, 0 */
		/* 821788ECh case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821788ECh case   13:*/		return 0x821788F0;
		  /* 821788F0h */ case   14:  		/* bc 4, CR6_EQ, 8 */
		/* 821788F0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821788F8;  }
		/* 821788F0h case   14:*/		return 0x821788F4;
	}
	return 0x821788F4;
} // Block from 821788B8h-821788F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821788F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821788F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821788F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821788F4);
		  /* 821788F4h */ case    0:  		/* li R11, 1 */
		/* 821788F4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821788F4h case    0:*/		return 0x821788F8;
	}
	return 0x821788F8;
} // Block from 821788F4h-821788F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821788F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821788F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821788F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821788F8);
		  /* 821788F8h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 821788F8h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821788F8h case    0:*/		return 0x821788FC;
		  /* 821788FCh */ case    1:  		/* subfic R11, R11, 0 */
		/* 821788FCh case    1:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x0);
		/* 821788FCh case    1:*/		return 0x82178900;
		  /* 82178900h */ case    2:  		/* subfe R11, R11, R11 */
		/* 82178900h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82178900h case    2:*/		return 0x82178904;
		  /* 82178904h */ case    3:  		/* and R3, R11, R3 */
		/* 82178904h case    3:*/		cpu::op::and<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 82178904h case    3:*/		return 0x82178908;
		  /* 82178908h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82178908h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82178908h case    4:*/		return 0x8217890C;
	}
	return 0x8217890C;
} // Block from 821788F8h-8217890Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217890Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217890C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217890C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217890C);
		  /* 8217890Ch */ case    0:  		/* nop */
		/* 8217890Ch case    0:*/		cpu::op::nop();
		/* 8217890Ch case    0:*/		return 0x82178910;
	}
	return 0x82178910;
} // Block from 8217890Ch-82178910h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178910h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178910);
		  /* 82178910h */ case    0:  		/* mr R10, R3 */
		/* 82178910h case    0:*/		regs.R10 = regs.R3;
		/* 82178910h case    0:*/		return 0x82178914;
		  /* 82178914h */ case    1:  		/* li R11, 0 */
		/* 82178914h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82178914h case    1:*/		return 0x82178918;
		  /* 82178918h */ case    2:  		/* mr R3, R5 */
		/* 82178918h case    2:*/		regs.R3 = regs.R5;
		/* 82178918h case    2:*/		return 0x8217891C;
		  /* 8217891Ch */ case    3:  		/* stw R11, <#[R4 + 16]> */
		/* 8217891Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000010) );
		/* 8217891Ch case    3:*/		return 0x82178920;
		  /* 82178920h */ case    4:  		/* lwz R11, <#[R10]> */
		/* 82178920h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 82178920h case    4:*/		return 0x82178924;
		  /* 82178924h */ case    5:  		/* b 12 */
		/* 82178924h case    5:*/		return 0x82178930;
		/* 82178924h case    5:*/		return 0x82178928;
		  /* 82178928h */ case    6:  		/* addi R10, R11, 4 */
		/* 82178928h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82178928h case    6:*/		return 0x8217892C;
		  /* 8217892Ch */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217892Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217892Ch case    7:*/		return 0x82178930;
	}
	return 0x82178930;
} // Block from 82178910h-82178930h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82178930h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178930( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178930) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178930);
		  /* 82178930h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 82178930h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 82178930h case    0:*/		return 0x82178934;
		  /* 82178934h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82178934h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82178928;  }
		/* 82178934h case    1:*/		return 0x82178938;
		  /* 82178938h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 82178938h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82178938h case    2:*/		return 0x8217893C;
		  /* 8217893Ch */ case    3:  		/* stw R11, <#[R10]> */
		/* 8217893Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8217893Ch case    3:*/		return 0x82178940;
		  /* 82178940h */ case    4:  		/* lwz R11, <#[R4 + 12]> */
		/* 82178940h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 82178940h case    4:*/		return 0x82178944;
		  /* 82178944h */ case    5:  		/* addi R10, R11, 4 */
		/* 82178944h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82178944h case    5:*/		return 0x82178948;
		  /* 82178948h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 82178948h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82178948h case    6:*/		return 0x8217894C;
		  /* 8217894Ch */ case    7:  		/* b 12 */
		/* 8217894Ch case    7:*/		return 0x82178958;
		/* 8217894Ch case    7:*/		return 0x82178950;
		  /* 82178950h */ case    8:  		/* addi R10, R11, 8 */
		/* 82178950h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 82178950h case    8:*/		return 0x82178954;
		  /* 82178954h */ case    9:  		/* lwz R11, <#[R11 + 8]> */
		/* 82178954h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82178954h case    9:*/		return 0x82178958;
	}
	return 0x82178958;
} // Block from 82178930h-82178958h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82178958h
// Function '?CreateOutput@Compiler@D3DXShader@@QAAPAVDependency@2@PAVInstruction@2@III@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178958);
		  /* 82178958h */ case    0:  		/* cmplw CR6, R11, R4 */
		/* 82178958h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R4);
		/* 82178958h case    0:*/		return 0x8217895C;
		  /* 8217895Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8217895Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82178950;  }
		/* 8217895Ch case    1:*/		return 0x82178960;
		  /* 82178960h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 82178960h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 82178960h case    2:*/		return 0x82178964;
		  /* 82178964h */ case    3:  		/* li R6, 26 */
		/* 82178964h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 82178964h case    3:*/		return 0x82178968;
		  /* 82178968h */ case    4:  		/* li R5, 20 */
		/* 82178968h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 82178968h case    4:*/		return 0x8217896C;
		  /* 8217896Ch */ case    5:  		/* stw R11, <#[R10]> */
		/* 8217896Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8217896Ch case    5:*/		return 0x82178970;
		  /* 82178970h */ case    6:  		/* b -81112 */
		/* 82178970h case    6:*/		return 0x82164C98;
		/* 82178970h case    6:*/		return 0x82178974;
		  /* 82178974h */ case    7:  		/* nop */
		/* 82178974h case    7:*/		cpu::op::nop();
		/* 82178974h case    7:*/		return 0x82178978;
	}
	return 0x82178978;
} // Block from 82178958h-82178978h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82178978h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178978);
		  /* 82178978h */ case    0:  		/* mfspr R12, LR */
		/* 82178978h case    0:*/		regs.R12 = regs.LR;
		/* 82178978h case    0:*/		return 0x8217897C;
		  /* 8217897Ch */ case    1:  		/* bl -948004 */
		/* 8217897Ch case    1:*/		regs.LR = 0x82178980; return 0x82091258;
		/* 8217897Ch case    1:*/		return 0x82178980;
		  /* 82178980h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82178980h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82178980h case    2:*/		return 0x82178984;
		  /* 82178984h */ case    3:  		/* mr R29, R3 */
		/* 82178984h case    3:*/		regs.R29 = regs.R3;
		/* 82178984h case    3:*/		return 0x82178988;
		  /* 82178988h */ case    4:  		/* mr R30, R4 */
		/* 82178988h case    4:*/		regs.R30 = regs.R4;
		/* 82178988h case    4:*/		return 0x8217898C;
		  /* 8217898Ch */ case    5:  		/* mr R31, R5 */
		/* 8217898Ch case    5:*/		regs.R31 = regs.R5;
		/* 8217898Ch case    5:*/		return 0x82178990;
		  /* 82178990h */ case    6:  		/* mr R28, R6 */
		/* 82178990h case    6:*/		regs.R28 = regs.R6;
		/* 82178990h case    6:*/		return 0x82178994;
		  /* 82178994h */ case    7:  		/* bl -1660 */
		/* 82178994h case    7:*/		regs.LR = 0x82178998; return 0x82178318;
		/* 82178994h case    7:*/		return 0x82178998;
		  /* 82178998h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 82178998h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82178998h case    8:*/		return 0x8217899C;
		  /* 8217899Ch */ case    9:  		/* bc 12, CR0_EQ, 36 */
		/* 8217899Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821789C0;  }
		/* 8217899Ch case    9:*/		return 0x821789A0;
		  /* 821789A0h */ case   10:  		/* lwz R11, <#[R3 + 12]> */
		/* 821789A0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821789A0h case   10:*/		return 0x821789A4;
		  /* 821789A4h */ case   11:  		/* cmplw CR6, R11, R31 */
		/* 821789A4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821789A4h case   11:*/		return 0x821789A8;
	}
	return 0x821789A8;
} // Block from 82178978h-821789A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821789A8h
// Function '?CreateScalarOutput@Compiler@D3DXShader@@QAAPAVDependency@2@PAVInstruction@2@W4Component@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821789A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821789A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821789A8);
		  /* 821789A8h */ case    0:  		/* bc 12, CR6_EQ, 88 */
		/* 821789A8h case    0:*/		if ( regs.CR[6].eq ) { return 0x82178A00;  }
		/* 821789A8h case    0:*/		return 0x821789AC;
		  /* 821789ACh */ case    1:  		/* rlwinm R11, R29, 0, 0, 19 */
		/* 821789ACh case    1:*/		cpu::op::rlwinm<0,0,0,19>(regs,&regs.R11,regs.R29);
		/* 821789ACh case    1:*/		return 0x821789B0;
		  /* 821789B0h */ case    2:  		/* li R4, 4800 */
		/* 821789B0h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821789B0h case    2:*/		return 0x821789B4;
		  /* 821789B4h */ case    3:  		/* lwz R11, <#[R11]> */
		/* 821789B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821789B4h case    3:*/		return 0x821789B8;
		  /* 821789B8h */ case    4:  		/* lwz R3, <#[R11 + 148]> */
		/* 821789B8h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x00000094) );
		/* 821789B8h case    4:*/		return 0x821789BC;
		  /* 821789BCh */ case    5:  		/* bl -158548 */
		/* 821789BCh case    5:*/		regs.LR = 0x821789C0; return 0x82151E68;
		/* 821789BCh case    5:*/		return 0x821789C0;
	}
	return 0x821789C0;
} // Block from 821789A8h-821789C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821789C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821789C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821789C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821789C0);
		  /* 821789C0h */ case    0:  		/* li R5, 26 */
		/* 821789C0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x1A);
		/* 821789C0h case    0:*/		return 0x821789C4;
		  /* 821789C4h */ case    1:  		/* li R4, 20 */
		/* 821789C4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x14);
		/* 821789C4h case    1:*/		return 0x821789C8;
		  /* 821789C8h */ case    2:  		/* mr R3, R28 */
		/* 821789C8h case    2:*/		regs.R3 = regs.R28;
		/* 821789C8h case    2:*/		return 0x821789CC;
		  /* 821789CCh */ case    3:  		/* bl -48676 */
		/* 821789CCh case    3:*/		regs.LR = 0x821789D0; return 0x8216CBA8;
		/* 821789CCh case    3:*/		return 0x821789D0;
		  /* 821789D0h */ case    4:  		/* mr R11, R3 */
		/* 821789D0h case    4:*/		regs.R11 = regs.R3;
		/* 821789D0h case    4:*/		return 0x821789D4;
		  /* 821789D4h */ case    5:  		/* addi R10, R30, 1 */
		/* 821789D4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0x1);
		/* 821789D4h case    5:*/		return 0x821789D8;
		  /* 821789D8h */ case    6:  		/* mr R3, R29 */
		/* 821789D8h case    6:*/		regs.R3 = regs.R29;
		/* 821789D8h case    6:*/		return 0x821789DC;
		  /* 821789DCh */ case    7:  		/* mr R4, R11 */
		/* 821789DCh case    7:*/		regs.R4 = regs.R11;
		/* 821789DCh case    7:*/		return 0x821789E0;
		  /* 821789E0h */ case    8:  		/* lwz R9, <#[R11]> */
		/* 821789E0h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821789E0h case    8:*/		return 0x821789E4;
		  /* 821789E4h */ case    9:  		/* stw R31, <#[R11 + 12]> */
		/* 821789E4h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821789E4h case    9:*/		return 0x821789E8;
		  /* 821789E8h */ case   10:  		/* rlwimi R9, R10, 13, 7, 18 */
		/* 821789E8h case   10:*/		cpu::op::rlwimi<0,13,7,18>(regs,&regs.R9,regs.R10);
		/* 821789E8h case   10:*/		return 0x821789EC;
		  /* 821789ECh */ case   11:  		/* stw R9, <#[R11]> */
		/* 821789ECh case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821789ECh case   11:*/		return 0x821789F0;
		  /* 821789F0h */ case   12:  		/* lwz R10, <#[R31 + 4]> */
		/* 821789F0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821789F0h case   12:*/		return 0x821789F4;
		  /* 821789F4h */ case   13:  		/* stw R10, <#[R11 + 8]> */
		/* 821789F4h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821789F4h case   13:*/		return 0x821789F8;
		  /* 821789F8h */ case   14:  		/* stw R11, <#[R31 + 4]> */
		/* 821789F8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821789F8h case   14:*/		return 0x821789FC;
		  /* 821789FCh */ case   15:  		/* bl -2100 */
		/* 821789FCh case   15:*/		regs.LR = 0x82178A00; return 0x821781C8;
		/* 821789FCh case   15:*/		return 0x82178A00;
	}
	return 0x82178A00;
} // Block from 821789C0h-82178A00h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82178A00h
// Function '?CreateScalarOutput@Compiler@D3DXShader@@QAAPAVDependency@2@PAVInstruction@2@W4Component@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178A00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178A00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178A00);
		  /* 82178A00h */ case    0:  		/* addi R1, R1, 128 */
		/* 82178A00h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82178A00h case    0:*/		return 0x82178A04;
		  /* 82178A04h */ case    1:  		/* b -948060 */
		/* 82178A04h case    1:*/		return 0x820912A8;
		/* 82178A04h case    1:*/		return 0x82178A08;
	}
	return 0x82178A08;
} // Block from 82178A00h-82178A08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178A08);
		  /* 82178A08h */ case    0:  		/* mfspr R12, LR */
		/* 82178A08h case    0:*/		regs.R12 = regs.LR;
		/* 82178A08h case    0:*/		return 0x82178A0C;
		  /* 82178A0Ch */ case    1:  		/* bl -948156 */
		/* 82178A0Ch case    1:*/		regs.LR = 0x82178A10; return 0x82091250;
		/* 82178A0Ch case    1:*/		return 0x82178A10;
		  /* 82178A10h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82178A10h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82178A10h case    2:*/		return 0x82178A14;
		  /* 82178A14h */ case    3:  		/* mr R26, R3 */
		/* 82178A14h case    3:*/		regs.R26 = regs.R3;
		/* 82178A14h case    3:*/		return 0x82178A18;
		  /* 82178A18h */ case    4:  		/* mr R3, R4 */
		/* 82178A18h case    4:*/		regs.R3 = regs.R4;
		/* 82178A18h case    4:*/		return 0x82178A1C;
		  /* 82178A1Ch */ case    5:  		/* mr R29, R4 */
		/* 82178A1Ch case    5:*/		regs.R29 = regs.R4;
		/* 82178A1Ch case    5:*/		return 0x82178A20;
		  /* 82178A20h */ case    6:  		/* bl -48616 */
		/* 82178A20h case    6:*/		regs.LR = 0x82178A24; return 0x8216CC38;
		/* 82178A20h case    6:*/		return 0x82178A24;
		  /* 82178A24h */ case    7:  		/* lwz R28, <#[R3 + 12]> */
		/* 82178A24h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R3 + 0x0000000C) );
		/* 82178A24h case    7:*/		return 0x82178A28;
		  /* 82178A28h */ case    8:  		/* mr R31, R3 */
		/* 82178A28h case    8:*/		regs.R31 = regs.R3;
		/* 82178A28h case    8:*/		return 0x82178A2C;
		  /* 82178A2Ch */ case    9:  		/* mr R4, R26 */
		/* 82178A2Ch case    9:*/		regs.R4 = regs.R26;
		/* 82178A2Ch case    9:*/		return 0x82178A30;
		  /* 82178A30h */ case   10:  		/* mr R3, R28 */
		/* 82178A30h case   10:*/		regs.R3 = regs.R28;
		/* 82178A30h case   10:*/		return 0x82178A34;
		  /* 82178A34h */ case   11:  		/* bl 722884 */
		/* 82178A34h case   11:*/		regs.LR = 0x82178A38; return 0x822291F8;
		/* 82178A34h case   11:*/		return 0x82178A38;
		  /* 82178A38h */ case   12:  		/* or. R30, R3, R3 */
		/* 82178A38h case   12:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 82178A38h case   12:*/		return 0x82178A3C;
		  /* 82178A3Ch */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 82178A3Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x82178A4C;  }
		/* 82178A3Ch case   13:*/		return 0x82178A40;
		  /* 82178A40h */ case   14:  		/* li R4, 4800 */
		/* 82178A40h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82178A40h case   14:*/		return 0x82178A44;
		  /* 82178A44h */ case   15:  		/* mr R3, R26 */
		/* 82178A44h case   15:*/		regs.R3 = regs.R26;
		/* 82178A44h case   15:*/		return 0x82178A48;
		  /* 82178A48h */ case   16:  		/* bl -158688 */
		/* 82178A48h case   16:*/		regs.LR = 0x82178A4C; return 0x82151E68;
		/* 82178A48h case   16:*/		return 0x82178A4C;
	}
	return 0x82178A4C;
} // Block from 82178A08h-82178A4Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 82178A4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178A4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178A4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178A4C);
		  /* 82178A4Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82178A4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82178A4Ch case    0:*/		return 0x82178A50;
		  /* 82178A50h */ case    1:  		/* addi R11, R11, 4 */
		/* 82178A50h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82178A50h case    1:*/		return 0x82178A54;
		  /* 82178A54h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82178A54h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82178A54h case    2:*/		return 0x82178A58;
		  /* 82178A58h */ case    3:  		/* b 12 */
		/* 82178A58h case    3:*/		return 0x82178A64;
		/* 82178A58h case    3:*/		return 0x82178A5C;
		  /* 82178A5Ch */ case    4:  		/* addi R11, R10, 8 */
		/* 82178A5Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 82178A5Ch case    4:*/		return 0x82178A60;
	}
	return 0x82178A60;
} // Block from 82178A4Ch-82178A60h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82178A60h
// Function '?AddDependency@Instruction@D3DXShader@@QAAPAVDependency@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178A60);
		  /* 82178A60h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 82178A60h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82178A60h case    0:*/		return 0x82178A64;
	}
	return 0x82178A64;
} // Block from 82178A60h-82178A64h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178A64);
		  /* 82178A64h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 82178A64h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82178A64h case    0:*/		return 0x82178A68;
		  /* 82178A68h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82178A68h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82178A5C;  }
		/* 82178A68h case    1:*/		return 0x82178A6C;
		  /* 82178A6Ch */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 82178A6Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82178A6Ch case    2:*/		return 0x82178A70;
		  /* 82178A70h */ case    3:  		/* addi R27, R28, 4 */
		/* 82178A70h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0x4);
		/* 82178A70h case    3:*/		return 0x82178A74;
		  /* 82178A74h */ case    4:  		/* stw R10, <#[R11]> */
		/* 82178A74h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82178A74h case    4:*/		return 0x82178A78;
		  /* 82178A78h */ case    5:  		/* lwz R11, <#[R30 + 4]> */
		/* 82178A78h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82178A78h case    5:*/		return 0x82178A7C;
		  /* 82178A7Ch */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 82178A7Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82178A7Ch case    6:*/		return 0x82178A80;
		  /* 82178A80h */ case    7:  		/* stw R31, <#[R30 + 4]> */
		/* 82178A80h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 82178A80h case    7:*/		return 0x82178A84;
		  /* 82178A84h */ case    8:  		/* stw R30, <#[R31 + 12]> */
		/* 82178A84h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82178A84h case    8:*/		return 0x82178A88;
		  /* 82178A88h */ case    9:  		/* lwz R11, <#[R29 + 8]> */
		/* 82178A88h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82178A88h case    9:*/		return 0x82178A8C;
		  /* 82178A8Ch */ case   10:  		/* nor R10, R11, R11 */
		/* 82178A8Ch case   10:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 82178A8Ch case   10:*/		return 0x82178A90;
		  /* 82178A90h */ case   11:  		/* rlwimi R10, R11, 0, 14, 12 */
		/* 82178A90h case   11:*/		cpu::op::rlwimi<0,0,14,12>(regs,&regs.R10,regs.R11);
		/* 82178A90h case   11:*/		return 0x82178A94;
		  /* 82178A94h */ case   12:  		/* stw R10, <#[R29 + 8]> */
		/* 82178A94h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 82178A94h case   12:*/		return 0x82178A98;
		  /* 82178A98h */ case   13:  		/* lwz R31, <#[R27]> */
		/* 82178A98h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 82178A98h case   13:*/		return 0x82178A9C;
		  /* 82178A9Ch */ case   14:  		/* cmplwi CR6, R31, 0 */
		/* 82178A9Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82178A9Ch case   14:*/		return 0x82178AA0;
		  /* 82178AA0h */ case   15:  		/* bc 12, CR6_EQ, 228 */
		/* 82178AA0h case   15:*/		if ( regs.CR[6].eq ) { return 0x82178B84;  }
		/* 82178AA0h case   15:*/		return 0x82178AA4;
		  /* 82178AA4h */ case   16:  		/* lwz R29, <#[R31 + 16]> */
		/* 82178AA4h case   16:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000010) );
		/* 82178AA4h case   16:*/		return 0x82178AA8;
		  /* 82178AA8h */ case   17:  		/* cmplwi CR6, R29, 0 */
		/* 82178AA8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82178AA8h case   17:*/		return 0x82178AAC;
		  /* 82178AACh */ case   18:  		/* bc 12, CR6_EQ, 196 */
		/* 82178AACh case   18:*/		if ( regs.CR[6].eq ) { return 0x82178B70;  }
		/* 82178AACh case   18:*/		return 0x82178AB0;
		  /* 82178AB0h */ case   19:  		/* lwz R10, <#[R31]> */
		/* 82178AB0h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 82178AB0h case   19:*/		return 0x82178AB4;
		  /* 82178AB4h */ case   20:  		/* rlwinm. R11, R10, 0, 1, 1 */
		/* 82178AB4h case   20:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R10);
		/* 82178AB4h case   20:*/		return 0x82178AB8;
		  /* 82178AB8h */ case   21:  		/* bc 12, CR0_EQ, 16 */
		/* 82178AB8h case   21:*/		if ( regs.CR[0].eq ) { return 0x82178AC8;  }
		/* 82178AB8h case   21:*/		return 0x82178ABC;
		  /* 82178ABCh */ case   22:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 82178ABCh case   22:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 82178ABCh case   22:*/		return 0x82178AC0;
	}
	return 0x82178AC0;
} // Block from 82178A64h-82178AC0h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82178AC0h
// Function '?AddNewOrderingDependency@Instruction@D3DXShader@@QAAPAVDependency@2@PAV12@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178AC0);
		  /* 82178AC0h */ case    0:  		/* li R11, 1 */
		/* 82178AC0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82178AC0h case    0:*/		return 0x82178AC4;
		  /* 82178AC4h */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 82178AC4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82178ACC;  }
		/* 82178AC4h case    1:*/		return 0x82178AC8;
	}
	return 0x82178AC8;
} // Block from 82178AC0h-82178AC8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178AC8);
		  /* 82178AC8h */ case    0:  		/* li R11, 0 */
		/* 82178AC8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82178AC8h case    0:*/		return 0x82178ACC;
	}
	return 0x82178ACC;
} // Block from 82178AC8h-82178ACCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178ACC);
		  /* 82178ACCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82178ACCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82178ACCh case    0:*/		return 0x82178AD0;
		  /* 82178AD0h */ case    1:  		/* bc 12, CR0_EQ, 160 */
		/* 82178AD0h case    1:*/		if ( regs.CR[0].eq ) { return 0x82178B70;  }
		/* 82178AD0h case    1:*/		return 0x82178AD4;
		  /* 82178AD4h */ case    2:  		/* rlwinm R11, R10, 0, 7, 18 */
		/* 82178AD4h case    2:*/		cpu::op::rlwinm<0,0,7,18>(regs,&regs.R11,regs.R10);
		/* 82178AD4h case    2:*/		return 0x82178AD8;
		  /* 82178AD8h */ case    3:  		/* cmplwi CR6, R11, 57344 */
		/* 82178AD8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000E000);
		/* 82178AD8h case    3:*/		return 0x82178ADC;
		  /* 82178ADCh */ case    4:  		/* bc 4, CR6_EQ, 148 */
		/* 82178ADCh case    4:*/		if ( !regs.CR[6].eq ) { return 0x82178B70;  }
		/* 82178ADCh case    4:*/		return 0x82178AE0;
		  /* 82178AE0h */ case    5:  		/* lwz R11, <#[R29 + 8]> */
		/* 82178AE0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82178AE0h case    5:*/		return 0x82178AE4;
		  /* 82178AE4h */ case    6:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 82178AE4h case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 82178AE4h case    6:*/		return 0x82178AE8;
		  /* 82178AE8h */ case    7:  		/* cmplwi CR6, R10, 14976 */
		/* 82178AE8h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003A80);
		/* 82178AE8h case    7:*/		return 0x82178AEC;
		  /* 82178AECh */ case    8:  		/* bc 4, CR6_EQ, 132 */
		/* 82178AECh case    8:*/		if ( !regs.CR[6].eq ) { return 0x82178B70;  }
		/* 82178AECh case    8:*/		return 0x82178AF0;
		  /* 82178AF0h */ case    9:  		/* rlwinm. R11, R11, 15, 31, 31 */
		/* 82178AF0h case    9:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R11);
		/* 82178AF0h case    9:*/		return 0x82178AF4;
		  /* 82178AF4h */ case   10:  		/* bc 12, CR0_EQ, 124 */
		/* 82178AF4h case   10:*/		if ( regs.CR[0].eq ) { return 0x82178B70;  }
		/* 82178AF4h case   10:*/		return 0x82178AF8;
		  /* 82178AF8h */ case   11:  		/* li R6, 0 */
		/* 82178AF8h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82178AF8h case   11:*/		return 0x82178AFC;
		  /* 82178AFCh */ case   12:  		/* mr R5, R29 */
		/* 82178AFCh case   12:*/		regs.R5 = regs.R29;
		/* 82178AFCh case   12:*/		return 0x82178B00;
		  /* 82178B00h */ case   13:  		/* mr R4, R30 */
		/* 82178B00h case   13:*/		regs.R4 = regs.R30;
		/* 82178B00h case   13:*/		return 0x82178B04;
		  /* 82178B04h */ case   14:  		/* mr R3, R26 */
		/* 82178B04h case   14:*/		regs.R3 = regs.R26;
		/* 82178B04h case   14:*/		return 0x82178B08;
		  /* 82178B08h */ case   15:  		/* bl 735584 */
		/* 82178B08h case   15:*/		regs.LR = 0x82178B0C; return 0x8222C468;
		/* 82178B08h case   15:*/		return 0x82178B0C;
		  /* 82178B0Ch */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82178B0Ch case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82178B0Ch case   16:*/		return 0x82178B10;
		  /* 82178B10h */ case   17:  		/* bc 12, CR0_EQ, 96 */
		/* 82178B10h case   17:*/		if ( regs.CR[0].eq ) { return 0x82178B70;  }
		/* 82178B10h case   17:*/		return 0x82178B14;
		  /* 82178B14h */ case   18:  		/* li R6, 0 */
		/* 82178B14h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82178B14h case   18:*/		return 0x82178B18;
		  /* 82178B18h */ case   19:  		/* mr R5, R29 */
		/* 82178B18h case   19:*/		regs.R5 = regs.R29;
		/* 82178B18h case   19:*/		return 0x82178B1C;
		  /* 82178B1Ch */ case   20:  		/* mr R4, R30 */
		/* 82178B1Ch case   20:*/		regs.R4 = regs.R30;
		/* 82178B1Ch case   20:*/		return 0x82178B20;
		  /* 82178B20h */ case   21:  		/* mr R3, R26 */
		/* 82178B20h case   21:*/		regs.R3 = regs.R26;
		/* 82178B20h case   21:*/		return 0x82178B24;
		  /* 82178B24h */ case   22:  		/* bl 741660 */
		/* 82178B24h case   22:*/		regs.LR = 0x82178B28; return 0x8222DC40;
		/* 82178B24h case   22:*/		return 0x82178B28;
	}
	return 0x82178B28;
} // Block from 82178ACCh-82178B28h (23 instructions)

//////////////////////////////////////////////////////
// Block at 82178B28h
// Function '?AddOrderingDependency@Instruction@D3DXShader@@QAAPAVDependency@2@PAV12@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178B28);
		  /* 82178B28h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 82178B28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 82178B28h case    0:*/		return 0x82178B2C;
		  /* 82178B2Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 82178B2Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 82178B2Ch case    1:*/		return 0x82178B30;
		  /* 82178B30h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 82178B30h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82178B30h case    2:*/		return 0x82178B34;
		  /* 82178B34h */ case    3:  		/* b 12 */
		/* 82178B34h case    3:*/		return 0x82178B40;
		/* 82178B34h case    3:*/		return 0x82178B38;
		  /* 82178B38h */ case    4:  		/* addi R11, R10, 8 */
		/* 82178B38h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 82178B38h case    4:*/		return 0x82178B3C;
		  /* 82178B3Ch */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 82178B3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82178B3Ch case    5:*/		return 0x82178B40;
	}
	return 0x82178B40;
} // Block from 82178B28h-82178B40h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82178B40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178B40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178B40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178B40);
		  /* 82178B40h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 82178B40h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82178B40h case    0:*/		return 0x82178B44;
		  /* 82178B44h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82178B44h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82178B38;  }
		/* 82178B44h case    1:*/		return 0x82178B48;
		  /* 82178B48h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 82178B48h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82178B48h case    2:*/		return 0x82178B4C;
		  /* 82178B4Ch */ case    3:  		/* stw R10, <#[R11]> */
		/* 82178B4Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82178B4Ch case    3:*/		return 0x82178B50;
		  /* 82178B50h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 82178B50h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 82178B50h case    4:*/		return 0x82178B54;
		  /* 82178B54h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 82178B54h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82178B54h case    5:*/		return 0x82178B58;
		  /* 82178B58h */ case    6:  		/* stw R31, <#[R30 + 4]> */
		/* 82178B58h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 82178B58h case    6:*/		return 0x82178B5C;
		  /* 82178B5Ch */ case    7:  		/* stw R30, <#[R31 + 12]> */
		/* 82178B5Ch case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 82178B5Ch case    7:*/		return 0x82178B60;
		  /* 82178B60h */ case    8:  		/* lwz R11, <#[R29 + 8]> */
		/* 82178B60h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82178B60h case    8:*/		return 0x82178B64;
		  /* 82178B64h */ case    9:  		/* nor R10, R11, R11 */
		/* 82178B64h case    9:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 82178B64h case    9:*/		return 0x82178B68;
		  /* 82178B68h */ case   10:  		/* rlwimi R10, R11, 0, 14, 12 */
		/* 82178B68h case   10:*/		cpu::op::rlwimi<0,0,14,12>(regs,&regs.R10,regs.R11);
		/* 82178B68h case   10:*/		return 0x82178B6C;
		  /* 82178B6Ch */ case   11:  		/* stw R10, <#[R29 + 8]> */
		/* 82178B6Ch case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 82178B6Ch case   11:*/		return 0x82178B70;
	}
	return 0x82178B70;
} // Block from 82178B40h-82178B70h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82178B70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178B70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178B70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178B70);
		  /* 82178B70h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 82178B70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 82178B70h case    0:*/		return 0x82178B74;
		  /* 82178B74h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 82178B74h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 82178B74h case    1:*/		return 0x82178B78;
		  /* 82178B78h */ case    2:  		/* bc 4, CR6_EQ, -224 */
		/* 82178B78h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82178A98;  }
		/* 82178B78h case    2:*/		return 0x82178B7C;
		  /* 82178B7Ch */ case    3:  		/* addi R27, R31, 8 */
		/* 82178B7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0x8);
		/* 82178B7Ch case    3:*/		return 0x82178B80;
		  /* 82178B80h */ case    4:  		/* b -232 */
		/* 82178B80h case    4:*/		return 0x82178A98;
		/* 82178B80h case    4:*/		return 0x82178B84;
	}
	return 0x82178B84;
} // Block from 82178B70h-82178B84h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82178B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178B84);
		  /* 82178B84h */ case    0:  		/* lbz R11, <#[R28 + 8]> */
		/* 82178B84h case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 82178B84h case    0:*/		return 0x82178B88;
		  /* 82178B88h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82178B88h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82178B88h case    1:*/		return 0x82178B8C;
		  /* 82178B8Ch */ case    2:  		/* bc 12, CR0_EQ, 196 */
		/* 82178B8Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x82178C50;  }
		/* 82178B8Ch case    2:*/		return 0x82178B90;
		  /* 82178B90h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 82178B90h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82178B90h case    3:*/		return 0x82178B94;
		  /* 82178B94h */ case    4:  		/* oris R11, R11, 256 */
		/* 82178B94h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 82178B94h case    4:*/		return 0x82178B98;
		  /* 82178B98h */ case    5:  		/* stw R11, <#[R30 + 8]> */
		/* 82178B98h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82178B98h case    5:*/		return 0x82178B9C;
		  /* 82178B9Ch */ case    6:  		/* lwz R11, <#[R26 + 40]> */
		/* 82178B9Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 82178B9Ch case    6:*/		return 0x82178BA0;
		  /* 82178BA0h */ case    7:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82178BA0h case    7:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82178BA0h case    7:*/		return 0x82178BA4;
		  /* 82178BA4h */ case    8:  		/* bc 12, CR0_EQ, 136 */
		/* 82178BA4h case    8:*/		if ( regs.CR[0].eq ) { return 0x82178C2C;  }
		/* 82178BA4h case    8:*/		return 0x82178BA8;
		  /* 82178BA8h */ case    9:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 82178BA8h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 82178BA8h case    9:*/		return 0x82178BAC;
		  /* 82178BACh */ case   10:  		/* rlwinm R10, R28, 0, 0, 30 */
		/* 82178BACh case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R28);
		/* 82178BACh case   10:*/		return 0x82178BB0;
	}
	return 0x82178BB0;
} // Block from 82178B84h-82178BB0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82178BB0h
// Function '?FindPrevSideEffectDependency@Instruction@D3DXShader@@QAAPAVDependency@2@W4SideEffect@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178BB0);
		  /* 82178BB0h */ case    0:  		/* addi R11, R11, 36 */
		/* 82178BB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82178BB0h case    0:*/		return 0x82178BB4;
		  /* 82178BB4h */ case    1:  		/* addi R10, R10, 36 */
		/* 82178BB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 82178BB4h case    1:*/		return 0x82178BB8;
		  /* 82178BB8h */ case    2:  		/* addi R9, R11, 4 */
		/* 82178BB8h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82178BB8h case    2:*/		return 0x82178BBC;
		  /* 82178BBCh */ case    3:  		/* addi R8, R10, 4 */
		/* 82178BBCh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82178BBCh case    3:*/		return 0x82178BC0;
		  /* 82178BC0h */ case    4:  		/* addi R7, R11, -36 */
		/* 82178BC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 82178BC0h case    4:*/		return 0x82178BC4;
		  /* 82178BC4h */ case    5:  		/* lwz R6, <#[R11 + 4]> */
		/* 82178BC4h case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82178BC4h case    5:*/		return 0x82178BC8;
		  /* 82178BC8h */ case    6:  		/* lwz R5, <#[R11]> */
		/* 82178BC8h case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 82178BC8h case    6:*/		return 0x82178BCC;
		  /* 82178BCCh */ case    7:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 82178BCCh case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 82178BCCh case    7:*/		return 0x82178BD0;
		  /* 82178BD0h */ case    8:  		/* stw R5, <#[R6 + 36]> */
		/* 82178BD0h case    8:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R6 + 0x00000024) );
		/* 82178BD0h case    8:*/		return 0x82178BD4;
		  /* 82178BD4h */ case    9:  		/* lwz R6, <#[R11]> */
		/* 82178BD4h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82178BD4h case    9:*/		return 0x82178BD8;
		  /* 82178BD8h */ case   10:  		/* lwz R5, <#[R11 + 4]> */
		/* 82178BD8h case   10:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000004) );
		/* 82178BD8h case   10:*/		return 0x82178BDC;
		  /* 82178BDCh */ case   11:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 82178BDCh case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 82178BDCh case   11:*/		return 0x82178BE0;
		  /* 82178BE0h */ case   12:  		/* stw R5, <#[R6]> */
		/* 82178BE0h case   12:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R6 + 0x00000000) );
		/* 82178BE0h case   12:*/		return 0x82178BE4;
		  /* 82178BE4h */ case   13:  		/* lwz R6, <#[R10 + 4]> */
		/* 82178BE4h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 82178BE4h case   13:*/		return 0x82178BE8;
		  /* 82178BE8h */ case   14:  		/* stw R6, <#[R11 + 4]> */
		/* 82178BE8h case   14:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82178BE8h case   14:*/		return 0x82178BEC;
		  /* 82178BECh */ case   15:  		/* lwz R6, <#[R10 + 4]> */
		/* 82178BECh case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 82178BECh case   15:*/		return 0x82178BF0;
		  /* 82178BF0h */ case   16:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 82178BF0h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 82178BF0h case   16:*/		return 0x82178BF4;
		  /* 82178BF4h */ case   17:  		/* stw R9, <#[R6 + 36]> */
		/* 82178BF4h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000024) );
		/* 82178BF4h case   17:*/		return 0x82178BF8;
		  /* 82178BF8h */ case   18:  		/* stw R8, <#[R11]> */
		/* 82178BF8h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82178BF8h case   18:*/		return 0x82178BFC;
		  /* 82178BFCh */ case   19:  		/* stw R7, <#[R10 + 4]> */
		/* 82178BFCh case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 82178BFCh case   19:*/		return 0x82178C00;
		  /* 82178C00h */ case   20:  		/* lbz R11, <#[R28 + 16]> */
		/* 82178C00h case   20:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 82178C00h case   20:*/		return 0x82178C04;
		  /* 82178C04h */ case   21:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82178C04h case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82178C04h case   21:*/		return 0x82178C08;
		  /* 82178C08h */ case   22:  		/* bc 12, CR0_EQ, 36 */
		/* 82178C08h case   22:*/		if ( regs.CR[0].eq ) { return 0x82178C2C;  }
		/* 82178C08h case   22:*/		return 0x82178C0C;
		  /* 82178C0Ch */ case   23:  		/* lwz R11, <#[R28 + 20]> */
		/* 82178C0Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 82178C0Ch case   23:*/		return 0x82178C10;
	}
	return 0x82178C10;
} // Block from 82178BB0h-82178C10h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82178C10h
// Function '?RecomputeWriteMask@Instruction@D3DXShader@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178C10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178C10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178C10);
		  /* 82178C10h */ case    0:  		/* lwz R10, <#[R30 + 16]> */
		/* 82178C10h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82178C10h case    0:*/		return 0x82178C14;
		  /* 82178C14h */ case    1:  		/* lwz R9, <#[R30 + 20]> */
		/* 82178C14h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000014) );
		/* 82178C14h case    1:*/		return 0x82178C18;
		  /* 82178C18h */ case    2:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 82178C18h case    2:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 82178C18h case    2:*/		return 0x82178C1C;
		  /* 82178C1Ch */ case    3:  		/* oris R10, R10, 256 */
		/* 82178C1Ch case    3:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x100);
		/* 82178C1Ch case    3:*/		return 0x82178C20;
		  /* 82178C20h */ case    4:  		/* rlwimi R11, R9, 0, 0, 18 */
		/* 82178C20h case    4:*/		cpu::op::rlwimi<0,0,0,18>(regs,&regs.R11,regs.R9);
		/* 82178C20h case    4:*/		return 0x82178C24;
		  /* 82178C24h */ case    5:  		/* stw R10, <#[R30 + 16]> */
		/* 82178C24h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 82178C24h case    5:*/		return 0x82178C28;
		  /* 82178C28h */ case    6:  		/* stw R11, <#[R30 + 20]> */
		/* 82178C28h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 82178C28h case    6:*/		return 0x82178C2C;
	}
	return 0x82178C2C;
} // Block from 82178C10h-82178C2Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 82178C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178C2C);
		  /* 82178C2Ch */ case    0:  		/* mr R3, R28 */
		/* 82178C2Ch case    0:*/		regs.R3 = regs.R28;
		/* 82178C2Ch case    0:*/		return 0x82178C30;
		  /* 82178C30h */ case    1:  		/* bl -82608 */
		/* 82178C30h case    1:*/		regs.LR = 0x82178C34; return 0x82164980;
		/* 82178C30h case    1:*/		return 0x82178C34;
		  /* 82178C34h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82178C34h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82178C34h case    2:*/		return 0x82178C38;
		  /* 82178C38h */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 82178C38h case    3:*/		if ( regs.CR[0].eq ) { return 0x82178C50;  }
		/* 82178C38h case    3:*/		return 0x82178C3C;
		  /* 82178C3Ch */ case    4:  		/* li R6, 1 */
		/* 82178C3Ch case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82178C3Ch case    4:*/		return 0x82178C40;
		  /* 82178C40h */ case    5:  		/* li R5, 0 */
		/* 82178C40h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82178C40h case    5:*/		return 0x82178C44;
		  /* 82178C44h */ case    6:  		/* mr R4, R28 */
		/* 82178C44h case    6:*/		regs.R4 = regs.R28;
		/* 82178C44h case    6:*/		return 0x82178C48;
		  /* 82178C48h */ case    7:  		/* mr R3, R26 */
		/* 82178C48h case    7:*/		regs.R3 = regs.R26;
		/* 82178C48h case    7:*/		return 0x82178C4C;
		  /* 82178C4Ch */ case    8:  		/* bl 731004 */
		/* 82178C4Ch case    8:*/		regs.LR = 0x82178C50; return 0x8222B3C8;
		/* 82178C4Ch case    8:*/		return 0x82178C50;
	}
	return 0x82178C50;
} // Block from 82178C2Ch-82178C50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82178C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178C50);
		  /* 82178C50h */ case    0:  		/* mr R3, R30 */
		/* 82178C50h case    0:*/		regs.R3 = regs.R30;
		/* 82178C50h case    0:*/		return 0x82178C54;
		  /* 82178C54h */ case    1:  		/* addi R1, R1, 144 */
		/* 82178C54h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82178C54h case    1:*/		return 0x82178C58;
		  /* 82178C58h */ case    2:  		/* b -948664 */
		/* 82178C58h case    2:*/		return 0x820912A0;
		/* 82178C58h case    2:*/		return 0x82178C5C;
		  /* 82178C5Ch */ case    3:  		/* nop */
		/* 82178C5Ch case    3:*/		cpu::op::nop();
		/* 82178C5Ch case    3:*/		return 0x82178C60;
	}
	return 0x82178C60;
} // Block from 82178C50h-82178C60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82178C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178C60);
		  /* 82178C60h */ case    0:  		/* mfspr R12, LR */
		/* 82178C60h case    0:*/		regs.R12 = regs.LR;
		/* 82178C60h case    0:*/		return 0x82178C64;
		  /* 82178C64h */ case    1:  		/* bl -948780 */
		/* 82178C64h case    1:*/		regs.LR = 0x82178C68; return 0x82091238;
		/* 82178C64h case    1:*/		return 0x82178C68;
		  /* 82178C68h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82178C68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82178C68h case    2:*/		return 0x82178C6C;
		  /* 82178C6Ch */ case    3:  		/* stw R4, <#[R1 + 80]> */
		/* 82178C6Ch case    3:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 82178C6Ch case    3:*/		return 0x82178C70;
		  /* 82178C70h */ case    4:  		/* cntlzw R11, R7 */
		/* 82178C70h case    4:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R7);
		/* 82178C70h case    4:*/		return 0x82178C74;
		  /* 82178C74h */ case    5:  		/* stw R4, <#[R1 + 84]> */
		/* 82178C74h case    5:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 82178C74h case    5:*/		return 0x82178C78;
		  /* 82178C78h */ case    6:  		/* addi R3, R1, 80 */
		/* 82178C78h case    6:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82178C78h case    6:*/		return 0x82178C7C;
		  /* 82178C7Ch */ case    7:  		/* mr R28, R4 */
		/* 82178C7Ch case    7:*/		regs.R28 = regs.R4;
		/* 82178C7Ch case    7:*/		return 0x82178C80;
		  /* 82178C80h */ case    8:  		/* mr R26, R5 */
		/* 82178C80h case    8:*/		regs.R26 = regs.R5;
		/* 82178C80h case    8:*/		return 0x82178C84;
		  /* 82178C84h */ case    9:  		/* mr R20, R6 */
		/* 82178C84h case    9:*/		regs.R20 = regs.R6;
		/* 82178C84h case    9:*/		return 0x82178C88;
		  /* 82178C88h */ case   10:  		/* mr R24, R7 */
		/* 82178C88h case   10:*/		regs.R24 = regs.R7;
		/* 82178C88h case   10:*/		return 0x82178C8C;
		  /* 82178C8Ch */ case   11:  		/* mr R21, R8 */
		/* 82178C8Ch case   11:*/		regs.R21 = regs.R8;
		/* 82178C8Ch case   11:*/		return 0x82178C90;
		  /* 82178C90h */ case   12:  		/* li R25, 0 */
		/* 82178C90h case   12:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 82178C90h case   12:*/		return 0x82178C94;
		  /* 82178C94h */ case   13:  		/* li R22, 0 */
		/* 82178C94h case   13:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82178C94h case   13:*/		return 0x82178C98;
		  /* 82178C98h */ case   14:  		/* rlwinm R23, R11, 27, 31, 31 */
		/* 82178C98h case   14:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R23,regs.R11);
		/* 82178C98h case   14:*/		return 0x82178C9C;
		  /* 82178C9Ch */ case   15:  		/* bl -3324 */
		/* 82178C9Ch case   15:*/		regs.LR = 0x82178CA0; return 0x82177FA0;
		/* 82178C9Ch case   15:*/		return 0x82178CA0;
		  /* 82178CA0h */ case   16:  		/* or. R29, R3, R3 */
		/* 82178CA0h case   16:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82178CA0h case   16:*/		return 0x82178CA4;
		  /* 82178CA4h */ case   17:  		/* bc 12, CR0_EQ, 504 */
		/* 82178CA4h case   17:*/		if ( regs.CR[0].eq ) { return 0x82178E9C;  }
		/* 82178CA4h case   17:*/		return 0x82178CA8;
		  /* 82178CA8h */ case   18:  		/* li R27, 1 */
		/* 82178CA8h case   18:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 82178CA8h case   18:*/		return 0x82178CAC;
		  /* 82178CACh */ case   19:  		/* cmplwi CR6, R26, 0 */
		/* 82178CACh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82178CACh case   19:*/		return 0x82178CB0;
		  /* 82178CB0h */ case   20:  		/* bc 12, CR6_EQ, 100 */
		/* 82178CB0h case   20:*/		if ( regs.CR[6].eq ) { return 0x82178D14;  }
		/* 82178CB0h case   20:*/		return 0x82178CB4;
		  /* 82178CB4h */ case   21:  		/* lwz R11, <#[R26 + 48]> */
		/* 82178CB4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 82178CB4h case   21:*/		return 0x82178CB8;
		  /* 82178CB8h */ case   22:  		/* lwz R10, <#[R29 + 40]> */
		/* 82178CB8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000028) );
		/* 82178CB8h case   22:*/		return 0x82178CBC;
		  /* 82178CBCh */ case   23:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 82178CBCh case   23:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 82178CBCh case   23:*/		return 0x82178CC0;
		  /* 82178CC0h */ case   24:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 82178CC0h case   24:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 82178CC0h case   24:*/		return 0x82178CC4;
		  /* 82178CC4h */ case   25:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82178CC4h case   25:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82178CC4h case   25:*/		return 0x82178CC8;
		  /* 82178CC8h */ case   26:  		/* addi R11, R11, 1 */
		/* 82178CC8h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82178CC8h case   26:*/		return 0x82178CCC;
		  /* 82178CCCh */ case   27:  		/* slw R9, R27, R9 */
		/* 82178CCCh case   27:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 82178CCCh case   27:*/		return 0x82178CD0;
		  /* 82178CD0h */ case   28:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82178CD0h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82178CD0h case   28:*/		return 0x82178CD4;
		  /* 82178CD4h */ case   29:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82178CD4h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82178CD4h case   29:*/		return 0x82178CD8;
	}
	return 0x82178CD8;
} // Block from 82178C60h-82178CD8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 82178CD8h
// Function '?FindScopeExitPredecessor@Compiler@D3DXShader@@AAAPAVBlock@2@PAV32@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178CD8);
		  /* 82178CD8h */ case    0:  		/* and. R11, R11, R9 */
		/* 82178CD8h case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82178CD8h case    0:*/		return 0x82178CDC;
		  /* 82178CDCh */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 82178CDCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82178D14;  }
		/* 82178CDCh case    1:*/		return 0x82178CE0;
		  /* 82178CE0h */ case    2:  		/* lwz R9, <#[R1 + 80]> */
		/* 82178CE0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 82178CE0h case    2:*/		return 0x82178CE4;
		  /* 82178CE4h */ case    3:  		/* mr R11, R29 */
		/* 82178CE4h case    3:*/		regs.R11 = regs.R29;
		/* 82178CE4h case    3:*/		return 0x82178CE8;
		  /* 82178CE8h */ case    4:  		/* cmplw CR6, R29, R9 */
		/* 82178CE8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R9);
		/* 82178CE8h case    4:*/		return 0x82178CEC;
		  /* 82178CECh */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 82178CECh case    5:*/		if ( regs.CR[6].eq ) { return 0x82178D08;  }
		/* 82178CECh case    5:*/		return 0x82178CF0;
		  /* 82178CF0h */ case    6:  		/* lwz R10, <#[R11 + 60]> */
		/* 82178CF0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000003C) );
		/* 82178CF0h case    6:*/		return 0x82178CF4;
		  /* 82178CF4h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 82178CF4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82178CF4h case    7:*/		return 0x82178CF8;
		  /* 82178CF8h */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 82178CF8h case    8:*/		if ( !regs.CR[6].eq ) { return 0x82178D0C;  }
		/* 82178CF8h case    8:*/		return 0x82178CFC;
		  /* 82178CFCh */ case    9:  		/* lwz R11, <#[R11 + 52]> */
		/* 82178CFCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 82178CFCh case    9:*/		return 0x82178D00;
		  /* 82178D00h */ case   10:  		/* cmplw CR6, R11, R9 */
		/* 82178D00h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82178D00h case   10:*/		return 0x82178D04;
		  /* 82178D04h */ case   11:  		/* bc 4, CR6_EQ, -20 */
		/* 82178D04h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82178CF0;  }
		/* 82178D04h case   11:*/		return 0x82178D08;
	}
	return 0x82178D08;
} // Block from 82178CD8h-82178D08h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82178D08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178D08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178D08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178D08);
		  /* 82178D08h */ case    0:  		/* li R10, 0 */
		/* 82178D08h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82178D08h case    0:*/		return 0x82178D0C;
	}
	return 0x82178D0C;
} // Block from 82178D08h-82178D0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178D0C);
		  /* 82178D0Ch */ case    0:  		/* stw R10, <#[R1 + 84]> */
		/* 82178D0Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 82178D0Ch case    0:*/		return 0x82178D10;
		  /* 82178D10h */ case    1:  		/* b 380 */
		/* 82178D10h case    1:*/		return 0x82178E8C;
		/* 82178D10h case    1:*/		return 0x82178D14;
	}
	return 0x82178D14;
} // Block from 82178D0Ch-82178D14h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178D14);
		  /* 82178D14h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 82178D14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 82178D14h case    0:*/		return 0x82178D18;
		  /* 82178D18h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82178D18h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82178D18h case    1:*/		return 0x82178D1C;
		  /* 82178D1Ch */ case    2:  		/* bc 12, CR6_EQ, 160 */
		/* 82178D1Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82178DBC;  }
		/* 82178D1Ch case    2:*/		return 0x82178D20;
		  /* 82178D20h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 82178D20h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82178D20h case    3:*/		return 0x82178D24;
		  /* 82178D24h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 82178D24h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82178D24h case    4:*/		return 0x82178D28;
		  /* 82178D28h */ case    5:  		/* bc 12, CR6_EQ, 148 */
		/* 82178D28h case    5:*/		if ( regs.CR[6].eq ) { return 0x82178DBC;  }
		/* 82178D28h case    5:*/		return 0x82178D2C;
		  /* 82178D2Ch */ case    6:  		/* mr R8, R11 */
		/* 82178D2Ch case    6:*/		regs.R8 = regs.R11;
		/* 82178D2Ch case    6:*/		return 0x82178D30;
		  /* 82178D30h */ case    7:  		/* cmplwi CR6, R8, 0 */
		/* 82178D30h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82178D30h case    7:*/		return 0x82178D34;
		  /* 82178D34h */ case    8:  		/* bc 12, CR6_EQ, 140 */
		/* 82178D34h case    8:*/		if ( regs.CR[6].eq ) { return 0x82178DC0;  }
		/* 82178D34h case    8:*/		return 0x82178D38;
		  /* 82178D38h */ case    9:  		/* lwz R11, <#[R28 + 48]> */
		/* 82178D38h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 82178D38h case    9:*/		return 0x82178D3C;
		  /* 82178D3Ch */ case   10:  		/* lwz R10, <#[R8]> */
		/* 82178D3Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82178D3Ch case   10:*/		return 0x82178D40;
		  /* 82178D40h */ case   11:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 82178D40h case   11:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 82178D40h case   11:*/		return 0x82178D44;
		  /* 82178D44h */ case   12:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 82178D44h case   12:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 82178D44h case   12:*/		return 0x82178D48;
	}
	return 0x82178D48;
} // Block from 82178D14h-82178D48h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82178D48h
// Function '?RemoveUselessPredicateStackOp@Compiler@D3DXShader@@AAAXPAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178D48);
		  /* 82178D48h */ case    0:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82178D48h case    0:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82178D48h case    0:*/		return 0x82178D4C;
		  /* 82178D4Ch */ case    1:  		/* addi R7, R11, 1 */
		/* 82178D4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x1);
		/* 82178D4Ch case    1:*/		return 0x82178D50;
		  /* 82178D50h */ case    2:  		/* lwz R11, <#[R10 + 40]> */
		/* 82178D50h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 82178D50h case    2:*/		return 0x82178D54;
		  /* 82178D54h */ case    3:  		/* slw R9, R27, R9 */
		/* 82178D54h case    3:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 82178D54h case    3:*/		return 0x82178D58;
		  /* 82178D58h */ case    4:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 82178D58h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 82178D58h case    4:*/		return 0x82178D5C;
		  /* 82178D5Ch */ case    5:  		/* lwzx R7, <#[R7 + R11]> */
		/* 82178D5Ch case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R11 + 0x00000000) );
		/* 82178D5Ch case    5:*/		return 0x82178D60;
		  /* 82178D60h */ case    6:  		/* and. R9, R9, R7 */
		/* 82178D60h case    6:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R7);
		/* 82178D60h case    6:*/		return 0x82178D64;
		  /* 82178D64h */ case    7:  		/* bc 12, CR0_EQ, 52 */
		/* 82178D64h case    7:*/		if ( regs.CR[0].eq ) { return 0x82178D98;  }
		/* 82178D64h case    7:*/		return 0x82178D68;
		  /* 82178D68h */ case    8:  		/* cmplwi CR6, R26, 0 */
		/* 82178D68h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 82178D68h case    8:*/		return 0x82178D6C;
		  /* 82178D6Ch */ case    9:  		/* bc 12, CR6_EQ, 72 */
		/* 82178D6Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x82178DB4;  }
		/* 82178D6Ch case    9:*/		return 0x82178D70;
		  /* 82178D70h */ case   10:  		/* lwz R9, <#[R26 + 48]> */
		/* 82178D70h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x00000030) );
		/* 82178D70h case   10:*/		return 0x82178D74;
		  /* 82178D74h */ case   11:  		/* rlwinm R7, R9, 0, 13, 31 */
		/* 82178D74h case   11:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R9);
		/* 82178D74h case   11:*/		return 0x82178D78;
		  /* 82178D78h */ case   12:  		/* rlwinm R9, R7, 27, 5, 31 */
		/* 82178D78h case   12:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R7);
		/* 82178D78h case   12:*/		return 0x82178D7C;
		  /* 82178D7Ch */ case   13:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 82178D7Ch case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 82178D7Ch case   13:*/		return 0x82178D80;
		  /* 82178D80h */ case   14:  		/* addi R9, R9, 1 */
		/* 82178D80h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82178D80h case   14:*/		return 0x82178D84;
		  /* 82178D84h */ case   15:  		/* slw R7, R27, R7 */
		/* 82178D84h case   15:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R27,regs.R7);
		/* 82178D84h case   15:*/		return 0x82178D88;
		  /* 82178D88h */ case   16:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 82178D88h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 82178D88h case   16:*/		return 0x82178D8C;
		  /* 82178D8Ch */ case   17:  		/* lwzx R11, <#[R9 + R11]> */
		/* 82178D8Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + regs.R11 + 0x00000000) );
		/* 82178D8Ch case   17:*/		return 0x82178D90;
		  /* 82178D90h */ case   18:  		/* and. R11, R7, R11 */
		/* 82178D90h case   18:*/		cpu::op::and<1>(regs,&regs.R11,regs.R7,regs.R11);
		/* 82178D90h case   18:*/		return 0x82178D94;
		  /* 82178D94h */ case   19:  		/* bc 12, CR0_EQ, 32 */
		/* 82178D94h case   19:*/		if ( regs.CR[0].eq ) { return 0x82178DB4;  }
		/* 82178D94h case   19:*/		return 0x82178D98;
	}
	return 0x82178D98;
} // Block from 82178D48h-82178D98h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82178D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178D98);
		  /* 82178D98h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 82178D98h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82178D98h case    0:*/		return 0x82178D9C;
		  /* 82178D9Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 82178D9Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82178DB0;  }
		/* 82178D9Ch case    1:*/		return 0x82178DA0;
		  /* 82178DA0h */ case    2:  		/* cmplw CR6, R10, R25 */
		/* 82178DA0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 82178DA0h case    2:*/		return 0x82178DA4;
		  /* 82178DA4h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 82178DA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82178DB4;  }
		/* 82178DA4h case    3:*/		return 0x82178DA8;
		  /* 82178DA8h */ case    4:  		/* li R3, 0 */
		/* 82178DA8h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82178DA8h case    4:*/		return 0x82178DAC;
		  /* 82178DACh */ case    5:  		/* b 280 */
		/* 82178DACh case    5:*/		return 0x82178EC4;
		/* 82178DACh case    5:*/		return 0x82178DB0;
	}
	return 0x82178DB0;
} // Block from 82178D98h-82178DB0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82178DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178DB0);
		  /* 82178DB0h */ case    0:  		/* mr R25, R10 */
		/* 82178DB0h case    0:*/		regs.R25 = regs.R10;
		/* 82178DB0h case    0:*/		return 0x82178DB4;
	}
	return 0x82178DB4;
} // Block from 82178DB0h-82178DB4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178DB4);
		  /* 82178DB4h */ case    0:  		/* lwz R8, <#[R8 + 8]> */
		/* 82178DB4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000008) );
		/* 82178DB4h case    0:*/		return 0x82178DB8;
		  /* 82178DB8h */ case    1:  		/* b -136 */
		/* 82178DB8h case    1:*/		return 0x82178D30;
		/* 82178DB8h case    1:*/		return 0x82178DBC;
	}
	return 0x82178DBC;
} // Block from 82178DB4h-82178DBCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178DBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178DBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178DBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178DBC);
		  /* 82178DBCh */ case    0:  		/* mr R22, R27 */
		/* 82178DBCh case    0:*/		regs.R22 = regs.R27;
		/* 82178DBCh case    0:*/		return 0x82178DC0;
	}
	return 0x82178DC0;
} // Block from 82178DBCh-82178DC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178DC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178DC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178DC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178DC0);
		  /* 82178DC0h */ case    0:  		/* rlwinm. R11, R23, 0, 24, 31 */
		/* 82178DC0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R23);
		/* 82178DC0h case    0:*/		return 0x82178DC4;
		  /* 82178DC4h */ case    1:  		/* bc 4, CR0_EQ, 200 */
		/* 82178DC4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82178E8C;  }
		/* 82178DC4h case    1:*/		return 0x82178DC8;
		  /* 82178DC8h */ case    2:  		/* lwz R11, <#[R29 + 20]> */
		/* 82178DC8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82178DC8h case    2:*/		return 0x82178DCC;
		  /* 82178DCCh */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82178DCCh case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82178DCCh case    3:*/		return 0x82178DD0;
		  /* 82178DD0h */ case    4:  		/* bc 12, CR0_EQ, 40 */
		/* 82178DD0h case    4:*/		if ( regs.CR[0].eq ) { return 0x82178DF8;  }
		/* 82178DD0h case    4:*/		return 0x82178DD4;
		  /* 82178DD4h */ case    5:  		/* lwz R11, <#[R29 + 28]> */
		/* 82178DD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 82178DD4h case    5:*/		return 0x82178DD8;
		  /* 82178DD8h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82178DD8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82178DD8h case    6:*/		return 0x82178DDC;
		  /* 82178DDCh */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 82178DDCh case    7:*/		if ( regs.CR[0].eq ) { return 0x82178DEC;  }
		/* 82178DDCh case    7:*/		return 0x82178DE0;
		  /* 82178DE0h */ case    8:  		/* lwz R11, <#[R29 + 36]> */
		/* 82178DE0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 82178DE0h case    8:*/		return 0x82178DE4;
		  /* 82178DE4h */ case    9:  		/* addi R30, R29, 32 */
		/* 82178DE4h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x20);
		/* 82178DE4h case    9:*/		return 0x82178DE8;
		  /* 82178DE8h */ case   10:  		/* b 24 */
		/* 82178DE8h case   10:*/		return 0x82178E00;
		/* 82178DE8h case   10:*/		return 0x82178DEC;
	}
	return 0x82178DEC;
} // Block from 82178DC0h-82178DECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82178DECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178DEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178DEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178DEC);
		  /* 82178DECh */ case    0:  		/* lwz R11, <#[R29 + 28]> */
		/* 82178DECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 82178DECh case    0:*/		return 0x82178DF0;
		  /* 82178DF0h */ case    1:  		/* addi R30, R29, 24 */
		/* 82178DF0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x18);
		/* 82178DF0h case    1:*/		return 0x82178DF4;
		  /* 82178DF4h */ case    2:  		/* b 12 */
		/* 82178DF4h case    2:*/		return 0x82178E00;
		/* 82178DF4h case    2:*/		return 0x82178DF8;
	}
	return 0x82178DF8;
} // Block from 82178DECh-82178DF8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82178DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178DF8);
		  /* 82178DF8h */ case    0:  		/* lwz R11, <#[R29 + 20]> */
		/* 82178DF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000014) );
		/* 82178DF8h case    0:*/		return 0x82178DFC;
		  /* 82178DFCh */ case    1:  		/* addi R30, R29, 16 */
		/* 82178DFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x10);
		/* 82178DFCh case    1:*/		return 0x82178E00;
	}
	return 0x82178E00;
} // Block from 82178DF8h-82178E00h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178E00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178E00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178E00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178E00);
		  /* 82178E00h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82178E00h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82178E00h case    0:*/		return 0x82178E04;
		  /* 82178E04h */ case    1:  		/* addic R10, R10, -1 */
		/* 82178E04h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82178E04h case    1:*/		return 0x82178E08;
		  /* 82178E08h */ case    2:  		/* subfe R10, R10, R10 */
		/* 82178E08h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82178E08h case    2:*/		return 0x82178E0C;
		  /* 82178E0Ch */ case    3:  		/* and R31, R10, R11 */
		/* 82178E0Ch case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 82178E0Ch case    3:*/		return 0x82178E10;
		  /* 82178E10h */ case    4:  		/* b 108 */
		/* 82178E10h case    4:*/		return 0x82178E7C;
		/* 82178E10h case    4:*/		return 0x82178E14;
		  /* 82178E14h */ case    5:  		/* mr R3, R31 */
		/* 82178E14h case    5:*/		regs.R3 = regs.R31;
		/* 82178E14h case    5:*/		return 0x82178E18;
		  /* 82178E18h */ case    6:  		/* bl -4056 */
		/* 82178E18h case    6:*/		regs.LR = 0x82178E1C; return 0x82177E40;
		/* 82178E18h case    6:*/		return 0x82178E1C;
		  /* 82178E1Ch */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82178E1Ch case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82178E1Ch case    7:*/		return 0x82178E20;
		  /* 82178E20h */ case    8:  		/* bc 4, CR0_EQ, 104 */
		/* 82178E20h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82178E88;  }
		/* 82178E20h case    8:*/		return 0x82178E24;
		  /* 82178E24h */ case    9:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82178E24h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82178E24h case    9:*/		return 0x82178E28;
		  /* 82178E28h */ case   10:  		/* lwz R31, <#[R11 + 40]> */
		/* 82178E28h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 82178E28h case   10:*/		return 0x82178E2C;
		  /* 82178E2Ch */ case   11:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82178E2Ch case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82178E2Ch case   11:*/		return 0x82178E30;
		  /* 82178E30h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 82178E30h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82178E3C;  }
		/* 82178E30h case   12:*/		return 0x82178E34;
		  /* 82178E34h */ case   13:  		/* cmplwi CR6, R31, 0 */
		/* 82178E34h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82178E34h case   13:*/		return 0x82178E38;
		  /* 82178E38h */ case   14:  		/* bc 4, CR6_EQ, -36 */
		/* 82178E38h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82178E14;  }
		/* 82178E38h case   14:*/		return 0x82178E3C;
	}
	return 0x82178E3C;
} // Block from 82178E00h-82178E3Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 82178E3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178E3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178E3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178E3C);
		  /* 82178E3Ch */ case    0:  		/* addi R10, R29, 32 */
		/* 82178E3Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x20);
		/* 82178E3Ch case    0:*/		return 0x82178E40;
		  /* 82178E40h */ case    1:  		/* cmplw CR6, R30, R10 */
		/* 82178E40h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 82178E40h case    1:*/		return 0x82178E44;
		  /* 82178E44h */ case    2:  		/* bc 12, CR6_EQ, 72 */
		/* 82178E44h case    2:*/		if ( regs.CR[6].eq ) { return 0x82178E8C;  }
		/* 82178E44h case    2:*/		return 0x82178E48;
		  /* 82178E48h */ case    3:  		/* addi R11, R29, 24 */
		/* 82178E48h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x18);
		/* 82178E48h case    3:*/		return 0x82178E4C;
		  /* 82178E4Ch */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 82178E4Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 82178E4Ch case    4:*/		return 0x82178E50;
		  /* 82178E50h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 82178E50h case    5:*/		if ( regs.CR[6].eq ) { return 0x82178E6C;  }
		/* 82178E50h case    5:*/		return 0x82178E54;
		  /* 82178E54h */ case    6:  		/* lwz R9, <#[R29 + 28]> */
		/* 82178E54h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x0000001C) );
		/* 82178E54h case    6:*/		return 0x82178E58;
		  /* 82178E58h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 82178E58h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 82178E58h case    7:*/		return 0x82178E5C;
		  /* 82178E5Ch */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 82178E5Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x82178E6C;  }
		/* 82178E5Ch case    8:*/		return 0x82178E60;
		  /* 82178E60h */ case    9:  		/* lwz R31, <#[R11 + 4]> */
		/* 82178E60h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 82178E60h case    9:*/		return 0x82178E64;
		  /* 82178E64h */ case   10:  		/* mr R30, R11 */
		/* 82178E64h case   10:*/		regs.R30 = regs.R11;
		/* 82178E64h case   10:*/		return 0x82178E68;
		  /* 82178E68h */ case   11:  		/* b 12 */
		/* 82178E68h case   11:*/		return 0x82178E74;
		/* 82178E68h case   11:*/		return 0x82178E6C;
	}
	return 0x82178E6C;
} // Block from 82178E3Ch-82178E6Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 82178E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178E6C);
		  /* 82178E6Ch */ case    0:  		/* lwz R31, <#[R10 + 4]> */
		/* 82178E6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 82178E6Ch case    0:*/		return 0x82178E70;
		  /* 82178E70h */ case    1:  		/* mr R30, R10 */
		/* 82178E70h case    1:*/		regs.R30 = regs.R10;
		/* 82178E70h case    1:*/		return 0x82178E74;
	}
	return 0x82178E74;
} // Block from 82178E6Ch-82178E74h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178E74);
		  /* 82178E74h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82178E74h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82178E74h case    0:*/		return 0x82178E78;
		  /* 82178E78h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 82178E78h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82178E8C;  }
		/* 82178E78h case    1:*/		return 0x82178E7C;
	}
	return 0x82178E7C;
} // Block from 82178E74h-82178E7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178E7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178E7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178E7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178E7C);
		  /* 82178E7Ch */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82178E7Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82178E7Ch case    0:*/		return 0x82178E80;
		  /* 82178E80h */ case    1:  		/* bc 4, CR6_EQ, -108 */
		/* 82178E80h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82178E14;  }
		/* 82178E80h case    1:*/		return 0x82178E84;
		  /* 82178E84h */ case    2:  		/* b 8 */
		/* 82178E84h case    2:*/		return 0x82178E8C;
		/* 82178E84h case    2:*/		return 0x82178E88;
	}
	return 0x82178E88;
} // Block from 82178E7Ch-82178E88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82178E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178E88);
		  /* 82178E88h */ case    0:  		/* mr R23, R27 */
		/* 82178E88h case    0:*/		regs.R23 = regs.R27;
		/* 82178E88h case    0:*/		return 0x82178E8C;
	}
	return 0x82178E8C;
} // Block from 82178E88h-82178E8Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178E8C);
		  /* 82178E8Ch */ case    0:  		/* addi R3, R1, 80 */
		/* 82178E8Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 82178E8Ch case    0:*/		return 0x82178E90;
		  /* 82178E90h */ case    1:  		/* bl -3824 */
		/* 82178E90h case    1:*/		regs.LR = 0x82178E94; return 0x82177FA0;
		/* 82178E90h case    1:*/		return 0x82178E94;
		  /* 82178E94h */ case    2:  		/* or. R29, R3, R3 */
		/* 82178E94h case    2:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 82178E94h case    2:*/		return 0x82178E98;
		  /* 82178E98h */ case    3:  		/* bc 4, CR0_EQ, -492 */
		/* 82178E98h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82178CAC;  }
		/* 82178E98h case    3:*/		return 0x82178E9C;
	}
	return 0x82178E9C;
} // Block from 82178E8Ch-82178E9Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 82178E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178E9C);
		  /* 82178E9Ch */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 82178E9Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 82178E9Ch case    0:*/		return 0x82178EA0;
		  /* 82178EA0h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82178EA0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82178EAC;  }
		/* 82178EA0h case    1:*/		return 0x82178EA4;
		  /* 82178EA4h */ case    2:  		/* cmplwi CR6, R25, 0 */
		/* 82178EA4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 82178EA4h case    2:*/		return 0x82178EA8;
		  /* 82178EA8h */ case    3:  		/* bc 12, CR6_EQ, -256 */
		/* 82178EA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x82178DA8;  }
		/* 82178EA8h case    3:*/		return 0x82178EAC;
	}
	return 0x82178EAC;
} // Block from 82178E9Ch-82178EACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82178EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178EAC);
		  /* 82178EACh */ case    0:  		/* stw R25, <#[R21]> */
		/* 82178EACh case    0:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R21 + 0x00000000) );
		/* 82178EACh case    0:*/		return 0x82178EB0;
		  /* 82178EB0h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 82178EB0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82178EB0h case    1:*/		return 0x82178EB4;
		  /* 82178EB4h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 82178EB4h case    2:*/		if ( regs.CR[6].eq ) { return 0x82178EBC;  }
		/* 82178EB4h case    2:*/		return 0x82178EB8;
		  /* 82178EB8h */ case    3:  		/* stb R23, <#[R24]> */
		/* 82178EB8h case    3:*/		cpu::mem::store8( regs, regs.R23, (uint32)(regs.R24 + 0x00000000) );
		/* 82178EB8h case    3:*/		return 0x82178EBC;
	}
	return 0x82178EBC;
} // Block from 82178EACh-82178EBCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 82178EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178EBC);
		  /* 82178EBCh */ case    0:  		/* stb R22, <#[R20]> */
		/* 82178EBCh case    0:*/		cpu::mem::store8( regs, regs.R22, (uint32)(regs.R20 + 0x00000000) );
		/* 82178EBCh case    0:*/		return 0x82178EC0;
		  /* 82178EC0h */ case    1:  		/* li R3, 1 */
		/* 82178EC0h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82178EC0h case    1:*/		return 0x82178EC4;
	}
	return 0x82178EC4;
} // Block from 82178EBCh-82178EC4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178EC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178EC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178EC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178EC4);
		  /* 82178EC4h */ case    0:  		/* addi R1, R1, 192 */
		/* 82178EC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82178EC4h case    0:*/		return 0x82178EC8;
		  /* 82178EC8h */ case    1:  		/* b -949312 */
		/* 82178EC8h case    1:*/		return 0x82091288;
		/* 82178EC8h case    1:*/		return 0x82178ECC;
		  /* 82178ECCh */ case    2:  		/* nop */
		/* 82178ECCh case    2:*/		cpu::op::nop();
		/* 82178ECCh case    2:*/		return 0x82178ED0;
	}
	return 0x82178ED0;
} // Block from 82178EC4h-82178ED0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82178ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178ED0);
		  /* 82178ED0h */ case    0:  		/* mfspr R12, LR */
		/* 82178ED0h case    0:*/		regs.R12 = regs.LR;
		/* 82178ED0h case    0:*/		return 0x82178ED4;
		  /* 82178ED4h */ case    1:  		/* bl -949372 */
		/* 82178ED4h case    1:*/		regs.LR = 0x82178ED8; return 0x82091258;
		/* 82178ED4h case    1:*/		return 0x82178ED8;
		  /* 82178ED8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82178ED8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82178ED8h case    2:*/		return 0x82178EDC;
		  /* 82178EDCh */ case    3:  		/* lwz R11, <#[R4 + 36]> */
		/* 82178EDCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 82178EDCh case    3:*/		return 0x82178EE0;
		  /* 82178EE0h */ case    4:  		/* mr R29, R3 */
		/* 82178EE0h case    4:*/		regs.R29 = regs.R3;
		/* 82178EE0h case    4:*/		return 0x82178EE4;
		  /* 82178EE4h */ case    5:  		/* mr R30, R4 */
		/* 82178EE4h case    5:*/		regs.R30 = regs.R4;
		/* 82178EE4h case    5:*/		return 0x82178EE8;
		  /* 82178EE8h */ case    6:  		/* mr R28, R5 */
		/* 82178EE8h case    6:*/		regs.R28 = regs.R5;
		/* 82178EE8h case    6:*/		return 0x82178EEC;
		  /* 82178EECh */ case    7:  		/* li R10, 0 */
		/* 82178EECh case    7:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 82178EECh case    7:*/		return 0x82178EF0;
		  /* 82178EF0h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82178EF0h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82178EF0h case    8:*/		return 0x82178EF4;
		  /* 82178EF4h */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 82178EF4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82178F00;  }
		/* 82178EF4h case    9:*/		return 0x82178EF8;
		  /* 82178EF8h */ case   10:  		/* li R31, 0 */
		/* 82178EF8h case   10:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 82178EF8h case   10:*/		return 0x82178EFC;
		  /* 82178EFCh */ case   11:  		/* b 124 */
		/* 82178EFCh case   11:*/		return 0x82178F78;
		/* 82178EFCh case   11:*/		return 0x82178F00;
	}
	return 0x82178F00;
} // Block from 82178ED0h-82178F00h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82178F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178F00);
		  /* 82178F00h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 82178F00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82178F00h case    0:*/		return 0x82178F04;
		  /* 82178F04h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82178F04h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82178F04h case    1:*/		return 0x82178F08;
		  /* 82178F08h */ case    2:  		/* addic. R31, R11, -40 */
		/* 82178F08h case    2:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 82178F08h case    2:*/		return 0x82178F0C;
		  /* 82178F0Ch */ case    3:  		/* bc 12, CR0_EQ, 108 */
		/* 82178F0Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82178F78;  }
		/* 82178F0Ch case    3:*/		return 0x82178F10;
		  /* 82178F10h */ case    4:  		/* lwz R11, <#[R31 + 8]> */
		/* 82178F10h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82178F10h case    4:*/		return 0x82178F14;
		  /* 82178F14h */ case    5:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82178F14h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82178F14h case    5:*/		return 0x82178F18;
		  /* 82178F18h */ case    6:  		/* cmplwi CR6, R11, 86 */
		/* 82178F18h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 82178F18h case    6:*/		return 0x82178F1C;
		  /* 82178F1Ch */ case    7:  		/* bc 12, CR6_EQ, 48 */
		/* 82178F1Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x82178F4C;  }
		/* 82178F1Ch case    7:*/		return 0x82178F20;
		  /* 82178F20h */ case    8:  		/* cmplwi CR6, R11, 87 */
		/* 82178F20h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 82178F20h case    8:*/		return 0x82178F24;
		  /* 82178F24h */ case    9:  		/* bc 12, CR6_EQ, 40 */
		/* 82178F24h case    9:*/		if ( regs.CR[6].eq ) { return 0x82178F4C;  }
		/* 82178F24h case    9:*/		return 0x82178F28;
		  /* 82178F28h */ case   10:  		/* cmplwi CR6, R11, 89 */
		/* 82178F28h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 82178F28h case   10:*/		return 0x82178F2C;
		  /* 82178F2Ch */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 82178F2Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x82178F4C;  }
		/* 82178F2Ch case   11:*/		return 0x82178F30;
		  /* 82178F30h */ case   12:  		/* cmplwi CR6, R11, 90 */
		/* 82178F30h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 82178F30h case   12:*/		return 0x82178F34;
		  /* 82178F34h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 82178F34h case   13:*/		if ( regs.CR[6].eq ) { return 0x82178F4C;  }
		/* 82178F34h case   13:*/		return 0x82178F38;
		  /* 82178F38h */ case   14:  		/* cmplwi CR6, R11, 84 */
		/* 82178F38h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 82178F38h case   14:*/		return 0x82178F3C;
		  /* 82178F3Ch */ case   15:  		/* bc 12, CR6_EQ, 16 */
		/* 82178F3Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x82178F4C;  }
		/* 82178F3Ch case   15:*/		return 0x82178F40;
		  /* 82178F40h */ case   16:  		/* cmplwi CR6, R11, 85 */
		/* 82178F40h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 82178F40h case   16:*/		return 0x82178F44;
		  /* 82178F44h */ case   17:  		/* li R11, 0 */
		/* 82178F44h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82178F44h case   17:*/		return 0x82178F48;
		  /* 82178F48h */ case   18:  		/* bc 4, CR6_EQ, 8 */
		/* 82178F48h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82178F50;  }
		/* 82178F48h case   18:*/		return 0x82178F4C;
	}
	return 0x82178F4C;
} // Block from 82178F00h-82178F4Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 82178F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178F4C);
		  /* 82178F4Ch */ case    0:  		/* li R11, 1 */
		/* 82178F4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82178F4Ch case    0:*/		return 0x82178F50;
	}
	return 0x82178F50;
} // Block from 82178F4Ch-82178F50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82178F50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178F50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178F50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178F50);
		  /* 82178F50h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82178F50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82178F50h case    0:*/		return 0x82178F54;
		  /* 82178F54h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 82178F54h case    1:*/		if ( regs.CR[0].eq ) { return 0x82178F78;  }
		/* 82178F54h case    1:*/		return 0x82178F58;
		  /* 82178F58h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 82178F58h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82178F58h case    2:*/		return 0x82178F5C;
		  /* 82178F5Ch */ case    3:  		/* mr R3, R29 */
		/* 82178F5Ch case    3:*/		regs.R3 = regs.R29;
		/* 82178F5Ch case    3:*/		return 0x82178F60;
		  /* 82178F60h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82178F60h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82178F60h case    4:*/		return 0x82178F64;
		  /* 82178F64h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82178F64h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82178F64h case    5:*/		return 0x82178F68;
		  /* 82178F68h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82178F68h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82178F68h case    6:*/		return 0x82178F6C;
		  /* 82178F6Ch */ case    7:  		/* bl -84796 */
		/* 82178F6Ch case    7:*/		regs.LR = 0x82178F70; return 0x82164430;
		/* 82178F6Ch case    7:*/		return 0x82178F70;
		  /* 82178F70h */ case    8:  		/* addi R11, R31, -16 */
		/* 82178F70h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 82178F70h case    8:*/		return 0x82178F74;
		  /* 82178F74h */ case    9:  		/* lwzx R10, <#[R3 + R11]> */
		/* 82178F74h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 82178F74h case    9:*/		return 0x82178F78;
	}
	return 0x82178F78;
} // Block from 82178F50h-82178F78h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82178F78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178F78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178F78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178F78);
		  /* 82178F78h */ case    0:  		/* cmplw CR6, R28, R10 */
		/* 82178F78h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R10);
		/* 82178F78h case    0:*/		return 0x82178F7C;
		  /* 82178F7Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82178F7Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x82178F9C;  }
		/* 82178F7Ch case    1:*/		return 0x82178F80;
		  /* 82178F80h */ case    2:  		/* mr R3, R31 */
		/* 82178F80h case    2:*/		regs.R3 = regs.R31;
		/* 82178F80h case    2:*/		return 0x82178F84;
		  /* 82178F84h */ case    3:  		/* bl -5476 */
		/* 82178F84h case    3:*/		regs.LR = 0x82178F88; return 0x82177A20;
		/* 82178F84h case    3:*/		return 0x82178F88;
		  /* 82178F88h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82178F88h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82178F88h case    4:*/		return 0x82178F8C;
		  /* 82178F8Ch */ case    5:  		/* bc 12, CR0_EQ, 24 */
		/* 82178F8Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82178FA4;  }
		/* 82178F8Ch case    5:*/		return 0x82178F90;
		  /* 82178F90h */ case    6:  		/* lwz R11, <#[R30 + 48]> */
		/* 82178F90h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 82178F90h case    6:*/		return 0x82178F94;
		  /* 82178F94h */ case    7:  		/* oris R11, R11, 1024 */
		/* 82178F94h case    7:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 82178F94h case    7:*/		return 0x82178F98;
		  /* 82178F98h */ case    8:  		/* stw R11, <#[R30 + 48]> */
		/* 82178F98h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 82178F98h case    8:*/		return 0x82178F9C;
	}
	return 0x82178F9C;
} // Block from 82178F78h-82178F9Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 82178F9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178F9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178F9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178F9C);
		  /* 82178F9Ch */ case    0:  		/* addi R1, R1, 128 */
		/* 82178F9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82178F9Ch case    0:*/		return 0x82178FA0;
		  /* 82178FA0h */ case    1:  		/* b -949496 */
		/* 82178FA0h case    1:*/		return 0x820912A8;
		/* 82178FA0h case    1:*/		return 0x82178FA4;
	}
	return 0x82178FA4;
} // Block from 82178F9Ch-82178FA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82178FA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178FA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178FA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178FA4);
		  /* 82178FA4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 82178FA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82178FA4h case    0:*/		return 0x82178FA8;
		  /* 82178FA8h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82178FA8h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82178FA8h case    1:*/		return 0x82178FAC;
		  /* 82178FACh */ case    2:  		/* cmplwi CR6, R11, 10752 */
		/* 82178FACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A00);
		/* 82178FACh case    2:*/		return 0x82178FB0;
		  /* 82178FB0h */ case    3:  		/* bc 12, CR6_EQ, -20 */
		/* 82178FB0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82178F9C;  }
		/* 82178FB0h case    3:*/		return 0x82178FB4;
		  /* 82178FB4h */ case    4:  		/* li R4, 4800 */
		/* 82178FB4h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 82178FB4h case    4:*/		return 0x82178FB8;
		  /* 82178FB8h */ case    5:  		/* mr R3, R29 */
		/* 82178FB8h case    5:*/		regs.R3 = regs.R29;
		/* 82178FB8h case    5:*/		return 0x82178FBC;
		  /* 82178FBCh */ case    6:  		/* bl -160084 */
		/* 82178FBCh case    6:*/		regs.LR = 0x82178FC0; return 0x82151E68;
		/* 82178FBCh case    6:*/		return 0x82178FC0;
	}
	return 0x82178FC0;
} // Block from 82178FA4h-82178FC0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82178FC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178FC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178FC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178FC0);
		  /* 82178FC0h */ case    0:  		/* mfspr R12, LR */
		/* 82178FC0h case    0:*/		regs.R12 = regs.LR;
		/* 82178FC0h case    0:*/		return 0x82178FC4;
		  /* 82178FC4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82178FC4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82178FC4h case    1:*/		return 0x82178FC8;
		  /* 82178FC8h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 82178FC8h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 82178FC8h case    2:*/		return 0x82178FCC;
		  /* 82178FCCh */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 82178FCCh case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82178FCCh case    3:*/		return 0x82178FD0;
		  /* 82178FD0h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 82178FD0h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82178FD0h case    4:*/		return 0x82178FD4;
		  /* 82178FD4h */ case    5:  		/* lwz R11, <#[R4 + 112]> */
		/* 82178FD4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000070) );
		/* 82178FD4h case    5:*/		return 0x82178FD8;
		  /* 82178FD8h */ case    6:  		/* mr R30, R3 */
		/* 82178FD8h case    6:*/		regs.R30 = regs.R3;
		/* 82178FD8h case    6:*/		return 0x82178FDC;
		  /* 82178FDCh */ case    7:  		/* lwz R10, <#[R11 + 48]> */
		/* 82178FDCh case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82178FDCh case    7:*/		return 0x82178FE0;
		  /* 82178FE0h */ case    8:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 82178FE0h case    8:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 82178FE0h case    8:*/		return 0x82178FE4;
		  /* 82178FE4h */ case    9:  		/* bc 12, CR0_EQ, 48 */
		/* 82178FE4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82179014;  }
		/* 82178FE4h case    9:*/		return 0x82178FE8;
		  /* 82178FE8h */ case   10:  		/* b 16 */
		/* 82178FE8h case   10:*/		return 0x82178FF8;
		/* 82178FE8h case   10:*/		return 0x82178FEC;
		  /* 82178FECh */ case   11:  		/* lwz R10, <#[R11 + 48]> */
		/* 82178FECh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82178FECh case   11:*/		return 0x82178FF0;
		  /* 82178FF0h */ case   12:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 82178FF0h case   12:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 82178FF0h case   12:*/		return 0x82178FF4;
		  /* 82178FF4h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 82178FF4h case   13:*/		if ( regs.CR[0].eq ) { return 0x82179004;  }
		/* 82178FF4h case   13:*/		return 0x82178FF8;
	}
	return 0x82178FF8;
} // Block from 82178FC0h-82178FF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82178FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82178FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82178FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82178FF8);
		  /* 82178FF8h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 82178FF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 82178FF8h case    0:*/		return 0x82178FFC;
		  /* 82178FFCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82178FFCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82178FFCh case    1:*/		return 0x82179000;
		  /* 82179000h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 82179000h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82178FEC;  }
		/* 82179000h case    2:*/		return 0x82179004;
	}
	return 0x82179004;
} // Block from 82178FF8h-82179004h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179004);
		  /* 82179004h */ case    0:  		/* lwz R10, <#[R11 + 48]> */
		/* 82179004h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82179004h case    0:*/		return 0x82179008;
		  /* 82179008h */ case    1:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 82179008h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 82179008h case    1:*/		return 0x8217900C;
		  /* 8217900Ch */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 8217900Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82178FF8;  }
		/* 8217900Ch case    2:*/		return 0x82179010;
		  /* 82179010h */ case    3:  		/* stw R11, <#[R4 + 112]> */
		/* 82179010h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000070) );
		/* 82179010h case    3:*/		return 0x82179014;
	}
	return 0x82179014;
} // Block from 82179004h-82179014h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82179014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179014);
		  /* 82179014h */ case    0:  		/* lwz R10, <#[R4 + 112]> */
		/* 82179014h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000070) );
		/* 82179014h case    0:*/		return 0x82179018;
		  /* 82179018h */ case    1:  		/* lwz R11, <#[R10 + 36]> */
		/* 82179018h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000024) );
		/* 82179018h case    1:*/		return 0x8217901C;
		  /* 8217901Ch */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217901Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217901Ch case    2:*/		return 0x82179020;
		  /* 82179020h */ case    3:  		/* bc 4, CR0_EQ, 112 */
		/* 82179020h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82179090;  }
		/* 82179020h case    3:*/		return 0x82179024;
		  /* 82179024h */ case    4:  		/* lwz R11, <#[R10 + 32]> */
		/* 82179024h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000020) );
		/* 82179024h case    4:*/		return 0x82179028;
		  /* 82179028h */ case    5:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82179028h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82179028h case    5:*/		return 0x8217902C;
		  /* 8217902Ch */ case    6:  		/* addic. R3, R11, -40 */
		/* 8217902Ch case    6:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFD8);
		/* 8217902Ch case    6:*/		return 0x82179030;
		  /* 82179030h */ case    7:  		/* bc 12, CR0_EQ, 96 */
		/* 82179030h case    7:*/		if ( regs.CR[0].eq ) { return 0x82179090;  }
		/* 82179030h case    7:*/		return 0x82179034;
		  /* 82179034h */ case    8:  		/* lwz R11, <#[R3 + 8]> */
		/* 82179034h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 82179034h case    8:*/		return 0x82179038;
		  /* 82179038h */ case    9:  		/* rlwinm. R9, R11, 15, 31, 31 */
		/* 82179038h case    9:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R9,regs.R11);
		/* 82179038h case    9:*/		return 0x8217903C;
		  /* 8217903Ch */ case   10:  		/* bc 12, CR0_EQ, 84 */
		/* 8217903Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x82179090;  }
		/* 8217903Ch case   10:*/		return 0x82179040;
		  /* 82179040h */ case   11:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82179040h case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82179040h case   11:*/		return 0x82179044;
		  /* 82179044h */ case   12:  		/* cmplwi CR6, R11, 86 */
		/* 82179044h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 82179044h case   12:*/		return 0x82179048;
		  /* 82179048h */ case   13:  		/* bc 12, CR6_EQ, 48 */
		/* 82179048h case   13:*/		if ( regs.CR[6].eq ) { return 0x82179078;  }
		/* 82179048h case   13:*/		return 0x8217904C;
		  /* 8217904Ch */ case   14:  		/* cmplwi CR6, R11, 87 */
		/* 8217904Ch case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8217904Ch case   14:*/		return 0x82179050;
		  /* 82179050h */ case   15:  		/* bc 12, CR6_EQ, 40 */
		/* 82179050h case   15:*/		if ( regs.CR[6].eq ) { return 0x82179078;  }
		/* 82179050h case   15:*/		return 0x82179054;
		  /* 82179054h */ case   16:  		/* cmplwi CR6, R11, 89 */
		/* 82179054h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 82179054h case   16:*/		return 0x82179058;
		  /* 82179058h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 82179058h case   17:*/		if ( regs.CR[6].eq ) { return 0x82179078;  }
		/* 82179058h case   17:*/		return 0x8217905C;
		  /* 8217905Ch */ case   18:  		/* cmplwi CR6, R11, 90 */
		/* 8217905Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8217905Ch case   18:*/		return 0x82179060;
		  /* 82179060h */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 82179060h case   19:*/		if ( regs.CR[6].eq ) { return 0x82179078;  }
		/* 82179060h case   19:*/		return 0x82179064;
		  /* 82179064h */ case   20:  		/* cmplwi CR6, R11, 84 */
		/* 82179064h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 82179064h case   20:*/		return 0x82179068;
		  /* 82179068h */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 82179068h case   21:*/		if ( regs.CR[6].eq ) { return 0x82179078;  }
		/* 82179068h case   21:*/		return 0x8217906C;
		  /* 8217906Ch */ case   22:  		/* cmplwi CR6, R11, 85 */
		/* 8217906Ch case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8217906Ch case   22:*/		return 0x82179070;
		  /* 82179070h */ case   23:  		/* li R11, 0 */
		/* 82179070h case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82179070h case   23:*/		return 0x82179074;
		  /* 82179074h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 82179074h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8217907C;  }
		/* 82179074h case   24:*/		return 0x82179078;
	}
	return 0x82179078;
} // Block from 82179014h-82179078h (25 instructions)

//////////////////////////////////////////////////////
// Block at 82179078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179078);
		  /* 82179078h */ case    0:  		/* li R11, 1 */
		/* 82179078h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82179078h case    0:*/		return 0x8217907C;
	}
	return 0x8217907C;
} // Block from 82179078h-8217907Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217907Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217907C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217907C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217907C);
		  /* 8217907Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217907Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217907Ch case    0:*/		return 0x82179080;
		  /* 82179080h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 82179080h case    1:*/		if ( regs.CR[0].eq ) { return 0x82179090;  }
		/* 82179080h case    1:*/		return 0x82179084;
		  /* 82179084h */ case    2:  		/* bl -50252 */
		/* 82179084h case    2:*/		regs.LR = 0x82179088; return 0x8216CC38;
		/* 82179084h case    2:*/		return 0x82179088;
		  /* 82179088h */ case    3:  		/* lwz R31, <#[R3 + 12]> */
		/* 82179088h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 82179088h case    3:*/		return 0x8217908C;
		  /* 8217908Ch */ case    4:  		/* b 8 */
		/* 8217908Ch case    4:*/		return 0x82179094;
		/* 8217908Ch case    4:*/		return 0x82179090;
	}
	return 0x82179090;
} // Block from 8217907Ch-82179090h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82179090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179090);
		  /* 82179090h */ case    0:  		/* lwz R31, <#[R10 + 96]> */
		/* 82179090h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000060) );
		/* 82179090h case    0:*/		return 0x82179094;
	}
	return 0x82179094;
} // Block from 82179090h-82179094h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179094h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179094( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179094) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179094);
		  /* 82179094h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82179094h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82179094h case    0:*/		return 0x82179098;
		  /* 82179098h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 82179098h case    1:*/		if ( regs.CR[6].eq ) { return 0x821790C8;  }
		/* 82179098h case    1:*/		return 0x8217909C;
		  /* 8217909Ch */ case    2:  		/* mr R3, R31 */
		/* 8217909Ch case    2:*/		regs.R3 = regs.R31;
		/* 8217909Ch case    2:*/		return 0x821790A0;
		  /* 821790A0h */ case    3:  		/* bl -85856 */
		/* 821790A0h case    3:*/		regs.LR = 0x821790A4; return 0x82164140;
		/* 821790A0h case    3:*/		return 0x821790A4;
		  /* 821790A4h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821790A4h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821790A4h case    4:*/		return 0x821790A8;
		  /* 821790A8h */ case    5:  		/* bc 12, CR0_EQ, 32 */
		/* 821790A8h case    5:*/		if ( regs.CR[0].eq ) { return 0x821790C8;  }
		/* 821790A8h case    5:*/		return 0x821790AC;
		  /* 821790ACh */ case    6:  		/* mr R3, R31 */
		/* 821790ACh case    6:*/		regs.R3 = regs.R31;
		/* 821790ACh case    6:*/		return 0x821790B0;
		  /* 821790B0h */ case    7:  		/* addi R1, R1, 112 */
		/* 821790B0h case    7:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821790B0h case    7:*/		return 0x821790B4;
		  /* 821790B4h */ case    8:  		/* lwz R12, <#[R1 - 8]> */
		/* 821790B4h case    8:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821790B4h case    8:*/		return 0x821790B8;
		  /* 821790B8h */ case    9:  		/* mtspr LR, R12 */
		/* 821790B8h case    9:*/		regs.LR = regs.R12;
		/* 821790B8h case    9:*/		return 0x821790BC;
		  /* 821790BCh */ case   10:  		/* ld R30, <#[R1 - 24]> */
		/* 821790BCh case   10:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821790BCh case   10:*/		return 0x821790C0;
		  /* 821790C0h */ case   11:  		/* ld R31, <#[R1 - 16]> */
		/* 821790C0h case   11:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821790C0h case   11:*/		return 0x821790C4;
		  /* 821790C4h */ case   12:  		/* bclr 20, CR0_LT */
		/* 821790C4h case   12:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821790C4h case   12:*/		return 0x821790C8;
	}
	return 0x821790C8;
} // Block from 82179094h-821790C8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821790C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821790C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821790C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821790C8);
		  /* 821790C8h */ case    0:  		/* li R4, 4800 */
		/* 821790C8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821790C8h case    0:*/		return 0x821790CC;
		  /* 821790CCh */ case    1:  		/* mr R3, R30 */
		/* 821790CCh case    1:*/		regs.R3 = regs.R30;
		/* 821790CCh case    1:*/		return 0x821790D0;
		  /* 821790D0h */ case    2:  		/* bl -160360 */
		/* 821790D0h case    2:*/		regs.LR = 0x821790D4; return 0x82151E68;
		/* 821790D0h case    2:*/		return 0x821790D4;
		  /* 821790D4h */ case    3:  		/* nop */
		/* 821790D4h case    3:*/		cpu::op::nop();
		/* 821790D4h case    3:*/		return 0x821790D8;
	}
	return 0x821790D8;
} // Block from 821790C8h-821790D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821790D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821790D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821790D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821790D8);
		  /* 821790D8h */ case    0:  		/* mfspr R12, LR */
		/* 821790D8h case    0:*/		regs.R12 = regs.LR;
		/* 821790D8h case    0:*/		return 0x821790DC;
		  /* 821790DCh */ case    1:  		/* bl -949896 */
		/* 821790DCh case    1:*/		regs.LR = 0x821790E0; return 0x82091254;
		/* 821790DCh case    1:*/		return 0x821790E0;
		  /* 821790E0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821790E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821790E0h case    2:*/		return 0x821790E4;
		  /* 821790E4h */ case    3:  		/* lwz R11, <#[R4 + 76]> */
		/* 821790E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000004C) );
		/* 821790E4h case    3:*/		return 0x821790E8;
		  /* 821790E8h */ case    4:  		/* mr R28, R3 */
		/* 821790E8h case    4:*/		regs.R28 = regs.R3;
		/* 821790E8h case    4:*/		return 0x821790EC;
		  /* 821790ECh */ case    5:  		/* mr R30, R4 */
		/* 821790ECh case    5:*/		regs.R30 = regs.R4;
		/* 821790ECh case    5:*/		return 0x821790F0;
		  /* 821790F0h */ case    6:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821790F0h case    6:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821790F0h case    6:*/		return 0x821790F4;
		  /* 821790F4h */ case    7:  		/* bc 12, CR0_EQ, 60 */
		/* 821790F4h case    7:*/		if ( regs.CR[0].eq ) { return 0x82179130;  }
		/* 821790F4h case    7:*/		return 0x821790F8;
		  /* 821790F8h */ case    8:  		/* bl -312 */
		/* 821790F8h case    8:*/		regs.LR = 0x821790FC; return 0x82178FC0;
		/* 821790F8h case    8:*/		return 0x821790FC;
		  /* 821790FCh */ case    9:  		/* mr R31, R3 */
		/* 821790FCh case    9:*/		regs.R31 = regs.R3;
		/* 821790FCh case    9:*/		return 0x82179100;
		  /* 82179100h */ case   10:  		/* mr R4, R30 */
		/* 82179100h case   10:*/		regs.R4 = regs.R30;
		/* 82179100h case   10:*/		return 0x82179104;
		  /* 82179104h */ case   11:  		/* mr R3, R28 */
		/* 82179104h case   11:*/		regs.R3 = regs.R28;
		/* 82179104h case   11:*/		return 0x82179108;
	}
	return 0x82179108;
} // Block from 821790D8h-82179108h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82179108h
// Function '?FindBranchInstruction@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179108( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179108) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179108);
		  /* 82179108h */ case    0:  		/* bl 702776 */
		/* 82179108h case    0:*/		regs.LR = 0x8217910C; return 0x82224A40;
		/* 82179108h case    0:*/		return 0x8217910C;
		  /* 8217910Ch */ case    1:  		/* mr R27, R3 */
		/* 8217910Ch case    1:*/		regs.R27 = regs.R3;
		/* 8217910Ch case    1:*/		return 0x82179110;
		  /* 82179110h */ case    2:  		/* li R5, 0 */
		/* 82179110h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82179110h case    2:*/		return 0x82179114;
		  /* 82179114h */ case    3:  		/* mr R4, R31 */
		/* 82179114h case    3:*/		regs.R4 = regs.R31;
		/* 82179114h case    3:*/		return 0x82179118;
		  /* 82179118h */ case    4:  		/* mr R3, R28 */
		/* 82179118h case    4:*/		regs.R3 = regs.R28;
		/* 82179118h case    4:*/		return 0x8217911C;
		  /* 8217911Ch */ case    5:  		/* bl -4108 */
		/* 8217911Ch case    5:*/		regs.LR = 0x82179120; return 0x82178110;
		/* 8217911Ch case    5:*/		return 0x82179120;
		  /* 82179120h */ case    6:  		/* mr R4, R3 */
		/* 82179120h case    6:*/		regs.R4 = regs.R3;
		/* 82179120h case    6:*/		return 0x82179124;
		  /* 82179124h */ case    7:  		/* mr R3, R27 */
		/* 82179124h case    7:*/		regs.R3 = regs.R27;
		/* 82179124h case    7:*/		return 0x82179128;
		  /* 82179128h */ case    8:  		/* bl -3936 */
		/* 82179128h case    8:*/		regs.LR = 0x8217912C; return 0x821781C8;
		/* 82179128h case    8:*/		return 0x8217912C;
		  /* 8217912Ch */ case    9:  		/* b 36 */
		/* 8217912Ch case    9:*/		return 0x82179150;
		/* 8217912Ch case    9:*/		return 0x82179130;
	}
	return 0x82179130;
} // Block from 82179108h-82179130h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82179130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179130);
		  /* 82179130h */ case    0:  		/* lis R11, -32256 */
		/* 82179130h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 82179130h case    0:*/		return 0x82179134;
		  /* 82179134h */ case    1:  		/* li R4, 1 */
		/* 82179134h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 82179134h case    1:*/		return 0x82179138;
		  /* 82179138h */ case    2:  		/* lfs FR4, <#[R11 + 1816]> */
		/* 82179138h case    2:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R11 + 0x00000718) );
		/* 82179138h case    2:*/		return 0x8217913C;
		  /* 8217913Ch */ case    3:  		/* fmr FR3, FR4 */
		/* 8217913Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 8217913Ch case    3:*/		return 0x82179140;
		  /* 82179140h */ case    4:  		/* fmr FR2, FR4 */
		/* 82179140h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 82179140h case    4:*/		return 0x82179144;
		  /* 82179144h */ case    5:  		/* fmr FR1, FR4 */
		/* 82179144h case    5:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 82179144h case    5:*/		return 0x82179148;
		  /* 82179148h */ case    6:  		/* bl 727568 */
		/* 82179148h case    6:*/		regs.LR = 0x8217914C; return 0x8222AB58;
		/* 82179148h case    6:*/		return 0x8217914C;
		  /* 8217914Ch */ case    7:  		/* mr R27, R3 */
		/* 8217914Ch case    7:*/		regs.R27 = regs.R3;
		/* 8217914Ch case    7:*/		return 0x82179150;
	}
	return 0x82179150;
} // Block from 82179130h-82179150h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82179150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179150);
		  /* 82179150h */ case    0:  		/* lwz R11, <#[R30 + 36]> */
		/* 82179150h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 82179150h case    0:*/		return 0x82179154;
		  /* 82179154h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82179154h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82179154h case    1:*/		return 0x82179158;
		  /* 82179158h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82179158h case    2:*/		if ( regs.CR[0].eq ) { return 0x82179164;  }
		/* 82179158h case    2:*/		return 0x8217915C;
		  /* 8217915Ch */ case    3:  		/* li R3, 0 */
		/* 8217915Ch case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217915Ch case    3:*/		return 0x82179160;
		  /* 82179160h */ case    4:  		/* b 16 */
		/* 82179160h case    4:*/		return 0x82179170;
		/* 82179160h case    4:*/		return 0x82179164;
	}
	return 0x82179164;
} // Block from 82179150h-82179164h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82179164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179164);
		  /* 82179164h */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 82179164h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82179164h case    0:*/		return 0x82179168;
		  /* 82179168h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82179168h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82179168h case    1:*/		return 0x8217916C;
		  /* 8217916Ch */ case    2:  		/* addi R3, R11, -40 */
		/* 8217916Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFFFD8);
		/* 8217916Ch case    2:*/		return 0x82179170;
	}
	return 0x82179170;
} // Block from 82179164h-82179170h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179170);
		  /* 82179170h */ case    0:  		/* bl -50488 */
		/* 82179170h case    0:*/		regs.LR = 0x82179174; return 0x8216CC38;
		/* 82179170h case    0:*/		return 0x82179174;
		  /* 82179174h */ case    1:  		/* lwz R29, <#[R3 + 12]> */
		/* 82179174h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R3 + 0x0000000C) );
		/* 82179174h case    1:*/		return 0x82179178;
		  /* 82179178h */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 82179178h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 82179178h case    2:*/		return 0x8217917C;
		  /* 8217917Ch */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217917Ch case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217917Ch case    3:*/		return 0x82179180;
		  /* 82179180h */ case    4:  		/* cmpwi CR6, R11, 59 */
		/* 82179180h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003B);
		/* 82179180h case    4:*/		return 0x82179184;
		  /* 82179184h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 82179184h case    5:*/		if ( regs.CR[6].eq ) { return 0x821791C4;  }
		/* 82179184h case    5:*/		return 0x82179188;
		  /* 82179188h */ case    6:  		/* cmpwi CR6, R11, 60 */
		/* 82179188h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003C);
		/* 82179188h case    6:*/		return 0x8217918C;
		  /* 8217918Ch */ case    7:  		/* bc 12, CR6_EQ, 48 */
		/* 8217918Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821791BC;  }
		/* 8217918Ch case    7:*/		return 0x82179190;
		  /* 82179190h */ case    8:  		/* cmpwi CR6, R11, 61 */
		/* 82179190h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003D);
		/* 82179190h case    8:*/		return 0x82179194;
		  /* 82179194h */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 82179194h case    9:*/		if ( regs.CR[6].eq ) { return 0x821791B4;  }
		/* 82179194h case    9:*/		return 0x82179198;
		  /* 82179198h */ case   10:  		/* cmpwi CR6, R11, 62 */
		/* 82179198h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003E);
		/* 82179198h case   10:*/		return 0x8217919C;
		  /* 8217919Ch */ case   11:  		/* bc 12, CR6_EQ, 16 */
		/* 8217919Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821791AC;  }
		/* 8217919Ch case   11:*/		return 0x821791A0;
		  /* 821791A0h */ case   12:  		/* li R4, 4800 */
		/* 821791A0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821791A0h case   12:*/		return 0x821791A4;
		  /* 821791A4h */ case   13:  		/* mr R3, R28 */
		/* 821791A4h case   13:*/		regs.R3 = regs.R28;
		/* 821791A4h case   13:*/		return 0x821791A8;
	}
	return 0x821791A8;
} // Block from 82179170h-821791A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821791A8h
// Function '?RemoveDependency@Instruction@D3DXShader@@QAAXPAVDependency@2@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821791A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821791A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821791A8);
		  /* 821791A8h */ case    0:  		/* bl -160576 */
		/* 821791A8h case    0:*/		regs.LR = 0x821791AC; return 0x82151E68;
		/* 821791A8h case    0:*/		return 0x821791AC;
	}
	return 0x821791AC;
} // Block from 821791A8h-821791ACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821791ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821791AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821791AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821791AC);
		  /* 821791ACh */ case    0:  		/* li R6, 24 */
		/* 821791ACh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x18);
		/* 821791ACh case    0:*/		return 0x821791B0;
		  /* 821791B0h */ case    1:  		/* b 24 */
		/* 821791B0h case    1:*/		return 0x821791C8;
		/* 821791B0h case    1:*/		return 0x821791B4;
	}
	return 0x821791B4;
} // Block from 821791ACh-821791B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821791B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821791B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821791B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821791B4);
		  /* 821791B4h */ case    0:  		/* li R6, 23 */
		/* 821791B4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x17);
		/* 821791B4h case    0:*/		return 0x821791B8;
		  /* 821791B8h */ case    1:  		/* b 16 */
		/* 821791B8h case    1:*/		return 0x821791C8;
		/* 821791B8h case    1:*/		return 0x821791BC;
	}
	return 0x821791BC;
} // Block from 821791B4h-821791BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821791BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821791BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821791BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821791BC);
		  /* 821791BCh */ case    0:  		/* li R6, 22 */
		/* 821791BCh case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x16);
		/* 821791BCh case    0:*/		return 0x821791C0;
		  /* 821791C0h */ case    1:  		/* b 8 */
		/* 821791C0h case    1:*/		return 0x821791C8;
		/* 821791C0h case    1:*/		return 0x821791C4;
	}
	return 0x821791C4;
} // Block from 821791BCh-821791C4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821791C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821791C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821791C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821791C4);
		  /* 821791C4h */ case    0:  		/* li R6, 21 */
		/* 821791C4h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x15);
		/* 821791C4h case    0:*/		return 0x821791C8;
	}
	return 0x821791C8;
} // Block from 821791C4h-821791C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821791C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821791C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821791C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821791C8);
		  /* 821791C8h */ case    0:  		/* li R8, 1 */
		/* 821791C8h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821791C8h case    0:*/		return 0x821791CC;
		  /* 821791CCh */ case    1:  		/* li R7, 2 */
		/* 821791CCh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821791CCh case    1:*/		return 0x821791D0;
		  /* 821791D0h */ case    2:  		/* li R5, 0 */
		/* 821791D0h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821791D0h case    2:*/		return 0x821791D4;
		  /* 821791D4h */ case    3:  		/* mr R4, R30 */
		/* 821791D4h case    3:*/		regs.R4 = regs.R30;
		/* 821791D4h case    3:*/		return 0x821791D8;
		  /* 821791D8h */ case    4:  		/* mr R3, R28 */
		/* 821791D8h case    4:*/		regs.R3 = regs.R28;
		/* 821791D8h case    4:*/		return 0x821791DC;
		  /* 821791DCh */ case    5:  		/* bl 702396 */
		/* 821791DCh case    5:*/		regs.LR = 0x821791E0; return 0x82224998;
		/* 821791DCh case    5:*/		return 0x821791E0;
		  /* 821791E0h */ case    6:  		/* mr R31, R3 */
		/* 821791E0h case    6:*/		regs.R31 = regs.R3;
		/* 821791E0h case    6:*/		return 0x821791E4;
		  /* 821791E4h */ case    7:  		/* li R5, 0 */
		/* 821791E4h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821791E4h case    7:*/		return 0x821791E8;
		  /* 821791E8h */ case    8:  		/* mr R4, R27 */
		/* 821791E8h case    8:*/		regs.R4 = regs.R27;
		/* 821791E8h case    8:*/		return 0x821791EC;
		  /* 821791ECh */ case    9:  		/* mr R3, R28 */
		/* 821791ECh case    9:*/		regs.R3 = regs.R28;
		/* 821791ECh case    9:*/		return 0x821791F0;
		  /* 821791F0h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 821791F0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821791F0h case   10:*/		return 0x821791F4;
		  /* 821791F4h */ case   11:  		/* ori R11, R11, 64 */
		/* 821791F4h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 821791F4h case   11:*/		return 0x821791F8;
		  /* 821791F8h */ case   12:  		/* stw R11, <#[R31 + 8]> */
		/* 821791F8h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821791F8h case   12:*/		return 0x821791FC;
		  /* 821791FCh */ case   13:  		/* bl -4332 */
		/* 821791FCh case   13:*/		regs.LR = 0x82179200; return 0x82178110;
		/* 821791FCh case   13:*/		return 0x82179200;
		  /* 82179200h */ case   14:  		/* mr R4, R3 */
		/* 82179200h case   14:*/		regs.R4 = regs.R3;
		/* 82179200h case   14:*/		return 0x82179204;
		  /* 82179204h */ case   15:  		/* mr R3, R31 */
		/* 82179204h case   15:*/		regs.R3 = regs.R31;
		/* 82179204h case   15:*/		return 0x82179208;
		  /* 82179208h */ case   16:  		/* bl -4160 */
		/* 82179208h case   16:*/		regs.LR = 0x8217920C; return 0x821781C8;
		/* 82179208h case   16:*/		return 0x8217920C;
		  /* 8217920Ch */ case   17:  		/* stw R3, <#[R31 + 44]> */
		/* 8217920Ch case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217920Ch case   17:*/		return 0x82179210;
	}
	return 0x82179210;
} // Block from 821791C8h-82179210h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82179210h
// Function '?AddSideEffectDependency@Instruction@D3DXShader@@QAAPAVDependency@2@W4SideEffect@2@PAV12@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179210);
		  /* 82179210h */ case    0:  		/* mr R3, R31 */
		/* 82179210h case    0:*/		regs.R3 = regs.R31;
		/* 82179210h case    0:*/		return 0x82179214;
		  /* 82179214h */ case    1:  		/* lwz R4, <#[R29 + 44]> */
		/* 82179214h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x0000002C) );
		/* 82179214h case    1:*/		return 0x82179218;
		  /* 82179218h */ case    2:  		/* bl -4176 */
		/* 82179218h case    2:*/		regs.LR = 0x8217921C; return 0x821781C8;
		/* 82179218h case    2:*/		return 0x8217921C;
		  /* 8217921Ch */ case    3:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 8217921Ch case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 8217921Ch case    3:*/		return 0x82179220;
		  /* 82179220h */ case    4:  		/* addi R11, R11, 36 */
		/* 82179220h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82179220h case    4:*/		return 0x82179224;
		  /* 82179224h */ case    5:  		/* stw R3, <#[R31 + 48]> */
		/* 82179224h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82179224h case    5:*/		return 0x82179228;
		  /* 82179228h */ case    6:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 82179228h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 82179228h case    6:*/		return 0x8217922C;
		  /* 8217922Ch */ case    7:  		/* addi R9, R11, 4 */
		/* 8217922Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8217922Ch case    7:*/		return 0x82179230;
		  /* 82179230h */ case    8:  		/* addi R10, R10, 36 */
		/* 82179230h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 82179230h case    8:*/		return 0x82179234;
		  /* 82179234h */ case    9:  		/* lwz R7, <#[R11 + 4]> */
		/* 82179234h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82179234h case    9:*/		return 0x82179238;
		  /* 82179238h */ case   10:  		/* addi R8, R10, 4 */
		/* 82179238h case   10:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82179238h case   10:*/		return 0x8217923C;
		  /* 8217923Ch */ case   11:  		/* stw R7, <#[R10 + 4]> */
		/* 8217923Ch case   11:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 8217923Ch case   11:*/		return 0x82179240;
		  /* 82179240h */ case   12:  		/* addi R7, R10, -36 */
		/* 82179240h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 82179240h case   12:*/		return 0x82179244;
		  /* 82179244h */ case   13:  		/* lwz R6, <#[R11 + 4]> */
		/* 82179244h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82179244h case   13:*/		return 0x82179248;
		  /* 82179248h */ case   14:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 82179248h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 82179248h case   14:*/		return 0x8217924C;
		  /* 8217924Ch */ case   15:  		/* stw R8, <#[R6 + 36]> */
		/* 8217924Ch case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000024) );
		/* 8217924Ch case   15:*/		return 0x82179250;
		  /* 82179250h */ case   16:  		/* stw R9, <#[R10]> */
		/* 82179250h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82179250h case   16:*/		return 0x82179254;
		  /* 82179254h */ case   17:  		/* stw R7, <#[R11 + 4]> */
		/* 82179254h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82179254h case   17:*/		return 0x82179258;
		  /* 82179258h */ case   18:  		/* lwz R11, <#[R30 + 76]> */
		/* 82179258h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 82179258h case   18:*/		return 0x8217925C;
		  /* 8217925Ch */ case   19:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 8217925Ch case   19:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 8217925Ch case   19:*/		return 0x82179260;
		  /* 82179260h */ case   20:  		/* bc 4, CR0_EQ, 16 */
		/* 82179260h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82179270;  }
		/* 82179260h case   20:*/		return 0x82179264;
		  /* 82179264h */ case   21:  		/* lwz R11, <#[R31 + 8]> */
		/* 82179264h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82179264h case   21:*/		return 0x82179268;
		  /* 82179268h */ case   22:  		/* oris R11, R11, 32768 */
		/* 82179268h case   22:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 82179268h case   22:*/		return 0x8217926C;
		  /* 8217926Ch */ case   23:  		/* stw R11, <#[R31 + 8]> */
		/* 8217926Ch case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217926Ch case   23:*/		return 0x82179270;
	}
	return 0x82179270;
} // Block from 82179210h-82179270h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82179270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179270);
		  /* 82179270h */ case    0:  		/* addi R8, R29, 4 */
		/* 82179270h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x4);
		/* 82179270h case    0:*/		return 0x82179274;
		  /* 82179274h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 82179274h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 82179274h case    1:*/		return 0x82179278;
		  /* 82179278h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 82179278h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179278h case    2:*/		return 0x8217927C;
		  /* 8217927Ch */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 8217927Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821792D8;  }
		/* 8217927Ch case    3:*/		return 0x82179280;
		  /* 82179280h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 82179280h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82179280h case    4:*/		return 0x82179284;
		  /* 82179284h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 82179284h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82179284h case    5:*/		return 0x82179288;
		  /* 82179288h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 82179288h case    6:*/		if ( regs.CR[6].eq ) { return 0x821792C4;  }
		/* 82179288h case    6:*/		return 0x8217928C;
		  /* 8217928Ch */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 8217928Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217928Ch case    7:*/		return 0x82179290;
		  /* 82179290h */ case    8:  		/* addi R10, R10, 4 */
		/* 82179290h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82179290h case    8:*/		return 0x82179294;
		  /* 82179294h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 82179294h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82179294h case    9:*/		return 0x82179298;
		  /* 82179298h */ case   10:  		/* b 12 */
		/* 82179298h case   10:*/		return 0x821792A4;
		/* 82179298h case   10:*/		return 0x8217929C;
		  /* 8217929Ch */ case   11:  		/* addi R10, R9, 8 */
		/* 8217929Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 8217929Ch case   11:*/		return 0x821792A0;
	}
	return 0x821792A0;
} // Block from 82179270h-821792A0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821792A0h
// Function '?FlipJumpCondition@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821792A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821792A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821792A0);
		  /* 821792A0h */ case    0:  		/* lwz R9, <#[R9 + 8]> */
		/* 821792A0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821792A0h case    0:*/		return 0x821792A4;
	}
	return 0x821792A4;
} // Block from 821792A0h-821792A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821792A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821792A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821792A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821792A4);
		  /* 821792A4h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821792A4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821792A4h case    0:*/		return 0x821792A8;
		  /* 821792A8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821792A8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217929C;  }
		/* 821792A8h case    1:*/		return 0x821792AC;
		  /* 821792ACh */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821792ACh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821792ACh case    2:*/		return 0x821792B0;
		  /* 821792B0h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821792B0h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821792B0h case    3:*/		return 0x821792B4;
		  /* 821792B4h */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 821792B4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821792B4h case    4:*/		return 0x821792B8;
		  /* 821792B8h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821792B8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821792B8h case    5:*/		return 0x821792BC;
		  /* 821792BCh */ case    6:  		/* stw R11, <#[R31 + 4]> */
		/* 821792BCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821792BCh case    6:*/		return 0x821792C0;
		  /* 821792C0h */ case    7:  		/* stw R31, <#[R11 + 12]> */
		/* 821792C0h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821792C0h case    7:*/		return 0x821792C4;
	}
	return 0x821792C4;
} // Block from 821792A4h-821792C4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821792C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821792C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821792C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821792C4);
		  /* 821792C4h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821792C4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821792C4h case    0:*/		return 0x821792C8;
		  /* 821792C8h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821792C8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821792C8h case    1:*/		return 0x821792CC;
		  /* 821792CCh */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821792CCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x82179274;  }
		/* 821792CCh case    2:*/		return 0x821792D0;
		  /* 821792D0h */ case    3:  		/* addi R8, R11, 8 */
		/* 821792D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821792D0h case    3:*/		return 0x821792D4;
		  /* 821792D4h */ case    4:  		/* b -96 */
		/* 821792D4h case    4:*/		return 0x82179274;
		/* 821792D4h case    4:*/		return 0x821792D8;
	}
	return 0x821792D8;
} // Block from 821792C4h-821792D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821792D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821792D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821792D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821792D8);
		  /* 821792D8h */ case    0:  		/* li R6, 1 */
		/* 821792D8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821792D8h case    0:*/		return 0x821792DC;
		  /* 821792DCh */ case    1:  		/* li R5, 0 */
		/* 821792DCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821792DCh case    1:*/		return 0x821792E0;
		  /* 821792E0h */ case    2:  		/* mr R4, R29 */
		/* 821792E0h case    2:*/		regs.R4 = regs.R29;
		/* 821792E0h case    2:*/		return 0x821792E4;
		  /* 821792E4h */ case    3:  		/* mr R3, R28 */
		/* 821792E4h case    3:*/		regs.R3 = regs.R28;
		/* 821792E4h case    3:*/		return 0x821792E8;
		  /* 821792E8h */ case    4:  		/* bl 729312 */
		/* 821792E8h case    4:*/		regs.LR = 0x821792EC; return 0x8222B3C8;
		/* 821792E8h case    4:*/		return 0x821792EC;
		  /* 821792ECh */ case    5:  		/* mr R3, R31 */
		/* 821792ECh case    5:*/		regs.R3 = regs.R31;
		/* 821792ECh case    5:*/		return 0x821792F0;
		  /* 821792F0h */ case    6:  		/* addi R1, R1, 128 */
		/* 821792F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821792F0h case    6:*/		return 0x821792F4;
		  /* 821792F4h */ case    7:  		/* b -950352 */
		/* 821792F4h case    7:*/		return 0x820912A4;
		/* 821792F4h case    7:*/		return 0x821792F8;
	}
	return 0x821792F8;
} // Block from 821792D8h-821792F8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821792F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821792F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821792F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821792F8);
		  /* 821792F8h */ case    0:  		/* mfspr R12, LR */
		/* 821792F8h case    0:*/		regs.R12 = regs.LR;
		/* 821792F8h case    0:*/		return 0x821792FC;
		  /* 821792FCh */ case    1:  		/* bl -950432 */
		/* 821792FCh case    1:*/		regs.LR = 0x82179300; return 0x8209125C;
		/* 821792FCh case    1:*/		return 0x82179300;
		  /* 82179300h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82179300h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82179300h case    2:*/		return 0x82179304;
		  /* 82179304h */ case    3:  		/* lwz R31, <#[R5 + 28]> */
		/* 82179304h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R5 + 0x0000001C) );
		/* 82179304h case    3:*/		return 0x82179308;
		  /* 82179308h */ case    4:  		/* mr R30, R3 */
		/* 82179308h case    4:*/		regs.R30 = regs.R3;
		/* 82179308h case    4:*/		return 0x8217930C;
		  /* 8217930Ch */ case    5:  		/* mr R29, R4 */
		/* 8217930Ch case    5:*/		regs.R29 = regs.R4;
		/* 8217930Ch case    5:*/		return 0x82179310;
		  /* 82179310h */ case    6:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82179310h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82179310h case    6:*/		return 0x82179314;
		  /* 82179314h */ case    7:  		/* bc 4, CR0_EQ, 104 */
		/* 82179314h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8217937C;  }
		/* 82179314h case    7:*/		return 0x82179318;
		  /* 82179318h */ case    8:  		/* cmplwi CR0, R31, 0 */
		/* 82179318h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 82179318h case    8:*/		return 0x8217931C;
		  /* 8217931Ch */ case    9:  		/* bc 12, CR0_EQ, 96 */
		/* 8217931Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8217937C;  }
		/* 8217931Ch case    9:*/		return 0x82179320;
		  /* 82179320h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 82179320h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82179320h case   10:*/		return 0x82179324;
		  /* 82179324h */ case   11:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 82179324h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 82179324h case   11:*/		return 0x82179328;
		  /* 82179328h */ case   12:  		/* cmplwi CR6, R10, 14080 */
		/* 82179328h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 82179328h case   12:*/		return 0x8217932C;
		  /* 8217932Ch */ case   13:  		/* bc 4, CR6_EQ, 56 */
		/* 8217932Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82179364;  }
		/* 8217932Ch case   13:*/		return 0x82179330;
		  /* 82179330h */ case   14:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 82179330h case   14:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 82179330h case   14:*/		return 0x82179334;
		  /* 82179334h */ case   15:  		/* bc 12, CR0_EQ, 48 */
		/* 82179334h case   15:*/		if ( regs.CR[0].eq ) { return 0x82179364;  }
		/* 82179334h case   15:*/		return 0x82179338;
		  /* 82179338h */ case   16:  		/* lwz R11, <#[R31 + 44]> */
		/* 82179338h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82179338h case   16:*/		return 0x8217933C;
		  /* 8217933Ch */ case   17:  		/* lwz R3, <#[R11 + 12]> */
		/* 8217933Ch case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217933Ch case   17:*/		return 0x82179340;
		  /* 82179340h */ case   18:  		/* bl 42408 */
		/* 82179340h case   18:*/		regs.LR = 0x82179344; return 0x821838E8;
		/* 82179340h case   18:*/		return 0x82179344;
		  /* 82179344h */ case   19:  		/* mr R4, R3 */
		/* 82179344h case   19:*/		regs.R4 = regs.R3;
		/* 82179344h case   19:*/		return 0x82179348;
		  /* 82179348h */ case   20:  		/* mr R3, R30 */
		/* 82179348h case   20:*/		regs.R3 = regs.R30;
		/* 82179348h case   20:*/		return 0x8217934C;
		  /* 8217934Ch */ case   21:  		/* bl 42516 */
		/* 8217934Ch case   21:*/		regs.LR = 0x82179350; return 0x82183960;
		/* 8217934Ch case   21:*/		return 0x82179350;
		  /* 82179350h */ case   22:  		/* mr R4, R3 */
		/* 82179350h case   22:*/		regs.R4 = regs.R3;
		/* 82179350h case   22:*/		return 0x82179354;
		  /* 82179354h */ case   23:  		/* mr R3, R30 */
		/* 82179354h case   23:*/		regs.R3 = regs.R30;
		/* 82179354h case   23:*/		return 0x82179358;
		  /* 82179358h */ case   24:  		/* bl 43632 */
		/* 82179358h case   24:*/		regs.LR = 0x8217935C; return 0x82183DC8;
		/* 82179358h case   24:*/		return 0x8217935C;
		  /* 8217935Ch */ case   25:  		/* cmplw CR6, R3, R29 */
		/* 8217935Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 8217935Ch case   25:*/		return 0x82179360;
		  /* 82179360h */ case   26:  		/* bc 12, CR6_EQ, 40 */
		/* 82179360h case   26:*/		if ( regs.CR[6].eq ) { return 0x82179388;  }
		/* 82179360h case   26:*/		return 0x82179364;
	}
	return 0x82179364;
} // Block from 821792F8h-82179364h (27 instructions)

//////////////////////////////////////////////////////
// Block at 82179364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179364);
		  /* 82179364h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82179364h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82179364h case    0:*/		return 0x82179368;
		  /* 82179368h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 82179368h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 82179368h case    1:*/		return 0x8217936C;
		  /* 8217936Ch */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217936Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217936Ch case    2:*/		return 0x82179370;
		  /* 82179370h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82179370h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217937C;  }
		/* 82179370h case    3:*/		return 0x82179374;
		  /* 82179374h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 82179374h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82179374h case    4:*/		return 0x82179378;
		  /* 82179378h */ case    5:  		/* bc 4, CR6_EQ, -88 */
		/* 82179378h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82179320;  }
		/* 82179378h case    5:*/		return 0x8217937C;
	}
	return 0x8217937C;
} // Block from 82179364h-8217937Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217937Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217937C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217937C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217937C);
		  /* 8217937Ch */ case    0:  		/* li R3, 0 */
		/* 8217937Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217937Ch case    0:*/		return 0x82179380;
		  /* 82179380h */ case    1:  		/* addi R1, R1, 112 */
		/* 82179380h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82179380h case    1:*/		return 0x82179384;
		  /* 82179384h */ case    2:  		/* b -950488 */
		/* 82179384h case    2:*/		return 0x820912AC;
		/* 82179384h case    2:*/		return 0x82179388;
	}
	return 0x82179388;
} // Block from 8217937Ch-82179388h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179388h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179388( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179388) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179388);
		  /* 82179388h */ case    0:  		/* li R3, 1 */
		/* 82179388h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82179388h case    0:*/		return 0x8217938C;
		  /* 8217938Ch */ case    1:  		/* b -12 */
		/* 8217938Ch case    1:*/		return 0x82179380;
		/* 8217938Ch case    1:*/		return 0x82179390;
	}
	return 0x82179390;
} // Block from 82179388h-82179390h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179390);
		  /* 82179390h */ case    0:  		/* mfspr R12, LR */
		/* 82179390h case    0:*/		regs.R12 = regs.LR;
		/* 82179390h case    0:*/		return 0x82179394;
		  /* 82179394h */ case    1:  		/* bl -950596 */
		/* 82179394h case    1:*/		regs.LR = 0x82179398; return 0x82091250;
		/* 82179394h case    1:*/		return 0x82179398;
		  /* 82179398h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82179398h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82179398h case    2:*/		return 0x8217939C;
		  /* 8217939Ch */ case    3:  		/* lwz R11, <#[R4 + 20]> */
		/* 8217939Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 8217939Ch case    3:*/		return 0x821793A0;
		  /* 821793A0h */ case    4:  		/* mr R28, R3 */
		/* 821793A0h case    4:*/		regs.R28 = regs.R3;
		/* 821793A0h case    4:*/		return 0x821793A4;
		  /* 821793A4h */ case    5:  		/* addi R27, R4, 16 */
		/* 821793A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x10);
		/* 821793A4h case    5:*/		return 0x821793A8;
		  /* 821793A8h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821793A8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821793A8h case    6:*/		return 0x821793AC;
		  /* 821793ACh */ case    7:  		/* bc 4, CR0_EQ, 392 */
		/* 821793ACh case    7:*/		if ( !regs.CR[0].eq ) { return 0x82179534;  }
		/* 821793ACh case    7:*/		return 0x821793B0;
		  /* 821793B0h */ case    8:  		/* mr R30, R11 */
		/* 821793B0h case    8:*/		regs.R30 = regs.R11;
		/* 821793B0h case    8:*/		return 0x821793B4;
		  /* 821793B4h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 821793B4h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821793B4h case    9:*/		return 0x821793B8;
		  /* 821793B8h */ case   10:  		/* bc 12, CR0_EQ, 380 */
		/* 821793B8h case   10:*/		if ( regs.CR[0].eq ) { return 0x82179534;  }
		/* 821793B8h case   10:*/		return 0x821793BC;
		  /* 821793BCh */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 821793BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821793BCh case   11:*/		return 0x821793C0;
		  /* 821793C0h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821793C0h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821793C0h case   12:*/		return 0x821793C4;
		  /* 821793C4h */ case   13:  		/* cmplwi CR6, R11, 14336 */
		/* 821793C4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821793C4h case   13:*/		return 0x821793C8;
		  /* 821793C8h */ case   14:  		/* bc 4, CR6_EQ, 336 */
		/* 821793C8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x82179518;  }
		/* 821793C8h case   14:*/		return 0x821793CC;
		  /* 821793CCh */ case   15:  		/* mr R3, R28 */
		/* 821793CCh case   15:*/		regs.R3 = regs.R28;
		/* 821793CCh case   15:*/		return 0x821793D0;
		  /* 821793D0h */ case   16:  		/* lhz R4, <#[R30 + 18]> */
		/* 821793D0h case   16:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000012) );
		/* 821793D0h case   16:*/		return 0x821793D4;
		  /* 821793D4h */ case   17:  		/* bl 42380 */
		/* 821793D4h case   17:*/		regs.LR = 0x821793D8; return 0x82183960;
		/* 821793D4h case   17:*/		return 0x821793D8;
		  /* 821793D8h */ case   18:  		/* lwz R31, <#[R27 + 4]> */
		/* 821793D8h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000004) );
		/* 821793D8h case   18:*/		return 0x821793DC;
		  /* 821793DCh */ case   19:  		/* mr R26, R3 */
		/* 821793DCh case   19:*/		regs.R26 = regs.R3;
		/* 821793DCh case   19:*/		return 0x821793E0;
		  /* 821793E0h */ case   20:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821793E0h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821793E0h case   20:*/		return 0x821793E4;
		  /* 821793E4h */ case   21:  		/* li R29, 0 */
		/* 821793E4h case   21:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821793E4h case   21:*/		return 0x821793E8;
		  /* 821793E8h */ case   22:  		/* bc 4, CR0_EQ, 304 */
		/* 821793E8h case   22:*/		if ( !regs.CR[0].eq ) { return 0x82179518;  }
		/* 821793E8h case   22:*/		return 0x821793EC;
		  /* 821793ECh */ case   23:  		/* cmplwi CR0, R31, 0 */
		/* 821793ECh case   23:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821793ECh case   23:*/		return 0x821793F0;
		  /* 821793F0h */ case   24:  		/* bc 12, CR0_EQ, 296 */
		/* 821793F0h case   24:*/		if ( regs.CR[0].eq ) { return 0x82179518;  }
		/* 821793F0h case   24:*/		return 0x821793F4;
		  /* 821793F4h */ case   25:  		/* cmplw CR6, R30, R31 */
		/* 821793F4h case   25:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 821793F4h case   25:*/		return 0x821793F8;
		  /* 821793F8h */ case   26:  		/* bc 12, CR6_EQ, 288 */
		/* 821793F8h case   26:*/		if ( regs.CR[6].eq ) { return 0x82179518;  }
		/* 821793F8h case   26:*/		return 0x821793FC;
		  /* 821793FCh */ case   27:  		/* lwz R11, <#[R31 + 8]> */
		/* 821793FCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821793FCh case   27:*/		return 0x82179400;
		  /* 82179400h */ case   28:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82179400h case   28:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82179400h case   28:*/		return 0x82179404;
		  /* 82179404h */ case   29:  		/* cmplwi CR6, R11, 14336 */
		/* 82179404h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 82179404h case   29:*/		return 0x82179408;
		  /* 82179408h */ case   30:  		/* bc 4, CR6_EQ, 148 */
		/* 82179408h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8217949C;  }
		/* 82179408h case   30:*/		return 0x8217940C;
		  /* 8217940Ch */ case   31:  		/* mr R3, R28 */
		/* 8217940Ch case   31:*/		regs.R3 = regs.R28;
		/* 8217940Ch case   31:*/		return 0x82179410;
		  /* 82179410h */ case   32:  		/* lhz R4, <#[R31 + 18]> */
		/* 82179410h case   32:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000012) );
		/* 82179410h case   32:*/		return 0x82179414;
		  /* 82179414h */ case   33:  		/* bl 42316 */
		/* 82179414h case   33:*/		regs.LR = 0x82179418; return 0x82183960;
		/* 82179414h case   33:*/		return 0x82179418;
		  /* 82179418h */ case   34:  		/* cmplw CR6, R26, R3 */
		/* 82179418h case   34:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R3);
		/* 82179418h case   34:*/		return 0x8217941C;
		  /* 8217941Ch */ case   35:  		/* bc 4, CR6_EQ, 128 */
		/* 8217941Ch case   35:*/		if ( !regs.CR[6].eq ) { return 0x8217949C;  }
		/* 8217941Ch case   35:*/		return 0x82179420;
		  /* 82179420h */ case   36:  		/* addi R8, R31, 4 */
		/* 82179420h case   36:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0x4);
		/* 82179420h case   36:*/		return 0x82179424;
		  /* 82179424h */ case   37:  		/* lwz R11, <#[R8]> */
		/* 82179424h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 82179424h case   37:*/		return 0x82179428;
		  /* 82179428h */ case   38:  		/* cmplwi CR6, R11, 0 */
		/* 82179428h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179428h case   38:*/		return 0x8217942C;
		  /* 8217942Ch */ case   39:  		/* bc 12, CR6_EQ, 92 */
		/* 8217942Ch case   39:*/		if ( regs.CR[6].eq ) { return 0x82179488;  }
		/* 8217942Ch case   39:*/		return 0x82179430;
		  /* 82179430h */ case   40:  		/* lwz R10, <#[R11 + 16]> */
		/* 82179430h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 82179430h case   40:*/		return 0x82179434;
		  /* 82179434h */ case   41:  		/* cmplwi CR6, R10, 0 */
		/* 82179434h case   41:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82179434h case   41:*/		return 0x82179438;
		  /* 82179438h */ case   42:  		/* bc 12, CR6_EQ, 60 */
		/* 82179438h case   42:*/		if ( regs.CR[6].eq ) { return 0x82179474;  }
		/* 82179438h case   42:*/		return 0x8217943C;
		  /* 8217943Ch */ case   43:  		/* lwz R10, <#[R11 + 12]> */
		/* 8217943Ch case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217943Ch case   43:*/		return 0x82179440;
		  /* 82179440h */ case   44:  		/* addi R10, R10, 4 */
		/* 82179440h case   44:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 82179440h case   44:*/		return 0x82179444;
		  /* 82179444h */ case   45:  		/* lwz R9, <#[R10]> */
		/* 82179444h case   45:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82179444h case   45:*/		return 0x82179448;
		  /* 82179448h */ case   46:  		/* b 12 */
		/* 82179448h case   46:*/		return 0x82179454;
		/* 82179448h case   46:*/		return 0x8217944C;
		  /* 8217944Ch */ case   47:  		/* addi R10, R9, 8 */
		/* 8217944Ch case   47:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 8217944Ch case   47:*/		return 0x82179450;
		  /* 82179450h */ case   48:  		/* lwz R9, <#[R9 + 8]> */
		/* 82179450h case   48:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82179450h case   48:*/		return 0x82179454;
	}
	return 0x82179454;
} // Block from 82179390h-82179454h (49 instructions)

//////////////////////////////////////////////////////
// Block at 82179454h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179454( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179454) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179454);
		  /* 82179454h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 82179454h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 82179454h case    0:*/		return 0x82179458;
		  /* 82179458h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 82179458h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217944C;  }
		/* 82179458h case    1:*/		return 0x8217945C;
		  /* 8217945Ch */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 8217945Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8217945Ch case    2:*/		return 0x82179460;
		  /* 82179460h */ case    3:  		/* stw R9, <#[R10]> */
		/* 82179460h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 82179460h case    3:*/		return 0x82179464;
		  /* 82179464h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 82179464h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 82179464h case    4:*/		return 0x82179468;
		  /* 82179468h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 82179468h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82179468h case    5:*/		return 0x8217946C;
		  /* 8217946Ch */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 8217946Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8217946Ch case    6:*/		return 0x82179470;
		  /* 82179470h */ case    7:  		/* stw R30, <#[R11 + 12]> */
		/* 82179470h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 82179470h case    7:*/		return 0x82179474;
	}
	return 0x82179474;
} // Block from 82179454h-82179474h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82179474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179474);
		  /* 82179474h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 82179474h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82179474h case    0:*/		return 0x82179478;
		  /* 82179478h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 82179478h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 82179478h case    1:*/		return 0x8217947C;
		  /* 8217947Ch */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 8217947Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82179424;  }
		/* 8217947Ch case    2:*/		return 0x82179480;
		  /* 82179480h */ case    3:  		/* addi R8, R11, 8 */
		/* 82179480h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 82179480h case    3:*/		return 0x82179484;
		  /* 82179484h */ case    4:  		/* b -96 */
		/* 82179484h case    4:*/		return 0x82179424;
		/* 82179484h case    4:*/		return 0x82179488;
	}
	return 0x82179488;
} // Block from 82179474h-82179488h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82179488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179488);
		  /* 82179488h */ case    0:  		/* li R6, 1 */
		/* 82179488h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82179488h case    0:*/		return 0x8217948C;
		  /* 8217948Ch */ case    1:  		/* lwz R5, <#[R28 + 652]> */
		/* 8217948Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000028C) );
		/* 8217948Ch case    1:*/		return 0x82179490;
		  /* 82179490h */ case    2:  		/* mr R4, R31 */
		/* 82179490h case    2:*/		regs.R4 = regs.R31;
		/* 82179490h case    2:*/		return 0x82179494;
		  /* 82179494h */ case    3:  		/* mr R3, R28 */
		/* 82179494h case    3:*/		regs.R3 = regs.R28;
		/* 82179494h case    3:*/		return 0x82179498;
		  /* 82179498h */ case    4:  		/* bl 728880 */
		/* 82179498h case    4:*/		regs.LR = 0x8217949C; return 0x8222B3C8;
		/* 82179498h case    4:*/		return 0x8217949C;
	}
	return 0x8217949C;
} // Block from 82179488h-8217949Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217949Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217949C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217949C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217949C);
		  /* 8217949Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8217949Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217949Ch case    0:*/		return 0x821794A0;
		  /* 821794A0h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 821794A0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821794D0;  }
		/* 821794A0h case    1:*/		return 0x821794A4;
		  /* 821794A4h */ case    2:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 821794A4h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 821794A4h case    2:*/		return 0x821794A8;
		  /* 821794A8h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 821794A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821794A8h case    3:*/		return 0x821794AC;
		  /* 821794ACh */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821794ACh case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821794ACh case    4:*/		return 0x821794B0;
		  /* 821794B0h */ case    5:  		/* addic R10, R10, -1 */
		/* 821794B0h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821794B0h case    5:*/		return 0x821794B4;
		  /* 821794B4h */ case    6:  		/* subfe R10, R10, R10 */
		/* 821794B4h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 821794B4h case    6:*/		return 0x821794B8;
		  /* 821794B8h */ case    7:  		/* and R10, R10, R11 */
		/* 821794B8h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821794B8h case    7:*/		return 0x821794BC;
		  /* 821794BCh */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 821794BCh case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 821794BCh case    8:*/		return 0x821794C0;
		  /* 821794C0h */ case    9:  		/* bc 12, CR6_EQ, 44 */
		/* 821794C0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821794EC;  }
		/* 821794C0h case    9:*/		return 0x821794C4;
		  /* 821794C4h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821794C4h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821794C4h case   10:*/		return 0x821794C8;
		  /* 821794C8h */ case   11:  		/* bc 4, CR0_EQ, 80 */
		/* 821794C8h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82179518;  }
		/* 821794C8h case   11:*/		return 0x821794CC;
		  /* 821794CCh */ case   12:  		/* b 64 */
		/* 821794CCh case   12:*/		return 0x8217950C;
		/* 821794CCh case   12:*/		return 0x821794D0;
	}
	return 0x821794D0;
} // Block from 8217949Ch-821794D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821794D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821794D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821794D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821794D0);
		  /* 821794D0h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 821794D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821794D0h case    0:*/		return 0x821794D4;
		  /* 821794D4h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 821794D4h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821794D4h case    1:*/		return 0x821794D8;
		  /* 821794D8h */ case    2:  		/* addic R9, R10, -1 */
		/* 821794D8h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 821794D8h case    2:*/		return 0x821794DC;
		  /* 821794DCh */ case    3:  		/* subfe R9, R9, R9 */
		/* 821794DCh case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821794DCh case    3:*/		return 0x821794E0;
		  /* 821794E0h */ case    4:  		/* and R9, R9, R11 */
		/* 821794E0h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821794E0h case    4:*/		return 0x821794E4;
		  /* 821794E4h */ case    5:  		/* cmplw CR6, R31, R9 */
		/* 821794E4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 821794E4h case    5:*/		return 0x821794E8;
		  /* 821794E8h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 821794E8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82179504;  }
		/* 821794E8h case    6:*/		return 0x821794EC;
	}
	return 0x821794EC;
} // Block from 821794D0h-821794ECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821794ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821794EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821794EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821794EC);
		  /* 821794ECh */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821794ECh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821794ECh case    0:*/		return 0x821794F0;
		  /* 821794F0h */ case    1:  		/* mr R29, R31 */
		/* 821794F0h case    1:*/		regs.R29 = regs.R31;
		/* 821794F0h case    1:*/		return 0x821794F4;
		  /* 821794F4h */ case    2:  		/* lwz R31, <#[R11 + 40]> */
		/* 821794F4h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821794F4h case    2:*/		return 0x821794F8;
	}
	return 0x821794F8;
} // Block from 821794ECh-821794F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821794F8h
// Function '?FindScopeExits@Compiler@D3DXShader@@AAA_NPAVBlock@2@0PA_N1PAPAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821794F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821794F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821794F8);
		  /* 821794F8h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821794F8h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821794F8h case    0:*/		return 0x821794FC;
		  /* 821794FCh */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 821794FCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x82179518;  }
		/* 821794FCh case    1:*/		return 0x82179500;
		  /* 82179500h */ case    2:  		/* b 16 */
		/* 82179500h case    2:*/		return 0x82179510;
		/* 82179500h case    2:*/		return 0x82179504;
	}
	return 0x82179504;
} // Block from 821794F8h-82179504h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179504);
		  /* 82179504h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82179504h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82179504h case    0:*/		return 0x82179508;
		  /* 82179508h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82179508h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82179518;  }
		/* 82179508h case    1:*/		return 0x8217950C;
	}
	return 0x8217950C;
} // Block from 82179504h-8217950Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217950Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217950C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217950C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217950C);
		  /* 8217950Ch */ case    0:  		/* mr R31, R11 */
		/* 8217950Ch case    0:*/		regs.R31 = regs.R11;
		/* 8217950Ch case    0:*/		return 0x82179510;
	}
	return 0x82179510;
} // Block from 8217950Ch-82179510h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179510);
		  /* 82179510h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82179510h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82179510h case    0:*/		return 0x82179514;
		  /* 82179514h */ case    1:  		/* bc 4, CR6_EQ, -288 */
		/* 82179514h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821793F4;  }
		/* 82179514h case    1:*/		return 0x82179518;
	}
	return 0x82179518;
} // Block from 82179510h-82179518h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179518);
		  /* 82179518h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 82179518h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 82179518h case    0:*/		return 0x8217951C;
		  /* 8217951Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217951Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217951Ch case    1:*/		return 0x82179520;
		  /* 82179520h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179520h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179520h case    2:*/		return 0x82179524;
		  /* 82179524h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82179524h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82179534;  }
		/* 82179524h case    3:*/		return 0x82179528;
		  /* 82179528h */ case    4:  		/* mr R30, R11 */
		/* 82179528h case    4:*/		regs.R30 = regs.R11;
		/* 82179528h case    4:*/		return 0x8217952C;
		  /* 8217952Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217952Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217952Ch case    5:*/		return 0x82179530;
		  /* 82179530h */ case    6:  		/* bc 4, CR6_EQ, -372 */
		/* 82179530h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821793BC;  }
		/* 82179530h case    6:*/		return 0x82179534;
	}
	return 0x82179534;
} // Block from 82179518h-82179534h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82179534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179534);
		  /* 82179534h */ case    0:  		/* addi R1, R1, 144 */
		/* 82179534h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 82179534h case    0:*/		return 0x82179538;
		  /* 82179538h */ case    1:  		/* b -950936 */
		/* 82179538h case    1:*/		return 0x820912A0;
		/* 82179538h case    1:*/		return 0x8217953C;
		  /* 8217953Ch */ case    2:  		/* nop */
		/* 8217953Ch case    2:*/		cpu::op::nop();
		/* 8217953Ch case    2:*/		return 0x82179540;
	}
	return 0x82179540;
} // Block from 82179534h-82179540h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179540);
		  /* 82179540h */ case    0:  		/* mfspr R12, LR */
		/* 82179540h case    0:*/		regs.R12 = regs.LR;
		/* 82179540h case    0:*/		return 0x82179544;
		  /* 82179544h */ case    1:  		/* bl -951056 */
		/* 82179544h case    1:*/		regs.LR = 0x82179548; return 0x82091234;
		/* 82179544h case    1:*/		return 0x82179548;
		  /* 82179548h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 82179548h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 82179548h case    2:*/		return 0x8217954C;
		  /* 8217954Ch */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 8217954Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8217954Ch case    3:*/		return 0x82179550;
		  /* 82179550h */ case    4:  		/* mr R25, R3 */
		/* 82179550h case    4:*/		regs.R25 = regs.R3;
		/* 82179550h case    4:*/		return 0x82179554;
		  /* 82179554h */ case    5:  		/* mr R27, R4 */
		/* 82179554h case    5:*/		regs.R27 = regs.R4;
		/* 82179554h case    5:*/		return 0x82179558;
		  /* 82179558h */ case    6:  		/* mr R26, R5 */
		/* 82179558h case    6:*/		regs.R26 = regs.R5;
		/* 82179558h case    6:*/		return 0x8217955C;
		  /* 8217955Ch */ case    7:  		/* mr R21, R6 */
		/* 8217955Ch case    7:*/		regs.R21 = regs.R6;
		/* 8217955Ch case    7:*/		return 0x82179560;
		  /* 82179560h */ case    8:  		/* mr R24, R7 */
		/* 82179560h case    8:*/		regs.R24 = regs.R7;
		/* 82179560h case    8:*/		return 0x82179564;
		  /* 82179564h */ case    9:  		/* mr R19, R8 */
		/* 82179564h case    9:*/		regs.R19 = regs.R8;
		/* 82179564h case    9:*/		return 0x82179568;
		  /* 82179568h */ case   10:  		/* li R22, 0 */
		/* 82179568h case   10:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 82179568h case   10:*/		return 0x8217956C;
		  /* 8217956Ch */ case   11:  		/* li R23, 1 */
		/* 8217956Ch case   11:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 8217956Ch case   11:*/		return 0x82179570;
		  /* 82179570h */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179570h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179570h case   12:*/		return 0x82179574;
		  /* 82179574h */ case   13:  		/* li R20, 0 */
		/* 82179574h case   13:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 82179574h case   13:*/		return 0x82179578;
		  /* 82179578h */ case   14:  		/* bc 4, CR0_EQ, 560 */
		/* 82179578h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821797A8;  }
		/* 82179578h case   14:*/		return 0x8217957C;
		  /* 8217957Ch */ case   15:  		/* mr R29, R11 */
		/* 8217957Ch case   15:*/		regs.R29 = regs.R11;
		/* 8217957Ch case   15:*/		return 0x82179580;
		  /* 82179580h */ case   16:  		/* cmplwi CR0, R11, 0 */
		/* 82179580h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82179580h case   16:*/		return 0x82179584;
		  /* 82179584h */ case   17:  		/* bc 12, CR0_EQ, 548 */
		/* 82179584h case   17:*/		if ( regs.CR[0].eq ) { return 0x821797A8;  }
		/* 82179584h case   17:*/		return 0x82179588;
		  /* 82179588h */ case   18:  		/* lwz R10, <#[R27 + 48]> */
		/* 82179588h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000030) );
		/* 82179588h case   18:*/		return 0x8217958C;
		  /* 8217958Ch */ case   19:  		/* lwz R11, <#[R29 + 40]> */
		/* 8217958Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 8217958Ch case   19:*/		return 0x82179590;
		  /* 82179590h */ case   20:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 82179590h case   20:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 82179590h case   20:*/		return 0x82179594;
		  /* 82179594h */ case   21:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 82179594h case   21:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 82179594h case   21:*/		return 0x82179598;
		  /* 82179598h */ case   22:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82179598h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82179598h case   22:*/		return 0x8217959C;
		  /* 8217959Ch */ case   23:  		/* addi R10, R10, 1 */
		/* 8217959Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217959Ch case   23:*/		return 0x821795A0;
		  /* 821795A0h */ case   24:  		/* slw R9, R23, R9 */
		/* 821795A0h case   24:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821795A0h case   24:*/		return 0x821795A4;
		  /* 821795A4h */ case   25:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821795A4h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821795A4h case   25:*/		return 0x821795A8;
		  /* 821795A8h */ case   26:  		/* lwzx R10, <#[R10 + R11]> */
		/* 821795A8h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821795A8h case   26:*/		return 0x821795AC;
		  /* 821795ACh */ case   27:  		/* and. R10, R9, R10 */
		/* 821795ACh case   27:*/		cpu::op::and<1>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821795ACh case   27:*/		return 0x821795B0;
		  /* 821795B0h */ case   28:  		/* bc 12, CR0_EQ, 476 */
		/* 821795B0h case   28:*/		if ( regs.CR[0].eq ) { return 0x8217978C;  }
		/* 821795B0h case   28:*/		return 0x821795B4;
		  /* 821795B4h */ case   29:  		/* cmplwi CR6, R26, 0 */
		/* 821795B4h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821795B4h case   29:*/		return 0x821795B8;
		  /* 821795B8h */ case   30:  		/* bc 12, CR6_EQ, 44 */
		/* 821795B8h case   30:*/		if ( regs.CR[6].eq ) { return 0x821795E4;  }
		/* 821795B8h case   30:*/		return 0x821795BC;
		  /* 821795BCh */ case   31:  		/* lwz R10, <#[R26 + 48]> */
		/* 821795BCh case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000030) );
		/* 821795BCh case   31:*/		return 0x821795C0;
		  /* 821795C0h */ case   32:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 821795C0h case   32:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 821795C0h case   32:*/		return 0x821795C4;
		  /* 821795C4h */ case   33:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 821795C4h case   33:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 821795C4h case   33:*/		return 0x821795C8;
		  /* 821795C8h */ case   34:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 821795C8h case   34:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821795C8h case   34:*/		return 0x821795CC;
		  /* 821795CCh */ case   35:  		/* addi R10, R10, 1 */
		/* 821795CCh case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821795CCh case   35:*/		return 0x821795D0;
		  /* 821795D0h */ case   36:  		/* slw R9, R23, R9 */
		/* 821795D0h case   36:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821795D0h case   36:*/		return 0x821795D4;
		  /* 821795D4h */ case   37:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821795D4h case   37:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821795D4h case   37:*/		return 0x821795D8;
		  /* 821795D8h */ case   38:  		/* lwzx R11, <#[R10 + R11]> */
		/* 821795D8h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821795D8h case   38:*/		return 0x821795DC;
		  /* 821795DCh */ case   39:  		/* and. R11, R9, R11 */
		/* 821795DCh case   39:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821795DCh case   39:*/		return 0x821795E0;
		  /* 821795E0h */ case   40:  		/* bc 4, CR0_EQ, 428 */
		/* 821795E0h case   40:*/		if ( !regs.CR[0].eq ) { return 0x8217978C;  }
		/* 821795E0h case   40:*/		return 0x821795E4;
	}
	return 0x821795E4;
} // Block from 82179540h-821795E4h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821795E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821795E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821795E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821795E4);
		  /* 821795E4h */ case    0:  		/* lwz R11, <#[R29 + 48]> */
		/* 821795E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 821795E4h case    0:*/		return 0x821795E8;
		  /* 821795E8h */ case    1:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821795E8h case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821795E8h case    1:*/		return 0x821795EC;
		  /* 821795ECh */ case    2:  		/* bc 4, CR0_EQ, 736 */
		/* 821795ECh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821798CC;  }
		/* 821795ECh case    2:*/		return 0x821795F0;
		  /* 821795F0h */ case    3:  		/* lwz R11, <#[R29 + 28]> */
		/* 821795F0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000001C) );
		/* 821795F0h case    3:*/		return 0x821795F4;
		  /* 821795F4h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821795F4h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821795F4h case    4:*/		return 0x821795F8;
		  /* 821795F8h */ case    5:  		/* bc 12, CR0_EQ, 32 */
		/* 821795F8h case    5:*/		if ( regs.CR[0].eq ) { return 0x82179618;  }
		/* 821795F8h case    5:*/		return 0x821795FC;
		  /* 821795FCh */ case    6:  		/* lwz R11, <#[R29 + 36]> */
		/* 821795FCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 821795FCh case    6:*/		return 0x82179600;
		  /* 82179600h */ case    7:  		/* addi R28, R29, 32 */
		/* 82179600h case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x20);
		/* 82179600h case    7:*/		return 0x82179604;
		  /* 82179604h */ case    8:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82179604h case    8:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179604h case    8:*/		return 0x82179608;
		  /* 82179608h */ case    9:  		/* addic R10, R10, -1 */
		/* 82179608h case    9:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82179608h case    9:*/		return 0x8217960C;
		  /* 8217960Ch */ case   10:  		/* subfe R10, R10, R10 */
		/* 8217960Ch case   10:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217960Ch case   10:*/		return 0x82179610;
		  /* 82179610h */ case   11:  		/* and R30, R10, R11 */
		/* 82179610h case   11:*/		cpu::op::and<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 82179610h case   11:*/		return 0x82179614;
		  /* 82179614h */ case   12:  		/* b 28 */
		/* 82179614h case   12:*/		return 0x82179630;
		/* 82179614h case   12:*/		return 0x82179618;
	}
	return 0x82179618;
} // Block from 821795E4h-82179618h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82179618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179618);
		  /* 82179618h */ case    0:  		/* lwz R10, <#[R29 + 28]> */
		/* 82179618h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000001C) );
		/* 82179618h case    0:*/		return 0x8217961C;
		  /* 8217961Ch */ case    1:  		/* addi R28, R29, 24 */
		/* 8217961Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x18);
		/* 8217961Ch case    1:*/		return 0x82179620;
		  /* 82179620h */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 82179620h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 82179620h case    2:*/		return 0x82179624;
		  /* 82179624h */ case    3:  		/* addic R11, R9, -1 */
		/* 82179624h case    3:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 82179624h case    3:*/		return 0x82179628;
		  /* 82179628h */ case    4:  		/* subfe R11, R11, R11 */
		/* 82179628h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82179628h case    4:*/		return 0x8217962C;
		  /* 8217962Ch */ case    5:  		/* and R30, R11, R10 */
		/* 8217962Ch case    5:*/		cpu::op::and<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8217962Ch case    5:*/		return 0x82179630;
	}
	return 0x82179630;
} // Block from 82179618h-82179630h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82179630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179630);
		  /* 82179630h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82179630h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82179630h case    0:*/		return 0x82179634;
		  /* 82179634h */ case    1:  		/* bc 12, CR6_EQ, 344 */
		/* 82179634h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217978C;  }
		/* 82179634h case    1:*/		return 0x82179638;
		  /* 82179638h */ case    2:  		/* mr R3, R30 */
		/* 82179638h case    2:*/		regs.R3 = regs.R30;
		/* 82179638h case    2:*/		return 0x8217963C;
		  /* 8217963Ch */ case    3:  		/* bl -87436 */
		/* 8217963Ch case    3:*/		regs.LR = 0x82179640; return 0x821640B0;
		/* 8217963Ch case    3:*/		return 0x82179640;
		  /* 82179640h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82179640h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82179640h case    4:*/		return 0x82179644;
		  /* 82179644h */ case    5:  		/* bc 4, CR0_EQ, 648 */
		/* 82179644h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821798CC;  }
		/* 82179644h case    5:*/		return 0x82179648;
		  /* 82179648h */ case    6:  		/* lwz R31, <#[R30 + 8]> */
		/* 82179648h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 82179648h case    6:*/		return 0x8217964C;
		  /* 8217964Ch */ case    7:  		/* rlwinm. R11, R31, 7, 31, 31 */
		/* 8217964Ch case    7:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R11,regs.R31);
		/* 8217964Ch case    7:*/		return 0x82179650;
		  /* 82179650h */ case    8:  		/* bc 4, CR0_EQ, 636 */
		/* 82179650h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821798CC;  }
		/* 82179650h case    8:*/		return 0x82179654;
		  /* 82179654h */ case    9:  		/* mr R3, R30 */
		/* 82179654h case    9:*/		regs.R3 = regs.R30;
		/* 82179654h case    9:*/		return 0x82179658;
		  /* 82179658h */ case   10:  		/* bl -7224 */
		/* 82179658h case   10:*/		regs.LR = 0x8217965C; return 0x82177A20;
		/* 82179658h case   10:*/		return 0x8217965C;
		  /* 8217965Ch */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217965Ch case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217965Ch case   11:*/		return 0x82179660;
		  /* 82179660h */ case   12:  		/* bc 12, CR0_EQ, 620 */
		/* 82179660h case   12:*/		if ( regs.CR[0].eq ) { return 0x821798CC;  }
		/* 82179660h case   12:*/		return 0x82179664;
		  /* 82179664h */ case   13:  		/* rlwinm R31, R31, 25, 25, 31 */
		/* 82179664h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R31,regs.R31);
		/* 82179664h case   13:*/		return 0x82179668;
		  /* 82179668h */ case   14:  		/* cmplwi CR6, R31, 1 */
		/* 82179668h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000001);
		/* 82179668h case   14:*/		return 0x8217966C;
		  /* 8217966Ch */ case   15:  		/* bc 12, CR6_LT, 16 */
		/* 8217966Ch case   15:*/		if ( regs.CR[6].lt ) { return 0x8217967C;  }
		/* 8217966Ch case   15:*/		return 0x82179670;
		  /* 82179670h */ case   16:  		/* cmplwi CR6, R31, 102 */
		/* 82179670h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000066);
		/* 82179670h case   16:*/		return 0x82179674;
		  /* 82179674h */ case   17:  		/* mr R11, R23 */
		/* 82179674h case   17:*/		regs.R11 = regs.R23;
		/* 82179674h case   17:*/		return 0x82179678;
		  /* 82179678h */ case   18:  		/* bc 4, CR6_GT, 8 */
		/* 82179678h case   18:*/		if ( !regs.CR[6].gt ) { return 0x82179680;  }
		/* 82179678h case   18:*/		return 0x8217967C;
	}
	return 0x8217967C;
} // Block from 82179630h-8217967Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8217967Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217967C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217967C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217967C);
		  /* 8217967Ch */ case    0:  		/* li R11, 0 */
		/* 8217967Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217967Ch case    0:*/		return 0x82179680;
	}
	return 0x82179680;
} // Block from 8217967Ch-82179680h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179680);
		  /* 82179680h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82179680h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82179680h case    0:*/		return 0x82179684;
		  /* 82179684h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82179684h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82179690;  }
		/* 82179684h case    1:*/		return 0x82179688;
		  /* 82179688h */ case    2:  		/* cmplwi CR6, R31, 105 */
		/* 82179688h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000069);
		/* 82179688h case    2:*/		return 0x8217968C;
		  /* 8217968Ch */ case    3:  		/* bc 4, CR6_EQ, 188 */
		/* 8217968Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x82179748;  }
		/* 8217968Ch case    3:*/		return 0x82179690;
	}
	return 0x82179690;
} // Block from 82179680h-82179690h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82179690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179690);
		  /* 82179690h */ case    0:  		/* lwz R11, <#[R25 + 40]> */
		/* 82179690h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000028) );
		/* 82179690h case    0:*/		return 0x82179694;
		  /* 82179694h */ case    1:  		/* addi R22, R22, 1 */
		/* 82179694h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 82179694h case    1:*/		return 0x82179698;
		  /* 82179698h */ case    2:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82179698h case    2:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82179698h case    2:*/		return 0x8217969C;
		  /* 8217969Ch */ case    3:  		/* bc 12, CR0_EQ, 120 */
		/* 8217969Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82179714;  }
		/* 8217969Ch case    3:*/		return 0x821796A0;
		  /* 821796A0h */ case    4:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821796A0h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821796A0h case    4:*/		return 0x821796A4;
		  /* 821796A4h */ case    5:  		/* lwz R11, <#[R11 + 36]> */
		/* 821796A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 821796A4h case    5:*/		return 0x821796A8;
		  /* 821796A8h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821796A8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821796A8h case    6:*/		return 0x821796AC;
		  /* 821796ACh */ case    7:  		/* bc 4, CR0_EQ, 104 */
		/* 821796ACh case    7:*/		if ( !regs.CR[0].eq ) { return 0x82179714;  }
		/* 821796ACh case    7:*/		return 0x821796B0;
		  /* 821796B0h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821796B0h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821796B0h case    8:*/		return 0x821796B4;
		  /* 821796B4h */ case    9:  		/* addic. R3, R11, -40 */
		/* 821796B4h case    9:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFD8);
		/* 821796B4h case    9:*/		return 0x821796B8;
		  /* 821796B8h */ case   10:  		/* bc 12, CR0_EQ, 92 */
		/* 821796B8h case   10:*/		if ( regs.CR[0].eq ) { return 0x82179714;  }
		/* 821796B8h case   10:*/		return 0x821796BC;
		  /* 821796BCh */ case   11:  		/* cmplwi CR6, R31, 32 */
		/* 821796BCh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000020);
		/* 821796BCh case   11:*/		return 0x821796C0;
		  /* 821796C0h */ case   12:  		/* bc 12, CR6_LT, 16 */
		/* 821796C0h case   12:*/		if ( regs.CR[6].lt ) { return 0x821796D0;  }
		/* 821796C0h case   12:*/		return 0x821796C4;
		  /* 821796C4h */ case   13:  		/* cmplwi CR6, R31, 82 */
		/* 821796C4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000052);
		/* 821796C4h case   13:*/		return 0x821796C8;
		  /* 821796C8h */ case   14:  		/* mr R11, R23 */
		/* 821796C8h case   14:*/		regs.R11 = regs.R23;
		/* 821796C8h case   14:*/		return 0x821796CC;
		  /* 821796CCh */ case   15:  		/* bc 4, CR6_GT, 8 */
		/* 821796CCh case   15:*/		if ( !regs.CR[6].gt ) { return 0x821796D4;  }
		/* 821796CCh case   15:*/		return 0x821796D0;
	}
	return 0x821796D0;
} // Block from 82179690h-821796D0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821796D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821796D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821796D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821796D0);
		  /* 821796D0h */ case    0:  		/* li R11, 0 */
		/* 821796D0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821796D0h case    0:*/		return 0x821796D4;
	}
	return 0x821796D4;
} // Block from 821796D0h-821796D4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821796D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821796D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821796D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821796D4);
		  /* 821796D4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821796D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821796D4h case    0:*/		return 0x821796D8;
		  /* 821796D8h */ case    1:  		/* bc 12, CR0_EQ, 60 */
		/* 821796D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x82179714;  }
		/* 821796D8h case    1:*/		return 0x821796DC;
		  /* 821796DCh */ case    2:  		/* lwz R11, <#[R3 + 8]> */
		/* 821796DCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821796DCh case    2:*/		return 0x821796E0;
		  /* 821796E0h */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821796E0h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821796E0h case    3:*/		return 0x821796E4;
		  /* 821796E4h */ case    4:  		/* cmplwi CR6, R11, 1 */
		/* 821796E4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821796E4h case    4:*/		return 0x821796E8;
		  /* 821796E8h */ case    5:  		/* bc 12, CR6_LT, 16 */
		/* 821796E8h case    5:*/		if ( regs.CR[6].lt ) { return 0x821796F8;  }
		/* 821796E8h case    5:*/		return 0x821796EC;
		  /* 821796ECh */ case    6:  		/* cmplwi CR6, R11, 31 */
		/* 821796ECh case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001F);
		/* 821796ECh case    6:*/		return 0x821796F0;
		  /* 821796F0h */ case    7:  		/* mr R11, R23 */
		/* 821796F0h case    7:*/		regs.R11 = regs.R23;
		/* 821796F0h case    7:*/		return 0x821796F4;
		  /* 821796F4h */ case    8:  		/* bc 4, CR6_GT, 8 */
		/* 821796F4h case    8:*/		if ( !regs.CR[6].gt ) { return 0x821796FC;  }
		/* 821796F4h case    8:*/		return 0x821796F8;
	}
	return 0x821796F8;
} // Block from 821796D4h-821796F8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821796F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821796F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821796F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821796F8);
		  /* 821796F8h */ case    0:  		/* li R11, 0 */
		/* 821796F8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821796F8h case    0:*/		return 0x821796FC;
	}
	return 0x821796FC;
} // Block from 821796F8h-821796FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821796FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821796FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821796FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821796FC);
		  /* 821796FCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821796FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821796FCh case    0:*/		return 0x82179700;
		  /* 82179700h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 82179700h case    1:*/		if ( regs.CR[0].eq ) { return 0x82179714;  }
		/* 82179700h case    1:*/		return 0x82179704;
		  /* 82179704h */ case    2:  		/* bl -84372 */
		/* 82179704h case    2:*/		regs.LR = 0x82179708; return 0x82164D70;
		/* 82179704h case    2:*/		return 0x82179708;
		  /* 82179708h */ case    3:  		/* cmplw CR6, R30, R3 */
		/* 82179708h case    3:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 82179708h case    3:*/		return 0x8217970C;
		  /* 8217970Ch */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 8217970Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x82179714;  }
		/* 8217970Ch case    4:*/		return 0x82179710;
		  /* 82179710h */ case    5:  		/* addi R22, R22, -1 */
		/* 82179710h case    5:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0xFFFFFFFF);
		/* 82179710h case    5:*/		return 0x82179714;
	}
	return 0x82179714;
} // Block from 821796FCh-82179714h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82179714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179714);
		  /* 82179714h */ case    0:  		/* cmplwi CR6, R31, 96 */
		/* 82179714h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000060);
		/* 82179714h case    0:*/		return 0x82179718;
		  /* 82179718h */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 82179718h case    1:*/		if ( regs.CR[6].lt ) { return 0x82179728;  }
		/* 82179718h case    1:*/		return 0x8217971C;
		  /* 8217971Ch */ case    2:  		/* cmplwi CR6, R31, 102 */
		/* 8217971Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000066);
		/* 8217971Ch case    2:*/		return 0x82179720;
		  /* 82179720h */ case    3:  		/* mr R11, R23 */
		/* 82179720h case    3:*/		regs.R11 = regs.R23;
		/* 82179720h case    3:*/		return 0x82179724;
		  /* 82179724h */ case    4:  		/* bc 4, CR6_GT, 8 */
		/* 82179724h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8217972C;  }
		/* 82179724h case    4:*/		return 0x82179728;
	}
	return 0x82179728;
} // Block from 82179714h-82179728h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82179728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179728);
		  /* 82179728h */ case    0:  		/* li R11, 0 */
		/* 82179728h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82179728h case    0:*/		return 0x8217972C;
	}
	return 0x8217972C;
} // Block from 82179728h-8217972Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217972Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217972C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217972C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217972C);
		  /* 8217972Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217972Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217972Ch case    0:*/		return 0x82179730;
		  /* 82179730h */ case    1:  		/* bc 4, CR0_EQ, 20 */
		/* 82179730h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82179744;  }
		/* 82179730h case    1:*/		return 0x82179734;
		  /* 82179734h */ case    2:  		/* mr R3, R30 */
		/* 82179734h case    2:*/		regs.R3 = regs.R30;
		/* 82179734h case    2:*/		return 0x82179738;
		  /* 82179738h */ case    3:  		/* bl 90848 */
		/* 82179738h case    3:*/		regs.LR = 0x8217973C; return 0x8218FA18;
		/* 82179738h case    3:*/		return 0x8217973C;
		  /* 8217973Ch */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217973Ch case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217973Ch case    4:*/		return 0x82179740;
		  /* 82179740h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 82179740h case    5:*/		if ( regs.CR[0].eq ) { return 0x82179748;  }
		/* 82179740h case    5:*/		return 0x82179744;
	}
	return 0x82179744;
} // Block from 8217972Ch-82179744h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82179744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179744);
		  /* 82179744h */ case    0:  		/* addi R20, R20, 1 */
		/* 82179744h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 82179744h case    0:*/		return 0x82179748;
	}
	return 0x82179748;
} // Block from 82179744h-82179748h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179748);
		  /* 82179748h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 82179748h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 82179748h case    0:*/		return 0x8217974C;
		  /* 8217974Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217974Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217974Ch case    1:*/		return 0x82179750;
		  /* 82179750h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179750h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179750h case    2:*/		return 0x82179754;
		  /* 82179754h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82179754h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82179764;  }
		/* 82179754h case    3:*/		return 0x82179758;
		  /* 82179758h */ case    4:  		/* mr R30, R11 */
		/* 82179758h case    4:*/		regs.R30 = regs.R11;
		/* 82179758h case    4:*/		return 0x8217975C;
		  /* 8217975Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217975Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217975Ch case    5:*/		return 0x82179760;
		  /* 82179760h */ case    6:  		/* bc 4, CR6_EQ, -296 */
		/* 82179760h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82179638;  }
		/* 82179760h case    6:*/		return 0x82179764;
	}
	return 0x82179764;
} // Block from 82179748h-82179764h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82179764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179764);
		  /* 82179764h */ case    0:  		/* addi R11, R29, 32 */
		/* 82179764h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x20);
		/* 82179764h case    0:*/		return 0x82179768;
	}
	return 0x82179768;
} // Block from 82179764h-82179768h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179768h
// Function '?MarkPredicatedControlFlow@Compiler@D3DXShader@@AAAXPAVBlock@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179768( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179768) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179768);
		  /* 82179768h */ case    0:  		/* cmplw CR6, R28, R11 */
		/* 82179768h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 82179768h case    0:*/		return 0x8217976C;
		  /* 8217976Ch */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8217976Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8217978C;  }
		/* 8217976Ch case    1:*/		return 0x82179770;
		  /* 82179770h */ case    2:  		/* lwz R10, <#[R11 + 4]> */
		/* 82179770h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82179770h case    2:*/		return 0x82179774;
		  /* 82179774h */ case    3:  		/* mr R28, R11 */
		/* 82179774h case    3:*/		regs.R28 = regs.R11;
		/* 82179774h case    3:*/		return 0x82179778;
		  /* 82179778h */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 82179778h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 82179778h case    4:*/		return 0x8217977C;
		  /* 8217977Ch */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 8217977Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217978C;  }
		/* 8217977Ch case    5:*/		return 0x82179780;
		  /* 82179780h */ case    6:  		/* mr R30, R10 */
		/* 82179780h case    6:*/		regs.R30 = regs.R10;
		/* 82179780h case    6:*/		return 0x82179784;
		  /* 82179784h */ case    7:  		/* cmplwi CR0, R10, 0 */
		/* 82179784h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 82179784h case    7:*/		return 0x82179788;
		  /* 82179788h */ case    8:  		/* bc 4, CR0_EQ, -336 */
		/* 82179788h case    8:*/		if ( !regs.CR[0].eq ) { return 0x82179638;  }
		/* 82179788h case    8:*/		return 0x8217978C;
	}
	return 0x8217978C;
} // Block from 82179768h-8217978Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217978Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217978C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217978C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217978C);
		  /* 8217978Ch */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 8217978Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 8217978Ch case    0:*/		return 0x82179790;
		  /* 82179790h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82179790h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82179790h case    1:*/		return 0x82179794;
		  /* 82179794h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179794h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179794h case    2:*/		return 0x82179798;
		  /* 82179798h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 82179798h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821797A8;  }
		/* 82179798h case    3:*/		return 0x8217979C;
		  /* 8217979Ch */ case    4:  		/* mr R29, R11 */
		/* 8217979Ch case    4:*/		regs.R29 = regs.R11;
		/* 8217979Ch case    4:*/		return 0x821797A0;
		  /* 821797A0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821797A0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821797A0h case    5:*/		return 0x821797A4;
		  /* 821797A4h */ case    6:  		/* bc 4, CR6_EQ, -540 */
		/* 821797A4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82179588;  }
		/* 821797A4h case    6:*/		return 0x821797A8;
	}
	return 0x821797A8;
} // Block from 8217978Ch-821797A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821797A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821797A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821797A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821797A8);
		  /* 821797A8h */ case    0:  		/* mr R4, R25 */
		/* 821797A8h case    0:*/		regs.R4 = regs.R25;
		/* 821797A8h case    0:*/		return 0x821797AC;
		  /* 821797ACh */ case    1:  		/* mr R3, R21 */
		/* 821797ACh case    1:*/		regs.R3 = regs.R21;
		/* 821797ACh case    1:*/		return 0x821797B0;
		  /* 821797B0h */ case    2:  		/* bl -86056 */
		/* 821797B0h case    2:*/		regs.LR = 0x821797B4; return 0x82164788;
		/* 821797B0h case    2:*/		return 0x821797B4;
		  /* 821797B4h */ case    3:  		/* cmpwi CR6, R3, 1 */
		/* 821797B4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 821797B4h case    3:*/		return 0x821797B8;
		  /* 821797B8h */ case    4:  		/* bc 12, CR6_EQ, 276 */
		/* 821797B8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821798CC;  }
		/* 821797B8h case    4:*/		return 0x821797BC;
		  /* 821797BCh */ case    5:  		/* cmpwi CR6, R3, 3 */
		/* 821797BCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 821797BCh case    5:*/		return 0x821797C0;
		  /* 821797C0h */ case    6:  		/* bc 12, CR6_EQ, 252 */
		/* 821797C0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821798BC;  }
		/* 821797C0h case    6:*/		return 0x821797C4;
		  /* 821797C4h */ case    7:  		/* cmpwi CR6, R3, 4 */
		/* 821797C4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 821797C4h case    7:*/		return 0x821797C8;
		  /* 821797C8h */ case    8:  		/* bc 12, CR6_EQ, 232 */
		/* 821797C8h case    8:*/		if ( regs.CR[6].eq ) { return 0x821798B0;  }
		/* 821797C8h case    8:*/		return 0x821797CC;
		  /* 821797CCh */ case    9:  		/* cmpwi CR6, R3, 7 */
		/* 821797CCh case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000007);
		/* 821797CCh case    9:*/		return 0x821797D0;
		  /* 821797D0h */ case   10:  		/* bc 4, CR6_GT, 12 */
		/* 821797D0h case   10:*/		if ( !regs.CR[6].gt ) { return 0x821797DC;  }
		/* 821797D0h case   10:*/		return 0x821797D4;
		  /* 821797D4h */ case   11:  		/* cmpwi CR6, R3, 9 */
		/* 821797D4h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000009);
		/* 821797D4h case   11:*/		return 0x821797D8;
		  /* 821797D8h */ case   12:  		/* bc 4, CR6_GT, 244 */
		/* 821797D8h case   12:*/		if ( !regs.CR[6].gt ) { return 0x821798CC;  }
		/* 821797D8h case   12:*/		return 0x821797DC;
	}
	return 0x821797DC;
} // Block from 821797A8h-821797DCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821797DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821797DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821797DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821797DC);
		  /* 821797DCh */ case    0:  		/* lwz R11, <#[R24 + 8]> */
		/* 821797DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821797DCh case    0:*/		return 0x821797E0;
		  /* 821797E0h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821797E0h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821797E0h case    1:*/		return 0x821797E4;
		  /* 821797E4h */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 821797E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821797E4h case    2:*/		return 0x821797E8;
		  /* 821797E8h */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 821797E8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821797F8;  }
		/* 821797E8h case    3:*/		return 0x821797EC;
		  /* 821797ECh */ case    4:  		/* cmplwi CR6, R11, 31 */
		/* 821797ECh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000001F);
		/* 821797ECh case    4:*/		return 0x821797F0;
		  /* 821797F0h */ case    5:  		/* mr R11, R23 */
		/* 821797F0h case    5:*/		regs.R11 = regs.R23;
		/* 821797F0h case    5:*/		return 0x821797F4;
		  /* 821797F4h */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 821797F4h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821797FC;  }
		/* 821797F4h case    6:*/		return 0x821797F8;
	}
	return 0x821797F8;
} // Block from 821797DCh-821797F8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821797F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821797F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821797F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821797F8);
		  /* 821797F8h */ case    0:  		/* li R11, 0 */
		/* 821797F8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821797F8h case    0:*/		return 0x821797FC;
	}
	return 0x821797FC;
} // Block from 821797F8h-821797FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821797FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821797FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821797FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821797FC);
		  /* 821797FCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821797FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821797FCh case    0:*/		return 0x82179800;
		  /* 82179800h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 82179800h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217980C;  }
		/* 82179800h case    1:*/		return 0x82179804;
		  /* 82179804h */ case    2:  		/* lwz R11, <#[R24 + 48]> */
		/* 82179804h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000030) );
		/* 82179804h case    2:*/		return 0x82179808;
		  /* 82179808h */ case    3:  		/* b 8 */
		/* 82179808h case    3:*/		return 0x82179810;
		/* 82179808h case    3:*/		return 0x8217980C;
	}
	return 0x8217980C;
} // Block from 821797FCh-8217980Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217980Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217980C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217980C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217980C);
		  /* 8217980Ch */ case    0:  		/* lwz R11, <#[R24 + 44]> */
		/* 8217980Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 8217980Ch case    0:*/		return 0x82179810;
	}
	return 0x82179810;
} // Block from 8217980Ch-82179810h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179810h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179810( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179810) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179810);
		  /* 82179810h */ case    0:  		/* lwz R31, <#[R11 + 12]> */
		/* 82179810h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 82179810h case    0:*/		return 0x82179814;
		  /* 82179814h */ case    1:  		/* lwz R11, <#[R31 + 8]> */
		/* 82179814h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82179814h case    1:*/		return 0x82179818;
		  /* 82179818h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 82179818h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 82179818h case    2:*/		return 0x8217981C;
		  /* 8217981Ch */ case    3:  		/* cmplwi CR6, R11, 15872 */
		/* 8217981Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E00);
		/* 8217981Ch case    3:*/		return 0x82179820;
		  /* 82179820h */ case    4:  		/* bc 4, CR6_EQ, 64 */
		/* 82179820h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82179860;  }
		/* 82179820h case    4:*/		return 0x82179824;
		  /* 82179824h */ case    5:  		/* lwz R11, <#[R31 + 8]> */
		/* 82179824h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 82179824h case    5:*/		return 0x82179828;
		  /* 82179828h */ case    6:  		/* mr R3, R25 */
		/* 82179828h case    6:*/		regs.R3 = regs.R25;
		/* 82179828h case    6:*/		return 0x8217982C;
		  /* 8217982Ch */ case    7:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8217982Ch case    7:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8217982Ch case    7:*/		return 0x82179830;
		  /* 82179830h */ case    8:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82179830h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82179830h case    8:*/		return 0x82179834;
		  /* 82179834h */ case    9:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82179834h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82179834h case    9:*/		return 0x82179838;
		  /* 82179838h */ case   10:  		/* bl -87048 */
		/* 82179838h case   10:*/		regs.LR = 0x8217983C; return 0x82164430;
		/* 82179838h case   10:*/		return 0x8217983C;
		  /* 8217983Ch */ case   11:  		/* addi R10, R31, -8 */
		/* 8217983Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFF8);
		/* 8217983Ch case   11:*/		return 0x82179840;
		  /* 82179840h */ case   12:  		/* lwz R11, <#[R25 + 12]> */
		/* 82179840h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 82179840h case   12:*/		return 0x82179844;
		  /* 82179844h */ case   13:  		/* lwzx R10, <#[R3 + R10]> */
		/* 82179844h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 82179844h case   13:*/		return 0x82179848;
		  /* 82179848h */ case   14:  		/* rlwinm R10, R10, 0, 17, 31 */
		/* 82179848h case   14:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R10,regs.R10);
		/* 82179848h case   14:*/		return 0x8217984C;
		  /* 8217984Ch */ case   15:  		/* mulli R10, R10, 40 */
		/* 8217984Ch case   15:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x28);
		/* 8217984Ch case   15:*/		return 0x82179850;
		  /* 82179850h */ case   16:  		/* add R11, R10, R11 */
		/* 82179850h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82179850h case   16:*/		return 0x82179854;
		  /* 82179854h */ case   17:  		/* lwz R11, <#[R11 + 4]> */
		/* 82179854h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82179854h case   17:*/		return 0x82179858;
	}
	return 0x82179858;
} // Block from 82179810h-82179858h (18 instructions)

//////////////////////////////////////////////////////
// Block at 82179858h
// Function '?FindControllingPredicateStackOp@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179858);
		  /* 82179858h */ case    0:  		/* rlwinm. R11, R11, 0, 25, 27 */
		/* 82179858h case    0:*/		cpu::op::rlwinm<1,0,25,27>(regs,&regs.R11,regs.R11);
		/* 82179858h case    0:*/		return 0x8217985C;
		  /* 8217985Ch */ case    1:  		/* bc 12, CR0_EQ, 84 */
		/* 8217985Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821798B0;  }
		/* 8217985Ch case    1:*/		return 0x82179860;
	}
	return 0x82179860;
} // Block from 82179858h-82179860h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179860);
		  /* 82179860h */ case    0:  		/* lwz R11, <#[R21 + 28]> */
		/* 82179860h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x0000001C) );
		/* 82179860h case    0:*/		return 0x82179864;
		  /* 82179864h */ case    1:  		/* lwz R11, <#[R11 + 48]> */
		/* 82179864h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 82179864h case    1:*/		return 0x82179868;
		  /* 82179868h */ case    2:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 82179868h case    2:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 82179868h case    2:*/		return 0x8217986C;
		  /* 8217986Ch */ case    3:  		/* bc 4, CR0_EQ, 24 */
		/* 8217986Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x82179884;  }
		/* 8217986Ch case    3:*/		return 0x82179870;
		  /* 82179870h */ case    4:  		/* lwz R11, <#[R25 + 40]> */
		/* 82179870h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000028) );
		/* 82179870h case    4:*/		return 0x82179874;
		  /* 82179874h */ case    5:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82179874h case    5:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82179874h case    5:*/		return 0x82179878;
		  /* 82179878h */ case    6:  		/* bc 12, CR0_EQ, 84 */
		/* 82179878h case    6:*/		if ( regs.CR[0].eq ) { return 0x821798CC;  }
		/* 82179878h case    6:*/		return 0x8217987C;
		  /* 8217987Ch */ case    7:  		/* cmplwi CR6, R22, 12 */
		/* 8217987Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x0000000C);
		/* 8217987Ch case    7:*/		return 0x82179880;
		  /* 82179880h */ case    8:  		/* bc 12, CR6_GT, 76 */
		/* 82179880h case    8:*/		if ( regs.CR[6].gt ) { return 0x821798CC;  }
		/* 82179880h case    8:*/		return 0x82179884;
	}
	return 0x82179884;
} // Block from 82179860h-82179884h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82179884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179884);
		  /* 82179884h */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 82179884h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 82179884h case    0:*/		return 0x82179888;
		  /* 82179888h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 82179888h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821798A8;  }
		/* 82179888h case    1:*/		return 0x8217988C;
		  /* 8217988Ch */ case    2:  		/* lwz R11, <#[R25 + 40]> */
		/* 8217988Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000028) );
		/* 8217988Ch case    2:*/		return 0x82179890;
		  /* 82179890h */ case    3:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 82179890h case    3:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 82179890h case    3:*/		return 0x82179894;
		  /* 82179894h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82179894h case    4:*/		if ( regs.CR[0].eq ) { return 0x821798A0;  }
		/* 82179894h case    4:*/		return 0x82179898;
		  /* 82179898h */ case    5:  		/* cmplwi CR6, R22, 1 */
		/* 82179898h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000001);
		/* 82179898h case    5:*/		return 0x8217989C;
		  /* 8217989Ch */ case    6:  		/* bc 12, CR6_GT, 12 */
		/* 8217989Ch case    6:*/		if ( regs.CR[6].gt ) { return 0x821798A8;  }
		/* 8217989Ch case    6:*/		return 0x821798A0;
	}
	return 0x821798A0;
} // Block from 82179884h-821798A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821798A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821798A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821798A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821798A0);
		  /* 821798A0h */ case    0:  		/* li R11, 0 */
		/* 821798A0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821798A0h case    0:*/		return 0x821798A4;
		  /* 821798A4h */ case    1:  		/* b 28 */
		/* 821798A4h case    1:*/		return 0x821798C0;
		/* 821798A4h case    1:*/		return 0x821798A8;
	}
	return 0x821798A8;
} // Block from 821798A0h-821798A8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821798A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821798A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821798A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821798A8);
		  /* 821798A8h */ case    0:  		/* mr R11, R23 */
		/* 821798A8h case    0:*/		regs.R11 = regs.R23;
		/* 821798A8h case    0:*/		return 0x821798AC;
		  /* 821798ACh */ case    1:  		/* b 20 */
		/* 821798ACh case    1:*/		return 0x821798C0;
		/* 821798ACh case    1:*/		return 0x821798B0;
	}
	return 0x821798B0;
} // Block from 821798A8h-821798B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821798B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821798B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821798B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821798B0);
		  /* 821798B0h */ case    0:  		/* li R3, 1 */
		/* 821798B0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821798B0h case    0:*/		return 0x821798B4;
		  /* 821798B4h */ case    1:  		/* stb R23, <#[R19]> */
		/* 821798B4h case    1:*/		cpu::mem::store8( regs, regs.R23, (uint32)(regs.R19 + 0x00000000) );
		/* 821798B4h case    1:*/		return 0x821798B8;
		  /* 821798B8h */ case    2:  		/* b 24 */
		/* 821798B8h case    2:*/		return 0x821798D0;
		/* 821798B8h case    2:*/		return 0x821798BC;
	}
	return 0x821798BC;
} // Block from 821798B0h-821798BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821798BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821798BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821798BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821798BC);
		  /* 821798BCh */ case    0:  		/* li R11, 0 */
		/* 821798BCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821798BCh case    0:*/		return 0x821798C0;
	}
	return 0x821798C0;
} // Block from 821798BCh-821798C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821798C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821798C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821798C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821798C0);
		  /* 821798C0h */ case    0:  		/* li R3, 1 */
		/* 821798C0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821798C0h case    0:*/		return 0x821798C4;
		  /* 821798C4h */ case    1:  		/* stb R11, <#[R19]> */
		/* 821798C4h case    1:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821798C4h case    1:*/		return 0x821798C8;
		  /* 821798C8h */ case    2:  		/* b 8 */
		/* 821798C8h case    2:*/		return 0x821798D0;
		/* 821798C8h case    2:*/		return 0x821798CC;
	}
	return 0x821798CC;
} // Block from 821798C0h-821798CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821798CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821798CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821798CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821798CC);
		  /* 821798CCh */ case    0:  		/* li R3, 0 */
		/* 821798CCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821798CCh case    0:*/		return 0x821798D0;
	}
	return 0x821798D0;
} // Block from 821798CCh-821798D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821798D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821798D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821798D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821798D0);
		  /* 821798D0h */ case    0:  		/* addi R1, R1, 192 */
		/* 821798D0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821798D0h case    0:*/		return 0x821798D4;
		  /* 821798D4h */ case    1:  		/* b -951888 */
		/* 821798D4h case    1:*/		return 0x82091284;
		/* 821798D4h case    1:*/		return 0x821798D8;
	}
	return 0x821798D8;
} // Block from 821798D0h-821798D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821798D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821798D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821798D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821798D8);
		  /* 821798D8h */ case    0:  		/* mfspr R12, LR */
		/* 821798D8h case    0:*/		regs.R12 = regs.LR;
		/* 821798D8h case    0:*/		return 0x821798DC;
		  /* 821798DCh */ case    1:  		/* bl -951972 */
		/* 821798DCh case    1:*/		regs.LR = 0x821798E0; return 0x82091238;
		/* 821798DCh case    1:*/		return 0x821798E0;
		  /* 821798E0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821798E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821798E0h case    2:*/		return 0x821798E4;
		  /* 821798E4h */ case    3:  		/* lwz R31, <#[R3 + 4]> */
		/* 821798E4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 821798E4h case    3:*/		return 0x821798E8;
		  /* 821798E8h */ case    4:  		/* mr R27, R3 */
		/* 821798E8h case    4:*/		regs.R27 = regs.R3;
		/* 821798E8h case    4:*/		return 0x821798EC;
		  /* 821798ECh */ case    5:  		/* mr R28, R4 */
		/* 821798ECh case    5:*/		regs.R28 = regs.R4;
		/* 821798ECh case    5:*/		return 0x821798F0;
		  /* 821798F0h */ case    6:  		/* mr R23, R5 */
		/* 821798F0h case    6:*/		regs.R23 = regs.R5;
		/* 821798F0h case    6:*/		return 0x821798F4;
		  /* 821798F4h */ case    7:  		/* mr R22, R6 */
		/* 821798F4h case    7:*/		regs.R22 = regs.R6;
		/* 821798F4h case    7:*/		return 0x821798F8;
		  /* 821798F8h */ case    8:  		/* mr R26, R7 */
		/* 821798F8h case    8:*/		regs.R26 = regs.R7;
		/* 821798F8h case    8:*/		return 0x821798FC;
		  /* 821798FCh */ case    9:  		/* mr R21, R8 */
		/* 821798FCh case    9:*/		regs.R21 = regs.R8;
		/* 821798FCh case    9:*/		return 0x82179900;
		  /* 82179900h */ case   10:  		/* mr R29, R4 */
		/* 82179900h case   10:*/		regs.R29 = regs.R4;
		/* 82179900h case   10:*/		return 0x82179904;
		  /* 82179904h */ case   11:  		/* li R24, 0 */
		/* 82179904h case   11:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82179904h case   11:*/		return 0x82179908;
		  /* 82179908h */ case   12:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82179908h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82179908h case   12:*/		return 0x8217990C;
		  /* 8217990Ch */ case   13:  		/* bc 4, CR0_EQ, 676 */
		/* 8217990Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x82179BB0;  }
		/* 8217990Ch case   13:*/		return 0x82179910;
		  /* 82179910h */ case   14:  		/* cmplwi CR0, R31, 0 */
		/* 82179910h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 82179910h case   14:*/		return 0x82179914;
		  /* 82179914h */ case   15:  		/* bc 12, CR0_EQ, 668 */
		/* 82179914h case   15:*/		if ( regs.CR[0].eq ) { return 0x82179BB0;  }
		/* 82179914h case   15:*/		return 0x82179918;
		  /* 82179918h */ case   16:  		/* li R25, 1 */
		/* 82179918h case   16:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 82179918h case   16:*/		return 0x8217991C;
		  /* 8217991Ch */ case   17:  		/* lwz R10, <#[R23 + 48]> */
		/* 8217991Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 8217991Ch case   17:*/		return 0x82179920;
		  /* 82179920h */ case   18:  		/* lwz R11, <#[R31 + 40]> */
		/* 82179920h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 82179920h case   18:*/		return 0x82179924;
		  /* 82179924h */ case   19:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 82179924h case   19:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 82179924h case   19:*/		return 0x82179928;
		  /* 82179928h */ case   20:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 82179928h case   20:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 82179928h case   20:*/		return 0x8217992C;
		  /* 8217992Ch */ case   21:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217992Ch case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217992Ch case   21:*/		return 0x82179930;
		  /* 82179930h */ case   22:  		/* addi R10, R10, 1 */
		/* 82179930h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82179930h case   22:*/		return 0x82179934;
		  /* 82179934h */ case   23:  		/* slw R9, R25, R9 */
		/* 82179934h case   23:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R25,regs.R9);
		/* 82179934h case   23:*/		return 0x82179938;
		  /* 82179938h */ case   24:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82179938h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82179938h case   24:*/		return 0x8217993C;
		  /* 8217993Ch */ case   25:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8217993Ch case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8217993Ch case   25:*/		return 0x82179940;
		  /* 82179940h */ case   26:  		/* and. R10, R9, R10 */
		/* 82179940h case   26:*/		cpu::op::and<1>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82179940h case   26:*/		return 0x82179944;
		  /* 82179944h */ case   27:  		/* bc 12, CR0_EQ, 496 */
		/* 82179944h case   27:*/		if ( regs.CR[0].eq ) { return 0x82179B34;  }
		/* 82179944h case   27:*/		return 0x82179948;
		  /* 82179948h */ case   28:  		/* cmplwi CR6, R22, 0 */
		/* 82179948h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 82179948h case   28:*/		return 0x8217994C;
		  /* 8217994Ch */ case   29:  		/* bc 12, CR6_EQ, 44 */
		/* 8217994Ch case   29:*/		if ( regs.CR[6].eq ) { return 0x82179978;  }
		/* 8217994Ch case   29:*/		return 0x82179950;
		  /* 82179950h */ case   30:  		/* lwz R10, <#[R22 + 48]> */
		/* 82179950h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000030) );
		/* 82179950h case   30:*/		return 0x82179954;
		  /* 82179954h */ case   31:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 82179954h case   31:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 82179954h case   31:*/		return 0x82179958;
		  /* 82179958h */ case   32:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 82179958h case   32:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 82179958h case   32:*/		return 0x8217995C;
		  /* 8217995Ch */ case   33:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217995Ch case   33:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217995Ch case   33:*/		return 0x82179960;
		  /* 82179960h */ case   34:  		/* addi R10, R10, 1 */
		/* 82179960h case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82179960h case   34:*/		return 0x82179964;
		  /* 82179964h */ case   35:  		/* slw R9, R25, R9 */
		/* 82179964h case   35:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R25,regs.R9);
		/* 82179964h case   35:*/		return 0x82179968;
		  /* 82179968h */ case   36:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 82179968h case   36:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 82179968h case   36:*/		return 0x8217996C;
		  /* 8217996Ch */ case   37:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8217996Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8217996Ch case   37:*/		return 0x82179970;
	}
	return 0x82179970;
} // Block from 821798D8h-82179970h (38 instructions)

//////////////////////////////////////////////////////
// Block at 82179970h
// Function '?ConvertPredicateToPush@Compiler@D3DXShader@@AAAPAVInstruction@2@PAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179970);
		  /* 82179970h */ case    0:  		/* and. R11, R9, R11 */
		/* 82179970h case    0:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 82179970h case    0:*/		return 0x82179974;
		  /* 82179974h */ case    1:  		/* bc 4, CR0_EQ, 448 */
		/* 82179974h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82179B34;  }
		/* 82179974h case    1:*/		return 0x82179978;
	}
	return 0x82179978;
} // Block from 82179970h-82179978h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179978);
		  /* 82179978h */ case    0:  		/* lwz R10, <#[R31 + 48]> */
		/* 82179978h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82179978h case    0:*/		return 0x8217997C;
		  /* 8217997Ch */ case    1:  		/* rlwinm R9, R21, 0, 24, 31 */
		/* 8217997Ch case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R21);
		/* 8217997Ch case    1:*/		return 0x82179980;
		  /* 82179980h */ case    2:  		/* rlwinm R11, R10, 8, 31, 31 */
		/* 82179980h case    2:*/		cpu::op::rlwinm<0,8,31,31>(regs,&regs.R11,regs.R10);
		/* 82179980h case    2:*/		return 0x82179984;
		  /* 82179984h */ case    3:  		/* cmplw CR6, R11, R9 */
		/* 82179984h case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 82179984h case    3:*/		return 0x82179988;
		  /* 82179988h */ case    4:  		/* bc 4, CR6_EQ, 112 */
		/* 82179988h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821799F8;  }
		/* 82179988h case    4:*/		return 0x8217998C;
		  /* 8217998Ch */ case    5:  		/* lwz R11, <#[R31 + 76]> */
		/* 8217998Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217998Ch case    5:*/		return 0x82179990;
		  /* 82179990h */ case    6:  		/* rlwinm. R8, R11, 10, 31, 31 */
		/* 82179990h case    6:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R8,regs.R11);
		/* 82179990h case    6:*/		return 0x82179994;
		  /* 82179994h */ case    7:  		/* bc 12, CR0_EQ, 100 */
		/* 82179994h case    7:*/		if ( regs.CR[0].eq ) { return 0x821799F8;  }
		/* 82179994h case    7:*/		return 0x82179998;
		  /* 82179998h */ case    8:  		/* rlwinm R11, R11, 9, 31, 31 */
		/* 82179998h case    8:*/		cpu::op::rlwinm<0,9,31,31>(regs,&regs.R11,regs.R11);
		/* 82179998h case    8:*/		return 0x8217999C;
		  /* 8217999Ch */ case    9:  		/* rlwinm R8, R26, 0, 24, 31 */
		/* 8217999Ch case    9:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R8,regs.R26);
		/* 8217999Ch case    9:*/		return 0x821799A0;
		  /* 821799A0h */ case   10:  		/* cmplw CR6, R11, R8 */
		/* 821799A0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821799A0h case   10:*/		return 0x821799A4;
		  /* 821799A4h */ case   11:  		/* bc 4, CR6_EQ, 84 */
		/* 821799A4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821799F8;  }
		/* 821799A4h case   11:*/		return 0x821799A8;
		  /* 821799A8h */ case   12:  		/* lwz R11, <#[R31 + 112]> */
		/* 821799A8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 821799A8h case   12:*/		return 0x821799AC;
		  /* 821799ACh */ case   13:  		/* lwz R8, <#[R11 + 48]> */
		/* 821799ACh case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000030) );
		/* 821799ACh case   13:*/		return 0x821799B0;
		  /* 821799B0h */ case   14:  		/* rlwinm. R8, R8, 10, 31, 31 */
		/* 821799B0h case   14:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R8,regs.R8);
		/* 821799B0h case   14:*/		return 0x821799B4;
		  /* 821799B4h */ case   15:  		/* bc 12, CR0_EQ, 48 */
		/* 821799B4h case   15:*/		if ( regs.CR[0].eq ) { return 0x821799E4;  }
		/* 821799B4h case   15:*/		return 0x821799B8;
		  /* 821799B8h */ case   16:  		/* b 16 */
		/* 821799B8h case   16:*/		return 0x821799C8;
		/* 821799B8h case   16:*/		return 0x821799BC;
		  /* 821799BCh */ case   17:  		/* lwz R8, <#[R11 + 48]> */
		/* 821799BCh case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000030) );
		/* 821799BCh case   17:*/		return 0x821799C0;
		  /* 821799C0h */ case   18:  		/* rlwinm. R8, R8, 0, 9, 9 */
		/* 821799C0h case   18:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R8,regs.R8);
		/* 821799C0h case   18:*/		return 0x821799C4;
		  /* 821799C4h */ case   19:  		/* bc 12, CR0_EQ, 16 */
		/* 821799C4h case   19:*/		if ( regs.CR[0].eq ) { return 0x821799D4;  }
		/* 821799C4h case   19:*/		return 0x821799C8;
	}
	return 0x821799C8;
} // Block from 82179978h-821799C8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821799C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821799C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821799C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821799C8);
		  /* 821799C8h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 821799C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 821799C8h case    0:*/		return 0x821799CC;
		  /* 821799CCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821799CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821799CCh case    1:*/		return 0x821799D0;
		  /* 821799D0h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821799D0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821799BC;  }
		/* 821799D0h case    2:*/		return 0x821799D4;
	}
	return 0x821799D4;
} // Block from 821799C8h-821799D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821799D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821799D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821799D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821799D4);
		  /* 821799D4h */ case    0:  		/* lwz R8, <#[R11 + 48]> */
		/* 821799D4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000030) );
		/* 821799D4h case    0:*/		return 0x821799D8;
		  /* 821799D8h */ case    1:  		/* rlwinm. R8, R8, 10, 31, 31 */
		/* 821799D8h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R8,regs.R8);
		/* 821799D8h case    1:*/		return 0x821799DC;
		  /* 821799DCh */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 821799DCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821799C8;  }
		/* 821799DCh case    2:*/		return 0x821799E0;
		  /* 821799E0h */ case    3:  		/* stw R11, <#[R31 + 112]> */
		/* 821799E0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 821799E0h case    3:*/		return 0x821799E4;
	}
	return 0x821799E4;
} // Block from 821799D4h-821799E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821799E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821799E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821799E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821799E4);
		  /* 821799E4h */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 821799E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 821799E4h case    0:*/		return 0x821799E8;
		  /* 821799E8h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 821799E8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821799E8h case    1:*/		return 0x821799EC;
		  /* 821799ECh */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 821799ECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821799F8;  }
		/* 821799ECh case    2:*/		return 0x821799F0;
		  /* 821799F0h */ case    3:  		/* mr R29, R31 */
		/* 821799F0h case    3:*/		regs.R29 = regs.R31;
		/* 821799F0h case    3:*/		return 0x821799F4;
		  /* 821799F4h */ case    4:  		/* b 320 */
		/* 821799F4h case    4:*/		return 0x82179B34;
		/* 821799F4h case    4:*/		return 0x821799F8;
	}
	return 0x821799F8;
} // Block from 821799E4h-821799F8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821799F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821799F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821799F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821799F8);
		  /* 821799F8h */ case    0:  		/* lwz R8, <#[R31 + 76]> */
		/* 821799F8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000004C) );
		/* 821799F8h case    0:*/		return 0x821799FC;
		  /* 821799FCh */ case    1:  		/* rlwinm R11, R26, 0, 24, 31 */
		/* 821799FCh case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821799FCh case    1:*/		return 0x82179A00;
		  /* 82179A00h */ case    2:  		/* rlwimi R10, R9, 24, 7, 7 */
		/* 82179A00h case    2:*/		cpu::op::rlwimi<0,24,7,7>(regs,&regs.R10,regs.R9);
		/* 82179A00h case    2:*/		return 0x82179A04;
		  /* 82179A04h */ case    3:  		/* stw R28, <#[R31 + 112]> */
		/* 82179A04h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000070) );
		/* 82179A04h case    3:*/		return 0x82179A08;
		  /* 82179A08h */ case    4:  		/* rlwimi R8, R11, 23, 8, 8 */
		/* 82179A08h case    4:*/		cpu::op::rlwimi<0,23,8,8>(regs,&regs.R8,regs.R11);
		/* 82179A08h case    4:*/		return 0x82179A0C;
		  /* 82179A0Ch */ case    5:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82179A0Ch case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82179A0Ch case    5:*/		return 0x82179A10;
		  /* 82179A10h */ case    6:  		/* oris R9, R8, 64 */
		/* 82179A10h case    6:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R8,0x40);
		/* 82179A10h case    6:*/		return 0x82179A14;
		  /* 82179A14h */ case    7:  		/* oris R10, R10, 128 */
		/* 82179A14h case    7:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x80);
		/* 82179A14h case    7:*/		return 0x82179A18;
		  /* 82179A18h */ case    8:  		/* stw R9, <#[R31 + 76]> */
		/* 82179A18h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 82179A18h case    8:*/		return 0x82179A1C;
		  /* 82179A1Ch */ case    9:  		/* addi R9, R11, 4 */
		/* 82179A1Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 82179A1Ch case    9:*/		return 0x82179A20;
		  /* 82179A20h */ case   10:  		/* stw R10, <#[R31 + 48]> */
		/* 82179A20h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 82179A20h case   10:*/		return 0x82179A24;
		  /* 82179A24h */ case   11:  		/* rlwinm R10, R29, 0, 0, 30 */
		/* 82179A24h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R29);
		/* 82179A24h case   11:*/		return 0x82179A28;
		  /* 82179A28h */ case   12:  		/* lwz R8, <#[R11 + 4]> */
		/* 82179A28h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82179A28h case   12:*/		return 0x82179A2C;
		  /* 82179A2Ch */ case   13:  		/* rlwinm R7, R8, 0, 0, 30 */
		/* 82179A2Ch case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R8);
		/* 82179A2Ch case   13:*/		return 0x82179A30;
		  /* 82179A30h */ case   14:  		/* lwz R6, <#[R11]> */
		/* 82179A30h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 82179A30h case   14:*/		return 0x82179A34;
		  /* 82179A34h */ case   15:  		/* addi R8, R10, 4 */
		/* 82179A34h case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 82179A34h case   15:*/		return 0x82179A38;
		  /* 82179A38h */ case   16:  		/* stw R6, <#[R7]> */
		/* 82179A38h case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 82179A38h case   16:*/		return 0x82179A3C;
		  /* 82179A3Ch */ case   17:  		/* mr R29, R31 */
		/* 82179A3Ch case   17:*/		regs.R29 = regs.R31;
		/* 82179A3Ch case   17:*/		return 0x82179A40;
		  /* 82179A40h */ case   18:  		/* lwz R7, <#[R11]> */
		/* 82179A40h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82179A40h case   18:*/		return 0x82179A44;
		  /* 82179A44h */ case   19:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 82179A44h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 82179A44h case   19:*/		return 0x82179A48;
		  /* 82179A48h */ case   20:  		/* lwz R6, <#[R11 + 4]> */
		/* 82179A48h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 82179A48h case   20:*/		return 0x82179A4C;
		  /* 82179A4Ch */ case   21:  		/* stw R6, <#[R7]> */
		/* 82179A4Ch case   21:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 82179A4Ch case   21:*/		return 0x82179A50;
		  /* 82179A50h */ case   22:  		/* lwz R7, <#[R10 + 4]> */
		/* 82179A50h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 82179A50h case   22:*/		return 0x82179A54;
		  /* 82179A54h */ case   23:  		/* stw R7, <#[R11 + 4]> */
		/* 82179A54h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 82179A54h case   23:*/		return 0x82179A58;
		  /* 82179A58h */ case   24:  		/* lwz R7, <#[R10 + 4]> */
		/* 82179A58h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 82179A58h case   24:*/		return 0x82179A5C;
		  /* 82179A5Ch */ case   25:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 82179A5Ch case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 82179A5Ch case   25:*/		return 0x82179A60;
		  /* 82179A60h */ case   26:  		/* stw R9, <#[R7]> */
		/* 82179A60h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 82179A60h case   26:*/		return 0x82179A64;
		  /* 82179A64h */ case   27:  		/* stw R8, <#[R11]> */
		/* 82179A64h case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82179A64h case   27:*/		return 0x82179A68;
		  /* 82179A68h */ case   28:  		/* stw R11, <#[R10 + 4]> */
		/* 82179A68h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82179A68h case   28:*/		return 0x82179A6C;
		  /* 82179A6Ch */ case   29:  		/* lwz R11, <#[R31 + 36]> */
		/* 82179A6Ch case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 82179A6Ch case   29:*/		return 0x82179A70;
		  /* 82179A70h */ case   30:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82179A70h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82179A70h case   30:*/		return 0x82179A74;
		  /* 82179A74h */ case   31:  		/* bc 4, CR0_EQ, 180 */
		/* 82179A74h case   31:*/		if ( !regs.CR[0].eq ) { return 0x82179B28;  }
		/* 82179A74h case   31:*/		return 0x82179A78;
		  /* 82179A78h */ case   32:  		/* lwz R11, <#[R31 + 32]> */
		/* 82179A78h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 82179A78h case   32:*/		return 0x82179A7C;
		  /* 82179A7Ch */ case   33:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82179A7Ch case   33:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82179A7Ch case   33:*/		return 0x82179A80;
		  /* 82179A80h */ case   34:  		/* addic. R30, R11, -40 */
		/* 82179A80h case   34:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 82179A80h case   34:*/		return 0x82179A84;
		  /* 82179A84h */ case   35:  		/* bc 12, CR0_EQ, 164 */
		/* 82179A84h case   35:*/		if ( regs.CR[0].eq ) { return 0x82179B28;  }
		/* 82179A84h case   35:*/		return 0x82179A88;
		  /* 82179A88h */ case   36:  		/* lwz R11, <#[R30 + 8]> */
		/* 82179A88h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82179A88h case   36:*/		return 0x82179A8C;
		  /* 82179A8Ch */ case   37:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 82179A8Ch case   37:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 82179A8Ch case   37:*/		return 0x82179A90;
		  /* 82179A90h */ case   38:  		/* cmplwi CR6, R11, 86 */
		/* 82179A90h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 82179A90h case   38:*/		return 0x82179A94;
		  /* 82179A94h */ case   39:  		/* bc 12, CR6_EQ, 48 */
		/* 82179A94h case   39:*/		if ( regs.CR[6].eq ) { return 0x82179AC4;  }
		/* 82179A94h case   39:*/		return 0x82179A98;
		  /* 82179A98h */ case   40:  		/* cmplwi CR6, R11, 87 */
		/* 82179A98h case   40:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 82179A98h case   40:*/		return 0x82179A9C;
		  /* 82179A9Ch */ case   41:  		/* bc 12, CR6_EQ, 40 */
		/* 82179A9Ch case   41:*/		if ( regs.CR[6].eq ) { return 0x82179AC4;  }
		/* 82179A9Ch case   41:*/		return 0x82179AA0;
		  /* 82179AA0h */ case   42:  		/* cmplwi CR6, R11, 89 */
		/* 82179AA0h case   42:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 82179AA0h case   42:*/		return 0x82179AA4;
		  /* 82179AA4h */ case   43:  		/* bc 12, CR6_EQ, 32 */
		/* 82179AA4h case   43:*/		if ( regs.CR[6].eq ) { return 0x82179AC4;  }
		/* 82179AA4h case   43:*/		return 0x82179AA8;
		  /* 82179AA8h */ case   44:  		/* cmplwi CR6, R11, 90 */
		/* 82179AA8h case   44:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 82179AA8h case   44:*/		return 0x82179AAC;
		  /* 82179AACh */ case   45:  		/* bc 12, CR6_EQ, 24 */
		/* 82179AACh case   45:*/		if ( regs.CR[6].eq ) { return 0x82179AC4;  }
		/* 82179AACh case   45:*/		return 0x82179AB0;
		  /* 82179AB0h */ case   46:  		/* cmplwi CR6, R11, 84 */
		/* 82179AB0h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 82179AB0h case   46:*/		return 0x82179AB4;
		  /* 82179AB4h */ case   47:  		/* bc 12, CR6_EQ, 16 */
		/* 82179AB4h case   47:*/		if ( regs.CR[6].eq ) { return 0x82179AC4;  }
		/* 82179AB4h case   47:*/		return 0x82179AB8;
		  /* 82179AB8h */ case   48:  		/* cmplwi CR6, R11, 85 */
		/* 82179AB8h case   48:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 82179AB8h case   48:*/		return 0x82179ABC;
		  /* 82179ABCh */ case   49:  		/* li R11, 0 */
		/* 82179ABCh case   49:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 82179ABCh case   49:*/		return 0x82179AC0;
		  /* 82179AC0h */ case   50:  		/* bc 4, CR6_EQ, 8 */
		/* 82179AC0h case   50:*/		if ( !regs.CR[6].eq ) { return 0x82179AC8;  }
		/* 82179AC0h case   50:*/		return 0x82179AC4;
	}
	return 0x82179AC4;
} // Block from 821799F8h-82179AC4h (51 instructions)

//////////////////////////////////////////////////////
// Block at 82179AC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179AC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179AC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179AC4);
		  /* 82179AC4h */ case    0:  		/* mr R11, R25 */
		/* 82179AC4h case    0:*/		regs.R11 = regs.R25;
		/* 82179AC4h case    0:*/		return 0x82179AC8;
	}
	return 0x82179AC8;
} // Block from 82179AC4h-82179AC8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179AC8);
		  /* 82179AC8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82179AC8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82179AC8h case    0:*/		return 0x82179ACC;
		  /* 82179ACCh */ case    1:  		/* bc 12, CR0_EQ, 92 */
		/* 82179ACCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82179B28;  }
		/* 82179ACCh case    1:*/		return 0x82179AD0;
		  /* 82179AD0h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 82179AD0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82179AD0h case    2:*/		return 0x82179AD4;
		  /* 82179AD4h */ case    3:  		/* mr R3, R27 */
		/* 82179AD4h case    3:*/		regs.R3 = regs.R27;
		/* 82179AD4h case    3:*/		return 0x82179AD8;
		  /* 82179AD8h */ case    4:  		/* lwz R10, <#[R23 + 48]> */
		/* 82179AD8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000030) );
		/* 82179AD8h case    4:*/		return 0x82179ADC;
		  /* 82179ADCh */ case    5:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 82179ADCh case    5:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 82179ADCh case    5:*/		return 0x82179AE0;
		  /* 82179AE0h */ case    6:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 82179AE0h case    6:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 82179AE0h case    6:*/		return 0x82179AE4;
		  /* 82179AE4h */ case    7:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 82179AE4h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 82179AE4h case    7:*/		return 0x82179AE8;
		  /* 82179AE8h */ case    8:  		/* rlwinm R20, R10, 0, 13, 31 */
		/* 82179AE8h case    8:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R20,regs.R10);
		/* 82179AE8h case    8:*/		return 0x82179AEC;
		  /* 82179AECh */ case    9:  		/* bl -87740 */
		/* 82179AECh case    9:*/		regs.LR = 0x82179AF0; return 0x82164430;
		/* 82179AECh case    9:*/		return 0x82179AF0;
		  /* 82179AF0h */ case   10:  		/* addi R10, R30, -16 */
		/* 82179AF0h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R30,0xFFFFFFF0);
		/* 82179AF0h case   10:*/		return 0x82179AF4;
		  /* 82179AF4h */ case   11:  		/* rlwinm R11, R20, 27, 5, 31 */
		/* 82179AF4h case   11:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R20);
		/* 82179AF4h case   11:*/		return 0x82179AF8;
		  /* 82179AF8h */ case   12:  		/* rlwinm R9, R20, 0, 27, 31 */
		/* 82179AF8h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R20);
		/* 82179AF8h case   12:*/		return 0x82179AFC;
		  /* 82179AFCh */ case   13:  		/* addi R11, R11, 1 */
		/* 82179AFCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82179AFCh case   13:*/		return 0x82179B00;
		  /* 82179B00h */ case   14:  		/* slw R9, R25, R9 */
		/* 82179B00h case   14:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R25,regs.R9);
		/* 82179B00h case   14:*/		return 0x82179B04;
		  /* 82179B04h */ case   15:  		/* lwzx R10, <#[R3 + R10]> */
		/* 82179B04h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 82179B04h case   15:*/		return 0x82179B08;
		  /* 82179B08h */ case   16:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82179B08h case   16:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82179B08h case   16:*/		return 0x82179B0C;
		  /* 82179B0Ch */ case   17:  		/* lwz R10, <#[R10 + 40]> */
		/* 82179B0Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 82179B0Ch case   17:*/		return 0x82179B10;
		  /* 82179B10h */ case   18:  		/* lwzx R11, <#[R10 + R11]> */
		/* 82179B10h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 82179B10h case   18:*/		return 0x82179B14;
		  /* 82179B14h */ case   19:  		/* and. R11, R11, R9 */
		/* 82179B14h case   19:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82179B14h case   19:*/		return 0x82179B18;
		  /* 82179B18h */ case   20:  		/* bc 4, CR0_EQ, 28 */
		/* 82179B18h case   20:*/		if ( !regs.CR[0].eq ) { return 0x82179B34;  }
		/* 82179B18h case   20:*/		return 0x82179B1C;
		  /* 82179B1Ch */ case   21:  		/* lwz R11, <#[R31 + 48]> */
		/* 82179B1Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82179B1Ch case   21:*/		return 0x82179B20;
		  /* 82179B20h */ case   22:  		/* oris R11, R11, 1024 */
		/* 82179B20h case   22:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 82179B20h case   22:*/		return 0x82179B24;
		  /* 82179B24h */ case   23:  		/* b 12 */
		/* 82179B24h case   23:*/		return 0x82179B30;
		/* 82179B24h case   23:*/		return 0x82179B28;
	}
	return 0x82179B28;
} // Block from 82179AC8h-82179B28h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82179B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179B28);
		  /* 82179B28h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 82179B28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82179B28h case    0:*/		return 0x82179B2C;
		  /* 82179B2Ch */ case    1:  		/* oris R11, R11, 2048 */
		/* 82179B2Ch case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 82179B2Ch case    1:*/		return 0x82179B30;
	}
	return 0x82179B30;
} // Block from 82179B28h-82179B30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179B30);
		  /* 82179B30h */ case    0:  		/* stw R11, <#[R31 + 48]> */
		/* 82179B30h case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82179B30h case    0:*/		return 0x82179B34;
	}
	return 0x82179B34;
} // Block from 82179B30h-82179B34h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179B34);
		  /* 82179B34h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 82179B34h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 82179B34h case    0:*/		return 0x82179B38;
		  /* 82179B38h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 82179B38h case    1:*/		if ( regs.CR[6].eq ) { return 0x82179B68;  }
		/* 82179B38h case    1:*/		return 0x82179B3C;
		  /* 82179B3Ch */ case    2:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 82179B3Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 82179B3Ch case    2:*/		return 0x82179B40;
		  /* 82179B40h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 82179B40h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82179B40h case    3:*/		return 0x82179B44;
		  /* 82179B44h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82179B44h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179B44h case    4:*/		return 0x82179B48;
		  /* 82179B48h */ case    5:  		/* addic R10, R10, -1 */
		/* 82179B48h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 82179B48h case    5:*/		return 0x82179B4C;
		  /* 82179B4Ch */ case    6:  		/* subfe R10, R10, R10 */
		/* 82179B4Ch case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 82179B4Ch case    6:*/		return 0x82179B50;
		  /* 82179B50h */ case    7:  		/* and R10, R10, R11 */
		/* 82179B50h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 82179B50h case    7:*/		return 0x82179B54;
		  /* 82179B54h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 82179B54h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 82179B54h case    8:*/		return 0x82179B58;
		  /* 82179B58h */ case    9:  		/* bc 12, CR6_EQ, 44 */
		/* 82179B58h case    9:*/		if ( regs.CR[6].eq ) { return 0x82179B84;  }
		/* 82179B58h case    9:*/		return 0x82179B5C;
		  /* 82179B5Ch */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179B5Ch case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179B5Ch case   10:*/		return 0x82179B60;
		  /* 82179B60h */ case   11:  		/* bc 4, CR0_EQ, 80 */
		/* 82179B60h case   11:*/		if ( !regs.CR[0].eq ) { return 0x82179BB0;  }
		/* 82179B60h case   11:*/		return 0x82179B64;
		  /* 82179B64h */ case   12:  		/* b 64 */
		/* 82179B64h case   12:*/		return 0x82179BA4;
		/* 82179B64h case   12:*/		return 0x82179B68;
	}
	return 0x82179B68;
} // Block from 82179B34h-82179B68h (13 instructions)

//////////////////////////////////////////////////////
// Block at 82179B68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179B68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179B68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179B68);
		  /* 82179B68h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 82179B68h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 82179B68h case    0:*/		return 0x82179B6C;
		  /* 82179B6Ch */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 82179B6Ch case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179B6Ch case    1:*/		return 0x82179B70;
		  /* 82179B70h */ case    2:  		/* addic R9, R10, -1 */
		/* 82179B70h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 82179B70h case    2:*/		return 0x82179B74;
		  /* 82179B74h */ case    3:  		/* subfe R9, R9, R9 */
		/* 82179B74h case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82179B74h case    3:*/		return 0x82179B78;
		  /* 82179B78h */ case    4:  		/* and R9, R9, R11 */
		/* 82179B78h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 82179B78h case    4:*/		return 0x82179B7C;
		  /* 82179B7Ch */ case    5:  		/* cmplw CR6, R31, R9 */
		/* 82179B7Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 82179B7Ch case    5:*/		return 0x82179B80;
		  /* 82179B80h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 82179B80h case    6:*/		if ( !regs.CR[6].eq ) { return 0x82179B9C;  }
		/* 82179B80h case    6:*/		return 0x82179B84;
	}
	return 0x82179B84;
} // Block from 82179B68h-82179B84h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82179B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179B84);
		  /* 82179B84h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82179B84h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82179B84h case    0:*/		return 0x82179B88;
		  /* 82179B88h */ case    1:  		/* mr R24, R31 */
		/* 82179B88h case    1:*/		regs.R24 = regs.R31;
		/* 82179B88h case    1:*/		return 0x82179B8C;
		  /* 82179B8Ch */ case    2:  		/* lwz R31, <#[R11 + 4]> */
		/* 82179B8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 82179B8Ch case    2:*/		return 0x82179B90;
	}
	return 0x82179B90;
} // Block from 82179B84h-82179B90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179B90h
// Function '?BlockContainsMERGEWithGroupedInput@Compiler@D3DXShader@@AAA_NPAURegGroupInfo@2@PAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179B90);
		  /* 82179B90h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82179B90h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82179B90h case    0:*/		return 0x82179B94;
		  /* 82179B94h */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 82179B94h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82179BB0;  }
		/* 82179B94h case    1:*/		return 0x82179B98;
		  /* 82179B98h */ case    2:  		/* b 16 */
		/* 82179B98h case    2:*/		return 0x82179BA8;
		/* 82179B98h case    2:*/		return 0x82179B9C;
	}
	return 0x82179B9C;
} // Block from 82179B90h-82179B9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179B9C);
		  /* 82179B9Ch */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 82179B9Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82179B9Ch case    0:*/		return 0x82179BA0;
		  /* 82179BA0h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 82179BA0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x82179BB0;  }
		/* 82179BA0h case    1:*/		return 0x82179BA4;
	}
	return 0x82179BA4;
} // Block from 82179B9Ch-82179BA4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179BA4);
		  /* 82179BA4h */ case    0:  		/* mr R31, R11 */
		/* 82179BA4h case    0:*/		regs.R31 = regs.R11;
		/* 82179BA4h case    0:*/		return 0x82179BA8;
	}
	return 0x82179BA8;
} // Block from 82179BA4h-82179BA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179BA8);
		  /* 82179BA8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 82179BA8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82179BA8h case    0:*/		return 0x82179BAC;
		  /* 82179BACh */ case    1:  		/* bc 4, CR6_EQ, -656 */
		/* 82179BACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217991C;  }
		/* 82179BACh case    1:*/		return 0x82179BB0;
	}
	return 0x82179BB0;
} // Block from 82179BA8h-82179BB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179BB0);
		  /* 82179BB0h */ case    0:  		/* addi R1, R1, 192 */
		/* 82179BB0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 82179BB0h case    0:*/		return 0x82179BB4;
		  /* 82179BB4h */ case    1:  		/* b -952620 */
		/* 82179BB4h case    1:*/		return 0x82091288;
		/* 82179BB4h case    1:*/		return 0x82179BB8;
	}
	return 0x82179BB8;
} // Block from 82179BB0h-82179BB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179BB8);
		  /* 82179BB8h */ case    0:  		/* mfspr R12, LR */
		/* 82179BB8h case    0:*/		regs.R12 = regs.LR;
		/* 82179BB8h case    0:*/		return 0x82179BBC;
		  /* 82179BBCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82179BBCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82179BBCh case    1:*/		return 0x82179BC0;
		  /* 82179BC0h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82179BC0h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82179BC0h case    2:*/		return 0x82179BC4;
		  /* 82179BC4h */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82179BC4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82179BC4h case    3:*/		return 0x82179BC8;
		  /* 82179BC8h */ case    4:  		/* lwz R11, <#[R4 + 20]> */
		/* 82179BC8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 82179BC8h case    4:*/		return 0x82179BCC;
		  /* 82179BCCh */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179BCCh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179BCCh case    5:*/		return 0x82179BD0;
		  /* 82179BD0h */ case    6:  		/* bc 4, CR0_EQ, 52 */
		/* 82179BD0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x82179C04;  }
		/* 82179BD0h case    6:*/		return 0x82179BD4;
		  /* 82179BD4h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 82179BD4h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82179BD4h case    7:*/		return 0x82179BD8;
		  /* 82179BD8h */ case    8:  		/* bc 12, CR0_EQ, 44 */
		/* 82179BD8h case    8:*/		if ( regs.CR[0].eq ) { return 0x82179C04;  }
		/* 82179BD8h case    8:*/		return 0x82179BDC;
		  /* 82179BDCh */ case    9:  		/* lwz R10, <#[R11 + 8]> */
		/* 82179BDCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82179BDCh case    9:*/		return 0x82179BE0;
		  /* 82179BE0h */ case   10:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 82179BE0h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 82179BE0h case   10:*/		return 0x82179BE4;
		  /* 82179BE4h */ case   11:  		/* cmplwi CR6, R10, 14336 */
		/* 82179BE4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 82179BE4h case   11:*/		return 0x82179BE8;
		  /* 82179BE8h */ case   12:  		/* bc 4, CR6_EQ, 176 */
		/* 82179BE8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82179C98;  }
		/* 82179BE8h case   12:*/		return 0x82179BEC;
		  /* 82179BECh */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82179BECh case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82179BECh case   13:*/		return 0x82179BF0;
		  /* 82179BF0h */ case   14:  		/* lwz R11, <#[R11 + 40]> */
		/* 82179BF0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82179BF0h case   14:*/		return 0x82179BF4;
		  /* 82179BF4h */ case   15:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179BF4h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179BF4h case   15:*/		return 0x82179BF8;
		  /* 82179BF8h */ case   16:  		/* bc 4, CR0_EQ, 12 */
		/* 82179BF8h case   16:*/		if ( !regs.CR[0].eq ) { return 0x82179C04;  }
		/* 82179BF8h case   16:*/		return 0x82179BFC;
		  /* 82179BFCh */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 82179BFCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179BFCh case   17:*/		return 0x82179C00;
		  /* 82179C00h */ case   18:  		/* bc 4, CR6_EQ, -36 */
		/* 82179C00h case   18:*/		if ( !regs.CR[6].eq ) { return 0x82179BDC;  }
		/* 82179C00h case   18:*/		return 0x82179C04;
	}
	return 0x82179C04;
} // Block from 82179BB8h-82179C04h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82179C04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179C04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179C04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179C04);
		  /* 82179C04h */ case    0:  		/* lwz R11, <#[R4 + 28]> */
		/* 82179C04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 82179C04h case    0:*/		return 0x82179C08;
		  /* 82179C08h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179C08h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179C08h case    1:*/		return 0x82179C0C;
		  /* 82179C0Ch */ case    2:  		/* bc 4, CR0_EQ, 48 */
		/* 82179C0Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82179C3C;  }
		/* 82179C0Ch case    2:*/		return 0x82179C10;
		  /* 82179C10h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 82179C10h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82179C10h case    3:*/		return 0x82179C14;
		  /* 82179C14h */ case    4:  		/* bc 12, CR0_EQ, 40 */
		/* 82179C14h case    4:*/		if ( regs.CR[0].eq ) { return 0x82179C3C;  }
		/* 82179C14h case    4:*/		return 0x82179C18;
		  /* 82179C18h */ case    5:  		/* lwz R10, <#[R11 + 8]> */
		/* 82179C18h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 82179C18h case    5:*/		return 0x82179C1C;
		  /* 82179C1Ch */ case    6:  		/* rlwinm. R10, R10, 7, 31, 31 */
		/* 82179C1Ch case    6:*/		cpu::op::rlwinm<1,7,31,31>(regs,&regs.R10,regs.R10);
		/* 82179C1Ch case    6:*/		return 0x82179C20;
		  /* 82179C20h */ case    7:  		/* bc 4, CR0_EQ, 120 */
		/* 82179C20h case    7:*/		if ( !regs.CR[0].eq ) { return 0x82179C98;  }
		/* 82179C20h case    7:*/		return 0x82179C24;
		  /* 82179C24h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82179C24h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82179C24h case    8:*/		return 0x82179C28;
	}
	return 0x82179C28;
} // Block from 82179C04h-82179C28h (9 instructions)

//////////////////////////////////////////////////////
// Block at 82179C28h
// Function '?RemoveRedundantPHIs@Compiler@D3DXShader@@AAAXPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179C28);
		  /* 82179C28h */ case    0:  		/* lwz R11, <#[R11 + 40]> */
		/* 82179C28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82179C28h case    0:*/		return 0x82179C2C;
		  /* 82179C2Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179C2Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179C2Ch case    1:*/		return 0x82179C30;
		  /* 82179C30h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 82179C30h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82179C3C;  }
		/* 82179C30h case    2:*/		return 0x82179C34;
		  /* 82179C34h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 82179C34h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179C34h case    3:*/		return 0x82179C38;
		  /* 82179C38h */ case    4:  		/* bc 4, CR6_EQ, -32 */
		/* 82179C38h case    4:*/		if ( !regs.CR[6].eq ) { return 0x82179C18;  }
		/* 82179C38h case    4:*/		return 0x82179C3C;
	}
	return 0x82179C3C;
} // Block from 82179C28h-82179C3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 82179C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179C3C);
		  /* 82179C3Ch */ case    0:  		/* lwz R11, <#[R4 + 36]> */
		/* 82179C3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 82179C3Ch case    0:*/		return 0x82179C40;
		  /* 82179C40h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179C40h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179C40h case    1:*/		return 0x82179C44;
		  /* 82179C44h */ case    2:  		/* bc 4, CR0_EQ, 60 */
		/* 82179C44h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82179C80;  }
		/* 82179C44h case    2:*/		return 0x82179C48;
		  /* 82179C48h */ case    3:  		/* mr R31, R11 */
		/* 82179C48h case    3:*/		regs.R31 = regs.R11;
		/* 82179C48h case    3:*/		return 0x82179C4C;
		  /* 82179C4Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 82179C4Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82179C4Ch case    4:*/		return 0x82179C50;
		  /* 82179C50h */ case    5:  		/* bc 12, CR0_EQ, 48 */
		/* 82179C50h case    5:*/		if ( regs.CR[0].eq ) { return 0x82179C80;  }
		/* 82179C50h case    5:*/		return 0x82179C54;
		  /* 82179C54h */ case    6:  		/* mr R3, R31 */
		/* 82179C54h case    6:*/		regs.R3 = regs.R31;
		/* 82179C54h case    6:*/		return 0x82179C58;
		  /* 82179C58h */ case    7:  		/* bl -88856 */
		/* 82179C58h case    7:*/		regs.LR = 0x82179C5C; return 0x82164140;
		/* 82179C58h case    7:*/		return 0x82179C5C;
		  /* 82179C5Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82179C5Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82179C5Ch case    8:*/		return 0x82179C60;
		  /* 82179C60h */ case    9:  		/* bc 12, CR0_EQ, 56 */
		/* 82179C60h case    9:*/		if ( regs.CR[0].eq ) { return 0x82179C98;  }
		/* 82179C60h case    9:*/		return 0x82179C64;
		  /* 82179C64h */ case   10:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82179C64h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82179C64h case   10:*/		return 0x82179C68;
		  /* 82179C68h */ case   11:  		/* lwz R11, <#[R11 + 40]> */
		/* 82179C68h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 82179C68h case   11:*/		return 0x82179C6C;
		  /* 82179C6Ch */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179C6Ch case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179C6Ch case   12:*/		return 0x82179C70;
		  /* 82179C70h */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 82179C70h case   13:*/		if ( !regs.CR[0].eq ) { return 0x82179C80;  }
		/* 82179C70h case   13:*/		return 0x82179C74;
		  /* 82179C74h */ case   14:  		/* mr R31, R11 */
		/* 82179C74h case   14:*/		regs.R31 = regs.R11;
		/* 82179C74h case   14:*/		return 0x82179C78;
		  /* 82179C78h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82179C78h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179C78h case   15:*/		return 0x82179C7C;
		  /* 82179C7Ch */ case   16:  		/* bc 4, CR6_EQ, -40 */
		/* 82179C7Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x82179C54;  }
		/* 82179C7Ch case   16:*/		return 0x82179C80;
	}
	return 0x82179C80;
} // Block from 82179C3Ch-82179C80h (17 instructions)

//////////////////////////////////////////////////////
// Block at 82179C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179C80);
		  /* 82179C80h */ case    0:  		/* li R3, 1 */
		/* 82179C80h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82179C80h case    0:*/		return 0x82179C84;
		  /* 82179C84h */ case    1:  		/* addi R1, R1, 96 */
		/* 82179C84h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82179C84h case    1:*/		return 0x82179C88;
		  /* 82179C88h */ case    2:  		/* lwz R12, <#[R1 - 8]> */
		/* 82179C88h case    2:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82179C88h case    2:*/		return 0x82179C8C;
		  /* 82179C8Ch */ case    3:  		/* mtspr LR, R12 */
		/* 82179C8Ch case    3:*/		regs.LR = regs.R12;
		/* 82179C8Ch case    3:*/		return 0x82179C90;
		  /* 82179C90h */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 82179C90h case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82179C90h case    4:*/		return 0x82179C94;
		  /* 82179C94h */ case    5:  		/* bclr 20, CR0_LT */
		/* 82179C94h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82179C94h case    5:*/		return 0x82179C98;
	}
	return 0x82179C98;
} // Block from 82179C80h-82179C98h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82179C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179C98);
		  /* 82179C98h */ case    0:  		/* li R3, 0 */
		/* 82179C98h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 82179C98h case    0:*/		return 0x82179C9C;
		  /* 82179C9Ch */ case    1:  		/* b -24 */
		/* 82179C9Ch case    1:*/		return 0x82179C84;
		/* 82179C9Ch case    1:*/		return 0x82179CA0;
	}
	return 0x82179CA0;
} // Block from 82179C98h-82179CA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82179CA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179CA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179CA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179CA0);
		  /* 82179CA0h */ case    0:  		/* mfspr R12, LR */
		/* 82179CA0h case    0:*/		regs.R12 = regs.LR;
		/* 82179CA0h case    0:*/		return 0x82179CA4;
		  /* 82179CA4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 82179CA4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82179CA4h case    1:*/		return 0x82179CA8;
		  /* 82179CA8h */ case    2:  		/* std R31, <#[R1 - 16]> */
		/* 82179CA8h case    2:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82179CA8h case    2:*/		return 0x82179CAC;
		  /* 82179CACh */ case    3:  		/* stwu R1, <#[R1 - 96]> */
		/* 82179CACh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 82179CACh case    3:*/		return 0x82179CB0;
		  /* 82179CB0h */ case    4:  		/* lwz R10, <#[R4 + 28]> */
		/* 82179CB0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000001C) );
		/* 82179CB0h case    4:*/		return 0x82179CB4;
		  /* 82179CB4h */ case    5:  		/* mr R31, R3 */
		/* 82179CB4h case    5:*/		regs.R31 = regs.R3;
		/* 82179CB4h case    5:*/		return 0x82179CB8;
		  /* 82179CB8h */ case    6:  		/* lwz R11, <#[R10 + 112]> */
		/* 82179CB8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000070) );
		/* 82179CB8h case    6:*/		return 0x82179CBC;
		  /* 82179CBCh */ case    7:  		/* lwz R9, <#[R11 + 48]> */
		/* 82179CBCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 82179CBCh case    7:*/		return 0x82179CC0;
		  /* 82179CC0h */ case    8:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 82179CC0h case    8:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 82179CC0h case    8:*/		return 0x82179CC4;
		  /* 82179CC4h */ case    9:  		/* bc 12, CR0_EQ, 48 */
		/* 82179CC4h case    9:*/		if ( regs.CR[0].eq ) { return 0x82179CF4;  }
		/* 82179CC4h case    9:*/		return 0x82179CC8;
		  /* 82179CC8h */ case   10:  		/* b 16 */
		/* 82179CC8h case   10:*/		return 0x82179CD8;
		/* 82179CC8h case   10:*/		return 0x82179CCC;
		  /* 82179CCCh */ case   11:  		/* lwz R9, <#[R11 + 48]> */
		/* 82179CCCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 82179CCCh case   11:*/		return 0x82179CD0;
		  /* 82179CD0h */ case   12:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 82179CD0h case   12:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 82179CD0h case   12:*/		return 0x82179CD4;
		  /* 82179CD4h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 82179CD4h case   13:*/		if ( regs.CR[0].eq ) { return 0x82179CE4;  }
		/* 82179CD4h case   13:*/		return 0x82179CD8;
	}
	return 0x82179CD8;
} // Block from 82179CA0h-82179CD8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 82179CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179CD8);
		  /* 82179CD8h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 82179CD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 82179CD8h case    0:*/		return 0x82179CDC;
		  /* 82179CDCh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82179CDCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179CDCh case    1:*/		return 0x82179CE0;
		  /* 82179CE0h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 82179CE0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82179CCC;  }
		/* 82179CE0h case    2:*/		return 0x82179CE4;
	}
	return 0x82179CE4;
} // Block from 82179CD8h-82179CE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179CE4);
		  /* 82179CE4h */ case    0:  		/* lwz R9, <#[R11 + 48]> */
		/* 82179CE4h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 82179CE4h case    0:*/		return 0x82179CE8;
		  /* 82179CE8h */ case    1:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 82179CE8h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 82179CE8h case    1:*/		return 0x82179CEC;
		  /* 82179CECh */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 82179CECh case    2:*/		if ( !regs.CR[0].eq ) { return 0x82179CD8;  }
		/* 82179CECh case    2:*/		return 0x82179CF0;
		  /* 82179CF0h */ case    3:  		/* stw R11, <#[R10 + 112]> */
		/* 82179CF0h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000070) );
		/* 82179CF0h case    3:*/		return 0x82179CF4;
	}
	return 0x82179CF4;
} // Block from 82179CE4h-82179CF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82179CF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179CF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179CF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179CF4);
		  /* 82179CF4h */ case    0:  		/* mr R3, R31 */
		/* 82179CF4h case    0:*/		regs.R3 = regs.R31;
		/* 82179CF4h case    0:*/		return 0x82179CF8;
		  /* 82179CF8h */ case    1:  		/* lwz R4, <#[R10 + 112]> */
		/* 82179CF8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000070) );
		/* 82179CF8h case    1:*/		return 0x82179CFC;
		  /* 82179CFCh */ case    2:  		/* bl -5260 */
		/* 82179CFCh case    2:*/		regs.LR = 0x82179D00; return 0x82178870;
		/* 82179CFCh case    2:*/		return 0x82179D00;
		  /* 82179D00h */ case    3:  		/* cmplwi CR0, R3, 0 */
		/* 82179D00h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 82179D00h case    3:*/		return 0x82179D04;
		  /* 82179D04h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 82179D04h case    4:*/		if ( !regs.CR[0].eq ) { return 0x82179D10;  }
		/* 82179D04h case    4:*/		return 0x82179D08;
		  /* 82179D08h */ case    5:  		/* li R3, 1 */
		/* 82179D08h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 82179D08h case    5:*/		return 0x82179D0C;
		  /* 82179D0Ch */ case    6:  		/* b 24 */
		/* 82179D0Ch case    6:*/		return 0x82179D24;
		/* 82179D0Ch case    6:*/		return 0x82179D10;
	}
	return 0x82179D10;
} // Block from 82179CF4h-82179D10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82179D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179D10);
		  /* 82179D10h */ case    0:  		/* mr R4, R31 */
		/* 82179D10h case    0:*/		regs.R4 = regs.R31;
		/* 82179D10h case    0:*/		return 0x82179D14;
		  /* 82179D14h */ case    1:  		/* bl -87436 */
		/* 82179D14h case    1:*/		regs.LR = 0x82179D18; return 0x82164788;
		/* 82179D14h case    1:*/		return 0x82179D18;
		  /* 82179D18h */ case    2:  		/* addi R11, R3, -1 */
		/* 82179D18h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R3,0xFFFFFFFF);
		/* 82179D18h case    2:*/		return 0x82179D1C;
		  /* 82179D1Ch */ case    3:  		/* addic R10, R11, -1 */
		/* 82179D1Ch case    3:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 82179D1Ch case    3:*/		return 0x82179D20;
		  /* 82179D20h */ case    4:  		/* subfe R3, R10, R11 */
		/* 82179D20h case    4:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 82179D20h case    4:*/		return 0x82179D24;
	}
	return 0x82179D24;
} // Block from 82179D10h-82179D24h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82179D24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179D24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179D24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179D24);
		  /* 82179D24h */ case    0:  		/* addi R1, R1, 96 */
		/* 82179D24h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 82179D24h case    0:*/		return 0x82179D28;
		  /* 82179D28h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 82179D28h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 82179D28h case    1:*/		return 0x82179D2C;
		  /* 82179D2Ch */ case    2:  		/* mtspr LR, R12 */
		/* 82179D2Ch case    2:*/		regs.LR = regs.R12;
		/* 82179D2Ch case    2:*/		return 0x82179D30;
		  /* 82179D30h */ case    3:  		/* ld R31, <#[R1 - 16]> */
		/* 82179D30h case    3:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 82179D30h case    3:*/		return 0x82179D34;
		  /* 82179D34h */ case    4:  		/* bclr 20, CR0_LT */
		/* 82179D34h case    4:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82179D34h case    4:*/		return 0x82179D38;
	}
	return 0x82179D38;
} // Block from 82179D24h-82179D38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82179D38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179D38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179D38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179D38);
		  /* 82179D38h */ case    0:  		/* lwz R11, <#[R4 + 4]> */
		/* 82179D38h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 82179D38h case    0:*/		return 0x82179D3C;
		  /* 82179D3Ch */ case    1:  		/* addi R9, R4, 4 */
		/* 82179D3Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0x4);
		/* 82179D3Ch case    1:*/		return 0x82179D40;
		  /* 82179D40h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82179D40h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82179D40h case    2:*/		return 0x82179D44;
		  /* 82179D44h */ case    3:  		/* bclr 4, CR0_EQ */
		/* 82179D44h case    3:*/		if ( !regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 82179D44h case    3:*/		return 0x82179D48;
	}
	return 0x82179D48;
} // Block from 82179D38h-82179D48h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82179D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179D48);
		  /* 82179D48h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82179D48h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82179D48h case    0:*/		return 0x82179D4C;
		  /* 82179D4Ch */ case    1:  		/* lwz R8, <#[R3]> */
		/* 82179D4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 82179D4Ch case    1:*/		return 0x82179D50;
		  /* 82179D50h */ case    2:  		/* lwz R10, <#[R4]> */
		/* 82179D50h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82179D50h case    2:*/		return 0x82179D54;
		  /* 82179D54h */ case    3:  		/* addi R7, R3, -36 */
		/* 82179D54h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R3,0xFFFFFFDC);
		/* 82179D54h case    3:*/		return 0x82179D58;
		  /* 82179D58h */ case    4:  		/* addi R11, R11, 36 */
		/* 82179D58h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82179D58h case    4:*/		return 0x82179D5C;
		  /* 82179D5Ch */ case    5:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82179D5Ch case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82179D5Ch case    5:*/		return 0x82179D60;
		  /* 82179D60h */ case    6:  		/* addi R6, R11, -36 */
		/* 82179D60h case    6:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFDC);
		/* 82179D60h case    6:*/		return 0x82179D64;
		  /* 82179D64h */ case    7:  		/* addi R10, R10, -4 */
		/* 82179D64h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 82179D64h case    7:*/		return 0x82179D68;
		  /* 82179D68h */ case    8:  		/* addi R5, R4, -36 */
		/* 82179D68h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0xFFFFFFDC);
		/* 82179D68h case    8:*/		return 0x82179D6C;
		  /* 82179D6Ch */ case    9:  		/* stw R8, <#[R11]> */
		/* 82179D6Ch case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 82179D6Ch case    9:*/		return 0x82179D70;
		  /* 82179D70h */ case   10:  		/* ori R8, R7, 1 */
		/* 82179D70h case   10:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R7,0x1);
		/* 82179D70h case   10:*/		return 0x82179D74;
		  /* 82179D74h */ case   11:  		/* lwz R11, <#[R3]> */
		/* 82179D74h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82179D74h case   11:*/		return 0x82179D78;
		  /* 82179D78h */ case   12:  		/* rlwinm R7, R11, 0, 0, 30 */
		/* 82179D78h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R11);
		/* 82179D78h case   12:*/		return 0x82179D7C;
		  /* 82179D7Ch */ case   13:  		/* stw R6, <#[R7]> */
		/* 82179D7Ch case   13:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 82179D7Ch case   13:*/		return 0x82179D80;
		  /* 82179D80h */ case   14:  		/* addi R11, R10, 4 */
		/* 82179D80h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 82179D80h case   14:*/		return 0x82179D84;
		  /* 82179D84h */ case   15:  		/* stw R8, <#[R10 + 4]> */
		/* 82179D84h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 82179D84h case   15:*/		return 0x82179D88;
		  /* 82179D88h */ case   16:  		/* ori R7, R5, 1 */
		/* 82179D88h case   16:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R5,0x1);
		/* 82179D88h case   16:*/		return 0x82179D8C;
		  /* 82179D8Ch */ case   17:  		/* ori R10, R9, 1 */
		/* 82179D8Ch case   17:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R9,0x1);
		/* 82179D8Ch case   17:*/		return 0x82179D90;
		  /* 82179D90h */ case   18:  		/* stw R11, <#[R3]> */
		/* 82179D90h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 82179D90h case   18:*/		return 0x82179D94;
		  /* 82179D94h */ case   19:  		/* stw R7, <#[R9]> */
		/* 82179D94h case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 82179D94h case   19:*/		return 0x82179D98;
		  /* 82179D98h */ case   20:  		/* stw R10, <#[R4]> */
		/* 82179D98h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000000) );
		/* 82179D98h case   20:*/		return 0x82179D9C;
		  /* 82179D9Ch */ case   21:  		/* bclr 20, CR0_LT */
		/* 82179D9Ch case   21:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82179D9Ch case   21:*/		return 0x82179DA0;
	}
	return 0x82179DA0;
} // Block from 82179D48h-82179DA0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82179DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179DA0);
		  /* 82179DA0h */ case    0:  		/* lwz R9, <#[R3 + 8]> */
		/* 82179DA0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82179DA0h case    0:*/		return 0x82179DA4;
		  /* 82179DA4h */ case    1:  		/* mr R11, R3 */
		/* 82179DA4h case    1:*/		regs.R11 = regs.R3;
		/* 82179DA4h case    1:*/		return 0x82179DA8;
		  /* 82179DA8h */ case    2:  		/* lwz R10, <#[R3 + 4]> */
		/* 82179DA8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 82179DA8h case    2:*/		return 0x82179DAC;
		  /* 82179DACh */ case    3:  		/* mulli R8, R9, 36 */
		/* 82179DACh case    3:*/		cpu::op::mulli<0>(regs,&regs.R8,regs.R9,0x24);
		/* 82179DACh case    3:*/		return 0x82179DB0;
		  /* 82179DB0h */ case    4:  		/* addi R9, R9, 1 */
		/* 82179DB0h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82179DB0h case    4:*/		return 0x82179DB4;
		  /* 82179DB4h */ case    5:  		/* add R8, R8, R10 */
		/* 82179DB4h case    5:*/		cpu::op::add<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 82179DB4h case    5:*/		return 0x82179DB8;
		  /* 82179DB8h */ case    6:  		/* stw R9, <#[R3 + 8]> */
		/* 82179DB8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 82179DB8h case    6:*/		return 0x82179DBC;
		  /* 82179DBCh */ case    7:  		/* lwz R7, <#[R10 + 8]> */
		/* 82179DBCh case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 82179DBCh case    7:*/		return 0x82179DC0;
		  /* 82179DC0h */ case    8:  		/* addi R3, R8, 16 */
		/* 82179DC0h case    8:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R8,0x10);
		/* 82179DC0h case    8:*/		return 0x82179DC4;
		  /* 82179DC4h */ case    9:  		/* cmplw CR6, R9, R7 */
		/* 82179DC4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 82179DC4h case    9:*/		return 0x82179DC8;
		  /* 82179DC8h */ case   10:  		/* bclr 4, CR6_EQ */
		/* 82179DC8h case   10:*/		if ( !regs.CR[6].eq ) { return (uint32)regs.LR; }
		/* 82179DC8h case   10:*/		return 0x82179DCC;
	}
	return 0x82179DCC;
} // Block from 82179DA0h-82179DCCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82179DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179DCC);
		  /* 82179DCCh */ case    0:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 82179DCCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 82179DCCh case    0:*/		return 0x82179DD0;
		  /* 82179DD0h */ case    1:  		/* li R9, 0 */
		/* 82179DD0h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 82179DD0h case    1:*/		return 0x82179DD4;
		  /* 82179DD4h */ case    2:  		/* lwz R10, <#[R10 + 4]> */
		/* 82179DD4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 82179DD4h case    2:*/		return 0x82179DD8;
	}
	return 0x82179DD8;
} // Block from 82179DCCh-82179DD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82179DD8h
// Function '?CanUseConditionalExecute@Compiler@D3DXShader@@AAA_NPAVBlock@2@0PAVInstruction@2@1PA_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179DD8);
		  /* 82179DD8h */ case    0:  		/* stw R9, <#[R11 + 8]> */
		/* 82179DD8h case    0:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 82179DD8h case    0:*/		return 0x82179DDC;
		  /* 82179DDCh */ case    1:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 82179DDCh case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 82179DDCh case    1:*/		return 0x82179DE0;
		  /* 82179DE0h */ case    2:  		/* addic R9, R9, -1 */
		/* 82179DE0h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 82179DE0h case    2:*/		return 0x82179DE4;
		  /* 82179DE4h */ case    3:  		/* subfe R9, R9, R9 */
		/* 82179DE4h case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 82179DE4h case    3:*/		return 0x82179DE8;
		  /* 82179DE8h */ case    4:  		/* and R10, R9, R10 */
		/* 82179DE8h case    4:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 82179DE8h case    4:*/		return 0x82179DEC;
		  /* 82179DECh */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 82179DECh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 82179DECh case    5:*/		return 0x82179DF0;
		  /* 82179DF0h */ case    6:  		/* bclr 20, CR0_LT */
		/* 82179DF0h case    6:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 82179DF0h case    6:*/		return 0x82179DF4;
	}
	return 0x82179DF4;
} // Block from 82179DD8h-82179DF4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 82179DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179DF4);
		  /* 82179DF4h */ case    0:  		/* nop */
		/* 82179DF4h case    0:*/		cpu::op::nop();
		/* 82179DF4h case    0:*/		return 0x82179DF8;
	}
	return 0x82179DF8;
} // Block from 82179DF4h-82179DF8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 82179DF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179DF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179DF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179DF8);
		  /* 82179DF8h */ case    0:  		/* mfspr R12, LR */
		/* 82179DF8h case    0:*/		regs.R12 = regs.LR;
		/* 82179DF8h case    0:*/		return 0x82179DFC;
		  /* 82179DFCh */ case    1:  		/* bl -953248 */
		/* 82179DFCh case    1:*/		regs.LR = 0x82179E00; return 0x8209125C;
		/* 82179DFCh case    1:*/		return 0x82179E00;
		  /* 82179E00h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 82179E00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 82179E00h case    2:*/		return 0x82179E04;
		  /* 82179E04h */ case    3:  		/* addi R11, R4, 11 */
		/* 82179E04h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0xB);
		/* 82179E04h case    3:*/		return 0x82179E08;
		  /* 82179E08h */ case    4:  		/* mr R29, R5 */
		/* 82179E08h case    4:*/		regs.R29 = regs.R5;
		/* 82179E08h case    4:*/		return 0x82179E0C;
		  /* 82179E0Ch */ case    5:  		/* rlwinm R30, R11, 2, 0, 29 */
		/* 82179E0Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R11);
		/* 82179E0Ch case    5:*/		return 0x82179E10;
		  /* 82179E10h */ case    6:  		/* mr R5, R6 */
		/* 82179E10h case    6:*/		regs.R5 = regs.R6;
		/* 82179E10h case    6:*/		return 0x82179E14;
		  /* 82179E14h */ case    7:  		/* mr R31, R3 */
		/* 82179E14h case    7:*/		regs.R31 = regs.R3;
		/* 82179E14h case    7:*/		return 0x82179E18;
		  /* 82179E18h */ case    8:  		/* lwzx R4, <#[R30 + R3]> */
		/* 82179E18h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R3 + 0x00000000) );
		/* 82179E18h case    8:*/		return 0x82179E1C;
		  /* 82179E1Ch */ case    9:  		/* bl -5388 */
		/* 82179E1Ch case    9:*/		regs.LR = 0x82179E20; return 0x82178910;
		/* 82179E1Ch case    9:*/		return 0x82179E20;
		  /* 82179E20h */ case   10:  		/* mr R4, R29 */
		/* 82179E20h case   10:*/		regs.R4 = regs.R29;
		/* 82179E20h case   10:*/		return 0x82179E24;
		  /* 82179E24h */ case   11:  		/* mr R3, R31 */
		/* 82179E24h case   11:*/		regs.R3 = regs.R31;
		/* 82179E24h case   11:*/		return 0x82179E28;
		  /* 82179E28h */ case   12:  		/* bl -7264 */
		/* 82179E28h case   12:*/		regs.LR = 0x82179E2C; return 0x821781C8;
		/* 82179E28h case   12:*/		return 0x82179E2C;
		  /* 82179E2Ch */ case   13:  		/* stwx R3, <#[R30 + R31]> */
		/* 82179E2Ch case   13:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 82179E2Ch case   13:*/		return 0x82179E30;
		  /* 82179E30h */ case   14:  		/* addi R1, R1, 112 */
		/* 82179E30h case   14:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 82179E30h case   14:*/		return 0x82179E34;
		  /* 82179E34h */ case   15:  		/* b -953224 */
		/* 82179E34h case   15:*/		return 0x820912AC;
		/* 82179E34h case   15:*/		return 0x82179E38;
	}
	return 0x82179E38;
} // Block from 82179DF8h-82179E38h (16 instructions)

//////////////////////////////////////////////////////
// Block at 82179E38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179E38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179E38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179E38);
		  /* 82179E38h */ case    0:  		/* mfspr R12, LR */
		/* 82179E38h case    0:*/		regs.R12 = regs.LR;
		/* 82179E38h case    0:*/		return 0x82179E3C;
		  /* 82179E3Ch */ case    1:  		/* bl -953320 */
		/* 82179E3Ch case    1:*/		regs.LR = 0x82179E40; return 0x82091254;
		/* 82179E3Ch case    1:*/		return 0x82179E40;
		  /* 82179E40h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 82179E40h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 82179E40h case    2:*/		return 0x82179E44;
		  /* 82179E44h */ case    3:  		/* mr R29, R5 */
		/* 82179E44h case    3:*/		regs.R29 = regs.R5;
		/* 82179E44h case    3:*/		return 0x82179E48;
		  /* 82179E48h */ case    4:  		/* mr R30, R6 */
		/* 82179E48h case    4:*/		regs.R30 = regs.R6;
		/* 82179E48h case    4:*/		return 0x82179E4C;
		  /* 82179E4Ch */ case    5:  		/* mr R27, R7 */
		/* 82179E4Ch case    5:*/		regs.R27 = regs.R7;
		/* 82179E4Ch case    5:*/		return 0x82179E50;
		  /* 82179E50h */ case    6:  		/* li R8, 4 */
		/* 82179E50h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 82179E50h case    6:*/		return 0x82179E54;
		  /* 82179E54h */ case    7:  		/* li R7, 2 */
		/* 82179E54h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 82179E54h case    7:*/		return 0x82179E58;
		  /* 82179E58h */ case    8:  		/* li R6, 3 */
		/* 82179E58h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x3);
		/* 82179E58h case    8:*/		return 0x82179E5C;
		  /* 82179E5Ch */ case    9:  		/* li R5, 0 */
		/* 82179E5Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82179E5Ch case    9:*/		return 0x82179E60;
		  /* 82179E60h */ case   10:  		/* mr R28, R3 */
		/* 82179E60h case   10:*/		regs.R28 = regs.R3;
		/* 82179E60h case   10:*/		return 0x82179E64;
		  /* 82179E64h */ case   11:  		/* bl 699188 */
		/* 82179E64h case   11:*/		regs.LR = 0x82179E68; return 0x82224998;
		/* 82179E64h case   11:*/		return 0x82179E68;
		  /* 82179E68h */ case   12:  		/* lwz R11, <#[R30 + 16]> */
		/* 82179E68h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82179E68h case   12:*/		return 0x82179E6C;
		  /* 82179E6Ch */ case   13:  		/* mr R31, R3 */
		/* 82179E6Ch case   13:*/		regs.R31 = regs.R3;
		/* 82179E6Ch case   13:*/		return 0x82179E70;
		  /* 82179E70h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 82179E70h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179E70h case   14:*/		return 0x82179E74;
		  /* 82179E74h */ case   15:  		/* mr R4, R30 */
		/* 82179E74h case   15:*/		regs.R4 = regs.R30;
		/* 82179E74h case   15:*/		return 0x82179E78;
		  /* 82179E78h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 82179E78h case   16:*/		if ( regs.CR[6].eq ) { return 0x82179E8C;  }
		/* 82179E78h case   16:*/		return 0x82179E7C;
		  /* 82179E7Ch */ case   17:  		/* mr R3, R28 */
		/* 82179E7Ch case   17:*/		regs.R3 = regs.R28;
		/* 82179E7Ch case   17:*/		return 0x82179E80;
		  /* 82179E80h */ case   18:  		/* lwz R5, <#[R30 + 12]> */
		/* 82179E80h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 82179E80h case   18:*/		return 0x82179E84;
		  /* 82179E84h */ case   19:  		/* bl -36244 */
		/* 82179E84h case   19:*/		regs.LR = 0x82179E88; return 0x821710F0;
		/* 82179E84h case   19:*/		return 0x82179E88;
		  /* 82179E88h */ case   20:  		/* mr R4, R3 */
		/* 82179E88h case   20:*/		regs.R4 = regs.R3;
		/* 82179E88h case   20:*/		return 0x82179E8C;
	}
	return 0x82179E8C;
} // Block from 82179E38h-82179E8Ch (21 instructions)

//////////////////////////////////////////////////////
// Block at 82179E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179E8C);
		  /* 82179E8Ch */ case    0:  		/* mr R3, R31 */
		/* 82179E8Ch case    0:*/		regs.R3 = regs.R31;
		/* 82179E8Ch case    0:*/		return 0x82179E90;
		  /* 82179E90h */ case    1:  		/* bl -7368 */
		/* 82179E90h case    1:*/		regs.LR = 0x82179E94; return 0x821781C8;
		/* 82179E90h case    1:*/		return 0x82179E94;
		  /* 82179E94h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 82179E94h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 82179E94h case    2:*/		return 0x82179E98;
		  /* 82179E98h */ case    3:  		/* lwz R11, <#[R27 + 16]> */
		/* 82179E98h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 82179E98h case    3:*/		return 0x82179E9C;
		  /* 82179E9Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82179E9Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179E9Ch case    4:*/		return 0x82179EA0;
		  /* 82179EA0h */ case    5:  		/* mr R4, R27 */
		/* 82179EA0h case    5:*/		regs.R4 = regs.R27;
		/* 82179EA0h case    5:*/		return 0x82179EA4;
		  /* 82179EA4h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 82179EA4h case    6:*/		if ( regs.CR[6].eq ) { return 0x82179EB8;  }
		/* 82179EA4h case    6:*/		return 0x82179EA8;
		  /* 82179EA8h */ case    7:  		/* mr R3, R28 */
		/* 82179EA8h case    7:*/		regs.R3 = regs.R28;
		/* 82179EA8h case    7:*/		return 0x82179EAC;
		  /* 82179EACh */ case    8:  		/* lwz R5, <#[R27 + 12]> */
		/* 82179EACh case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 82179EACh case    8:*/		return 0x82179EB0;
		  /* 82179EB0h */ case    9:  		/* bl -36288 */
		/* 82179EB0h case    9:*/		regs.LR = 0x82179EB4; return 0x821710F0;
		/* 82179EB0h case    9:*/		return 0x82179EB4;
		  /* 82179EB4h */ case   10:  		/* mr R4, R3 */
		/* 82179EB4h case   10:*/		regs.R4 = regs.R3;
		/* 82179EB4h case   10:*/		return 0x82179EB8;
	}
	return 0x82179EB8;
} // Block from 82179E8Ch-82179EB8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82179EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179EB8);
		  /* 82179EB8h */ case    0:  		/* mr R3, R31 */
		/* 82179EB8h case    0:*/		regs.R3 = regs.R31;
		/* 82179EB8h case    0:*/		return 0x82179EBC;
		  /* 82179EBCh */ case    1:  		/* bl -7412 */
		/* 82179EBCh case    1:*/		regs.LR = 0x82179EC0; return 0x821781C8;
		/* 82179EBCh case    1:*/		return 0x82179EC0;
		  /* 82179EC0h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 82179EC0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82179EC0h case    2:*/		return 0x82179EC4;
		  /* 82179EC4h */ case    3:  		/* stw R3, <#[R31 + 48]> */
		/* 82179EC4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82179EC4h case    3:*/		return 0x82179EC8;
		  /* 82179EC8h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 82179EC8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 82179EC8h case    4:*/		return 0x82179ECC;
		  /* 82179ECCh */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 82179ECCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82179ECCh case    5:*/		return 0x82179ED0;
		  /* 82179ED0h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 82179ED0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82179ED0h case    6:*/		return 0x82179ED4;
		  /* 82179ED4h */ case    7:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 82179ED4h case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 82179ED4h case    7:*/		return 0x82179ED8;
		  /* 82179ED8h */ case    8:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 82179ED8h case    8:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 82179ED8h case    8:*/		return 0x82179EDC;
		  /* 82179EDCh */ case    9:  		/* stw R10, <#[R31 + 8]> */
		/* 82179EDCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82179EDCh case    9:*/		return 0x82179EE0;
		  /* 82179EE0h */ case   10:  		/* bc 12, CR6_EQ, 56 */
		/* 82179EE0h case   10:*/		if ( regs.CR[6].eq ) { return 0x82179F18;  }
		/* 82179EE0h case   10:*/		return 0x82179EE4;
		  /* 82179EE4h */ case   11:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82179EE4h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82179EE4h case   11:*/		return 0x82179EE8;
		  /* 82179EE8h */ case   12:  		/* lwz R9, <#[R29]> */
		/* 82179EE8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82179EE8h case   12:*/		return 0x82179EEC;
		  /* 82179EECh */ case   13:  		/* addi R10, R29, -36 */
		/* 82179EECh case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFFDC);
		/* 82179EECh case   13:*/		return 0x82179EF0;
		  /* 82179EF0h */ case   14:  		/* addi R11, R11, 36 */
		/* 82179EF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 82179EF0h case   14:*/		return 0x82179EF4;
		  /* 82179EF4h */ case   15:  		/* ori R8, R10, 1 */
		/* 82179EF4h case   15:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 82179EF4h case   15:*/		return 0x82179EF8;
		  /* 82179EF8h */ case   16:  		/* addi R7, R11, -36 */
		/* 82179EF8h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 82179EF8h case   16:*/		return 0x82179EFC;
		  /* 82179EFCh */ case   17:  		/* addi R10, R11, 4 */
		/* 82179EFCh case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 82179EFCh case   17:*/		return 0x82179F00;
		  /* 82179F00h */ case   18:  		/* stw R9, <#[R11]> */
		/* 82179F00h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 82179F00h case   18:*/		return 0x82179F04;
		  /* 82179F04h */ case   19:  		/* lwz R9, <#[R29]> */
		/* 82179F04h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 82179F04h case   19:*/		return 0x82179F08;
		  /* 82179F08h */ case   20:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 82179F08h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 82179F08h case   20:*/		return 0x82179F0C;
		  /* 82179F0Ch */ case   21:  		/* stw R7, <#[R9]> */
		/* 82179F0Ch case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 82179F0Ch case   21:*/		return 0x82179F10;
		  /* 82179F10h */ case   22:  		/* stw R8, <#[R11 + 4]> */
		/* 82179F10h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 82179F10h case   22:*/		return 0x82179F14;
		  /* 82179F14h */ case   23:  		/* stw R10, <#[R29]> */
		/* 82179F14h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 82179F14h case   23:*/		return 0x82179F18;
	}
	return 0x82179F18;
} // Block from 82179EB8h-82179F18h (24 instructions)

//////////////////////////////////////////////////////
// Block at 82179F18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179F18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179F18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179F18);
		  /* 82179F18h */ case    0:  		/* mr R3, R31 */
		/* 82179F18h case    0:*/		regs.R3 = regs.R31;
		/* 82179F18h case    0:*/		return 0x82179F1C;
		  /* 82179F1Ch */ case    1:  		/* addi R1, R1, 128 */
		/* 82179F1Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 82179F1Ch case    1:*/		return 0x82179F20;
		  /* 82179F20h */ case    2:  		/* b -953468 */
		/* 82179F20h case    2:*/		return 0x820912A4;
		/* 82179F20h case    2:*/		return 0x82179F24;
		  /* 82179F24h */ case    3:  		/* nop */
		/* 82179F24h case    3:*/		cpu::op::nop();
		/* 82179F24h case    3:*/		return 0x82179F28;
	}
	return 0x82179F28;
} // Block from 82179F18h-82179F28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82179F28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179F28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179F28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179F28);
		  /* 82179F28h */ case    0:  		/* mfspr R12, LR */
		/* 82179F28h case    0:*/		regs.R12 = regs.LR;
		/* 82179F28h case    0:*/		return 0x82179F2C;
		  /* 82179F2Ch */ case    1:  		/* bl -953564 */
		/* 82179F2Ch case    1:*/		regs.LR = 0x82179F30; return 0x82091250;
		/* 82179F2Ch case    1:*/		return 0x82179F30;
		  /* 82179F30h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 82179F30h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 82179F30h case    2:*/		return 0x82179F34;
		  /* 82179F34h */ case    3:  		/* mr R27, R5 */
		/* 82179F34h case    3:*/		regs.R27 = regs.R5;
		/* 82179F34h case    3:*/		return 0x82179F38;
		  /* 82179F38h */ case    4:  		/* mr R30, R6 */
		/* 82179F38h case    4:*/		regs.R30 = regs.R6;
		/* 82179F38h case    4:*/		return 0x82179F3C;
		  /* 82179F3Ch */ case    5:  		/* mr R29, R7 */
		/* 82179F3Ch case    5:*/		regs.R29 = regs.R7;
		/* 82179F3Ch case    5:*/		return 0x82179F40;
		  /* 82179F40h */ case    6:  		/* mr R26, R8 */
		/* 82179F40h case    6:*/		regs.R26 = regs.R8;
		/* 82179F40h case    6:*/		return 0x82179F44;
		  /* 82179F44h */ case    7:  		/* li R8, 4 */
		/* 82179F44h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 82179F44h case    7:*/		return 0x82179F48;
		  /* 82179F48h */ case    8:  		/* li R7, 3 */
		/* 82179F48h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 82179F48h case    8:*/		return 0x82179F4C;
		  /* 82179F4Ch */ case    9:  		/* li R6, 13 */
		/* 82179F4Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0xD);
		/* 82179F4Ch case    9:*/		return 0x82179F50;
		  /* 82179F50h */ case   10:  		/* li R5, 0 */
		/* 82179F50h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82179F50h case   10:*/		return 0x82179F54;
		  /* 82179F54h */ case   11:  		/* mr R28, R3 */
		/* 82179F54h case   11:*/		regs.R28 = regs.R3;
		/* 82179F54h case   11:*/		return 0x82179F58;
		  /* 82179F58h */ case   12:  		/* bl 698944 */
		/* 82179F58h case   12:*/		regs.LR = 0x82179F5C; return 0x82224998;
		/* 82179F58h case   12:*/		return 0x82179F5C;
		  /* 82179F5Ch */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 82179F5Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 82179F5Ch case   13:*/		return 0x82179F60;
		  /* 82179F60h */ case   14:  		/* mr R31, R3 */
		/* 82179F60h case   14:*/		regs.R31 = regs.R3;
		/* 82179F60h case   14:*/		return 0x82179F64;
		  /* 82179F64h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82179F64h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179F64h case   15:*/		return 0x82179F68;
		  /* 82179F68h */ case   16:  		/* mr R4, R30 */
		/* 82179F68h case   16:*/		regs.R4 = regs.R30;
		/* 82179F68h case   16:*/		return 0x82179F6C;
		  /* 82179F6Ch */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 82179F6Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x82179F80;  }
		/* 82179F6Ch case   17:*/		return 0x82179F70;
		  /* 82179F70h */ case   18:  		/* mr R3, R28 */
		/* 82179F70h case   18:*/		regs.R3 = regs.R28;
		/* 82179F70h case   18:*/		return 0x82179F74;
		  /* 82179F74h */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 82179F74h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 82179F74h case   19:*/		return 0x82179F78;
		  /* 82179F78h */ case   20:  		/* bl -36488 */
		/* 82179F78h case   20:*/		regs.LR = 0x82179F7C; return 0x821710F0;
		/* 82179F78h case   20:*/		return 0x82179F7C;
		  /* 82179F7Ch */ case   21:  		/* mr R4, R3 */
		/* 82179F7Ch case   21:*/		regs.R4 = regs.R3;
		/* 82179F7Ch case   21:*/		return 0x82179F80;
	}
	return 0x82179F80;
} // Block from 82179F28h-82179F80h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82179F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179F80);
		  /* 82179F80h */ case    0:  		/* mr R3, R31 */
		/* 82179F80h case    0:*/		regs.R3 = regs.R31;
		/* 82179F80h case    0:*/		return 0x82179F84;
		  /* 82179F84h */ case    1:  		/* bl -7612 */
		/* 82179F84h case    1:*/		regs.LR = 0x82179F88; return 0x821781C8;
		/* 82179F84h case    1:*/		return 0x82179F88;
		  /* 82179F88h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 82179F88h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 82179F88h case    2:*/		return 0x82179F8C;
		  /* 82179F8Ch */ case    3:  		/* lwz R11, <#[R29 + 16]> */
		/* 82179F8Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 82179F8Ch case    3:*/		return 0x82179F90;
		  /* 82179F90h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82179F90h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179F90h case    4:*/		return 0x82179F94;
		  /* 82179F94h */ case    5:  		/* mr R4, R29 */
		/* 82179F94h case    5:*/		regs.R4 = regs.R29;
		/* 82179F94h case    5:*/		return 0x82179F98;
		  /* 82179F98h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 82179F98h case    6:*/		if ( regs.CR[6].eq ) { return 0x82179FAC;  }
		/* 82179F98h case    6:*/		return 0x82179F9C;
		  /* 82179F9Ch */ case    7:  		/* mr R3, R28 */
		/* 82179F9Ch case    7:*/		regs.R3 = regs.R28;
		/* 82179F9Ch case    7:*/		return 0x82179FA0;
		  /* 82179FA0h */ case    8:  		/* lwz R5, <#[R29 + 12]> */
		/* 82179FA0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 82179FA0h case    8:*/		return 0x82179FA4;
		  /* 82179FA4h */ case    9:  		/* bl -36532 */
		/* 82179FA4h case    9:*/		regs.LR = 0x82179FA8; return 0x821710F0;
		/* 82179FA4h case    9:*/		return 0x82179FA8;
		  /* 82179FA8h */ case   10:  		/* mr R4, R3 */
		/* 82179FA8h case   10:*/		regs.R4 = regs.R3;
		/* 82179FA8h case   10:*/		return 0x82179FAC;
	}
	return 0x82179FAC;
} // Block from 82179F80h-82179FACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 82179FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179FAC);
		  /* 82179FACh */ case    0:  		/* mr R3, R31 */
		/* 82179FACh case    0:*/		regs.R3 = regs.R31;
		/* 82179FACh case    0:*/		return 0x82179FB0;
		  /* 82179FB0h */ case    1:  		/* bl -7656 */
		/* 82179FB0h case    1:*/		regs.LR = 0x82179FB4; return 0x821781C8;
		/* 82179FB0h case    1:*/		return 0x82179FB4;
		  /* 82179FB4h */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 82179FB4h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 82179FB4h case    2:*/		return 0x82179FB8;
		  /* 82179FB8h */ case    3:  		/* lwz R11, <#[R26 + 16]> */
		/* 82179FB8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 82179FB8h case    3:*/		return 0x82179FBC;
		  /* 82179FBCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82179FBCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82179FBCh case    4:*/		return 0x82179FC0;
		  /* 82179FC0h */ case    5:  		/* mr R4, R26 */
		/* 82179FC0h case    5:*/		regs.R4 = regs.R26;
		/* 82179FC0h case    5:*/		return 0x82179FC4;
		  /* 82179FC4h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 82179FC4h case    6:*/		if ( regs.CR[6].eq ) { return 0x82179FD8;  }
		/* 82179FC4h case    6:*/		return 0x82179FC8;
		  /* 82179FC8h */ case    7:  		/* mr R3, R28 */
		/* 82179FC8h case    7:*/		regs.R3 = regs.R28;
		/* 82179FC8h case    7:*/		return 0x82179FCC;
		  /* 82179FCCh */ case    8:  		/* lwz R5, <#[R26 + 12]> */
		/* 82179FCCh case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 82179FCCh case    8:*/		return 0x82179FD0;
		  /* 82179FD0h */ case    9:  		/* bl -36576 */
		/* 82179FD0h case    9:*/		regs.LR = 0x82179FD4; return 0x821710F0;
		/* 82179FD0h case    9:*/		return 0x82179FD4;
		  /* 82179FD4h */ case   10:  		/* mr R4, R3 */
		/* 82179FD4h case   10:*/		regs.R4 = regs.R3;
		/* 82179FD4h case   10:*/		return 0x82179FD8;
	}
	return 0x82179FD8;
} // Block from 82179FACh-82179FD8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 82179FD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82179FD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82179FD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82179FD8);
		  /* 82179FD8h */ case    0:  		/* mr R3, R31 */
		/* 82179FD8h case    0:*/		regs.R3 = regs.R31;
		/* 82179FD8h case    0:*/		return 0x82179FDC;
		  /* 82179FDCh */ case    1:  		/* bl -7700 */
		/* 82179FDCh case    1:*/		regs.LR = 0x82179FE0; return 0x821781C8;
		/* 82179FDCh case    1:*/		return 0x82179FE0;
		  /* 82179FE0h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 82179FE0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82179FE0h case    2:*/		return 0x82179FE4;
		  /* 82179FE4h */ case    3:  		/* stw R3, <#[R31 + 52]> */
		/* 82179FE4h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 82179FE4h case    3:*/		return 0x82179FE8;
		  /* 82179FE8h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 82179FE8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 82179FE8h case    4:*/		return 0x82179FEC;
		  /* 82179FECh */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 82179FECh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82179FECh case    5:*/		return 0x82179FF0;
		  /* 82179FF0h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 82179FF0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82179FF0h case    6:*/		return 0x82179FF4;
		  /* 82179FF4h */ case    7:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 82179FF4h case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 82179FF4h case    7:*/		return 0x82179FF8;
		  /* 82179FF8h */ case    8:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 82179FF8h case    8:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 82179FF8h case    8:*/		return 0x82179FFC;
		  /* 82179FFCh */ case    9:  		/* stw R10, <#[R31 + 8]> */
		/* 82179FFCh case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 82179FFCh case    9:*/		return 0x8217A000;
		  /* 8217A000h */ case   10:  		/* bc 12, CR6_EQ, 56 */
		/* 8217A000h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217A038;  }
		/* 8217A000h case   10:*/		return 0x8217A004;
		  /* 8217A004h */ case   11:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217A004h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217A004h case   11:*/		return 0x8217A008;
		  /* 8217A008h */ case   12:  		/* lwz R9, <#[R27]> */
		/* 8217A008h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A008h case   12:*/		return 0x8217A00C;
		  /* 8217A00Ch */ case   13:  		/* addi R10, R27, -36 */
		/* 8217A00Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xFFFFFFDC);
		/* 8217A00Ch case   13:*/		return 0x8217A010;
		  /* 8217A010h */ case   14:  		/* addi R11, R11, 36 */
		/* 8217A010h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217A010h case   14:*/		return 0x8217A014;
		  /* 8217A014h */ case   15:  		/* ori R8, R10, 1 */
		/* 8217A014h case   15:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 8217A014h case   15:*/		return 0x8217A018;
		  /* 8217A018h */ case   16:  		/* addi R7, R11, -36 */
		/* 8217A018h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8217A018h case   16:*/		return 0x8217A01C;
		  /* 8217A01Ch */ case   17:  		/* addi R10, R11, 4 */
		/* 8217A01Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217A01Ch case   17:*/		return 0x8217A020;
		  /* 8217A020h */ case   18:  		/* stw R9, <#[R11]> */
		/* 8217A020h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A020h case   18:*/		return 0x8217A024;
		  /* 8217A024h */ case   19:  		/* lwz R9, <#[R27]> */
		/* 8217A024h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A024h case   19:*/		return 0x8217A028;
		  /* 8217A028h */ case   20:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217A028h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217A028h case   20:*/		return 0x8217A02C;
		  /* 8217A02Ch */ case   21:  		/* stw R7, <#[R9]> */
		/* 8217A02Ch case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 8217A02Ch case   21:*/		return 0x8217A030;
		  /* 8217A030h */ case   22:  		/* stw R8, <#[R11 + 4]> */
		/* 8217A030h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217A030h case   22:*/		return 0x8217A034;
		  /* 8217A034h */ case   23:  		/* stw R10, <#[R27]> */
		/* 8217A034h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A034h case   23:*/		return 0x8217A038;
	}
	return 0x8217A038;
} // Block from 82179FD8h-8217A038h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8217A038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A038);
		  /* 8217A038h */ case    0:  		/* mr R3, R31 */
		/* 8217A038h case    0:*/		regs.R3 = regs.R31;
		/* 8217A038h case    0:*/		return 0x8217A03C;
		  /* 8217A03Ch */ case    1:  		/* addi R1, R1, 144 */
		/* 8217A03Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217A03Ch case    1:*/		return 0x8217A040;
		  /* 8217A040h */ case    2:  		/* b -953760 */
		/* 8217A040h case    2:*/		return 0x820912A0;
		/* 8217A040h case    2:*/		return 0x8217A044;
		  /* 8217A044h */ case    3:  		/* nop */
		/* 8217A044h case    3:*/		cpu::op::nop();
		/* 8217A044h case    3:*/		return 0x8217A048;
	}
	return 0x8217A048;
} // Block from 8217A038h-8217A048h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217A048h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A048( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A048) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A048);
		  /* 8217A048h */ case    0:  		/* mfspr R12, LR */
		/* 8217A048h case    0:*/		regs.R12 = regs.LR;
		/* 8217A048h case    0:*/		return 0x8217A04C;
		  /* 8217A04Ch */ case    1:  		/* bl -953852 */
		/* 8217A04Ch case    1:*/		regs.LR = 0x8217A050; return 0x82091250;
		/* 8217A04Ch case    1:*/		return 0x8217A050;
		  /* 8217A050h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8217A050h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8217A050h case    2:*/		return 0x8217A054;
		  /* 8217A054h */ case    3:  		/* mr R27, R5 */
		/* 8217A054h case    3:*/		regs.R27 = regs.R5;
		/* 8217A054h case    3:*/		return 0x8217A058;
		  /* 8217A058h */ case    4:  		/* mr R30, R6 */
		/* 8217A058h case    4:*/		regs.R30 = regs.R6;
		/* 8217A058h case    4:*/		return 0x8217A05C;
		  /* 8217A05Ch */ case    5:  		/* mr R29, R7 */
		/* 8217A05Ch case    5:*/		regs.R29 = regs.R7;
		/* 8217A05Ch case    5:*/		return 0x8217A060;
		  /* 8217A060h */ case    6:  		/* mr R26, R8 */
		/* 8217A060h case    6:*/		regs.R26 = regs.R8;
		/* 8217A060h case    6:*/		return 0x8217A064;
		  /* 8217A064h */ case    7:  		/* li R8, 4 */
		/* 8217A064h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8217A064h case    7:*/		return 0x8217A068;
		  /* 8217A068h */ case    8:  		/* li R7, 3 */
		/* 8217A068h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8217A068h case    8:*/		return 0x8217A06C;
		  /* 8217A06Ch */ case    9:  		/* li R6, 14 */
		/* 8217A06Ch case    9:*/		cpu::op::li<0>(regs,&regs.R6,0xE);
		/* 8217A06Ch case    9:*/		return 0x8217A070;
		  /* 8217A070h */ case   10:  		/* li R5, 0 */
		/* 8217A070h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217A070h case   10:*/		return 0x8217A074;
		  /* 8217A074h */ case   11:  		/* mr R28, R3 */
		/* 8217A074h case   11:*/		regs.R28 = regs.R3;
		/* 8217A074h case   11:*/		return 0x8217A078;
		  /* 8217A078h */ case   12:  		/* bl 698656 */
		/* 8217A078h case   12:*/		regs.LR = 0x8217A07C; return 0x82224998;
		/* 8217A078h case   12:*/		return 0x8217A07C;
		  /* 8217A07Ch */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 8217A07Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8217A07Ch case   13:*/		return 0x8217A080;
		  /* 8217A080h */ case   14:  		/* mr R31, R3 */
		/* 8217A080h case   14:*/		regs.R31 = regs.R3;
		/* 8217A080h case   14:*/		return 0x8217A084;
		  /* 8217A084h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8217A084h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A084h case   15:*/		return 0x8217A088;
		  /* 8217A088h */ case   16:  		/* mr R4, R30 */
		/* 8217A088h case   16:*/		regs.R4 = regs.R30;
		/* 8217A088h case   16:*/		return 0x8217A08C;
		  /* 8217A08Ch */ case   17:  		/* bc 12, CR6_EQ, 20 */
		/* 8217A08Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8217A0A0;  }
		/* 8217A08Ch case   17:*/		return 0x8217A090;
		  /* 8217A090h */ case   18:  		/* mr R3, R28 */
		/* 8217A090h case   18:*/		regs.R3 = regs.R28;
		/* 8217A090h case   18:*/		return 0x8217A094;
		  /* 8217A094h */ case   19:  		/* lwz R5, <#[R30 + 12]> */
		/* 8217A094h case   19:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 8217A094h case   19:*/		return 0x8217A098;
		  /* 8217A098h */ case   20:  		/* bl -36776 */
		/* 8217A098h case   20:*/		regs.LR = 0x8217A09C; return 0x821710F0;
		/* 8217A098h case   20:*/		return 0x8217A09C;
		  /* 8217A09Ch */ case   21:  		/* mr R4, R3 */
		/* 8217A09Ch case   21:*/		regs.R4 = regs.R3;
		/* 8217A09Ch case   21:*/		return 0x8217A0A0;
	}
	return 0x8217A0A0;
} // Block from 8217A048h-8217A0A0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217A0A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A0A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A0A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A0A0);
		  /* 8217A0A0h */ case    0:  		/* mr R3, R31 */
		/* 8217A0A0h case    0:*/		regs.R3 = regs.R31;
		/* 8217A0A0h case    0:*/		return 0x8217A0A4;
		  /* 8217A0A4h */ case    1:  		/* bl -7900 */
		/* 8217A0A4h case    1:*/		regs.LR = 0x8217A0A8; return 0x821781C8;
		/* 8217A0A4h case    1:*/		return 0x8217A0A8;
		  /* 8217A0A8h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 8217A0A8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217A0A8h case    2:*/		return 0x8217A0AC;
		  /* 8217A0ACh */ case    3:  		/* lwz R11, <#[R29 + 16]> */
		/* 8217A0ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8217A0ACh case    3:*/		return 0x8217A0B0;
		  /* 8217A0B0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217A0B0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A0B0h case    4:*/		return 0x8217A0B4;
		  /* 8217A0B4h */ case    5:  		/* mr R4, R29 */
		/* 8217A0B4h case    5:*/		regs.R4 = regs.R29;
		/* 8217A0B4h case    5:*/		return 0x8217A0B8;
		  /* 8217A0B8h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8217A0B8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217A0CC;  }
		/* 8217A0B8h case    6:*/		return 0x8217A0BC;
		  /* 8217A0BCh */ case    7:  		/* mr R3, R28 */
		/* 8217A0BCh case    7:*/		regs.R3 = regs.R28;
		/* 8217A0BCh case    7:*/		return 0x8217A0C0;
		  /* 8217A0C0h */ case    8:  		/* lwz R5, <#[R29 + 12]> */
		/* 8217A0C0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8217A0C0h case    8:*/		return 0x8217A0C4;
		  /* 8217A0C4h */ case    9:  		/* bl -36820 */
		/* 8217A0C4h case    9:*/		regs.LR = 0x8217A0C8; return 0x821710F0;
		/* 8217A0C4h case    9:*/		return 0x8217A0C8;
		  /* 8217A0C8h */ case   10:  		/* mr R4, R3 */
		/* 8217A0C8h case   10:*/		regs.R4 = regs.R3;
		/* 8217A0C8h case   10:*/		return 0x8217A0CC;
	}
	return 0x8217A0CC;
} // Block from 8217A0A0h-8217A0CCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217A0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A0CC);
		  /* 8217A0CCh */ case    0:  		/* mr R3, R31 */
		/* 8217A0CCh case    0:*/		regs.R3 = regs.R31;
		/* 8217A0CCh case    0:*/		return 0x8217A0D0;
		  /* 8217A0D0h */ case    1:  		/* bl -7944 */
		/* 8217A0D0h case    1:*/		regs.LR = 0x8217A0D4; return 0x821781C8;
		/* 8217A0D0h case    1:*/		return 0x8217A0D4;
		  /* 8217A0D4h */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 8217A0D4h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8217A0D4h case    2:*/		return 0x8217A0D8;
		  /* 8217A0D8h */ case    3:  		/* lwz R11, <#[R26 + 16]> */
		/* 8217A0D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 8217A0D8h case    3:*/		return 0x8217A0DC;
		  /* 8217A0DCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217A0DCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A0DCh case    4:*/		return 0x8217A0E0;
		  /* 8217A0E0h */ case    5:  		/* mr R4, R26 */
		/* 8217A0E0h case    5:*/		regs.R4 = regs.R26;
		/* 8217A0E0h case    5:*/		return 0x8217A0E4;
		  /* 8217A0E4h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8217A0E4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217A0F8;  }
		/* 8217A0E4h case    6:*/		return 0x8217A0E8;
		  /* 8217A0E8h */ case    7:  		/* mr R3, R28 */
		/* 8217A0E8h case    7:*/		regs.R3 = regs.R28;
		/* 8217A0E8h case    7:*/		return 0x8217A0EC;
		  /* 8217A0ECh */ case    8:  		/* lwz R5, <#[R26 + 12]> */
		/* 8217A0ECh case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 8217A0ECh case    8:*/		return 0x8217A0F0;
		  /* 8217A0F0h */ case    9:  		/* bl -36864 */
		/* 8217A0F0h case    9:*/		regs.LR = 0x8217A0F4; return 0x821710F0;
		/* 8217A0F0h case    9:*/		return 0x8217A0F4;
		  /* 8217A0F4h */ case   10:  		/* mr R4, R3 */
		/* 8217A0F4h case   10:*/		regs.R4 = regs.R3;
		/* 8217A0F4h case   10:*/		return 0x8217A0F8;
	}
	return 0x8217A0F8;
} // Block from 8217A0CCh-8217A0F8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217A0F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A0F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A0F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A0F8);
		  /* 8217A0F8h */ case    0:  		/* mr R3, R31 */
		/* 8217A0F8h case    0:*/		regs.R3 = regs.R31;
		/* 8217A0F8h case    0:*/		return 0x8217A0FC;
		  /* 8217A0FCh */ case    1:  		/* bl -7988 */
		/* 8217A0FCh case    1:*/		regs.LR = 0x8217A100; return 0x821781C8;
		/* 8217A0FCh case    1:*/		return 0x8217A100;
		  /* 8217A100h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 8217A100h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217A100h case    2:*/		return 0x8217A104;
		  /* 8217A104h */ case    3:  		/* stw R3, <#[R31 + 52]> */
		/* 8217A104h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8217A104h case    3:*/		return 0x8217A108;
		  /* 8217A108h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 8217A108h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8217A108h case    4:*/		return 0x8217A10C;
		  /* 8217A10Ch */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217A10Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217A10Ch case    5:*/		return 0x8217A110;
		  /* 8217A110h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 8217A110h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A110h case    6:*/		return 0x8217A114;
		  /* 8217A114h */ case    7:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 8217A114h case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 8217A114h case    7:*/		return 0x8217A118;
		  /* 8217A118h */ case    8:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 8217A118h case    8:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 8217A118h case    8:*/		return 0x8217A11C;
		  /* 8217A11Ch */ case    9:  		/* stw R10, <#[R31 + 8]> */
		/* 8217A11Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217A11Ch case    9:*/		return 0x8217A120;
		  /* 8217A120h */ case   10:  		/* bc 12, CR6_EQ, 56 */
		/* 8217A120h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217A158;  }
		/* 8217A120h case   10:*/		return 0x8217A124;
		  /* 8217A124h */ case   11:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217A124h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217A124h case   11:*/		return 0x8217A128;
		  /* 8217A128h */ case   12:  		/* lwz R9, <#[R27]> */
		/* 8217A128h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A128h case   12:*/		return 0x8217A12C;
		  /* 8217A12Ch */ case   13:  		/* addi R10, R27, -36 */
		/* 8217A12Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xFFFFFFDC);
		/* 8217A12Ch case   13:*/		return 0x8217A130;
		  /* 8217A130h */ case   14:  		/* addi R11, R11, 36 */
		/* 8217A130h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217A130h case   14:*/		return 0x8217A134;
		  /* 8217A134h */ case   15:  		/* ori R8, R10, 1 */
		/* 8217A134h case   15:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 8217A134h case   15:*/		return 0x8217A138;
		  /* 8217A138h */ case   16:  		/* addi R7, R11, -36 */
		/* 8217A138h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8217A138h case   16:*/		return 0x8217A13C;
		  /* 8217A13Ch */ case   17:  		/* addi R10, R11, 4 */
		/* 8217A13Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217A13Ch case   17:*/		return 0x8217A140;
		  /* 8217A140h */ case   18:  		/* stw R9, <#[R11]> */
		/* 8217A140h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A140h case   18:*/		return 0x8217A144;
		  /* 8217A144h */ case   19:  		/* lwz R9, <#[R27]> */
		/* 8217A144h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A144h case   19:*/		return 0x8217A148;
		  /* 8217A148h */ case   20:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217A148h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217A148h case   20:*/		return 0x8217A14C;
		  /* 8217A14Ch */ case   21:  		/* stw R7, <#[R9]> */
		/* 8217A14Ch case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 8217A14Ch case   21:*/		return 0x8217A150;
		  /* 8217A150h */ case   22:  		/* stw R8, <#[R11 + 4]> */
		/* 8217A150h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217A150h case   22:*/		return 0x8217A154;
		  /* 8217A154h */ case   23:  		/* stw R10, <#[R27]> */
		/* 8217A154h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A154h case   23:*/		return 0x8217A158;
	}
	return 0x8217A158;
} // Block from 8217A0F8h-8217A158h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8217A158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A158);
		  /* 8217A158h */ case    0:  		/* mr R3, R31 */
		/* 8217A158h case    0:*/		regs.R3 = regs.R31;
		/* 8217A158h case    0:*/		return 0x8217A15C;
		  /* 8217A15Ch */ case    1:  		/* addi R1, R1, 144 */
		/* 8217A15Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217A15Ch case    1:*/		return 0x8217A160;
		  /* 8217A160h */ case    2:  		/* b -954048 */
		/* 8217A160h case    2:*/		return 0x820912A0;
		/* 8217A160h case    2:*/		return 0x8217A164;
		  /* 8217A164h */ case    3:  		/* nop */
		/* 8217A164h case    3:*/		cpu::op::nop();
		/* 8217A164h case    3:*/		return 0x8217A168;
	}
	return 0x8217A168;
} // Block from 8217A158h-8217A168h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217A168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A168);
		  /* 8217A168h */ case    0:  		/* mfspr R12, LR */
		/* 8217A168h case    0:*/		regs.R12 = regs.LR;
		/* 8217A168h case    0:*/		return 0x8217A16C;
		  /* 8217A16Ch */ case    1:  		/* bl -954140 */
		/* 8217A16Ch case    1:*/		regs.LR = 0x8217A170; return 0x82091250;
		/* 8217A16Ch case    1:*/		return 0x8217A170;
	}
	return 0x8217A170;
} // Block from 8217A168h-8217A170h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A170h
// Function '?ConvertBlocksToConditionalExecute@Compiler@D3DXShader@@AAAXPAVBlock@2@00_N1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A170);
		  /* 8217A170h */ case    0:  		/* stwu R1, <#[R1 - 144]> */
		/* 8217A170h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8217A170h case    0:*/		return 0x8217A174;
		  /* 8217A174h */ case    1:  		/* mr R27, R5 */
		/* 8217A174h case    1:*/		regs.R27 = regs.R5;
		/* 8217A174h case    1:*/		return 0x8217A178;
		  /* 8217A178h */ case    2:  		/* mr R30, R6 */
		/* 8217A178h case    2:*/		regs.R30 = regs.R6;
		/* 8217A178h case    2:*/		return 0x8217A17C;
		  /* 8217A17Ch */ case    3:  		/* mr R29, R7 */
		/* 8217A17Ch case    3:*/		regs.R29 = regs.R7;
		/* 8217A17Ch case    3:*/		return 0x8217A180;
		  /* 8217A180h */ case    4:  		/* mr R26, R8 */
		/* 8217A180h case    4:*/		regs.R26 = regs.R8;
		/* 8217A180h case    4:*/		return 0x8217A184;
		  /* 8217A184h */ case    5:  		/* li R8, 4 */
		/* 8217A184h case    5:*/		cpu::op::li<0>(regs,&regs.R8,0x4);
		/* 8217A184h case    5:*/		return 0x8217A188;
		  /* 8217A188h */ case    6:  		/* li R7, 3 */
		/* 8217A188h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 8217A188h case    6:*/		return 0x8217A18C;
		  /* 8217A18Ch */ case    7:  		/* li R6, 15 */
		/* 8217A18Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0xF);
		/* 8217A18Ch case    7:*/		return 0x8217A190;
		  /* 8217A190h */ case    8:  		/* li R5, 0 */
		/* 8217A190h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217A190h case    8:*/		return 0x8217A194;
		  /* 8217A194h */ case    9:  		/* mr R28, R3 */
		/* 8217A194h case    9:*/		regs.R28 = regs.R3;
		/* 8217A194h case    9:*/		return 0x8217A198;
		  /* 8217A198h */ case   10:  		/* bl 698368 */
		/* 8217A198h case   10:*/		regs.LR = 0x8217A19C; return 0x82224998;
		/* 8217A198h case   10:*/		return 0x8217A19C;
		  /* 8217A19Ch */ case   11:  		/* lwz R11, <#[R30 + 16]> */
		/* 8217A19Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 8217A19Ch case   11:*/		return 0x8217A1A0;
		  /* 8217A1A0h */ case   12:  		/* mr R31, R3 */
		/* 8217A1A0h case   12:*/		regs.R31 = regs.R3;
		/* 8217A1A0h case   12:*/		return 0x8217A1A4;
		  /* 8217A1A4h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 8217A1A4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A1A4h case   13:*/		return 0x8217A1A8;
		  /* 8217A1A8h */ case   14:  		/* mr R4, R30 */
		/* 8217A1A8h case   14:*/		regs.R4 = regs.R30;
		/* 8217A1A8h case   14:*/		return 0x8217A1AC;
		  /* 8217A1ACh */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 8217A1ACh case   15:*/		if ( regs.CR[6].eq ) { return 0x8217A1C0;  }
		/* 8217A1ACh case   15:*/		return 0x8217A1B0;
		  /* 8217A1B0h */ case   16:  		/* mr R3, R28 */
		/* 8217A1B0h case   16:*/		regs.R3 = regs.R28;
		/* 8217A1B0h case   16:*/		return 0x8217A1B4;
		  /* 8217A1B4h */ case   17:  		/* lwz R5, <#[R30 + 12]> */
		/* 8217A1B4h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x0000000C) );
		/* 8217A1B4h case   17:*/		return 0x8217A1B8;
		  /* 8217A1B8h */ case   18:  		/* bl -37064 */
		/* 8217A1B8h case   18:*/		regs.LR = 0x8217A1BC; return 0x821710F0;
		/* 8217A1B8h case   18:*/		return 0x8217A1BC;
		  /* 8217A1BCh */ case   19:  		/* mr R4, R3 */
		/* 8217A1BCh case   19:*/		regs.R4 = regs.R3;
		/* 8217A1BCh case   19:*/		return 0x8217A1C0;
	}
	return 0x8217A1C0;
} // Block from 8217A170h-8217A1C0h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8217A1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A1C0);
		  /* 8217A1C0h */ case    0:  		/* mr R3, R31 */
		/* 8217A1C0h case    0:*/		regs.R3 = regs.R31;
		/* 8217A1C0h case    0:*/		return 0x8217A1C4;
		  /* 8217A1C4h */ case    1:  		/* bl -8188 */
		/* 8217A1C4h case    1:*/		regs.LR = 0x8217A1C8; return 0x821781C8;
		/* 8217A1C4h case    1:*/		return 0x8217A1C8;
		  /* 8217A1C8h */ case    2:  		/* stw R3, <#[R31 + 44]> */
		/* 8217A1C8h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217A1C8h case    2:*/		return 0x8217A1CC;
		  /* 8217A1CCh */ case    3:  		/* lwz R11, <#[R29 + 16]> */
		/* 8217A1CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8217A1CCh case    3:*/		return 0x8217A1D0;
		  /* 8217A1D0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217A1D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A1D0h case    4:*/		return 0x8217A1D4;
		  /* 8217A1D4h */ case    5:  		/* mr R4, R29 */
		/* 8217A1D4h case    5:*/		regs.R4 = regs.R29;
		/* 8217A1D4h case    5:*/		return 0x8217A1D8;
		  /* 8217A1D8h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8217A1D8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217A1EC;  }
		/* 8217A1D8h case    6:*/		return 0x8217A1DC;
		  /* 8217A1DCh */ case    7:  		/* mr R3, R28 */
		/* 8217A1DCh case    7:*/		regs.R3 = regs.R28;
		/* 8217A1DCh case    7:*/		return 0x8217A1E0;
		  /* 8217A1E0h */ case    8:  		/* lwz R5, <#[R29 + 12]> */
		/* 8217A1E0h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8217A1E0h case    8:*/		return 0x8217A1E4;
		  /* 8217A1E4h */ case    9:  		/* bl -37108 */
		/* 8217A1E4h case    9:*/		regs.LR = 0x8217A1E8; return 0x821710F0;
		/* 8217A1E4h case    9:*/		return 0x8217A1E8;
		  /* 8217A1E8h */ case   10:  		/* mr R4, R3 */
		/* 8217A1E8h case   10:*/		regs.R4 = regs.R3;
		/* 8217A1E8h case   10:*/		return 0x8217A1EC;
	}
	return 0x8217A1EC;
} // Block from 8217A1C0h-8217A1ECh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217A1ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A1EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A1EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A1EC);
		  /* 8217A1ECh */ case    0:  		/* mr R3, R31 */
		/* 8217A1ECh case    0:*/		regs.R3 = regs.R31;
		/* 8217A1ECh case    0:*/		return 0x8217A1F0;
		  /* 8217A1F0h */ case    1:  		/* bl -8232 */
		/* 8217A1F0h case    1:*/		regs.LR = 0x8217A1F4; return 0x821781C8;
		/* 8217A1F0h case    1:*/		return 0x8217A1F4;
		  /* 8217A1F4h */ case    2:  		/* stw R3, <#[R31 + 48]> */
		/* 8217A1F4h case    2:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8217A1F4h case    2:*/		return 0x8217A1F8;
		  /* 8217A1F8h */ case    3:  		/* lwz R11, <#[R26 + 16]> */
		/* 8217A1F8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000010) );
		/* 8217A1F8h case    3:*/		return 0x8217A1FC;
		  /* 8217A1FCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217A1FCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A1FCh case    4:*/		return 0x8217A200;
		  /* 8217A200h */ case    5:  		/* mr R4, R26 */
		/* 8217A200h case    5:*/		regs.R4 = regs.R26;
		/* 8217A200h case    5:*/		return 0x8217A204;
		  /* 8217A204h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8217A204h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217A218;  }
		/* 8217A204h case    6:*/		return 0x8217A208;
		  /* 8217A208h */ case    7:  		/* mr R3, R28 */
		/* 8217A208h case    7:*/		regs.R3 = regs.R28;
		/* 8217A208h case    7:*/		return 0x8217A20C;
		  /* 8217A20Ch */ case    8:  		/* lwz R5, <#[R26 + 12]> */
		/* 8217A20Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 8217A20Ch case    8:*/		return 0x8217A210;
		  /* 8217A210h */ case    9:  		/* bl -37152 */
		/* 8217A210h case    9:*/		regs.LR = 0x8217A214; return 0x821710F0;
		/* 8217A210h case    9:*/		return 0x8217A214;
		  /* 8217A214h */ case   10:  		/* mr R4, R3 */
		/* 8217A214h case   10:*/		regs.R4 = regs.R3;
		/* 8217A214h case   10:*/		return 0x8217A218;
	}
	return 0x8217A218;
} // Block from 8217A1ECh-8217A218h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217A218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A218);
		  /* 8217A218h */ case    0:  		/* mr R3, R31 */
		/* 8217A218h case    0:*/		regs.R3 = regs.R31;
		/* 8217A218h case    0:*/		return 0x8217A21C;
		  /* 8217A21Ch */ case    1:  		/* bl -8276 */
		/* 8217A21Ch case    1:*/		regs.LR = 0x8217A220; return 0x821781C8;
		/* 8217A21Ch case    1:*/		return 0x8217A220;
		  /* 8217A220h */ case    2:  		/* lwz R11, <#[R31 + 44]> */
		/* 8217A220h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217A220h case    2:*/		return 0x8217A224;
		  /* 8217A224h */ case    3:  		/* stw R3, <#[R31 + 52]> */
		/* 8217A224h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000034) );
		/* 8217A224h case    3:*/		return 0x8217A228;
		  /* 8217A228h */ case    4:  		/* cmplwi CR6, R27, 0 */
		/* 8217A228h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8217A228h case    4:*/		return 0x8217A22C;
		  /* 8217A22Ch */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217A22Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217A22Ch case    5:*/		return 0x8217A230;
		  /* 8217A230h */ case    6:  		/* lwz R11, <#[R11]> */
		/* 8217A230h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A230h case    6:*/		return 0x8217A234;
		  /* 8217A234h */ case    7:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 8217A234h case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 8217A234h case    7:*/		return 0x8217A238;
		  /* 8217A238h */ case    8:  		/* rlwimi R10, R11, 14, 15, 17 */
		/* 8217A238h case    8:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R11);
		/* 8217A238h case    8:*/		return 0x8217A23C;
		  /* 8217A23Ch */ case    9:  		/* stw R10, <#[R31 + 8]> */
		/* 8217A23Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217A23Ch case    9:*/		return 0x8217A240;
		  /* 8217A240h */ case   10:  		/* bc 12, CR6_EQ, 56 */
		/* 8217A240h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217A278;  }
		/* 8217A240h case   10:*/		return 0x8217A244;
		  /* 8217A244h */ case   11:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217A244h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217A244h case   11:*/		return 0x8217A248;
		  /* 8217A248h */ case   12:  		/* lwz R9, <#[R27]> */
		/* 8217A248h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A248h case   12:*/		return 0x8217A24C;
		  /* 8217A24Ch */ case   13:  		/* addi R10, R27, -36 */
		/* 8217A24Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0xFFFFFFDC);
		/* 8217A24Ch case   13:*/		return 0x8217A250;
		  /* 8217A250h */ case   14:  		/* addi R11, R11, 36 */
		/* 8217A250h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217A250h case   14:*/		return 0x8217A254;
		  /* 8217A254h */ case   15:  		/* ori R8, R10, 1 */
		/* 8217A254h case   15:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 8217A254h case   15:*/		return 0x8217A258;
		  /* 8217A258h */ case   16:  		/* addi R7, R11, -36 */
		/* 8217A258h case   16:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8217A258h case   16:*/		return 0x8217A25C;
		  /* 8217A25Ch */ case   17:  		/* addi R10, R11, 4 */
		/* 8217A25Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217A25Ch case   17:*/		return 0x8217A260;
		  /* 8217A260h */ case   18:  		/* stw R9, <#[R11]> */
		/* 8217A260h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A260h case   18:*/		return 0x8217A264;
		  /* 8217A264h */ case   19:  		/* lwz R9, <#[R27]> */
		/* 8217A264h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A264h case   19:*/		return 0x8217A268;
		  /* 8217A268h */ case   20:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217A268h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217A268h case   20:*/		return 0x8217A26C;
		  /* 8217A26Ch */ case   21:  		/* stw R7, <#[R9]> */
		/* 8217A26Ch case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 8217A26Ch case   21:*/		return 0x8217A270;
		  /* 8217A270h */ case   22:  		/* stw R8, <#[R11 + 4]> */
		/* 8217A270h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217A270h case   22:*/		return 0x8217A274;
		  /* 8217A274h */ case   23:  		/* stw R10, <#[R27]> */
		/* 8217A274h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A274h case   23:*/		return 0x8217A278;
	}
	return 0x8217A278;
} // Block from 8217A218h-8217A278h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8217A278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A278);
		  /* 8217A278h */ case    0:  		/* mr R3, R31 */
		/* 8217A278h case    0:*/		regs.R3 = regs.R31;
		/* 8217A278h case    0:*/		return 0x8217A27C;
		  /* 8217A27Ch */ case    1:  		/* addi R1, R1, 144 */
		/* 8217A27Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217A27Ch case    1:*/		return 0x8217A280;
		  /* 8217A280h */ case    2:  		/* b -954336 */
		/* 8217A280h case    2:*/		return 0x820912A0;
		/* 8217A280h case    2:*/		return 0x8217A284;
		  /* 8217A284h */ case    3:  		/* nop */
		/* 8217A284h case    3:*/		cpu::op::nop();
		/* 8217A284h case    3:*/		return 0x8217A288;
	}
	return 0x8217A288;
} // Block from 8217A278h-8217A288h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217A288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A288);
		  /* 8217A288h */ case    0:  		/* mfspr R12, LR */
		/* 8217A288h case    0:*/		regs.R12 = regs.LR;
		/* 8217A288h case    0:*/		return 0x8217A28C;
		  /* 8217A28Ch */ case    1:  		/* bl -954420 */
		/* 8217A28Ch case    1:*/		regs.LR = 0x8217A290; return 0x82091258;
		/* 8217A28Ch case    1:*/		return 0x8217A290;
		  /* 8217A290h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8217A290h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8217A290h case    2:*/		return 0x8217A294;
		  /* 8217A294h */ case    3:  		/* mr R30, R4 */
		/* 8217A294h case    3:*/		regs.R30 = regs.R4;
		/* 8217A294h case    3:*/		return 0x8217A298;
		  /* 8217A298h */ case    4:  		/* lwz R4, <#[R5 + 28]> */
		/* 8217A298h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x0000001C) );
		/* 8217A298h case    4:*/		return 0x8217A29C;
		  /* 8217A29Ch */ case    5:  		/* mr R29, R5 */
		/* 8217A29Ch case    5:*/		regs.R29 = regs.R5;
		/* 8217A29Ch case    5:*/		return 0x8217A2A0;
		  /* 8217A2A0h */ case    6:  		/* li R8, 1 */
		/* 8217A2A0h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217A2A0h case    6:*/		return 0x8217A2A4;
		  /* 8217A2A4h */ case    7:  		/* li R7, 0 */
		/* 8217A2A4h case    7:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217A2A4h case    7:*/		return 0x8217A2A8;
		  /* 8217A2A8h */ case    8:  		/* li R6, 65 */
		/* 8217A2A8h case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x41);
		/* 8217A2A8h case    8:*/		return 0x8217A2AC;
		  /* 8217A2ACh */ case    9:  		/* li R5, 0 */
		/* 8217A2ACh case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217A2ACh case    9:*/		return 0x8217A2B0;
		  /* 8217A2B0h */ case   10:  		/* mr R31, R3 */
		/* 8217A2B0h case   10:*/		regs.R31 = regs.R3;
		/* 8217A2B0h case   10:*/		return 0x8217A2B4;
		  /* 8217A2B4h */ case   11:  		/* bl 698084 */
		/* 8217A2B4h case   11:*/		regs.LR = 0x8217A2B8; return 0x82224998;
		/* 8217A2B4h case   11:*/		return 0x8217A2B8;
		  /* 8217A2B8h */ case   12:  		/* mr R28, R3 */
		/* 8217A2B8h case   12:*/		regs.R28 = regs.R3;
		/* 8217A2B8h case   12:*/		return 0x8217A2BC;
		  /* 8217A2BCh */ case   13:  		/* mr R4, R3 */
		/* 8217A2BCh case   13:*/		regs.R4 = regs.R3;
		/* 8217A2BCh case   13:*/		return 0x8217A2C0;
		  /* 8217A2C0h */ case   14:  		/* mr R6, R29 */
		/* 8217A2C0h case   14:*/		regs.R6 = regs.R29;
		/* 8217A2C0h case   14:*/		return 0x8217A2C4;
		  /* 8217A2C4h */ case   15:  		/* mr R5, R30 */
		/* 8217A2C4h case   15:*/		regs.R5 = regs.R30;
		/* 8217A2C4h case   15:*/		return 0x8217A2C8;
		  /* 8217A2C8h */ case   16:  		/* mr R3, R31 */
		/* 8217A2C8h case   16:*/		regs.R3 = regs.R31;
		/* 8217A2C8h case   16:*/		return 0x8217A2CC;
		  /* 8217A2CCh */ case   17:  		/* bl -54308 */
		/* 8217A2CCh case   17:*/		regs.LR = 0x8217A2D0; return 0x8216CEA8;
		/* 8217A2CCh case   17:*/		return 0x8217A2D0;
		  /* 8217A2D0h */ case   18:  		/* mr R3, R28 */
		/* 8217A2D0h case   18:*/		regs.R3 = regs.R28;
		/* 8217A2D0h case   18:*/		return 0x8217A2D4;
		  /* 8217A2D4h */ case   19:  		/* addi R1, R1, 128 */
		/* 8217A2D4h case   19:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217A2D4h case   19:*/		return 0x8217A2D8;
		  /* 8217A2D8h */ case   20:  		/* b -954416 */
		/* 8217A2D8h case   20:*/		return 0x820912A8;
		/* 8217A2D8h case   20:*/		return 0x8217A2DC;
		  /* 8217A2DCh */ case   21:  		/* nop */
		/* 8217A2DCh case   21:*/		cpu::op::nop();
		/* 8217A2DCh case   21:*/		return 0x8217A2E0;
	}
	return 0x8217A2E0;
} // Block from 8217A288h-8217A2E0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217A2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A2E0);
		  /* 8217A2E0h */ case    0:  		/* mfspr R12, LR */
		/* 8217A2E0h case    0:*/		regs.R12 = regs.LR;
		/* 8217A2E0h case    0:*/		return 0x8217A2E4;
		  /* 8217A2E4h */ case    1:  		/* bl -954508 */
		/* 8217A2E4h case    1:*/		regs.LR = 0x8217A2E8; return 0x82091258;
		/* 8217A2E4h case    1:*/		return 0x8217A2E8;
		  /* 8217A2E8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8217A2E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8217A2E8h case    2:*/		return 0x8217A2EC;
		  /* 8217A2ECh */ case    3:  		/* mr R29, R5 */
		/* 8217A2ECh case    3:*/		regs.R29 = regs.R5;
		/* 8217A2ECh case    3:*/		return 0x8217A2F0;
		  /* 8217A2F0h */ case    4:  		/* li R8, 1 */
		/* 8217A2F0h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217A2F0h case    4:*/		return 0x8217A2F4;
		  /* 8217A2F4h */ case    5:  		/* li R7, 1 */
		/* 8217A2F4h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8217A2F4h case    5:*/		return 0x8217A2F8;
		  /* 8217A2F8h */ case    6:  		/* li R6, 66 */
		/* 8217A2F8h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x42);
		/* 8217A2F8h case    6:*/		return 0x8217A2FC;
		  /* 8217A2FCh */ case    7:  		/* li R5, 0 */
		/* 8217A2FCh case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217A2FCh case    7:*/		return 0x8217A300;
		  /* 8217A300h */ case    8:  		/* mr R28, R3 */
		/* 8217A300h case    8:*/		regs.R28 = regs.R3;
		/* 8217A300h case    8:*/		return 0x8217A304;
		  /* 8217A304h */ case    9:  		/* mr R31, R4 */
		/* 8217A304h case    9:*/		regs.R31 = regs.R4;
		/* 8217A304h case    9:*/		return 0x8217A308;
		  /* 8217A308h */ case   10:  		/* bl 698000 */
		/* 8217A308h case   10:*/		regs.LR = 0x8217A30C; return 0x82224998;
		/* 8217A308h case   10:*/		return 0x8217A30C;
		  /* 8217A30Ch */ case   11:  		/* lwz R11, <#[R29 + 16]> */
		/* 8217A30Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 8217A30Ch case   11:*/		return 0x8217A310;
		  /* 8217A310h */ case   12:  		/* mr R30, R3 */
		/* 8217A310h case   12:*/		regs.R30 = regs.R3;
		/* 8217A310h case   12:*/		return 0x8217A314;
		  /* 8217A314h */ case   13:  		/* mr R4, R29 */
		/* 8217A314h case   13:*/		regs.R4 = regs.R29;
		/* 8217A314h case   13:*/		return 0x8217A318;
		  /* 8217A318h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 8217A318h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A318h case   14:*/		return 0x8217A31C;
		  /* 8217A31Ch */ case   15:  		/* bc 12, CR6_EQ, 20 */
		/* 8217A31Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8217A330;  }
		/* 8217A31Ch case   15:*/		return 0x8217A320;
		  /* 8217A320h */ case   16:  		/* mr R3, R28 */
		/* 8217A320h case   16:*/		regs.R3 = regs.R28;
		/* 8217A320h case   16:*/		return 0x8217A324;
		  /* 8217A324h */ case   17:  		/* lwz R5, <#[R29 + 12]> */
		/* 8217A324h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 8217A324h case   17:*/		return 0x8217A328;
		  /* 8217A328h */ case   18:  		/* bl -37432 */
		/* 8217A328h case   18:*/		regs.LR = 0x8217A32C; return 0x821710F0;
		/* 8217A328h case   18:*/		return 0x8217A32C;
		  /* 8217A32Ch */ case   19:  		/* mr R4, R3 */
		/* 8217A32Ch case   19:*/		regs.R4 = regs.R3;
		/* 8217A32Ch case   19:*/		return 0x8217A330;
	}
	return 0x8217A330;
} // Block from 8217A2E0h-8217A330h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8217A330h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A330( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A330) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A330);
		  /* 8217A330h */ case    0:  		/* mr R3, R30 */
		/* 8217A330h case    0:*/		regs.R3 = regs.R30;
		/* 8217A330h case    0:*/		return 0x8217A334;
		  /* 8217A334h */ case    1:  		/* bl -8556 */
		/* 8217A334h case    1:*/		regs.LR = 0x8217A338; return 0x821781C8;
		/* 8217A334h case    1:*/		return 0x8217A338;
		  /* 8217A338h */ case    2:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217A338h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217A338h case    2:*/		return 0x8217A33C;
		  /* 8217A33Ch */ case    3:  		/* stw R3, <#[R30 + 44]> */
		/* 8217A33Ch case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 8217A33Ch case    3:*/		return 0x8217A340;
		  /* 8217A340h */ case    4:  		/* addi R10, R31, 24 */
		/* 8217A340h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x18);
		/* 8217A340h case    4:*/		return 0x8217A344;
		  /* 8217A344h */ case    5:  		/* lwz R9, <#[R31 + 24]> */
		/* 8217A344h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 8217A344h case    5:*/		return 0x8217A348;
		  /* 8217A348h */ case    6:  		/* addi R11, R11, 36 */
		/* 8217A348h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217A348h case    6:*/		return 0x8217A34C;
		  /* 8217A34Ch */ case    7:  		/* stw R9, <#[R11]> */
		/* 8217A34Ch case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A34Ch case    7:*/		return 0x8217A350;
		  /* 8217A350h */ case    8:  		/* addi R10, R10, -36 */
		/* 8217A350h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 8217A350h case    8:*/		return 0x8217A354;
		  /* 8217A354h */ case    9:  		/* lwz R9, <#[R31 + 24]> */
		/* 8217A354h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000018) );
		/* 8217A354h case    9:*/		return 0x8217A358;
		  /* 8217A358h */ case   10:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217A358h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217A358h case   10:*/		return 0x8217A35C;
		  /* 8217A35Ch */ case   11:  		/* addi R8, R11, -36 */
		/* 8217A35Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 8217A35Ch case   11:*/		return 0x8217A360;
		  /* 8217A360h */ case   12:  		/* ori R7, R10, 1 */
		/* 8217A360h case   12:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R10,0x1);
		/* 8217A360h case   12:*/		return 0x8217A364;
		  /* 8217A364h */ case   13:  		/* addi R10, R11, 4 */
		/* 8217A364h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217A364h case   13:*/		return 0x8217A368;
		  /* 8217A368h */ case   14:  		/* stw R8, <#[R9]> */
		/* 8217A368h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8217A368h case   14:*/		return 0x8217A36C;
		  /* 8217A36Ch */ case   15:  		/* stw R7, <#[R11 + 4]> */
		/* 8217A36Ch case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217A36Ch case   15:*/		return 0x8217A370;
		  /* 8217A370h */ case   16:  		/* mr R3, R30 */
		/* 8217A370h case   16:*/		regs.R3 = regs.R30;
		/* 8217A370h case   16:*/		return 0x8217A374;
		  /* 8217A374h */ case   17:  		/* stw R10, <#[R31 + 24]> */
		/* 8217A374h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8217A374h case   17:*/		return 0x8217A378;
		  /* 8217A378h */ case   18:  		/* addi R1, R1, 128 */
		/* 8217A378h case   18:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217A378h case   18:*/		return 0x8217A37C;
		  /* 8217A37Ch */ case   19:  		/* b -954580 */
		/* 8217A37Ch case   19:*/		return 0x820912A8;
		/* 8217A37Ch case   19:*/		return 0x8217A380;
	}
	return 0x8217A380;
} // Block from 8217A330h-8217A380h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8217A380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A380);
		  /* 8217A380h */ case    0:  		/* mfspr R12, LR */
		/* 8217A380h case    0:*/		regs.R12 = regs.LR;
		/* 8217A380h case    0:*/		return 0x8217A384;
		  /* 8217A384h */ case    1:  		/* bl -954684 */
		/* 8217A384h case    1:*/		regs.LR = 0x8217A388; return 0x82091248;
		/* 8217A384h case    1:*/		return 0x8217A388;
		  /* 8217A388h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8217A388h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8217A388h case    2:*/		return 0x8217A38C;
		  /* 8217A38Ch */ case    3:  		/* lwz R11, <#[R5 + 8]> */
		/* 8217A38Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8217A38Ch case    3:*/		return 0x8217A390;
		  /* 8217A390h */ case    4:  		/* mr R24, R3 */
		/* 8217A390h case    4:*/		regs.R24 = regs.R3;
		/* 8217A390h case    4:*/		return 0x8217A394;
		  /* 8217A394h */ case    5:  		/* mr R29, R4 */
		/* 8217A394h case    5:*/		regs.R29 = regs.R4;
		/* 8217A394h case    5:*/		return 0x8217A398;
		  /* 8217A398h */ case    6:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 8217A398h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 8217A398h case    6:*/		return 0x8217A39C;
		  /* 8217A39Ch */ case    7:  		/* mr R31, R5 */
		/* 8217A39Ch case    7:*/		regs.R31 = regs.R5;
		/* 8217A39Ch case    7:*/		return 0x8217A3A0;
		  /* 8217A3A0h */ case    8:  		/* mr R27, R6 */
		/* 8217A3A0h case    8:*/		regs.R27 = regs.R6;
		/* 8217A3A0h case    8:*/		return 0x8217A3A4;
		  /* 8217A3A4h */ case    9:  		/* mr R26, R7 */
		/* 8217A3A4h case    9:*/		regs.R26 = regs.R7;
		/* 8217A3A4h case    9:*/		return 0x8217A3A8;
		  /* 8217A3A8h */ case   10:  		/* mr R25, R8 */
		/* 8217A3A8h case   10:*/		regs.R25 = regs.R8;
		/* 8217A3A8h case   10:*/		return 0x8217A3AC;
		  /* 8217A3ACh */ case   11:  		/* cmplwi CR6, R10, 84 */
		/* 8217A3ACh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000054);
		/* 8217A3ACh case   11:*/		return 0x8217A3B0;
		  /* 8217A3B0h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 8217A3B0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8217A3BC;  }
		/* 8217A3B0h case   12:*/		return 0x8217A3B4;
		  /* 8217A3B4h */ case   13:  		/* li R3, 1 */
		/* 8217A3B4h case   13:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8217A3B4h case   13:*/		return 0x8217A3B8;
		  /* 8217A3B8h */ case   14:  		/* b 824 */
		/* 8217A3B8h case   14:*/		return 0x8217A6F0;
		/* 8217A3B8h case   14:*/		return 0x8217A3BC;
	}
	return 0x8217A3BC;
} // Block from 8217A380h-8217A3BCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217A3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A3BC);
		  /* 8217A3BCh */ case    0:  		/* cmplwi CR6, R10, 85 */
		/* 8217A3BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000055);
		/* 8217A3BCh case    0:*/		return 0x8217A3C0;
		  /* 8217A3C0h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8217A3C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217A3CC;  }
		/* 8217A3C0h case    1:*/		return 0x8217A3C4;
		  /* 8217A3C4h */ case    2:  		/* li R3, 2 */
		/* 8217A3C4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x2);
		/* 8217A3C4h case    2:*/		return 0x8217A3C8;
		  /* 8217A3C8h */ case    3:  		/* b 808 */
		/* 8217A3C8h case    3:*/		return 0x8217A6F0;
		/* 8217A3C8h case    3:*/		return 0x8217A3CC;
	}
	return 0x8217A3CC;
} // Block from 8217A3BCh-8217A3CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217A3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A3CC);
		  /* 8217A3CCh */ case    0:  		/* cmplwi CR6, R10, 90 */
		/* 8217A3CCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000005A);
		/* 8217A3CCh case    0:*/		return 0x8217A3D0;
		  /* 8217A3D0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 8217A3D0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217A3DC;  }
		/* 8217A3D0h case    1:*/		return 0x8217A3D4;
		  /* 8217A3D4h */ case    2:  		/* li R3, 0 */
		/* 8217A3D4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217A3D4h case    2:*/		return 0x8217A3D8;
		  /* 8217A3D8h */ case    3:  		/* b 792 */
		/* 8217A3D8h case    3:*/		return 0x8217A6F0;
		/* 8217A3D8h case    3:*/		return 0x8217A3DC;
	}
	return 0x8217A3DC;
} // Block from 8217A3CCh-8217A3DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217A3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A3DC);
		  /* 8217A3DCh */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217A3DCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217A3DCh case    0:*/		return 0x8217A3E0;
		  /* 8217A3E0h */ case    1:  		/* mr R3, R24 */
		/* 8217A3E0h case    1:*/		regs.R3 = regs.R24;
		/* 8217A3E0h case    1:*/		return 0x8217A3E4;
		  /* 8217A3E4h */ case    2:  		/* rlwinm R28, R11, 14, 31, 31 */
		/* 8217A3E4h case    2:*/		cpu::op::rlwinm<0,14,31,31>(regs,&regs.R28,regs.R11);
		/* 8217A3E4h case    2:*/		return 0x8217A3E8;
		  /* 8217A3E8h */ case    3:  		/* rlwinm R6, R10, 18, 29, 31 */
		/* 8217A3E8h case    3:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R10);
		/* 8217A3E8h case    3:*/		return 0x8217A3EC;
		  /* 8217A3ECh */ case    4:  		/* rlwinm R5, R10, 13, 29, 31 */
		/* 8217A3ECh case    4:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R10);
		/* 8217A3ECh case    4:*/		return 0x8217A3F0;
		  /* 8217A3F0h */ case    5:  		/* rlwinm R4, R10, 25, 25, 31 */
		/* 8217A3F0h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R10);
		/* 8217A3F0h case    5:*/		return 0x8217A3F4;
		  /* 8217A3F4h */ case    6:  		/* bl -90052 */
		/* 8217A3F4h case    6:*/		regs.LR = 0x8217A3F8; return 0x82164430;
		/* 8217A3F4h case    6:*/		return 0x8217A3F8;
		  /* 8217A3F8h */ case    7:  		/* addi R10, R31, -16 */
		/* 8217A3F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFF0);
		/* 8217A3F8h case    7:*/		return 0x8217A3FC;
		  /* 8217A3FCh */ case    8:  		/* lwz R11, <#[R29 + 12]> */
		/* 8217A3FCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 8217A3FCh case    8:*/		return 0x8217A400;
		  /* 8217A400h */ case    9:  		/* lwzx R31, <#[R3 + R10]> */
		/* 8217A400h case    9:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 8217A400h case    9:*/		return 0x8217A404;
		  /* 8217A404h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8217A404h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A404h case   10:*/		return 0x8217A408;
		  /* 8217A408h */ case   11:  		/* bc 12, CR6_EQ, 32 */
		/* 8217A408h case   11:*/		if ( regs.CR[6].eq ) { return 0x8217A428;  }
		/* 8217A408h case   11:*/		return 0x8217A40C;
		  /* 8217A40Ch */ case   12:  		/* lwz R30, <#[R11]> */
		/* 8217A40Ch case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A40Ch case   12:*/		return 0x8217A410;
		  /* 8217A410h */ case   13:  		/* cmplw CR6, R30, R31 */
		/* 8217A410h case   13:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R31);
		/* 8217A410h case   13:*/		return 0x8217A414;
		  /* 8217A414h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 8217A414h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8217A420;  }
		/* 8217A414h case   14:*/		return 0x8217A418;
		  /* 8217A418h */ case   15:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217A418h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217A418h case   15:*/		return 0x8217A41C;
		  /* 8217A41Ch */ case   16:  		/* b -24 */
		/* 8217A41Ch case   16:*/		return 0x8217A404;
		/* 8217A41Ch case   16:*/		return 0x8217A420;
	}
	return 0x8217A420;
} // Block from 8217A3DCh-8217A420h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8217A420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A420);
		  /* 8217A420h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8217A420h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217A420h case    0:*/		return 0x8217A424;
		  /* 8217A424h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8217A424h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217A434;  }
		/* 8217A424h case    1:*/		return 0x8217A428;
	}
	return 0x8217A428;
} // Block from 8217A420h-8217A428h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A428);
		  /* 8217A428h */ case    0:  		/* li R4, 4800 */
		/* 8217A428h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217A428h case    0:*/		return 0x8217A42C;
		  /* 8217A42Ch */ case    1:  		/* mr R3, R24 */
		/* 8217A42Ch case    1:*/		regs.R3 = regs.R24;
		/* 8217A42Ch case    1:*/		return 0x8217A430;
		  /* 8217A430h */ case    2:  		/* bl -165320 */
		/* 8217A430h case    2:*/		regs.LR = 0x8217A434; return 0x82151E68;
		/* 8217A430h case    2:*/		return 0x8217A434;
	}
	return 0x8217A434;
} // Block from 8217A428h-8217A434h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217A434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A434);
		  /* 8217A434h */ case    0:  		/* lwz R10, <#[R31 + 48]> */
		/* 8217A434h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 8217A434h case    0:*/		return 0x8217A438;
		  /* 8217A438h */ case    1:  		/* li R7, 1 */
		/* 8217A438h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8217A438h case    1:*/		return 0x8217A43C;
		  /* 8217A43Ch */ case    2:  		/* lwz R11, <#[R29 + 40]> */
		/* 8217A43Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 8217A43Ch case    2:*/		return 0x8217A440;
		  /* 8217A440h */ case    3:  		/* rlwinm R6, R10, 0, 13, 31 */
		/* 8217A440h case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R6,regs.R10);
		/* 8217A440h case    3:*/		return 0x8217A444;
		  /* 8217A444h */ case    4:  		/* rlwinm R10, R6, 27, 5, 31 */
		/* 8217A444h case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R6);
		/* 8217A444h case    4:*/		return 0x8217A448;
		  /* 8217A448h */ case    5:  		/* rlwinm R9, R6, 0, 27, 31 */
		/* 8217A448h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R6);
		/* 8217A448h case    5:*/		return 0x8217A44C;
		  /* 8217A44Ch */ case    6:  		/* addi R10, R10, 1 */
		/* 8217A44Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217A44Ch case    6:*/		return 0x8217A450;
	}
	return 0x8217A450;
} // Block from 8217A434h-8217A450h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217A450h
// Function '?CanUnpredicateBlock@Compiler@D3DXShader@@AAA_NPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A450);
		  /* 8217A450h */ case    0:  		/* slw R9, R7, R9 */
		/* 8217A450h case    0:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8217A450h case    0:*/		return 0x8217A454;
		  /* 8217A454h */ case    1:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8217A454h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8217A454h case    1:*/		return 0x8217A458;
		  /* 8217A458h */ case    2:  		/* lwzx R10, <#[R10 + R11]> */
		/* 8217A458h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8217A458h case    2:*/		return 0x8217A45C;
		  /* 8217A45Ch */ case    3:  		/* and. R10, R9, R10 */
		/* 8217A45Ch case    3:*/		cpu::op::and<1>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8217A45Ch case    3:*/		return 0x8217A460;
		  /* 8217A460h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 8217A460h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217A478;  }
		/* 8217A460h case    4:*/		return 0x8217A464;
		  /* 8217A464h */ case    5:  		/* stb R28, <#[R27]> */
		/* 8217A464h case    5:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A464h case    5:*/		return 0x8217A468;
		  /* 8217A468h */ case    6:  		/* li R3, 5 */
		/* 8217A468h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x5);
		/* 8217A468h case    6:*/		return 0x8217A46C;
		  /* 8217A46Ch */ case    7:  		/* stw R31, <#[R26]> */
		/* 8217A46Ch case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 8217A46Ch case    7:*/		return 0x8217A470;
		  /* 8217A470h */ case    8:  		/* stw R30, <#[R25]> */
		/* 8217A470h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R25 + 0x00000000) );
		/* 8217A470h case    8:*/		return 0x8217A474;
		  /* 8217A474h */ case    9:  		/* b 636 */
		/* 8217A474h case    9:*/		return 0x8217A6F0;
		/* 8217A474h case    9:*/		return 0x8217A478;
	}
	return 0x8217A478;
} // Block from 8217A450h-8217A478h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217A478h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A478( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A478) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A478);
		  /* 8217A478h */ case    0:  		/* lwz R10, <#[R30 + 48]> */
		/* 8217A478h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 8217A478h case    0:*/		return 0x8217A47C;
		  /* 8217A47Ch */ case    1:  		/* rlwinm R8, R10, 0, 13, 31 */
		/* 8217A47Ch case    1:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R10);
		/* 8217A47Ch case    1:*/		return 0x8217A480;
		  /* 8217A480h */ case    2:  		/* rlwinm R10, R8, 27, 5, 31 */
		/* 8217A480h case    2:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R8);
		/* 8217A480h case    2:*/		return 0x8217A484;
		  /* 8217A484h */ case    3:  		/* rlwinm R9, R8, 0, 27, 31 */
		/* 8217A484h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R8);
		/* 8217A484h case    3:*/		return 0x8217A488;
		  /* 8217A488h */ case    4:  		/* addi R10, R10, 1 */
		/* 8217A488h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217A488h case    4:*/		return 0x8217A48C;
		  /* 8217A48Ch */ case    5:  		/* slw R9, R7, R9 */
		/* 8217A48Ch case    5:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8217A48Ch case    5:*/		return 0x8217A490;
		  /* 8217A490h */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8217A490h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8217A490h case    6:*/		return 0x8217A494;
		  /* 8217A494h */ case    7:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8217A494h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8217A494h case    7:*/		return 0x8217A498;
		  /* 8217A498h */ case    8:  		/* and. R11, R9, R11 */
		/* 8217A498h case    8:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8217A498h case    8:*/		return 0x8217A49C;
		  /* 8217A49Ch */ case    9:  		/* bc 12, CR0_EQ, 36 */
		/* 8217A49Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8217A4C0;  }
		/* 8217A49Ch case    9:*/		return 0x8217A4A0;
		  /* 8217A4A0h */ case   10:  		/* li R3, 5 */
		/* 8217A4A0h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x5);
		/* 8217A4A0h case   10:*/		return 0x8217A4A4;
		  /* 8217A4A4h */ case   11:  		/* rlwinm R11, R28, 0, 24, 31 */
		/* 8217A4A4h case   11:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R28);
		/* 8217A4A4h case   11:*/		return 0x8217A4A8;
		  /* 8217A4A8h */ case   12:  		/* cntlzw R11, R11 */
		/* 8217A4A8h case   12:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8217A4A8h case   12:*/		return 0x8217A4AC;
		  /* 8217A4ACh */ case   13:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 8217A4ACh case   13:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8217A4ACh case   13:*/		return 0x8217A4B0;
		  /* 8217A4B0h */ case   14:  		/* stb R11, <#[R27]> */
		/* 8217A4B0h case   14:*/		cpu::mem::store8( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A4B0h case   14:*/		return 0x8217A4B4;
		  /* 8217A4B4h */ case   15:  		/* stw R30, <#[R26]> */
		/* 8217A4B4h case   15:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R26 + 0x00000000) );
		/* 8217A4B4h case   15:*/		return 0x8217A4B8;
		  /* 8217A4B8h */ case   16:  		/* stw R31, <#[R25]> */
		/* 8217A4B8h case   16:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 8217A4B8h case   16:*/		return 0x8217A4BC;
		  /* 8217A4BCh */ case   17:  		/* b 564 */
		/* 8217A4BCh case   17:*/		return 0x8217A6F0;
		/* 8217A4BCh case   17:*/		return 0x8217A4C0;
	}
	return 0x8217A4C0;
} // Block from 8217A478h-8217A4C0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8217A4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A4C0);
		  /* 8217A4C0h */ case    0:  		/* cmplw CR6, R29, R31 */
		/* 8217A4C0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R31);
		/* 8217A4C0h case    0:*/		return 0x8217A4C4;
		  /* 8217A4C4h */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8217A4C4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217A4F8;  }
		/* 8217A4C4h case    1:*/		return 0x8217A4C8;
		  /* 8217A4C8h */ case    2:  		/* lwz R11, <#[R29 + 48]> */
		/* 8217A4C8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8217A4C8h case    2:*/		return 0x8217A4CC;
		  /* 8217A4CCh */ case    3:  		/* lwz R10, <#[R31 + 40]> */
		/* 8217A4CCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8217A4CCh case    3:*/		return 0x8217A4D0;
		  /* 8217A4D0h */ case    4:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217A4D0h case    4:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217A4D0h case    4:*/		return 0x8217A4D4;
		  /* 8217A4D4h */ case    5:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8217A4D4h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8217A4D4h case    5:*/		return 0x8217A4D8;
		  /* 8217A4D8h */ case    6:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217A4D8h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217A4D8h case    6:*/		return 0x8217A4DC;
		  /* 8217A4DCh */ case    7:  		/* addi R11, R11, 1 */
		/* 8217A4DCh case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217A4DCh case    7:*/		return 0x8217A4E0;
		  /* 8217A4E0h */ case    8:  		/* slw R9, R7, R9 */
		/* 8217A4E0h case    8:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8217A4E0h case    8:*/		return 0x8217A4E4;
		  /* 8217A4E4h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217A4E4h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217A4E4h case    9:*/		return 0x8217A4E8;
		  /* 8217A4E8h */ case   10:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8217A4E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8217A4E8h case   10:*/		return 0x8217A4EC;
		  /* 8217A4ECh */ case   11:  		/* and. R11, R11, R9 */
		/* 8217A4ECh case   11:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217A4ECh case   11:*/		return 0x8217A4F0;
		  /* 8217A4F0h */ case   12:  		/* mr R11, R7 */
		/* 8217A4F0h case   12:*/		regs.R11 = regs.R7;
		/* 8217A4F0h case   12:*/		return 0x8217A4F4;
		  /* 8217A4F4h */ case   13:  		/* bc 4, CR0_EQ, 8 */
		/* 8217A4F4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8217A4FC;  }
		/* 8217A4F4h case   13:*/		return 0x8217A4F8;
	}
	return 0x8217A4F8;
} // Block from 8217A4C0h-8217A4F8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217A4F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A4F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A4F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A4F8);
		  /* 8217A4F8h */ case    0:  		/* li R11, 0 */
		/* 8217A4F8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217A4F8h case    0:*/		return 0x8217A4FC;
	}
	return 0x8217A4FC;
} // Block from 8217A4F8h-8217A4FCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217A4FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A4FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A4FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A4FC);
		  /* 8217A4FCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217A4FCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217A4FCh case    0:*/		return 0x8217A500;
		  /* 8217A500h */ case    1:  		/* bc 4, CR0_EQ, 72 */
		/* 8217A500h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217A548;  }
		/* 8217A500h case    1:*/		return 0x8217A504;
		  /* 8217A504h */ case    2:  		/* cmplw CR6, R29, R30 */
		/* 8217A504h case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R30);
		/* 8217A504h case    2:*/		return 0x8217A508;
		  /* 8217A508h */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 8217A508h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217A53C;  }
		/* 8217A508h case    3:*/		return 0x8217A50C;
		  /* 8217A50Ch */ case    4:  		/* lwz R11, <#[R29 + 48]> */
		/* 8217A50Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8217A50Ch case    4:*/		return 0x8217A510;
		  /* 8217A510h */ case    5:  		/* lwz R10, <#[R30 + 40]> */
		/* 8217A510h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000028) );
		/* 8217A510h case    5:*/		return 0x8217A514;
		  /* 8217A514h */ case    6:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217A514h case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217A514h case    6:*/		return 0x8217A518;
		  /* 8217A518h */ case    7:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8217A518h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8217A518h case    7:*/		return 0x8217A51C;
		  /* 8217A51Ch */ case    8:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217A51Ch case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217A51Ch case    8:*/		return 0x8217A520;
		  /* 8217A520h */ case    9:  		/* addi R11, R11, 1 */
		/* 8217A520h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217A520h case    9:*/		return 0x8217A524;
		  /* 8217A524h */ case   10:  		/* slw R9, R7, R9 */
		/* 8217A524h case   10:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8217A524h case   10:*/		return 0x8217A528;
		  /* 8217A528h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217A528h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217A528h case   11:*/		return 0x8217A52C;
		  /* 8217A52Ch */ case   12:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8217A52Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8217A52Ch case   12:*/		return 0x8217A530;
		  /* 8217A530h */ case   13:  		/* and. R11, R11, R9 */
		/* 8217A530h case   13:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217A530h case   13:*/		return 0x8217A534;
		  /* 8217A534h */ case   14:  		/* mr R11, R7 */
		/* 8217A534h case   14:*/		regs.R11 = regs.R7;
		/* 8217A534h case   14:*/		return 0x8217A538;
	}
	return 0x8217A538;
} // Block from 8217A4FCh-8217A538h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217A538h
// Function '?CanRemoveInvOp@Compiler@D3DXShader@@AAA_NPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A538);
		  /* 8217A538h */ case    0:  		/* bc 4, CR0_EQ, 8 */
		/* 8217A538h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8217A540;  }
		/* 8217A538h case    0:*/		return 0x8217A53C;
	}
	return 0x8217A53C;
} // Block from 8217A538h-8217A53Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217A53Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A53C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A53C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A53C);
		  /* 8217A53Ch */ case    0:  		/* li R11, 0 */
		/* 8217A53Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217A53Ch case    0:*/		return 0x8217A540;
	}
	return 0x8217A540;
} // Block from 8217A53Ch-8217A540h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217A540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A540);
		  /* 8217A540h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217A540h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217A540h case    0:*/		return 0x8217A544;
		  /* 8217A544h */ case    1:  		/* bc 12, CR0_EQ, -368 */
		/* 8217A544h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217A3D4;  }
		/* 8217A544h case    1:*/		return 0x8217A548;
	}
	return 0x8217A548;
} // Block from 8217A540h-8217A548h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A548);
		  /* 8217A548h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217A548h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217A548h case    0:*/		return 0x8217A54C;
		  /* 8217A54Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217A54Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217A54Ch case    1:*/		return 0x8217A550;
		  /* 8217A550h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 8217A550h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217A584;  }
		/* 8217A550h case    2:*/		return 0x8217A554;
		  /* 8217A554h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 8217A554h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217A554h case    3:*/		return 0x8217A558;
		  /* 8217A558h */ case    4:  		/* rlwinm R9, R8, 27, 5, 31 */
		/* 8217A558h case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R8);
		/* 8217A558h case    4:*/		return 0x8217A55C;
		  /* 8217A55Ch */ case    5:  		/* rlwinm R5, R8, 0, 27, 31 */
		/* 8217A55Ch case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R8);
		/* 8217A55Ch case    5:*/		return 0x8217A560;
		  /* 8217A560h */ case    6:  		/* addi R9, R9, 1 */
		/* 8217A560h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8217A560h case    6:*/		return 0x8217A564;
		  /* 8217A564h */ case    7:  		/* slw R5, R7, R5 */
		/* 8217A564h case    7:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R7,regs.R5);
		/* 8217A564h case    7:*/		return 0x8217A568;
		  /* 8217A568h */ case    8:  		/* lwz R4, <#[R11 + 40]> */
		/* 8217A568h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000028) );
		/* 8217A568h case    8:*/		return 0x8217A56C;
		  /* 8217A56Ch */ case    9:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8217A56Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8217A56Ch case    9:*/		return 0x8217A570;
		  /* 8217A570h */ case   10:  		/* lwzx R9, <#[R9 + R4]> */
		/* 8217A570h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R4 + 0x00000000) );
		/* 8217A570h case   10:*/		return 0x8217A574;
		  /* 8217A574h */ case   11:  		/* and. R9, R9, R5 */
		/* 8217A574h case   11:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R5);
		/* 8217A574h case   11:*/		return 0x8217A578;
		  /* 8217A578h */ case   12:  		/* bc 4, CR0_EQ, 104 */
		/* 8217A578h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217A5E0;  }
		/* 8217A578h case   12:*/		return 0x8217A57C;
		  /* 8217A57Ch */ case   13:  		/* lwz R10, <#[R10 + 12]> */
		/* 8217A57Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217A57Ch case   13:*/		return 0x8217A580;
		  /* 8217A580h */ case   14:  		/* b -52 */
		/* 8217A580h case   14:*/		return 0x8217A54C;
		/* 8217A580h case   14:*/		return 0x8217A584;
	}
	return 0x8217A584;
} // Block from 8217A548h-8217A584h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217A584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A584);
		  /* 8217A584h */ case    0:  		/* lwz R10, <#[R30 + 8]> */
		/* 8217A584h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 8217A584h case    0:*/		return 0x8217A588;
		  /* 8217A588h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217A588h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217A588h case    1:*/		return 0x8217A58C;
		  /* 8217A58Ch */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 8217A58Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8217A5C0;  }
		/* 8217A58Ch case    2:*/		return 0x8217A590;
		  /* 8217A590h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 8217A590h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217A590h case    3:*/		return 0x8217A594;
		  /* 8217A594h */ case    4:  		/* rlwinm R9, R6, 27, 5, 31 */
		/* 8217A594h case    4:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R9,regs.R6);
		/* 8217A594h case    4:*/		return 0x8217A598;
		  /* 8217A598h */ case    5:  		/* rlwinm R8, R6, 0, 27, 31 */
		/* 8217A598h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R6);
		/* 8217A598h case    5:*/		return 0x8217A59C;
		  /* 8217A59Ch */ case    6:  		/* addi R9, R9, 1 */
		/* 8217A59Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8217A59Ch case    6:*/		return 0x8217A5A0;
		  /* 8217A5A0h */ case    7:  		/* slw R8, R7, R8 */
		/* 8217A5A0h case    7:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 8217A5A0h case    7:*/		return 0x8217A5A4;
		  /* 8217A5A4h */ case    8:  		/* lwz R5, <#[R11 + 40]> */
		/* 8217A5A4h case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000028) );
		/* 8217A5A4h case    8:*/		return 0x8217A5A8;
		  /* 8217A5A8h */ case    9:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8217A5A8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8217A5A8h case    9:*/		return 0x8217A5AC;
		  /* 8217A5ACh */ case   10:  		/* lwzx R9, <#[R9 + R5]> */
		/* 8217A5ACh case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R5 + 0x00000000) );
		/* 8217A5ACh case   10:*/		return 0x8217A5B0;
		  /* 8217A5B0h */ case   11:  		/* and. R9, R9, R8 */
		/* 8217A5B0h case   11:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8217A5B0h case   11:*/		return 0x8217A5B4;
		  /* 8217A5B4h */ case   12:  		/* bc 4, CR0_EQ, 20 */
		/* 8217A5B4h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217A5C8;  }
		/* 8217A5B4h case   12:*/		return 0x8217A5B8;
		  /* 8217A5B8h */ case   13:  		/* lwz R10, <#[R10 + 12]> */
		/* 8217A5B8h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217A5B8h case   13:*/		return 0x8217A5BC;
		  /* 8217A5BCh */ case   14:  		/* b -52 */
		/* 8217A5BCh case   14:*/		return 0x8217A588;
		/* 8217A5BCh case   14:*/		return 0x8217A5C0;
	}
	return 0x8217A5C0;
} // Block from 8217A584h-8217A5C0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217A5C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A5C0);
		  /* 8217A5C0h */ case    0:  		/* li R11, 0 */
		/* 8217A5C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217A5C0h case    0:*/		return 0x8217A5C4;
		  /* 8217A5C4h */ case    1:  		/* b 28 */
		/* 8217A5C4h case    1:*/		return 0x8217A5E0;
		/* 8217A5C4h case    1:*/		return 0x8217A5C8;
	}
	return 0x8217A5C8;
} // Block from 8217A5C0h-8217A5C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A5C8);
		  /* 8217A5C8h */ case    0:  		/* rlwinm R9, R28, 0, 24, 31 */
		/* 8217A5C8h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R9,regs.R28);
		/* 8217A5C8h case    0:*/		return 0x8217A5CC;
		  /* 8217A5CCh */ case    1:  		/* mr R10, R31 */
		/* 8217A5CCh case    1:*/		regs.R10 = regs.R31;
		/* 8217A5CCh case    1:*/		return 0x8217A5D0;
	}
	return 0x8217A5D0;
} // Block from 8217A5C8h-8217A5D0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A5D0h
// Function '?AddToTail@?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@D3DXShader@@QAAXPAV12@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A5D0);
		  /* 8217A5D0h */ case    0:  		/* cntlzw R9, R9 */
		/* 8217A5D0h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 8217A5D0h case    0:*/		return 0x8217A5D4;
		  /* 8217A5D4h */ case    1:  		/* mr R31, R30 */
		/* 8217A5D4h case    1:*/		regs.R31 = regs.R30;
		/* 8217A5D4h case    1:*/		return 0x8217A5D8;
		  /* 8217A5D8h */ case    2:  		/* mr R30, R10 */
		/* 8217A5D8h case    2:*/		regs.R30 = regs.R10;
		/* 8217A5D8h case    2:*/		return 0x8217A5DC;
		  /* 8217A5DCh */ case    3:  		/* rlwinm R28, R9, 27, 31, 31 */
		/* 8217A5DCh case    3:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R28,regs.R9);
		/* 8217A5DCh case    3:*/		return 0x8217A5E0;
	}
	return 0x8217A5E0;
} // Block from 8217A5D0h-8217A5E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217A5E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A5E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A5E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A5E0);
		  /* 8217A5E0h */ case    0:  		/* stb R28, <#[R27]> */
		/* 8217A5E0h case    0:*/		cpu::mem::store8( regs, regs.R28, (uint32)(regs.R27 + 0x00000000) );
		/* 8217A5E0h case    0:*/		return 0x8217A5E4;
		  /* 8217A5E4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217A5E4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A5E4h case    1:*/		return 0x8217A5E8;
		  /* 8217A5E8h */ case    2:  		/* stw R31, <#[R26]> */
		/* 8217A5E8h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 8217A5E8h case    2:*/		return 0x8217A5EC;
		  /* 8217A5ECh */ case    3:  		/* stw R30, <#[R25]> */
		/* 8217A5ECh case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R25 + 0x00000000) );
		/* 8217A5ECh case    3:*/		return 0x8217A5F0;
		  /* 8217A5F0h */ case    4:  		/* bc 4, CR6_EQ, 252 */
		/* 8217A5F0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8217A6EC;  }
		/* 8217A5F0h case    4:*/		return 0x8217A5F4;
		  /* 8217A5F4h */ case    5:  		/* cmplw CR6, R29, R31 */
		/* 8217A5F4h case    5:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R31);
		/* 8217A5F4h case    5:*/		return 0x8217A5F8;
		  /* 8217A5F8h */ case    6:  		/* bc 12, CR6_EQ, 52 */
		/* 8217A5F8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217A62C;  }
		/* 8217A5F8h case    6:*/		return 0x8217A5FC;
		  /* 8217A5FCh */ case    7:  		/* lwz R11, <#[R29 + 48]> */
		/* 8217A5FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8217A5FCh case    7:*/		return 0x8217A600;
		  /* 8217A600h */ case    8:  		/* lwz R10, <#[R31 + 40]> */
		/* 8217A600h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8217A600h case    8:*/		return 0x8217A604;
		  /* 8217A604h */ case    9:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217A604h case    9:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217A604h case    9:*/		return 0x8217A608;
		  /* 8217A608h */ case   10:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8217A608h case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8217A608h case   10:*/		return 0x8217A60C;
		  /* 8217A60Ch */ case   11:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217A60Ch case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217A60Ch case   11:*/		return 0x8217A610;
		  /* 8217A610h */ case   12:  		/* addi R11, R11, 1 */
		/* 8217A610h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217A610h case   12:*/		return 0x8217A614;
		  /* 8217A614h */ case   13:  		/* slw R9, R7, R9 */
		/* 8217A614h case   13:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8217A614h case   13:*/		return 0x8217A618;
		  /* 8217A618h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217A618h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217A618h case   14:*/		return 0x8217A61C;
		  /* 8217A61Ch */ case   15:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8217A61Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8217A61Ch case   15:*/		return 0x8217A620;
		  /* 8217A620h */ case   16:  		/* and. R11, R11, R9 */
		/* 8217A620h case   16:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217A620h case   16:*/		return 0x8217A624;
		  /* 8217A624h */ case   17:  		/* mr R11, R7 */
		/* 8217A624h case   17:*/		regs.R11 = regs.R7;
		/* 8217A624h case   17:*/		return 0x8217A628;
		  /* 8217A628h */ case   18:  		/* bc 4, CR0_EQ, 8 */
		/* 8217A628h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8217A630;  }
		/* 8217A628h case   18:*/		return 0x8217A62C;
	}
	return 0x8217A62C;
} // Block from 8217A5E0h-8217A62Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8217A62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A62C);
		  /* 8217A62Ch */ case    0:  		/* li R11, 0 */
		/* 8217A62Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217A62Ch case    0:*/		return 0x8217A630;
	}
	return 0x8217A630;
} // Block from 8217A62Ch-8217A630h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217A630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A630);
		  /* 8217A630h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217A630h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217A630h case    0:*/		return 0x8217A634;
		  /* 8217A634h */ case    1:  		/* bc 12, CR0_EQ, 184 */
		/* 8217A634h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217A6EC;  }
		/* 8217A634h case    1:*/		return 0x8217A638;
	}
	return 0x8217A638;
} // Block from 8217A630h-8217A638h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A638h
// Function '?GetNext@?$ArrayListEnumerator@UCNDOperation@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAPAUCNDOperation@2@XZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A638);
		  /* 8217A638h */ case    0:  		/* cmplw CR6, R29, R30 */
		/* 8217A638h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R30);
		/* 8217A638h case    0:*/		return 0x8217A63C;
		  /* 8217A63Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 8217A63Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8217A670;  }
		/* 8217A63Ch case    1:*/		return 0x8217A640;
		  /* 8217A640h */ case    2:  		/* lwz R11, <#[R29 + 48]> */
		/* 8217A640h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8217A640h case    2:*/		return 0x8217A644;
		  /* 8217A644h */ case    3:  		/* lwz R10, <#[R30 + 40]> */
		/* 8217A644h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000028) );
		/* 8217A644h case    3:*/		return 0x8217A648;
		  /* 8217A648h */ case    4:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217A648h case    4:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217A648h case    4:*/		return 0x8217A64C;
		  /* 8217A64Ch */ case    5:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8217A64Ch case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8217A64Ch case    5:*/		return 0x8217A650;
		  /* 8217A650h */ case    6:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217A650h case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217A650h case    6:*/		return 0x8217A654;
		  /* 8217A654h */ case    7:  		/* addi R11, R11, 1 */
		/* 8217A654h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217A654h case    7:*/		return 0x8217A658;
		  /* 8217A658h */ case    8:  		/* slw R9, R7, R9 */
		/* 8217A658h case    8:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8217A658h case    8:*/		return 0x8217A65C;
		  /* 8217A65Ch */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217A65Ch case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217A65Ch case    9:*/		return 0x8217A660;
		  /* 8217A660h */ case   10:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8217A660h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8217A660h case   10:*/		return 0x8217A664;
		  /* 8217A664h */ case   11:  		/* and. R11, R11, R9 */
		/* 8217A664h case   11:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217A664h case   11:*/		return 0x8217A668;
		  /* 8217A668h */ case   12:  		/* mr R11, R7 */
		/* 8217A668h case   12:*/		regs.R11 = regs.R7;
		/* 8217A668h case   12:*/		return 0x8217A66C;
		  /* 8217A66Ch */ case   13:  		/* bc 4, CR0_EQ, 8 */
		/* 8217A66Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x8217A674;  }
		/* 8217A66Ch case   13:*/		return 0x8217A670;
	}
	return 0x8217A670;
} // Block from 8217A638h-8217A670h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217A670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A670);
		  /* 8217A670h */ case    0:  		/* li R11, 0 */
		/* 8217A670h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217A670h case    0:*/		return 0x8217A674;
	}
	return 0x8217A674;
} // Block from 8217A670h-8217A674h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217A674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A674);
		  /* 8217A674h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217A674h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217A674h case    0:*/		return 0x8217A678;
		  /* 8217A678h */ case    1:  		/* bc 12, CR0_EQ, 116 */
		/* 8217A678h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217A6EC;  }
		/* 8217A678h case    1:*/		return 0x8217A67C;
		  /* 8217A67Ch */ case    2:  		/* addi R8, R1, 84 */
		/* 8217A67Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8217A67Ch case    2:*/		return 0x8217A680;
		  /* 8217A680h */ case    3:  		/* li R7, 0 */
		/* 8217A680h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217A680h case    3:*/		return 0x8217A684;
		  /* 8217A684h */ case    4:  		/* addi R6, R1, 80 */
		/* 8217A684h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8217A684h case    4:*/		return 0x8217A688;
		  /* 8217A688h */ case    5:  		/* li R5, 0 */
		/* 8217A688h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217A688h case    5:*/		return 0x8217A68C;
		  /* 8217A68Ch */ case    6:  		/* mr R4, R30 */
		/* 8217A68Ch case    6:*/		regs.R4 = regs.R30;
		/* 8217A68Ch case    6:*/		return 0x8217A690;
	}
	return 0x8217A690;
} // Block from 8217A674h-8217A690h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217A690h
// Function '?ReplaceOperand@Instruction@D3DXShader@@QAAPAVDependency@2@IPAV32@PAVCompiler@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A690);
		  /* 8217A690h */ case    0:  		/* mr R3, R24 */
		/* 8217A690h case    0:*/		regs.R3 = regs.R24;
		/* 8217A690h case    0:*/		return 0x8217A694;
		  /* 8217A694h */ case    1:  		/* bl -6708 */
		/* 8217A694h case    1:*/		regs.LR = 0x8217A698; return 0x82178C60;
		/* 8217A694h case    1:*/		return 0x8217A698;
		  /* 8217A698h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217A698h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217A698h case    2:*/		return 0x8217A69C;
		  /* 8217A69Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217A69Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217A6A8;  }
		/* 8217A69Ch case    3:*/		return 0x8217A6A0;
		  /* 8217A6A0h */ case    4:  		/* li R3, 4 */
		/* 8217A6A0h case    4:*/		cpu::op::li<0>(regs,&regs.R3,0x4);
		/* 8217A6A0h case    4:*/		return 0x8217A6A4;
		  /* 8217A6A4h */ case    5:  		/* b 76 */
		/* 8217A6A4h case    5:*/		return 0x8217A6F0;
		/* 8217A6A4h case    5:*/		return 0x8217A6A8;
	}
	return 0x8217A6A8;
} // Block from 8217A690h-8217A6A8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217A6A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A6A8);
		  /* 8217A6A8h */ case    0:  		/* lwz R11, <#[R1 + 84]> */
		/* 8217A6A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8217A6A8h case    0:*/		return 0x8217A6AC;
		  /* 8217A6ACh */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217A6ACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A6ACh case    1:*/		return 0x8217A6B0;
		  /* 8217A6B0h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 8217A6B0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217A6EC;  }
		/* 8217A6B0h case    2:*/		return 0x8217A6B4;
		  /* 8217A6B4h */ case    3:  		/* addi R8, R1, 84 */
		/* 8217A6B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8217A6B4h case    3:*/		return 0x8217A6B8;
		  /* 8217A6B8h */ case    4:  		/* li R7, 0 */
		/* 8217A6B8h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217A6B8h case    4:*/		return 0x8217A6BC;
		  /* 8217A6BCh */ case    5:  		/* addi R6, R1, 80 */
		/* 8217A6BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8217A6BCh case    5:*/		return 0x8217A6C0;
		  /* 8217A6C0h */ case    6:  		/* li R5, 0 */
		/* 8217A6C0h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217A6C0h case    6:*/		return 0x8217A6C4;
		  /* 8217A6C4h */ case    7:  		/* mr R4, R31 */
		/* 8217A6C4h case    7:*/		regs.R4 = regs.R31;
		/* 8217A6C4h case    7:*/		return 0x8217A6C8;
		  /* 8217A6C8h */ case    8:  		/* mr R3, R24 */
		/* 8217A6C8h case    8:*/		regs.R3 = regs.R24;
		/* 8217A6C8h case    8:*/		return 0x8217A6CC;
		  /* 8217A6CCh */ case    9:  		/* bl -6764 */
		/* 8217A6CCh case    9:*/		regs.LR = 0x8217A6D0; return 0x82178C60;
		/* 8217A6CCh case    9:*/		return 0x8217A6D0;
	}
	return 0x8217A6D0;
} // Block from 8217A6A8h-8217A6D0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217A6D0h
// Function '?MakeInstr_V_MAX@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@PAVDependency@2@2@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A6D0);
		  /* 8217A6D0h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217A6D0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217A6D0h case    0:*/		return 0x8217A6D4;
		  /* 8217A6D4h */ case    1:  		/* bc 12, CR0_EQ, -52 */
		/* 8217A6D4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217A6A0;  }
		/* 8217A6D4h case    1:*/		return 0x8217A6D8;
		  /* 8217A6D8h */ case    2:  		/* lwz R11, <#[R1 + 84]> */
		/* 8217A6D8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8217A6D8h case    2:*/		return 0x8217A6DC;
		  /* 8217A6DCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8217A6DCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A6DCh case    3:*/		return 0x8217A6E0;
		  /* 8217A6E0h */ case    4:  		/* bc 4, CR6_EQ, -64 */
		/* 8217A6E0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8217A6A0;  }
		/* 8217A6E0h case    4:*/		return 0x8217A6E4;
		  /* 8217A6E4h */ case    5:  		/* li R3, 3 */
		/* 8217A6E4h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8217A6E4h case    5:*/		return 0x8217A6E8;
		  /* 8217A6E8h */ case    6:  		/* b -580 */
		/* 8217A6E8h case    6:*/		return 0x8217A4A4;
		/* 8217A6E8h case    6:*/		return 0x8217A6EC;
	}
	return 0x8217A6EC;
} // Block from 8217A6D0h-8217A6ECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217A6ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A6EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A6EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A6EC);
		  /* 8217A6ECh */ case    0:  		/* li R3, 3 */
		/* 8217A6ECh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 8217A6ECh case    0:*/		return 0x8217A6F0;
	}
	return 0x8217A6F0;
} // Block from 8217A6ECh-8217A6F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217A6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A6F0);
		  /* 8217A6F0h */ case    0:  		/* addi R1, R1, 160 */
		/* 8217A6F0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8217A6F0h case    0:*/		return 0x8217A6F4;
		  /* 8217A6F4h */ case    1:  		/* b -955484 */
		/* 8217A6F4h case    1:*/		return 0x82091298;
		/* 8217A6F4h case    1:*/		return 0x8217A6F8;
	}
	return 0x8217A6F8;
} // Block from 8217A6F0h-8217A6F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A6F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A6F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A6F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A6F8);
		  /* 8217A6F8h */ case    0:  		/* mfspr R12, LR */
		/* 8217A6F8h case    0:*/		regs.R12 = regs.LR;
		/* 8217A6F8h case    0:*/		return 0x8217A6FC;
		  /* 8217A6FCh */ case    1:  		/* bl -955612 */
		/* 8217A6FCh case    1:*/		regs.LR = 0x8217A700; return 0x82091220;
		/* 8217A6FCh case    1:*/		return 0x8217A700;
		  /* 8217A700h */ case    2:  		/* stfd FR30, <#[R1 - 168]> */
		/* 8217A700h case    2:*/		cpu::mem::store64f( regs, regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 8217A700h case    2:*/		return 0x8217A704;
		  /* 8217A704h */ case    3:  		/* stfd FR31, <#[R1 - 160]> */
		/* 8217A704h case    3:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8217A704h case    3:*/		return 0x8217A708;
		  /* 8217A708h */ case    4:  		/* stwu R1, <#[R1 - 256]> */
		/* 8217A708h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 8217A708h case    4:*/		return 0x8217A70C;
		  /* 8217A70Ch */ case    5:  		/* lis R11, -32256 */
		/* 8217A70Ch case    5:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8217A70Ch case    5:*/		return 0x8217A710;
		  /* 8217A710h */ case    6:  		/* lis R10, -32256 */
		/* 8217A710h case    6:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 8217A710h case    6:*/		return 0x8217A714;
		  /* 8217A714h */ case    7:  		/* mr R26, R3 */
		/* 8217A714h case    7:*/		regs.R26 = regs.R3;
		/* 8217A714h case    7:*/		return 0x8217A718;
		  /* 8217A718h */ case    8:  		/* mr R20, R4 */
		/* 8217A718h case    8:*/		regs.R20 = regs.R4;
		/* 8217A718h case    8:*/		return 0x8217A71C;
		  /* 8217A71Ch */ case    9:  		/* mr R17, R5 */
		/* 8217A71Ch case    9:*/		regs.R17 = regs.R5;
		/* 8217A71Ch case    9:*/		return 0x8217A720;
		  /* 8217A720h */ case   10:  		/* lfs FR30, <#[R11 + 1792]> */
		/* 8217A720h case   10:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R11 + 0x00000700) );
		/* 8217A720h case   10:*/		return 0x8217A724;
		  /* 8217A724h */ case   11:  		/* mr R15, R6 */
		/* 8217A724h case   11:*/		regs.R15 = regs.R6;
		/* 8217A724h case   11:*/		return 0x8217A728;
		  /* 8217A728h */ case   12:  		/* lfs FR31, <#[R10 + 1816]> */
		/* 8217A728h case   12:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000718) );
		/* 8217A728h case   12:*/		return 0x8217A72C;
		  /* 8217A72Ch */ case   13:  		/* mr R21, R7 */
		/* 8217A72Ch case   13:*/		regs.R21 = regs.R7;
		/* 8217A72Ch case   13:*/		return 0x8217A730;
		  /* 8217A730h */ case   14:  		/* li R31, 0 */
		/* 8217A730h case   14:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8217A730h case   14:*/		return 0x8217A734;
		  /* 8217A734h */ case   15:  		/* lwz R10, <#[R20 + 36]> */
		/* 8217A734h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000024) );
		/* 8217A734h case   15:*/		return 0x8217A738;
		  /* 8217A738h */ case   16:  		/* addi R11, R20, 32 */
		/* 8217A738h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R20,0x20);
		/* 8217A738h case   16:*/		return 0x8217A73C;
		  /* 8217A73Ch */ case   17:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 8217A73Ch case   17:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 8217A73Ch case   17:*/		return 0x8217A740;
		  /* 8217A740h */ case   18:  		/* addic R9, R9, -1 */
		/* 8217A740h case   18:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8217A740h case   18:*/		return 0x8217A744;
		  /* 8217A744h */ case   19:  		/* subfe R9, R9, R9 */
		/* 8217A744h case   19:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8217A744h case   19:*/		return 0x8217A748;
		  /* 8217A748h */ case   20:  		/* and R16, R9, R10 */
		/* 8217A748h case   20:*/		cpu::op::and<0>(regs,&regs.R16,regs.R9,regs.R10);
		/* 8217A748h case   20:*/		return 0x8217A74C;
		  /* 8217A74Ch */ case   21:  		/* cmplwi CR6, R16, 0 */
		/* 8217A74Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 8217A74Ch case   21:*/		return 0x8217A750;
		  /* 8217A750h */ case   22:  		/* bc 12, CR6_EQ, 1516 */
		/* 8217A750h case   22:*/		if ( regs.CR[6].eq ) { return 0x8217AD3C;  }
		/* 8217A750h case   22:*/		return 0x8217A754;
		  /* 8217A754h */ case   23:  		/* lwz R11, <#[R16 + 8]> */
		/* 8217A754h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 8217A754h case   23:*/		return 0x8217A758;
		  /* 8217A758h */ case   24:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217A758h case   24:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217A758h case   24:*/		return 0x8217A75C;
		  /* 8217A75Ch */ case   25:  		/* cmplwi CR6, R11, 14976 */
		/* 8217A75Ch case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003A80);
		/* 8217A75Ch case   25:*/		return 0x8217A760;
		  /* 8217A760h */ case   26:  		/* bc 4, CR6_EQ, 1424 */
		/* 8217A760h case   26:*/		if ( !regs.CR[6].eq ) { return 0x8217ACF0;  }
		/* 8217A760h case   26:*/		return 0x8217A764;
		  /* 8217A764h */ case   27:  		/* mr R14, R16 */
		/* 8217A764h case   27:*/		regs.R14 = regs.R16;
		/* 8217A764h case   27:*/		return 0x8217A768;
		  /* 8217A768h */ case   28:  		/* stw R14, <#[R1 + 84]> */
		/* 8217A768h case   28:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R1 + 0x00000054) );
		/* 8217A768h case   28:*/		return 0x8217A76C;
		  /* 8217A76Ch */ case   29:  		/* lwz R18, <#[R14]> */
		/* 8217A76Ch case   29:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R14 + 0x00000000) );
		/* 8217A76Ch case   29:*/		return 0x8217A770;
		  /* 8217A770h */ case   30:  		/* cmplwi CR6, R18, 0 */
		/* 8217A770h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8217A770h case   30:*/		return 0x8217A774;
		  /* 8217A774h */ case   31:  		/* bc 12, CR6_EQ, 1392 */
		/* 8217A774h case   31:*/		if ( regs.CR[6].eq ) { return 0x8217ACE4;  }
		/* 8217A774h case   31:*/		return 0x8217A778;
		  /* 8217A778h */ case   32:  		/* lwz R8, <#[R18]> */
		/* 8217A778h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R18 + 0x00000000) );
		/* 8217A778h case   32:*/		return 0x8217A77C;
		  /* 8217A77Ch */ case   33:  		/* rlwinm. R11, R8, 0, 4, 6 */
		/* 8217A77Ch case   33:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R8);
		/* 8217A77Ch case   33:*/		return 0x8217A780;
		  /* 8217A780h */ case   34:  		/* bc 12, CR0_EQ, 1360 */
		/* 8217A780h case   34:*/		if ( regs.CR[0].eq ) { return 0x8217ACD0;  }
		/* 8217A780h case   34:*/		return 0x8217A784;
		  /* 8217A784h */ case   35:  		/* lwz R19, <#[R18 + 12]> */
		/* 8217A784h case   35:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R18 + 0x0000000C) );
		/* 8217A784h case   35:*/		return 0x8217A788;
		  /* 8217A788h */ case   36:  		/* lwz R11, <#[R19 + 8]> */
		/* 8217A788h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 8217A788h case   36:*/		return 0x8217A78C;
		  /* 8217A78Ch */ case   37:  		/* rlwinm. R11, R11, 27, 31, 31 */
		/* 8217A78Ch case   37:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R11,regs.R11);
		/* 8217A78Ch case   37:*/		return 0x8217A790;
		  /* 8217A790h */ case   38:  		/* bc 12, CR0_EQ, 1344 */
		/* 8217A790h case   38:*/		if ( regs.CR[0].eq ) { return 0x8217ACD0;  }
		/* 8217A790h case   38:*/		return 0x8217A794;
		  /* 8217A794h */ case   39:  		/* li R10, 1 */
		/* 8217A794h case   39:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8217A794h case   39:*/		return 0x8217A798;
		  /* 8217A798h */ case   40:  		/* lwz R9, <#[R16]> */
		/* 8217A798h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R16 + 0x00000000) );
		/* 8217A798h case   40:*/		return 0x8217A79C;
		  /* 8217A79Ch */ case   41:  		/* li R11, 0 */
		/* 8217A79Ch case   41:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217A79Ch case   41:*/		return 0x8217A7A0;
		  /* 8217A7A0h */ case   42:  		/* stb R10, <#[R1 + 80]> */
		/* 8217A7A0h case   42:*/		cpu::mem::store8( regs, regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 8217A7A0h case   42:*/		return 0x8217A7A4;
		  /* 8217A7A4h */ case   43:  		/* cmplwi CR6, R9, 0 */
		/* 8217A7A4h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8217A7A4h case   43:*/		return 0x8217A7A8;
		  /* 8217A7A8h */ case   44:  		/* bc 12, CR6_EQ, 44 */
		/* 8217A7A8h case   44:*/		if ( regs.CR[6].eq ) { return 0x8217A7D4;  }
		/* 8217A7A8h case   44:*/		return 0x8217A7AC;
		  /* 8217A7ACh */ case   45:  		/* lwz R10, <#[R9]> */
		/* 8217A7ACh case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8217A7ACh case   45:*/		return 0x8217A7B0;
		  /* 8217A7B0h */ case   46:  		/* rlwinm. R7, R10, 0, 4, 6 */
		/* 8217A7B0h case   46:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R7,regs.R10);
		/* 8217A7B0h case   46:*/		return 0x8217A7B4;
		  /* 8217A7B4h */ case   47:  		/* bc 12, CR0_EQ, 24 */
		/* 8217A7B4h case   47:*/		if ( regs.CR[0].eq ) { return 0x8217A7CC;  }
		/* 8217A7B4h case   47:*/		return 0x8217A7B8;
		  /* 8217A7B8h */ case   48:  		/* xor R7, R10, R8 */
		/* 8217A7B8h case   48:*/		cpu::op::xor<0>(regs,&regs.R7,regs.R10,regs.R8);
		/* 8217A7B8h case   48:*/		return 0x8217A7BC;
		  /* 8217A7BCh */ case   49:  		/* rlwinm. R7, R7, 0, 7, 14 */
		/* 8217A7BCh case   49:*/		cpu::op::rlwinm<1,0,7,14>(regs,&regs.R7,regs.R7);
		/* 8217A7BCh case   49:*/		return 0x8217A7C0;
	}
	return 0x8217A7C0;
} // Block from 8217A6F8h-8217A7C0h (50 instructions)

//////////////////////////////////////////////////////
// Block at 8217A7C0h
// Function '?MakeInstr_V_CNDE@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@PAVDependency@2@22@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A7C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A7C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A7C0);
		  /* 8217A7C0h */ case    0:  		/* bc 4, CR0_EQ, 12 */
		/* 8217A7C0h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8217A7CC;  }
		/* 8217A7C0h case    0:*/		return 0x8217A7C4;
		  /* 8217A7C4h */ case    1:  		/* rlwinm R10, R10, 19, 28, 31 */
		/* 8217A7C4h case    1:*/		cpu::op::rlwinm<0,19,28,31>(regs,&regs.R10,regs.R10);
		/* 8217A7C4h case    1:*/		return 0x8217A7C8;
		  /* 8217A7C8h */ case    2:  		/* or R11, R10, R11 */
		/* 8217A7C8h case    2:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217A7C8h case    2:*/		return 0x8217A7CC;
	}
	return 0x8217A7CC;
} // Block from 8217A7C0h-8217A7CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217A7CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A7CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A7CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A7CC);
		  /* 8217A7CCh */ case    0:  		/* lwz R9, <#[R9 + 4]> */
		/* 8217A7CCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8217A7CCh case    0:*/		return 0x8217A7D0;
		  /* 8217A7D0h */ case    1:  		/* b -44 */
		/* 8217A7D0h case    1:*/		return 0x8217A7A4;
		/* 8217A7D0h case    1:*/		return 0x8217A7D4;
	}
	return 0x8217A7D4;
} // Block from 8217A7CCh-8217A7D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A7D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A7D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A7D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A7D4);
		  /* 8217A7D4h */ case    0:  		/* rlwimi R11, R8, 19, 20, 27 */
		/* 8217A7D4h case    0:*/		cpu::op::rlwimi<0,19,20,27>(regs,&regs.R11,regs.R8);
		/* 8217A7D4h case    0:*/		return 0x8217A7D8;
		  /* 8217A7D8h */ case    1:  		/* lwz R31, <#[R15]> */
		/* 8217A7D8h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R15 + 0x00000000) );
		/* 8217A7D8h case    1:*/		return 0x8217A7DC;
		  /* 8217A7DCh */ case    2:  		/* rlwinm R23, R11, 0, 20, 31 */
		/* 8217A7DCh case    2:*/		cpu::op::rlwinm<0,0,20,31>(regs,&regs.R23,regs.R11);
		/* 8217A7DCh case    2:*/		return 0x8217A7E0;
		  /* 8217A7E0h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 8217A7E0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217A7E0h case    3:*/		return 0x8217A7E4;
		  /* 8217A7E4h */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 8217A7E4h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217A81C;  }
		/* 8217A7E4h case    4:*/		return 0x8217A7E8;
		  /* 8217A7E8h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 8217A7E8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217A7E8h case    5:*/		return 0x8217A7EC;
		  /* 8217A7ECh */ case    6:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 8217A7ECh case    6:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 8217A7ECh case    6:*/		return 0x8217A7F0;
		  /* 8217A7F0h */ case    7:  		/* bc 12, CR0_EQ, 36 */
		/* 8217A7F0h case    7:*/		if ( regs.CR[0].eq ) { return 0x8217A814;  }
		/* 8217A7F0h case    7:*/		return 0x8217A7F4;
		  /* 8217A7F4h */ case    8:  		/* lwz R10, <#[R31 + 12]> */
		/* 8217A7F4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 8217A7F4h case    8:*/		return 0x8217A7F8;
		  /* 8217A7F8h */ case    9:  		/* lwz R10, <#[R10 + 8]> */
		/* 8217A7F8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8217A7F8h case    9:*/		return 0x8217A7FC;
		  /* 8217A7FCh */ case   10:  		/* rlwinm. R10, R10, 27, 31, 31 */
		/* 8217A7FCh case   10:*/		cpu::op::rlwinm<1,27,31,31>(regs,&regs.R10,regs.R10);
		/* 8217A7FCh case   10:*/		return 0x8217A800;
		  /* 8217A800h */ case   11:  		/* bc 12, CR0_EQ, 20 */
		/* 8217A800h case   11:*/		if ( regs.CR[0].eq ) { return 0x8217A814;  }
		/* 8217A800h case   11:*/		return 0x8217A804;
		  /* 8217A804h */ case   12:  		/* rlwinm R11, R11, 19, 20, 27 */
		/* 8217A804h case   12:*/		cpu::op::rlwinm<0,19,20,27>(regs,&regs.R11,regs.R11);
		/* 8217A804h case   12:*/		return 0x8217A808;
		  /* 8217A808h */ case   13:  		/* xor R11, R11, R23 */
		/* 8217A808h case   13:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 8217A808h case   13:*/		return 0x8217A80C;
		  /* 8217A80Ch */ case   14:  		/* rlwinm. R11, R11, 0, 0, 27 */
		/* 8217A80Ch case   14:*/		cpu::op::rlwinm<1,0,0,27>(regs,&regs.R11,regs.R11);
		/* 8217A80Ch case   14:*/		return 0x8217A810;
		  /* 8217A810h */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 8217A810h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217A81C;  }
		/* 8217A810h case   15:*/		return 0x8217A814;
	}
	return 0x8217A814;
} // Block from 8217A7D4h-8217A814h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8217A814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A814);
		  /* 8217A814h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 8217A814h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 8217A814h case    0:*/		return 0x8217A818;
		  /* 8217A818h */ case    1:  		/* b -56 */
		/* 8217A818h case    1:*/		return 0x8217A7E0;
		/* 8217A818h case    1:*/		return 0x8217A81C;
	}
	return 0x8217A81C;
} // Block from 8217A814h-8217A81Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A81C);
		  /* 8217A81Ch */ case    0:  		/* lis R11, -28311 */
		/* 8217A81Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 8217A81Ch case    0:*/		return 0x8217A820;
		  /* 8217A820h */ case    1:  		/* lis R10, 0 */
		/* 8217A820h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 8217A820h case    1:*/		return 0x8217A824;
		  /* 8217A824h */ case    2:  		/* ori R11, R11, 5192 */
		/* 8217A824h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 8217A824h case    2:*/		return 0x8217A828;
		  /* 8217A828h */ case    3:  		/* ori R10, R10, 36262 */
		/* 8217A828h case    3:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8DA6);
		/* 8217A828h case    3:*/		return 0x8217A82C;
		  /* 8217A82Ch */ case    4:  		/* rlwinm R9, R23, 0, 28, 31 */
		/* 8217A82Ch case    4:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R23);
		/* 8217A82Ch case    4:*/		return 0x8217A830;
		  /* 8217A830h */ case    5:  		/* rldimi R11, R10, 32, 0 */
		/* 8217A830h case    5:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R10);
		/* 8217A830h case    5:*/		return 0x8217A834;
		  /* 8217A834h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 8217A834h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217A834h case    6:*/		return 0x8217A838;
		  /* 8217A838h */ case    7:  		/* srd R11, R11, R9 */
		/* 8217A838h case    7:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217A838h case    7:*/		return 0x8217A83C;
		  /* 8217A83Ch */ case    8:  		/* srd R11, R11, R9 */
		/* 8217A83Ch case    8:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217A83Ch case    8:*/		return 0x8217A840;
		  /* 8217A840h */ case    9:  		/* srd R11, R11, R9 */
		/* 8217A840h case    9:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217A840h case    9:*/		return 0x8217A844;
		  /* 8217A844h */ case   10:  		/* rlwinm R24, R11, 0, 29, 31 */
		/* 8217A844h case   10:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R24,regs.R11);
		/* 8217A844h case   10:*/		return 0x8217A848;
		  /* 8217A848h */ case   11:  		/* bc 4, CR6_EQ, 260 */
		/* 8217A848h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8217A94C;  }
		/* 8217A848h case   11:*/		return 0x8217A84C;
		  /* 8217A84Ch */ case   12:  		/* addi R28, R17, 24 */
		/* 8217A84Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R17,0x18);
		/* 8217A84Ch case   12:*/		return 0x8217A850;
		  /* 8217A850h */ case   13:  		/* mr R6, R24 */
		/* 8217A850h case   13:*/		regs.R6 = regs.R24;
		/* 8217A850h case   13:*/		return 0x8217A854;
		  /* 8217A854h */ case   14:  		/* mr R5, R28 */
		/* 8217A854h case   14:*/		regs.R5 = regs.R28;
		/* 8217A854h case   14:*/		return 0x8217A858;
		  /* 8217A858h */ case   15:  		/* mr R4, R17 */
		/* 8217A858h case   15:*/		regs.R4 = regs.R17;
		/* 8217A858h case   15:*/		return 0x8217A85C;
		  /* 8217A85Ch */ case   16:  		/* mr R3, R26 */
		/* 8217A85Ch case   16:*/		regs.R3 = regs.R26;
		/* 8217A85Ch case   16:*/		return 0x8217A860;
		  /* 8217A860h */ case   17:  		/* bl 696992 */
		/* 8217A860h case   17:*/		regs.LR = 0x8217A864; return 0x82224B00;
		/* 8217A860h case   17:*/		return 0x8217A864;
		  /* 8217A864h */ case   18:  		/* mr R30, R3 */
		/* 8217A864h case   18:*/		regs.R30 = regs.R3;
		/* 8217A864h case   18:*/		return 0x8217A868;
		  /* 8217A868h */ case   19:  		/* cmplwi CR6, R24, 0 */
		/* 8217A868h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217A868h case   19:*/		return 0x8217A86C;
		  /* 8217A86Ch */ case   20:  		/* bc 12, CR6_EQ, 120 */
		/* 8217A86Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x8217A8E4;  }
		/* 8217A86Ch case   20:*/		return 0x8217A870;
		  /* 8217A870h */ case   21:  		/* addi R29, R3, 44 */
		/* 8217A870h case   21:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x2C);
		/* 8217A870h case   21:*/		return 0x8217A874;
		  /* 8217A874h */ case   22:  		/* mr R27, R24 */
		/* 8217A874h case   22:*/		regs.R27 = regs.R24;
		/* 8217A874h case   22:*/		return 0x8217A878;
		  /* 8217A878h */ case   23:  		/* mr R4, R17 */
		/* 8217A878h case   23:*/		regs.R4 = regs.R17;
		/* 8217A878h case   23:*/		return 0x8217A87C;
		  /* 8217A87Ch */ case   24:  		/* mr R3, R26 */
		/* 8217A87Ch case   24:*/		regs.R3 = regs.R26;
		/* 8217A87Ch case   24:*/		return 0x8217A880;
		  /* 8217A880h */ case   25:  		/* bl 696768 */
		/* 8217A880h case   25:*/		regs.LR = 0x8217A884; return 0x82224A40;
		/* 8217A880h case   25:*/		return 0x8217A884;
		  /* 8217A884h */ case   26:  		/* mr R31, R3 */
		/* 8217A884h case   26:*/		regs.R31 = regs.R3;
		/* 8217A884h case   26:*/		return 0x8217A888;
		  /* 8217A888h */ case   27:  		/* mr R3, R26 */
		/* 8217A888h case   27:*/		regs.R3 = regs.R26;
		/* 8217A888h case   27:*/		return 0x8217A88C;
		  /* 8217A88Ch */ case   28:  		/* mr R4, R31 */
		/* 8217A88Ch case   28:*/		regs.R4 = regs.R31;
		/* 8217A88Ch case   28:*/		return 0x8217A890;
		  /* 8217A890h */ case   29:  		/* bl -10384 */
		/* 8217A890h case   29:*/		regs.LR = 0x8217A894; return 0x82178000;
		/* 8217A890h case   29:*/		return 0x8217A894;
		  /* 8217A894h */ case   30:  		/* mr R4, R3 */
		/* 8217A894h case   30:*/		regs.R4 = regs.R3;
		/* 8217A894h case   30:*/		return 0x8217A898;
		  /* 8217A898h */ case   31:  		/* mr R3, R30 */
		/* 8217A898h case   31:*/		regs.R3 = regs.R30;
		/* 8217A898h case   31:*/		return 0x8217A89C;
		  /* 8217A89Ch */ case   32:  		/* bl -9940 */
		/* 8217A89Ch case   32:*/		regs.LR = 0x8217A8A0; return 0x821781C8;
		/* 8217A89Ch case   32:*/		return 0x8217A8A0;
		  /* 8217A8A0h */ case   33:  		/* cmplwi CR6, R21, 0 */
		/* 8217A8A0h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8217A8A0h case   33:*/		return 0x8217A8A4;
		  /* 8217A8A4h */ case   34:  		/* stw R3, <#[R29]> */
		/* 8217A8A4h case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8217A8A4h case   34:*/		return 0x8217A8A8;
		  /* 8217A8A8h */ case   35:  		/* bc 12, CR6_EQ, 48 */
		/* 8217A8A8h case   35:*/		if ( regs.CR[6].eq ) { return 0x8217A8D8;  }
		/* 8217A8A8h case   35:*/		return 0x8217A8AC;
		  /* 8217A8ACh */ case   36:  		/* li R6, 1 */
		/* 8217A8ACh case   36:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217A8ACh case   36:*/		return 0x8217A8B0;
		  /* 8217A8B0h */ case   37:  		/* stw R21, <#[R31 - 4]> */
		/* 8217A8B0h case   37:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8217A8B0h case   37:*/		return 0x8217A8B4;
		  /* 8217A8B4h */ case   38:  		/* li R5, 0 */
		/* 8217A8B4h case   38:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217A8B4h case   38:*/		return 0x8217A8B8;
		  /* 8217A8B8h */ case   39:  		/* li R4, 112 */
		/* 8217A8B8h case   39:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 8217A8B8h case   39:*/		return 0x8217A8BC;
		  /* 8217A8BCh */ case   40:  		/* mr R3, R26 */
		/* 8217A8BCh case   40:*/		regs.R3 = regs.R26;
		/* 8217A8BCh case   40:*/		return 0x8217A8C0;
		  /* 8217A8C0h */ case   41:  		/* bl -91280 */
		/* 8217A8C0h case   41:*/		regs.LR = 0x8217A8C4; return 0x82164430;
		/* 8217A8C0h case   41:*/		return 0x8217A8C4;
		  /* 8217A8C4h */ case   42:  		/* addi R11, R31, -8 */
		/* 8217A8C4h case   42:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF8);
		/* 8217A8C4h case   42:*/		return 0x8217A8C8;
		  /* 8217A8C8h */ case   43:  		/* add R11, R3, R11 */
		/* 8217A8C8h case   43:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8217A8C8h case   43:*/		return 0x8217A8CC;
		  /* 8217A8CCh */ case   44:  		/* lwz R10, <#[R11]> */
		/* 8217A8CCh case   44:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A8CCh case   44:*/		return 0x8217A8D0;
		  /* 8217A8D0h */ case   45:  		/* rlwimi R10, R23, 0, 17, 31 */
		/* 8217A8D0h case   45:*/		cpu::op::rlwimi<0,0,17,31>(regs,&regs.R10,regs.R23);
		/* 8217A8D0h case   45:*/		return 0x8217A8D4;
		  /* 8217A8D4h */ case   46:  		/* stw R10, <#[R11]> */
		/* 8217A8D4h case   46:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A8D4h case   46:*/		return 0x8217A8D8;
	}
	return 0x8217A8D8;
} // Block from 8217A81Ch-8217A8D8h (47 instructions)

//////////////////////////////////////////////////////
// Block at 8217A8D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A8D8);
		  /* 8217A8D8h */ case    0:  		/* addic. R27, R27, -1 */
		/* 8217A8D8h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 8217A8D8h case    0:*/		return 0x8217A8DC;
		  /* 8217A8DCh */ case    1:  		/* addi R29, R29, 4 */
		/* 8217A8DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8217A8DCh case    1:*/		return 0x8217A8E0;
	}
	return 0x8217A8E0;
} // Block from 8217A8D8h-8217A8E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217A8E0h
// Function '?MakeInstr_V_CNDGE@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@PAVDependency@2@22@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A8E0);
		  /* 8217A8E0h */ case    0:  		/* bc 4, CR0_EQ, -104 */
		/* 8217A8E0h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8217A878;  }
		/* 8217A8E0h case    0:*/		return 0x8217A8E4;
	}
	return 0x8217A8E4;
} // Block from 8217A8E0h-8217A8E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217A8E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A8E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A8E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A8E4);
		  /* 8217A8E4h */ case    0:  		/* mr R4, R30 */
		/* 8217A8E4h case    0:*/		regs.R4 = regs.R30;
		/* 8217A8E4h case    0:*/		return 0x8217A8E8;
		  /* 8217A8E8h */ case    1:  		/* mr R3, R26 */
		/* 8217A8E8h case    1:*/		regs.R3 = regs.R26;
		/* 8217A8E8h case    1:*/		return 0x8217A8EC;
		  /* 8217A8ECh */ case    2:  		/* bl -10476 */
		/* 8217A8ECh case    2:*/		regs.LR = 0x8217A8F0; return 0x82178000;
		/* 8217A8ECh case    2:*/		return 0x8217A8F0;
		  /* 8217A8F0h */ case    3:  		/* mr R7, R3 */
		/* 8217A8F0h case    3:*/		regs.R7 = regs.R3;
		/* 8217A8F0h case    3:*/		return 0x8217A8F4;
		  /* 8217A8F4h */ case    4:  		/* mr R6, R3 */
		/* 8217A8F4h case    4:*/		regs.R6 = regs.R3;
		/* 8217A8F4h case    4:*/		return 0x8217A8F8;
		  /* 8217A8F8h */ case    5:  		/* mr R5, R28 */
		/* 8217A8F8h case    5:*/		regs.R5 = regs.R28;
		/* 8217A8F8h case    5:*/		return 0x8217A8FC;
		  /* 8217A8FCh */ case    6:  		/* mr R4, R17 */
		/* 8217A8FCh case    6:*/		regs.R4 = regs.R17;
		/* 8217A8FCh case    6:*/		return 0x8217A900;
		  /* 8217A900h */ case    7:  		/* mr R3, R26 */
		/* 8217A900h case    7:*/		regs.R3 = regs.R26;
		/* 8217A900h case    7:*/		return 0x8217A904;
		  /* 8217A904h */ case    8:  		/* bl -2764 */
		/* 8217A904h case    8:*/		regs.LR = 0x8217A908; return 0x82179E38;
		/* 8217A904h case    8:*/		return 0x8217A908;
		  /* 8217A908h */ case    9:  		/* mr R30, R3 */
		/* 8217A908h case    9:*/		regs.R30 = regs.R3;
		/* 8217A908h case    9:*/		return 0x8217A90C;
		  /* 8217A90Ch */ case   10:  		/* mr R3, R26 */
		/* 8217A90Ch case   10:*/		regs.R3 = regs.R26;
		/* 8217A90Ch case   10:*/		return 0x8217A910;
		  /* 8217A910h */ case   11:  		/* mr R4, R30 */
		/* 8217A910h case   11:*/		regs.R4 = regs.R30;
		/* 8217A910h case   11:*/		return 0x8217A914;
		  /* 8217A914h */ case   12:  		/* bl -10516 */
		/* 8217A914h case   12:*/		regs.LR = 0x8217A918; return 0x82178000;
		/* 8217A914h case   12:*/		return 0x8217A918;
		  /* 8217A918h */ case   13:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217A918h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217A918h case   13:*/		return 0x8217A91C;
		  /* 8217A91Ch */ case   14:  		/* mr R31, R3 */
		/* 8217A91Ch case   14:*/		regs.R31 = regs.R3;
		/* 8217A91Ch case   14:*/		return 0x8217A920;
		  /* 8217A920h */ case   15:  		/* ori R11, R11, 32 */
		/* 8217A920h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x20);
		/* 8217A920h case   15:*/		return 0x8217A924;
		  /* 8217A924h */ case   16:  		/* lis R10, 16384 */
		/* 8217A924h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0x4000);
		/* 8217A924h case   16:*/		return 0x8217A928;
		  /* 8217A928h */ case   17:  		/* stw R11, <#[R30 + 8]> */
		/* 8217A928h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217A928h case   17:*/		return 0x8217A92C;
		  /* 8217A92Ch */ case   18:  		/* mr R3, R15 */
		/* 8217A92Ch case   18:*/		regs.R3 = regs.R15;
		/* 8217A92Ch case   18:*/		return 0x8217A930;
		  /* 8217A930h */ case   19:  		/* rlwimi R10, R23, 13, 7, 18 */
		/* 8217A930h case   19:*/		cpu::op::rlwimi<0,13,7,18>(regs,&regs.R10,regs.R23);
		/* 8217A930h case   19:*/		return 0x8217A934;
		  /* 8217A934h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 8217A934h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217A934h case   20:*/		return 0x8217A938;
		  /* 8217A938h */ case   21:  		/* rlwinm R11, R11, 0, 19, 6 */
		/* 8217A938h case   21:*/		cpu::op::rlwinm<0,0,19,6>(regs,&regs.R11,regs.R11);
		/* 8217A938h case   21:*/		return 0x8217A93C;
		  /* 8217A93Ch */ case   22:  		/* or R11, R10, R11 */
		/* 8217A93Ch case   22:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217A93Ch case   22:*/		return 0x8217A940;
		  /* 8217A940h */ case   23:  		/* mr R4, R31 */
		/* 8217A940h case   23:*/		regs.R4 = regs.R31;
		/* 8217A940h case   23:*/		return 0x8217A944;
		  /* 8217A944h */ case   24:  		/* stw R11, <#[R31]> */
		/* 8217A944h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217A944h case   24:*/		return 0x8217A948;
		  /* 8217A948h */ case   25:  		/* bl -10112 */
		/* 8217A948h case   25:*/		regs.LR = 0x8217A94C; return 0x821781C8;
		/* 8217A948h case   25:*/		return 0x8217A94C;
	}
	return 0x8217A94C;
} // Block from 8217A8E4h-8217A94Ch (26 instructions)

//////////////////////////////////////////////////////
// Block at 8217A94Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A94C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A94C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A94C);
		  /* 8217A94Ch */ case    0:  		/* li R22, 0 */
		/* 8217A94Ch case    0:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8217A94Ch case    0:*/		return 0x8217A950;
		  /* 8217A950h */ case    1:  		/* cmplwi CR6, R21, 0 */
		/* 8217A950h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8217A950h case    1:*/		return 0x8217A954;
		  /* 8217A954h */ case    2:  		/* bc 4, CR6_EQ, 20 */
		/* 8217A954h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217A968;  }
		/* 8217A954h case    2:*/		return 0x8217A958;
		  /* 8217A958h */ case    3:  		/* lwz R11, <#[R31 + 12]> */
		/* 8217A958h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8217A958h case    3:*/		return 0x8217A95C;
		  /* 8217A95Ch */ case    4:  		/* lwz R11, <#[R11 + 44]> */
		/* 8217A95Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000002C) );
		/* 8217A95Ch case    4:*/		return 0x8217A960;
		  /* 8217A960h */ case    5:  		/* lwz R22, <#[R11 + 12]> */
		/* 8217A960h case    5:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217A960h case    5:*/		return 0x8217A964;
		  /* 8217A964h */ case    6:  		/* b 504 */
		/* 8217A964h case    6:*/		return 0x8217AB5C;
		/* 8217A964h case    6:*/		return 0x8217A968;
	}
	return 0x8217A968;
} // Block from 8217A94Ch-8217A968h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217A968h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A968( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A968) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A968);
		  /* 8217A968h */ case    0:  		/* li R27, 0 */
		/* 8217A968h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8217A968h case    0:*/		return 0x8217A96C;
		  /* 8217A96Ch */ case    1:  		/* mr R25, R20 */
		/* 8217A96Ch case    1:*/		regs.R25 = regs.R20;
		/* 8217A96Ch case    1:*/		return 0x8217A970;
		  /* 8217A970h */ case    2:  		/* lwz R11, <#[R25 + 12]> */
		/* 8217A970h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 8217A970h case    2:*/		return 0x8217A974;
		  /* 8217A974h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8217A974h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A974h case    3:*/		return 0x8217A978;
		  /* 8217A978h */ case    4:  		/* bc 12, CR6_EQ, 940 */
		/* 8217A978h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217AD24;  }
		/* 8217A978h case    4:*/		return 0x8217A97C;
		  /* 8217A97Ch */ case    5:  		/* lwz R25, <#[R11]> */
		/* 8217A97Ch case    5:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R11 + 0x00000000) );
		/* 8217A97Ch case    5:*/		return 0x8217A980;
		  /* 8217A980h */ case    6:  		/* cmplwi CR6, R25, 0 */
		/* 8217A980h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 8217A980h case    6:*/		return 0x8217A984;
		  /* 8217A984h */ case    7:  		/* bc 12, CR6_EQ, 928 */
		/* 8217A984h case    7:*/		if ( regs.CR[6].eq ) { return 0x8217AD24;  }
		/* 8217A984h case    7:*/		return 0x8217A988;
		  /* 8217A988h */ case    8:  		/* lwz R31, <#[R25 + 20]> */
		/* 8217A988h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000014) );
		/* 8217A988h case    8:*/		return 0x8217A98C;
		  /* 8217A98Ch */ case    9:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217A98Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217A98Ch case    9:*/		return 0x8217A990;
		  /* 8217A990h */ case   10:  		/* bc 4, CR0_EQ, 176 */
		/* 8217A990h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8217AA40;  }
		/* 8217A990h case   10:*/		return 0x8217A994;
		  /* 8217A994h */ case   11:  		/* cmplwi CR0, R31, 0 */
		/* 8217A994h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217A994h case   11:*/		return 0x8217A998;
		  /* 8217A998h */ case   12:  		/* bc 12, CR0_EQ, 168 */
		/* 8217A998h case   12:*/		if ( regs.CR[0].eq ) { return 0x8217AA40;  }
		/* 8217A998h case   12:*/		return 0x8217A99C;
		  /* 8217A99Ch */ case   13:  		/* lwz R11, <#[R31 - 4]> */
		/* 8217A99Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0xFFFFFFFC) );
		/* 8217A99Ch case   13:*/		return 0x8217A9A0;
		  /* 8217A9A0h */ case   14:  		/* cmplw CR6, R11, R21 */
		/* 8217A9A0h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 8217A9A0h case   14:*/		return 0x8217A9A4;
		  /* 8217A9A4h */ case   15:  		/* bc 4, CR6_EQ, 48 */
		/* 8217A9A4h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8217A9D4;  }
		/* 8217A9A4h case   15:*/		return 0x8217A9A8;
		  /* 8217A9A8h */ case   16:  		/* li R6, 1 */
		/* 8217A9A8h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217A9A8h case   16:*/		return 0x8217A9AC;
		  /* 8217A9ACh */ case   17:  		/* li R5, 0 */
		/* 8217A9ACh case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217A9ACh case   17:*/		return 0x8217A9B0;
		  /* 8217A9B0h */ case   18:  		/* li R4, 112 */
		/* 8217A9B0h case   18:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 8217A9B0h case   18:*/		return 0x8217A9B4;
		  /* 8217A9B4h */ case   19:  		/* mr R3, R26 */
		/* 8217A9B4h case   19:*/		regs.R3 = regs.R26;
		/* 8217A9B4h case   19:*/		return 0x8217A9B8;
		  /* 8217A9B8h */ case   20:  		/* bl -91528 */
		/* 8217A9B8h case   20:*/		regs.LR = 0x8217A9BC; return 0x82164430;
		/* 8217A9B8h case   20:*/		return 0x8217A9BC;
		  /* 8217A9BCh */ case   21:  		/* addi R11, R31, -8 */
		/* 8217A9BCh case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF8);
		/* 8217A9BCh case   21:*/		return 0x8217A9C0;
		  /* 8217A9C0h */ case   22:  		/* rlwinm R10, R23, 0, 0, 27 */
		/* 8217A9C0h case   22:*/		cpu::op::rlwinm<0,0,0,27>(regs,&regs.R10,regs.R23);
		/* 8217A9C0h case   22:*/		return 0x8217A9C4;
		  /* 8217A9C4h */ case   23:  		/* lwzx R11, <#[R3 + R11]> */
		/* 8217A9C4h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8217A9C4h case   23:*/		return 0x8217A9C8;
		  /* 8217A9C8h */ case   24:  		/* rlwinm R11, R11, 0, 17, 27 */
		/* 8217A9C8h case   24:*/		cpu::op::rlwinm<0,0,17,27>(regs,&regs.R11,regs.R11);
		/* 8217A9C8h case   24:*/		return 0x8217A9CC;
		  /* 8217A9CCh */ case   25:  		/* cmplw CR6, R11, R10 */
		/* 8217A9CCh case   25:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217A9CCh case   25:*/		return 0x8217A9D0;
		  /* 8217A9D0h */ case   26:  		/* bc 12, CR6_EQ, 32 */
		/* 8217A9D0h case   26:*/		if ( regs.CR[6].eq ) { return 0x8217A9F0;  }
		/* 8217A9D0h case   26:*/		return 0x8217A9D4;
	}
	return 0x8217A9D4;
} // Block from 8217A968h-8217A9D4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8217A9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A9D4);
		  /* 8217A9D4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217A9D4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217A9D4h case    0:*/		return 0x8217A9D8;
		  /* 8217A9D8h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8217A9D8h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8217A9D8h case    1:*/		return 0x8217A9DC;
		  /* 8217A9DCh */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217A9DCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217A9DCh case    2:*/		return 0x8217A9E0;
		  /* 8217A9E0h */ case    3:  		/* bc 4, CR0_EQ, 96 */
		/* 8217A9E0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217AA40;  }
		/* 8217A9E0h case    3:*/		return 0x8217A9E4;
		  /* 8217A9E4h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217A9E4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217A9E4h case    4:*/		return 0x8217A9E8;
		  /* 8217A9E8h */ case    5:  		/* bc 4, CR6_EQ, -76 */
		/* 8217A9E8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217A99C;  }
		/* 8217A9E8h case    5:*/		return 0x8217A9EC;
		  /* 8217A9ECh */ case    6:  		/* b 84 */
		/* 8217A9ECh case    6:*/		return 0x8217AA40;
		/* 8217A9ECh case    6:*/		return 0x8217A9F0;
	}
	return 0x8217A9F0;
} // Block from 8217A9D4h-8217A9F0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217A9F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217A9F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217A9F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217A9F0);
		  /* 8217A9F0h */ case    0:  		/* lwz R11, <#[R31 + 4]> */
		/* 8217A9F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8217A9F0h case    0:*/		return 0x8217A9F4;
		  /* 8217A9F4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217A9F4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217A9F4h case    1:*/		return 0x8217A9F8;
		  /* 8217A9F8h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 8217A9F8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217AA34;  }
		/* 8217A9F8h case    2:*/		return 0x8217A9FC;
		  /* 8217A9FCh */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 8217A9FCh case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8217A9FCh case    3:*/		return 0x8217AA00;
	}
	return 0x8217AA00;
} // Block from 8217A9F0h-8217AA00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217AA00h
// Function '?MakeInstr_V_CNDGT@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAV?$DoubleLinkList@VInstruction@D3DXShader@@$0CE@@2@PAVDependency@2@22@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AA00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AA00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AA00);
		  /* 8217AA00h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8217AA00h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217AA00h case    0:*/		return 0x8217AA04;
		  /* 8217AA04h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8217AA04h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217AA24;  }
		/* 8217AA04h case    1:*/		return 0x8217AA08;
		  /* 8217AA08h */ case    2:  		/* lwz R9, <#[R10 + 8]> */
		/* 8217AA08h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 8217AA08h case    2:*/		return 0x8217AA0C;
		  /* 8217AA0Ch */ case    3:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 8217AA0Ch case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 8217AA0Ch case    3:*/		return 0x8217AA10;
		  /* 8217AA10h */ case    4:  		/* cmplwi CR6, R9, 14080 */
		/* 8217AA10h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 8217AA10h case    4:*/		return 0x8217AA14;
		  /* 8217AA14h */ case    5:  		/* bc 4, CR6_EQ, 16 */
		/* 8217AA14h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217AA24;  }
		/* 8217AA14h case    5:*/		return 0x8217AA18;
		  /* 8217AA18h */ case    6:  		/* lwz R9, <#[R11]> */
		/* 8217AA18h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217AA18h case    6:*/		return 0x8217AA1C;
		  /* 8217AA1Ch */ case    7:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 8217AA1Ch case    7:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 8217AA1Ch case    7:*/		return 0x8217AA20;
		  /* 8217AA20h */ case    8:  		/* bc 4, CR0_EQ, 12 */
		/* 8217AA20h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217AA2C;  }
		/* 8217AA20h case    8:*/		return 0x8217AA24;
	}
	return 0x8217AA24;
} // Block from 8217AA00h-8217AA24h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217AA24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AA24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AA24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AA24);
		  /* 8217AA24h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217AA24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217AA24h case    0:*/		return 0x8217AA28;
		  /* 8217AA28h */ case    1:  		/* b -52 */
		/* 8217AA28h case    1:*/		return 0x8217A9F4;
		/* 8217AA28h case    1:*/		return 0x8217AA2C;
	}
	return 0x8217AA2C;
} // Block from 8217AA24h-8217AA2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217AA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AA2C);
		  /* 8217AA2Ch */ case    0:  		/* mr R29, R10 */
		/* 8217AA2Ch case    0:*/		regs.R29 = regs.R10;
		/* 8217AA2Ch case    0:*/		return 0x8217AA30;
		  /* 8217AA30h */ case    1:  		/* b 8 */
		/* 8217AA30h case    1:*/		return 0x8217AA38;
		/* 8217AA30h case    1:*/		return 0x8217AA34;
	}
	return 0x8217AA34;
} // Block from 8217AA2Ch-8217AA34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217AA34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AA34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AA34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AA34);
		  /* 8217AA34h */ case    0:  		/* li R29, 0 */
		/* 8217AA34h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8217AA34h case    0:*/		return 0x8217AA38;
	}
	return 0x8217AA38;
} // Block from 8217AA34h-8217AA38h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217AA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AA38);
		  /* 8217AA38h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8217AA38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217AA38h case    0:*/		return 0x8217AA3C;
		  /* 8217AA3Ch */ case    1:  		/* bc 4, CR6_EQ, 204 */
		/* 8217AA3Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217AB08;  }
		/* 8217AA3Ch case    1:*/		return 0x8217AA40;
	}
	return 0x8217AA40;
} // Block from 8217AA38h-8217AA40h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217AA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AA40);
		  /* 8217AA40h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 8217AA40h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8217AA40h case    0:*/		return 0x8217AA44;
		  /* 8217AA44h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217AA44h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217AA44h case    1:*/		return 0x8217AA48;
		  /* 8217AA48h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8217AA48h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217AA5C;  }
		/* 8217AA48h case    2:*/		return 0x8217AA4C;
		  /* 8217AA4Ch */ case    3:  		/* lwz R11, <#[R11 + 12]> */
		/* 8217AA4Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217AA4Ch case    3:*/		return 0x8217AA50;
		  /* 8217AA50h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217AA50h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217AA50h case    4:*/		return 0x8217AA54;
		  /* 8217AA54h */ case    5:  		/* li R11, 1 */
		/* 8217AA54h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217AA54h case    5:*/		return 0x8217AA58;
		  /* 8217AA58h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8217AA58h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217AA60;  }
		/* 8217AA58h case    6:*/		return 0x8217AA5C;
	}
	return 0x8217AA5C;
} // Block from 8217AA40h-8217AA5Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217AA5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AA5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AA5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AA5C);
		  /* 8217AA5Ch */ case    0:  		/* li R11, 0 */
		/* 8217AA5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217AA5Ch case    0:*/		return 0x8217AA60;
	}
	return 0x8217AA60;
} // Block from 8217AA5Ch-8217AA60h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217AA60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AA60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AA60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AA60);
		  /* 8217AA60h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217AA60h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217AA60h case    0:*/		return 0x8217AA64;
		  /* 8217AA64h */ case    1:  		/* bc 12, CR0_EQ, -244 */
		/* 8217AA64h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217A970;  }
		/* 8217AA64h case    1:*/		return 0x8217AA68;
		  /* 8217AA68h */ case    2:  		/* mr R6, R24 */
		/* 8217AA68h case    2:*/		regs.R6 = regs.R24;
		/* 8217AA68h case    2:*/		return 0x8217AA6C;
		  /* 8217AA6Ch */ case    3:  		/* addi R5, R25, 24 */
		/* 8217AA6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R25,0x18);
		/* 8217AA6Ch case    3:*/		return 0x8217AA70;
		  /* 8217AA70h */ case    4:  		/* mr R4, R25 */
		/* 8217AA70h case    4:*/		regs.R4 = regs.R25;
		/* 8217AA70h case    4:*/		return 0x8217AA74;
		  /* 8217AA74h */ case    5:  		/* mr R3, R26 */
		/* 8217AA74h case    5:*/		regs.R3 = regs.R26;
		/* 8217AA74h case    5:*/		return 0x8217AA78;
		  /* 8217AA78h */ case    6:  		/* bl 696456 */
		/* 8217AA78h case    6:*/		regs.LR = 0x8217AA7C; return 0x82224B00;
		/* 8217AA78h case    6:*/		return 0x8217AA7C;
		  /* 8217AA7Ch */ case    7:  		/* mr R27, R3 */
		/* 8217AA7Ch case    7:*/		regs.R27 = regs.R3;
		/* 8217AA7Ch case    7:*/		return 0x8217AA80;
		  /* 8217AA80h */ case    8:  		/* cmplwi CR6, R24, 0 */
		/* 8217AA80h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217AA80h case    8:*/		return 0x8217AA84;
		  /* 8217AA84h */ case    9:  		/* bc 12, CR6_EQ, 116 */
		/* 8217AA84h case    9:*/		if ( regs.CR[6].eq ) { return 0x8217AAF8;  }
		/* 8217AA84h case    9:*/		return 0x8217AA88;
		  /* 8217AA88h */ case   10:  		/* li R6, 1 */
		/* 8217AA88h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217AA88h case   10:*/		return 0x8217AA8C;
		  /* 8217AA8Ch */ case   11:  		/* li R5, 0 */
		/* 8217AA8Ch case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217AA8Ch case   11:*/		return 0x8217AA90;
		  /* 8217AA90h */ case   12:  		/* li R4, 112 */
		/* 8217AA90h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x70);
		/* 8217AA90h case   12:*/		return 0x8217AA94;
		  /* 8217AA94h */ case   13:  		/* mr R3, R26 */
		/* 8217AA94h case   13:*/		regs.R3 = regs.R26;
		/* 8217AA94h case   13:*/		return 0x8217AA98;
		  /* 8217AA98h */ case   14:  		/* bl -91752 */
		/* 8217AA98h case   14:*/		regs.LR = 0x8217AA9C; return 0x82164430;
		/* 8217AA98h case   14:*/		return 0x8217AA9C;
		  /* 8217AA9Ch */ case   15:  		/* addi R30, R3, -8 */
		/* 8217AA9Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R3,0xFFFFFFF8);
		/* 8217AA9Ch case   15:*/		return 0x8217AAA0;
		  /* 8217AAA0h */ case   16:  		/* rlwinm R28, R23, 0, 17, 31 */
		/* 8217AAA0h case   16:*/		cpu::op::rlwinm<0,0,17,31>(regs,&regs.R28,regs.R23);
		/* 8217AAA0h case   16:*/		return 0x8217AAA4;
		  /* 8217AAA4h */ case   17:  		/* addi R29, R27, 40 */
		/* 8217AAA4h case   17:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x28);
		/* 8217AAA4h case   17:*/		return 0x8217AAA8;
		  /* 8217AAA8h */ case   18:  		/* mr R31, R24 */
		/* 8217AAA8h case   18:*/		regs.R31 = regs.R24;
		/* 8217AAA8h case   18:*/		return 0x8217AAAC;
		  /* 8217AAACh */ case   19:  		/* mr R4, R25 */
		/* 8217AAACh case   19:*/		regs.R4 = regs.R25;
		/* 8217AAACh case   19:*/		return 0x8217AAB0;
		  /* 8217AAB0h */ case   20:  		/* mr R3, R26 */
		/* 8217AAB0h case   20:*/		regs.R3 = regs.R26;
		/* 8217AAB0h case   20:*/		return 0x8217AAB4;
		  /* 8217AAB4h */ case   21:  		/* bl 696204 */
		/* 8217AAB4h case   21:*/		regs.LR = 0x8217AAB8; return 0x82224A40;
		/* 8217AAB4h case   21:*/		return 0x8217AAB8;
		  /* 8217AAB8h */ case   22:  		/* mr R14, R3 */
		/* 8217AAB8h case   22:*/		regs.R14 = regs.R3;
		/* 8217AAB8h case   22:*/		return 0x8217AABC;
		  /* 8217AABCh */ case   23:  		/* mr R3, R26 */
		/* 8217AABCh case   23:*/		regs.R3 = regs.R26;
		/* 8217AABCh case   23:*/		return 0x8217AAC0;
		  /* 8217AAC0h */ case   24:  		/* mr R4, R14 */
		/* 8217AAC0h case   24:*/		regs.R4 = regs.R14;
		/* 8217AAC0h case   24:*/		return 0x8217AAC4;
		  /* 8217AAC4h */ case   25:  		/* bl -10948 */
		/* 8217AAC4h case   25:*/		regs.LR = 0x8217AAC8; return 0x82178000;
		/* 8217AAC4h case   25:*/		return 0x8217AAC8;
		  /* 8217AAC8h */ case   26:  		/* mr R4, R3 */
		/* 8217AAC8h case   26:*/		regs.R4 = regs.R3;
		/* 8217AAC8h case   26:*/		return 0x8217AACC;
		  /* 8217AACCh */ case   27:  		/* mr R3, R27 */
		/* 8217AACCh case   27:*/		regs.R3 = regs.R27;
		/* 8217AACCh case   27:*/		return 0x8217AAD0;
		  /* 8217AAD0h */ case   28:  		/* bl -10504 */
		/* 8217AAD0h case   28:*/		regs.LR = 0x8217AAD4; return 0x821781C8;
		/* 8217AAD0h case   28:*/		return 0x8217AAD4;
		  /* 8217AAD4h */ case   29:  		/* stwu R3, <#[R29 + 4]> */
		/* 8217AAD4h case   29:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 8217AAD4h case   29:*/		return 0x8217AAD8;
		  /* 8217AAD8h */ case   30:  		/* stw R21, <#[R14 - 4]> */
		/* 8217AAD8h case   30:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R14 + 0xFFFFFFFC) );
		/* 8217AAD8h case   30:*/		return 0x8217AADC;
		  /* 8217AADCh */ case   31:  		/* addic. R31, R31, -1 */
		/* 8217AADCh case   31:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 8217AADCh case   31:*/		return 0x8217AAE0;
		  /* 8217AAE0h */ case   32:  		/* lwzx R11, <#[R30 + R14]> */
		/* 8217AAE0h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R14 + 0x00000000) );
		/* 8217AAE0h case   32:*/		return 0x8217AAE4;
		  /* 8217AAE4h */ case   33:  		/* rlwinm R11, R11, 0, 0, 16 */
		/* 8217AAE4h case   33:*/		cpu::op::rlwinm<0,0,0,16>(regs,&regs.R11,regs.R11);
		/* 8217AAE4h case   33:*/		return 0x8217AAE8;
		  /* 8217AAE8h */ case   34:  		/* or R11, R11, R28 */
		/* 8217AAE8h case   34:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 8217AAE8h case   34:*/		return 0x8217AAEC;
		  /* 8217AAECh */ case   35:  		/* stwx R11, <#[R30 + R14]> */
		/* 8217AAECh case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + regs.R14 + 0x00000000) );
		/* 8217AAECh case   35:*/		return 0x8217AAF0;
		  /* 8217AAF0h */ case   36:  		/* bc 4, CR0_EQ, -68 */
		/* 8217AAF0h case   36:*/		if ( !regs.CR[0].eq ) { return 0x8217AAAC;  }
		/* 8217AAF0h case   36:*/		return 0x8217AAF4;
		  /* 8217AAF4h */ case   37:  		/* lwz R14, <#[R1 + 84]> */
		/* 8217AAF4h case   37:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R1 + 0x00000054) );
		/* 8217AAF4h case   37:*/		return 0x8217AAF8;
	}
	return 0x8217AAF8;
} // Block from 8217AA60h-8217AAF8h (38 instructions)

//////////////////////////////////////////////////////
// Block at 8217AAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AAF8);
		  /* 8217AAF8h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 8217AAF8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8217AAF8h case    0:*/		return 0x8217AAFC;
		  /* 8217AAFCh */ case    1:  		/* bc 4, CR6_EQ, -396 */
		/* 8217AAFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217A970;  }
		/* 8217AAFCh case    1:*/		return 0x8217AB00;
		  /* 8217AB00h */ case    2:  		/* mr R22, R27 */
		/* 8217AB00h case    2:*/		regs.R22 = regs.R27;
		/* 8217AB00h case    2:*/		return 0x8217AB04;
		  /* 8217AB04h */ case    3:  		/* b -404 */
		/* 8217AB04h case    3:*/		return 0x8217A970;
		/* 8217AB04h case    3:*/		return 0x8217AB08;
	}
	return 0x8217AB08;
} // Block from 8217AAF8h-8217AB08h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217AB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AB08);
		  /* 8217AB08h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 8217AB08h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8217AB08h case    0:*/		return 0x8217AB0C;
		  /* 8217AB0Ch */ case    1:  		/* bc 12, CR6_EQ, 68 */
		/* 8217AB0Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8217AB50;  }
		/* 8217AB0Ch case    1:*/		return 0x8217AB10;
		  /* 8217AB10h */ case    2:  		/* li R31, 0 */
		/* 8217AB10h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8217AB10h case    2:*/		return 0x8217AB14;
		  /* 8217AB14h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 8217AB14h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217AB14h case    3:*/		return 0x8217AB18;
		  /* 8217AB18h */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 8217AB18h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217AB50;  }
		/* 8217AB18h case    4:*/		return 0x8217AB1C;
		  /* 8217AB1Ch */ case    5:  		/* addi R30, R29, 40 */
		/* 8217AB1Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R29,0x28);
		/* 8217AB1Ch case    5:*/		return 0x8217AB20;
	}
	return 0x8217AB20;
} // Block from 8217AB08h-8217AB20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217AB20h
// Function '?MakeInstr_S_PRED_SET_CLR@Compiler@D3DXShader@@QAAPAVInstruction@2@W4PlacementMethod@12@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AB20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AB20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AB20);
		  /* 8217AB20h */ case    0:  		/* lwzu R11, <#[R30 + 4]> */
		/* 8217AB20h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8217AB20h case    0:*/		return 0x8217AB24;
		  /* 8217AB24h */ case    1:  		/* mr R5, R31 */
		/* 8217AB24h case    1:*/		regs.R5 = regs.R31;
		/* 8217AB24h case    1:*/		return 0x8217AB28;
		  /* 8217AB28h */ case    2:  		/* mr R4, R27 */
		/* 8217AB28h case    2:*/		regs.R4 = regs.R27;
		/* 8217AB28h case    2:*/		return 0x8217AB2C;
		  /* 8217AB2Ch */ case    3:  		/* mr R3, R26 */
		/* 8217AB2Ch case    3:*/		regs.R3 = regs.R26;
		/* 8217AB2Ch case    3:*/		return 0x8217AB30;
		  /* 8217AB30h */ case    4:  		/* lwz R28, <#[R11 + 12]> */
		/* 8217AB30h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217AB30h case    4:*/		return 0x8217AB34;
		  /* 8217AB34h */ case    5:  		/* bl -10788 */
		/* 8217AB34h case    5:*/		regs.LR = 0x8217AB38; return 0x82178110;
		/* 8217AB34h case    5:*/		return 0x8217AB38;
		  /* 8217AB38h */ case    6:  		/* mr R4, R3 */
		/* 8217AB38h case    6:*/		regs.R4 = regs.R3;
		/* 8217AB38h case    6:*/		return 0x8217AB3C;
		  /* 8217AB3Ch */ case    7:  		/* mr R3, R28 */
		/* 8217AB3Ch case    7:*/		regs.R3 = regs.R28;
		/* 8217AB3Ch case    7:*/		return 0x8217AB40;
		  /* 8217AB40h */ case    8:  		/* bl -10616 */
		/* 8217AB40h case    8:*/		regs.LR = 0x8217AB44; return 0x821781C8;
		/* 8217AB40h case    8:*/		return 0x8217AB44;
		  /* 8217AB44h */ case    9:  		/* addi R31, R31, 1 */
		/* 8217AB44h case    9:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8217AB44h case    9:*/		return 0x8217AB48;
		  /* 8217AB48h */ case   10:  		/* cmplw CR6, R31, R24 */
		/* 8217AB48h case   10:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R24);
		/* 8217AB48h case   10:*/		return 0x8217AB4C;
		  /* 8217AB4Ch */ case   11:  		/* bc 12, CR6_LT, -44 */
		/* 8217AB4Ch case   11:*/		if ( regs.CR[6].lt ) { return 0x8217AB20;  }
		/* 8217AB4Ch case   11:*/		return 0x8217AB50;
	}
	return 0x8217AB50;
} // Block from 8217AB20h-8217AB50h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217AB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AB50);
		  /* 8217AB50h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 8217AB50h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8217AB50h case    0:*/		return 0x8217AB54;
		  /* 8217AB54h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 8217AB54h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217AB5C;  }
		/* 8217AB54h case    1:*/		return 0x8217AB58;
		  /* 8217AB58h */ case    2:  		/* mr R22, R29 */
		/* 8217AB58h case    2:*/		regs.R22 = regs.R29;
		/* 8217AB58h case    2:*/		return 0x8217AB5C;
	}
	return 0x8217AB5C;
} // Block from 8217AB50h-8217AB5Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217AB5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AB5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AB5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AB5C);
		  /* 8217AB5Ch */ case    0:  		/* lwz R11, <#[R19 + 8]> */
		/* 8217AB5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 8217AB5Ch case    0:*/		return 0x8217AB60;
		  /* 8217AB60h */ case    1:  		/* lwz R10, <#[R18]> */
		/* 8217AB60h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R18 + 0x00000000) );
		/* 8217AB60h case    1:*/		return 0x8217AB64;
		  /* 8217AB64h */ case    2:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217AB64h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217AB64h case    2:*/		return 0x8217AB68;
		  /* 8217AB68h */ case    3:  		/* rlwinm R29, R10, 19, 28, 31 */
		/* 8217AB68h case    3:*/		cpu::op::rlwinm<0,19,28,31>(regs,&regs.R29,regs.R10);
		/* 8217AB68h case    3:*/		return 0x8217AB6C;
		  /* 8217AB6Ch */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 8217AB6Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8217AB6Ch case    4:*/		return 0x8217AB70;
		  /* 8217AB70h */ case    5:  		/* bc 4, CR6_EQ, 184 */
		/* 8217AB70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217AC28;  }
		/* 8217AB70h case    5:*/		return 0x8217AB74;
		  /* 8217AB74h */ case    6:  		/* lwz R28, <#[R19 + 44]> */
		/* 8217AB74h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R19 + 0x0000002C) );
		/* 8217AB74h case    6:*/		return 0x8217AB78;
	}
	return 0x8217AB78;
} // Block from 8217AB5Ch-8217AB78h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217AB78h
// Function '?MakeInstr_S_PRED_SET_RESTORE@Compiler@D3DXShader@@QAAPAVInstruction@2@PAVBlock@2@PAVDependency@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AB78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AB78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AB78);
		  /* 8217AB78h */ case    0:  		/* li R30, 0 */
		/* 8217AB78h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8217AB78h case    0:*/		return 0x8217AB7C;
		  /* 8217AB7Ch */ case    1:  		/* lwz R11, <#[R28]> */
		/* 8217AB7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8217AB7Ch case    1:*/		return 0x8217AB80;
		  /* 8217AB80h */ case    2:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8217AB80h case    2:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8217AB80h case    2:*/		return 0x8217AB84;
		  /* 8217AB84h */ case    3:  		/* bc 12, CR0_EQ, 300 */
		/* 8217AB84h case    3:*/		if ( regs.CR[0].eq ) { return 0x8217ACB0;  }
		/* 8217AB84h case    3:*/		return 0x8217AB88;
		  /* 8217AB88h */ case    4:  		/* addi R11, R29, -1 */
		/* 8217AB88h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 8217AB88h case    4:*/		return 0x8217AB8C;
		  /* 8217AB8Ch */ case    5:  		/* mr R5, R30 */
		/* 8217AB8Ch case    5:*/		regs.R5 = regs.R30;
		/* 8217AB8Ch case    5:*/		return 0x8217AB90;
		  /* 8217AB90h */ case    6:  		/* andc R11, R29, R11 */
		/* 8217AB90h case    6:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 8217AB90h case    6:*/		return 0x8217AB94;
		  /* 8217AB94h */ case    7:  		/* mr R4, R28 */
		/* 8217AB94h case    7:*/		regs.R4 = regs.R28;
		/* 8217AB94h case    7:*/		return 0x8217AB98;
		  /* 8217AB98h */ case    8:  		/* cntlzw R10, R11 */
		/* 8217AB98h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R11);
		/* 8217AB98h case    8:*/		return 0x8217AB9C;
		  /* 8217AB9Ch */ case    9:  		/* mr R3, R26 */
		/* 8217AB9Ch case    9:*/		regs.R3 = regs.R26;
		/* 8217AB9Ch case    9:*/		return 0x8217ABA0;
		  /* 8217ABA0h */ case   10:  		/* subf R29, R11, R29 */
		/* 8217ABA0h case   10:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 8217ABA0h case   10:*/		return 0x8217ABA4;
		  /* 8217ABA4h */ case   11:  		/* subfic R27, R10, 31 */
		/* 8217ABA4h case   11:*/		cpu::op::subfic<0>(regs,&regs.R27,regs.R10,0x1F);
		/* 8217ABA4h case   11:*/		return 0x8217ABA8;
		  /* 8217ABA8h */ case   12:  		/* bl 470488 */
		/* 8217ABA8h case   12:*/		regs.LR = 0x8217ABAC; return 0x821ED980;
		/* 8217ABA8h case   12:*/		return 0x8217ABAC;
		  /* 8217ABACh */ case   13:  		/* lwz R11, <#[R3 + 12]> */
		/* 8217ABACh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217ABACh case   13:*/		return 0x8217ABB0;
		  /* 8217ABB0h */ case   14:  		/* mr R31, R3 */
		/* 8217ABB0h case   14:*/		regs.R31 = regs.R3;
		/* 8217ABB0h case   14:*/		return 0x8217ABB4;
		  /* 8217ABB4h */ case   15:  		/* lwz R11, <#[R11 + 28]> */
		/* 8217ABB4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 8217ABB4h case   15:*/		return 0x8217ABB8;
		  /* 8217ABB8h */ case   16:  		/* cmplw CR6, R11, R20 */
		/* 8217ABB8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R20);
		/* 8217ABB8h case   16:*/		return 0x8217ABBC;
		  /* 8217ABBCh */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 8217ABBCh case   17:*/		if ( regs.CR[6].eq ) { return 0x8217ABE8;  }
		/* 8217ABBCh case   17:*/		return 0x8217ABC0;
		  /* 8217ABC0h */ case   18:  		/* mr R4, R20 */
		/* 8217ABC0h case   18:*/		regs.R4 = regs.R20;
		/* 8217ABC0h case   18:*/		return 0x8217ABC4;
		  /* 8217ABC4h */ case   19:  		/* mr R3, R26 */
		/* 8217ABC4h case   19:*/		regs.R3 = regs.R26;
		/* 8217ABC4h case   19:*/		return 0x8217ABC8;
		  /* 8217ABC8h */ case   20:  		/* bl 695928 */
		/* 8217ABC8h case   20:*/		regs.LR = 0x8217ABCC; return 0x82224A40;
		/* 8217ABC8h case   20:*/		return 0x8217ABCC;
		  /* 8217ABCCh */ case   21:  		/* mr R4, R31 */
		/* 8217ABCCh case   21:*/		regs.R4 = regs.R31;
		/* 8217ABCCh case   21:*/		return 0x8217ABD0;
		  /* 8217ABD0h */ case   22:  		/* mr R25, R3 */
		/* 8217ABD0h case   22:*/		regs.R25 = regs.R3;
		/* 8217ABD0h case   22:*/		return 0x8217ABD4;
		  /* 8217ABD4h */ case   23:  		/* bl -10764 */
		/* 8217ABD4h case   23:*/		regs.LR = 0x8217ABD8; return 0x821781C8;
		/* 8217ABD4h case   23:*/		return 0x8217ABD8;
		  /* 8217ABD8h */ case   24:  		/* mr R4, R25 */
		/* 8217ABD8h case   24:*/		regs.R4 = regs.R25;
		/* 8217ABD8h case   24:*/		return 0x8217ABDC;
		  /* 8217ABDCh */ case   25:  		/* mr R3, R26 */
		/* 8217ABDCh case   25:*/		regs.R3 = regs.R26;
		/* 8217ABDCh case   25:*/		return 0x8217ABE0;
		  /* 8217ABE0h */ case   26:  		/* bl -11232 */
		/* 8217ABE0h case   26:*/		regs.LR = 0x8217ABE4; return 0x82178000;
		/* 8217ABE0h case   26:*/		return 0x8217ABE4;
		  /* 8217ABE4h */ case   27:  		/* mr R31, R3 */
		/* 8217ABE4h case   27:*/		regs.R31 = regs.R3;
		/* 8217ABE4h case   27:*/		return 0x8217ABE8;
	}
	return 0x8217ABE8;
} // Block from 8217AB78h-8217ABE8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217ABE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ABE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ABE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ABE8);
		  /* 8217ABE8h */ case    0:  		/* lwz R11, <#[R22 + 8]> */
		/* 8217ABE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 8217ABE8h case    0:*/		return 0x8217ABEC;
		  /* 8217ABECh */ case    1:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 8217ABECh case    1:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 8217ABECh case    1:*/		return 0x8217ABF0;
		  /* 8217ABF0h */ case    2:  		/* cmplw CR6, R27, R11 */
		/* 8217ABF0h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8217ABF0h case    2:*/		return 0x8217ABF4;
		  /* 8217ABF4h */ case    3:  		/* bc 4, CR6_LT, 316 */
		/* 8217ABF4h case    3:*/		if ( !regs.CR[6].lt ) { return 0x8217AD30;  }
		/* 8217ABF4h case    3:*/		return 0x8217ABF8;
		  /* 8217ABF8h */ case    4:  		/* addi R11, R27, 11 */
		/* 8217ABF8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xB);
		/* 8217ABF8h case    4:*/		return 0x8217ABFC;
		  /* 8217ABFCh */ case    5:  		/* mr R4, R31 */
		/* 8217ABFCh case    5:*/		regs.R4 = regs.R31;
		/* 8217ABFCh case    5:*/		return 0x8217AC00;
		  /* 8217AC00h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217AC00h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217AC00h case    6:*/		return 0x8217AC04;
		  /* 8217AC04h */ case    7:  		/* lwzx R11, <#[R11 + R22]> */
		/* 8217AC04h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 8217AC04h case    7:*/		return 0x8217AC08;
		  /* 8217AC08h */ case    8:  		/* lwz R3, <#[R11 + 12]> */
		/* 8217AC08h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217AC08h case    8:*/		return 0x8217AC0C;
		  /* 8217AC0Ch */ case    9:  		/* bl -10820 */
		/* 8217AC0Ch case    9:*/		regs.LR = 0x8217AC10; return 0x821781C8;
		/* 8217AC0Ch case    9:*/		return 0x8217AC10;
		  /* 8217AC10h */ case   10:  		/* lwz R11, <#[R28]> */
		/* 8217AC10h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8217AC10h case   10:*/		return 0x8217AC14;
		  /* 8217AC14h */ case   11:  		/* addi R30, R30, 1 */
		/* 8217AC14h case   11:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8217AC14h case   11:*/		return 0x8217AC18;
	}
	return 0x8217AC18;
} // Block from 8217ABE8h-8217AC18h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217AC18h
// Function '?FindControlChildren@Compiler@D3DXShader@@AAA?AW4ControlStructureType@12@PAVBlock@2@PAVInstruction@2@PA_NPAPAV42@3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AC18);
		  /* 8217AC18h */ case    0:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 8217AC18h case    0:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 8217AC18h case    0:*/		return 0x8217AC1C;
		  /* 8217AC1Ch */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 8217AC1Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8217AC1Ch case    1:*/		return 0x8217AC20;
		  /* 8217AC20h */ case    2:  		/* bc 12, CR6_LT, -152 */
		/* 8217AC20h case    2:*/		if ( regs.CR[6].lt ) { return 0x8217AB88;  }
		/* 8217AC20h case    2:*/		return 0x8217AC24;
		  /* 8217AC24h */ case    3:  		/* b 140 */
		/* 8217AC24h case    3:*/		return 0x8217ACB0;
		/* 8217AC24h case    3:*/		return 0x8217AC28;
	}
	return 0x8217AC28;
} // Block from 8217AC18h-8217AC28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217AC28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AC28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AC28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AC28);
		  /* 8217AC28h */ case    0:  		/* cmplwi CR6, R11, 121 */
		/* 8217AC28h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000079);
		/* 8217AC28h case    0:*/		return 0x8217AC2C;
		  /* 8217AC2Ch */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 8217AC2Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217AC38;  }
		/* 8217AC2Ch case    1:*/		return 0x8217AC30;
		  /* 8217AC30h */ case    2:  		/* fmr FR1, FR31 */
		/* 8217AC30h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8217AC30h case    2:*/		return 0x8217AC34;
		  /* 8217AC34h */ case    3:  		/* b 8 */
		/* 8217AC34h case    3:*/		return 0x8217AC3C;
		/* 8217AC34h case    3:*/		return 0x8217AC38;
	}
	return 0x8217AC38;
} // Block from 8217AC28h-8217AC38h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217AC38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AC38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AC38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AC38);
		  /* 8217AC38h */ case    0:  		/* fmr FR1, FR30 */
		/* 8217AC38h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR30);
		/* 8217AC38h case    0:*/		return 0x8217AC3C;
	}
	return 0x8217AC3C;
} // Block from 8217AC38h-8217AC3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217AC3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AC3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AC3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AC3C);
		  /* 8217AC3Ch */ case    0:  		/* li R4, 1 */
		/* 8217AC3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217AC3Ch case    0:*/		return 0x8217AC40;
		  /* 8217AC40h */ case    1:  		/* fmr FR4, FR31 */
		/* 8217AC40h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 8217AC40h case    1:*/		return 0x8217AC44;
		  /* 8217AC44h */ case    2:  		/* mr R3, R26 */
		/* 8217AC44h case    2:*/		regs.R3 = regs.R26;
		/* 8217AC44h case    2:*/		return 0x8217AC48;
		  /* 8217AC48h */ case    3:  		/* fmr FR3, FR31 */
		/* 8217AC48h case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 8217AC48h case    3:*/		return 0x8217AC4C;
		  /* 8217AC4Ch */ case    4:  		/* fmr FR2, FR31 */
		/* 8217AC4Ch case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 8217AC4Ch case    4:*/		return 0x8217AC50;
		  /* 8217AC50h */ case    5:  		/* bl 720648 */
		/* 8217AC50h case    5:*/		regs.LR = 0x8217AC54; return 0x8222AB58;
		/* 8217AC50h case    5:*/		return 0x8217AC54;
		  /* 8217AC54h */ case    6:  		/* mr R31, R3 */
		/* 8217AC54h case    6:*/		regs.R31 = regs.R3;
		/* 8217AC54h case    6:*/		return 0x8217AC58;
		  /* 8217AC58h */ case    7:  		/* mr R4, R20 */
		/* 8217AC58h case    7:*/		regs.R4 = regs.R20;
		/* 8217AC58h case    7:*/		return 0x8217AC5C;
		  /* 8217AC5Ch */ case    8:  		/* mr R3, R26 */
		/* 8217AC5Ch case    8:*/		regs.R3 = regs.R26;
		/* 8217AC5Ch case    8:*/		return 0x8217AC60;
		  /* 8217AC60h */ case    9:  		/* bl 695776 */
		/* 8217AC60h case    9:*/		regs.LR = 0x8217AC64; return 0x82224A40;
		/* 8217AC60h case    9:*/		return 0x8217AC64;
		  /* 8217AC64h */ case   10:  		/* mr R30, R3 */
		/* 8217AC64h case   10:*/		regs.R30 = regs.R3;
		/* 8217AC64h case   10:*/		return 0x8217AC68;
		  /* 8217AC68h */ case   11:  		/* li R5, 0 */
		/* 8217AC68h case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217AC68h case   11:*/		return 0x8217AC6C;
		  /* 8217AC6Ch */ case   12:  		/* mr R4, R31 */
		/* 8217AC6Ch case   12:*/		regs.R4 = regs.R31;
		/* 8217AC6Ch case   12:*/		return 0x8217AC70;
		  /* 8217AC70h */ case   13:  		/* mr R3, R26 */
		/* 8217AC70h case   13:*/		regs.R3 = regs.R26;
		/* 8217AC70h case   13:*/		return 0x8217AC74;
		  /* 8217AC74h */ case   14:  		/* bl -11108 */
		/* 8217AC74h case   14:*/		regs.LR = 0x8217AC78; return 0x82178110;
		/* 8217AC74h case   14:*/		return 0x8217AC78;
		  /* 8217AC78h */ case   15:  		/* mr R4, R3 */
		/* 8217AC78h case   15:*/		regs.R4 = regs.R3;
		/* 8217AC78h case   15:*/		return 0x8217AC7C;
		  /* 8217AC7Ch */ case   16:  		/* mr R3, R30 */
		/* 8217AC7Ch case   16:*/		regs.R3 = regs.R30;
		/* 8217AC7Ch case   16:*/		return 0x8217AC80;
		  /* 8217AC80h */ case   17:  		/* bl -10936 */
		/* 8217AC80h case   17:*/		regs.LR = 0x8217AC84; return 0x821781C8;
		/* 8217AC80h case   17:*/		return 0x8217AC84;
		  /* 8217AC84h */ case   18:  		/* cntlzw R11, R29 */
		/* 8217AC84h case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R29);
		/* 8217AC84h case   18:*/		return 0x8217AC88;
		  /* 8217AC88h */ case   19:  		/* mr R4, R30 */
		/* 8217AC88h case   19:*/		regs.R4 = regs.R30;
		/* 8217AC88h case   19:*/		return 0x8217AC8C;
		  /* 8217AC8Ch */ case   20:  		/* subfic R11, R11, 42 */
		/* 8217AC8Ch case   20:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x2A);
		/* 8217AC8Ch case   20:*/		return 0x8217AC90;
		  /* 8217AC90h */ case   21:  		/* mr R3, R26 */
		/* 8217AC90h case   21:*/		regs.R3 = regs.R26;
		/* 8217AC90h case   21:*/		return 0x8217AC94;
		  /* 8217AC94h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217AC94h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217AC94h case   22:*/		return 0x8217AC98;
		  /* 8217AC98h */ case   23:  		/* lwzx R11, <#[R11 + R22]> */
		/* 8217AC98h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 8217AC98h case   23:*/		return 0x8217AC9C;
		  /* 8217AC9Ch */ case   24:  		/* lwz R31, <#[R11 + 12]> */
		/* 8217AC9Ch case   24:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217AC9Ch case   24:*/		return 0x8217ACA0;
		  /* 8217ACA0h */ case   25:  		/* bl -11424 */
		/* 8217ACA0h case   25:*/		regs.LR = 0x8217ACA4; return 0x82178000;
		/* 8217ACA0h case   25:*/		return 0x8217ACA4;
		  /* 8217ACA4h */ case   26:  		/* mr R4, R3 */
		/* 8217ACA4h case   26:*/		regs.R4 = regs.R3;
		/* 8217ACA4h case   26:*/		return 0x8217ACA8;
		  /* 8217ACA8h */ case   27:  		/* mr R3, R31 */
		/* 8217ACA8h case   27:*/		regs.R3 = regs.R31;
		/* 8217ACA8h case   27:*/		return 0x8217ACAC;
		  /* 8217ACACh */ case   28:  		/* bl -10980 */
		/* 8217ACACh case   28:*/		regs.LR = 0x8217ACB0; return 0x821781C8;
		/* 8217ACACh case   28:*/		return 0x8217ACB0;
	}
	return 0x8217ACB0;
} // Block from 8217AC3Ch-8217ACB0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8217ACB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ACB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ACB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ACB0);
		  /* 8217ACB0h */ case    0:  		/* mr R5, R26 */
		/* 8217ACB0h case    0:*/		regs.R5 = regs.R26;
		/* 8217ACB0h case    0:*/		return 0x8217ACB4;
		  /* 8217ACB4h */ case    1:  		/* mr R4, R18 */
		/* 8217ACB4h case    1:*/		regs.R4 = regs.R18;
		/* 8217ACB4h case    1:*/		return 0x8217ACB8;
		  /* 8217ACB8h */ case    2:  		/* mr R3, R16 */
		/* 8217ACB8h case    2:*/		regs.R3 = regs.R16;
		/* 8217ACB8h case    2:*/		return 0x8217ACBC;
		  /* 8217ACBCh */ case    3:  		/* bl -9132 */
		/* 8217ACBCh case    3:*/		regs.LR = 0x8217ACC0; return 0x82178910;
		/* 8217ACBCh case    3:*/		return 0x8217ACC0;
		  /* 8217ACC0h */ case    4:  		/* mr R4, R19 */
		/* 8217ACC0h case    4:*/		regs.R4 = regs.R19;
		/* 8217ACC0h case    4:*/		return 0x8217ACC4;
		  /* 8217ACC4h */ case    5:  		/* mr R3, R26 */
		/* 8217ACC4h case    5:*/		regs.R3 = regs.R26;
		/* 8217ACC4h case    5:*/		return 0x8217ACC8;
		  /* 8217ACC8h */ case    6:  		/* bl 723336 */
		/* 8217ACC8h case    6:*/		regs.LR = 0x8217ACCC; return 0x8222B650;
		/* 8217ACC8h case    6:*/		return 0x8217ACCC;
		  /* 8217ACCCh */ case    7:  		/* lbz R31, <#[R1 + 80]> */
		/* 8217ACCCh case    7:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 8217ACCCh case    7:*/		return 0x8217ACD0;
	}
	return 0x8217ACD0;
} // Block from 8217ACB0h-8217ACD0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217ACD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ACD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ACD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ACD0);
		  /* 8217ACD0h */ case    0:  		/* lwz R11, <#[R14]> */
		/* 8217ACD0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R14 + 0x00000000) );
		/* 8217ACD0h case    0:*/		return 0x8217ACD4;
		  /* 8217ACD4h */ case    1:  		/* cmplw CR6, R11, R18 */
		/* 8217ACD4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R18);
		/* 8217ACD4h case    1:*/		return 0x8217ACD8;
		  /* 8217ACD8h */ case    2:  		/* bc 4, CR6_EQ, -1388 */
		/* 8217ACD8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217A76C;  }
		/* 8217ACD8h case    2:*/		return 0x8217ACDC;
		  /* 8217ACDCh */ case    3:  		/* addi R14, R18, 4 */
		/* 8217ACDCh case    3:*/		cpu::op::addi<0>(regs,&regs.R14,regs.R18,0x4);
		/* 8217ACDCh case    3:*/		return 0x8217ACE0;
		  /* 8217ACE0h */ case    4:  		/* b -1400 */
		/* 8217ACE0h case    4:*/		return 0x8217A768;
		/* 8217ACE0h case    4:*/		return 0x8217ACE4;
	}
	return 0x8217ACE4;
} // Block from 8217ACD0h-8217ACE4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217ACE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ACE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ACE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ACE4);
		  /* 8217ACE4h */ case    0:  		/* lwz R11, <#[R16]> */
		/* 8217ACE4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8217ACE4h case    0:*/		return 0x8217ACE8;
		  /* 8217ACE8h */ case    1:  		/* cmpwi CR6, R11, 0 */
		/* 8217ACE8h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8217ACE8h case    1:*/		return 0x8217ACEC;
		  /* 8217ACECh */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8217ACECh case    2:*/		if ( regs.CR[6].eq ) { return 0x8217AD0C;  }
		/* 8217ACECh case    2:*/		return 0x8217ACF0;
	}
	return 0x8217ACF0;
} // Block from 8217ACE4h-8217ACF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217ACF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ACF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ACF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ACF0);
		  /* 8217ACF0h */ case    0:  		/* rlwinm R11, R16, 0, 0, 30 */
		/* 8217ACF0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R16);
		/* 8217ACF0h case    0:*/		return 0x8217ACF4;
		  /* 8217ACF4h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217ACF4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217ACF4h case    1:*/		return 0x8217ACF8;
		  /* 8217ACF8h */ case    2:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217ACF8h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217ACF8h case    2:*/		return 0x8217ACFC;
		  /* 8217ACFCh */ case    3:  		/* addic R10, R10, -1 */
		/* 8217ACFCh case    3:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217ACFCh case    3:*/		return 0x8217AD00;
		  /* 8217AD00h */ case    4:  		/* subfe R10, R10, R10 */
		/* 8217AD00h case    4:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217AD00h case    4:*/		return 0x8217AD04;
		  /* 8217AD04h */ case    5:  		/* and R16, R10, R11 */
		/* 8217AD04h case    5:*/		cpu::op::and<0>(regs,&regs.R16,regs.R10,regs.R11);
		/* 8217AD04h case    5:*/		return 0x8217AD08;
		  /* 8217AD08h */ case    6:  		/* b -1468 */
		/* 8217AD08h case    6:*/		return 0x8217A74C;
		/* 8217AD08h case    6:*/		return 0x8217AD0C;
	}
	return 0x8217AD0C;
} // Block from 8217ACF0h-8217AD0Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217AD0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AD0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AD0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AD0C);
		  /* 8217AD0Ch */ case    0:  		/* li R6, 1 */
		/* 8217AD0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217AD0Ch case    0:*/		return 0x8217AD10;
		  /* 8217AD10h */ case    1:  		/* li R5, 0 */
		/* 8217AD10h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217AD10h case    1:*/		return 0x8217AD14;
		  /* 8217AD14h */ case    2:  		/* mr R4, R16 */
		/* 8217AD14h case    2:*/		regs.R4 = regs.R16;
		/* 8217AD14h case    2:*/		return 0x8217AD18;
		  /* 8217AD18h */ case    3:  		/* mr R3, R26 */
		/* 8217AD18h case    3:*/		regs.R3 = regs.R26;
		/* 8217AD18h case    3:*/		return 0x8217AD1C;
		  /* 8217AD1Ch */ case    4:  		/* bl 722604 */
		/* 8217AD1Ch case    4:*/		regs.LR = 0x8217AD20; return 0x8222B3C8;
		/* 8217AD1Ch case    4:*/		return 0x8217AD20;
		  /* 8217AD20h */ case    5:  		/* b -1516 */
		/* 8217AD20h case    5:*/		return 0x8217A734;
		/* 8217AD20h case    5:*/		return 0x8217AD24;
	}
	return 0x8217AD24;
} // Block from 8217AD0Ch-8217AD24h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217AD24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AD24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AD24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AD24);
		  /* 8217AD24h */ case    0:  		/* li R4, 4800 */
		/* 8217AD24h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217AD24h case    0:*/		return 0x8217AD28;
		  /* 8217AD28h */ case    1:  		/* mr R3, R26 */
		/* 8217AD28h case    1:*/		regs.R3 = regs.R26;
		/* 8217AD28h case    1:*/		return 0x8217AD2C;
		  /* 8217AD2Ch */ case    2:  		/* bl -167620 */
		/* 8217AD2Ch case    2:*/		regs.LR = 0x8217AD30; return 0x82151E68;
		/* 8217AD2Ch case    2:*/		return 0x8217AD30;
	}
	return 0x8217AD30;
} // Block from 8217AD24h-8217AD30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217AD30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AD30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AD30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AD30);
		  /* 8217AD30h */ case    0:  		/* li R4, 4800 */
		/* 8217AD30h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217AD30h case    0:*/		return 0x8217AD34;
		  /* 8217AD34h */ case    1:  		/* mr R3, R26 */
		/* 8217AD34h case    1:*/		regs.R3 = regs.R26;
		/* 8217AD34h case    1:*/		return 0x8217AD38;
		  /* 8217AD38h */ case    2:  		/* bl -167632 */
		/* 8217AD38h case    2:*/		regs.LR = 0x8217AD3C; return 0x82151E68;
		/* 8217AD38h case    2:*/		return 0x8217AD3C;
	}
	return 0x8217AD3C;
} // Block from 8217AD30h-8217AD3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217AD3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AD3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AD3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AD3C);
		  /* 8217AD3Ch */ case    0:  		/* mr R3, R31 */
		/* 8217AD3Ch case    0:*/		regs.R3 = regs.R31;
		/* 8217AD3Ch case    0:*/		return 0x8217AD40;
		  /* 8217AD40h */ case    1:  		/* addi R1, R1, 256 */
		/* 8217AD40h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 8217AD40h case    1:*/		return 0x8217AD44;
		  /* 8217AD44h */ case    2:  		/* lfd FR30, <#[R1 - 168]> */
		/* 8217AD44h case    2:*/		cpu::mem::load64f( regs, &regs.FR30, (uint32)(regs.R1 + 0xFFFFFF58) );
		/* 8217AD44h case    2:*/		return 0x8217AD48;
		  /* 8217AD48h */ case    3:  		/* lfd FR31, <#[R1 - 160]> */
		/* 8217AD48h case    3:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8217AD48h case    3:*/		return 0x8217AD4C;
		  /* 8217AD4Ch */ case    4:  		/* b -957148 */
		/* 8217AD4Ch case    4:*/		return 0x82091270;
		/* 8217AD4Ch case    4:*/		return 0x8217AD50;
	}
	return 0x8217AD50;
} // Block from 8217AD3Ch-8217AD50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217AD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AD50);
		  /* 8217AD50h */ case    0:  		/* mfspr R12, LR */
		/* 8217AD50h case    0:*/		regs.R12 = regs.LR;
		/* 8217AD50h case    0:*/		return 0x8217AD54;
		  /* 8217AD54h */ case    1:  		/* bl -957188 */
		/* 8217AD54h case    1:*/		regs.LR = 0x8217AD58; return 0x82091250;
		/* 8217AD54h case    1:*/		return 0x8217AD58;
		  /* 8217AD58h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8217AD58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8217AD58h case    2:*/		return 0x8217AD5C;
		  /* 8217AD5Ch */ case    3:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8217AD5Ch case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8217AD5Ch case    3:*/		return 0x8217AD60;
		  /* 8217AD60h */ case    4:  		/* mr R26, R3 */
		/* 8217AD60h case    4:*/		regs.R26 = regs.R3;
		/* 8217AD60h case    4:*/		return 0x8217AD64;
		  /* 8217AD64h */ case    5:  		/* mr R30, R4 */
		/* 8217AD64h case    5:*/		regs.R30 = regs.R4;
		/* 8217AD64h case    5:*/		return 0x8217AD68;
		  /* 8217AD68h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217AD68h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217AD68h case    6:*/		return 0x8217AD6C;
		  /* 8217AD6Ch */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217AD6Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217AD6Ch case    7:*/		return 0x8217AD70;
		  /* 8217AD70h */ case    8:  		/* bc 4, CR0_EQ, 212 */
		/* 8217AD70h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217AE44;  }
		/* 8217AD70h case    8:*/		return 0x8217AD74;
		  /* 8217AD74h */ case    9:  		/* mr R27, R11 */
		/* 8217AD74h case    9:*/		regs.R27 = regs.R11;
		/* 8217AD74h case    9:*/		return 0x8217AD78;
		  /* 8217AD78h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8217AD78h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217AD78h case   10:*/		return 0x8217AD7C;
		  /* 8217AD7Ch */ case   11:  		/* bc 12, CR6_EQ, 1204 */
		/* 8217AD7Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8217B230;  }
		/* 8217AD7Ch case   11:*/		return 0x8217AD80;
		  /* 8217AD80h */ case   12:  		/* li R31, 1 */
		/* 8217AD80h case   12:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 8217AD80h case   12:*/		return 0x8217AD84;
		  /* 8217AD84h */ case   13:  		/* lwz R9, <#[R27 + 12]> */
		/* 8217AD84h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000000C) );
		/* 8217AD84h case   13:*/		return 0x8217AD88;
		  /* 8217AD88h */ case   14:  		/* addi R29, R27, 12 */
		/* 8217AD88h case   14:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0xC);
		/* 8217AD88h case   14:*/		return 0x8217AD8C;
		  /* 8217AD8Ch */ case   15:  		/* cmplwi CR6, R9, 0 */
		/* 8217AD8Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8217AD8Ch case   15:*/		return 0x8217AD90;
		  /* 8217AD90h */ case   16:  		/* bc 12, CR6_EQ, 128 */
		/* 8217AD90h case   16:*/		if ( regs.CR[6].eq ) { return 0x8217AE10;  }
		/* 8217AD90h case   16:*/		return 0x8217AD94;
		  /* 8217AD94h */ case   17:  		/* lwz R11, <#[R9]> */
		/* 8217AD94h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8217AD94h case   17:*/		return 0x8217AD98;
		  /* 8217AD98h */ case   18:  		/* lwz R8, <#[R27 + 40]> */
		/* 8217AD98h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000028) );
		/* 8217AD98h case   18:*/		return 0x8217AD9C;
		  /* 8217AD9Ch */ case   19:  		/* lwz R10, <#[R11 + 48]> */
		/* 8217AD9Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8217AD9Ch case   19:*/		return 0x8217ADA0;
		  /* 8217ADA0h */ case   20:  		/* rlwinm R7, R10, 0, 13, 31 */
		/* 8217ADA0h case   20:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R10);
		/* 8217ADA0h case   20:*/		return 0x8217ADA4;
		  /* 8217ADA4h */ case   21:  		/* rlwinm R10, R7, 27, 5, 31 */
		/* 8217ADA4h case   21:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R7);
		/* 8217ADA4h case   21:*/		return 0x8217ADA8;
		  /* 8217ADA8h */ case   22:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 8217ADA8h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 8217ADA8h case   22:*/		return 0x8217ADAC;
		  /* 8217ADACh */ case   23:  		/* addi R10, R10, 1 */
		/* 8217ADACh case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217ADACh case   23:*/		return 0x8217ADB0;
		  /* 8217ADB0h */ case   24:  		/* slw R7, R31, R7 */
		/* 8217ADB0h case   24:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R31,regs.R7);
		/* 8217ADB0h case   24:*/		return 0x8217ADB4;
		  /* 8217ADB4h */ case   25:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8217ADB4h case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8217ADB4h case   25:*/		return 0x8217ADB8;
		  /* 8217ADB8h */ case   26:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8217ADB8h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8217ADB8h case   26:*/		return 0x8217ADBC;
		  /* 8217ADBCh */ case   27:  		/* and. R10, R10, R7 */
		/* 8217ADBCh case   27:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R7);
		/* 8217ADBCh case   27:*/		return 0x8217ADC0;
		  /* 8217ADC0h */ case   28:  		/* bc 12, CR0_EQ, 72 */
		/* 8217ADC0h case   28:*/		if ( regs.CR[0].eq ) { return 0x8217AE08;  }
		/* 8217ADC0h case   28:*/		return 0x8217ADC4;
		  /* 8217ADC4h */ case   29:  		/* cmplw CR6, R30, R11 */
		/* 8217ADC4h case   29:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8217ADC4h case   29:*/		return 0x8217ADC8;
		  /* 8217ADC8h */ case   30:  		/* bc 12, CR6_EQ, 52 */
		/* 8217ADC8h case   30:*/		if ( regs.CR[6].eq ) { return 0x8217ADFC;  }
		/* 8217ADC8h case   30:*/		return 0x8217ADCC;
		  /* 8217ADCCh */ case   31:  		/* lwz R10, <#[R30 + 48]> */
		/* 8217ADCCh case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 8217ADCCh case   31:*/		return 0x8217ADD0;
		  /* 8217ADD0h */ case   32:  		/* lwz R8, <#[R11 + 40]> */
		/* 8217ADD0h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 8217ADD0h case   32:*/		return 0x8217ADD4;
		  /* 8217ADD4h */ case   33:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 8217ADD4h case   33:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 8217ADD4h case   33:*/		return 0x8217ADD8;
		  /* 8217ADD8h */ case   34:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 8217ADD8h case   34:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 8217ADD8h case   34:*/		return 0x8217ADDC;
		  /* 8217ADDCh */ case   35:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 8217ADDCh case   35:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 8217ADDCh case   35:*/		return 0x8217ADE0;
		  /* 8217ADE0h */ case   36:  		/* addi R11, R11, 1 */
		/* 8217ADE0h case   36:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217ADE0h case   36:*/		return 0x8217ADE4;
		  /* 8217ADE4h */ case   37:  		/* slw R10, R31, R10 */
		/* 8217ADE4h case   37:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R31,regs.R10);
		/* 8217ADE4h case   37:*/		return 0x8217ADE8;
		  /* 8217ADE8h */ case   38:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217ADE8h case   38:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217ADE8h case   38:*/		return 0x8217ADEC;
		  /* 8217ADECh */ case   39:  		/* lwzx R11, <#[R11 + R8]> */
		/* 8217ADECh case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8217ADECh case   39:*/		return 0x8217ADF0;
		  /* 8217ADF0h */ case   40:  		/* and. R11, R11, R10 */
		/* 8217ADF0h case   40:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8217ADF0h case   40:*/		return 0x8217ADF4;
		  /* 8217ADF4h */ case   41:  		/* mr R11, R31 */
		/* 8217ADF4h case   41:*/		regs.R11 = regs.R31;
		/* 8217ADF4h case   41:*/		return 0x8217ADF8;
		  /* 8217ADF8h */ case   42:  		/* bc 4, CR0_EQ, 8 */
		/* 8217ADF8h case   42:*/		if ( !regs.CR[0].eq ) { return 0x8217AE00;  }
		/* 8217ADF8h case   42:*/		return 0x8217ADFC;
	}
	return 0x8217ADFC;
} // Block from 8217AD50h-8217ADFCh (43 instructions)

//////////////////////////////////////////////////////
// Block at 8217ADFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ADFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ADFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ADFC);
		  /* 8217ADFCh */ case    0:  		/* li R11, 0 */
		/* 8217ADFCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217ADFCh case    0:*/		return 0x8217AE00;
	}
	return 0x8217AE00;
} // Block from 8217ADFCh-8217AE00h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217AE00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AE00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AE00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AE00);
		  /* 8217AE00h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217AE00h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217AE00h case    0:*/		return 0x8217AE04;
		  /* 8217AE04h */ case    1:  		/* bc 12, CR0_EQ, 72 */
		/* 8217AE04h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217AE4C;  }
		/* 8217AE04h case    1:*/		return 0x8217AE08;
	}
	return 0x8217AE08;
} // Block from 8217AE00h-8217AE08h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217AE08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AE08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AE08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AE08);
		  /* 8217AE08h */ case    0:  		/* lwz R9, <#[R9 + 8]> */
		/* 8217AE08h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8217AE08h case    0:*/		return 0x8217AE0C;
		  /* 8217AE0Ch */ case    1:  		/* b -128 */
		/* 8217AE0Ch case    1:*/		return 0x8217AD8C;
		/* 8217AE0Ch case    1:*/		return 0x8217AE10;
	}
	return 0x8217AE10;
} // Block from 8217AE08h-8217AE10h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217AE10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AE10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AE10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AE10);
		  /* 8217AE10h */ case    0:  		/* mr R4, R30 */
		/* 8217AE10h case    0:*/		regs.R4 = regs.R30;
		/* 8217AE10h case    0:*/		return 0x8217AE14;
		  /* 8217AE14h */ case    1:  		/* mr R3, R27 */
		/* 8217AE14h case    1:*/		regs.R3 = regs.R27;
		/* 8217AE14h case    1:*/		return 0x8217AE18;
		  /* 8217AE18h */ case    2:  		/* bl 741304 */
		/* 8217AE18h case    2:*/		regs.LR = 0x8217AE1C; return 0x8222FDD0;
		/* 8217AE18h case    2:*/		return 0x8217AE1C;
		  /* 8217AE1Ch */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217AE1Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217AE1Ch case    3:*/		return 0x8217AE20;
		  /* 8217AE20h */ case    4:  		/* bc 12, CR0_EQ, 1040 */
		/* 8217AE20h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217B230;  }
		/* 8217AE20h case    4:*/		return 0x8217AE24;
		  /* 8217AE24h */ case    5:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 8217AE24h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 8217AE24h case    5:*/		return 0x8217AE28;
		  /* 8217AE28h */ case    6:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217AE28h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217AE28h case    6:*/		return 0x8217AE2C;
		  /* 8217AE2Ch */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217AE2Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217AE2Ch case    7:*/		return 0x8217AE30;
		  /* 8217AE30h */ case    8:  		/* bc 4, CR0_EQ, 20 */
		/* 8217AE30h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217AE44;  }
		/* 8217AE30h case    8:*/		return 0x8217AE34;
		  /* 8217AE34h */ case    9:  		/* mr R27, R11 */
		/* 8217AE34h case    9:*/		regs.R27 = regs.R11;
		/* 8217AE34h case    9:*/		return 0x8217AE38;
		  /* 8217AE38h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 8217AE38h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217AE38h case   10:*/		return 0x8217AE3C;
		  /* 8217AE3Ch */ case   11:  		/* bc 4, CR6_EQ, -184 */
		/* 8217AE3Ch case   11:*/		if ( !regs.CR[6].eq ) { return 0x8217AD84;  }
		/* 8217AE3Ch case   11:*/		return 0x8217AE40;
		  /* 8217AE40h */ case   12:  		/* b 1008 */
		/* 8217AE40h case   12:*/		return 0x8217B230;
		/* 8217AE40h case   12:*/		return 0x8217AE44;
	}
	return 0x8217AE44;
} // Block from 8217AE10h-8217AE44h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217AE44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AE44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AE44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AE44);
		  /* 8217AE44h */ case    0:  		/* li R27, 0 */
		/* 8217AE44h case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8217AE44h case    0:*/		return 0x8217AE48;
		  /* 8217AE48h */ case    1:  		/* b 1000 */
		/* 8217AE48h case    1:*/		return 0x8217B230;
		/* 8217AE48h case    1:*/		return 0x8217AE4C;
	}
	return 0x8217AE4C;
} // Block from 8217AE44h-8217AE4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217AE4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AE4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AE4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AE4C);
		  /* 8217AE4Ch */ case    0:  		/* lwz R11, <#[R27 + 28]> */
		/* 8217AE4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217AE4Ch case    0:*/		return 0x8217AE50;
		  /* 8217AE50h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217AE50h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217AE50h case    1:*/		return 0x8217AE54;
		  /* 8217AE54h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 8217AE54h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217AE64;  }
		/* 8217AE54h case    2:*/		return 0x8217AE58;
		  /* 8217AE58h */ case    3:  		/* lwz R11, <#[R27 + 36]> */
		/* 8217AE58h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000024) );
		/* 8217AE58h case    3:*/		return 0x8217AE5C;
		  /* 8217AE5Ch */ case    4:  		/* addi R30, R27, 32 */
		/* 8217AE5Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R27,0x20);
		/* 8217AE5Ch case    4:*/		return 0x8217AE60;
		  /* 8217AE60h */ case    5:  		/* b 12 */
		/* 8217AE60h case    5:*/		return 0x8217AE6C;
		/* 8217AE60h case    5:*/		return 0x8217AE64;
	}
	return 0x8217AE64;
} // Block from 8217AE4Ch-8217AE64h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217AE64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AE64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AE64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AE64);
		  /* 8217AE64h */ case    0:  		/* lwz R11, <#[R27 + 28]> */
		/* 8217AE64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217AE64h case    0:*/		return 0x8217AE68;
		  /* 8217AE68h */ case    1:  		/* addi R30, R27, 24 */
		/* 8217AE68h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R27,0x18);
		/* 8217AE68h case    1:*/		return 0x8217AE6C;
	}
	return 0x8217AE6C;
} // Block from 8217AE64h-8217AE6Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217AE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AE6C);
		  /* 8217AE6Ch */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217AE6Ch case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217AE6Ch case    0:*/		return 0x8217AE70;
		  /* 8217AE70h */ case    1:  		/* addic R10, R10, -1 */
		/* 8217AE70h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217AE70h case    1:*/		return 0x8217AE74;
		  /* 8217AE74h */ case    2:  		/* subfe R10, R10, R10 */
		/* 8217AE74h case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217AE74h case    2:*/		return 0x8217AE78;
		  /* 8217AE78h */ case    3:  		/* and R31, R10, R11 */
		/* 8217AE78h case    3:*/		cpu::op::and<0>(regs,&regs.R31,regs.R10,regs.R11);
		/* 8217AE78h case    3:*/		return 0x8217AE7C;
		  /* 8217AE7Ch */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217AE7Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217AE7Ch case    4:*/		return 0x8217AE80;
		  /* 8217AE80h */ case    5:  		/* bc 12, CR6_EQ, 944 */
		/* 8217AE80h case    5:*/		if ( regs.CR[6].eq ) { return 0x8217B230;  }
		/* 8217AE80h case    5:*/		return 0x8217AE84;
		  /* 8217AE84h */ case    6:  		/* mr R3, R31 */
		/* 8217AE84h case    6:*/		regs.R3 = regs.R31;
		/* 8217AE84h case    6:*/		return 0x8217AE88;
		  /* 8217AE88h */ case    7:  		/* bl -57600 */
		/* 8217AE88h case    7:*/		regs.LR = 0x8217AE8C; return 0x8216CD88;
		/* 8217AE88h case    7:*/		return 0x8217AE8C;
		  /* 8217AE8Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217AE8Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217AE8Ch case    8:*/		return 0x8217AE90;
		  /* 8217AE90h */ case    9:  		/* bc 12, CR0_EQ, 20 */
		/* 8217AE90h case    9:*/		if ( regs.CR[0].eq ) { return 0x8217AEA4;  }
		/* 8217AE90h case    9:*/		return 0x8217AE94;
		  /* 8217AE94h */ case   10:  		/* mr R3, R31 */
		/* 8217AE94h case   10:*/		regs.R3 = regs.R31;
		/* 8217AE94h case   10:*/		return 0x8217AE98;
		  /* 8217AE98h */ case   11:  		/* bl -93672 */
		/* 8217AE98h case   11:*/		regs.LR = 0x8217AE9C; return 0x821640B0;
		/* 8217AE98h case   11:*/		return 0x8217AE9C;
		  /* 8217AE9Ch */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217AE9Ch case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217AE9Ch case   12:*/		return 0x8217AEA0;
		  /* 8217AEA0h */ case   13:  		/* bc 12, CR0_EQ, 68 */
		/* 8217AEA0h case   13:*/		if ( regs.CR[0].eq ) { return 0x8217AEE4;  }
		/* 8217AEA0h case   13:*/		return 0x8217AEA4;
	}
	return 0x8217AEA4;
} // Block from 8217AE6Ch-8217AEA4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217AEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AEA4);
		  /* 8217AEA4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217AEA4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217AEA4h case    0:*/		return 0x8217AEA8;
		  /* 8217AEA8h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8217AEA8h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8217AEA8h case    1:*/		return 0x8217AEAC;
		  /* 8217AEACh */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217AEACh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217AEACh case    2:*/		return 0x8217AEB0;
		  /* 8217AEB0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217AEB0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217AEBC;  }
		/* 8217AEB0h case    3:*/		return 0x8217AEB4;
		  /* 8217AEB4h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217AEB4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217AEB4h case    4:*/		return 0x8217AEB8;
		  /* 8217AEB8h */ case    5:  		/* bc 4, CR6_EQ, -52 */
		/* 8217AEB8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217AE84;  }
		/* 8217AEB8h case    5:*/		return 0x8217AEBC;
	}
	return 0x8217AEBC;
} // Block from 8217AEA4h-8217AEBCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217AEBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AEBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AEBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AEBC);
		  /* 8217AEBCh */ case    0:  		/* addi R11, R27, 32 */
		/* 8217AEBCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x20);
		/* 8217AEBCh case    0:*/		return 0x8217AEC0;
		  /* 8217AEC0h */ case    1:  		/* cmplw CR6, R30, R11 */
		/* 8217AEC0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8217AEC0h case    1:*/		return 0x8217AEC4;
		  /* 8217AEC4h */ case    2:  		/* bc 12, CR6_EQ, 876 */
		/* 8217AEC4h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217B230;  }
		/* 8217AEC4h case    2:*/		return 0x8217AEC8;
		  /* 8217AEC8h */ case    3:  		/* lwz R31, <#[R11 + 4]> */
		/* 8217AEC8h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 8217AEC8h case    3:*/		return 0x8217AECC;
		  /* 8217AECCh */ case    4:  		/* mr R30, R11 */
		/* 8217AECCh case    4:*/		regs.R30 = regs.R11;
		/* 8217AECCh case    4:*/		return 0x8217AED0;
		  /* 8217AED0h */ case    5:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217AED0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217AED0h case    5:*/		return 0x8217AED4;
		  /* 8217AED4h */ case    6:  		/* bc 4, CR0_EQ, 860 */
		/* 8217AED4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217B230;  }
		/* 8217AED4h case    6:*/		return 0x8217AED8;
		  /* 8217AED8h */ case    7:  		/* cmplwi CR0, R31, 0 */
		/* 8217AED8h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217AED8h case    7:*/		return 0x8217AEDC;
		  /* 8217AEDCh */ case    8:  		/* bc 4, CR0_EQ, -88 */
		/* 8217AEDCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217AE84;  }
		/* 8217AEDCh case    8:*/		return 0x8217AEE0;
		  /* 8217AEE0h */ case    9:  		/* b 848 */
		/* 8217AEE0h case    9:*/		return 0x8217B230;
		/* 8217AEE0h case    9:*/		return 0x8217AEE4;
	}
	return 0x8217AEE4;
} // Block from 8217AEBCh-8217AEE4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217AEE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AEE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AEE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AEE4);
		  /* 8217AEE4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8217AEE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217AEE4h case    0:*/		return 0x8217AEE8;
		  /* 8217AEE8h */ case    1:  		/* bc 12, CR6_EQ, 840 */
		/* 8217AEE8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217B230;  }
		/* 8217AEE8h case    1:*/		return 0x8217AEEC;
		  /* 8217AEECh */ case    2:  		/* mr R3, R26 */
		/* 8217AEECh case    2:*/		regs.R3 = regs.R26;
		/* 8217AEECh case    2:*/		return 0x8217AEF0;
		  /* 8217AEF0h */ case    3:  		/* bl -57272 */
		/* 8217AEF0h case    3:*/		regs.LR = 0x8217AEF4; return 0x8216CF38;
		/* 8217AEF0h case    3:*/		return 0x8217AEF4;
		  /* 8217AEF4h */ case    4:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 8217AEF4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 8217AEF4h case    4:*/		return 0x8217AEF8;
		  /* 8217AEF8h */ case    5:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 8217AEF8h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 8217AEF8h case    5:*/		return 0x8217AEFC;
		  /* 8217AEFCh */ case    6:  		/* addi R9, R11, 4 */
		/* 8217AEFCh case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8217AEFCh case    6:*/		return 0x8217AF00;
		  /* 8217AF00h */ case    7:  		/* addi R8, R10, 4 */
		/* 8217AF00h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 8217AF00h case    7:*/		return 0x8217AF04;
		  /* 8217AF04h */ case    8:  		/* mr R31, R3 */
		/* 8217AF04h case    8:*/		regs.R31 = regs.R3;
		/* 8217AF04h case    8:*/		return 0x8217AF08;
		  /* 8217AF08h */ case    9:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217AF08h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217AF08h case    9:*/		return 0x8217AF0C;
		  /* 8217AF0Ch */ case   10:  		/* stw R7, <#[R10 + 4]> */
		/* 8217AF0Ch case   10:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 8217AF0Ch case   10:*/		return 0x8217AF10;
		  /* 8217AF10h */ case   11:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217AF10h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217AF10h case   11:*/		return 0x8217AF14;
		  /* 8217AF14h */ case   12:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 8217AF14h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 8217AF14h case   12:*/		return 0x8217AF18;
		  /* 8217AF18h */ case   13:  		/* stw R8, <#[R7]> */
		/* 8217AF18h case   13:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 8217AF18h case   13:*/		return 0x8217AF1C;
		  /* 8217AF1Ch */ case   14:  		/* stw R9, <#[R10]> */
		/* 8217AF1Ch case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217AF1Ch case   14:*/		return 0x8217AF20;
		  /* 8217AF20h */ case   15:  		/* stw R10, <#[R11 + 4]> */
		/* 8217AF20h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217AF20h case   15:*/		return 0x8217AF24;
		  /* 8217AF24h */ case   16:  		/* lwz R30, <#[R29]> */
		/* 8217AF24h case   16:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000000) );
		/* 8217AF24h case   16:*/		return 0x8217AF28;
		  /* 8217AF28h */ case   17:  		/* cmplwi CR6, R30, 0 */
		/* 8217AF28h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217AF28h case   17:*/		return 0x8217AF2C;
		  /* 8217AF2Ch */ case   18:  		/* bc 12, CR6_EQ, 40 */
		/* 8217AF2Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x8217AF54;  }
		/* 8217AF2Ch case   18:*/		return 0x8217AF30;
		  /* 8217AF30h */ case   19:  		/* mr R5, R31 */
		/* 8217AF30h case   19:*/		regs.R5 = regs.R31;
		/* 8217AF30h case   19:*/		return 0x8217AF34;
		  /* 8217AF34h */ case   20:  		/* lwz R3, <#[R30]> */
		/* 8217AF34h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 8217AF34h case   20:*/		return 0x8217AF38;
		  /* 8217AF38h */ case   21:  		/* mr R4, R30 */
		/* 8217AF38h case   21:*/		regs.R4 = regs.R30;
		/* 8217AF38h case   21:*/		return 0x8217AF3C;
		  /* 8217AF3Ch */ case   22:  		/* bl 739756 */
		/* 8217AF3Ch case   22:*/		regs.LR = 0x8217AF40; return 0x8222F8E8;
		/* 8217AF3Ch case   22:*/		return 0x8217AF40;
		  /* 8217AF40h */ case   23:  		/* lwz R11, <#[R29]> */
		/* 8217AF40h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8217AF40h case   23:*/		return 0x8217AF44;
		  /* 8217AF44h */ case   24:  		/* cmplw CR6, R11, R30 */
		/* 8217AF44h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8217AF44h case   24:*/		return 0x8217AF48;
		  /* 8217AF48h */ case   25:  		/* bc 4, CR6_EQ, -36 */
		/* 8217AF48h case   25:*/		if ( !regs.CR[6].eq ) { return 0x8217AF24;  }
		/* 8217AF48h case   25:*/		return 0x8217AF4C;
		  /* 8217AF4Ch */ case   26:  		/* addi R29, R30, 8 */
		/* 8217AF4Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x8);
		/* 8217AF4Ch case   26:*/		return 0x8217AF50;
		  /* 8217AF50h */ case   27:  		/* b -44 */
		/* 8217AF50h case   27:*/		return 0x8217AF24;
		/* 8217AF50h case   27:*/		return 0x8217AF54;
	}
	return 0x8217AF54;
} // Block from 8217AEE4h-8217AF54h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217AF54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AF54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AF54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AF54);
		  /* 8217AF54h */ case    0:  		/* mr R5, R26 */
		/* 8217AF54h case    0:*/		regs.R5 = regs.R26;
		/* 8217AF54h case    0:*/		return 0x8217AF58;
		  /* 8217AF58h */ case    1:  		/* mr R4, R31 */
		/* 8217AF58h case    1:*/		regs.R4 = regs.R31;
		/* 8217AF58h case    1:*/		return 0x8217AF5C;
		  /* 8217AF5Ch */ case    2:  		/* mr R3, R27 */
		/* 8217AF5Ch case    2:*/		regs.R3 = regs.R27;
		/* 8217AF5Ch case    2:*/		return 0x8217AF60;
		  /* 8217AF60h */ case    3:  		/* bl 740224 */
		/* 8217AF60h case    3:*/		regs.LR = 0x8217AF64; return 0x8222FAE0;
		/* 8217AF60h case    3:*/		return 0x8217AF64;
		  /* 8217AF64h */ case    4:  		/* addi R4, R27, 32 */
		/* 8217AF64h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R27,0x20);
		/* 8217AF64h case    4:*/		return 0x8217AF68;
		  /* 8217AF68h */ case    5:  		/* addi R3, R31, 32 */
		/* 8217AF68h case    5:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R31,0x20);
		/* 8217AF68h case    5:*/		return 0x8217AF6C;
		  /* 8217AF6Ch */ case    6:  		/* bl -4660 */
		/* 8217AF6Ch case    6:*/		regs.LR = 0x8217AF70; return 0x82179D38;
		/* 8217AF6Ch case    6:*/		return 0x8217AF70;
		  /* 8217AF70h */ case    7:  		/* lwz R11, <#[R31 + 36]> */
		/* 8217AF70h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8217AF70h case    7:*/		return 0x8217AF74;
		  /* 8217AF74h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217AF74h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217AF74h case    8:*/		return 0x8217AF78;
		  /* 8217AF78h */ case    9:  		/* bc 4, CR0_EQ, 40 */
		/* 8217AF78h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8217AFA0;  }
		/* 8217AF78h case    9:*/		return 0x8217AF7C;
		  /* 8217AF7Ch */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 8217AF7Ch case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217AF7Ch case   10:*/		return 0x8217AF80;
		  /* 8217AF80h */ case   11:  		/* bc 12, CR0_EQ, 32 */
		/* 8217AF80h case   11:*/		if ( regs.CR[0].eq ) { return 0x8217AFA0;  }
		/* 8217AF80h case   11:*/		return 0x8217AF84;
		  /* 8217AF84h */ case   12:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 8217AF84h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 8217AF84h case   12:*/		return 0x8217AF88;
		  /* 8217AF88h */ case   13:  		/* stw R31, <#[R11 + 28]> */
		/* 8217AF88h case   13:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000001C) );
		/* 8217AF88h case   13:*/		return 0x8217AF8C;
		  /* 8217AF8Ch */ case   14:  		/* lwz R11, <#[R10 + 40]> */
		/* 8217AF8Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000028) );
		/* 8217AF8Ch case   14:*/		return 0x8217AF90;
	}
	return 0x8217AF90;
} // Block from 8217AF54h-8217AF90h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217AF90h
// Function '?HoistExportsFromBlock@Compiler@D3DXShader@@AAA_NPAVBlock@2@0PAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AF90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AF90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AF90);
		  /* 8217AF90h */ case    0:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217AF90h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217AF90h case    0:*/		return 0x8217AF94;
		  /* 8217AF94h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8217AF94h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217AFA0;  }
		/* 8217AF94h case    1:*/		return 0x8217AF98;
		  /* 8217AF98h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8217AF98h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217AF98h case    2:*/		return 0x8217AF9C;
		  /* 8217AF9Ch */ case    3:  		/* bc 4, CR6_EQ, -24 */
		/* 8217AF9Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217AF84;  }
		/* 8217AF9Ch case    3:*/		return 0x8217AFA0;
	}
	return 0x8217AFA0;
} // Block from 8217AF90h-8217AFA0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217AFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217AFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217AFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217AFA0);
		  /* 8217AFA0h */ case    0:  		/* lwz R30, <#[R27 + 28]> */
		/* 8217AFA0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217AFA0h case    0:*/		return 0x8217AFA4;
		  /* 8217AFA4h */ case    1:  		/* addi R28, R27, 24 */
		/* 8217AFA4h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R27,0x18);
		/* 8217AFA4h case    1:*/		return 0x8217AFA8;
		  /* 8217AFA8h */ case    2:  		/* li R29, 0 */
		/* 8217AFA8h case    2:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8217AFA8h case    2:*/		return 0x8217AFAC;
		  /* 8217AFACh */ case    3:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8217AFACh case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8217AFACh case    3:*/		return 0x8217AFB0;
		  /* 8217AFB0h */ case    4:  		/* bc 4, CR0_EQ, 244 */
		/* 8217AFB0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217B0A4;  }
		/* 8217AFB0h case    4:*/		return 0x8217AFB4;
		  /* 8217AFB4h */ case    5:  		/* cmplwi CR0, R30, 0 */
		/* 8217AFB4h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 8217AFB4h case    5:*/		return 0x8217AFB8;
		  /* 8217AFB8h */ case    6:  		/* bc 12, CR0_EQ, 236 */
		/* 8217AFB8h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217B0A4;  }
		/* 8217AFB8h case    6:*/		return 0x8217AFBC;
		  /* 8217AFBCh */ case    7:  		/* mr R3, R30 */
		/* 8217AFBCh case    7:*/		regs.R3 = regs.R30;
		/* 8217AFBCh case    7:*/		return 0x8217AFC0;
		  /* 8217AFC0h */ case    8:  		/* bl -93968 */
		/* 8217AFC0h case    8:*/		regs.LR = 0x8217AFC4; return 0x821640B0;
		/* 8217AFC0h case    8:*/		return 0x8217AFC4;
		  /* 8217AFC4h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217AFC4h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217AFC4h case    9:*/		return 0x8217AFC8;
		  /* 8217AFC8h */ case   10:  		/* bc 12, CR0_EQ, 96 */
		/* 8217AFC8h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217B028;  }
		/* 8217AFC8h case   10:*/		return 0x8217AFCC;
		  /* 8217AFCCh */ case   11:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217AFCCh case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217AFCCh case   11:*/		return 0x8217AFD0;
		  /* 8217AFD0h */ case   12:  		/* addi R10, R31, 24 */
		/* 8217AFD0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x18);
		/* 8217AFD0h case   12:*/		return 0x8217AFD4;
		  /* 8217AFD4h */ case   13:  		/* addi R11, R11, 36 */
		/* 8217AFD4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217AFD4h case   13:*/		return 0x8217AFD8;
		  /* 8217AFD8h */ case   14:  		/* addi R10, R10, -36 */
		/* 8217AFD8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 8217AFD8h case   14:*/		return 0x8217AFDC;
		  /* 8217AFDCh */ case   15:  		/* addi R9, R11, -36 */
		/* 8217AFDCh case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 8217AFDCh case   15:*/		return 0x8217AFE0;
		  /* 8217AFE0h */ case   16:  		/* ori R8, R10, 1 */
		/* 8217AFE0h case   16:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 8217AFE0h case   16:*/		return 0x8217AFE4;
		  /* 8217AFE4h */ case   17:  		/* addi R10, R11, 4 */
		/* 8217AFE4h case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217AFE4h case   17:*/		return 0x8217AFE8;
		  /* 8217AFE8h */ case   18:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217AFE8h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217AFE8h case   18:*/		return 0x8217AFEC;
		  /* 8217AFECh */ case   19:  		/* lwz R6, <#[R11]> */
		/* 8217AFECh case   19:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8217AFECh case   19:*/		return 0x8217AFF0;
		  /* 8217AFF0h */ case   20:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 8217AFF0h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 8217AFF0h case   20:*/		return 0x8217AFF4;
		  /* 8217AFF4h */ case   21:  		/* stw R6, <#[R7 + 36]> */
		/* 8217AFF4h case   21:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000024) );
		/* 8217AFF4h case   21:*/		return 0x8217AFF8;
		  /* 8217AFF8h */ case   22:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217AFF8h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217AFF8h case   22:*/		return 0x8217AFFC;
		  /* 8217AFFCh */ case   23:  		/* lwz R6, <#[R11]> */
		/* 8217AFFCh case   23:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8217AFFCh case   23:*/		return 0x8217B000;
		  /* 8217B000h */ case   24:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8217B000h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8217B000h case   24:*/		return 0x8217B004;
		  /* 8217B004h */ case   25:  		/* stw R7, <#[R6]> */
		/* 8217B004h case   25:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 8217B004h case   25:*/		return 0x8217B008;
		  /* 8217B008h */ case   26:  		/* lwz R7, <#[R31 + 24]> */
		/* 8217B008h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 8217B008h case   26:*/		return 0x8217B00C;
		  /* 8217B00Ch */ case   27:  		/* stw R7, <#[R11]> */
		/* 8217B00Ch case   27:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B00Ch case   27:*/		return 0x8217B010;
		  /* 8217B010h */ case   28:  		/* lwz R7, <#[R31 + 24]> */
		/* 8217B010h case   28:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000018) );
		/* 8217B010h case   28:*/		return 0x8217B014;
		  /* 8217B014h */ case   29:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 8217B014h case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 8217B014h case   29:*/		return 0x8217B018;
		  /* 8217B018h */ case   30:  		/* stw R9, <#[R7]> */
		/* 8217B018h case   30:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 8217B018h case   30:*/		return 0x8217B01C;
		  /* 8217B01Ch */ case   31:  		/* stw R8, <#[R11 + 4]> */
		/* 8217B01Ch case   31:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B01Ch case   31:*/		return 0x8217B020;
		  /* 8217B020h */ case   32:  		/* stw R10, <#[R31 + 24]> */
		/* 8217B020h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000018) );
		/* 8217B020h case   32:*/		return 0x8217B024;
		  /* 8217B024h */ case   33:  		/* stw R31, <#[R30 + 28]> */
		/* 8217B024h case   33:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		/* 8217B024h case   33:*/		return 0x8217B028;
	}
	return 0x8217B028;
} // Block from 8217AFA0h-8217B028h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8217B028h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B028);
		  /* 8217B028h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8217B028h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217B028h case    0:*/		return 0x8217B02C;
		  /* 8217B02Ch */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 8217B02Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8217B05C;  }
		/* 8217B02Ch case    1:*/		return 0x8217B030;
		  /* 8217B030h */ case    2:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 8217B030h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 8217B030h case    2:*/		return 0x8217B034;
		  /* 8217B034h */ case    3:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217B034h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217B034h case    3:*/		return 0x8217B038;
		  /* 8217B038h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217B038h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B038h case    4:*/		return 0x8217B03C;
		  /* 8217B03Ch */ case    5:  		/* addic R10, R10, -1 */
		/* 8217B03Ch case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217B03Ch case    5:*/		return 0x8217B040;
		  /* 8217B040h */ case    6:  		/* subfe R10, R10, R10 */
		/* 8217B040h case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217B040h case    6:*/		return 0x8217B044;
		  /* 8217B044h */ case    7:  		/* and R10, R10, R11 */
		/* 8217B044h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8217B044h case    7:*/		return 0x8217B048;
		  /* 8217B048h */ case    8:  		/* cmplw CR6, R30, R10 */
		/* 8217B048h case    8:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R10);
		/* 8217B048h case    8:*/		return 0x8217B04C;
		  /* 8217B04Ch */ case    9:  		/* bc 12, CR6_EQ, 44 */
		/* 8217B04Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8217B078;  }
		/* 8217B04Ch case    9:*/		return 0x8217B050;
		  /* 8217B050h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217B050h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B050h case   10:*/		return 0x8217B054;
		  /* 8217B054h */ case   11:  		/* bc 4, CR0_EQ, 80 */
		/* 8217B054h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8217B0A4;  }
		/* 8217B054h case   11:*/		return 0x8217B058;
		  /* 8217B058h */ case   12:  		/* b 64 */
		/* 8217B058h case   12:*/		return 0x8217B098;
		/* 8217B058h case   12:*/		return 0x8217B05C;
	}
	return 0x8217B05C;
} // Block from 8217B028h-8217B05Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217B05Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B05C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B05C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B05C);
		  /* 8217B05Ch */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 8217B05Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8217B05Ch case    0:*/		return 0x8217B060;
		  /* 8217B060h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217B060h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B060h case    1:*/		return 0x8217B064;
		  /* 8217B064h */ case    2:  		/* addic R9, R10, -1 */
		/* 8217B064h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 8217B064h case    2:*/		return 0x8217B068;
		  /* 8217B068h */ case    3:  		/* subfe R9, R9, R9 */
		/* 8217B068h case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8217B068h case    3:*/		return 0x8217B06C;
		  /* 8217B06Ch */ case    4:  		/* and R9, R9, R11 */
		/* 8217B06Ch case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 8217B06Ch case    4:*/		return 0x8217B070;
		  /* 8217B070h */ case    5:  		/* cmplw CR6, R30, R9 */
		/* 8217B070h case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R9);
		/* 8217B070h case    5:*/		return 0x8217B074;
		  /* 8217B074h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 8217B074h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217B090;  }
		/* 8217B074h case    6:*/		return 0x8217B078;
	}
	return 0x8217B078;
} // Block from 8217B05Ch-8217B078h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217B078h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B078( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B078) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B078);
		  /* 8217B078h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217B078h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217B078h case    0:*/		return 0x8217B07C;
		  /* 8217B07Ch */ case    1:  		/* mr R29, R30 */
		/* 8217B07Ch case    1:*/		regs.R29 = regs.R30;
		/* 8217B07Ch case    1:*/		return 0x8217B080;
		  /* 8217B080h */ case    2:  		/* lwz R30, <#[R11 + 40]> */
		/* 8217B080h case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000028) );
		/* 8217B080h case    2:*/		return 0x8217B084;
		  /* 8217B084h */ case    3:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8217B084h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8217B084h case    3:*/		return 0x8217B088;
		  /* 8217B088h */ case    4:  		/* bc 4, CR0_EQ, 28 */
		/* 8217B088h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217B0A4;  }
		/* 8217B088h case    4:*/		return 0x8217B08C;
		  /* 8217B08Ch */ case    5:  		/* b 16 */
		/* 8217B08Ch case    5:*/		return 0x8217B09C;
		/* 8217B08Ch case    5:*/		return 0x8217B090;
	}
	return 0x8217B090;
} // Block from 8217B078h-8217B090h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217B090h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B090( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B090) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B090);
		  /* 8217B090h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8217B090h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217B090h case    0:*/		return 0x8217B094;
		  /* 8217B094h */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8217B094h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217B0A4;  }
		/* 8217B094h case    1:*/		return 0x8217B098;
	}
	return 0x8217B098;
} // Block from 8217B090h-8217B098h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217B098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B098);
		  /* 8217B098h */ case    0:  		/* mr R30, R11 */
		/* 8217B098h case    0:*/		regs.R30 = regs.R11;
		/* 8217B098h case    0:*/		return 0x8217B09C;
	}
	return 0x8217B09C;
} // Block from 8217B098h-8217B09Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217B09Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B09C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B09C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B09C);
		  /* 8217B09Ch */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8217B09Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217B09Ch case    0:*/		return 0x8217B0A0;
		  /* 8217B0A0h */ case    1:  		/* bc 4, CR6_EQ, -228 */
		/* 8217B0A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217AFBC;  }
		/* 8217B0A0h case    1:*/		return 0x8217B0A4;
	}
	return 0x8217B0A4;
} // Block from 8217B09Ch-8217B0A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217B0A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B0A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B0A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B0A4);
		  /* 8217B0A4h */ case    0:  		/* lwz R11, <#[R27 + 84]> */
		/* 8217B0A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000054) );
		/* 8217B0A4h case    0:*/		return 0x8217B0A8;
		  /* 8217B0A8h */ case    1:  		/* stw R11, <#[R31 + 84]> */
		/* 8217B0A8h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000054) );
		/* 8217B0A8h case    1:*/		return 0x8217B0AC;
		  /* 8217B0ACh */ case    2:  		/* lwz R10, <#[R26 + 620]> */
		/* 8217B0ACh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000026C) );
		/* 8217B0ACh case    2:*/		return 0x8217B0B0;
		  /* 8217B0B0h */ case    3:  		/* mulli R10, R10, 68 */
		/* 8217B0B0h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 8217B0B0h case    3:*/		return 0x8217B0B4;
		  /* 8217B0B4h */ case    4:  		/* lwz R11, <#[R26 + 616]> */
		/* 8217B0B4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000268) );
		/* 8217B0B4h case    4:*/		return 0x8217B0B8;
		  /* 8217B0B8h */ case    5:  		/* add R10, R10, R11 */
		/* 8217B0B8h case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8217B0B8h case    5:*/		return 0x8217B0BC;
		  /* 8217B0BCh */ case    6:  		/* cmplw CR6, R11, R10 */
		/* 8217B0BCh case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217B0BCh case    6:*/		return 0x8217B0C0;
		  /* 8217B0C0h */ case    7:  		/* bc 4, CR6_LT, 256 */
		/* 8217B0C0h case    7:*/		if ( !regs.CR[6].lt ) { return 0x8217B1C0;  }
		/* 8217B0C0h case    7:*/		return 0x8217B0C4;
		  /* 8217B0C4h */ case    8:  		/* addi R11, R11, 16 */
		/* 8217B0C4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x10);
		/* 8217B0C4h case    8:*/		return 0x8217B0C8;
		  /* 8217B0C8h */ case    9:  		/* lwz R10, <#[R11 - 8]> */
		/* 8217B0C8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 8217B0C8h case    9:*/		return 0x8217B0CC;
		  /* 8217B0CCh */ case   10:  		/* cmplwi CR6, R10, 0 */
		/* 8217B0CCh case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217B0CCh case   10:*/		return 0x8217B0D0;
		  /* 8217B0D0h */ case   11:  		/* bc 12, CR6_EQ, 48 */
		/* 8217B0D0h case   11:*/		if ( regs.CR[6].eq ) { return 0x8217B100;  }
		/* 8217B0D0h case   11:*/		return 0x8217B0D4;
		  /* 8217B0D4h */ case   12:  		/* lwz R9, <#[R10 + 48]> */
		/* 8217B0D4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 8217B0D4h case   12:*/		return 0x8217B0D8;
		  /* 8217B0D8h */ case   13:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 8217B0D8h case   13:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 8217B0D8h case   13:*/		return 0x8217B0DC;
		  /* 8217B0DCh */ case   14:  		/* bc 12, CR0_EQ, 36 */
		/* 8217B0DCh case   14:*/		if ( regs.CR[0].eq ) { return 0x8217B100;  }
		/* 8217B0DCh case   14:*/		return 0x8217B0E0;
		  /* 8217B0E0h */ case   15:  		/* b 16 */
		/* 8217B0E0h case   15:*/		return 0x8217B0F0;
		/* 8217B0E0h case   15:*/		return 0x8217B0E4;
		  /* 8217B0E4h */ case   16:  		/* lwz R9, <#[R10 + 48]> */
		/* 8217B0E4h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 8217B0E4h case   16:*/		return 0x8217B0E8;
		  /* 8217B0E8h */ case   17:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8217B0E8h case   17:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8217B0E8h case   17:*/		return 0x8217B0EC;
		  /* 8217B0ECh */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 8217B0ECh case   18:*/		if ( regs.CR[0].eq ) { return 0x8217B0FC;  }
		/* 8217B0ECh case   18:*/		return 0x8217B0F0;
	}
	return 0x8217B0F0;
} // Block from 8217B0A4h-8217B0F0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8217B0F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B0F0);
		  /* 8217B0F0h */ case    0:  		/* lwz R10, <#[R10 + 80]> */
		/* 8217B0F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 8217B0F0h case    0:*/		return 0x8217B0F4;
		  /* 8217B0F4h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217B0F4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217B0F4h case    1:*/		return 0x8217B0F8;
		  /* 8217B0F8h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8217B0F8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217B0E4;  }
		/* 8217B0F8h case    2:*/		return 0x8217B0FC;
	}
	return 0x8217B0FC;
} // Block from 8217B0F0h-8217B0FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217B0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B0FC);
		  /* 8217B0FCh */ case    0:  		/* stw R10, <#[R11 - 8]> */
		/* 8217B0FCh case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 8217B0FCh case    0:*/		return 0x8217B100;
	}
	return 0x8217B100;
} // Block from 8217B0FCh-8217B100h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217B100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B100);
		  /* 8217B100h */ case    0:  		/* lwz R10, <#[R11 - 8]> */
		/* 8217B100h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 8217B100h case    0:*/		return 0x8217B104;
		  /* 8217B104h */ case    1:  		/* cmplw CR6, R10, R27 */
		/* 8217B104h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 8217B104h case    1:*/		return 0x8217B108;
		  /* 8217B108h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8217B108h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217B110;  }
		/* 8217B108h case    2:*/		return 0x8217B10C;
		  /* 8217B10Ch */ case    3:  		/* stw R31, <#[R11 - 8]> */
		/* 8217B10Ch case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 8217B10Ch case    3:*/		return 0x8217B110;
	}
	return 0x8217B110;
} // Block from 8217B100h-8217B110h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217B110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B110);
		  /* 8217B110h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8217B110h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B110h case    0:*/		return 0x8217B114;
		  /* 8217B114h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217B114h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217B114h case    1:*/		return 0x8217B118;
		  /* 8217B118h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 8217B118h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217B148;  }
		/* 8217B118h case    2:*/		return 0x8217B11C;
		  /* 8217B11Ch */ case    3:  		/* lwz R9, <#[R10 + 48]> */
		/* 8217B11Ch case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 8217B11Ch case    3:*/		return 0x8217B120;
		  /* 8217B120h */ case    4:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 8217B120h case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 8217B120h case    4:*/		return 0x8217B124;
		  /* 8217B124h */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8217B124h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217B148;  }
		/* 8217B124h case    5:*/		return 0x8217B128;
		  /* 8217B128h */ case    6:  		/* b 16 */
		/* 8217B128h case    6:*/		return 0x8217B138;
		/* 8217B128h case    6:*/		return 0x8217B12C;
		  /* 8217B12Ch */ case    7:  		/* lwz R9, <#[R10 + 48]> */
		/* 8217B12Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 8217B12Ch case    7:*/		return 0x8217B130;
		  /* 8217B130h */ case    8:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8217B130h case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8217B130h case    8:*/		return 0x8217B134;
		  /* 8217B134h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 8217B134h case    9:*/		if ( regs.CR[0].eq ) { return 0x8217B144;  }
		/* 8217B134h case    9:*/		return 0x8217B138;
	}
	return 0x8217B138;
} // Block from 8217B110h-8217B138h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217B138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B138);
		  /* 8217B138h */ case    0:  		/* lwz R10, <#[R10 + 80]> */
		/* 8217B138h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 8217B138h case    0:*/		return 0x8217B13C;
		  /* 8217B13Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217B13Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217B13Ch case    1:*/		return 0x8217B140;
		  /* 8217B140h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8217B140h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217B12C;  }
		/* 8217B140h case    2:*/		return 0x8217B144;
	}
	return 0x8217B144;
} // Block from 8217B138h-8217B144h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217B144h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B144( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B144) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B144);
		  /* 8217B144h */ case    0:  		/* stw R10, <#[R11]> */
		/* 8217B144h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B144h case    0:*/		return 0x8217B148;
	}
	return 0x8217B148;
} // Block from 8217B144h-8217B148h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217B148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B148);
		  /* 8217B148h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8217B148h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B148h case    0:*/		return 0x8217B14C;
		  /* 8217B14Ch */ case    1:  		/* cmplw CR6, R10, R27 */
		/* 8217B14Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 8217B14Ch case    1:*/		return 0x8217B150;
		  /* 8217B150h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8217B150h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217B158;  }
		/* 8217B150h case    2:*/		return 0x8217B154;
		  /* 8217B154h */ case    3:  		/* stw R31, <#[R11]> */
		/* 8217B154h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B154h case    3:*/		return 0x8217B158;
	}
	return 0x8217B158;
} // Block from 8217B148h-8217B158h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217B158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B158);
		  /* 8217B158h */ case    0:  		/* lwz R10, <#[R11 - 4]> */
		/* 8217B158h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 8217B158h case    0:*/		return 0x8217B15C;
		  /* 8217B15Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217B15Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217B15Ch case    1:*/		return 0x8217B160;
		  /* 8217B160h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 8217B160h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217B190;  }
		/* 8217B160h case    2:*/		return 0x8217B164;
		  /* 8217B164h */ case    3:  		/* lwz R9, <#[R10 + 48]> */
		/* 8217B164h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 8217B164h case    3:*/		return 0x8217B168;
		  /* 8217B168h */ case    4:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 8217B168h case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 8217B168h case    4:*/		return 0x8217B16C;
		  /* 8217B16Ch */ case    5:  		/* bc 12, CR0_EQ, 36 */
		/* 8217B16Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8217B190;  }
		/* 8217B16Ch case    5:*/		return 0x8217B170;
		  /* 8217B170h */ case    6:  		/* b 16 */
		/* 8217B170h case    6:*/		return 0x8217B180;
		/* 8217B170h case    6:*/		return 0x8217B174;
		  /* 8217B174h */ case    7:  		/* lwz R9, <#[R10 + 48]> */
		/* 8217B174h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 8217B174h case    7:*/		return 0x8217B178;
		  /* 8217B178h */ case    8:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8217B178h case    8:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8217B178h case    8:*/		return 0x8217B17C;
		  /* 8217B17Ch */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 8217B17Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8217B18C;  }
		/* 8217B17Ch case    9:*/		return 0x8217B180;
	}
	return 0x8217B180;
} // Block from 8217B158h-8217B180h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217B180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B180);
		  /* 8217B180h */ case    0:  		/* lwz R10, <#[R10 + 80]> */
		/* 8217B180h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 8217B180h case    0:*/		return 0x8217B184;
		  /* 8217B184h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217B184h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217B184h case    1:*/		return 0x8217B188;
		  /* 8217B188h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8217B188h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217B174;  }
		/* 8217B188h case    2:*/		return 0x8217B18C;
	}
	return 0x8217B18C;
} // Block from 8217B180h-8217B18Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217B18Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B18C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B18C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B18C);
		  /* 8217B18Ch */ case    0:  		/* stw R10, <#[R11 - 4]> */
		/* 8217B18Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 8217B18Ch case    0:*/		return 0x8217B190;
	}
	return 0x8217B190;
} // Block from 8217B18Ch-8217B190h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217B190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B190);
		  /* 8217B190h */ case    0:  		/* lwz R10, <#[R11 - 4]> */
		/* 8217B190h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 8217B190h case    0:*/		return 0x8217B194;
		  /* 8217B194h */ case    1:  		/* cmplw CR6, R10, R27 */
		/* 8217B194h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 8217B194h case    1:*/		return 0x8217B198;
		  /* 8217B198h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8217B198h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217B1A0;  }
		/* 8217B198h case    2:*/		return 0x8217B19C;
		  /* 8217B19Ch */ case    3:  		/* stw R31, <#[R11 - 4]> */
		/* 8217B19Ch case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 8217B19Ch case    3:*/		return 0x8217B1A0;
	}
	return 0x8217B1A0;
} // Block from 8217B190h-8217B1A0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217B1A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B1A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B1A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B1A0);
		  /* 8217B1A0h */ case    0:  		/* lwz R9, <#[R26 + 620]> */
		/* 8217B1A0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x0000026C) );
		/* 8217B1A0h case    0:*/		return 0x8217B1A4;
		  /* 8217B1A4h */ case    1:  		/* addi R11, R11, 68 */
		/* 8217B1A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x44);
		/* 8217B1A4h case    1:*/		return 0x8217B1A8;
		  /* 8217B1A8h */ case    2:  		/* lwz R10, <#[R26 + 616]> */
		/* 8217B1A8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000268) );
		/* 8217B1A8h case    2:*/		return 0x8217B1AC;
		  /* 8217B1ACh */ case    3:  		/* mulli R9, R9, 68 */
		/* 8217B1ACh case    3:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R9,0x44);
		/* 8217B1ACh case    3:*/		return 0x8217B1B0;
		  /* 8217B1B0h */ case    4:  		/* add R10, R9, R10 */
		/* 8217B1B0h case    4:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8217B1B0h case    4:*/		return 0x8217B1B4;
		  /* 8217B1B4h */ case    5:  		/* addi R9, R11, -16 */
		/* 8217B1B4h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFF0);
		/* 8217B1B4h case    5:*/		return 0x8217B1B8;
		  /* 8217B1B8h */ case    6:  		/* cmplw CR6, R9, R10 */
		/* 8217B1B8h case    6:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 8217B1B8h case    6:*/		return 0x8217B1BC;
		  /* 8217B1BCh */ case    7:  		/* bc 12, CR6_LT, -244 */
		/* 8217B1BCh case    7:*/		if ( regs.CR[6].lt ) { return 0x8217B0C8;  }
		/* 8217B1BCh case    7:*/		return 0x8217B1C0;
	}
	return 0x8217B1C0;
} // Block from 8217B1A0h-8217B1C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217B1C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B1C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B1C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B1C0);
		  /* 8217B1C0h */ case    0:  		/* lwz R11, <#[R27 + 48]> */
		/* 8217B1C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000030) );
		/* 8217B1C0h case    0:*/		return 0x8217B1C4;
		  /* 8217B1C4h */ case    1:  		/* mr R3, R26 */
		/* 8217B1C4h case    1:*/		regs.R3 = regs.R26;
		/* 8217B1C4h case    1:*/		return 0x8217B1C8;
		  /* 8217B1C8h */ case    2:  		/* lwz R10, <#[R31 + 48]> */
		/* 8217B1C8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 8217B1C8h case    2:*/		return 0x8217B1CC;
		  /* 8217B1CCh */ case    3:  		/* lwz R9, <#[R31 + 76]> */
		/* 8217B1CCh case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217B1CCh case    3:*/		return 0x8217B1D0;
		  /* 8217B1D0h */ case    4:  		/* rlwimi R11, R10, 0, 9, 7 */
		/* 8217B1D0h case    4:*/		cpu::op::rlwimi<0,0,9,7>(regs,&regs.R11,regs.R10);
		/* 8217B1D0h case    4:*/		return 0x8217B1D4;
		  /* 8217B1D4h */ case    5:  		/* stw R11, <#[R31 + 48]> */
		/* 8217B1D4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8217B1D4h case    5:*/		return 0x8217B1D8;
		  /* 8217B1D8h */ case    6:  		/* lwz R11, <#[R27 + 76]> */
		/* 8217B1D8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 8217B1D8h case    6:*/		return 0x8217B1DC;
		  /* 8217B1DCh */ case    7:  		/* rlwimi R9, R11, 0, 9, 9 */
		/* 8217B1DCh case    7:*/		cpu::op::rlwimi<0,0,9,9>(regs,&regs.R9,regs.R11);
		/* 8217B1DCh case    7:*/		return 0x8217B1E0;
		  /* 8217B1E0h */ case    8:  		/* stw R9, <#[R31 + 76]> */
		/* 8217B1E0h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217B1E0h case    8:*/		return 0x8217B1E4;
		  /* 8217B1E4h */ case    9:  		/* lwz R11, <#[R27 + 76]> */
		/* 8217B1E4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 8217B1E4h case    9:*/		return 0x8217B1E8;
		  /* 8217B1E8h */ case   10:  		/* rlwimi R9, R11, 0, 8, 8 */
		/* 8217B1E8h case   10:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R9,regs.R11);
		/* 8217B1E8h case   10:*/		return 0x8217B1EC;
		  /* 8217B1ECh */ case   11:  		/* stw R9, <#[R31 + 76]> */
		/* 8217B1ECh case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217B1ECh case   11:*/		return 0x8217B1F0;
		  /* 8217B1F0h */ case   12:  		/* rlwinm R10, R9, 0, 0, 31 */
		/* 8217B1F0h case   12:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R9);
		/* 8217B1F0h case   12:*/		return 0x8217B1F4;
		  /* 8217B1F4h */ case   13:  		/* lwz R11, <#[R27 + 112]> */
		/* 8217B1F4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000070) );
		/* 8217B1F4h case   13:*/		return 0x8217B1F8;
		  /* 8217B1F8h */ case   14:  		/* stw R11, <#[R31 + 112]> */
		/* 8217B1F8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 8217B1F8h case   14:*/		return 0x8217B1FC;
		  /* 8217B1FCh */ case   15:  		/* lwz R11, <#[R27 + 76]> */
		/* 8217B1FCh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000004C) );
		/* 8217B1FCh case   15:*/		return 0x8217B200;
		  /* 8217B200h */ case   16:  		/* rlwimi R10, R11, 0, 7, 7 */
		/* 8217B200h case   16:*/		cpu::op::rlwimi<0,0,7,7>(regs,&regs.R10,regs.R11);
		/* 8217B200h case   16:*/		return 0x8217B204;
		  /* 8217B204h */ case   17:  		/* mr R11, R10 */
		/* 8217B204h case   17:*/		regs.R11 = regs.R10;
		/* 8217B204h case   17:*/		return 0x8217B208;
		  /* 8217B208h */ case   18:  		/* stw R10, <#[R31 + 76]> */
		/* 8217B208h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217B208h case   18:*/		return 0x8217B20C;
		  /* 8217B20Ch */ case   19:  		/* lwz R10, <#[R27 + 76]> */
		/* 8217B20Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000004C) );
		/* 8217B20Ch case   19:*/		return 0x8217B210;
		  /* 8217B210h */ case   20:  		/* rlwimi R11, R10, 0, 6, 6 */
		/* 8217B210h case   20:*/		cpu::op::rlwimi<0,0,6,6>(regs,&regs.R11,regs.R10);
		/* 8217B210h case   20:*/		return 0x8217B214;
		  /* 8217B214h */ case   21:  		/* stw R11, <#[R31 + 76]> */
		/* 8217B214h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217B214h case   21:*/		return 0x8217B218;
		  /* 8217B218h */ case   22:  		/* lwz R11, <#[R27 + 108]> */
		/* 8217B218h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000006C) );
		/* 8217B218h case   22:*/		return 0x8217B21C;
		  /* 8217B21Ch */ case   23:  		/* stw R11, <#[R31 + 108]> */
		/* 8217B21Ch case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8217B21Ch case   23:*/		return 0x8217B220;
		  /* 8217B220h */ case   24:  		/* lwz R11, <#[R27 + 72]> */
		/* 8217B220h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000048) );
		/* 8217B220h case   24:*/		return 0x8217B224;
		  /* 8217B224h */ case   25:  		/* mr R27, R31 */
		/* 8217B224h case   25:*/		regs.R27 = regs.R31;
		/* 8217B224h case   25:*/		return 0x8217B228;
		  /* 8217B228h */ case   26:  		/* stw R11, <#[R31 + 72]> */
		/* 8217B228h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000048) );
		/* 8217B228h case   26:*/		return 0x8217B22C;
		  /* 8217B22Ch */ case   27:  		/* bl 458996 */
		/* 8217B22Ch case   27:*/		regs.LR = 0x8217B230; return 0x821EB320;
		/* 8217B22Ch case   27:*/		return 0x8217B230;
	}
	return 0x8217B230;
} // Block from 8217B1C0h-8217B230h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217B230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B230);
		  /* 8217B230h */ case    0:  		/* mr R3, R27 */
		/* 8217B230h case    0:*/		regs.R3 = regs.R27;
		/* 8217B230h case    0:*/		return 0x8217B234;
		  /* 8217B234h */ case    1:  		/* addi R1, R1, 144 */
		/* 8217B234h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217B234h case    1:*/		return 0x8217B238;
		  /* 8217B238h */ case    2:  		/* b -958360 */
		/* 8217B238h case    2:*/		return 0x820912A0;
		/* 8217B238h case    2:*/		return 0x8217B23C;
		  /* 8217B23Ch */ case    3:  		/* nop */
		/* 8217B23Ch case    3:*/		cpu::op::nop();
		/* 8217B23Ch case    3:*/		return 0x8217B240;
	}
	return 0x8217B240;
} // Block from 8217B230h-8217B240h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217B240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B240);
		  /* 8217B240h */ case    0:  		/* mfspr R12, LR */
		/* 8217B240h case    0:*/		regs.R12 = regs.LR;
		/* 8217B240h case    0:*/		return 0x8217B244;
		  /* 8217B244h */ case    1:  		/* bl -958496 */
		/* 8217B244h case    1:*/		regs.LR = 0x8217B248; return 0x82091224;
		/* 8217B244h case    1:*/		return 0x8217B248;
		  /* 8217B248h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 8217B248h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 8217B248h case    2:*/		return 0x8217B24C;
		  /* 8217B24Ch */ case    3:  		/* lwz R31, <#[R3 + 4]> */
		/* 8217B24Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000004) );
		/* 8217B24Ch case    3:*/		return 0x8217B250;
		  /* 8217B250h */ case    4:  		/* mr R17, R10 */
		/* 8217B250h case    4:*/		regs.R17 = regs.R10;
		/* 8217B250h case    4:*/		return 0x8217B254;
		  /* 8217B254h */ case    5:  		/* lwz R11, <#[R4 + 76]> */
		/* 8217B254h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000004C) );
		/* 8217B254h case    5:*/		return 0x8217B258;
		  /* 8217B258h */ case    6:  		/* mr R24, R3 */
		/* 8217B258h case    6:*/		regs.R24 = regs.R3;
		/* 8217B258h case    6:*/		return 0x8217B25C;
		  /* 8217B25Ch */ case    7:  		/* mr R28, R4 */
		/* 8217B25Ch case    7:*/		regs.R28 = regs.R4;
		/* 8217B25Ch case    7:*/		return 0x8217B260;
		  /* 8217B260h */ case    8:  		/* mr R16, R5 */
		/* 8217B260h case    8:*/		regs.R16 = regs.R5;
		/* 8217B260h case    8:*/		return 0x8217B264;
		  /* 8217B264h */ case    9:  		/* mr R19, R6 */
		/* 8217B264h case    9:*/		regs.R19 = regs.R6;
		/* 8217B264h case    9:*/		return 0x8217B268;
		  /* 8217B268h */ case   10:  		/* mr R22, R7 */
		/* 8217B268h case   10:*/		regs.R22 = regs.R7;
		/* 8217B268h case   10:*/		return 0x8217B26C;
		  /* 8217B26Ch */ case   11:  		/* mr R27, R8 */
		/* 8217B26Ch case   11:*/		regs.R27 = regs.R8;
		/* 8217B26Ch case   11:*/		return 0x8217B270;
		  /* 8217B270h */ case   12:  		/* mr R18, R9 */
		/* 8217B270h case   12:*/		regs.R18 = regs.R9;
		/* 8217B270h case   12:*/		return 0x8217B274;
		  /* 8217B274h */ case   13:  		/* li R20, 0 */
		/* 8217B274h case   13:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 8217B274h case   13:*/		return 0x8217B278;
		  /* 8217B278h */ case   14:  		/* mr R26, R8 */
		/* 8217B278h case   14:*/		regs.R26 = regs.R8;
		/* 8217B278h case   14:*/		return 0x8217B27C;
		  /* 8217B27Ch */ case   15:  		/* rlwinm. R10, R31, 0, 31, 31 */
		/* 8217B27Ch case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R31);
		/* 8217B27Ch case   15:*/		return 0x8217B280;
		  /* 8217B280h */ case   16:  		/* rlwinm R15, R11, 10, 31, 31 */
		/* 8217B280h case   16:*/		cpu::op::rlwinm<0,10,31,31>(regs,&regs.R15,regs.R11);
		/* 8217B280h case   16:*/		return 0x8217B284;
		  /* 8217B284h */ case   17:  		/* li R21, 0 */
		/* 8217B284h case   17:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8217B284h case   17:*/		return 0x8217B288;
		  /* 8217B288h */ case   18:  		/* li R23, 0 */
		/* 8217B288h case   18:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 8217B288h case   18:*/		return 0x8217B28C;
		  /* 8217B28Ch */ case   19:  		/* bc 4, CR0_EQ, 920 */
		/* 8217B28Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x8217B624;  }
		/* 8217B28Ch case   19:*/		return 0x8217B290;
		  /* 8217B290h */ case   20:  		/* cmplwi CR0, R31, 0 */
		/* 8217B290h case   20:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217B290h case   20:*/		return 0x8217B294;
		  /* 8217B294h */ case   21:  		/* bc 12, CR0_EQ, 912 */
		/* 8217B294h case   21:*/		if ( regs.CR[0].eq ) { return 0x8217B624;  }
		/* 8217B294h case   21:*/		return 0x8217B298;
		  /* 8217B298h */ case   22:  		/* li R25, 1 */
		/* 8217B298h case   22:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8217B298h case   22:*/		return 0x8217B29C;
		  /* 8217B29Ch */ case   23:  		/* lwz R11, <#[R31 + 44]> */
		/* 8217B29Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217B29Ch case   23:*/		return 0x8217B2A0;
		  /* 8217B2A0h */ case   24:  		/* cmplw CR6, R11, R22 */
		/* 8217B2A0h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R22);
		/* 8217B2A0h case   24:*/		return 0x8217B2A4;
		  /* 8217B2A4h */ case   25:  		/* bc 12, CR6_EQ, 848 */
		/* 8217B2A4h case   25:*/		if ( regs.CR[6].eq ) { return 0x8217B5F4;  }
		/* 8217B2A4h case   25:*/		return 0x8217B2A8;
		  /* 8217B2A8h */ case   26:  		/* lwz R9, <#[R31 + 40]> */
		/* 8217B2A8h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 8217B2A8h case   26:*/		return 0x8217B2AC;
		  /* 8217B2ACh */ case   27:  		/* lwz R11, <#[R28 + 48]> */
		/* 8217B2ACh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 8217B2ACh case   27:*/		return 0x8217B2B0;
		  /* 8217B2B0h */ case   28:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 8217B2B0h case   28:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 8217B2B0h case   28:*/		return 0x8217B2B4;
		  /* 8217B2B4h */ case   29:  		/* lwz R8, <#[R9]> */
		/* 8217B2B4h case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8217B2B4h case   29:*/		return 0x8217B2B8;
		  /* 8217B2B8h */ case   30:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 8217B2B8h case   30:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 8217B2B8h case   30:*/		return 0x8217B2BC;
		  /* 8217B2BCh */ case   31:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 8217B2BCh case   31:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 8217B2BCh case   31:*/		return 0x8217B2C0;
		  /* 8217B2C0h */ case   32:  		/* rlwinm R10, R8, 0, 13, 31 */
		/* 8217B2C0h case   32:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R8);
		/* 8217B2C0h case   32:*/		return 0x8217B2C4;
		  /* 8217B2C4h */ case   33:  		/* addi R11, R11, 1 */
		/* 8217B2C4h case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217B2C4h case   33:*/		return 0x8217B2C8;
		  /* 8217B2C8h */ case   34:  		/* addi R10, R10, 31 */
		/* 8217B2C8h case   34:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 8217B2C8h case   34:*/		return 0x8217B2CC;
		  /* 8217B2CCh */ case   35:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217B2CCh case   35:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217B2CCh case   35:*/		return 0x8217B2D0;
		  /* 8217B2D0h */ case   36:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 8217B2D0h case   36:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 8217B2D0h case   36:*/		return 0x8217B2D4;
		  /* 8217B2D4h */ case   37:  		/* slw R8, R25, R7 */
		/* 8217B2D4h case   37:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R25,regs.R7);
		/* 8217B2D4h case   37:*/		return 0x8217B2D8;
		  /* 8217B2D8h */ case   38:  		/* add R11, R10, R11 */
		/* 8217B2D8h case   38:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217B2D8h case   38:*/		return 0x8217B2DC;
		  /* 8217B2DCh */ case   39:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8217B2DCh case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8217B2DCh case   39:*/		return 0x8217B2E0;
		  /* 8217B2E0h */ case   40:  		/* and. R11, R11, R8 */
		/* 8217B2E0h case   40:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8217B2E0h case   40:*/		return 0x8217B2E4;
		  /* 8217B2E4h */ case   41:  		/* bc 12, CR0_EQ, 784 */
		/* 8217B2E4h case   41:*/		if ( regs.CR[0].eq ) { return 0x8217B5F4;  }
		/* 8217B2E4h case   41:*/		return 0x8217B2E8;
		  /* 8217B2E8h */ case   42:  		/* lwz R11, <#[R31 + 36]> */
		/* 8217B2E8h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8217B2E8h case   42:*/		return 0x8217B2EC;
		  /* 8217B2ECh */ case   43:  		/* addi R29, R31, 32 */
		/* 8217B2ECh case   43:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x20);
		/* 8217B2ECh case   43:*/		return 0x8217B2F0;
		  /* 8217B2F0h */ case   44:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217B2F0h case   44:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217B2F0h case   44:*/		return 0x8217B2F4;
		  /* 8217B2F4h */ case   45:  		/* bc 4, CR0_EQ, 96 */
		/* 8217B2F4h case   45:*/		if ( !regs.CR[0].eq ) { return 0x8217B354;  }
		/* 8217B2F4h case   45:*/		return 0x8217B2F8;
		  /* 8217B2F8h */ case   46:  		/* lwz R11, <#[R29]> */
		/* 8217B2F8h case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8217B2F8h case   46:*/		return 0x8217B2FC;
		  /* 8217B2FCh */ case   47:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217B2FCh case   47:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217B2FCh case   47:*/		return 0x8217B300;
		  /* 8217B300h */ case   48:  		/* addic. R11, R11, -40 */
		/* 8217B300h case   48:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217B300h case   48:*/		return 0x8217B304;
		  /* 8217B304h */ case   49:  		/* bc 12, CR0_EQ, 80 */
		/* 8217B304h case   49:*/		if ( regs.CR[0].eq ) { return 0x8217B354;  }
		/* 8217B304h case   49:*/		return 0x8217B308;
		  /* 8217B308h */ case   50:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217B308h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217B308h case   50:*/		return 0x8217B30C;
		  /* 8217B30Ch */ case   51:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217B30Ch case   51:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217B30Ch case   51:*/		return 0x8217B310;
		  /* 8217B310h */ case   52:  		/* cmplwi CR6, R11, 86 */
		/* 8217B310h case   52:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8217B310h case   52:*/		return 0x8217B314;
		  /* 8217B314h */ case   53:  		/* bc 12, CR6_EQ, 48 */
		/* 8217B314h case   53:*/		if ( regs.CR[6].eq ) { return 0x8217B344;  }
		/* 8217B314h case   53:*/		return 0x8217B318;
		  /* 8217B318h */ case   54:  		/* cmplwi CR6, R11, 87 */
		/* 8217B318h case   54:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8217B318h case   54:*/		return 0x8217B31C;
		  /* 8217B31Ch */ case   55:  		/* bc 12, CR6_EQ, 40 */
		/* 8217B31Ch case   55:*/		if ( regs.CR[6].eq ) { return 0x8217B344;  }
		/* 8217B31Ch case   55:*/		return 0x8217B320;
		  /* 8217B320h */ case   56:  		/* cmplwi CR6, R11, 89 */
		/* 8217B320h case   56:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8217B320h case   56:*/		return 0x8217B324;
		  /* 8217B324h */ case   57:  		/* bc 12, CR6_EQ, 32 */
		/* 8217B324h case   57:*/		if ( regs.CR[6].eq ) { return 0x8217B344;  }
		/* 8217B324h case   57:*/		return 0x8217B328;
		  /* 8217B328h */ case   58:  		/* cmplwi CR6, R11, 90 */
		/* 8217B328h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8217B328h case   58:*/		return 0x8217B32C;
		  /* 8217B32Ch */ case   59:  		/* bc 12, CR6_EQ, 24 */
		/* 8217B32Ch case   59:*/		if ( regs.CR[6].eq ) { return 0x8217B344;  }
		/* 8217B32Ch case   59:*/		return 0x8217B330;
		  /* 8217B330h */ case   60:  		/* cmplwi CR6, R11, 84 */
		/* 8217B330h case   60:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8217B330h case   60:*/		return 0x8217B334;
		  /* 8217B334h */ case   61:  		/* bc 12, CR6_EQ, 16 */
		/* 8217B334h case   61:*/		if ( regs.CR[6].eq ) { return 0x8217B344;  }
		/* 8217B334h case   61:*/		return 0x8217B338;
		  /* 8217B338h */ case   62:  		/* cmplwi CR6, R11, 85 */
		/* 8217B338h case   62:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8217B338h case   62:*/		return 0x8217B33C;
		  /* 8217B33Ch */ case   63:  		/* li R11, 0 */
		/* 8217B33Ch case   63:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217B33Ch case   63:*/		return 0x8217B340;
		  /* 8217B340h */ case   64:  		/* bc 4, CR6_EQ, 8 */
		/* 8217B340h case   64:*/		if ( !regs.CR[6].eq ) { return 0x8217B348;  }
		/* 8217B340h case   64:*/		return 0x8217B344;
	}
	return 0x8217B344;
} // Block from 8217B240h-8217B344h (65 instructions)

//////////////////////////////////////////////////////
// Block at 8217B344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B344);
		  /* 8217B344h */ case    0:  		/* mr R11, R25 */
		/* 8217B344h case    0:*/		regs.R11 = regs.R25;
		/* 8217B344h case    0:*/		return 0x8217B348;
	}
	return 0x8217B348;
} // Block from 8217B344h-8217B348h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217B348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B348);
		  /* 8217B348h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217B348h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217B348h case    0:*/		return 0x8217B34C;
		  /* 8217B34Ch */ case    1:  		/* bc 12, CR0_EQ, 8 */
		/* 8217B34Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8217B354;  }
		/* 8217B34Ch case    1:*/		return 0x8217B350;
		  /* 8217B350h */ case    2:  		/* mr R20, R25 */
		/* 8217B350h case    2:*/		regs.R20 = regs.R25;
		/* 8217B350h case    2:*/		return 0x8217B354;
	}
	return 0x8217B354;
} // Block from 8217B348h-8217B354h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217B354h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B354( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B354) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B354);
		  /* 8217B354h */ case    0:  		/* lwz R30, <#[R31 + 12]> */
		/* 8217B354h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 8217B354h case    0:*/		return 0x8217B358;
		  /* 8217B358h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 8217B358h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217B358h case    1:*/		return 0x8217B35C;
		  /* 8217B35Ch */ case    2:  		/* bc 12, CR6_EQ, 136 */
		/* 8217B35Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8217B3E4;  }
		/* 8217B35Ch case    2:*/		return 0x8217B360;
		  /* 8217B360h */ case    3:  		/* lwz R5, <#[R30]> */
		/* 8217B360h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000000) );
		/* 8217B360h case    3:*/		return 0x8217B364;
		  /* 8217B364h */ case    4:  		/* lwz R11, <#[R28 + 48]> */
		/* 8217B364h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 8217B364h case    4:*/		return 0x8217B368;
		  /* 8217B368h */ case    5:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 8217B368h case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 8217B368h case    5:*/		return 0x8217B36C;
		  /* 8217B36Ch */ case    6:  		/* lwz R9, <#[R5 + 40]> */
		/* 8217B36Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000028) );
		/* 8217B36Ch case    6:*/		return 0x8217B370;
		  /* 8217B370h */ case    7:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 8217B370h case    7:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 8217B370h case    7:*/		return 0x8217B374;
		  /* 8217B374h */ case    8:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 8217B374h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 8217B374h case    8:*/		return 0x8217B378;
		  /* 8217B378h */ case    9:  		/* addi R11, R11, 1 */
		/* 8217B378h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217B378h case    9:*/		return 0x8217B37C;
		  /* 8217B37Ch */ case   10:  		/* slw R8, R25, R10 */
		/* 8217B37Ch case   10:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R25,regs.R10);
		/* 8217B37Ch case   10:*/		return 0x8217B380;
		  /* 8217B380h */ case   11:  		/* lwz R7, <#[R9]> */
		/* 8217B380h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 8217B380h case   11:*/		return 0x8217B384;
		  /* 8217B384h */ case   12:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8217B384h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8217B384h case   12:*/		return 0x8217B388;
		  /* 8217B388h */ case   13:  		/* rlwinm R11, R7, 0, 13, 31 */
		/* 8217B388h case   13:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R7);
		/* 8217B388h case   13:*/		return 0x8217B38C;
		  /* 8217B38Ch */ case   14:  		/* addi R11, R11, 31 */
		/* 8217B38Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8217B38Ch case   14:*/		return 0x8217B390;
		  /* 8217B390h */ case   15:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 8217B390h case   15:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 8217B390h case   15:*/		return 0x8217B394;
		  /* 8217B394h */ case   16:  		/* add R11, R11, R10 */
		/* 8217B394h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8217B394h case   16:*/		return 0x8217B398;
		  /* 8217B398h */ case   17:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8217B398h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8217B398h case   17:*/		return 0x8217B39C;
		  /* 8217B39Ch */ case   18:  		/* and. R11, R11, R8 */
		/* 8217B39Ch case   18:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8217B39Ch case   18:*/		return 0x8217B3A0;
		  /* 8217B3A0h */ case   19:  		/* bc 4, CR0_EQ, 60 */
		/* 8217B3A0h case   19:*/		if ( !regs.CR[0].eq ) { return 0x8217B3DC;  }
		/* 8217B3A0h case   19:*/		return 0x8217B3A4;
		  /* 8217B3A4h */ case   20:  		/* lwz R11, <#[R5 + 48]> */
		/* 8217B3A4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 8217B3A4h case   20:*/		return 0x8217B3A8;
		  /* 8217B3A8h */ case   21:  		/* lwz R10, <#[R31 + 40]> */
		/* 8217B3A8h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 8217B3A8h case   21:*/		return 0x8217B3AC;
		  /* 8217B3ACh */ case   22:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217B3ACh case   22:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217B3ACh case   22:*/		return 0x8217B3B0;
		  /* 8217B3B0h */ case   23:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8217B3B0h case   23:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8217B3B0h case   23:*/		return 0x8217B3B4;
		  /* 8217B3B4h */ case   24:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217B3B4h case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217B3B4h case   24:*/		return 0x8217B3B8;
		  /* 8217B3B8h */ case   25:  		/* addi R11, R11, 1 */
		/* 8217B3B8h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217B3B8h case   25:*/		return 0x8217B3BC;
		  /* 8217B3BCh */ case   26:  		/* slw R9, R25, R9 */
		/* 8217B3BCh case   26:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R25,regs.R9);
		/* 8217B3BCh case   26:*/		return 0x8217B3C0;
		  /* 8217B3C0h */ case   27:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217B3C0h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217B3C0h case   27:*/		return 0x8217B3C4;
		  /* 8217B3C4h */ case   28:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8217B3C4h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8217B3C4h case   28:*/		return 0x8217B3C8;
		  /* 8217B3C8h */ case   29:  		/* and. R11, R9, R11 */
		/* 8217B3C8h case   29:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8217B3C8h case   29:*/		return 0x8217B3CC;
		  /* 8217B3CCh */ case   30:  		/* bc 4, CR0_EQ, 16 */
		/* 8217B3CCh case   30:*/		if ( !regs.CR[0].eq ) { return 0x8217B3DC;  }
		/* 8217B3CCh case   30:*/		return 0x8217B3D0;
		  /* 8217B3D0h */ case   31:  		/* mr R4, R31 */
		/* 8217B3D0h case   31:*/		regs.R4 = regs.R31;
		/* 8217B3D0h case   31:*/		return 0x8217B3D4;
		  /* 8217B3D4h */ case   32:  		/* mr R3, R24 */
		/* 8217B3D4h case   32:*/		regs.R3 = regs.R24;
		/* 8217B3D4h case   32:*/		return 0x8217B3D8;
		  /* 8217B3D8h */ case   33:  		/* bl -9480 */
		/* 8217B3D8h case   33:*/		regs.LR = 0x8217B3DC; return 0x82178ED0;
		/* 8217B3D8h case   33:*/		return 0x8217B3DC;
	}
	return 0x8217B3DC;
} // Block from 8217B354h-8217B3DCh (34 instructions)

//////////////////////////////////////////////////////
// Block at 8217B3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B3DC);
		  /* 8217B3DCh */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 8217B3DCh case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 8217B3DCh case    0:*/		return 0x8217B3E0;
		  /* 8217B3E0h */ case    1:  		/* b -136 */
		/* 8217B3E0h case    1:*/		return 0x8217B358;
		/* 8217B3E0h case    1:*/		return 0x8217B3E4;
	}
	return 0x8217B3E4;
} // Block from 8217B3DCh-8217B3E4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217B3E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B3E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B3E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B3E4);
		  /* 8217B3E4h */ case    0:  		/* mr R4, R28 */
		/* 8217B3E4h case    0:*/		regs.R4 = regs.R28;
		/* 8217B3E4h case    0:*/		return 0x8217B3E8;
		  /* 8217B3E8h */ case    1:  		/* mr R3, R31 */
		/* 8217B3E8h case    1:*/		regs.R3 = regs.R31;
		/* 8217B3E8h case    1:*/		return 0x8217B3EC;
		  /* 8217B3ECh */ case    2:  		/* bl 739812 */
		/* 8217B3ECh case    2:*/		regs.LR = 0x8217B3F0; return 0x8222FDD0;
		/* 8217B3ECh case    2:*/		return 0x8217B3F0;
		  /* 8217B3F0h */ case    3:  		/* rlwinm. R7, R3, 0, 24, 31 */
		/* 8217B3F0h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R7,regs.R3);
		/* 8217B3F0h case    3:*/		return 0x8217B3F4;
		  /* 8217B3F4h */ case    4:  		/* bc 12, CR0_EQ, 104 */
		/* 8217B3F4h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217B45C;  }
		/* 8217B3F4h case    4:*/		return 0x8217B3F8;
		  /* 8217B3F8h */ case    5:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217B3F8h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217B3F8h case    5:*/		return 0x8217B3FC;
		  /* 8217B3FCh */ case    6:  		/* rlwinm R10, R27, 0, 0, 30 */
		/* 8217B3FCh case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R27);
		/* 8217B3FCh case    6:*/		return 0x8217B400;
		  /* 8217B400h */ case    7:  		/* addi R9, R11, 4 */
		/* 8217B400h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8217B400h case    7:*/		return 0x8217B404;
		  /* 8217B404h */ case    8:  		/* addi R8, R10, 4 */
		/* 8217B404h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 8217B404h case    8:*/		return 0x8217B408;
		  /* 8217B408h */ case    9:  		/* cmplw CR6, R27, R26 */
		/* 8217B408h case    9:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R26);
		/* 8217B408h case    9:*/		return 0x8217B40C;
		  /* 8217B40Ch */ case   10:  		/* lwz R6, <#[R11 + 4]> */
		/* 8217B40Ch case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B40Ch case   10:*/		return 0x8217B410;
		  /* 8217B410h */ case   11:  		/* lwz R5, <#[R11]> */
		/* 8217B410h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B410h case   11:*/		return 0x8217B414;
		  /* 8217B414h */ case   12:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8217B414h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8217B414h case   12:*/		return 0x8217B418;
		  /* 8217B418h */ case   13:  		/* stw R5, <#[R6]> */
		/* 8217B418h case   13:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R6 + 0x00000000) );
		/* 8217B418h case   13:*/		return 0x8217B41C;
		  /* 8217B41Ch */ case   14:  		/* lwz R6, <#[R11 + 4]> */
		/* 8217B41Ch case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B41Ch case   14:*/		return 0x8217B420;
		  /* 8217B420h */ case   15:  		/* lwz R5, <#[R11]> */
		/* 8217B420h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B420h case   15:*/		return 0x8217B424;
		  /* 8217B424h */ case   16:  		/* rlwinm R5, R5, 0, 0, 30 */
		/* 8217B424h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R5,regs.R5);
		/* 8217B424h case   16:*/		return 0x8217B428;
		  /* 8217B428h */ case   17:  		/* stw R6, <#[R5]> */
		/* 8217B428h case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R5 + 0x00000000) );
		/* 8217B428h case   17:*/		return 0x8217B42C;
		  /* 8217B42Ch */ case   18:  		/* lwz R6, <#[R10 + 4]> */
		/* 8217B42Ch case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8217B42Ch case   18:*/		return 0x8217B430;
		  /* 8217B430h */ case   19:  		/* stw R6, <#[R11 + 4]> */
		/* 8217B430h case   19:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B430h case   19:*/		return 0x8217B434;
		  /* 8217B434h */ case   20:  		/* lwz R6, <#[R10 + 4]> */
		/* 8217B434h case   20:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8217B434h case   20:*/		return 0x8217B438;
		  /* 8217B438h */ case   21:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8217B438h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8217B438h case   21:*/		return 0x8217B43C;
		  /* 8217B43Ch */ case   22:  		/* stw R9, <#[R6]> */
		/* 8217B43Ch case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 8217B43Ch case   22:*/		return 0x8217B440;
		  /* 8217B440h */ case   23:  		/* stw R8, <#[R11]> */
		/* 8217B440h case   23:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B440h case   23:*/		return 0x8217B444;
		  /* 8217B444h */ case   24:  		/* stw R11, <#[R10 + 4]> */
		/* 8217B444h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217B444h case   24:*/		return 0x8217B448;
		  /* 8217B448h */ case   25:  		/* bc 4, CR6_EQ, 8 */
		/* 8217B448h case   25:*/		if ( !regs.CR[6].eq ) { return 0x8217B450;  }
		/* 8217B448h case   25:*/		return 0x8217B44C;
		  /* 8217B44Ch */ case   26:  		/* mr R26, R31 */
		/* 8217B44Ch case   26:*/		regs.R26 = regs.R31;
		/* 8217B44Ch case   26:*/		return 0x8217B450;
	}
	return 0x8217B450;
} // Block from 8217B3E4h-8217B450h (27 instructions)

//////////////////////////////////////////////////////
// Block at 8217B450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B450);
		  /* 8217B450h */ case    0:  		/* mr R27, R31 */
		/* 8217B450h case    0:*/		regs.R27 = regs.R31;
		/* 8217B450h case    0:*/		return 0x8217B454;
		  /* 8217B454h */ case    1:  		/* stw R19, <#[R31 + 44]> */
		/* 8217B454h case    1:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217B454h case    1:*/		return 0x8217B458;
		  /* 8217B458h */ case    2:  		/* b 96 */
		/* 8217B458h case    2:*/		return 0x8217B4B8;
		/* 8217B458h case    2:*/		return 0x8217B45C;
	}
	return 0x8217B45C;
} // Block from 8217B450h-8217B45Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217B45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B45C);
		  /* 8217B45Ch */ case    0:  		/* rlwinm. R11, R15, 0, 24, 31 */
		/* 8217B45Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R15);
		/* 8217B45Ch case    0:*/		return 0x8217B460;
		  /* 8217B460h */ case    1:  		/* bc 4, CR0_EQ, 88 */
		/* 8217B460h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217B4B8;  }
		/* 8217B460h case    1:*/		return 0x8217B464;
		  /* 8217B464h */ case    2:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217B464h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217B464h case    2:*/		return 0x8217B468;
		  /* 8217B468h */ case    3:  		/* rlwinm R10, R26, 0, 0, 30 */
		/* 8217B468h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R26);
		/* 8217B468h case    3:*/		return 0x8217B46C;
		  /* 8217B46Ch */ case    4:  		/* addi R9, R11, 4 */
		/* 8217B46Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8217B46Ch case    4:*/		return 0x8217B470;
		  /* 8217B470h */ case    5:  		/* addi R8, R10, 4 */
		/* 8217B470h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 8217B470h case    5:*/		return 0x8217B474;
		  /* 8217B474h */ case    6:  		/* mr R26, R31 */
		/* 8217B474h case    6:*/		regs.R26 = regs.R31;
		/* 8217B474h case    6:*/		return 0x8217B478;
		  /* 8217B478h */ case    7:  		/* lwz R6, <#[R11 + 4]> */
		/* 8217B478h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B478h case    7:*/		return 0x8217B47C;
		  /* 8217B47Ch */ case    8:  		/* lwz R5, <#[R11]> */
		/* 8217B47Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B47Ch case    8:*/		return 0x8217B480;
		  /* 8217B480h */ case    9:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8217B480h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8217B480h case    9:*/		return 0x8217B484;
		  /* 8217B484h */ case   10:  		/* stw R5, <#[R6]> */
		/* 8217B484h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R6 + 0x00000000) );
		/* 8217B484h case   10:*/		return 0x8217B488;
		  /* 8217B488h */ case   11:  		/* lwz R6, <#[R11 + 4]> */
		/* 8217B488h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B488h case   11:*/		return 0x8217B48C;
		  /* 8217B48Ch */ case   12:  		/* lwz R5, <#[R11]> */
		/* 8217B48Ch case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B48Ch case   12:*/		return 0x8217B490;
		  /* 8217B490h */ case   13:  		/* rlwinm R5, R5, 0, 0, 30 */
		/* 8217B490h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R5,regs.R5);
		/* 8217B490h case   13:*/		return 0x8217B494;
		  /* 8217B494h */ case   14:  		/* stw R6, <#[R5]> */
		/* 8217B494h case   14:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R5 + 0x00000000) );
		/* 8217B494h case   14:*/		return 0x8217B498;
		  /* 8217B498h */ case   15:  		/* lwz R6, <#[R10 + 4]> */
		/* 8217B498h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8217B498h case   15:*/		return 0x8217B49C;
		  /* 8217B49Ch */ case   16:  		/* stw R6, <#[R11 + 4]> */
		/* 8217B49Ch case   16:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B49Ch case   16:*/		return 0x8217B4A0;
		  /* 8217B4A0h */ case   17:  		/* lwz R6, <#[R10 + 4]> */
		/* 8217B4A0h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 8217B4A0h case   17:*/		return 0x8217B4A4;
		  /* 8217B4A4h */ case   18:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8217B4A4h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8217B4A4h case   18:*/		return 0x8217B4A8;
		  /* 8217B4A8h */ case   19:  		/* stw R9, <#[R6]> */
		/* 8217B4A8h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R6 + 0x00000000) );
		/* 8217B4A8h case   19:*/		return 0x8217B4AC;
		  /* 8217B4ACh */ case   20:  		/* stw R8, <#[R11]> */
		/* 8217B4ACh case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B4ACh case   20:*/		return 0x8217B4B0;
		  /* 8217B4B0h */ case   21:  		/* stw R11, <#[R10 + 4]> */
		/* 8217B4B0h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217B4B0h case   21:*/		return 0x8217B4B4;
		  /* 8217B4B4h */ case   22:  		/* stw R22, <#[R31 + 44]> */
		/* 8217B4B4h case   22:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217B4B4h case   22:*/		return 0x8217B4B8;
	}
	return 0x8217B4B8;
} // Block from 8217B45Ch-8217B4B8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8217B4B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B4B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B4B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B4B8);
		  /* 8217B4B8h */ case    0:  		/* cmplwi CR6, R7, 0 */
		/* 8217B4B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 8217B4B8h case    0:*/		return 0x8217B4BC;
		  /* 8217B4BCh */ case    1:  		/* bc 4, CR6_EQ, 16 */
		/* 8217B4BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217B4CC;  }
		/* 8217B4BCh case    1:*/		return 0x8217B4C0;
		  /* 8217B4C0h */ case    2:  		/* lwz R11, <#[R31 + 76]> */
		/* 8217B4C0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217B4C0h case    2:*/		return 0x8217B4C4;
		  /* 8217B4C4h */ case    3:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 8217B4C4h case    3:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 8217B4C4h case    3:*/		return 0x8217B4C8;
		  /* 8217B4C8h */ case    4:  		/* bc 4, CR0_EQ, 276 */
		/* 8217B4C8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217B5DC;  }
		/* 8217B4C8h case    4:*/		return 0x8217B4CC;
	}
	return 0x8217B4CC;
} // Block from 8217B4B8h-8217B4CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217B4CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B4CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B4CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B4CC);
		  /* 8217B4CCh */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 8217B4CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8217B4CCh case    0:*/		return 0x8217B4D0;
		  /* 8217B4D0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217B4D0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217B4D0h case    1:*/		return 0x8217B4D4;
		  /* 8217B4D4h */ case    2:  		/* bc 4, CR0_EQ, 32 */
		/* 8217B4D4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217B4F4;  }
		/* 8217B4D4h case    2:*/		return 0x8217B4D8;
		  /* 8217B4D8h */ case    3:  		/* lwz R11, <#[R29]> */
		/* 8217B4D8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8217B4D8h case    3:*/		return 0x8217B4DC;
		  /* 8217B4DCh */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217B4DCh case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217B4DCh case    4:*/		return 0x8217B4E0;
		  /* 8217B4E0h */ case    5:  		/* addic. R3, R11, -40 */
		/* 8217B4E0h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFD8);
		/* 8217B4E0h case    5:*/		return 0x8217B4E4;
		  /* 8217B4E4h */ case    6:  		/* bc 12, CR0_EQ, 16 */
		/* 8217B4E4h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217B4F4;  }
		/* 8217B4E4h case    6:*/		return 0x8217B4E8;
		  /* 8217B4E8h */ case    7:  		/* bl -95144 */
		/* 8217B4E8h case    7:*/		regs.LR = 0x8217B4EC; return 0x82164140;
		/* 8217B4E8h case    7:*/		return 0x8217B4EC;
		  /* 8217B4ECh */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217B4ECh case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217B4ECh case    8:*/		return 0x8217B4F0;
		  /* 8217B4F0h */ case    9:  		/* bc 4, CR0_EQ, 236 */
		/* 8217B4F0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8217B5DC;  }
		/* 8217B4F0h case    9:*/		return 0x8217B4F4;
	}
	return 0x8217B4F4;
} // Block from 8217B4CCh-8217B4F4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217B4F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B4F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B4F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B4F4);
		  /* 8217B4F4h */ case    0:  		/* lwz R8, <#[R31 + 40]> */
		/* 8217B4F4h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000028) );
		/* 8217B4F4h case    0:*/		return 0x8217B4F8;
		  /* 8217B4F8h */ case    1:  		/* li R7, 2 */
		/* 8217B4F8h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8217B4F8h case    1:*/		return 0x8217B4FC;
		  /* 8217B4FCh */ case    2:  		/* lwz R11, <#[R28 + 48]> */
		/* 8217B4FCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 8217B4FCh case    2:*/		return 0x8217B500;
		  /* 8217B500h */ case    3:  		/* li R6, -1 */
		/* 8217B500h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFFF);
		/* 8217B500h case    3:*/		return 0x8217B504;
		  /* 8217B504h */ case    4:  		/* rlwinm R5, R11, 0, 13, 31 */
		/* 8217B504h case    4:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R5,regs.R11);
		/* 8217B504h case    4:*/		return 0x8217B508;
		  /* 8217B508h */ case    5:  		/* lwz R10, <#[R8]> */
		/* 8217B508h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8217B508h case    5:*/		return 0x8217B50C;
		  /* 8217B50Ch */ case    6:  		/* rlwinm R11, R5, 28, 5, 31 */
		/* 8217B50Ch case    6:*/		cpu::op::rlwinm<0,28,5,31>(regs,&regs.R11,regs.R5);
		/* 8217B50Ch case    6:*/		return 0x8217B510;
		  /* 8217B510h */ case    7:  		/* rlwinm R9, R5, 1, 0, 30 */
		/* 8217B510h case    7:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R5);
		/* 8217B510h case    7:*/		return 0x8217B514;
		  /* 8217B514h */ case    8:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 8217B514h case    8:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 8217B514h case    8:*/		return 0x8217B518;
		  /* 8217B518h */ case    9:  		/* addi R11, R11, 1 */
		/* 8217B518h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217B518h case    9:*/		return 0x8217B51C;
		  /* 8217B51Ch */ case   10:  		/* addi R10, R10, 31 */
		/* 8217B51Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 8217B51Ch case   10:*/		return 0x8217B520;
		  /* 8217B520h */ case   11:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 8217B520h case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 8217B520h case   11:*/		return 0x8217B524;
		  /* 8217B524h */ case   12:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 8217B524h case   12:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 8217B524h case   12:*/		return 0x8217B528;
		  /* 8217B528h */ case   13:  		/* addi R9, R9, 1 */
		/* 8217B528h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8217B528h case   13:*/		return 0x8217B52C;
		  /* 8217B52Ch */ case   14:  		/* add R11, R10, R11 */
		/* 8217B52Ch case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217B52Ch case   14:*/		return 0x8217B530;
		  /* 8217B530h */ case   15:  		/* rlwinm R10, R9, 0, 27, 31 */
		/* 8217B530h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R9);
		/* 8217B530h case   15:*/		return 0x8217B534;
		  /* 8217B534h */ case   16:  		/* rlwinm R9, R11, 1, 0, 30 */
		/* 8217B534h case   16:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R11);
		/* 8217B534h case   16:*/		return 0x8217B538;
		  /* 8217B538h */ case   17:  		/* slw R11, R7, R10 */
		/* 8217B538h case   17:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R7,regs.R10);
		/* 8217B538h case   17:*/		return 0x8217B53C;
		  /* 8217B53Ch */ case   18:  		/* lwzx R10, <#[R9 + R8]> */
		/* 8217B53Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 8217B53Ch case   18:*/		return 0x8217B540;
		  /* 8217B540h */ case   19:  		/* addi R11, R11, -1 */
		/* 8217B540h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8217B540h case   19:*/		return 0x8217B544;
		  /* 8217B544h */ case   20:  		/* rlwinm R9, R5, 1, 27, 30 */
		/* 8217B544h case   20:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R9,regs.R5);
		/* 8217B544h case   20:*/		return 0x8217B548;
		  /* 8217B548h */ case   21:  		/* and R11, R10, R11 */
		/* 8217B548h case   21:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217B548h case   21:*/		return 0x8217B54C;
		  /* 8217B54Ch */ case   22:  		/* slw R8, R6, R9 */
		/* 8217B54Ch case   22:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R6,regs.R9);
		/* 8217B54Ch case   22:*/		return 0x8217B550;
		  /* 8217B550h */ case   23:  		/* and R11, R11, R8 */
		/* 8217B550h case   23:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8217B550h case   23:*/		return 0x8217B554;
		  /* 8217B554h */ case   24:  		/* srw R11, R11, R9 */
		/* 8217B554h case   24:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217B554h case   24:*/		return 0x8217B558;
		  /* 8217B558h */ case   25:  		/* cmplwi CR6, R11, 3 */
		/* 8217B558h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8217B558h case   25:*/		return 0x8217B55C;
		  /* 8217B55Ch */ case   26:  		/* bc 12, CR6_EQ, 16 */
		/* 8217B55Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x8217B56C;  }
		/* 8217B55Ch case   26:*/		return 0x8217B560;
		  /* 8217B560h */ case   27:  		/* cmplw CR6, R11, R16 */
		/* 8217B560h case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 8217B560h case   27:*/		return 0x8217B564;
		  /* 8217B564h */ case   28:  		/* li R10, 0 */
		/* 8217B564h case   28:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217B564h case   28:*/		return 0x8217B568;
		  /* 8217B568h */ case   29:  		/* bc 4, CR6_EQ, 8 */
		/* 8217B568h case   29:*/		if ( !regs.CR[6].eq ) { return 0x8217B570;  }
		/* 8217B568h case   29:*/		return 0x8217B56C;
	}
	return 0x8217B56C;
} // Block from 8217B4F4h-8217B56Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 8217B56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B56C);
		  /* 8217B56Ch */ case    0:  		/* mr R10, R25 */
		/* 8217B56Ch case    0:*/		regs.R10 = regs.R25;
		/* 8217B56Ch case    0:*/		return 0x8217B570;
	}
	return 0x8217B570;
} // Block from 8217B56Ch-8217B570h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217B570h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B570( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B570) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B570);
		  /* 8217B570h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 8217B570h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8217B570h case    0:*/		return 0x8217B574;
		  /* 8217B574h */ case    1:  		/* rlwinm R29, R10, 0, 24, 31 */
		/* 8217B574h case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R29,regs.R10);
		/* 8217B574h case    1:*/		return 0x8217B578;
		  /* 8217B578h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217B578h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B578h case    2:*/		return 0x8217B57C;
		  /* 8217B57Ch */ case    3:  		/* bc 4, CR0_EQ, 60 */
		/* 8217B57Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217B5B8;  }
		/* 8217B57Ch case    3:*/		return 0x8217B580;
		  /* 8217B580h */ case    4:  		/* mr R30, R11 */
		/* 8217B580h case    4:*/		regs.R30 = regs.R11;
		/* 8217B580h case    4:*/		return 0x8217B584;
		  /* 8217B584h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 8217B584h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217B584h case    5:*/		return 0x8217B588;
		  /* 8217B588h */ case    6:  		/* bc 12, CR0_EQ, 48 */
		/* 8217B588h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217B5B8;  }
		/* 8217B588h case    6:*/		return 0x8217B58C;
		  /* 8217B58Ch */ case    7:  		/* mr R3, R30 */
		/* 8217B58Ch case    7:*/		regs.R3 = regs.R30;
		/* 8217B58Ch case    7:*/		return 0x8217B590;
		  /* 8217B590h */ case    8:  		/* bl -15216 */
		/* 8217B590h case    8:*/		regs.LR = 0x8217B594; return 0x82177A20;
		/* 8217B590h case    8:*/		return 0x8217B594;
		  /* 8217B594h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217B594h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217B594h case    9:*/		return 0x8217B598;
		  /* 8217B598h */ case   10:  		/* bc 12, CR0_EQ, 260 */
		/* 8217B598h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217B69C;  }
		/* 8217B598h case   10:*/		return 0x8217B59C;
		  /* 8217B59Ch */ case   11:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217B59Ch case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217B59Ch case   11:*/		return 0x8217B5A0;
		  /* 8217B5A0h */ case   12:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217B5A0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217B5A0h case   12:*/		return 0x8217B5A4;
		  /* 8217B5A4h */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217B5A4h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B5A4h case   13:*/		return 0x8217B5A8;
		  /* 8217B5A8h */ case   14:  		/* bc 4, CR0_EQ, 16 */
		/* 8217B5A8h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8217B5B8;  }
		/* 8217B5A8h case   14:*/		return 0x8217B5AC;
		  /* 8217B5ACh */ case   15:  		/* mr R30, R11 */
		/* 8217B5ACh case   15:*/		regs.R30 = regs.R11;
		/* 8217B5ACh case   15:*/		return 0x8217B5B0;
		  /* 8217B5B0h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 8217B5B0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217B5B0h case   16:*/		return 0x8217B5B4;
		  /* 8217B5B4h */ case   17:  		/* bc 4, CR6_EQ, -40 */
		/* 8217B5B4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x8217B58C;  }
		/* 8217B5B4h case   17:*/		return 0x8217B5B8;
	}
	return 0x8217B5B8;
} // Block from 8217B570h-8217B5B8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8217B5B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B5B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B5B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B5B8);
		  /* 8217B5B8h */ case    0:  		/* lwz R11, <#[R31 + 76]> */
		/* 8217B5B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217B5B8h case    0:*/		return 0x8217B5BC;
		  /* 8217B5BCh */ case    1:  		/* rlwinm R10, R29, 0, 24, 31 */
		/* 8217B5BCh case    1:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R29);
		/* 8217B5BCh case    1:*/		return 0x8217B5C0;
		  /* 8217B5C0h */ case    2:  		/* lwz R9, <#[R31 + 48]> */
		/* 8217B5C0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000030) );
		/* 8217B5C0h case    2:*/		return 0x8217B5C4;
		  /* 8217B5C4h */ case    3:  		/* rlwimi R11, R10, 23, 8, 8 */
		/* 8217B5C4h case    3:*/		cpu::op::rlwimi<0,23,8,8>(regs,&regs.R11,regs.R10);
		/* 8217B5C4h case    3:*/		return 0x8217B5C8;
		  /* 8217B5C8h */ case    4:  		/* stw R28, <#[R31 + 112]> */
		/* 8217B5C8h case    4:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x00000070) );
		/* 8217B5C8h case    4:*/		return 0x8217B5CC;
		  /* 8217B5CCh */ case    5:  		/* oris R10, R9, 128 */
		/* 8217B5CCh case    5:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R9,0x80);
		/* 8217B5CCh case    5:*/		return 0x8217B5D0;
		  /* 8217B5D0h */ case    6:  		/* oris R11, R11, 64 */
		/* 8217B5D0h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x40);
		/* 8217B5D0h case    6:*/		return 0x8217B5D4;
		  /* 8217B5D4h */ case    7:  		/* stw R10, <#[R31 + 48]> */
		/* 8217B5D4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000030) );
		/* 8217B5D4h case    7:*/		return 0x8217B5D8;
		  /* 8217B5D8h */ case    8:  		/* stw R11, <#[R31 + 76]> */
		/* 8217B5D8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217B5D8h case    8:*/		return 0x8217B5DC;
	}
	return 0x8217B5DC;
} // Block from 8217B5B8h-8217B5DCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217B5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B5DC);
		  /* 8217B5DCh */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8217B5DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8217B5DCh case    0:*/		return 0x8217B5E0;
		  /* 8217B5E0h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 8217B5E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217B5F0;  }
		/* 8217B5E0h case    1:*/		return 0x8217B5E4;
		  /* 8217B5E4h */ case    2:  		/* lwz R11, <#[R21 + 48]> */
		/* 8217B5E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 8217B5E4h case    2:*/		return 0x8217B5E8;
	}
	return 0x8217B5E8;
} // Block from 8217B5DCh-8217B5E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217B5E8h
// Function '?FindLexicalFollowBlock@Compiler@D3DXShader@@AAAPAVBlock@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B5E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B5E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B5E8);
		  /* 8217B5E8h */ case    0:  		/* oris R11, R11, 2048 */
		/* 8217B5E8h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 8217B5E8h case    0:*/		return 0x8217B5EC;
		  /* 8217B5ECh */ case    1:  		/* stw R11, <#[R21 + 48]> */
		/* 8217B5ECh case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000030) );
		/* 8217B5ECh case    1:*/		return 0x8217B5F0;
	}
	return 0x8217B5F0;
} // Block from 8217B5E8h-8217B5F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217B5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B5F0);
		  /* 8217B5F0h */ case    0:  		/* mr R21, R31 */
		/* 8217B5F0h case    0:*/		regs.R21 = regs.R31;
		/* 8217B5F0h case    0:*/		return 0x8217B5F4;
	}
	return 0x8217B5F4;
} // Block from 8217B5F0h-8217B5F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217B5F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B5F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B5F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B5F4);
		  /* 8217B5F4h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 8217B5F4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 8217B5F4h case    0:*/		return 0x8217B5F8;
		  /* 8217B5F8h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 8217B5F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217B650;  }
		/* 8217B5F8h case    1:*/		return 0x8217B5FC;
		  /* 8217B5FCh */ case    2:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 8217B5FCh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 8217B5FCh case    2:*/		return 0x8217B600;
		  /* 8217B600h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217B600h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B600h case    3:*/		return 0x8217B604;
		  /* 8217B604h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217B604h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B604h case    4:*/		return 0x8217B608;
		  /* 8217B608h */ case    5:  		/* addic R10, R10, -1 */
		/* 8217B608h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217B608h case    5:*/		return 0x8217B60C;
		  /* 8217B60Ch */ case    6:  		/* subfe R10, R10, R10 */
		/* 8217B60Ch case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217B60Ch case    6:*/		return 0x8217B610;
		  /* 8217B610h */ case    7:  		/* and R10, R10, R11 */
		/* 8217B610h case    7:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8217B610h case    7:*/		return 0x8217B614;
		  /* 8217B614h */ case    8:  		/* cmplw CR6, R31, R10 */
		/* 8217B614h case    8:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 8217B614h case    8:*/		return 0x8217B618;
		  /* 8217B618h */ case    9:  		/* bc 12, CR6_EQ, 84 */
		/* 8217B618h case    9:*/		if ( regs.CR[6].eq ) { return 0x8217B66C;  }
		/* 8217B618h case    9:*/		return 0x8217B61C;
		  /* 8217B61Ch */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217B61Ch case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B61Ch case   10:*/		return 0x8217B620;
		  /* 8217B620h */ case   11:  		/* bc 12, CR0_EQ, 108 */
		/* 8217B620h case   11:*/		if ( regs.CR[0].eq ) { return 0x8217B68C;  }
		/* 8217B620h case   11:*/		return 0x8217B624;
	}
	return 0x8217B624;
} // Block from 8217B5F4h-8217B624h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217B624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B624);
		  /* 8217B624h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 8217B624h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 8217B624h case    0:*/		return 0x8217B628;
		  /* 8217B628h */ case    1:  		/* stw R26, <#[R18]> */
		/* 8217B628h case    1:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R18 + 0x00000000) );
		/* 8217B628h case    1:*/		return 0x8217B62C;
		  /* 8217B62Ch */ case    2:  		/* mr R3, R20 */
		/* 8217B62Ch case    2:*/		regs.R3 = regs.R20;
		/* 8217B62Ch case    2:*/		return 0x8217B630;
		  /* 8217B630h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217B630h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B630h case    3:*/		return 0x8217B634;
		  /* 8217B634h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217B634h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B634h case    4:*/		return 0x8217B638;
		  /* 8217B638h */ case    5:  		/* addic R10, R10, -1 */
		/* 8217B638h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217B638h case    5:*/		return 0x8217B63C;
		  /* 8217B63Ch */ case    6:  		/* subfe R10, R10, R10 */
		/* 8217B63Ch case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217B63Ch case    6:*/		return 0x8217B640;
		  /* 8217B640h */ case    7:  		/* and R11, R10, R11 */
		/* 8217B640h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217B640h case    7:*/		return 0x8217B644;
		  /* 8217B644h */ case    8:  		/* stw R11, <#[R17]> */
		/* 8217B644h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 8217B644h case    8:*/		return 0x8217B648;
		  /* 8217B648h */ case    9:  		/* addi R1, R1, 224 */
		/* 8217B648h case    9:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 8217B648h case    9:*/		return 0x8217B64C;
		  /* 8217B64Ch */ case   10:  		/* b -959448 */
		/* 8217B64Ch case   10:*/		return 0x82091274;
		/* 8217B64Ch case   10:*/		return 0x8217B650;
	}
	return 0x8217B650;
} // Block from 8217B624h-8217B650h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217B650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B650);
		  /* 8217B650h */ case    0:  		/* lwz R11, <#[R24 + 4]> */
		/* 8217B650h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8217B650h case    0:*/		return 0x8217B654;
		  /* 8217B654h */ case    1:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217B654h case    1:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217B654h case    1:*/		return 0x8217B658;
		  /* 8217B658h */ case    2:  		/* addic R9, R10, -1 */
		/* 8217B658h case    2:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R10,0xFFFFFFFF);
		/* 8217B658h case    2:*/		return 0x8217B65C;
		  /* 8217B65Ch */ case    3:  		/* subfe R9, R9, R9 */
		/* 8217B65Ch case    3:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8217B65Ch case    3:*/		return 0x8217B660;
		  /* 8217B660h */ case    4:  		/* and R9, R9, R11 */
		/* 8217B660h case    4:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 8217B660h case    4:*/		return 0x8217B664;
		  /* 8217B664h */ case    5:  		/* cmplw CR6, R31, R9 */
		/* 8217B664h case    5:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 8217B664h case    5:*/		return 0x8217B668;
		  /* 8217B668h */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 8217B668h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217B684;  }
		/* 8217B668h case    6:*/		return 0x8217B66C;
	}
	return 0x8217B66C;
} // Block from 8217B650h-8217B66Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217B66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B66C);
		  /* 8217B66Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217B66Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217B66Ch case    0:*/		return 0x8217B670;
		  /* 8217B670h */ case    1:  		/* mr R23, R31 */
		/* 8217B670h case    1:*/		regs.R23 = regs.R31;
		/* 8217B670h case    1:*/		return 0x8217B674;
		  /* 8217B674h */ case    2:  		/* lwz R31, <#[R11 + 4]> */
		/* 8217B674h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B674h case    2:*/		return 0x8217B678;
		  /* 8217B678h */ case    3:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217B678h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217B678h case    3:*/		return 0x8217B67C;
		  /* 8217B67Ch */ case    4:  		/* bc 4, CR0_EQ, -88 */
		/* 8217B67Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217B624;  }
		/* 8217B67Ch case    4:*/		return 0x8217B680;
		  /* 8217B680h */ case    5:  		/* b 16 */
		/* 8217B680h case    5:*/		return 0x8217B690;
		/* 8217B680h case    5:*/		return 0x8217B684;
	}
	return 0x8217B684;
} // Block from 8217B66Ch-8217B684h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217B684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B684);
		  /* 8217B684h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 8217B684h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217B684h case    0:*/		return 0x8217B688;
		  /* 8217B688h */ case    1:  		/* bc 4, CR6_EQ, -100 */
		/* 8217B688h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217B624;  }
		/* 8217B688h case    1:*/		return 0x8217B68C;
	}
	return 0x8217B68C;
} // Block from 8217B684h-8217B68Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217B68Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B68C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B68C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B68C);
		  /* 8217B68Ch */ case    0:  		/* mr R31, R11 */
		/* 8217B68Ch case    0:*/		regs.R31 = regs.R11;
		/* 8217B68Ch case    0:*/		return 0x8217B690;
	}
	return 0x8217B690;
} // Block from 8217B68Ch-8217B690h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217B690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B690);
		  /* 8217B690h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8217B690h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217B690h case    0:*/		return 0x8217B694;
		  /* 8217B694h */ case    1:  		/* bc 4, CR6_EQ, -1016 */
		/* 8217B694h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217B29C;  }
		/* 8217B694h case    1:*/		return 0x8217B698;
		  /* 8217B698h */ case    2:  		/* b -116 */
		/* 8217B698h case    2:*/		return 0x8217B624;
		/* 8217B698h case    2:*/		return 0x8217B69C;
	}
	return 0x8217B69C;
} // Block from 8217B690h-8217B69Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217B69Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B69C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B69C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B69C);
		  /* 8217B69Ch */ case    0:  		/* li R4, 3541 */
		/* 8217B69Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDD5);
		/* 8217B69Ch case    0:*/		return 0x8217B6A0;
		  /* 8217B6A0h */ case    1:  		/* mr R3, R24 */
		/* 8217B6A0h case    1:*/		regs.R3 = regs.R24;
		/* 8217B6A0h case    1:*/		return 0x8217B6A4;
		  /* 8217B6A4h */ case    2:  		/* bl -170044 */
		/* 8217B6A4h case    2:*/		regs.LR = 0x8217B6A8; return 0x82151E68;
		/* 8217B6A4h case    2:*/		return 0x8217B6A8;
	}
	return 0x8217B6A8;
} // Block from 8217B69Ch-8217B6A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217B6A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B6A8);
		  /* 8217B6A8h */ case    0:  		/* mfspr R12, LR */
		/* 8217B6A8h case    0:*/		regs.R12 = regs.LR;
		/* 8217B6A8h case    0:*/		return 0x8217B6AC;
		  /* 8217B6ACh */ case    1:  		/* bl -959572 */
		/* 8217B6ACh case    1:*/		regs.LR = 0x8217B6B0; return 0x82091258;
		/* 8217B6ACh case    1:*/		return 0x8217B6B0;
		  /* 8217B6B0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8217B6B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8217B6B0h case    2:*/		return 0x8217B6B4;
		  /* 8217B6B4h */ case    3:  		/* mr R30, R7 */
		/* 8217B6B4h case    3:*/		regs.R30 = regs.R7;
		/* 8217B6B4h case    3:*/		return 0x8217B6B8;
		  /* 8217B6B8h */ case    4:  		/* mr R28, R8 */
		/* 8217B6B8h case    4:*/		regs.R28 = regs.R8;
		/* 8217B6B8h case    4:*/		return 0x8217B6BC;
		  /* 8217B6BCh */ case    5:  		/* mr R7, R6 */
		/* 8217B6BCh case    5:*/		regs.R7 = regs.R6;
		/* 8217B6BCh case    5:*/		return 0x8217B6C0;
		  /* 8217B6C0h */ case    6:  		/* li R8, 1 */
		/* 8217B6C0h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217B6C0h case    6:*/		return 0x8217B6C4;
		  /* 8217B6C4h */ case    7:  		/* li R6, 1 */
		/* 8217B6C4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217B6C4h case    7:*/		return 0x8217B6C8;
		  /* 8217B6C8h */ case    8:  		/* mr R29, R3 */
		/* 8217B6C8h case    8:*/		regs.R29 = regs.R3;
		/* 8217B6C8h case    8:*/		return 0x8217B6CC;
		  /* 8217B6CCh */ case    9:  		/* bl 449852 */
		/* 8217B6CCh case    9:*/		regs.LR = 0x8217B6D0; return 0x821E9408;
		/* 8217B6CCh case    9:*/		return 0x8217B6D0;
		  /* 8217B6D0h */ case   10:  		/* mr R31, R3 */
		/* 8217B6D0h case   10:*/		regs.R31 = regs.R3;
		/* 8217B6D0h case   10:*/		return 0x8217B6D4;
		  /* 8217B6D4h */ case   11:  		/* mr R3, R29 */
		/* 8217B6D4h case   11:*/		regs.R3 = regs.R29;
		/* 8217B6D4h case   11:*/		return 0x8217B6D8;
		  /* 8217B6D8h */ case   12:  		/* li R8, 1 */
		/* 8217B6D8h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217B6D8h case   12:*/		return 0x8217B6DC;
		  /* 8217B6DCh */ case   13:  		/* li R7, 1 */
		/* 8217B6DCh case   13:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8217B6DCh case   13:*/		return 0x8217B6E0;
		  /* 8217B6E0h */ case   14:  		/* mr R6, R30 */
		/* 8217B6E0h case   14:*/		regs.R6 = regs.R30;
		/* 8217B6E0h case   14:*/		return 0x8217B6E4;
		  /* 8217B6E4h */ case   15:  		/* li R5, 0 */
		/* 8217B6E4h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217B6E4h case   15:*/		return 0x8217B6E8;
		  /* 8217B6E8h */ case   16:  		/* mr R4, R31 */
		/* 8217B6E8h case   16:*/		regs.R4 = regs.R31;
		/* 8217B6E8h case   16:*/		return 0x8217B6EC;
		  /* 8217B6ECh */ case   17:  		/* bl 692908 */
		/* 8217B6ECh case   17:*/		regs.LR = 0x8217B6F0; return 0x82224998;
		/* 8217B6ECh case   17:*/		return 0x8217B6F0;
		  /* 8217B6F0h */ case   18:  		/* mr R30, R3 */
		/* 8217B6F0h case   18:*/		regs.R30 = regs.R3;
		/* 8217B6F0h case   18:*/		return 0x8217B6F4;
		  /* 8217B6F4h */ case   19:  		/* li R5, 0 */
		/* 8217B6F4h case   19:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217B6F4h case   19:*/		return 0x8217B6F8;
		  /* 8217B6F8h */ case   20:  		/* mr R4, R28 */
		/* 8217B6F8h case   20:*/		regs.R4 = regs.R28;
		/* 8217B6F8h case   20:*/		return 0x8217B6FC;
		  /* 8217B6FCh */ case   21:  		/* mr R3, R29 */
		/* 8217B6FCh case   21:*/		regs.R3 = regs.R29;
		/* 8217B6FCh case   21:*/		return 0x8217B700;
		  /* 8217B700h */ case   22:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217B700h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217B700h case   22:*/		return 0x8217B704;
		  /* 8217B704h */ case   23:  		/* ori R11, R11, 64 */
		/* 8217B704h case   23:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 8217B704h case   23:*/		return 0x8217B708;
		  /* 8217B708h */ case   24:  		/* stw R11, <#[R30 + 8]> */
		/* 8217B708h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217B708h case   24:*/		return 0x8217B70C;
		  /* 8217B70Ch */ case   25:  		/* bl -13820 */
		/* 8217B70Ch case   25:*/		regs.LR = 0x8217B710; return 0x82178110;
		/* 8217B70Ch case   25:*/		return 0x8217B710;
		  /* 8217B710h */ case   26:  		/* mr R4, R3 */
		/* 8217B710h case   26:*/		regs.R4 = regs.R3;
		/* 8217B710h case   26:*/		return 0x8217B714;
		  /* 8217B714h */ case   27:  		/* mr R3, R30 */
		/* 8217B714h case   27:*/		regs.R3 = regs.R30;
		/* 8217B714h case   27:*/		return 0x8217B718;
		  /* 8217B718h */ case   28:  		/* bl -13648 */
		/* 8217B718h case   28:*/		regs.LR = 0x8217B71C; return 0x821781C8;
		/* 8217B718h case   28:*/		return 0x8217B71C;
		  /* 8217B71Ch */ case   29:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217B71Ch case   29:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217B71Ch case   29:*/		return 0x8217B720;
		  /* 8217B720h */ case   30:  		/* stw R3, <#[R30 + 44]> */
		/* 8217B720h case   30:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 8217B720h case   30:*/		return 0x8217B724;
		  /* 8217B724h */ case   31:  		/* addi R10, R31, 32 */
		/* 8217B724h case   31:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0x20);
		/* 8217B724h case   31:*/		return 0x8217B728;
		  /* 8217B728h */ case   32:  		/* lwz R9, <#[R31 + 32]> */
		/* 8217B728h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8217B728h case   32:*/		return 0x8217B72C;
		  /* 8217B72Ch */ case   33:  		/* addi R11, R11, 36 */
		/* 8217B72Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217B72Ch case   33:*/		return 0x8217B730;
		  /* 8217B730h */ case   34:  		/* stw R9, <#[R11]> */
		/* 8217B730h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B730h case   34:*/		return 0x8217B734;
		  /* 8217B734h */ case   35:  		/* addi R10, R10, -36 */
		/* 8217B734h case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFDC);
		/* 8217B734h case   35:*/		return 0x8217B738;
		  /* 8217B738h */ case   36:  		/* lwz R9, <#[R31 + 32]> */
		/* 8217B738h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000020) );
		/* 8217B738h case   36:*/		return 0x8217B73C;
		  /* 8217B73Ch */ case   37:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217B73Ch case   37:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217B73Ch case   37:*/		return 0x8217B740;
		  /* 8217B740h */ case   38:  		/* addi R8, R11, -36 */
		/* 8217B740h case   38:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 8217B740h case   38:*/		return 0x8217B744;
		  /* 8217B744h */ case   39:  		/* stw R8, <#[R9]> */
		/* 8217B744h case   39:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8217B744h case   39:*/		return 0x8217B748;
		  /* 8217B748h */ case   40:  		/* ori R9, R10, 1 */
		/* 8217B748h case   40:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R10,0x1);
		/* 8217B748h case   40:*/		return 0x8217B74C;
		  /* 8217B74Ch */ case   41:  		/* addi R10, R11, 4 */
		/* 8217B74Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217B74Ch case   41:*/		return 0x8217B750;
		  /* 8217B750h */ case   42:  		/* stw R9, <#[R11 + 4]> */
		/* 8217B750h case   42:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B750h case   42:*/		return 0x8217B754;
		  /* 8217B754h */ case   43:  		/* stw R10, <#[R31 + 32]> */
		/* 8217B754h case   43:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000020) );
		/* 8217B754h case   43:*/		return 0x8217B758;
		  /* 8217B758h */ case   44:  		/* lwz R5, <#[R31 + 96]> */
		/* 8217B758h case   44:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000060) );
		/* 8217B758h case   44:*/		return 0x8217B75C;
		  /* 8217B75Ch */ case   45:  		/* cmplwi CR6, R5, 0 */
		/* 8217B75Ch case   45:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8217B75Ch case   45:*/		return 0x8217B760;
		  /* 8217B760h */ case   46:  		/* bc 12, CR6_EQ, 20 */
		/* 8217B760h case   46:*/		if ( regs.CR[6].eq ) { return 0x8217B774;  }
		/* 8217B760h case   46:*/		return 0x8217B764;
		  /* 8217B764h */ case   47:  		/* mr R6, R29 */
		/* 8217B764h case   47:*/		regs.R6 = regs.R29;
		/* 8217B764h case   47:*/		return 0x8217B768;
		  /* 8217B768h */ case   48:  		/* li R4, 1 */
		/* 8217B768h case   48:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217B768h case   48:*/		return 0x8217B76C;
		  /* 8217B76Ch */ case   49:  		/* mr R3, R30 */
		/* 8217B76Ch case   49:*/		regs.R3 = regs.R30;
		/* 8217B76Ch case   49:*/		return 0x8217B770;
		  /* 8217B770h */ case   50:  		/* bl -11768 */
		/* 8217B770h case   50:*/		regs.LR = 0x8217B774; return 0x82178978;
		/* 8217B770h case   50:*/		return 0x8217B774;
	}
	return 0x8217B774;
} // Block from 8217B6A8h-8217B774h (51 instructions)

//////////////////////////////////////////////////////
// Block at 8217B774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B774);
		  /* 8217B774h */ case    0:  		/* stw R30, <#[R31 + 96]> */
		/* 8217B774h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x00000060) );
		/* 8217B774h case    0:*/		return 0x8217B778;
		  /* 8217B778h */ case    1:  		/* mr R3, R31 */
		/* 8217B778h case    1:*/		regs.R3 = regs.R31;
		/* 8217B778h case    1:*/		return 0x8217B77C;
		  /* 8217B77Ch */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217B77Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217B77Ch case    2:*/		return 0x8217B780;
		  /* 8217B780h */ case    3:  		/* oris R11, R11, 512 */
		/* 8217B780h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8217B780h case    3:*/		return 0x8217B784;
		  /* 8217B784h */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 8217B784h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217B784h case    4:*/		return 0x8217B788;
		  /* 8217B788h */ case    5:  		/* addi R1, R1, 128 */
		/* 8217B788h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217B788h case    5:*/		return 0x8217B78C;
		  /* 8217B78Ch */ case    6:  		/* b -959716 */
		/* 8217B78Ch case    6:*/		return 0x820912A8;
		/* 8217B78Ch case    6:*/		return 0x8217B790;
	}
	return 0x8217B790;
} // Block from 8217B774h-8217B790h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217B790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B790);
		  /* 8217B790h */ case    0:  		/* mfspr R12, LR */
		/* 8217B790h case    0:*/		regs.R12 = regs.LR;
		/* 8217B790h case    0:*/		return 0x8217B794;
		  /* 8217B794h */ case    1:  		/* bl -959804 */
		/* 8217B794h case    1:*/		regs.LR = 0x8217B798; return 0x82091258;
		/* 8217B794h case    1:*/		return 0x8217B798;
		  /* 8217B798h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8217B798h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8217B798h case    2:*/		return 0x8217B79C;
		  /* 8217B79Ch */ case    3:  		/* mr R28, R5 */
		/* 8217B79Ch case    3:*/		regs.R28 = regs.R5;
		/* 8217B79Ch case    3:*/		return 0x8217B7A0;
		  /* 8217B7A0h */ case    4:  		/* mr R29, R4 */
		/* 8217B7A0h case    4:*/		regs.R29 = regs.R4;
		/* 8217B7A0h case    4:*/		return 0x8217B7A4;
		  /* 8217B7A4h */ case    5:  		/* mr R5, R4 */
		/* 8217B7A4h case    5:*/		regs.R5 = regs.R4;
		/* 8217B7A4h case    5:*/		return 0x8217B7A8;
		  /* 8217B7A8h */ case    6:  		/* li R4, 0 */
		/* 8217B7A8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217B7A8h case    6:*/		return 0x8217B7AC;
		  /* 8217B7ACh */ case    7:  		/* mr R30, R3 */
		/* 8217B7ACh case    7:*/		regs.R30 = regs.R3;
		/* 8217B7ACh case    7:*/		return 0x8217B7B0;
		  /* 8217B7B0h */ case    8:  		/* bl -5416 */
		/* 8217B7B0h case    8:*/		regs.LR = 0x8217B7B4; return 0x8217A288;
		/* 8217B7B0h case    8:*/		return 0x8217B7B4;
		  /* 8217B7B4h */ case    9:  		/* mr R31, R3 */
		/* 8217B7B4h case    9:*/		regs.R31 = regs.R3;
		/* 8217B7B4h case    9:*/		return 0x8217B7B8;
		  /* 8217B7B8h */ case   10:  		/* li R5, 0 */
		/* 8217B7B8h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217B7B8h case   10:*/		return 0x8217B7BC;
		  /* 8217B7BCh */ case   11:  		/* mr R4, R28 */
		/* 8217B7BCh case   11:*/		regs.R4 = regs.R28;
		/* 8217B7BCh case   11:*/		return 0x8217B7C0;
		  /* 8217B7C0h */ case   12:  		/* mr R3, R30 */
		/* 8217B7C0h case   12:*/		regs.R3 = regs.R30;
		/* 8217B7C0h case   12:*/		return 0x8217B7C4;
		  /* 8217B7C4h */ case   13:  		/* bl -14004 */
		/* 8217B7C4h case   13:*/		regs.LR = 0x8217B7C8; return 0x82178110;
		/* 8217B7C4h case   13:*/		return 0x8217B7C8;
		  /* 8217B7C8h */ case   14:  		/* mr R4, R3 */
		/* 8217B7C8h case   14:*/		regs.R4 = regs.R3;
		/* 8217B7C8h case   14:*/		return 0x8217B7CC;
		  /* 8217B7CCh */ case   15:  		/* mr R3, R31 */
		/* 8217B7CCh case   15:*/		regs.R3 = regs.R31;
		/* 8217B7CCh case   15:*/		return 0x8217B7D0;
		  /* 8217B7D0h */ case   16:  		/* bl -13832 */
		/* 8217B7D0h case   16:*/		regs.LR = 0x8217B7D4; return 0x821781C8;
		/* 8217B7D0h case   16:*/		return 0x8217B7D4;
		  /* 8217B7D4h */ case   17:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217B7D4h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217B7D4h case   17:*/		return 0x8217B7D8;
		  /* 8217B7D8h */ case   18:  		/* li R11, 1 */
		/* 8217B7D8h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217B7D8h case   18:*/		return 0x8217B7DC;
		  /* 8217B7DCh */ case   19:  		/* mr R3, R29 */
		/* 8217B7DCh case   19:*/		regs.R3 = regs.R29;
		/* 8217B7DCh case   19:*/		return 0x8217B7E0;
		  /* 8217B7E0h */ case   20:  		/* rlwimi R10, R11, 17, 13, 14 */
		/* 8217B7E0h case   20:*/		cpu::op::rlwimi<0,17,13,14>(regs,&regs.R10,regs.R11);
		/* 8217B7E0h case   20:*/		return 0x8217B7E4;
		  /* 8217B7E4h */ case   21:  		/* stw R10, <#[R31 + 8]> */
		/* 8217B7E4h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217B7E4h case   21:*/		return 0x8217B7E8;
		  /* 8217B7E8h */ case   22:  		/* bl -60336 */
		/* 8217B7E8h case   22:*/		regs.LR = 0x8217B7EC; return 0x8216CC38;
		/* 8217B7E8h case   22:*/		return 0x8217B7EC;
		  /* 8217B7ECh */ case   23:  		/* lwz R4, <#[R3 + 12]> */
		/* 8217B7ECh case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217B7ECh case   23:*/		return 0x8217B7F0;
		  /* 8217B7F0h */ case   24:  		/* addi R9, R4, 4 */
		/* 8217B7F0h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R4,0x4);
		/* 8217B7F0h case   24:*/		return 0x8217B7F4;
		  /* 8217B7F4h */ case   25:  		/* lwz R11, <#[R4 + 4]> */
		/* 8217B7F4h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 8217B7F4h case   25:*/		return 0x8217B7F8;
		  /* 8217B7F8h */ case   26:  		/* b 12 */
		/* 8217B7F8h case   26:*/		return 0x8217B804;
		/* 8217B7F8h case   26:*/		return 0x8217B7FC;
		  /* 8217B7FCh */ case   27:  		/* addi R9, R11, 8 */
		/* 8217B7FCh case   27:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x8);
		/* 8217B7FCh case   27:*/		return 0x8217B800;
		  /* 8217B800h */ case   28:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217B800h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217B800h case   28:*/		return 0x8217B804;
	}
	return 0x8217B804;
} // Block from 8217B790h-8217B804h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8217B804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B804);
		  /* 8217B804h */ case    0:  		/* cmplw CR6, R11, R3 */
		/* 8217B804h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R3);
		/* 8217B804h case    0:*/		return 0x8217B808;
		  /* 8217B808h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8217B808h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217B7FC;  }
		/* 8217B808h case    1:*/		return 0x8217B80C;
		  /* 8217B80Ch */ case    2:  		/* lwz R8, <#[R3 + 8]> */
		/* 8217B80Ch case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 8217B80Ch case    2:*/		return 0x8217B810;
		  /* 8217B810h */ case    3:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8217B810h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8217B810h case    3:*/		return 0x8217B814;
		  /* 8217B814h */ case    4:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 8217B814h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 8217B814h case    4:*/		return 0x8217B818;
		  /* 8217B818h */ case    5:  		/* addi R11, R11, 36 */
		/* 8217B818h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217B818h case    5:*/		return 0x8217B81C;
		  /* 8217B81Ch */ case    6:  		/* addi R10, R10, 36 */
		/* 8217B81Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 8217B81Ch case    6:*/		return 0x8217B820;
		  /* 8217B820h */ case    7:  		/* addi R7, R11, -36 */
		/* 8217B820h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8217B820h case    7:*/		return 0x8217B824;
		  /* 8217B824h */ case    8:  		/* stw R8, <#[R9]> */
		/* 8217B824h case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8217B824h case    8:*/		return 0x8217B828;
		  /* 8217B828h */ case    9:  		/* addi R8, R10, -36 */
		/* 8217B828h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0xFFFFFFDC);
		/* 8217B828h case    9:*/		return 0x8217B82C;
		  /* 8217B82Ch */ case   10:  		/* lwz R6, <#[R31 + 4]> */
		/* 8217B82Ch case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R31 + 0x00000004) );
		/* 8217B82Ch case   10:*/		return 0x8217B830;
		  /* 8217B830h */ case   11:  		/* addi R9, R11, 4 */
		/* 8217B830h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8217B830h case   11:*/		return 0x8217B834;
		  /* 8217B834h */ case   12:  		/* stw R6, <#[R3 + 8]> */
		/* 8217B834h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R3 + 0x00000008) );
		/* 8217B834h case   12:*/		return 0x8217B838;
		  /* 8217B838h */ case   13:  		/* li R5, 7 */
		/* 8217B838h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 8217B838h case   13:*/		return 0x8217B83C;
		  /* 8217B83Ch */ case   14:  		/* stw R3, <#[R31 + 4]> */
		/* 8217B83Ch case   14:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000004) );
		/* 8217B83Ch case   14:*/		return 0x8217B840;
		  /* 8217B840h */ case   15:  		/* stw R31, <#[R3 + 12]> */
		/* 8217B840h case   15:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217B840h case   15:*/		return 0x8217B844;
		  /* 8217B844h */ case   16:  		/* mr R3, R30 */
		/* 8217B844h case   16:*/		regs.R3 = regs.R30;
		/* 8217B844h case   16:*/		return 0x8217B848;
		  /* 8217B848h */ case   17:  		/* lwz R6, <#[R11 + 4]> */
		/* 8217B848h case   17:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B848h case   17:*/		return 0x8217B84C;
		  /* 8217B84Ch */ case   18:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8217B84Ch case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8217B84Ch case   18:*/		return 0x8217B850;
		  /* 8217B850h */ case   19:  		/* lwz R30, <#[R11]> */
		/* 8217B850h case   19:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B850h case   19:*/		return 0x8217B854;
		  /* 8217B854h */ case   20:  		/* stw R30, <#[R6 + 36]> */
		/* 8217B854h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R6 + 0x00000024) );
		/* 8217B854h case   20:*/		return 0x8217B858;
		  /* 8217B858h */ case   21:  		/* lwz R6, <#[R11]> */
		/* 8217B858h case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B858h case   21:*/		return 0x8217B85C;
		  /* 8217B85Ch */ case   22:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8217B85Ch case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8217B85Ch case   22:*/		return 0x8217B860;
		  /* 8217B860h */ case   23:  		/* lwz R30, <#[R11 + 4]> */
		/* 8217B860h case   23:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B860h case   23:*/		return 0x8217B864;
		  /* 8217B864h */ case   24:  		/* stw R30, <#[R6]> */
		/* 8217B864h case   24:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R6 + 0x00000000) );
		/* 8217B864h case   24:*/		return 0x8217B868;
		  /* 8217B868h */ case   25:  		/* lwz R6, <#[R10]> */
		/* 8217B868h case   25:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8217B868h case   25:*/		return 0x8217B86C;
		  /* 8217B86Ch */ case   26:  		/* stw R6, <#[R11]> */
		/* 8217B86Ch case   26:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B86Ch case   26:*/		return 0x8217B870;
		  /* 8217B870h */ case   27:  		/* lwz R6, <#[R10]> */
		/* 8217B870h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 8217B870h case   27:*/		return 0x8217B874;
		  /* 8217B874h */ case   28:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 8217B874h case   28:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 8217B874h case   28:*/		return 0x8217B878;
		  /* 8217B878h */ case   29:  		/* stw R7, <#[R6]> */
		/* 8217B878h case   29:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 8217B878h case   29:*/		return 0x8217B87C;
		  /* 8217B87Ch */ case   30:  		/* stw R8, <#[R11 + 4]> */
		/* 8217B87Ch case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B87Ch case   30:*/		return 0x8217B880;
		  /* 8217B880h */ case   31:  		/* stw R9, <#[R10]> */
		/* 8217B880h case   31:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217B880h case   31:*/		return 0x8217B884;
		  /* 8217B884h */ case   32:  		/* bl -45364 */
		/* 8217B884h case   32:*/		regs.LR = 0x8217B888; return 0x82170750;
		/* 8217B884h case   32:*/		return 0x8217B888;
		  /* 8217B888h */ case   33:  		/* mr R4, R3 */
		/* 8217B888h case   33:*/		regs.R4 = regs.R3;
		/* 8217B888h case   33:*/		return 0x8217B88C;
		  /* 8217B88Ch */ case   34:  		/* mr R3, R31 */
		/* 8217B88Ch case   34:*/		regs.R3 = regs.R31;
		/* 8217B88Ch case   34:*/		return 0x8217B890;
		  /* 8217B890h */ case   35:  		/* bl -14024 */
		/* 8217B890h case   35:*/		regs.LR = 0x8217B894; return 0x821781C8;
		/* 8217B890h case   35:*/		return 0x8217B894;
		  /* 8217B894h */ case   36:  		/* addi R1, R1, 128 */
		/* 8217B894h case   36:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217B894h case   36:*/		return 0x8217B898;
		  /* 8217B898h */ case   37:  		/* b -959984 */
		/* 8217B898h case   37:*/		return 0x820912A8;
		/* 8217B898h case   37:*/		return 0x8217B89C;
		  /* 8217B89Ch */ case   38:  		/* nop */
		/* 8217B89Ch case   38:*/		cpu::op::nop();
		/* 8217B89Ch case   38:*/		return 0x8217B8A0;
	}
	return 0x8217B8A0;
} // Block from 8217B804h-8217B8A0h (39 instructions)

//////////////////////////////////////////////////////
// Block at 8217B8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B8A0);
		  /* 8217B8A0h */ case    0:  		/* mfspr R12, LR */
		/* 8217B8A0h case    0:*/		regs.R12 = regs.LR;
		/* 8217B8A0h case    0:*/		return 0x8217B8A4;
		  /* 8217B8A4h */ case    1:  		/* bl -960092 */
		/* 8217B8A4h case    1:*/		regs.LR = 0x8217B8A8; return 0x82091248;
		/* 8217B8A4h case    1:*/		return 0x8217B8A8;
		  /* 8217B8A8h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8217B8A8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8217B8A8h case    2:*/		return 0x8217B8AC;
		  /* 8217B8ACh */ case    3:  		/* mr R28, R3 */
		/* 8217B8ACh case    3:*/		regs.R28 = regs.R3;
		/* 8217B8ACh case    3:*/		return 0x8217B8B0;
		  /* 8217B8B0h */ case    4:  		/* mr R3, R5 */
		/* 8217B8B0h case    4:*/		regs.R3 = regs.R5;
		/* 8217B8B0h case    4:*/		return 0x8217B8B4;
		  /* 8217B8B4h */ case    5:  		/* mr R30, R4 */
		/* 8217B8B4h case    5:*/		regs.R30 = regs.R4;
		/* 8217B8B4h case    5:*/		return 0x8217B8B8;
		  /* 8217B8B8h */ case    6:  		/* mr R27, R5 */
		/* 8217B8B8h case    6:*/		regs.R27 = regs.R5;
		/* 8217B8B8h case    6:*/		return 0x8217B8BC;
		  /* 8217B8BCh */ case    7:  		/* mr R24, R6 */
		/* 8217B8BCh case    7:*/		regs.R24 = regs.R6;
		/* 8217B8BCh case    7:*/		return 0x8217B8C0;
		  /* 8217B8C0h */ case    8:  		/* bl -60552 */
		/* 8217B8C0h case    8:*/		regs.LR = 0x8217B8C4; return 0x8216CC38;
		/* 8217B8C0h case    8:*/		return 0x8217B8C4;
		  /* 8217B8C4h */ case    9:  		/* lwz R11, <#[R3 + 12]> */
		/* 8217B8C4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217B8C4h case    9:*/		return 0x8217B8C8;
		  /* 8217B8C8h */ case   10:  		/* mr R25, R3 */
		/* 8217B8C8h case   10:*/		regs.R25 = regs.R3;
		/* 8217B8C8h case   10:*/		return 0x8217B8CC;
		  /* 8217B8CCh */ case   11:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217B8CCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217B8CCh case   11:*/		return 0x8217B8D0;
		  /* 8217B8D0h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217B8D0h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217B8D0h case   12:*/		return 0x8217B8D4;
		  /* 8217B8D4h */ case   13:  		/* cmplwi CR6, R11, 15360 */
		/* 8217B8D4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003C00);
		/* 8217B8D4h case   13:*/		return 0x8217B8D8;
		  /* 8217B8D8h */ case   14:  		/* bc 12, CR6_EQ, 508 */
		/* 8217B8D8h case   14:*/		if ( regs.CR[6].eq ) { return 0x8217BAD4;  }
		/* 8217B8D8h case   14:*/		return 0x8217B8DC;
		  /* 8217B8DCh */ case   15:  		/* mr R3, R28 */
		/* 8217B8DCh case   15:*/		regs.R3 = regs.R28;
		/* 8217B8DCh case   15:*/		return 0x8217B8E0;
		  /* 8217B8E0h */ case   16:  		/* bl -59816 */
		/* 8217B8E0h case   16:*/		regs.LR = 0x8217B8E4; return 0x8216CF38;
		/* 8217B8E0h case   16:*/		return 0x8217B8E4;
		  /* 8217B8E4h */ case   17:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217B8E4h case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217B8E4h case   17:*/		return 0x8217B8E8;
		  /* 8217B8E8h */ case   18:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 8217B8E8h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 8217B8E8h case   18:*/		return 0x8217B8EC;
		  /* 8217B8ECh */ case   19:  		/* addi R9, R11, 4 */
		/* 8217B8ECh case   19:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8217B8ECh case   19:*/		return 0x8217B8F0;
		  /* 8217B8F0h */ case   20:  		/* addi R8, R10, 4 */
		/* 8217B8F0h case   20:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 8217B8F0h case   20:*/		return 0x8217B8F4;
		  /* 8217B8F4h */ case   21:  		/* mr R31, R3 */
		/* 8217B8F4h case   21:*/		regs.R31 = regs.R3;
		/* 8217B8F4h case   21:*/		return 0x8217B8F8;
		  /* 8217B8F8h */ case   22:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217B8F8h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B8F8h case   22:*/		return 0x8217B8FC;
		  /* 8217B8FCh */ case   23:  		/* li R4, 0 */
		/* 8217B8FCh case   23:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217B8FCh case   23:*/		return 0x8217B900;
		  /* 8217B900h */ case   24:  		/* stw R7, <#[R10 + 4]> */
		/* 8217B900h case   24:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 8217B900h case   24:*/		return 0x8217B904;
		  /* 8217B904h */ case   25:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217B904h case   25:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B904h case   25:*/		return 0x8217B908;
		  /* 8217B908h */ case   26:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 8217B908h case   26:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 8217B908h case   26:*/		return 0x8217B90C;
		  /* 8217B90Ch */ case   27:  		/* stw R8, <#[R7]> */
		/* 8217B90Ch case   27:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 8217B90Ch case   27:*/		return 0x8217B910;
		  /* 8217B910h */ case   28:  		/* stw R9, <#[R10]> */
		/* 8217B910h case   28:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217B910h case   28:*/		return 0x8217B914;
		  /* 8217B914h */ case   29:  		/* stw R10, <#[R11 + 4]> */
		/* 8217B914h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217B914h case   29:*/		return 0x8217B918;
		  /* 8217B918h */ case   30:  		/* lwz R11, <#[R3 + 76]> */
		/* 8217B918h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 8217B918h case   30:*/		return 0x8217B91C;
		  /* 8217B91Ch */ case   31:  		/* lwz R10, <#[R30 + 48]> */
		/* 8217B91Ch case   31:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 8217B91Ch case   31:*/		return 0x8217B920;
		  /* 8217B920h */ case   32:  		/* lwz R9, <#[R3 + 48]> */
		/* 8217B920h case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000030) );
		/* 8217B920h case   32:*/		return 0x8217B924;
		  /* 8217B924h */ case   33:  		/* rlwimi R9, R10, 0, 8, 8 */
		/* 8217B924h case   33:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R9,regs.R10);
		/* 8217B924h case   33:*/		return 0x8217B928;
		  /* 8217B928h */ case   34:  		/* stw R9, <#[R3 + 48]> */
		/* 8217B928h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000030) );
		/* 8217B928h case   34:*/		return 0x8217B92C;
		  /* 8217B92Ch */ case   35:  		/* lwz R10, <#[R30 + 76]> */
		/* 8217B92Ch case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000004C) );
		/* 8217B92Ch case   35:*/		return 0x8217B930;
		  /* 8217B930h */ case   36:  		/* rlwimi R11, R10, 0, 9, 9 */
		/* 8217B930h case   36:*/		cpu::op::rlwimi<0,0,9,9>(regs,&regs.R11,regs.R10);
		/* 8217B930h case   36:*/		return 0x8217B934;
		  /* 8217B934h */ case   37:  		/* mr R10, R11 */
		/* 8217B934h case   37:*/		regs.R10 = regs.R11;
		/* 8217B934h case   37:*/		return 0x8217B938;
		  /* 8217B938h */ case   38:  		/* stw R11, <#[R3 + 76]> */
		/* 8217B938h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 8217B938h case   38:*/		return 0x8217B93C;
		  /* 8217B93Ch */ case   39:  		/* lwz R11, <#[R30 + 76]> */
		/* 8217B93Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 8217B93Ch case   39:*/		return 0x8217B940;
		  /* 8217B940h */ case   40:  		/* rlwimi R10, R11, 0, 8, 8 */
		/* 8217B940h case   40:*/		cpu::op::rlwimi<0,0,8,8>(regs,&regs.R10,regs.R11);
		/* 8217B940h case   40:*/		return 0x8217B944;
		  /* 8217B944h */ case   41:  		/* stw R10, <#[R3 + 76]> */
		/* 8217B944h case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000004C) );
		/* 8217B944h case   41:*/		return 0x8217B948;
		  /* 8217B948h */ case   42:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 8217B948h case   42:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 8217B948h case   42:*/		return 0x8217B94C;
		  /* 8217B94Ch */ case   43:  		/* lwz R10, <#[R30 + 112]> */
		/* 8217B94Ch case   43:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000070) );
		/* 8217B94Ch case   43:*/		return 0x8217B950;
		  /* 8217B950h */ case   44:  		/* stw R10, <#[R3 + 112]> */
		/* 8217B950h case   44:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000070) );
		/* 8217B950h case   44:*/		return 0x8217B954;
		  /* 8217B954h */ case   45:  		/* lwz R10, <#[R30 + 76]> */
		/* 8217B954h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000004C) );
		/* 8217B954h case   45:*/		return 0x8217B958;
		  /* 8217B958h */ case   46:  		/* rlwimi R11, R10, 0, 7, 7 */
		/* 8217B958h case   46:*/		cpu::op::rlwimi<0,0,7,7>(regs,&regs.R11,regs.R10);
		/* 8217B958h case   46:*/		return 0x8217B95C;
		  /* 8217B95Ch */ case   47:  		/* mr R10, R11 */
		/* 8217B95Ch case   47:*/		regs.R10 = regs.R11;
		/* 8217B95Ch case   47:*/		return 0x8217B960;
		  /* 8217B960h */ case   48:  		/* stw R11, <#[R3 + 76]> */
		/* 8217B960h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000004C) );
		/* 8217B960h case   48:*/		return 0x8217B964;
		  /* 8217B964h */ case   49:  		/* lwz R11, <#[R30 + 76]> */
		/* 8217B964h case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 8217B964h case   49:*/		return 0x8217B968;
		  /* 8217B968h */ case   50:  		/* rlwimi R10, R11, 0, 6, 6 */
		/* 8217B968h case   50:*/		cpu::op::rlwimi<0,0,6,6>(regs,&regs.R10,regs.R11);
		/* 8217B968h case   50:*/		return 0x8217B96C;
		  /* 8217B96Ch */ case   51:  		/* stw R10, <#[R3 + 76]> */
		/* 8217B96Ch case   51:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x0000004C) );
		/* 8217B96Ch case   51:*/		return 0x8217B970;
		  /* 8217B970h */ case   52:  		/* lwz R11, <#[R30 + 108]> */
		/* 8217B970h case   52:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000006C) );
		/* 8217B970h case   52:*/		return 0x8217B974;
		  /* 8217B974h */ case   53:  		/* stw R11, <#[R3 + 108]> */
		/* 8217B974h case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8217B974h case   53:*/		return 0x8217B978;
		  /* 8217B978h */ case   54:  		/* lwz R11, <#[R30 + 72]> */
		/* 8217B978h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000048) );
		/* 8217B978h case   54:*/		return 0x8217B97C;
		  /* 8217B97Ch */ case   55:  		/* stw R11, <#[R3 + 72]> */
		/* 8217B97Ch case   55:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000048) );
		/* 8217B97Ch case   55:*/		return 0x8217B980;
		  /* 8217B980h */ case   56:  		/* lwz R11, <#[R30 + 12]> */
		/* 8217B980h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8217B980h case   56:*/		return 0x8217B984;
		  /* 8217B984h */ case   57:  		/* cmplwi CR6, R11, 0 */
		/* 8217B984h case   57:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217B984h case   57:*/		return 0x8217B988;
		  /* 8217B988h */ case   58:  		/* bc 12, CR6_EQ, 8 */
		/* 8217B988h case   58:*/		if ( regs.CR[6].eq ) { return 0x8217B990;  }
		/* 8217B988h case   58:*/		return 0x8217B98C;
		  /* 8217B98Ch */ case   59:  		/* lwz R4, <#[R11]> */
		/* 8217B98Ch case   59:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000000) );
		/* 8217B98Ch case   59:*/		return 0x8217B990;
	}
	return 0x8217B990;
} // Block from 8217B8A0h-8217B990h (60 instructions)

//////////////////////////////////////////////////////
// Block at 8217B990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217B990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217B990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217B990);
		  /* 8217B990h */ case    0:  		/* mr R5, R28 */
		/* 8217B990h case    0:*/		regs.R5 = regs.R28;
		/* 8217B990h case    0:*/		return 0x8217B994;
		  /* 8217B994h */ case    1:  		/* mr R3, R31 */
		/* 8217B994h case    1:*/		regs.R3 = regs.R31;
		/* 8217B994h case    1:*/		return 0x8217B998;
		  /* 8217B998h */ case    2:  		/* bl 737608 */
		/* 8217B998h case    2:*/		regs.LR = 0x8217B99C; return 0x8222FAE0;
		/* 8217B998h case    2:*/		return 0x8217B99C;
		  /* 8217B99Ch */ case    3:  		/* lwz R11, <#[R31 + 48]> */
		/* 8217B99Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8217B99Ch case    3:*/		return 0x8217B9A0;
		  /* 8217B9A0h */ case    4:  		/* lwz R10, <#[R30 + 48]> */
		/* 8217B9A0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000030) );
		/* 8217B9A0h case    4:*/		return 0x8217B9A4;
		  /* 8217B9A4h */ case    5:  		/* mr R5, R31 */
		/* 8217B9A4h case    5:*/		regs.R5 = regs.R31;
		/* 8217B9A4h case    5:*/		return 0x8217B9A8;
		  /* 8217B9A8h */ case    6:  		/* mr R3, R30 */
		/* 8217B9A8h case    6:*/		regs.R3 = regs.R30;
		/* 8217B9A8h case    6:*/		return 0x8217B9AC;
		  /* 8217B9ACh */ case    7:  		/* rlwimi R11, R10, 0, 4, 4 */
		/* 8217B9ACh case    7:*/		cpu::op::rlwimi<0,0,4,4>(regs,&regs.R11,regs.R10);
		/* 8217B9ACh case    7:*/		return 0x8217B9B0;
		  /* 8217B9B0h */ case    8:  		/* stw R11, <#[R31 + 48]> */
		/* 8217B9B0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8217B9B0h case    8:*/		return 0x8217B9B4;
		  /* 8217B9B4h */ case    9:  		/* lwz R4, <#[R30 + 12]> */
		/* 8217B9B4h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 8217B9B4h case    9:*/		return 0x8217B9B8;
		  /* 8217B9B8h */ case   10:  		/* bl 737136 */
		/* 8217B9B8h case   10:*/		regs.LR = 0x8217B9BC; return 0x8222F928;
		/* 8217B9B8h case   10:*/		return 0x8217B9BC;
		  /* 8217B9BCh */ case   11:  		/* lwz R11, <#[R30 + 48]> */
		/* 8217B9BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8217B9BCh case   11:*/		return 0x8217B9C0;
		  /* 8217B9C0h */ case   12:  		/* oris R11, R11, 2048 */
		/* 8217B9C0h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 8217B9C0h case   12:*/		return 0x8217B9C4;
		  /* 8217B9C4h */ case   13:  		/* li R8, 0 */
		/* 8217B9C4h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217B9C4h case   13:*/		return 0x8217B9C8;
		  /* 8217B9C8h */ case   14:  		/* stw R11, <#[R30 + 48]> */
		/* 8217B9C8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8217B9C8h case   14:*/		return 0x8217B9CC;
		  /* 8217B9CCh */ case   15:  		/* li R7, 0 */
		/* 8217B9CCh case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217B9CCh case   15:*/		return 0x8217B9D0;
		  /* 8217B9D0h */ case   16:  		/* li R6, 120 */
		/* 8217B9D0h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x78);
		/* 8217B9D0h case   16:*/		return 0x8217B9D4;
		  /* 8217B9D4h */ case   17:  		/* addi R5, R31, 24 */
		/* 8217B9D4h case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x18);
		/* 8217B9D4h case   17:*/		return 0x8217B9D8;
		  /* 8217B9D8h */ case   18:  		/* mr R4, R31 */
		/* 8217B9D8h case   18:*/		regs.R4 = regs.R31;
		/* 8217B9D8h case   18:*/		return 0x8217B9DC;
		  /* 8217B9DCh */ case   19:  		/* mr R3, R28 */
		/* 8217B9DCh case   19:*/		regs.R3 = regs.R28;
		/* 8217B9DCh case   19:*/		return 0x8217B9E0;
		  /* 8217B9E0h */ case   20:  		/* bl 692152 */
		/* 8217B9E0h case   20:*/		regs.LR = 0x8217B9E4; return 0x82224998;
		/* 8217B9E0h case   20:*/		return 0x8217B9E4;
		  /* 8217B9E4h */ case   21:  		/* lwz R10, <#[R3 + 8]> */
		/* 8217B9E4h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 8217B9E4h case   21:*/		return 0x8217B9E8;
		  /* 8217B9E8h */ case   22:  		/* mr R26, R3 */
		/* 8217B9E8h case   22:*/		regs.R26 = regs.R3;
		/* 8217B9E8h case   22:*/		return 0x8217B9EC;
		  /* 8217B9ECh */ case   23:  		/* ori R10, R10, 64 */
		/* 8217B9ECh case   23:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x40);
		/* 8217B9ECh case   23:*/		return 0x8217B9F0;
		  /* 8217B9F0h */ case   24:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 8217B9F0h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 8217B9F0h case   24:*/		return 0x8217B9F4;
		  /* 8217B9F4h */ case   25:  		/* mr R6, R28 */
		/* 8217B9F4h case   25:*/		regs.R6 = regs.R28;
		/* 8217B9F4h case   25:*/		return 0x8217B9F8;
		  /* 8217B9F8h */ case   26:  		/* addi R29, R11, 36 */
		/* 8217B9F8h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x24);
		/* 8217B9F8h case   26:*/		return 0x8217B9FC;
		  /* 8217B9FCh */ case   27:  		/* stw R10, <#[R26 + 8]> */
		/* 8217B9FCh case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 8217B9FCh case   27:*/		return 0x8217BA00;
		  /* 8217BA00h */ case   28:  		/* mr R5, R27 */
		/* 8217BA00h case   28:*/		regs.R5 = regs.R27;
		/* 8217BA00h case   28:*/		return 0x8217BA04;
		  /* 8217BA04h */ case   29:  		/* li R4, 1 */
		/* 8217BA04h case   29:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217BA04h case   29:*/		return 0x8217BA08;
		  /* 8217BA08h */ case   30:  		/* lwz R9, <#[R11 + 40]> */
		/* 8217BA08h case   30:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000028) );
		/* 8217BA08h case   30:*/		return 0x8217BA0C;
		  /* 8217BA0Ch */ case   31:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217BA0Ch case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217BA0Ch case   31:*/		return 0x8217BA10;
		  /* 8217BA10h */ case   32:  		/* lwz R10, <#[R11 + 36]> */
		/* 8217BA10h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8217BA10h case   32:*/		return 0x8217BA14;
		  /* 8217BA14h */ case   33:  		/* mr R3, R30 */
		/* 8217BA14h case   33:*/		regs.R3 = regs.R30;
		/* 8217BA14h case   33:*/		return 0x8217BA18;
		  /* 8217BA18h */ case   34:  		/* stw R10, <#[R9 + 36]> */
		/* 8217BA18h case   34:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000024) );
		/* 8217BA18h case   34:*/		return 0x8217BA1C;
		  /* 8217BA1Ch */ case   35:  		/* lwz R10, <#[R11 + 36]> */
		/* 8217BA1Ch case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8217BA1Ch case   35:*/		return 0x8217BA20;
		  /* 8217BA20h */ case   36:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8217BA20h case   36:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8217BA20h case   36:*/		return 0x8217BA24;
		  /* 8217BA24h */ case   37:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217BA24h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217BA24h case   37:*/		return 0x8217BA28;
		  /* 8217BA28h */ case   38:  		/* stw R11, <#[R10]> */
		/* 8217BA28h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8217BA28h case   38:*/		return 0x8217BA2C;
		  /* 8217BA2Ch */ case   39:  		/* bl 737636 */
		/* 8217BA2Ch case   39:*/		regs.LR = 0x8217BA30; return 0x8222FB90;
		/* 8217BA2Ch case   39:*/		return 0x8217BA30;
		  /* 8217BA30h */ case   40:  		/* lwz R8, <#[R31 + 32]> */
		/* 8217BA30h case   40:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 8217BA30h case   40:*/		return 0x8217BA34;
		  /* 8217BA34h */ case   41:  		/* addi R11, R31, 32 */
		/* 8217BA34h case   41:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x20);
		/* 8217BA34h case   41:*/		return 0x8217BA38;
		  /* 8217BA38h */ case   42:  		/* addi R10, R29, -36 */
		/* 8217BA38h case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFFDC);
		/* 8217BA38h case   42:*/		return 0x8217BA3C;
		  /* 8217BA3Ch */ case   43:  		/* addi R9, R11, -36 */
		/* 8217BA3Ch case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFDC);
		/* 8217BA3Ch case   43:*/		return 0x8217BA40;
		  /* 8217BA40h */ case   44:  		/* addi R11, R29, 4 */
		/* 8217BA40h case   44:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0x4);
		/* 8217BA40h case   44:*/		return 0x8217BA44;
		  /* 8217BA44h */ case   45:  		/* stw R8, <#[R29]> */
		/* 8217BA44h case   45:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 8217BA44h case   45:*/		return 0x8217BA48;
		  /* 8217BA48h */ case   46:  		/* ori R9, R9, 1 */
		/* 8217BA48h case   46:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8217BA48h case   46:*/		return 0x8217BA4C;
		  /* 8217BA4Ch */ case   47:  		/* lwz R8, <#[R31 + 32]> */
		/* 8217BA4Ch case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000020) );
		/* 8217BA4Ch case   47:*/		return 0x8217BA50;
		  /* 8217BA50h */ case   48:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 8217BA50h case   48:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 8217BA50h case   48:*/		return 0x8217BA54;
		  /* 8217BA54h */ case   49:  		/* stw R10, <#[R8]> */
		/* 8217BA54h case   49:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8217BA54h case   49:*/		return 0x8217BA58;
		  /* 8217BA58h */ case   50:  		/* stw R9, <#[R29 + 4]> */
		/* 8217BA58h case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000004) );
		/* 8217BA58h case   50:*/		return 0x8217BA5C;
		  /* 8217BA5Ch */ case   51:  		/* stw R11, <#[R31 + 32]> */
		/* 8217BA5Ch case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8217BA5Ch case   51:*/		return 0x8217BA60;
		  /* 8217BA60h */ case   52:  		/* lwz R5, <#[R31 + 96]> */
		/* 8217BA60h case   52:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000060) );
		/* 8217BA60h case   52:*/		return 0x8217BA64;
		  /* 8217BA64h */ case   53:  		/* cmplwi CR6, R5, 0 */
		/* 8217BA64h case   53:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8217BA64h case   53:*/		return 0x8217BA68;
		  /* 8217BA68h */ case   54:  		/* bc 12, CR6_EQ, 20 */
		/* 8217BA68h case   54:*/		if ( regs.CR[6].eq ) { return 0x8217BA7C;  }
		/* 8217BA68h case   54:*/		return 0x8217BA6C;
		  /* 8217BA6Ch */ case   55:  		/* mr R6, R28 */
		/* 8217BA6Ch case   55:*/		regs.R6 = regs.R28;
		/* 8217BA6Ch case   55:*/		return 0x8217BA70;
		  /* 8217BA70h */ case   56:  		/* li R4, 1 */
		/* 8217BA70h case   56:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217BA70h case   56:*/		return 0x8217BA74;
		  /* 8217BA74h */ case   57:  		/* mr R3, R27 */
		/* 8217BA74h case   57:*/		regs.R3 = regs.R27;
		/* 8217BA74h case   57:*/		return 0x8217BA78;
		  /* 8217BA78h */ case   58:  		/* bl -12544 */
		/* 8217BA78h case   58:*/		regs.LR = 0x8217BA7C; return 0x82178978;
		/* 8217BA78h case   58:*/		return 0x8217BA7C;
	}
	return 0x8217BA7C;
} // Block from 8217B990h-8217BA7Ch (59 instructions)

//////////////////////////////////////////////////////
// Block at 8217BA7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BA7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BA7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BA7C);
		  /* 8217BA7Ch */ case    0:  		/* stw R27, <#[R31 + 96]> */
		/* 8217BA7Ch case    0:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R31 + 0x00000060) );
		/* 8217BA7Ch case    0:*/		return 0x8217BA80;
		  /* 8217BA80h */ case    1:  		/* lwz R11, <#[R27 + 8]> */
		/* 8217BA80h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8217BA80h case    1:*/		return 0x8217BA84;
		  /* 8217BA84h */ case    2:  		/* oris R11, R11, 512 */
		/* 8217BA84h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8217BA84h case    2:*/		return 0x8217BA88;
		  /* 8217BA88h */ case    3:  		/* stw R11, <#[R27 + 8]> */
		/* 8217BA88h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8217BA88h case    3:*/		return 0x8217BA8C;
		  /* 8217BA8Ch */ case    4:  		/* stw R31, <#[R27 + 28]> */
		/* 8217BA8Ch case    4:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217BA8Ch case    4:*/		return 0x8217BA90;
		  /* 8217BA90h */ case    5:  		/* lwz R11, <#[R25 + 12]> */
		/* 8217BA90h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 8217BA90h case    5:*/		return 0x8217BA94;
		  /* 8217BA94h */ case    6:  		/* addi R11, R11, 4 */
		/* 8217BA94h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8217BA94h case    6:*/		return 0x8217BA98;
		  /* 8217BA98h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 8217BA98h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217BA98h case    7:*/		return 0x8217BA9C;
		  /* 8217BA9Ch */ case    8:  		/* b 12 */
		/* 8217BA9Ch case    8:*/		return 0x8217BAA8;
		/* 8217BA9Ch case    8:*/		return 0x8217BAA0;
		  /* 8217BAA0h */ case    9:  		/* addi R11, R10, 8 */
		/* 8217BAA0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 8217BAA0h case    9:*/		return 0x8217BAA4;
		  /* 8217BAA4h */ case   10:  		/* lwz R10, <#[R10 + 8]> */
		/* 8217BAA4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8217BAA4h case   10:*/		return 0x8217BAA8;
	}
	return 0x8217BAA8;
} // Block from 8217BA7Ch-8217BAA8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217BAA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BAA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BAA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BAA8);
		  /* 8217BAA8h */ case    0:  		/* cmplw CR6, R10, R25 */
		/* 8217BAA8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 8217BAA8h case    0:*/		return 0x8217BAAC;
		  /* 8217BAACh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8217BAACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217BAA0;  }
		/* 8217BAACh case    1:*/		return 0x8217BAB0;
		  /* 8217BAB0h */ case    2:  		/* lwz R10, <#[R25 + 8]> */
		/* 8217BAB0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000008) );
		/* 8217BAB0h case    2:*/		return 0x8217BAB4;
		  /* 8217BAB4h */ case    3:  		/* mr R3, R28 */
		/* 8217BAB4h case    3:*/		regs.R3 = regs.R28;
		/* 8217BAB4h case    3:*/		return 0x8217BAB8;
		  /* 8217BAB8h */ case    4:  		/* stw R10, <#[R11]> */
		/* 8217BAB8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217BAB8h case    4:*/		return 0x8217BABC;
		  /* 8217BABCh */ case    5:  		/* lwz R11, <#[R26 + 4]> */
		/* 8217BABCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 8217BABCh case    5:*/		return 0x8217BAC0;
		  /* 8217BAC0h */ case    6:  		/* stw R11, <#[R25 + 8]> */
		/* 8217BAC0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 8217BAC0h case    6:*/		return 0x8217BAC4;
		  /* 8217BAC4h */ case    7:  		/* stw R25, <#[R26 + 4]> */
		/* 8217BAC4h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R26 + 0x00000004) );
		/* 8217BAC4h case    7:*/		return 0x8217BAC8;
		  /* 8217BAC8h */ case    8:  		/* stw R26, <#[R25 + 12]> */
		/* 8217BAC8h case    8:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R25 + 0x0000000C) );
		/* 8217BAC8h case    8:*/		return 0x8217BACC;
		  /* 8217BACCh */ case    9:  		/* bl 456788 */
		/* 8217BACCh case    9:*/		regs.LR = 0x8217BAD0; return 0x821EB320;
		/* 8217BACCh case    9:*/		return 0x8217BAD0;
		  /* 8217BAD0h */ case   10:  		/* mr R30, R31 */
		/* 8217BAD0h case   10:*/		regs.R30 = regs.R31;
		/* 8217BAD0h case   10:*/		return 0x8217BAD4;
	}
	return 0x8217BAD4;
} // Block from 8217BAA8h-8217BAD4h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217BAD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BAD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BAD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BAD4);
		  /* 8217BAD4h */ case    0:  		/* addi R31, R30, 24 */
		/* 8217BAD4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R30,0x18);
		/* 8217BAD4h case    0:*/		return 0x8217BAD8;
	}
	return 0x8217BAD8;
} // Block from 8217BAD4h-8217BAD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217BAD8h
// Function '?PredicateBlocks@Compiler@D3DXShader@@AAA_NPAVBlock@2@III0PAPAV32@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BAD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BAD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BAD8);
		  /* 8217BAD8h */ case    0:  		/* li R8, 1 */
		/* 8217BAD8h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217BAD8h case    0:*/		return 0x8217BADC;
		  /* 8217BADCh */ case    1:  		/* mr R5, R31 */
		/* 8217BADCh case    1:*/		regs.R5 = regs.R31;
		/* 8217BADCh case    1:*/		return 0x8217BAE0;
		  /* 8217BAE0h */ case    2:  		/* li R7, 2 */
		/* 8217BAE0h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8217BAE0h case    2:*/		return 0x8217BAE4;
		  /* 8217BAE4h */ case    3:  		/* li R6, 108 */
		/* 8217BAE4h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x6C);
		/* 8217BAE4h case    3:*/		return 0x8217BAE8;
		  /* 8217BAE8h */ case    4:  		/* mr R4, R30 */
		/* 8217BAE8h case    4:*/		regs.R4 = regs.R30;
		/* 8217BAE8h case    4:*/		return 0x8217BAEC;
		  /* 8217BAECh */ case    5:  		/* mr R3, R28 */
		/* 8217BAECh case    5:*/		regs.R3 = regs.R28;
		/* 8217BAECh case    5:*/		return 0x8217BAF0;
		  /* 8217BAF0h */ case    6:  		/* bl 691880 */
		/* 8217BAF0h case    6:*/		regs.LR = 0x8217BAF4; return 0x82224998;
		/* 8217BAF0h case    6:*/		return 0x8217BAF4;
		  /* 8217BAF4h */ case    7:  		/* lis R11, -32256 */
		/* 8217BAF4h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8217BAF4h case    7:*/		return 0x8217BAF8;
		  /* 8217BAF8h */ case    8:  		/* lis R10, -32255 */
		/* 8217BAF8h case    8:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8201);
		/* 8217BAF8h case    8:*/		return 0x8217BAFC;
		  /* 8217BAFCh */ case    9:  		/* mr R29, R3 */
		/* 8217BAFCh case    9:*/		regs.R29 = regs.R3;
		/* 8217BAFCh case    9:*/		return 0x8217BB00;
		  /* 8217BB00h */ case   10:  		/* li R4, 1 */
		/* 8217BB00h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217BB00h case   10:*/		return 0x8217BB04;
		  /* 8217BB04h */ case   11:  		/* mr R3, R28 */
		/* 8217BB04h case   11:*/		regs.R3 = regs.R28;
		/* 8217BB04h case   11:*/		return 0x8217BB08;
		  /* 8217BB08h */ case   12:  		/* lfs FR4, <#[R11 + 1816]> */
		/* 8217BB08h case   12:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R11 + 0x00000718) );
		/* 8217BB08h case   12:*/		return 0x8217BB0C;
		  /* 8217BB0Ch */ case   13:  		/* lfs FR1, <#[R10 - 26744]> */
		/* 8217BB0Ch case   13:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R10 + 0xFFFF9788) );
		/* 8217BB0Ch case   13:*/		return 0x8217BB10;
		  /* 8217BB10h */ case   14:  		/* fmr FR3, FR4 */
		/* 8217BB10h case   14:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 8217BB10h case   14:*/		return 0x8217BB14;
		  /* 8217BB14h */ case   15:  		/* fmr FR2, FR4 */
		/* 8217BB14h case   15:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 8217BB14h case   15:*/		return 0x8217BB18;
		  /* 8217BB18h */ case   16:  		/* bl 716864 */
		/* 8217BB18h case   16:*/		regs.LR = 0x8217BB1C; return 0x8222AB58;
		/* 8217BB18h case   16:*/		return 0x8217BB1C;
		  /* 8217BB1Ch */ case   17:  		/* mr R26, R3 */
		/* 8217BB1Ch case   17:*/		regs.R26 = regs.R3;
		/* 8217BB1Ch case   17:*/		return 0x8217BB20;
		  /* 8217BB20h */ case   18:  		/* li R5, 0 */
		/* 8217BB20h case   18:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217BB20h case   18:*/		return 0x8217BB24;
		  /* 8217BB24h */ case   19:  		/* mr R4, R24 */
		/* 8217BB24h case   19:*/		regs.R4 = regs.R24;
		/* 8217BB24h case   19:*/		return 0x8217BB28;
		  /* 8217BB28h */ case   20:  		/* mr R3, R28 */
		/* 8217BB28h case   20:*/		regs.R3 = regs.R28;
		/* 8217BB28h case   20:*/		return 0x8217BB2C;
		  /* 8217BB2Ch */ case   21:  		/* bl -14876 */
		/* 8217BB2Ch case   21:*/		regs.LR = 0x8217BB30; return 0x82178110;
		/* 8217BB2Ch case   21:*/		return 0x8217BB30;
		  /* 8217BB30h */ case   22:  		/* mr R4, R3 */
		/* 8217BB30h case   22:*/		regs.R4 = regs.R3;
		/* 8217BB30h case   22:*/		return 0x8217BB34;
		  /* 8217BB34h */ case   23:  		/* mr R3, R29 */
		/* 8217BB34h case   23:*/		regs.R3 = regs.R29;
		/* 8217BB34h case   23:*/		return 0x8217BB38;
		  /* 8217BB38h */ case   24:  		/* bl -14704 */
		/* 8217BB38h case   24:*/		regs.LR = 0x8217BB3C; return 0x821781C8;
		/* 8217BB38h case   24:*/		return 0x8217BB3C;
		  /* 8217BB3Ch */ case   25:  		/* stw R3, <#[R29 + 44]> */
		/* 8217BB3Ch case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x0000002C) );
		/* 8217BB3Ch case   25:*/		return 0x8217BB40;
		  /* 8217BB40h */ case   26:  		/* li R5, 0 */
		/* 8217BB40h case   26:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217BB40h case   26:*/		return 0x8217BB44;
		  /* 8217BB44h */ case   27:  		/* mr R4, R26 */
		/* 8217BB44h case   27:*/		regs.R4 = regs.R26;
		/* 8217BB44h case   27:*/		return 0x8217BB48;
		  /* 8217BB48h */ case   28:  		/* mr R3, R28 */
		/* 8217BB48h case   28:*/		regs.R3 = regs.R28;
		/* 8217BB48h case   28:*/		return 0x8217BB4C;
		  /* 8217BB4Ch */ case   29:  		/* bl -14908 */
		/* 8217BB4Ch case   29:*/		regs.LR = 0x8217BB50; return 0x82178110;
		/* 8217BB4Ch case   29:*/		return 0x8217BB50;
		  /* 8217BB50h */ case   30:  		/* mr R4, R3 */
		/* 8217BB50h case   30:*/		regs.R4 = regs.R3;
		/* 8217BB50h case   30:*/		return 0x8217BB54;
		  /* 8217BB54h */ case   31:  		/* mr R3, R29 */
		/* 8217BB54h case   31:*/		regs.R3 = regs.R29;
		/* 8217BB54h case   31:*/		return 0x8217BB58;
		  /* 8217BB58h */ case   32:  		/* bl -14736 */
		/* 8217BB58h case   32:*/		regs.LR = 0x8217BB5C; return 0x821781C8;
		/* 8217BB58h case   32:*/		return 0x8217BB5C;
		  /* 8217BB5Ch */ case   33:  		/* lwz R11, <#[R29 + 8]> */
		/* 8217BB5Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8217BB5Ch case   33:*/		return 0x8217BB60;
		  /* 8217BB60h */ case   34:  		/* stw R3, <#[R29 + 48]> */
		/* 8217BB60h case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000030) );
		/* 8217BB60h case   34:*/		return 0x8217BB64;
		  /* 8217BB64h */ case   35:  		/* mr R3, R29 */
		/* 8217BB64h case   35:*/		regs.R3 = regs.R29;
		/* 8217BB64h case   35:*/		return 0x8217BB68;
		  /* 8217BB68h */ case   36:  		/* oris R11, R11, 2 */
		/* 8217BB68h case   36:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2);
		/* 8217BB68h case   36:*/		return 0x8217BB6C;
		  /* 8217BB6Ch */ case   37:  		/* mr R4, R25 */
		/* 8217BB6Ch case   37:*/		regs.R4 = regs.R25;
		/* 8217BB6Ch case   37:*/		return 0x8217BB70;
		  /* 8217BB70h */ case   38:  		/* stw R11, <#[R29 + 8]> */
		/* 8217BB70h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8217BB70h case   38:*/		return 0x8217BB74;
		  /* 8217BB74h */ case   39:  		/* lwz R10, <#[R27 + 8]> */
		/* 8217BB74h case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 8217BB74h case   39:*/		return 0x8217BB78;
		  /* 8217BB78h */ case   40:  		/* rlwimi R10, R11, 0, 14, 12 */
		/* 8217BB78h case   40:*/		cpu::op::rlwimi<0,0,14,12>(regs,&regs.R10,regs.R11);
		/* 8217BB78h case   40:*/		return 0x8217BB7C;
		  /* 8217BB7Ch */ case   41:  		/* stw R10, <#[R29 + 8]> */
		/* 8217BB7Ch case   41:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 8217BB7Ch case   41:*/		return 0x8217BB80;
		  /* 8217BB80h */ case   42:  		/* bl -14776 */
		/* 8217BB80h case   42:*/		regs.LR = 0x8217BB84; return 0x821781C8;
		/* 8217BB80h case   42:*/		return 0x8217BB84;
		  /* 8217BB84h */ case   43:  		/* mr R4, R29 */
		/* 8217BB84h case   43:*/		regs.R4 = regs.R29;
		/* 8217BB84h case   43:*/		return 0x8217BB88;
		  /* 8217BB88h */ case   44:  		/* mr R5, R28 */
		/* 8217BB88h case   44:*/		regs.R5 = regs.R28;
		/* 8217BB88h case   44:*/		return 0x8217BB8C;
		  /* 8217BB8Ch */ case   45:  		/* mr R3, R27 */
		/* 8217BB8Ch case   45:*/		regs.R3 = regs.R27;
		/* 8217BB8Ch case   45:*/		return 0x8217BB90;
		  /* 8217BB90h */ case   46:  		/* bl -14592 */
		/* 8217BB90h case   46:*/		regs.LR = 0x8217BB94; return 0x82178290;
		/* 8217BB90h case   46:*/		return 0x8217BB94;
		  /* 8217BB94h */ case   47:  		/* li R8, 0 */
		/* 8217BB94h case   47:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217BB94h case   47:*/		return 0x8217BB98;
		  /* 8217BB98h */ case   48:  		/* li R7, 0 */
		/* 8217BB98h case   48:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217BB98h case   48:*/		return 0x8217BB9C;
		  /* 8217BB9Ch */ case   49:  		/* li R6, 117 */
		/* 8217BB9Ch case   49:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 8217BB9Ch case   49:*/		return 0x8217BBA0;
		  /* 8217BBA0h */ case   50:  		/* mr R5, R31 */
		/* 8217BBA0h case   50:*/		regs.R5 = regs.R31;
		/* 8217BBA0h case   50:*/		return 0x8217BBA4;
		  /* 8217BBA4h */ case   51:  		/* mr R4, R30 */
		/* 8217BBA4h case   51:*/		regs.R4 = regs.R30;
		/* 8217BBA4h case   51:*/		return 0x8217BBA8;
		  /* 8217BBA8h */ case   52:  		/* mr R3, R28 */
		/* 8217BBA8h case   52:*/		regs.R3 = regs.R28;
		/* 8217BBA8h case   52:*/		return 0x8217BBAC;
		  /* 8217BBACh */ case   53:  		/* bl 691692 */
		/* 8217BBACh case   53:*/		regs.LR = 0x8217BBB0; return 0x82224998;
		/* 8217BBACh case   53:*/		return 0x8217BBB0;
		  /* 8217BBB0h */ case   54:  		/* mr R31, R3 */
		/* 8217BBB0h case   54:*/		regs.R31 = regs.R3;
		/* 8217BBB0h case   54:*/		return 0x8217BBB4;
		  /* 8217BBB4h */ case   55:  		/* mr R4, R29 */
		/* 8217BBB4h case   55:*/		regs.R4 = regs.R29;
		/* 8217BBB4h case   55:*/		return 0x8217BBB8;
		  /* 8217BBB8h */ case   56:  		/* mr R3, R28 */
		/* 8217BBB8h case   56:*/		regs.R3 = regs.R28;
		/* 8217BBB8h case   56:*/		return 0x8217BBBC;
		  /* 8217BBBCh */ case   57:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217BBBCh case   57:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217BBBCh case   57:*/		return 0x8217BBC0;
		  /* 8217BBC0h */ case   58:  		/* oris R11, R11, 512 */
		/* 8217BBC0h case   58:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8217BBC0h case   58:*/		return 0x8217BBC4;
		  /* 8217BBC4h */ case   59:  		/* stw R11, <#[R31 + 8]> */
		/* 8217BBC4h case   59:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217BBC4h case   59:*/		return 0x8217BBC8;
		  /* 8217BBC8h */ case   60:  		/* bl -15304 */
		/* 8217BBC8h case   60:*/		regs.LR = 0x8217BBCC; return 0x82178000;
		/* 8217BBC8h case   60:*/		return 0x8217BBCC;
		  /* 8217BBCCh */ case   61:  		/* mr R4, R3 */
		/* 8217BBCCh case   61:*/		regs.R4 = regs.R3;
		/* 8217BBCCh case   61:*/		return 0x8217BBD0;
		  /* 8217BBD0h */ case   62:  		/* mr R3, R31 */
		/* 8217BBD0h case   62:*/		regs.R3 = regs.R31;
		/* 8217BBD0h case   62:*/		return 0x8217BBD4;
		  /* 8217BBD4h */ case   63:  		/* bl -14860 */
		/* 8217BBD4h case   63:*/		regs.LR = 0x8217BBD8; return 0x821781C8;
		/* 8217BBD4h case   63:*/		return 0x8217BBD8;
		  /* 8217BBD8h */ case   64:  		/* mr R3, R30 */
		/* 8217BBD8h case   64:*/		regs.R3 = regs.R30;
		/* 8217BBD8h case   64:*/		return 0x8217BBDC;
		  /* 8217BBDCh */ case   65:  		/* addi R1, R1, 160 */
		/* 8217BBDCh case   65:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8217BBDCh case   65:*/		return 0x8217BBE0;
		  /* 8217BBE0h */ case   66:  		/* b -960840 */
		/* 8217BBE0h case   66:*/		return 0x82091298;
		/* 8217BBE0h case   66:*/		return 0x8217BBE4;
		  /* 8217BBE4h */ case   67:  		/* nop */
		/* 8217BBE4h case   67:*/		cpu::op::nop();
		/* 8217BBE4h case   67:*/		return 0x8217BBE8;
	}
	return 0x8217BBE8;
} // Block from 8217BAD8h-8217BBE8h (68 instructions)

//////////////////////////////////////////////////////
// Block at 8217BBE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BBE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BBE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BBE8);
		  /* 8217BBE8h */ case    0:  		/* mfspr R12, LR */
		/* 8217BBE8h case    0:*/		regs.R12 = regs.LR;
		/* 8217BBE8h case    0:*/		return 0x8217BBEC;
		  /* 8217BBECh */ case    1:  		/* bl -960948 */
		/* 8217BBECh case    1:*/		regs.LR = 0x8217BBF0; return 0x82091238;
		/* 8217BBECh case    1:*/		return 0x8217BBF0;
		  /* 8217BBF0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8217BBF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8217BBF0h case    2:*/		return 0x8217BBF4;
		  /* 8217BBF4h */ case    3:  		/* addi R26, R4, 48 */
		/* 8217BBF4h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R4,0x30);
		/* 8217BBF4h case    3:*/		return 0x8217BBF8;
		  /* 8217BBF8h */ case    4:  		/* lwz R11, <#[R4 + 48]> */
		/* 8217BBF8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 8217BBF8h case    4:*/		return 0x8217BBFC;
		  /* 8217BBFCh */ case    5:  		/* lwz R9, <#[R7 + 40]> */
		/* 8217BBFCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000028) );
		/* 8217BBFCh case    5:*/		return 0x8217BC00;
		  /* 8217BC00h */ case    6:  		/* mr R24, R3 */
		/* 8217BC00h case    6:*/		regs.R24 = regs.R3;
		/* 8217BC00h case    6:*/		return 0x8217BC04;
		  /* 8217BC04h */ case    7:  		/* mr R25, R4 */
		/* 8217BC04h case    7:*/		regs.R25 = regs.R4;
		/* 8217BC04h case    7:*/		return 0x8217BC08;
		  /* 8217BC08h */ case    8:  		/* mr R23, R5 */
		/* 8217BC08h case    8:*/		regs.R23 = regs.R5;
		/* 8217BC08h case    8:*/		return 0x8217BC0C;
		  /* 8217BC0Ch */ case    9:  		/* mr R20, R6 */
		/* 8217BC0Ch case    9:*/		regs.R20 = regs.R6;
		/* 8217BC0Ch case    9:*/		return 0x8217BC10;
		  /* 8217BC10h */ case   10:  		/* mr R22, R7 */
		/* 8217BC10h case   10:*/		regs.R22 = regs.R7;
		/* 8217BC10h case   10:*/		return 0x8217BC14;
		  /* 8217BC14h */ case   11:  		/* li R21, 1 */
		/* 8217BC14h case   11:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 8217BC14h case   11:*/		return 0x8217BC18;
		  /* 8217BC18h */ case   12:  		/* mr R28, R4 */
		/* 8217BC18h case   12:*/		regs.R28 = regs.R4;
		/* 8217BC18h case   12:*/		return 0x8217BC1C;
		  /* 8217BC1Ch */ case   13:  		/* mr R10, R26 */
		/* 8217BC1Ch case   13:*/		regs.R10 = regs.R26;
		/* 8217BC1Ch case   13:*/		return 0x8217BC20;
		  /* 8217BC20h */ case   14:  		/* b 16 */
		/* 8217BC20h case   14:*/		return 0x8217BC30;
		/* 8217BC20h case   14:*/		return 0x8217BC24;
		  /* 8217BC24h */ case   15:  		/* lwz R28, <#[R28 + 52]> */
		/* 8217BC24h case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000034) );
		/* 8217BC24h case   15:*/		return 0x8217BC28;
		  /* 8217BC28h */ case   16:  		/* addi R10, R28, 48 */
		/* 8217BC28h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R28,0x30);
		/* 8217BC28h case   16:*/		return 0x8217BC2C;
		  /* 8217BC2Ch */ case   17:  		/* lwz R11, <#[R28 + 48]> */
		/* 8217BC2Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000030) );
		/* 8217BC2Ch case   17:*/		return 0x8217BC30;
	}
	return 0x8217BC30;
} // Block from 8217BBE8h-8217BC30h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8217BC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BC30);
		  /* 8217BC30h */ case    0:  		/* rlwinm R8, R11, 0, 13, 31 */
		/* 8217BC30h case    0:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R11);
		/* 8217BC30h case    0:*/		return 0x8217BC34;
		  /* 8217BC34h */ case    1:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 8217BC34h case    1:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 8217BC34h case    1:*/		return 0x8217BC38;
		  /* 8217BC38h */ case    2:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 8217BC38h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 8217BC38h case    2:*/		return 0x8217BC3C;
		  /* 8217BC3Ch */ case    3:  		/* addi R11, R11, 1 */
		/* 8217BC3Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217BC3Ch case    3:*/		return 0x8217BC40;
		  /* 8217BC40h */ case    4:  		/* slw R8, R21, R8 */
		/* 8217BC40h case    4:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R21,regs.R8);
		/* 8217BC40h case    4:*/		return 0x8217BC44;
		  /* 8217BC44h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217BC44h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217BC44h case    5:*/		return 0x8217BC48;
		  /* 8217BC48h */ case    6:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8217BC48h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8217BC48h case    6:*/		return 0x8217BC4C;
		  /* 8217BC4Ch */ case    7:  		/* and. R11, R8, R11 */
		/* 8217BC4Ch case    7:*/		cpu::op::and<1>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8217BC4Ch case    7:*/		return 0x8217BC50;
		  /* 8217BC50h */ case    8:  		/* bc 12, CR0_EQ, -44 */
		/* 8217BC50h case    8:*/		if ( regs.CR[0].eq ) { return 0x8217BC24;  }
		/* 8217BC50h case    8:*/		return 0x8217BC54;
		  /* 8217BC54h */ case    9:  		/* lwz R8, <#[R28 + 8]> */
		/* 8217BC54h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000008) );
		/* 8217BC54h case    9:*/		return 0x8217BC58;
		  /* 8217BC58h */ case   10:  		/* cmplwi CR6, R8, 0 */
		/* 8217BC58h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8217BC58h case   10:*/		return 0x8217BC5C;
		  /* 8217BC5Ch */ case   11:  		/* bc 12, CR6_EQ, 192 */
		/* 8217BC5Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8217BD1C;  }
		/* 8217BC5Ch case   11:*/		return 0x8217BC60;
		  /* 8217BC60h */ case   12:  		/* lwz R11, <#[R10]> */
		/* 8217BC60h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8217BC60h case   12:*/		return 0x8217BC64;
		  /* 8217BC64h */ case   13:  		/* lwz R6, <#[R8 + 4]> */
		/* 8217BC64h case   13:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R8 + 0x00000004) );
		/* 8217BC64h case   13:*/		return 0x8217BC68;
		  /* 8217BC68h */ case   14:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 8217BC68h case   14:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 8217BC68h case   14:*/		return 0x8217BC6C;
		  /* 8217BC6Ch */ case   15:  		/* rlwinm R7, R11, 27, 5, 31 */
		/* 8217BC6Ch case   15:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R7,regs.R11);
		/* 8217BC6Ch case   15:*/		return 0x8217BC70;
		  /* 8217BC70h */ case   16:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 8217BC70h case   16:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 8217BC70h case   16:*/		return 0x8217BC74;
		  /* 8217BC74h */ case   17:  		/* addi R7, R7, 1 */
		/* 8217BC74h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 8217BC74h case   17:*/		return 0x8217BC78;
		  /* 8217BC78h */ case   18:  		/* lwz R6, <#[R6 + 40]> */
		/* 8217BC78h case   18:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R6 + 0x00000028) );
		/* 8217BC78h case   18:*/		return 0x8217BC7C;
		  /* 8217BC7Ch */ case   19:  		/* slw R5, R21, R5 */
		/* 8217BC7Ch case   19:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R21,regs.R5);
		/* 8217BC7Ch case   19:*/		return 0x8217BC80;
		  /* 8217BC80h */ case   20:  		/* rlwinm R7, R7, 2, 0, 29 */
		/* 8217BC80h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R7,regs.R7);
		/* 8217BC80h case   20:*/		return 0x8217BC84;
		  /* 8217BC84h */ case   21:  		/* lwzx R7, <#[R7 + R6]> */
		/* 8217BC84h case   21:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + regs.R6 + 0x00000000) );
		/* 8217BC84h case   21:*/		return 0x8217BC88;
		  /* 8217BC88h */ case   22:  		/* and. R7, R7, R5 */
		/* 8217BC88h case   22:*/		cpu::op::and<1>(regs,&regs.R7,regs.R7,regs.R5);
		/* 8217BC88h case   22:*/		return 0x8217BC8C;
		  /* 8217BC8Ch */ case   23:  		/* bc 4, CR0_EQ, 12 */
		/* 8217BC8Ch case   23:*/		if ( !regs.CR[0].eq ) { return 0x8217BC98;  }
		/* 8217BC8Ch case   23:*/		return 0x8217BC90;
		  /* 8217BC90h */ case   24:  		/* lwz R8, <#[R8 + 12]> */
		/* 8217BC90h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x0000000C) );
		/* 8217BC90h case   24:*/		return 0x8217BC94;
		  /* 8217BC94h */ case   25:  		/* b -60 */
		/* 8217BC94h case   25:*/		return 0x8217BC58;
		/* 8217BC94h case   25:*/		return 0x8217BC98;
	}
	return 0x8217BC98;
} // Block from 8217BC30h-8217BC98h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8217BC98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BC98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BC98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BC98);
		  /* 8217BC98h */ case    0:  		/* rlwinm R10, R11, 27, 5, 31 */
		/* 8217BC98h case    0:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R11);
		/* 8217BC98h case    0:*/		return 0x8217BC9C;
		  /* 8217BC9Ch */ case    1:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8217BC9Ch case    1:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8217BC9Ch case    1:*/		return 0x8217BCA0;
		  /* 8217BCA0h */ case    2:  		/* addi R10, R10, 1 */
		/* 8217BCA0h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217BCA0h case    2:*/		return 0x8217BCA4;
		  /* 8217BCA4h */ case    3:  		/* slw R11, R21, R11 */
		/* 8217BCA4h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R11);
		/* 8217BCA4h case    3:*/		return 0x8217BCA8;
		  /* 8217BCA8h */ case    4:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8217BCA8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8217BCA8h case    4:*/		return 0x8217BCAC;
		  /* 8217BCACh */ case    5:  		/* lwzx R10, <#[R10 + R9]> */
		/* 8217BCACh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 8217BCACh case    5:*/		return 0x8217BCB0;
		  /* 8217BCB0h */ case    6:  		/* and. R11, R11, R10 */
		/* 8217BCB0h case    6:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8217BCB0h case    6:*/		return 0x8217BCB4;
		  /* 8217BCB4h */ case    7:  		/* bc 4, CR0_EQ, 104 */
		/* 8217BCB4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8217BD1C;  }
		/* 8217BCB4h case    7:*/		return 0x8217BCB8;
		  /* 8217BCB8h */ case    8:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8217BCB8h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8217BCB8h case    8:*/		return 0x8217BCBC;
		  /* 8217BCBCh */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8217BCBCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217BCBCh case    9:*/		return 0x8217BCC0;
		  /* 8217BCC0h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217BCC0h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217BCC0h case   10:*/		return 0x8217BCC4;
		  /* 8217BCC4h */ case   11:  		/* bc 4, CR0_EQ, 76 */
		/* 8217BCC4h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8217BD10;  }
		/* 8217BCC4h case   11:*/		return 0x8217BCC8;
		  /* 8217BCC8h */ case   12:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217BCC8h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217BCC8h case   12:*/		return 0x8217BCCC;
		  /* 8217BCCCh */ case   13:  		/* addic. R28, R11, -4 */
		/* 8217BCCCh case   13:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 8217BCCCh case   13:*/		return 0x8217BCD0;
		  /* 8217BCD0h */ case   14:  		/* bc 12, CR0_EQ, 64 */
		/* 8217BCD0h case   14:*/		if ( regs.CR[0].eq ) { return 0x8217BD10;  }
		/* 8217BCD0h case   14:*/		return 0x8217BCD4;
		  /* 8217BCD4h */ case   15:  		/* lwz R11, <#[R28 + 36]> */
		/* 8217BCD4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 8217BCD4h case   15:*/		return 0x8217BCD8;
		  /* 8217BCD8h */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217BCD8h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217BCD8h case   16:*/		return 0x8217BCDC;
		  /* 8217BCDCh */ case   17:  		/* bc 4, CR0_EQ, 52 */
		/* 8217BCDCh case   17:*/		if ( !regs.CR[0].eq ) { return 0x8217BD10;  }
		/* 8217BCDCh case   17:*/		return 0x8217BCE0;
		  /* 8217BCE0h */ case   18:  		/* lwz R11, <#[R28 + 36]> */
		/* 8217BCE0h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 8217BCE0h case   18:*/		return 0x8217BCE4;
		  /* 8217BCE4h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217BCE4h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217BCE4h case   19:*/		return 0x8217BCE8;
		  /* 8217BCE8h */ case   20:  		/* bc 12, CR0_EQ, 12 */
		/* 8217BCE8h case   20:*/		if ( regs.CR[0].eq ) { return 0x8217BCF4;  }
		/* 8217BCE8h case   20:*/		return 0x8217BCEC;
		  /* 8217BCECh */ case   21:  		/* li R11, 0 */
		/* 8217BCECh case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217BCECh case   21:*/		return 0x8217BCF0;
		  /* 8217BCF0h */ case   22:  		/* b 16 */
		/* 8217BCF0h case   22:*/		return 0x8217BD00;
		/* 8217BCF0h case   22:*/		return 0x8217BCF4;
	}
	return 0x8217BCF4;
} // Block from 8217BC98h-8217BCF4h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8217BCF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BCF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BCF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BCF4);
		  /* 8217BCF4h */ case    0:  		/* lwz R11, <#[R28 + 32]> */
		/* 8217BCF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000020) );
		/* 8217BCF4h case    0:*/		return 0x8217BCF8;
		  /* 8217BCF8h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217BCF8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217BCF8h case    1:*/		return 0x8217BCFC;
		  /* 8217BCFCh */ case    2:  		/* addi R11, R11, -40 */
		/* 8217BCFCh case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217BCFCh case    2:*/		return 0x8217BD00;
	}
	return 0x8217BD00;
} // Block from 8217BCF4h-8217BD00h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217BD00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BD00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BD00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BD00);
		  /* 8217BD00h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217BD00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217BD00h case    0:*/		return 0x8217BD04;
		  /* 8217BD04h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217BD04h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217BD04h case    1:*/		return 0x8217BD08;
		  /* 8217BD08h */ case    2:  		/* cmplwi CR6, R11, 10752 */
		/* 8217BD08h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A00);
		/* 8217BD08h case    2:*/		return 0x8217BD0C;
		  /* 8217BD0Ch */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 8217BD0Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8217BD1C;  }
		/* 8217BD0Ch case    3:*/		return 0x8217BD10;
	}
	return 0x8217BD10;
} // Block from 8217BD00h-8217BD10h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217BD10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BD10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BD10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BD10);
		  /* 8217BD10h */ case    0:  		/* li R4, 3535 */
		/* 8217BD10h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDCF);
		/* 8217BD10h case    0:*/		return 0x8217BD14;
		  /* 8217BD14h */ case    1:  		/* mr R3, R24 */
		/* 8217BD14h case    1:*/		regs.R3 = regs.R24;
		/* 8217BD14h case    1:*/		return 0x8217BD18;
		  /* 8217BD18h */ case    2:  		/* bl -171696 */
		/* 8217BD18h case    2:*/		regs.LR = 0x8217BD1C; return 0x82151E68;
		/* 8217BD18h case    2:*/		return 0x8217BD1C;
	}
	return 0x8217BD1C;
} // Block from 8217BD10h-8217BD1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217BD1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BD1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BD1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BD1C);
		  /* 8217BD1Ch */ case    0:  		/* lwz R11, <#[R22 + 36]> */
		/* 8217BD1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000024) );
		/* 8217BD1Ch case    0:*/		return 0x8217BD20;
		  /* 8217BD20h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217BD20h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217BD20h case    1:*/		return 0x8217BD24;
		  /* 8217BD24h */ case    2:  		/* bc 4, CR0_EQ, 384 */
		/* 8217BD24h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217BEA4;  }
		/* 8217BD24h case    2:*/		return 0x8217BD28;
		  /* 8217BD28h */ case    3:  		/* mr R27, R11 */
		/* 8217BD28h case    3:*/		regs.R27 = regs.R11;
		/* 8217BD28h case    3:*/		return 0x8217BD2C;
		  /* 8217BD2Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8217BD2Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217BD2Ch case    4:*/		return 0x8217BD30;
		  /* 8217BD30h */ case    5:  		/* bc 12, CR0_EQ, 372 */
		/* 8217BD30h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217BEA4;  }
		/* 8217BD30h case    5:*/		return 0x8217BD34;
		  /* 8217BD34h */ case    6:  		/* lwz R11, <#[R27 + 8]> */
		/* 8217BD34h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 8217BD34h case    6:*/		return 0x8217BD38;
		  /* 8217BD38h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217BD38h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217BD38h case    7:*/		return 0x8217BD3C;
		  /* 8217BD3Ch */ case    8:  		/* cmplwi CR6, R11, 8448 */
		/* 8217BD3Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002100);
		/* 8217BD3Ch case    8:*/		return 0x8217BD40;
		  /* 8217BD40h */ case    9:  		/* bc 4, CR6_EQ, 328 */
		/* 8217BD40h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8217BE88;  }
		/* 8217BD40h case    9:*/		return 0x8217BD44;
		  /* 8217BD44h */ case   10:  		/* lwz R31, <#[R28 + 28]> */
		/* 8217BD44h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x0000001C) );
		/* 8217BD44h case   10:*/		return 0x8217BD48;
		  /* 8217BD48h */ case   11:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217BD48h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217BD48h case   11:*/		return 0x8217BD4C;
		  /* 8217BD4Ch */ case   12:  		/* bc 4, CR0_EQ, 316 */
		/* 8217BD4Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217BE88;  }
		/* 8217BD4Ch case   12:*/		return 0x8217BD50;
		  /* 8217BD50h */ case   13:  		/* cmplwi CR0, R31, 0 */
		/* 8217BD50h case   13:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217BD50h case   13:*/		return 0x8217BD54;
		  /* 8217BD54h */ case   14:  		/* bc 12, CR0_EQ, 308 */
		/* 8217BD54h case   14:*/		if ( regs.CR[0].eq ) { return 0x8217BE88;  }
		/* 8217BD54h case   14:*/		return 0x8217BD58;
		  /* 8217BD58h */ case   15:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217BD58h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217BD58h case   15:*/		return 0x8217BD5C;
		  /* 8217BD5Ch */ case   16:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8217BD5Ch case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8217BD5Ch case   16:*/		return 0x8217BD60;
		  /* 8217BD60h */ case   17:  		/* cmplwi CR6, R11, 109 */
		/* 8217BD60h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006D);
		/* 8217BD60h case   17:*/		return 0x8217BD64;
		  /* 8217BD64h */ case   18:  		/* bc 12, CR6_EQ, 20 */
		/* 8217BD64h case   18:*/		if ( regs.CR[6].eq ) { return 0x8217BD78;  }
		/* 8217BD64h case   18:*/		return 0x8217BD68;
		  /* 8217BD68h */ case   19:  		/* cmplwi CR6, R11, 66 */
		/* 8217BD68h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000042);
		/* 8217BD68h case   19:*/		return 0x8217BD6C;
		  /* 8217BD6Ch */ case   20:  		/* bc 4, CR6_EQ, 260 */
		/* 8217BD6Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x8217BE70;  }
		/* 8217BD6Ch case   20:*/		return 0x8217BD70;
		  /* 8217BD70h */ case   21:  		/* rlwinm. R11, R10, 0, 0, 0 */
		/* 8217BD70h case   21:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R10);
		/* 8217BD70h case   21:*/		return 0x8217BD74;
		  /* 8217BD74h */ case   22:  		/* bc 12, CR0_EQ, 252 */
		/* 8217BD74h case   22:*/		if ( regs.CR[0].eq ) { return 0x8217BE70;  }
		/* 8217BD74h case   22:*/		return 0x8217BD78;
	}
	return 0x8217BD78;
} // Block from 8217BD1Ch-8217BD78h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8217BD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BD78);
		  /* 8217BD78h */ case    0:  		/* lwz R4, <#[R31 + 44]> */
		/* 8217BD78h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217BD78h case    0:*/		return 0x8217BD7C;
		  /* 8217BD7Ch */ case    1:  		/* lwz R3, <#[R27 + 44]> */
		/* 8217BD7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x0000002C) );
		/* 8217BD7Ch case    1:*/		return 0x8217BD80;
		  /* 8217BD80h */ case    2:  		/* bl -97016 */
		/* 8217BD80h case    2:*/		regs.LR = 0x8217BD84; return 0x82164288;
		/* 8217BD80h case    2:*/		return 0x8217BD84;
		  /* 8217BD84h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217BD84h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217BD84h case    3:*/		return 0x8217BD88;
		  /* 8217BD88h */ case    4:  		/* bc 12, CR0_EQ, 232 */
		/* 8217BD88h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217BE70;  }
		/* 8217BD88h case    4:*/		return 0x8217BD8C;
		  /* 8217BD8Ch */ case    5:  		/* rlwinm R11, R25, 0, 0, 30 */
		/* 8217BD8Ch case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R25);
		/* 8217BD8Ch case    5:*/		return 0x8217BD90;
		  /* 8217BD90h */ case    6:  		/* li R30, 0 */
		/* 8217BD90h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8217BD90h case    6:*/		return 0x8217BD94;
		  /* 8217BD94h */ case    7:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217BD94h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217BD94h case    7:*/		return 0x8217BD98;
		  /* 8217BD98h */ case    8:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217BD98h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217BD98h case    8:*/		return 0x8217BD9C;
		  /* 8217BD9Ch */ case    9:  		/* bc 4, CR0_EQ, 212 */
		/* 8217BD9Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x8217BE70;  }
		/* 8217BD9Ch case    9:*/		return 0x8217BDA0;
		  /* 8217BDA0h */ case   10:  		/* mr R29, R11 */
		/* 8217BDA0h case   10:*/		regs.R29 = regs.R11;
		/* 8217BDA0h case   10:*/		return 0x8217BDA4;
		  /* 8217BDA4h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8217BDA4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217BDA4h case   11:*/		return 0x8217BDA8;
		  /* 8217BDA8h */ case   12:  		/* bc 12, CR6_EQ, 200 */
		/* 8217BDA8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8217BE70;  }
		/* 8217BDA8h case   12:*/		return 0x8217BDAC;
		  /* 8217BDACh */ case   13:  		/* lwz R9, <#[R29 + 40]> */
		/* 8217BDACh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000028) );
		/* 8217BDACh case   13:*/		return 0x8217BDB0;
		  /* 8217BDB0h */ case   14:  		/* lwz R11, <#[R26]> */
		/* 8217BDB0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8217BDB0h case   14:*/		return 0x8217BDB4;
		  /* 8217BDB4h */ case   15:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 8217BDB4h case   15:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 8217BDB4h case   15:*/		return 0x8217BDB8;
		  /* 8217BDB8h */ case   16:  		/* lwz R8, <#[R9]> */
		/* 8217BDB8h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8217BDB8h case   16:*/		return 0x8217BDBC;
		  /* 8217BDBCh */ case   17:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 8217BDBCh case   17:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 8217BDBCh case   17:*/		return 0x8217BDC0;
		  /* 8217BDC0h */ case   18:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 8217BDC0h case   18:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 8217BDC0h case   18:*/		return 0x8217BDC4;
		  /* 8217BDC4h */ case   19:  		/* rlwinm R10, R8, 0, 13, 31 */
		/* 8217BDC4h case   19:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R8);
		/* 8217BDC4h case   19:*/		return 0x8217BDC8;
		  /* 8217BDC8h */ case   20:  		/* addi R11, R11, 1 */
		/* 8217BDC8h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217BDC8h case   20:*/		return 0x8217BDCC;
		  /* 8217BDCCh */ case   21:  		/* addi R10, R10, 31 */
		/* 8217BDCCh case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 8217BDCCh case   21:*/		return 0x8217BDD0;
		  /* 8217BDD0h */ case   22:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217BDD0h case   22:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217BDD0h case   22:*/		return 0x8217BDD4;
		  /* 8217BDD4h */ case   23:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 8217BDD4h case   23:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 8217BDD4h case   23:*/		return 0x8217BDD8;
		  /* 8217BDD8h */ case   24:  		/* slw R8, R21, R7 */
		/* 8217BDD8h case   24:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R21,regs.R7);
		/* 8217BDD8h case   24:*/		return 0x8217BDDC;
		  /* 8217BDDCh */ case   25:  		/* add R11, R10, R11 */
		/* 8217BDDCh case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217BDDCh case   25:*/		return 0x8217BDE0;
		  /* 8217BDE0h */ case   26:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8217BDE0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8217BDE0h case   26:*/		return 0x8217BDE4;
		  /* 8217BDE4h */ case   27:  		/* and. R11, R11, R8 */
		/* 8217BDE4h case   27:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8217BDE4h case   27:*/		return 0x8217BDE8;
		  /* 8217BDE8h */ case   28:  		/* bc 12, CR0_EQ, 128 */
		/* 8217BDE8h case   28:*/		if ( regs.CR[0].eq ) { return 0x8217BE68;  }
		/* 8217BDE8h case   28:*/		return 0x8217BDEC;
		  /* 8217BDECh */ case   29:  		/* lwz R11, <#[R29 + 36]> */
		/* 8217BDECh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 8217BDECh case   29:*/		return 0x8217BDF0;
		  /* 8217BDF0h */ case   30:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217BDF0h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217BDF0h case   30:*/		return 0x8217BDF4;
		  /* 8217BDF4h */ case   31:  		/* bc 4, CR0_EQ, 84 */
		/* 8217BDF4h case   31:*/		if ( !regs.CR[0].eq ) { return 0x8217BE48;  }
		/* 8217BDF4h case   31:*/		return 0x8217BDF8;
		  /* 8217BDF8h */ case   32:  		/* mr R30, R11 */
		/* 8217BDF8h case   32:*/		regs.R30 = regs.R11;
		/* 8217BDF8h case   32:*/		return 0x8217BDFC;
		  /* 8217BDFCh */ case   33:  		/* cmplwi CR0, R11, 0 */
		/* 8217BDFCh case   33:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217BDFCh case   33:*/		return 0x8217BE00;
		  /* 8217BE00h */ case   34:  		/* bc 12, CR0_EQ, 76 */
		/* 8217BE00h case   34:*/		if ( regs.CR[0].eq ) { return 0x8217BE4C;  }
		/* 8217BE00h case   34:*/		return 0x8217BE04;
		  /* 8217BE04h */ case   35:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217BE04h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217BE04h case   35:*/		return 0x8217BE08;
		  /* 8217BE08h */ case   36:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217BE08h case   36:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217BE08h case   36:*/		return 0x8217BE0C;
		  /* 8217BE0Ch */ case   37:  		/* cmplwi CR6, R11, 8320 */
		/* 8217BE0Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002080);
		/* 8217BE0Ch case   37:*/		return 0x8217BE10;
		  /* 8217BE10h */ case   38:  		/* bc 4, CR6_EQ, 24 */
		/* 8217BE10h case   38:*/		if ( !regs.CR[6].eq ) { return 0x8217BE28;  }
		/* 8217BE10h case   38:*/		return 0x8217BE14;
		  /* 8217BE14h */ case   39:  		/* mr R4, R30 */
		/* 8217BE14h case   39:*/		regs.R4 = regs.R30;
		/* 8217BE14h case   39:*/		return 0x8217BE18;
		  /* 8217BE18h */ case   40:  		/* mr R3, R24 */
		/* 8217BE18h case   40:*/		regs.R3 = regs.R24;
		/* 8217BE18h case   40:*/		return 0x8217BE1C;
		  /* 8217BE1Ch */ case   41:  		/* bl -16844 */
		/* 8217BE1Ch case   41:*/		regs.LR = 0x8217BE20; return 0x82177C50;
		/* 8217BE1Ch case   41:*/		return 0x8217BE20;
		  /* 8217BE20h */ case   42:  		/* cmplw CR6, R3, R31 */
		/* 8217BE20h case   42:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R31);
		/* 8217BE20h case   42:*/		return 0x8217BE24;
		  /* 8217BE24h */ case   43:  		/* bc 12, CR6_EQ, 496 */
		/* 8217BE24h case   43:*/		if ( regs.CR[6].eq ) { return 0x8217C014;  }
		/* 8217BE24h case   43:*/		return 0x8217BE28;
	}
	return 0x8217BE28;
} // Block from 8217BD78h-8217BE28h (44 instructions)

//////////////////////////////////////////////////////
// Block at 8217BE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BE28);
		  /* 8217BE28h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217BE28h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217BE28h case    0:*/		return 0x8217BE2C;
		  /* 8217BE2Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217BE2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217BE2Ch case    1:*/		return 0x8217BE30;
		  /* 8217BE30h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217BE30h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217BE30h case    2:*/		return 0x8217BE34;
		  /* 8217BE34h */ case    3:  		/* bc 4, CR0_EQ, 20 */
		/* 8217BE34h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217BE48;  }
		/* 8217BE34h case    3:*/		return 0x8217BE38;
		  /* 8217BE38h */ case    4:  		/* mr R30, R11 */
		/* 8217BE38h case    4:*/		regs.R30 = regs.R11;
		/* 8217BE38h case    4:*/		return 0x8217BE3C;
		  /* 8217BE3Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217BE3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217BE3Ch case    5:*/		return 0x8217BE40;
		  /* 8217BE40h */ case    6:  		/* bc 4, CR6_EQ, -60 */
		/* 8217BE40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217BE04;  }
		/* 8217BE40h case    6:*/		return 0x8217BE44;
		  /* 8217BE44h */ case    7:  		/* b 8 */
		/* 8217BE44h case    7:*/		return 0x8217BE4C;
		/* 8217BE44h case    7:*/		return 0x8217BE48;
	}
	return 0x8217BE48;
} // Block from 8217BE28h-8217BE48h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217BE48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BE48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BE48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BE48);
		  /* 8217BE48h */ case    0:  		/* li R30, 0 */
		/* 8217BE48h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8217BE48h case    0:*/		return 0x8217BE4C;
	}
	return 0x8217BE4C;
} // Block from 8217BE48h-8217BE4Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217BE4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BE4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BE4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BE4C);
		  /* 8217BE4Ch */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 8217BE4Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 8217BE4Ch case    0:*/		return 0x8217BE50;
		  /* 8217BE50h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217BE50h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217BE50h case    1:*/		return 0x8217BE54;
		  /* 8217BE54h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217BE54h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217BE54h case    2:*/		return 0x8217BE58;
		  /* 8217BE58h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217BE58h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217BE68;  }
		/* 8217BE58h case    3:*/		return 0x8217BE5C;
		  /* 8217BE5Ch */ case    4:  		/* mr R29, R11 */
		/* 8217BE5Ch case    4:*/		regs.R29 = regs.R11;
		/* 8217BE5Ch case    4:*/		return 0x8217BE60;
		  /* 8217BE60h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217BE60h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217BE60h case    5:*/		return 0x8217BE64;
		  /* 8217BE64h */ case    6:  		/* bc 4, CR6_EQ, -184 */
		/* 8217BE64h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217BDAC;  }
		/* 8217BE64h case    6:*/		return 0x8217BE68;
	}
	return 0x8217BE68;
} // Block from 8217BE4Ch-8217BE68h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217BE68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BE68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BE68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BE68);
		  /* 8217BE68h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8217BE68h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217BE68h case    0:*/		return 0x8217BE6C;
		  /* 8217BE6Ch */ case    1:  		/* bc 4, CR6_EQ, 424 */
		/* 8217BE6Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217C014;  }
		/* 8217BE6Ch case    1:*/		return 0x8217BE70;
	}
	return 0x8217BE70;
} // Block from 8217BE68h-8217BE70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217BE70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BE70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BE70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BE70);
		  /* 8217BE70h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217BE70h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217BE70h case    0:*/		return 0x8217BE74;
		  /* 8217BE74h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8217BE74h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8217BE74h case    1:*/		return 0x8217BE78;
		  /* 8217BE78h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217BE78h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217BE78h case    2:*/		return 0x8217BE7C;
		  /* 8217BE7Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217BE7Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217BE88;  }
		/* 8217BE7Ch case    3:*/		return 0x8217BE80;
		  /* 8217BE80h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217BE80h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217BE80h case    4:*/		return 0x8217BE84;
		  /* 8217BE84h */ case    5:  		/* bc 4, CR6_EQ, -300 */
		/* 8217BE84h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217BD58;  }
		/* 8217BE84h case    5:*/		return 0x8217BE88;
	}
	return 0x8217BE88;
} // Block from 8217BE70h-8217BE88h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217BE88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BE88);
		  /* 8217BE88h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 8217BE88h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 8217BE88h case    0:*/		return 0x8217BE8C;
		  /* 8217BE8Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217BE8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217BE8Ch case    1:*/		return 0x8217BE90;
		  /* 8217BE90h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217BE90h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217BE90h case    2:*/		return 0x8217BE94;
		  /* 8217BE94h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217BE94h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217BEA4;  }
		/* 8217BE94h case    3:*/		return 0x8217BE98;
		  /* 8217BE98h */ case    4:  		/* mr R27, R11 */
		/* 8217BE98h case    4:*/		regs.R27 = regs.R11;
		/* 8217BE98h case    4:*/		return 0x8217BE9C;
		  /* 8217BE9Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217BE9Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217BE9Ch case    5:*/		return 0x8217BEA0;
		  /* 8217BEA0h */ case    6:  		/* bc 4, CR6_EQ, -364 */
		/* 8217BEA0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217BD34;  }
		/* 8217BEA0h case    6:*/		return 0x8217BEA4;
	}
	return 0x8217BEA4;
} // Block from 8217BE88h-8217BEA4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217BEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BEA4);
		  /* 8217BEA4h */ case    0:  		/* lwz R11, <#[R23 + 28]> */
		/* 8217BEA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000001C) );
		/* 8217BEA4h case    0:*/		return 0x8217BEA8;
		  /* 8217BEA8h */ case    1:  		/* mr R31, R23 */
		/* 8217BEA8h case    1:*/		regs.R31 = regs.R23;
		/* 8217BEA8h case    1:*/		return 0x8217BEAC;
		  /* 8217BEACh */ case    2:  		/* b 44 */
		/* 8217BEACh case    2:*/		return 0x8217BED8;
		/* 8217BEACh case    2:*/		return 0x8217BEB0;
		  /* 8217BEB0h */ case    3:  		/* mr R3, R31 */
		/* 8217BEB0h case    3:*/		regs.R3 = regs.R31;
		/* 8217BEB0h case    3:*/		return 0x8217BEB4;
		  /* 8217BEB4h */ case    4:  		/* bl -97652 */
		/* 8217BEB4h case    4:*/		regs.LR = 0x8217BEB8; return 0x82164140;
		/* 8217BEB4h case    4:*/		return 0x8217BEB8;
		  /* 8217BEB8h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217BEB8h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217BEB8h case    5:*/		return 0x8217BEBC;
		  /* 8217BEBCh */ case    6:  		/* mr R3, R24 */
		/* 8217BEBCh case    6:*/		regs.R3 = regs.R24;
		/* 8217BEBCh case    6:*/		return 0x8217BEC0;
		  /* 8217BEC0h */ case    7:  		/* bc 12, CR0_EQ, 96 */
		/* 8217BEC0h case    7:*/		if ( regs.CR[0].eq ) { return 0x8217BF20;  }
		/* 8217BEC0h case    7:*/		return 0x8217BEC4;
		  /* 8217BEC4h */ case    8:  		/* mr R4, R31 */
		/* 8217BEC4h case    8:*/		regs.R4 = regs.R31;
		/* 8217BEC4h case    8:*/		return 0x8217BEC8;
		  /* 8217BEC8h */ case    9:  		/* bl -17016 */
		/* 8217BEC8h case    9:*/		regs.LR = 0x8217BECC; return 0x82177C50;
		/* 8217BEC8h case    9:*/		return 0x8217BECC;
		  /* 8217BECCh */ case   10:  		/* or. R31, R3, R3 */
		/* 8217BECCh case   10:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8217BECCh case   10:*/		return 0x8217BED0;
		  /* 8217BED0h */ case   11:  		/* bc 12, CR0_EQ, 88 */
		/* 8217BED0h case   11:*/		if ( regs.CR[0].eq ) { return 0x8217BF28;  }
		/* 8217BED0h case   11:*/		return 0x8217BED4;
		  /* 8217BED4h */ case   12:  		/* lwz R11, <#[R31 + 28]> */
		/* 8217BED4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8217BED4h case   12:*/		return 0x8217BED8;
	}
	return 0x8217BED8;
} // Block from 8217BEA4h-8217BED8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217BED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BED8);
		  /* 8217BED8h */ case    0:  		/* lwz R11, <#[R11 + 48]> */
		/* 8217BED8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 8217BED8h case    0:*/		return 0x8217BEDC;
		  /* 8217BEDCh */ case    1:  		/* lwz R10, <#[R28 + 40]> */
		/* 8217BEDCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000028) );
		/* 8217BEDCh case    1:*/		return 0x8217BEE0;
		  /* 8217BEE0h */ case    2:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217BEE0h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217BEE0h case    2:*/		return 0x8217BEE4;
		  /* 8217BEE4h */ case    3:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8217BEE4h case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8217BEE4h case    3:*/		return 0x8217BEE8;
		  /* 8217BEE8h */ case    4:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217BEE8h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217BEE8h case    4:*/		return 0x8217BEEC;
		  /* 8217BEECh */ case    5:  		/* addi R11, R11, 1 */
		/* 8217BEECh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217BEECh case    5:*/		return 0x8217BEF0;
		  /* 8217BEF0h */ case    6:  		/* slw R9, R21, R9 */
		/* 8217BEF0h case    6:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R21,regs.R9);
		/* 8217BEF0h case    6:*/		return 0x8217BEF4;
		  /* 8217BEF4h */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217BEF4h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217BEF4h case    7:*/		return 0x8217BEF8;
		  /* 8217BEF8h */ case    8:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8217BEF8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8217BEF8h case    8:*/		return 0x8217BEFC;
		  /* 8217BEFCh */ case    9:  		/* and. R11, R9, R11 */
		/* 8217BEFCh case    9:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8217BEFCh case    9:*/		return 0x8217BF00;
		  /* 8217BF00h */ case   10:  		/* bc 12, CR0_EQ, -80 */
		/* 8217BF00h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217BEB0;  }
		/* 8217BF00h case   10:*/		return 0x8217BF04;
		  /* 8217BF04h */ case   11:  		/* mr R3, R31 */
		/* 8217BF04h case   11:*/		regs.R3 = regs.R31;
		/* 8217BF04h case   11:*/		return 0x8217BF08;
		  /* 8217BF08h */ case   12:  		/* bl -97736 */
		/* 8217BF08h case   12:*/		regs.LR = 0x8217BF0C; return 0x82164140;
		/* 8217BF08h case   12:*/		return 0x8217BF0C;
		  /* 8217BF0Ch */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217BF0Ch case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217BF0Ch case   13:*/		return 0x8217BF10;
		  /* 8217BF10h */ case   14:  		/* mr R3, R24 */
		/* 8217BF10h case   14:*/		regs.R3 = regs.R24;
		/* 8217BF10h case   14:*/		return 0x8217BF14;
		  /* 8217BF14h */ case   15:  		/* bc 4, CR0_EQ, 32 */
		/* 8217BF14h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8217BF34;  }
		/* 8217BF14h case   15:*/		return 0x8217BF18;
		  /* 8217BF18h */ case   16:  		/* li R4, 4800 */
		/* 8217BF18h case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217BF18h case   16:*/		return 0x8217BF1C;
		  /* 8217BF1Ch */ case   17:  		/* bl -172212 */
		/* 8217BF1Ch case   17:*/		regs.LR = 0x8217BF20; return 0x82151E68;
		/* 8217BF1Ch case   17:*/		return 0x8217BF20;
	}
	return 0x8217BF20;
} // Block from 8217BED8h-8217BF20h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8217BF20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BF20);
		  /* 8217BF20h */ case    0:  		/* li R4, 4800 */
		/* 8217BF20h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217BF20h case    0:*/		return 0x8217BF24;
		  /* 8217BF24h */ case    1:  		/* bl -172220 */
		/* 8217BF24h case    1:*/		regs.LR = 0x8217BF28; return 0x82151E68;
		/* 8217BF24h case    1:*/		return 0x8217BF28;
	}
	return 0x8217BF28;
} // Block from 8217BF20h-8217BF28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217BF28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BF28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BF28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BF28);
		  /* 8217BF28h */ case    0:  		/* li R4, 4800 */
		/* 8217BF28h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217BF28h case    0:*/		return 0x8217BF2C;
		  /* 8217BF2Ch */ case    1:  		/* mr R3, R24 */
		/* 8217BF2Ch case    1:*/		regs.R3 = regs.R24;
		/* 8217BF2Ch case    1:*/		return 0x8217BF30;
		  /* 8217BF30h */ case    2:  		/* bl -172232 */
		/* 8217BF30h case    2:*/		regs.LR = 0x8217BF34; return 0x82151E68;
		/* 8217BF30h case    2:*/		return 0x8217BF34;
	}
	return 0x8217BF34;
} // Block from 8217BF28h-8217BF34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217BF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BF34);
		  /* 8217BF34h */ case    0:  		/* mr R4, R31 */
		/* 8217BF34h case    0:*/		regs.R4 = regs.R31;
		/* 8217BF34h case    0:*/		return 0x8217BF38;
		  /* 8217BF38h */ case    1:  		/* bl -17128 */
		/* 8217BF38h case    1:*/		regs.LR = 0x8217BF3C; return 0x82177C50;
		/* 8217BF38h case    1:*/		return 0x8217BF3C;
		  /* 8217BF3Ch */ case    2:  		/* or. R30, R3, R3 */
		/* 8217BF3Ch case    2:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8217BF3Ch case    2:*/		return 0x8217BF40;
	}
	return 0x8217BF40;
} // Block from 8217BF34h-8217BF40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217BF40h
// Function '?InsertPredicateOp@Compiler@D3DXShader@@AAAPAVBlock@2@PAV32@00W4Opcode@2@PAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BF40);
		  /* 8217BF40h */ case    0:  		/* mr R3, R24 */
		/* 8217BF40h case    0:*/		regs.R3 = regs.R24;
		/* 8217BF40h case    0:*/		return 0x8217BF44;
		  /* 8217BF44h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8217BF44h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217BF50;  }
		/* 8217BF44h case    1:*/		return 0x8217BF48;
		  /* 8217BF48h */ case    2:  		/* li R4, 4800 */
		/* 8217BF48h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217BF48h case    2:*/		return 0x8217BF4C;
		  /* 8217BF4Ch */ case    3:  		/* bl -172260 */
		/* 8217BF4Ch case    3:*/		regs.LR = 0x8217BF50; return 0x82151E68;
		/* 8217BF4Ch case    3:*/		return 0x8217BF50;
	}
	return 0x8217BF50;
} // Block from 8217BF40h-8217BF50h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217BF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BF50);
		  /* 8217BF50h */ case    0:  		/* addi R31, R28, 24 */
		/* 8217BF50h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R28,0x18);
		/* 8217BF50h case    0:*/		return 0x8217BF54;
		  /* 8217BF54h */ case    1:  		/* li R8, 1 */
		/* 8217BF54h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217BF54h case    1:*/		return 0x8217BF58;
		  /* 8217BF58h */ case    2:  		/* mr R5, R31 */
		/* 8217BF58h case    2:*/		regs.R5 = regs.R31;
		/* 8217BF58h case    2:*/		return 0x8217BF5C;
		  /* 8217BF5Ch */ case    3:  		/* li R7, 0 */
		/* 8217BF5Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217BF5Ch case    3:*/		return 0x8217BF60;
		  /* 8217BF60h */ case    4:  		/* li R6, 120 */
		/* 8217BF60h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x78);
		/* 8217BF60h case    4:*/		return 0x8217BF64;
		  /* 8217BF64h */ case    5:  		/* mr R4, R28 */
		/* 8217BF64h case    5:*/		regs.R4 = regs.R28;
		/* 8217BF64h case    5:*/		return 0x8217BF68;
		  /* 8217BF68h */ case    6:  		/* bl 690736 */
		/* 8217BF68h case    6:*/		regs.LR = 0x8217BF6C; return 0x82224998;
		/* 8217BF68h case    6:*/		return 0x8217BF6C;
		  /* 8217BF6Ch */ case    7:  		/* mr R29, R3 */
		/* 8217BF6Ch case    7:*/		regs.R29 = regs.R3;
		/* 8217BF6Ch case    7:*/		return 0x8217BF70;
		  /* 8217BF70h */ case    8:  		/* li R8, 1 */
		/* 8217BF70h case    8:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217BF70h case    8:*/		return 0x8217BF74;
		  /* 8217BF74h */ case    9:  		/* li R7, 2 */
		/* 8217BF74h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 8217BF74h case    9:*/		return 0x8217BF78;
		  /* 8217BF78h */ case   10:  		/* li R6, 109 */
		/* 8217BF78h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x6D);
		/* 8217BF78h case   10:*/		return 0x8217BF7C;
		  /* 8217BF7Ch */ case   11:  		/* mr R5, R31 */
		/* 8217BF7Ch case   11:*/		regs.R5 = regs.R31;
		/* 8217BF7Ch case   11:*/		return 0x8217BF80;
		  /* 8217BF80h */ case   12:  		/* mr R4, R28 */
		/* 8217BF80h case   12:*/		regs.R4 = regs.R28;
		/* 8217BF80h case   12:*/		return 0x8217BF84;
		  /* 8217BF84h */ case   13:  		/* mr R3, R24 */
		/* 8217BF84h case   13:*/		regs.R3 = regs.R24;
		/* 8217BF84h case   13:*/		return 0x8217BF88;
		  /* 8217BF88h */ case   14:  		/* bl 690704 */
		/* 8217BF88h case   14:*/		regs.LR = 0x8217BF8C; return 0x82224998;
		/* 8217BF88h case   14:*/		return 0x8217BF8C;
		  /* 8217BF8Ch */ case   15:  		/* mr R31, R3 */
		/* 8217BF8Ch case   15:*/		regs.R31 = regs.R3;
		/* 8217BF8Ch case   15:*/		return 0x8217BF90;
		  /* 8217BF90h */ case   16:  		/* li R5, 0 */
		/* 8217BF90h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217BF90h case   16:*/		return 0x8217BF94;
		  /* 8217BF94h */ case   17:  		/* mr R4, R30 */
		/* 8217BF94h case   17:*/		regs.R4 = regs.R30;
		/* 8217BF94h case   17:*/		return 0x8217BF98;
		  /* 8217BF98h */ case   18:  		/* mr R3, R24 */
		/* 8217BF98h case   18:*/		regs.R3 = regs.R24;
		/* 8217BF98h case   18:*/		return 0x8217BF9C;
		  /* 8217BF9Ch */ case   19:  		/* bl -16012 */
		/* 8217BF9Ch case   19:*/		regs.LR = 0x8217BFA0; return 0x82178110;
		/* 8217BF9Ch case   19:*/		return 0x8217BFA0;
		  /* 8217BFA0h */ case   20:  		/* mr R4, R3 */
		/* 8217BFA0h case   20:*/		regs.R4 = regs.R3;
		/* 8217BFA0h case   20:*/		return 0x8217BFA4;
		  /* 8217BFA4h */ case   21:  		/* mr R3, R31 */
		/* 8217BFA4h case   21:*/		regs.R3 = regs.R31;
		/* 8217BFA4h case   21:*/		return 0x8217BFA8;
		  /* 8217BFA8h */ case   22:  		/* bl -15840 */
		/* 8217BFA8h case   22:*/		regs.LR = 0x8217BFAC; return 0x821781C8;
		/* 8217BFA8h case   22:*/		return 0x8217BFAC;
		  /* 8217BFACh */ case   23:  		/* stw R3, <#[R31 + 44]> */
		/* 8217BFACh case   23:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217BFACh case   23:*/		return 0x8217BFB0;
		  /* 8217BFB0h */ case   24:  		/* li R5, 0 */
		/* 8217BFB0h case   24:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217BFB0h case   24:*/		return 0x8217BFB4;
		  /* 8217BFB4h */ case   25:  		/* mr R4, R29 */
		/* 8217BFB4h case   25:*/		regs.R4 = regs.R29;
		/* 8217BFB4h case   25:*/		return 0x8217BFB8;
		  /* 8217BFB8h */ case   26:  		/* mr R3, R24 */
		/* 8217BFB8h case   26:*/		regs.R3 = regs.R24;
		/* 8217BFB8h case   26:*/		return 0x8217BFBC;
		  /* 8217BFBCh */ case   27:  		/* bl -16044 */
		/* 8217BFBCh case   27:*/		regs.LR = 0x8217BFC0; return 0x82178110;
		/* 8217BFBCh case   27:*/		return 0x8217BFC0;
		  /* 8217BFC0h */ case   28:  		/* mr R4, R3 */
		/* 8217BFC0h case   28:*/		regs.R4 = regs.R3;
		/* 8217BFC0h case   28:*/		return 0x8217BFC4;
		  /* 8217BFC4h */ case   29:  		/* mr R3, R31 */
		/* 8217BFC4h case   29:*/		regs.R3 = regs.R31;
		/* 8217BFC4h case   29:*/		return 0x8217BFC8;
		  /* 8217BFC8h */ case   30:  		/* bl -15872 */
		/* 8217BFC8h case   30:*/		regs.LR = 0x8217BFCC; return 0x821781C8;
		/* 8217BFC8h case   30:*/		return 0x8217BFCC;
		  /* 8217BFCCh */ case   31:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217BFCCh case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217BFCCh case   31:*/		return 0x8217BFD0;
		  /* 8217BFD0h */ case   32:  		/* rlwinm R10, R22, 0, 0, 30 */
		/* 8217BFD0h case   32:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R22);
		/* 8217BFD0h case   32:*/		return 0x8217BFD4;
		  /* 8217BFD4h */ case   33:  		/* stw R3, <#[R31 + 48]> */
		/* 8217BFD4h case   33:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 8217BFD4h case   33:*/		return 0x8217BFD8;
		  /* 8217BFD8h */ case   34:  		/* oris R11, R11, 32768 */
		/* 8217BFD8h case   34:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 8217BFD8h case   34:*/		return 0x8217BFDC;
		  /* 8217BFDCh */ case   35:  		/* stw R11, <#[R31 + 8]> */
		/* 8217BFDCh case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217BFDCh case   35:*/		return 0x8217BFE0;
		  /* 8217BFE0h */ case   36:  		/* lwz R11, <#[R10]> */
		/* 8217BFE0h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8217BFE0h case   36:*/		return 0x8217BFE4;
		  /* 8217BFE4h */ case   37:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217BFE4h case   37:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217BFE4h case   37:*/		return 0x8217BFE8;
		  /* 8217BFE8h */ case   38:  		/* bc 12, CR0_EQ, 12 */
		/* 8217BFE8h case   38:*/		if ( regs.CR[0].eq ) { return 0x8217BFF4;  }
		/* 8217BFE8h case   38:*/		return 0x8217BFEC;
		  /* 8217BFECh */ case   39:  		/* li R6, 0 */
		/* 8217BFECh case   39:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8217BFECh case   39:*/		return 0x8217BFF0;
		  /* 8217BFF0h */ case   40:  		/* b 12 */
		/* 8217BFF0h case   40:*/		return 0x8217BFFC;
		/* 8217BFF0h case   40:*/		return 0x8217BFF4;
	}
	return 0x8217BFF4;
} // Block from 8217BF50h-8217BFF4h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8217BFF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BFF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BFF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BFF4);
		  /* 8217BFF4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217BFF4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217BFF4h case    0:*/		return 0x8217BFF8;
		  /* 8217BFF8h */ case    1:  		/* addi R6, R11, -4 */
		/* 8217BFF8h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFFC);
		/* 8217BFF8h case    1:*/		return 0x8217BFFC;
	}
	return 0x8217BFFC;
} // Block from 8217BFF4h-8217BFFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217BFFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217BFFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217BFFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217BFFC);
		  /* 8217BFFCh */ case    0:  		/* mr R8, R30 */
		/* 8217BFFCh case    0:*/		regs.R8 = regs.R30;
		/* 8217BFFCh case    0:*/		return 0x8217C000;
		  /* 8217C000h */ case    1:  		/* li R7, 66 */
		/* 8217C000h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x42);
		/* 8217C000h case    1:*/		return 0x8217C004;
		  /* 8217C004h */ case    2:  		/* mr R5, R22 */
		/* 8217C004h case    2:*/		regs.R5 = regs.R22;
		/* 8217C004h case    2:*/		return 0x8217C008;
		  /* 8217C008h */ case    3:  		/* mr R4, R28 */
		/* 8217C008h case    3:*/		regs.R4 = regs.R28;
		/* 8217C008h case    3:*/		return 0x8217C00C;
		  /* 8217C00Ch */ case    4:  		/* mr R3, R24 */
		/* 8217C00Ch case    4:*/		regs.R3 = regs.R24;
		/* 8217C00Ch case    4:*/		return 0x8217C010;
		  /* 8217C010h */ case    5:  		/* bl -2408 */
		/* 8217C010h case    5:*/		regs.LR = 0x8217C014; return 0x8217B6A8;
		/* 8217C010h case    5:*/		return 0x8217C014;
	}
	return 0x8217C014;
} // Block from 8217BFFCh-8217C014h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C014);
		  /* 8217C014h */ case    0:  		/* lwz R30, <#[R20 + 36]> */
		/* 8217C014h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R20 + 0x00000024) );
		/* 8217C014h case    0:*/		return 0x8217C018;
		  /* 8217C018h */ case    1:  		/* addi R29, R20, 32 */
		/* 8217C018h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R20,0x20);
		/* 8217C018h case    1:*/		return 0x8217C01C;
		  /* 8217C01Ch */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8217C01Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8217C01Ch case    2:*/		return 0x8217C020;
		  /* 8217C020h */ case    3:  		/* bc 4, CR0_EQ, 72 */
		/* 8217C020h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217C068;  }
		/* 8217C020h case    3:*/		return 0x8217C024;
		  /* 8217C024h */ case    4:  		/* cmplwi CR0, R30, 0 */
		/* 8217C024h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R30,0x00000000);
		/* 8217C024h case    4:*/		return 0x8217C028;
	}
	return 0x8217C028;
} // Block from 8217C014h-8217C028h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217C028h
// Function '?InsertPredicateClear@Compiler@D3DXShader@@AAAXPAVInstruction@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C028( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C028) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C028);
		  /* 8217C028h */ case    0:  		/* bc 12, CR0_EQ, 64 */
		/* 8217C028h case    0:*/		if ( regs.CR[0].eq ) { return 0x8217C068;  }
		/* 8217C028h case    0:*/		return 0x8217C02C;
		  /* 8217C02Ch */ case    1:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217C02Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217C02Ch case    1:*/		return 0x8217C030;
		  /* 8217C030h */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217C030h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217C030h case    2:*/		return 0x8217C034;
		  /* 8217C034h */ case    3:  		/* cmplwi CR6, R11, 8320 */
		/* 8217C034h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002080);
		/* 8217C034h case    3:*/		return 0x8217C038;
		  /* 8217C038h */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 8217C038h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8217C050;  }
		/* 8217C038h case    4:*/		return 0x8217C03C;
		  /* 8217C03Ch */ case    5:  		/* mr R4, R30 */
		/* 8217C03Ch case    5:*/		regs.R4 = regs.R30;
		/* 8217C03Ch case    5:*/		return 0x8217C040;
		  /* 8217C040h */ case    6:  		/* mr R3, R24 */
		/* 8217C040h case    6:*/		regs.R3 = regs.R24;
		/* 8217C040h case    6:*/		return 0x8217C044;
		  /* 8217C044h */ case    7:  		/* bl -17396 */
		/* 8217C044h case    7:*/		regs.LR = 0x8217C048; return 0x82177C50;
		/* 8217C044h case    7:*/		return 0x8217C048;
		  /* 8217C048h */ case    8:  		/* cmplw CR6, R3, R31 */
		/* 8217C048h case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R31);
		/* 8217C048h case    8:*/		return 0x8217C04C;
		  /* 8217C04Ch */ case    9:  		/* bc 12, CR6_EQ, 404 */
		/* 8217C04Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8217C1E0;  }
		/* 8217C04Ch case    9:*/		return 0x8217C050;
	}
	return 0x8217C050;
} // Block from 8217C028h-8217C050h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217C050h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C050);
		  /* 8217C050h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217C050h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217C050h case    0:*/		return 0x8217C054;
		  /* 8217C054h */ case    1:  		/* lwz R30, <#[R11 + 40]> */
		/* 8217C054h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000028) );
		/* 8217C054h case    1:*/		return 0x8217C058;
		  /* 8217C058h */ case    2:  		/* rlwinm. R11, R30, 0, 31, 31 */
		/* 8217C058h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R30);
		/* 8217C058h case    2:*/		return 0x8217C05C;
		  /* 8217C05Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217C05Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217C068;  }
		/* 8217C05Ch case    3:*/		return 0x8217C060;
		  /* 8217C060h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 8217C060h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217C060h case    4:*/		return 0x8217C064;
		  /* 8217C064h */ case    5:  		/* bc 4, CR6_EQ, -56 */
		/* 8217C064h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217C02C;  }
		/* 8217C064h case    5:*/		return 0x8217C068;
	}
	return 0x8217C068;
} // Block from 8217C050h-8217C068h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C068);
		  /* 8217C068h */ case    0:  		/* li R8, 1 */
		/* 8217C068h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217C068h case    0:*/		return 0x8217C06C;
		  /* 8217C06Ch */ case    1:  		/* li R7, 0 */
		/* 8217C06Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217C06Ch case    1:*/		return 0x8217C070;
		  /* 8217C070h */ case    2:  		/* li R6, 65 */
		/* 8217C070h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x41);
		/* 8217C070h case    2:*/		return 0x8217C074;
		  /* 8217C074h */ case    3:  		/* li R5, 0 */
		/* 8217C074h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217C074h case    3:*/		return 0x8217C078;
		  /* 8217C078h */ case    4:  		/* mr R4, R20 */
		/* 8217C078h case    4:*/		regs.R4 = regs.R20;
		/* 8217C078h case    4:*/		return 0x8217C07C;
		  /* 8217C07Ch */ case    5:  		/* mr R3, R24 */
		/* 8217C07Ch case    5:*/		regs.R3 = regs.R24;
		/* 8217C07Ch case    5:*/		return 0x8217C080;
		  /* 8217C080h */ case    6:  		/* bl 690456 */
		/* 8217C080h case    6:*/		regs.LR = 0x8217C084; return 0x82224998;
		/* 8217C080h case    6:*/		return 0x8217C084;
		  /* 8217C084h */ case    7:  		/* mr R30, R3 */
		/* 8217C084h case    7:*/		regs.R30 = regs.R3;
		/* 8217C084h case    7:*/		return 0x8217C088;
		  /* 8217C088h */ case    8:  		/* mr R4, R31 */
		/* 8217C088h case    8:*/		regs.R4 = regs.R31;
		/* 8217C088h case    8:*/		return 0x8217C08C;
		  /* 8217C08Ch */ case    9:  		/* mr R3, R24 */
		/* 8217C08Ch case    9:*/		regs.R3 = regs.R24;
		/* 8217C08Ch case    9:*/		return 0x8217C090;
		  /* 8217C090h */ case   10:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217C090h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217C090h case   10:*/		return 0x8217C094;
		  /* 8217C094h */ case   11:  		/* oris R11, R11, 6 */
		/* 8217C094h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x6);
		/* 8217C094h case   11:*/		return 0x8217C098;
		  /* 8217C098h */ case   12:  		/* stw R11, <#[R30 + 8]> */
		/* 8217C098h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217C098h case   12:*/		return 0x8217C09C;
		  /* 8217C09Ch */ case   13:  		/* bl -16540 */
		/* 8217C09Ch case   13:*/		regs.LR = 0x8217C0A0; return 0x82178000;
		/* 8217C09Ch case   13:*/		return 0x8217C0A0;
		  /* 8217C0A0h */ case   14:  		/* mr R4, R3 */
		/* 8217C0A0h case   14:*/		regs.R4 = regs.R3;
		/* 8217C0A0h case   14:*/		return 0x8217C0A4;
		  /* 8217C0A4h */ case   15:  		/* mr R3, R30 */
		/* 8217C0A4h case   15:*/		regs.R3 = regs.R30;
		/* 8217C0A4h case   15:*/		return 0x8217C0A8;
		  /* 8217C0A8h */ case   16:  		/* bl -16096 */
		/* 8217C0A8h case   16:*/		regs.LR = 0x8217C0AC; return 0x821781C8;
		/* 8217C0A8h case   16:*/		return 0x8217C0AC;
		  /* 8217C0ACh */ case   17:  		/* mr R3, R31 */
		/* 8217C0ACh case   17:*/		regs.R3 = regs.R31;
		/* 8217C0ACh case   17:*/		return 0x8217C0B0;
		  /* 8217C0B0h */ case   18:  		/* bl -98160 */
		/* 8217C0B0h case   18:*/		regs.LR = 0x8217C0B4; return 0x82164140;
		/* 8217C0B0h case   18:*/		return 0x8217C0B4;
		  /* 8217C0B4h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C0B4h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C0B4h case   19:*/		return 0x8217C0B8;
		  /* 8217C0B8h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 8217C0B8h case   20:*/		if ( regs.CR[0].eq ) { return 0x8217C0C8;  }
		/* 8217C0B8h case   20:*/		return 0x8217C0BC;
		  /* 8217C0BCh */ case   21:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217C0BCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217C0BCh case   21:*/		return 0x8217C0C0;
		  /* 8217C0C0h */ case   22:  		/* oris R11, R11, 32768 */
		/* 8217C0C0h case   22:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 8217C0C0h case   22:*/		return 0x8217C0C4;
		  /* 8217C0C4h */ case   23:  		/* stw R11, <#[R31 + 8]> */
		/* 8217C0C4h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217C0C4h case   23:*/		return 0x8217C0C8;
	}
	return 0x8217C0C8;
} // Block from 8217C068h-8217C0C8h (24 instructions)

//////////////////////////////////////////////////////
// Block at 8217C0C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C0C8);
		  /* 8217C0C8h */ case    0:  		/* mr R31, R20 */
		/* 8217C0C8h case    0:*/		regs.R31 = regs.R20;
		/* 8217C0C8h case    0:*/		return 0x8217C0CC;
		  /* 8217C0CCh */ case    1:  		/* lwz R11, <#[R31 + 12]> */
		/* 8217C0CCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8217C0CCh case    1:*/		return 0x8217C0D0;
		  /* 8217C0D0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8217C0D0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C0D0h case    2:*/		return 0x8217C0D4;
		  /* 8217C0D4h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 8217C0D4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217C0E8;  }
		/* 8217C0D4h case    3:*/		return 0x8217C0D8;
		  /* 8217C0D8h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217C0D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217C0D8h case    4:*/		return 0x8217C0DC;
		  /* 8217C0DCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217C0DCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C0DCh case    5:*/		return 0x8217C0E0;
		  /* 8217C0E0h */ case    6:  		/* mr R11, R21 */
		/* 8217C0E0h case    6:*/		regs.R11 = regs.R21;
		/* 8217C0E0h case    6:*/		return 0x8217C0E4;
		  /* 8217C0E4h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 8217C0E4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x8217C0EC;  }
		/* 8217C0E4h case    7:*/		return 0x8217C0E8;
	}
	return 0x8217C0E8;
} // Block from 8217C0C8h-8217C0E8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217C0E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C0E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C0E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C0E8);
		  /* 8217C0E8h */ case    0:  		/* li R11, 0 */
		/* 8217C0E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217C0E8h case    0:*/		return 0x8217C0EC;
	}
	return 0x8217C0EC;
} // Block from 8217C0E8h-8217C0ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C0EC);
		  /* 8217C0ECh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217C0ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217C0ECh case    0:*/		return 0x8217C0F0;
		  /* 8217C0F0h */ case    1:  		/* bc 4, CR0_EQ, 48 */
		/* 8217C0F0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217C120;  }
		/* 8217C0F0h case    1:*/		return 0x8217C0F4;
		  /* 8217C0F4h */ case    2:  		/* mr R4, R31 */
		/* 8217C0F4h case    2:*/		regs.R4 = regs.R31;
		/* 8217C0F4h case    2:*/		return 0x8217C0F8;
		  /* 8217C0F8h */ case    3:  		/* mr R3, R24 */
		/* 8217C0F8h case    3:*/		regs.R3 = regs.R24;
		/* 8217C0F8h case    3:*/		return 0x8217C0FC;
		  /* 8217C0FCh */ case    4:  		/* bl -14476 */
		/* 8217C0FCh case    4:*/		regs.LR = 0x8217C100; return 0x82178870;
		/* 8217C0FCh case    4:*/		return 0x8217C100;
		  /* 8217C100h */ case    5:  		/* or. R4, R3, R3 */
		/* 8217C100h case    5:*/		cpu::op::or<1>(regs,&regs.R4,regs.R3,regs.R3);
		/* 8217C100h case    5:*/		return 0x8217C104;
		  /* 8217C104h */ case    6:  		/* bc 12, CR0_EQ, 28 */
		/* 8217C104h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217C120;  }
		/* 8217C104h case    6:*/		return 0x8217C108;
		  /* 8217C108h */ case    7:  		/* lwz R11, <#[R4 + 8]> */
		/* 8217C108h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8217C108h case    7:*/		return 0x8217C10C;
		  /* 8217C10Ch */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217C10Ch case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217C10Ch case    8:*/		return 0x8217C110;
		  /* 8217C110h */ case    9:  		/* cmplwi CR6, R11, 10880 */
		/* 8217C110h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 8217C110h case    9:*/		return 0x8217C114;
		  /* 8217C114h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 8217C114h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8217C120;  }
		/* 8217C114h case   10:*/		return 0x8217C118;
		  /* 8217C118h */ case   11:  		/* mr R3, R24 */
		/* 8217C118h case   11:*/		regs.R3 = regs.R24;
		/* 8217C118h case   11:*/		return 0x8217C11C;
		  /* 8217C11Ch */ case   12:  		/* bl 718132 */
		/* 8217C11Ch case   12:*/		regs.LR = 0x8217C120; return 0x8222B650;
		/* 8217C11Ch case   12:*/		return 0x8217C120;
	}
	return 0x8217C120;
} // Block from 8217C0ECh-8217C120h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217C120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C120);
		  /* 8217C120h */ case    0:  		/* lwz R31, <#[R31 + 52]> */
		/* 8217C120h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000034) );
		/* 8217C120h case    0:*/		return 0x8217C124;
		  /* 8217C124h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8217C124h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217C124h case    1:*/		return 0x8217C128;
		  /* 8217C128h */ case    2:  		/* bc 4, CR6_EQ, -92 */
		/* 8217C128h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217C0CC;  }
		/* 8217C128h case    2:*/		return 0x8217C12C;
		  /* 8217C12Ch */ case    3:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217C12Ch case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217C12Ch case    3:*/		return 0x8217C130;
		  /* 8217C130h */ case    4:  		/* lwz R9, <#[R29]> */
		/* 8217C130h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 8217C130h case    4:*/		return 0x8217C134;
		  /* 8217C134h */ case    5:  		/* addi R10, R29, -36 */
		/* 8217C134h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0xFFFFFFDC);
		/* 8217C134h case    5:*/		return 0x8217C138;
	}
	return 0x8217C138;
} // Block from 8217C120h-8217C138h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C138h
// Function '?ClearNestedPredicateStack@Compiler@D3DXShader@@AAAPAVBlock@2@PAV32@PAVInstruction@2@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C138);
		  /* 8217C138h */ case    0:  		/* addi R11, R11, 36 */
		/* 8217C138h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217C138h case    0:*/		return 0x8217C13C;
		  /* 8217C13Ch */ case    1:  		/* ori R8, R10, 1 */
		/* 8217C13Ch case    1:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R10,0x1);
		/* 8217C13Ch case    1:*/		return 0x8217C140;
		  /* 8217C140h */ case    2:  		/* addi R7, R11, -36 */
		/* 8217C140h case    2:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8217C140h case    2:*/		return 0x8217C144;
		  /* 8217C144h */ case    3:  		/* addi R10, R11, 4 */
		/* 8217C144h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217C144h case    3:*/		return 0x8217C148;
		  /* 8217C148h */ case    4:  		/* mr R3, R24 */
		/* 8217C148h case    4:*/		regs.R3 = regs.R24;
		/* 8217C148h case    4:*/		return 0x8217C14C;
		  /* 8217C14Ch */ case    5:  		/* stw R9, <#[R11]> */
		/* 8217C14Ch case    5:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C14Ch case    5:*/		return 0x8217C150;
		  /* 8217C150h */ case    6:  		/* lwz R9, <#[R29]> */
		/* 8217C150h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 8217C150h case    6:*/		return 0x8217C154;
		  /* 8217C154h */ case    7:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217C154h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217C154h case    7:*/		return 0x8217C158;
		  /* 8217C158h */ case    8:  		/* stw R7, <#[R9]> */
		/* 8217C158h case    8:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 8217C158h case    8:*/		return 0x8217C15C;
		  /* 8217C15Ch */ case    9:  		/* stw R8, <#[R11 + 4]> */
		/* 8217C15Ch case    9:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C15Ch case    9:*/		return 0x8217C160;
		  /* 8217C160h */ case   10:  		/* stw R10, <#[R29]> */
		/* 8217C160h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8217C160h case   10:*/		return 0x8217C164;
		  /* 8217C164h */ case   11:  		/* lwz R4, <#[R20 + 96]> */
		/* 8217C164h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R20 + 0x00000060) );
		/* 8217C164h case   11:*/		return 0x8217C168;
		  /* 8217C168h */ case   12:  		/* cmplwi CR6, R4, 0 */
		/* 8217C168h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8217C168h case   12:*/		return 0x8217C16C;
		  /* 8217C16Ch */ case   13:  		/* bc 4, CR6_EQ, 52 */
		/* 8217C16Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x8217C1A0;  }
		/* 8217C16Ch case   13:*/		return 0x8217C170;
		  /* 8217C170h */ case   14:  		/* li R8, 0 */
		/* 8217C170h case   14:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217C170h case   14:*/		return 0x8217C174;
		  /* 8217C174h */ case   15:  		/* li R7, 0 */
		/* 8217C174h case   15:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217C174h case   15:*/		return 0x8217C178;
		  /* 8217C178h */ case   16:  		/* li R6, 120 */
		/* 8217C178h case   16:*/		cpu::op::li<0>(regs,&regs.R6,0x78);
		/* 8217C178h case   16:*/		return 0x8217C17C;
		  /* 8217C17Ch */ case   17:  		/* addi R5, R20, 24 */
		/* 8217C17Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R20,0x18);
		/* 8217C17Ch case   17:*/		return 0x8217C180;
		  /* 8217C180h */ case   18:  		/* mr R4, R20 */
		/* 8217C180h case   18:*/		regs.R4 = regs.R20;
		/* 8217C180h case   18:*/		return 0x8217C184;
		  /* 8217C184h */ case   19:  		/* bl 690196 */
		/* 8217C184h case   19:*/		regs.LR = 0x8217C188; return 0x82224998;
		/* 8217C184h case   19:*/		return 0x8217C188;
		  /* 8217C188h */ case   20:  		/* mr R11, R3 */
		/* 8217C188h case   20:*/		regs.R11 = regs.R3;
		/* 8217C188h case   20:*/		return 0x8217C18C;
		  /* 8217C18Ch */ case   21:  		/* mr R3, R24 */
		/* 8217C18Ch case   21:*/		regs.R3 = regs.R24;
		/* 8217C18Ch case   21:*/		return 0x8217C190;
		  /* 8217C190h */ case   22:  		/* mr R4, R11 */
		/* 8217C190h case   22:*/		regs.R4 = regs.R11;
		/* 8217C190h case   22:*/		return 0x8217C194;
		  /* 8217C194h */ case   23:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217C194h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217C194h case   23:*/		return 0x8217C198;
		  /* 8217C198h */ case   24:  		/* ori R10, R10, 64 */
		/* 8217C198h case   24:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x40);
		/* 8217C198h case   24:*/		return 0x8217C19C;
		  /* 8217C19Ch */ case   25:  		/* stw R10, <#[R11 + 8]> */
		/* 8217C19Ch case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217C19Ch case   25:*/		return 0x8217C1A0;
	}
	return 0x8217C1A0;
} // Block from 8217C138h-8217C1A0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8217C1A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C1A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C1A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C1A0);
		  /* 8217C1A0h */ case    0:  		/* li R5, 7 */
		/* 8217C1A0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x7);
		/* 8217C1A0h case    0:*/		return 0x8217C1A4;
		  /* 8217C1A4h */ case    1:  		/* bl -47700 */
		/* 8217C1A4h case    1:*/		regs.LR = 0x8217C1A8; return 0x82170750;
		/* 8217C1A4h case    1:*/		return 0x8217C1A8;
		  /* 8217C1A8h */ case    2:  		/* mr R4, R3 */
		/* 8217C1A8h case    2:*/		regs.R4 = regs.R3;
		/* 8217C1A8h case    2:*/		return 0x8217C1AC;
		  /* 8217C1ACh */ case    3:  		/* mr R3, R30 */
		/* 8217C1ACh case    3:*/		regs.R3 = regs.R30;
		/* 8217C1ACh case    3:*/		return 0x8217C1B0;
		  /* 8217C1B0h */ case    4:  		/* bl -16360 */
		/* 8217C1B0h case    4:*/		regs.LR = 0x8217C1B4; return 0x821781C8;
		/* 8217C1B0h case    4:*/		return 0x8217C1B4;
		  /* 8217C1B4h */ case    5:  		/* lwz R5, <#[R20 + 96]> */
		/* 8217C1B4h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R20 + 0x00000060) );
		/* 8217C1B4h case    5:*/		return 0x8217C1B8;
		  /* 8217C1B8h */ case    6:  		/* cmplwi CR6, R5, 0 */
		/* 8217C1B8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 8217C1B8h case    6:*/		return 0x8217C1BC;
		  /* 8217C1BCh */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 8217C1BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x8217C1D0;  }
		/* 8217C1BCh case    7:*/		return 0x8217C1C0;
		  /* 8217C1C0h */ case    8:  		/* mr R6, R24 */
		/* 8217C1C0h case    8:*/		regs.R6 = regs.R24;
		/* 8217C1C0h case    8:*/		return 0x8217C1C4;
		  /* 8217C1C4h */ case    9:  		/* li R4, 1 */
		/* 8217C1C4h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217C1C4h case    9:*/		return 0x8217C1C8;
		  /* 8217C1C8h */ case   10:  		/* mr R3, R30 */
		/* 8217C1C8h case   10:*/		regs.R3 = regs.R30;
		/* 8217C1C8h case   10:*/		return 0x8217C1CC;
		  /* 8217C1CCh */ case   11:  		/* bl -14420 */
		/* 8217C1CCh case   11:*/		regs.LR = 0x8217C1D0; return 0x82178978;
		/* 8217C1CCh case   11:*/		return 0x8217C1D0;
	}
	return 0x8217C1D0;
} // Block from 8217C1A0h-8217C1D0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217C1D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C1D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C1D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C1D0);
		  /* 8217C1D0h */ case    0:  		/* stw R30, <#[R20 + 96]> */
		/* 8217C1D0h case    0:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R20 + 0x00000060) );
		/* 8217C1D0h case    0:*/		return 0x8217C1D4;
		  /* 8217C1D4h */ case    1:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217C1D4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217C1D4h case    1:*/		return 0x8217C1D8;
		  /* 8217C1D8h */ case    2:  		/* oris R11, R11, 512 */
		/* 8217C1D8h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8217C1D8h case    2:*/		return 0x8217C1DC;
		  /* 8217C1DCh */ case    3:  		/* stw R11, <#[R30 + 8]> */
		/* 8217C1DCh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217C1DCh case    3:*/		return 0x8217C1E0;
	}
	return 0x8217C1E0;
} // Block from 8217C1D0h-8217C1E0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217C1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C1E0);
		  /* 8217C1E0h */ case    0:  		/* addi R1, R1, 192 */
		/* 8217C1E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8217C1E0h case    0:*/		return 0x8217C1E4;
		  /* 8217C1E4h */ case    1:  		/* b -962396 */
		/* 8217C1E4h case    1:*/		return 0x82091288;
		/* 8217C1E4h case    1:*/		return 0x8217C1E8;
	}
	return 0x8217C1E8;
} // Block from 8217C1E0h-8217C1E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C1E8);
		  /* 8217C1E8h */ case    0:  		/* mfspr R12, LR */
		/* 8217C1E8h case    0:*/		regs.R12 = regs.LR;
		/* 8217C1E8h case    0:*/		return 0x8217C1EC;
		  /* 8217C1ECh */ case    1:  		/* bl -962460 */
		/* 8217C1ECh case    1:*/		regs.LR = 0x8217C1F0; return 0x82091250;
		/* 8217C1ECh case    1:*/		return 0x8217C1F0;
		  /* 8217C1F0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8217C1F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8217C1F0h case    2:*/		return 0x8217C1F4;
		  /* 8217C1F4h */ case    3:  		/* lhz R4, <#[R4 + 18]> */
		/* 8217C1F4h case    3:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R4 + 0x00000012) );
		/* 8217C1F4h case    3:*/		return 0x8217C1F8;
		  /* 8217C1F8h */ case    4:  		/* mr R31, R3 */
		/* 8217C1F8h case    4:*/		regs.R31 = regs.R3;
		/* 8217C1F8h case    4:*/		return 0x8217C1FC;
		  /* 8217C1FCh */ case    5:  		/* mr R26, R5 */
		/* 8217C1FCh case    5:*/		regs.R26 = regs.R5;
		/* 8217C1FCh case    5:*/		return 0x8217C200;
		  /* 8217C200h */ case    6:  		/* mr R29, R6 */
		/* 8217C200h case    6:*/		regs.R29 = regs.R6;
		/* 8217C200h case    6:*/		return 0x8217C204;
		  /* 8217C204h */ case    7:  		/* mr R28, R7 */
		/* 8217C204h case    7:*/		regs.R28 = regs.R7;
		/* 8217C204h case    7:*/		return 0x8217C208;
		  /* 8217C208h */ case    8:  		/* mr R27, R8 */
		/* 8217C208h case    8:*/		regs.R27 = regs.R8;
		/* 8217C208h case    8:*/		return 0x8217C20C;
		  /* 8217C20Ch */ case    9:  		/* bl 30548 */
		/* 8217C20Ch case    9:*/		regs.LR = 0x8217C210; return 0x82183960;
		/* 8217C20Ch case    9:*/		return 0x8217C210;
		  /* 8217C210h */ case   10:  		/* mr R4, R3 */
		/* 8217C210h case   10:*/		regs.R4 = regs.R3;
		/* 8217C210h case   10:*/		return 0x8217C214;
		  /* 8217C214h */ case   11:  		/* mr R3, R31 */
		/* 8217C214h case   11:*/		regs.R3 = regs.R31;
		/* 8217C214h case   11:*/		return 0x8217C218;
		  /* 8217C218h */ case   12:  		/* bl 31664 */
		/* 8217C218h case   12:*/		regs.LR = 0x8217C21C; return 0x82183DC8;
		/* 8217C218h case   12:*/		return 0x8217C21C;
		  /* 8217C21Ch */ case   13:  		/* mr R30, R3 */
		/* 8217C21Ch case   13:*/		regs.R30 = regs.R3;
		/* 8217C21Ch case   13:*/		return 0x8217C220;
		  /* 8217C220h */ case   14:  		/* mr R4, R3 */
		/* 8217C220h case   14:*/		regs.R4 = regs.R3;
		/* 8217C220h case   14:*/		return 0x8217C224;
		  /* 8217C224h */ case   15:  		/* mr R5, R26 */
		/* 8217C224h case   15:*/		regs.R5 = regs.R26;
		/* 8217C224h case   15:*/		return 0x8217C228;
		  /* 8217C228h */ case   16:  		/* mr R3, R31 */
		/* 8217C228h case   16:*/		regs.R3 = regs.R31;
		/* 8217C228h case   16:*/		return 0x8217C22C;
		  /* 8217C22Ch */ case   17:  		/* bl -12084 */
		/* 8217C22Ch case   17:*/		regs.LR = 0x8217C230; return 0x821792F8;
		/* 8217C22Ch case   17:*/		return 0x8217C230;
		  /* 8217C230h */ case   18:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C230h case   18:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C230h case   18:*/		return 0x8217C234;
		  /* 8217C234h */ case   19:  		/* bc 12, CR0_EQ, 12 */
		/* 8217C234h case   19:*/		if ( regs.CR[0].eq ) { return 0x8217C240;  }
		/* 8217C234h case   19:*/		return 0x8217C238;
		  /* 8217C238h */ case   20:  		/* li R3, 1 */
		/* 8217C238h case   20:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8217C238h case   20:*/		return 0x8217C23C;
		  /* 8217C23Ch */ case   21:  		/* b 80 */
		/* 8217C23Ch case   21:*/		return 0x8217C28C;
		/* 8217C23Ch case   21:*/		return 0x8217C240;
	}
	return 0x8217C240;
} // Block from 8217C1E8h-8217C240h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217C240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C240);
		  /* 8217C240h */ case    0:  		/* mr R5, R29 */
		/* 8217C240h case    0:*/		regs.R5 = regs.R29;
		/* 8217C240h case    0:*/		return 0x8217C244;
		  /* 8217C244h */ case    1:  		/* mr R4, R30 */
		/* 8217C244h case    1:*/		regs.R4 = regs.R30;
		/* 8217C244h case    1:*/		return 0x8217C248;
		  /* 8217C248h */ case    2:  		/* mr R3, R31 */
		/* 8217C248h case    2:*/		regs.R3 = regs.R31;
		/* 8217C248h case    2:*/		return 0x8217C24C;
		  /* 8217C24Ch */ case    3:  		/* bl -12116 */
		/* 8217C24Ch case    3:*/		regs.LR = 0x8217C250; return 0x821792F8;
		/* 8217C24Ch case    3:*/		return 0x8217C250;
		  /* 8217C250h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C250h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C250h case    4:*/		return 0x8217C254;
		  /* 8217C254h */ case    5:  		/* bc 4, CR0_EQ, -28 */
		/* 8217C254h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217C238;  }
		/* 8217C254h case    5:*/		return 0x8217C258;
		  /* 8217C258h */ case    6:  		/* mr R5, R28 */
		/* 8217C258h case    6:*/		regs.R5 = regs.R28;
		/* 8217C258h case    6:*/		return 0x8217C25C;
		  /* 8217C25Ch */ case    7:  		/* mr R4, R30 */
		/* 8217C25Ch case    7:*/		regs.R4 = regs.R30;
		/* 8217C25Ch case    7:*/		return 0x8217C260;
		  /* 8217C260h */ case    8:  		/* mr R3, R31 */
		/* 8217C260h case    8:*/		regs.R3 = regs.R31;
		/* 8217C260h case    8:*/		return 0x8217C264;
		  /* 8217C264h */ case    9:  		/* bl -12140 */
		/* 8217C264h case    9:*/		regs.LR = 0x8217C268; return 0x821792F8;
		/* 8217C264h case    9:*/		return 0x8217C268;
		  /* 8217C268h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C268h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C268h case   10:*/		return 0x8217C26C;
		  /* 8217C26Ch */ case   11:  		/* bc 4, CR0_EQ, -52 */
		/* 8217C26Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x8217C238;  }
		/* 8217C26Ch case   11:*/		return 0x8217C270;
		  /* 8217C270h */ case   12:  		/* mr R5, R27 */
		/* 8217C270h case   12:*/		regs.R5 = regs.R27;
		/* 8217C270h case   12:*/		return 0x8217C274;
		  /* 8217C274h */ case   13:  		/* mr R4, R30 */
		/* 8217C274h case   13:*/		regs.R4 = regs.R30;
		/* 8217C274h case   13:*/		return 0x8217C278;
		  /* 8217C278h */ case   14:  		/* mr R3, R31 */
		/* 8217C278h case   14:*/		regs.R3 = regs.R31;
		/* 8217C278h case   14:*/		return 0x8217C27C;
		  /* 8217C27Ch */ case   15:  		/* bl -12164 */
		/* 8217C27Ch case   15:*/		regs.LR = 0x8217C280; return 0x821792F8;
		/* 8217C27Ch case   15:*/		return 0x8217C280;
		  /* 8217C280h */ case   16:  		/* rlwinm R11, R3, 0, 24, 31 */
		/* 8217C280h case   16:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C280h case   16:*/		return 0x8217C284;
		  /* 8217C284h */ case   17:  		/* addic R10, R11, -1 */
		/* 8217C284h case   17:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8217C284h case   17:*/		return 0x8217C288;
		  /* 8217C288h */ case   18:  		/* subfe R3, R10, R11 */
		/* 8217C288h case   18:*/		cpu::op::subfe<0>(regs,&regs.R3,regs.R10,regs.R11);
		/* 8217C288h case   18:*/		return 0x8217C28C;
	}
	return 0x8217C28C;
} // Block from 8217C240h-8217C28Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8217C28Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C28C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C28C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C28C);
		  /* 8217C28Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8217C28Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217C28Ch case    0:*/		return 0x8217C290;
		  /* 8217C290h */ case    1:  		/* b -962544 */
		/* 8217C290h case    1:*/		return 0x820912A0;
		/* 8217C290h case    1:*/		return 0x8217C294;
		  /* 8217C294h */ case    2:  		/* nop */
		/* 8217C294h case    2:*/		cpu::op::nop();
		/* 8217C294h case    2:*/		return 0x8217C298;
	}
	return 0x8217C298;
} // Block from 8217C28Ch-8217C298h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217C298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C298);
		  /* 8217C298h */ case    0:  		/* mfspr R12, LR */
		/* 8217C298h case    0:*/		regs.R12 = regs.LR;
		/* 8217C298h case    0:*/		return 0x8217C29C;
		  /* 8217C29Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8217C29Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8217C29Ch case    1:*/		return 0x8217C2A0;
		  /* 8217C2A0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8217C2A0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8217C2A0h case    2:*/		return 0x8217C2A4;
		  /* 8217C2A4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8217C2A4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8217C2A4h case    3:*/		return 0x8217C2A8;
		  /* 8217C2A8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8217C2A8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8217C2A8h case    4:*/		return 0x8217C2AC;
		  /* 8217C2ACh */ case    5:  		/* li R6, 0 */
		/* 8217C2ACh case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8217C2ACh case    5:*/		return 0x8217C2B0;
		  /* 8217C2B0h */ case    6:  		/* mr R31, R3 */
		/* 8217C2B0h case    6:*/		regs.R31 = regs.R3;
		/* 8217C2B0h case    6:*/		return 0x8217C2B4;
		  /* 8217C2B4h */ case    7:  		/* mr R30, R4 */
		/* 8217C2B4h case    7:*/		regs.R30 = regs.R4;
		/* 8217C2B4h case    7:*/		return 0x8217C2B8;
		  /* 8217C2B8h */ case    8:  		/* bl 328520 */
		/* 8217C2B8h case    8:*/		regs.LR = 0x8217C2BC; return 0x821CC600;
		/* 8217C2B8h case    8:*/		return 0x8217C2BC;
		  /* 8217C2BCh */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C2BCh case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C2BCh case    9:*/		return 0x8217C2C0;
		  /* 8217C2C0h */ case   10:  		/* bc 4, CR0_EQ, 12 */
		/* 8217C2C0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8217C2CC;  }
		/* 8217C2C0h case   10:*/		return 0x8217C2C4;
		  /* 8217C2C4h */ case   11:  		/* li R3, 0 */
		/* 8217C2C4h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217C2C4h case   11:*/		return 0x8217C2C8;
		  /* 8217C2C8h */ case   12:  		/* b 20 */
		/* 8217C2C8h case   12:*/		return 0x8217C2DC;
		/* 8217C2C8h case   12:*/		return 0x8217C2CC;
	}
	return 0x8217C2CC;
} // Block from 8217C298h-8217C2CCh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217C2CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C2CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C2CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C2CC);
		  /* 8217C2CCh */ case    0:  		/* mr R4, R30 */
		/* 8217C2CCh case    0:*/		regs.R4 = regs.R30;
		/* 8217C2CCh case    0:*/		return 0x8217C2D0;
		  /* 8217C2D0h */ case    1:  		/* mr R3, R31 */
		/* 8217C2D0h case    1:*/		regs.R3 = regs.R31;
		/* 8217C2D0h case    1:*/		return 0x8217C2D4;
		  /* 8217C2D4h */ case    2:  		/* bl -12100 */
		/* 8217C2D4h case    2:*/		regs.LR = 0x8217C2D8; return 0x82179390;
		/* 8217C2D4h case    2:*/		return 0x8217C2D8;
		  /* 8217C2D8h */ case    3:  		/* li R3, 1 */
		/* 8217C2D8h case    3:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8217C2D8h case    3:*/		return 0x8217C2DC;
	}
	return 0x8217C2DC;
} // Block from 8217C2CCh-8217C2DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217C2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C2DC);
		  /* 8217C2DCh */ case    0:  		/* addi R1, R1, 112 */
		/* 8217C2DCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8217C2DCh case    0:*/		return 0x8217C2E0;
		  /* 8217C2E0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8217C2E0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8217C2E0h case    1:*/		return 0x8217C2E4;
		  /* 8217C2E4h */ case    2:  		/* mtspr LR, R12 */
		/* 8217C2E4h case    2:*/		regs.LR = regs.R12;
		/* 8217C2E4h case    2:*/		return 0x8217C2E8;
		  /* 8217C2E8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8217C2E8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8217C2E8h case    3:*/		return 0x8217C2EC;
		  /* 8217C2ECh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8217C2ECh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8217C2ECh case    4:*/		return 0x8217C2F0;
		  /* 8217C2F0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8217C2F0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8217C2F0h case    5:*/		return 0x8217C2F4;
	}
	return 0x8217C2F4;
} // Block from 8217C2DCh-8217C2F4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C2F4);
		  /* 8217C2F4h */ case    0:  		/* nop */
		/* 8217C2F4h case    0:*/		cpu::op::nop();
		/* 8217C2F4h case    0:*/		return 0x8217C2F8;
	}
	return 0x8217C2F8;
} // Block from 8217C2F4h-8217C2F8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C2F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C2F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C2F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C2F8);
		  /* 8217C2F8h */ case    0:  		/* mfspr R12, LR */
		/* 8217C2F8h case    0:*/		regs.R12 = regs.LR;
		/* 8217C2F8h case    0:*/		return 0x8217C2FC;
		  /* 8217C2FCh */ case    1:  		/* bl -962728 */
		/* 8217C2FCh case    1:*/		regs.LR = 0x8217C300; return 0x82091254;
		/* 8217C2FCh case    1:*/		return 0x8217C300;
		  /* 8217C300h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8217C300h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8217C300h case    2:*/		return 0x8217C304;
		  /* 8217C304h */ case    3:  		/* mr R31, R4 */
		/* 8217C304h case    3:*/		regs.R31 = regs.R4;
		/* 8217C304h case    3:*/		return 0x8217C308;
		  /* 8217C308h */ case    4:  		/* mr R4, R5 */
		/* 8217C308h case    4:*/		regs.R4 = regs.R5;
		/* 8217C308h case    4:*/		return 0x8217C30C;
		  /* 8217C30Ch */ case    5:  		/* mr R29, R3 */
		/* 8217C30Ch case    5:*/		regs.R29 = regs.R3;
		/* 8217C30Ch case    5:*/		return 0x8217C310;
		  /* 8217C310h */ case    6:  		/* bl 30288 */
		/* 8217C310h case    6:*/		regs.LR = 0x8217C314; return 0x82183960;
		/* 8217C310h case    6:*/		return 0x8217C314;
		  /* 8217C314h */ case    7:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217C314h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217C314h case    7:*/		return 0x8217C318;
		  /* 8217C318h */ case    8:  		/* lwz R28, <#[R31 + 28]> */
		/* 8217C318h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000001C) );
		/* 8217C318h case    8:*/		return 0x8217C31C;
		  /* 8217C31Ch */ case    9:  		/* mr R27, R3 */
		/* 8217C31Ch case    9:*/		regs.R27 = regs.R3;
		/* 8217C31Ch case    9:*/		return 0x8217C320;
		  /* 8217C320h */ case   10:  		/* lwz R11, <#[R11 + 36]> */
		/* 8217C320h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8217C320h case   10:*/		return 0x8217C324;
		  /* 8217C324h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C324h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C324h case   11:*/		return 0x8217C328;
		  /* 8217C328h */ case   12:  		/* bc 4, CR0_EQ, 224 */
		/* 8217C328h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217C408;  }
		/* 8217C328h case   12:*/		return 0x8217C32C;
		  /* 8217C32Ch */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217C32Ch case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217C32Ch case   13:*/		return 0x8217C330;
		  /* 8217C330h */ case   14:  		/* addi R11, R11, -40 */
		/* 8217C330h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217C330h case   14:*/		return 0x8217C334;
		  /* 8217C334h */ case   15:  		/* mr R31, R11 */
		/* 8217C334h case   15:*/		regs.R31 = regs.R11;
		/* 8217C334h case   15:*/		return 0x8217C338;
		  /* 8217C338h */ case   16:  		/* cmplwi CR6, R11, 0 */
		/* 8217C338h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C338h case   16:*/		return 0x8217C33C;
		  /* 8217C33Ch */ case   17:  		/* bc 12, CR6_EQ, 164 */
		/* 8217C33Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8217C3E0;  }
		/* 8217C33Ch case   17:*/		return 0x8217C340;
		  /* 8217C340h */ case   18:  		/* mr R3, R31 */
		/* 8217C340h case   18:*/		regs.R3 = regs.R31;
		/* 8217C340h case   18:*/		return 0x8217C344;
		  /* 8217C344h */ case   19:  		/* bl -98820 */
		/* 8217C344h case   19:*/		regs.LR = 0x8217C348; return 0x82164140;
		/* 8217C344h case   19:*/		return 0x8217C348;
		  /* 8217C348h */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C348h case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C348h case   20:*/		return 0x8217C34C;
		  /* 8217C34Ch */ case   21:  		/* bc 12, CR0_EQ, 120 */
		/* 8217C34Ch case   21:*/		if ( regs.CR[0].eq ) { return 0x8217C3C4;  }
		/* 8217C34Ch case   21:*/		return 0x8217C350;
		  /* 8217C350h */ case   22:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217C350h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217C350h case   22:*/		return 0x8217C354;
		  /* 8217C354h */ case   23:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8217C354h case   23:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8217C354h case   23:*/		return 0x8217C358;
		  /* 8217C358h */ case   24:  		/* bc 12, CR0_EQ, 40 */
		/* 8217C358h case   24:*/		if ( regs.CR[0].eq ) { return 0x8217C380;  }
		/* 8217C358h case   24:*/		return 0x8217C35C;
		  /* 8217C35Ch */ case   25:  		/* mr R3, R31 */
		/* 8217C35Ch case   25:*/		regs.R3 = regs.R31;
		/* 8217C35Ch case   25:*/		return 0x8217C360;
		  /* 8217C360h */ case   26:  		/* bl -98848 */
		/* 8217C360h case   26:*/		regs.LR = 0x8217C364; return 0x82164140;
		/* 8217C360h case   26:*/		return 0x8217C364;
		  /* 8217C364h */ case   27:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C364h case   27:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C364h case   27:*/		return 0x8217C368;
		  /* 8217C368h */ case   28:  		/* mr R3, R29 */
		/* 8217C368h case   28:*/		regs.R3 = regs.R29;
		/* 8217C368h case   28:*/		return 0x8217C36C;
		  /* 8217C36Ch */ case   29:  		/* bc 12, CR0_EQ, 172 */
		/* 8217C36Ch case   29:*/		if ( regs.CR[0].eq ) { return 0x8217C418;  }
		/* 8217C36Ch case   29:*/		return 0x8217C370;
		  /* 8217C370h */ case   30:  		/* lhz R4, <#[R31 + 18]> */
		/* 8217C370h case   30:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000012) );
		/* 8217C370h case   30:*/		return 0x8217C374;
		  /* 8217C374h */ case   31:  		/* bl 30188 */
		/* 8217C374h case   31:*/		regs.LR = 0x8217C378; return 0x82183960;
		/* 8217C374h case   31:*/		return 0x8217C378;
		  /* 8217C378h */ case   32:  		/* cmplw CR6, R3, R27 */
		/* 8217C378h case   32:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R27);
		/* 8217C378h case   32:*/		return 0x8217C37C;
		  /* 8217C37Ch */ case   33:  		/* bc 12, CR6_EQ, 164 */
		/* 8217C37Ch case   33:*/		if ( regs.CR[6].eq ) { return 0x8217C420;  }
		/* 8217C37Ch case   33:*/		return 0x8217C380;
	}
	return 0x8217C380;
} // Block from 8217C2F8h-8217C380h (34 instructions)

//////////////////////////////////////////////////////
// Block at 8217C380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C380);
		  /* 8217C380h */ case    0:  		/* mr R4, R31 */
		/* 8217C380h case    0:*/		regs.R4 = regs.R31;
		/* 8217C380h case    0:*/		return 0x8217C384;
		  /* 8217C384h */ case    1:  		/* mr R3, R29 */
		/* 8217C384h case    1:*/		regs.R3 = regs.R29;
		/* 8217C384h case    1:*/		return 0x8217C388;
		  /* 8217C388h */ case    2:  		/* bl -18232 */
		/* 8217C388h case    2:*/		regs.LR = 0x8217C38C; return 0x82177C50;
		/* 8217C388h case    2:*/		return 0x8217C38C;
		  /* 8217C38Ch */ case    3:  		/* or. R30, R3, R3 */
		/* 8217C38Ch case    3:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 8217C38Ch case    3:*/		return 0x8217C390;
		  /* 8217C390h */ case    4:  		/* bc 12, CR0_EQ, 52 */
		/* 8217C390h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217C3C4;  }
		/* 8217C390h case    4:*/		return 0x8217C394;
		  /* 8217C394h */ case    5:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217C394h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217C394h case    5:*/		return 0x8217C398;
		  /* 8217C398h */ case    6:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8217C398h case    6:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8217C398h case    6:*/		return 0x8217C39C;
		  /* 8217C39Ch */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 8217C39Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x8217C3C4;  }
		/* 8217C39Ch case    7:*/		return 0x8217C3A0;
		  /* 8217C3A0h */ case    8:  		/* mr R3, R30 */
		/* 8217C3A0h case    8:*/		regs.R3 = regs.R30;
		/* 8217C3A0h case    8:*/		return 0x8217C3A4;
		  /* 8217C3A4h */ case    9:  		/* bl -98916 */
		/* 8217C3A4h case    9:*/		regs.LR = 0x8217C3A8; return 0x82164140;
		/* 8217C3A4h case    9:*/		return 0x8217C3A8;
		  /* 8217C3A8h */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C3A8h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C3A8h case   10:*/		return 0x8217C3AC;
		  /* 8217C3ACh */ case   11:  		/* mr R3, R29 */
		/* 8217C3ACh case   11:*/		regs.R3 = regs.R29;
		/* 8217C3ACh case   11:*/		return 0x8217C3B0;
		  /* 8217C3B0h */ case   12:  		/* bc 12, CR0_EQ, 124 */
		/* 8217C3B0h case   12:*/		if ( regs.CR[0].eq ) { return 0x8217C42C;  }
		/* 8217C3B0h case   12:*/		return 0x8217C3B4;
		  /* 8217C3B4h */ case   13:  		/* lhz R4, <#[R30 + 18]> */
		/* 8217C3B4h case   13:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000012) );
		/* 8217C3B4h case   13:*/		return 0x8217C3B8;
		  /* 8217C3B8h */ case   14:  		/* bl 30120 */
		/* 8217C3B8h case   14:*/		regs.LR = 0x8217C3BC; return 0x82183960;
		/* 8217C3B8h case   14:*/		return 0x8217C3BC;
		  /* 8217C3BCh */ case   15:  		/* cmplw CR6, R3, R27 */
		/* 8217C3BCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R27);
		/* 8217C3BCh case   15:*/		return 0x8217C3C0;
		  /* 8217C3C0h */ case   16:  		/* bc 12, CR6_EQ, 96 */
		/* 8217C3C0h case   16:*/		if ( regs.CR[6].eq ) { return 0x8217C420;  }
		/* 8217C3C0h case   16:*/		return 0x8217C3C4;
	}
	return 0x8217C3C4;
} // Block from 8217C380h-8217C3C4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8217C3C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C3C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C3C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C3C4);
		  /* 8217C3C4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217C3C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217C3C4h case    0:*/		return 0x8217C3C8;
		  /* 8217C3C8h */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 8217C3C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8217C3C8h case    1:*/		return 0x8217C3CC;
		  /* 8217C3CCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C3CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C3CCh case    2:*/		return 0x8217C3D0;
		  /* 8217C3D0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217C3D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217C3E0;  }
		/* 8217C3D0h case    3:*/		return 0x8217C3D4;
		  /* 8217C3D4h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217C3D4h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217C3D4h case    4:*/		return 0x8217C3D8;
		  /* 8217C3D8h */ case    5:  		/* addic. R31, R11, -40 */
		/* 8217C3D8h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 8217C3D8h case    5:*/		return 0x8217C3DC;
		  /* 8217C3DCh */ case    6:  		/* bc 4, CR0_EQ, -156 */
		/* 8217C3DCh case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217C340;  }
		/* 8217C3DCh case    6:*/		return 0x8217C3E0;
	}
	return 0x8217C3E0;
} // Block from 8217C3C4h-8217C3E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217C3E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C3E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C3E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C3E0);
		  /* 8217C3E0h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8217C3E0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8217C3E0h case    0:*/		return 0x8217C3E4;
		  /* 8217C3E4h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 8217C3E4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C3E4h case    1:*/		return 0x8217C3E8;
		  /* 8217C3E8h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C3E8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C3E8h case    2:*/		return 0x8217C3EC;
		  /* 8217C3ECh */ case    3:  		/* bc 4, CR0_EQ, 72 */
		/* 8217C3ECh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217C434;  }
		/* 8217C3ECh case    3:*/		return 0x8217C3F0;
		  /* 8217C3F0h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217C3F0h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217C3F0h case    4:*/		return 0x8217C3F4;
		  /* 8217C3F4h */ case    5:  		/* addic. R28, R11, -4 */
		/* 8217C3F4h case    5:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 8217C3F4h case    5:*/		return 0x8217C3F8;
		  /* 8217C3F8h */ case    6:  		/* bc 12, CR0_EQ, 60 */
		/* 8217C3F8h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217C434;  }
		/* 8217C3F8h case    6:*/		return 0x8217C3FC;
		  /* 8217C3FCh */ case    7:  		/* lwz R11, <#[R28 + 28]> */
		/* 8217C3FCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000001C) );
		/* 8217C3FCh case    7:*/		return 0x8217C400;
		  /* 8217C400h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217C400h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217C400h case    8:*/		return 0x8217C404;
		  /* 8217C404h */ case    9:  		/* bc 12, CR0_EQ, 12 */
		/* 8217C404h case    9:*/		if ( regs.CR[0].eq ) { return 0x8217C410;  }
		/* 8217C404h case    9:*/		return 0x8217C408;
	}
	return 0x8217C408;
} // Block from 8217C3E0h-8217C408h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217C408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C408);
		  /* 8217C408h */ case    0:  		/* li R11, 0 */
		/* 8217C408h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217C408h case    0:*/		return 0x8217C40C;
		  /* 8217C40Ch */ case    1:  		/* b -216 */
		/* 8217C40Ch case    1:*/		return 0x8217C334;
		/* 8217C40Ch case    1:*/		return 0x8217C410;
	}
	return 0x8217C410;
} // Block from 8217C408h-8217C410h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C410);
		  /* 8217C410h */ case    0:  		/* lwz R11, <#[R28 + 24]> */
		/* 8217C410h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000018) );
		/* 8217C410h case    0:*/		return 0x8217C414;
		  /* 8217C414h */ case    1:  		/* b -232 */
		/* 8217C414h case    1:*/		return 0x8217C32C;
		/* 8217C414h case    1:*/		return 0x8217C418;
	}
	return 0x8217C418;
} // Block from 8217C410h-8217C418h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C418);
		  /* 8217C418h */ case    0:  		/* li R4, 4800 */
		/* 8217C418h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217C418h case    0:*/		return 0x8217C41C;
		  /* 8217C41Ch */ case    1:  		/* bl -173492 */
		/* 8217C41Ch case    1:*/		regs.LR = 0x8217C420; return 0x82151E68;
		/* 8217C41Ch case    1:*/		return 0x8217C420;
	}
	return 0x8217C420;
} // Block from 8217C418h-8217C420h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C420);
		  /* 8217C420h */ case    0:  		/* mr R3, R31 */
		/* 8217C420h case    0:*/		regs.R3 = regs.R31;
		/* 8217C420h case    0:*/		return 0x8217C424;
		  /* 8217C424h */ case    1:  		/* addi R1, R1, 128 */
		/* 8217C424h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217C424h case    1:*/		return 0x8217C428;
		  /* 8217C428h */ case    2:  		/* b -962948 */
		/* 8217C428h case    2:*/		return 0x820912A4;
		/* 8217C428h case    2:*/		return 0x8217C42C;
	}
	return 0x8217C42C;
} // Block from 8217C420h-8217C42Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217C42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C42C);
		  /* 8217C42Ch */ case    0:  		/* li R4, 4800 */
		/* 8217C42Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217C42Ch case    0:*/		return 0x8217C430;
		  /* 8217C430h */ case    1:  		/* bl -173512 */
		/* 8217C430h case    1:*/		regs.LR = 0x8217C434; return 0x82151E68;
		/* 8217C430h case    1:*/		return 0x8217C434;
	}
	return 0x8217C434;
} // Block from 8217C42Ch-8217C434h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C434h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C434( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C434) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C434);
		  /* 8217C434h */ case    0:  		/* li R4, 4800 */
		/* 8217C434h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217C434h case    0:*/		return 0x8217C438;
		  /* 8217C438h */ case    1:  		/* mr R3, R29 */
		/* 8217C438h case    1:*/		regs.R3 = regs.R29;
		/* 8217C438h case    1:*/		return 0x8217C43C;
		  /* 8217C43Ch */ case    2:  		/* bl -173524 */
		/* 8217C43Ch case    2:*/		regs.LR = 0x8217C440; return 0x82151E68;
		/* 8217C43Ch case    2:*/		return 0x8217C440;
	}
	return 0x8217C440;
} // Block from 8217C434h-8217C440h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217C440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C440);
		  /* 8217C440h */ case    0:  		/* mfspr R12, LR */
		/* 8217C440h case    0:*/		regs.R12 = regs.LR;
		/* 8217C440h case    0:*/		return 0x8217C444;
		  /* 8217C444h */ case    1:  		/* bl -963056 */
		/* 8217C444h case    1:*/		regs.LR = 0x8217C448; return 0x82091254;
		/* 8217C444h case    1:*/		return 0x8217C448;
		  /* 8217C448h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8217C448h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8217C448h case    2:*/		return 0x8217C44C;
		  /* 8217C44Ch */ case    3:  		/* mr R28, R6 */
		/* 8217C44Ch case    3:*/		regs.R28 = regs.R6;
		/* 8217C44Ch case    3:*/		return 0x8217C450;
		  /* 8217C450h */ case    4:  		/* mr R6, R7 */
		/* 8217C450h case    4:*/		regs.R6 = regs.R7;
		/* 8217C450h case    4:*/		return 0x8217C454;
		  /* 8217C454h */ case    5:  		/* mr R29, R8 */
		/* 8217C454h case    5:*/		regs.R29 = regs.R8;
		/* 8217C454h case    5:*/		return 0x8217C458;
		  /* 8217C458h */ case    6:  		/* addi R8, R1, 84 */
		/* 8217C458h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x54);
		/* 8217C458h case    6:*/		return 0x8217C45C;
		  /* 8217C45Ch */ case    7:  		/* addi R7, R1, 80 */
		/* 8217C45Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 8217C45Ch case    7:*/		return 0x8217C460;
		  /* 8217C460h */ case    8:  		/* mr R31, R4 */
		/* 8217C460h case    8:*/		regs.R31 = regs.R4;
		/* 8217C460h case    8:*/		return 0x8217C464;
		  /* 8217C464h */ case    9:  		/* mr R27, R9 */
		/* 8217C464h case    9:*/		regs.R27 = regs.R9;
		/* 8217C464h case    9:*/		return 0x8217C468;
		  /* 8217C468h */ case   10:  		/* mr R30, R10 */
		/* 8217C468h case   10:*/		regs.R30 = regs.R10;
		/* 8217C468h case   10:*/		return 0x8217C46C;
		  /* 8217C46Ch */ case   11:  		/* bl -8428 */
		/* 8217C46Ch case   11:*/		regs.LR = 0x8217C470; return 0x8217A380;
		/* 8217C46Ch case   11:*/		return 0x8217C470;
		  /* 8217C470h */ case   12:  		/* lwz R7, <#[R1 + 80]> */
		/* 8217C470h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000050) );
		/* 8217C470h case   12:*/		return 0x8217C474;
		  /* 8217C474h */ case   13:  		/* cmpwi CR6, R3, 3 */
		/* 8217C474h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8217C474h case   13:*/		return 0x8217C478;
		  /* 8217C478h */ case   14:  		/* lwz R10, <#[R1 + 84]> */
		/* 8217C478h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 8217C478h case   14:*/		return 0x8217C47C;
		  /* 8217C47Ch */ case   15:  		/* stw R3, <#[R28]> */
		/* 8217C47Ch case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000000) );
		/* 8217C47Ch case   15:*/		return 0x8217C480;
	}
	return 0x8217C480;
} // Block from 8217C440h-8217C480h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8217C480h
// Function '?PredicateNonLexicalScopeExit@Compiler@D3DXShader@@AAAXPAVBlock@2@PAVInstruction@2@00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C480( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C480) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C480);
		  /* 8217C480h */ case    0:  		/* stw R7, <#[R29]> */
		/* 8217C480h case    0:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R29 + 0x00000000) );
		/* 8217C480h case    0:*/		return 0x8217C484;
		  /* 8217C484h */ case    1:  		/* stw R10, <#[R27]> */
		/* 8217C484h case    1:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 8217C484h case    1:*/		return 0x8217C488;
		  /* 8217C488h */ case    2:  		/* bc 12, CR6_EQ, 24 */
		/* 8217C488h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217C4A0;  }
		/* 8217C488h case    2:*/		return 0x8217C48C;
		  /* 8217C48Ch */ case    3:  		/* cmpwi CR6, R3, 4 */
		/* 8217C48Ch case    3:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 8217C48Ch case    3:*/		return 0x8217C490;
		  /* 8217C490h */ case    4:  		/* bc 12, CR6_EQ, 12 */
		/* 8217C490h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217C49C;  }
		/* 8217C490h case    4:*/		return 0x8217C494;
		  /* 8217C494h */ case    5:  		/* li R3, 0 */
		/* 8217C494h case    5:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217C494h case    5:*/		return 0x8217C498;
		  /* 8217C498h */ case    6:  		/* b 212 */
		/* 8217C498h case    6:*/		return 0x8217C56C;
		/* 8217C498h case    6:*/		return 0x8217C49C;
	}
	return 0x8217C49C;
} // Block from 8217C480h-8217C49Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217C49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C49C);
		  /* 8217C49Ch */ case    0:  		/* mr R31, R7 */
		/* 8217C49Ch case    0:*/		regs.R31 = regs.R7;
		/* 8217C49Ch case    0:*/		return 0x8217C4A0;
	}
	return 0x8217C4A0;
} // Block from 8217C49Ch-8217C4A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C4A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C4A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C4A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C4A0);
		  /* 8217C4A0h */ case    0:  		/* lwz R11, <#[R10 + 12]> */
		/* 8217C4A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217C4A0h case    0:*/		return 0x8217C4A4;
		  /* 8217C4A4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217C4A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C4A4h case    1:*/		return 0x8217C4A8;
		  /* 8217C4A8h */ case    2:  		/* bc 4, CR6_EQ, 12 */
		/* 8217C4A8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217C4B4;  }
		/* 8217C4A8h case    2:*/		return 0x8217C4AC;
		  /* 8217C4ACh */ case    3:  		/* li R9, 0 */
		/* 8217C4ACh case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8217C4ACh case    3:*/		return 0x8217C4B0;
		  /* 8217C4B0h */ case    4:  		/* b 12 */
		/* 8217C4B0h case    4:*/		return 0x8217C4BC;
		/* 8217C4B0h case    4:*/		return 0x8217C4B4;
	}
	return 0x8217C4B4;
} // Block from 8217C4A0h-8217C4B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217C4B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C4B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C4B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C4B4);
		  /* 8217C4B4h */ case    0:  		/* lwz R11, <#[R10 + 12]> */
		/* 8217C4B4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217C4B4h case    0:*/		return 0x8217C4B8;
		  /* 8217C4B8h */ case    1:  		/* lwz R9, <#[R11]> */
		/* 8217C4B8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C4B8h case    1:*/		return 0x8217C4BC;
	}
	return 0x8217C4BC;
} // Block from 8217C4B4h-8217C4BCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C4BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C4BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C4BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C4BC);
		  /* 8217C4BCh */ case    0:  		/* lwz R11, <#[R1 + 228]> */
		/* 8217C4BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000E4) );
		/* 8217C4BCh case    0:*/		return 0x8217C4C0;
		  /* 8217C4C0h */ case    1:  		/* stw R31, <#[R30]> */
		/* 8217C4C0h case    1:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 8217C4C0h case    1:*/		return 0x8217C4C4;
		  /* 8217C4C4h */ case    2:  		/* stw R9, <#[R11]> */
		/* 8217C4C4h case    2:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C4C4h case    2:*/		return 0x8217C4C8;
		  /* 8217C4C8h */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 8217C4C8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217C4C8h case    3:*/		return 0x8217C4CC;
		  /* 8217C4CCh */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217C4CCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C4CCh case    4:*/		return 0x8217C4D0;
		  /* 8217C4D0h */ case    5:  		/* bc 12, CR6_EQ, 24 */
		/* 8217C4D0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8217C4E8;  }
		/* 8217C4D0h case    5:*/		return 0x8217C4D4;
		  /* 8217C4D4h */ case    6:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8217C4D4h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8217C4D4h case    6:*/		return 0x8217C4D8;
		  /* 8217C4D8h */ case    7:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217C4D8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217C4D8h case    7:*/		return 0x8217C4DC;
		  /* 8217C4DCh */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8217C4DCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C4DCh case    8:*/		return 0x8217C4E0;
		  /* 8217C4E0h */ case    9:  		/* li R11, 1 */
		/* 8217C4E0h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217C4E0h case    9:*/		return 0x8217C4E4;
		  /* 8217C4E4h */ case   10:  		/* bc 4, CR6_EQ, 8 */
		/* 8217C4E4h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8217C4EC;  }
		/* 8217C4E4h case   10:*/		return 0x8217C4E8;
	}
	return 0x8217C4E8;
} // Block from 8217C4BCh-8217C4E8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217C4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C4E8);
		  /* 8217C4E8h */ case    0:  		/* li R11, 0 */
		/* 8217C4E8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217C4E8h case    0:*/		return 0x8217C4EC;
	}
	return 0x8217C4EC;
} // Block from 8217C4E8h-8217C4ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C4ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C4EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C4EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C4EC);
		  /* 8217C4ECh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217C4ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217C4ECh case    0:*/		return 0x8217C4F0;
		  /* 8217C4F0h */ case    1:  		/* bc 4, CR0_EQ, -92 */
		/* 8217C4F0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217C494;  }
		/* 8217C4F0h case    1:*/		return 0x8217C4F4;
		  /* 8217C4F4h */ case    2:  		/* cmpwi CR6, R3, 4 */
		/* 8217C4F4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 8217C4F4h case    2:*/		return 0x8217C4F8;
		  /* 8217C4F8h */ case    3:  		/* bc 4, CR6_EQ, 388 */
		/* 8217C4F8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217C67C;  }
		/* 8217C4F8h case    3:*/		return 0x8217C4FC;
		  /* 8217C4FCh */ case    4:  		/* lwz R10, <#[R7 + 12]> */
		/* 8217C4FCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x0000000C) );
		/* 8217C4FCh case    4:*/		return 0x8217C500;
		  /* 8217C500h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 8217C500h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217C500h case    5:*/		return 0x8217C504;
		  /* 8217C504h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 8217C504h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217C51C;  }
		/* 8217C504h case    6:*/		return 0x8217C508;
		  /* 8217C508h */ case    7:  		/* rlwinm R11, R10, 0, 0, 31 */
		/* 8217C508h case    7:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R10);
		/* 8217C508h case    7:*/		return 0x8217C50C;
		  /* 8217C50Ch */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217C50Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217C50Ch case    8:*/		return 0x8217C510;
		  /* 8217C510h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8217C510h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C510h case    9:*/		return 0x8217C514;
		  /* 8217C514h */ case   10:  		/* li R11, 1 */
		/* 8217C514h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217C514h case   10:*/		return 0x8217C518;
		  /* 8217C518h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 8217C518h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8217C520;  }
		/* 8217C518h case   11:*/		return 0x8217C51C;
	}
	return 0x8217C51C;
} // Block from 8217C4ECh-8217C51Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217C51Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C51C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C51C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C51C);
		  /* 8217C51Ch */ case    0:  		/* li R11, 0 */
		/* 8217C51Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217C51Ch case    0:*/		return 0x8217C520;
	}
	return 0x8217C520;
} // Block from 8217C51Ch-8217C520h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C520);
		  /* 8217C520h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217C520h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217C520h case    0:*/		return 0x8217C524;
		  /* 8217C524h */ case    1:  		/* bc 4, CR0_EQ, -144 */
		/* 8217C524h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217C494;  }
		/* 8217C524h case    1:*/		return 0x8217C528;
		  /* 8217C528h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8217C528h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217C528h case    2:*/		return 0x8217C52C;
		  /* 8217C52Ch */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8217C52Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217C538;  }
		/* 8217C52Ch case    3:*/		return 0x8217C530;
		  /* 8217C530h */ case    4:  		/* li R8, 0 */
		/* 8217C530h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217C530h case    4:*/		return 0x8217C534;
		  /* 8217C534h */ case    5:  		/* b 12 */
		/* 8217C534h case    5:*/		return 0x8217C540;
		/* 8217C534h case    5:*/		return 0x8217C538;
	}
	return 0x8217C538;
} // Block from 8217C520h-8217C538h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C538);
		  /* 8217C538h */ case    0:  		/* lwz R11, <#[R7 + 12]> */
		/* 8217C538h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000000C) );
		/* 8217C538h case    0:*/		return 0x8217C53C;
		  /* 8217C53Ch */ case    1:  		/* lwz R8, <#[R11]> */
		/* 8217C53Ch case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C53Ch case    1:*/		return 0x8217C540;
	}
	return 0x8217C540;
} // Block from 8217C538h-8217C540h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C540h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C540( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C540) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C540);
		  /* 8217C540h */ case    0:  		/* rlwinm R11, R7, 0, 0, 30 */
		/* 8217C540h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R7);
		/* 8217C540h case    0:*/		return 0x8217C544;
		  /* 8217C544h */ case    1:  		/* cmplw CR6, R8, R9 */
		/* 8217C544h case    1:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 8217C544h case    1:*/		return 0x8217C548;
		  /* 8217C548h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217C548h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C548h case    2:*/		return 0x8217C54C;
		  /* 8217C54Ch */ case    3:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217C54Ch case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C54Ch case    3:*/		return 0x8217C550;
		  /* 8217C550h */ case    4:  		/* addic R10, R10, -1 */
		/* 8217C550h case    4:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217C550h case    4:*/		return 0x8217C554;
		  /* 8217C554h */ case    5:  		/* subfe R10, R10, R10 */
		/* 8217C554h case    5:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217C554h case    5:*/		return 0x8217C558;
		  /* 8217C558h */ case    6:  		/* and R11, R10, R11 */
		/* 8217C558h case    6:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217C558h case    6:*/		return 0x8217C55C;
		  /* 8217C55Ch */ case    7:  		/* bc 4, CR6_EQ, 24 */
		/* 8217C55Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x8217C574;  }
		/* 8217C55Ch case    7:*/		return 0x8217C560;
		  /* 8217C560h */ case    8:  		/* cmplw CR6, R11, R9 */
		/* 8217C560h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8217C560h case    8:*/		return 0x8217C564;
		  /* 8217C564h */ case    9:  		/* bc 4, CR6_EQ, -208 */
		/* 8217C564h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C564h case    9:*/		return 0x8217C568;
		  /* 8217C568h */ case   10:  		/* li R3, 1 */
		/* 8217C568h case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8217C568h case   10:*/		return 0x8217C56C;
	}
	return 0x8217C56C;
} // Block from 8217C540h-8217C56Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217C56Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C56C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C56C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C56C);
		  /* 8217C56Ch */ case    0:  		/* addi R1, R1, 144 */
		/* 8217C56Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217C56Ch case    0:*/		return 0x8217C570;
		  /* 8217C570h */ case    1:  		/* b -963276 */
		/* 8217C570h case    1:*/		return 0x820912A4;
		/* 8217C570h case    1:*/		return 0x8217C574;
	}
	return 0x8217C574;
} // Block from 8217C56Ch-8217C574h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C574h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C574( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C574) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C574);
		  /* 8217C574h */ case    0:  		/* cmplw CR6, R11, R8 */
		/* 8217C574h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8217C574h case    0:*/		return 0x8217C578;
		  /* 8217C578h */ case    1:  		/* bc 4, CR6_EQ, -228 */
		/* 8217C578h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C578h case    1:*/		return 0x8217C57C;
		  /* 8217C57Ch */ case    2:  		/* lwz R10, <#[R8 + 12]> */
		/* 8217C57Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 8217C57Ch case    2:*/		return 0x8217C580;
		  /* 8217C580h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 8217C580h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217C580h case    3:*/		return 0x8217C584;
		  /* 8217C584h */ case    4:  		/* bc 12, CR6_EQ, 20 */
		/* 8217C584h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217C598;  }
		/* 8217C584h case    4:*/		return 0x8217C588;
		  /* 8217C588h */ case    5:  		/* lwz R11, <#[R10 + 8]> */
		/* 8217C588h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8217C588h case    5:*/		return 0x8217C58C;
		  /* 8217C58Ch */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8217C58Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C58Ch case    6:*/		return 0x8217C590;
		  /* 8217C590h */ case    7:  		/* li R11, 1 */
		/* 8217C590h case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217C590h case    7:*/		return 0x8217C594;
		  /* 8217C594h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 8217C594h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8217C59C;  }
		/* 8217C594h case    8:*/		return 0x8217C598;
	}
	return 0x8217C598;
} // Block from 8217C574h-8217C598h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217C598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C598);
		  /* 8217C598h */ case    0:  		/* li R11, 0 */
		/* 8217C598h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217C598h case    0:*/		return 0x8217C59C;
	}
	return 0x8217C59C;
} // Block from 8217C598h-8217C59Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C59Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C59C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C59C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C59C);
		  /* 8217C59Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217C59Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217C59Ch case    0:*/		return 0x8217C5A0;
		  /* 8217C5A0h */ case    1:  		/* bc 4, CR0_EQ, -268 */
		/* 8217C5A0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217C494;  }
		/* 8217C5A0h case    1:*/		return 0x8217C5A4;
		  /* 8217C5A4h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8217C5A4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217C5A4h case    2:*/		return 0x8217C5A8;
		  /* 8217C5A8h */ case    3:  		/* li R11, 0 */
		/* 8217C5A8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217C5A8h case    3:*/		return 0x8217C5AC;
		  /* 8217C5ACh */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 8217C5ACh case    4:*/		if ( regs.CR[6].eq ) { return 0x8217C5B4;  }
		/* 8217C5ACh case    4:*/		return 0x8217C5B0;
		  /* 8217C5B0h */ case    5:  		/* lwz R11, <#[R10]> */
		/* 8217C5B0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8217C5B0h case    5:*/		return 0x8217C5B4;
	}
	return 0x8217C5B4;
} // Block from 8217C59Ch-8217C5B4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C5B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C5B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C5B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C5B4);
		  /* 8217C5B4h */ case    0:  		/* cmplw CR6, R11, R9 */
		/* 8217C5B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8217C5B4h case    0:*/		return 0x8217C5B8;
		  /* 8217C5B8h */ case    1:  		/* bc 4, CR6_EQ, -292 */
		/* 8217C5B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C5B8h case    1:*/		return 0x8217C5BC;
		  /* 8217C5BCh */ case    2:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 8217C5BCh case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 8217C5BCh case    2:*/		return 0x8217C5C0;
		  /* 8217C5C0h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217C5C0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C5C0h case    3:*/		return 0x8217C5C4;
		  /* 8217C5C4h */ case    4:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217C5C4h case    4:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C5C4h case    4:*/		return 0x8217C5C8;
		  /* 8217C5C8h */ case    5:  		/* addic R10, R10, -1 */
		/* 8217C5C8h case    5:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217C5C8h case    5:*/		return 0x8217C5CC;
		  /* 8217C5CCh */ case    6:  		/* subfe R10, R10, R10 */
		/* 8217C5CCh case    6:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217C5CCh case    6:*/		return 0x8217C5D0;
		  /* 8217C5D0h */ case    7:  		/* and R11, R10, R11 */
		/* 8217C5D0h case    7:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217C5D0h case    7:*/		return 0x8217C5D4;
		  /* 8217C5D4h */ case    8:  		/* cmplw CR6, R11, R9 */
		/* 8217C5D4h case    8:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 8217C5D4h case    8:*/		return 0x8217C5D8;
		  /* 8217C5D8h */ case    9:  		/* bc 4, CR6_EQ, -324 */
		/* 8217C5D8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C5D8h case    9:*/		return 0x8217C5DC;
		  /* 8217C5DCh */ case   10:  		/* lwz R11, <#[R7 + 28]> */
		/* 8217C5DCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000001C) );
		/* 8217C5DCh case   10:*/		return 0x8217C5E0;
		  /* 8217C5E0h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217C5E0h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217C5E0h case   11:*/		return 0x8217C5E4;
		  /* 8217C5E4h */ case   12:  		/* bc 12, CR0_EQ, -336 */
		/* 8217C5E4h case   12:*/		if ( regs.CR[0].eq ) { return 0x8217C494;  }
		/* 8217C5E4h case   12:*/		return 0x8217C5E8;
		  /* 8217C5E8h */ case   13:  		/* lwz R9, <#[R7 + 36]> */
		/* 8217C5E8h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000024) );
		/* 8217C5E8h case   13:*/		return 0x8217C5EC;
		  /* 8217C5ECh */ case   14:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 8217C5ECh case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 8217C5ECh case   14:*/		return 0x8217C5F0;
		  /* 8217C5F0h */ case   15:  		/* bc 4, CR0_EQ, -348 */
		/* 8217C5F0h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8217C494;  }
		/* 8217C5F0h case   15:*/		return 0x8217C5F4;
		  /* 8217C5F4h */ case   16:  		/* cmplwi CR0, R9, 0 */
		/* 8217C5F4h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 8217C5F4h case   16:*/		return 0x8217C5F8;
		  /* 8217C5F8h */ case   17:  		/* bc 12, CR0_EQ, -356 */
		/* 8217C5F8h case   17:*/		if ( regs.CR[0].eq ) { return 0x8217C494;  }
		/* 8217C5F8h case   17:*/		return 0x8217C5FC;
		  /* 8217C5FCh */ case   18:  		/* lwz R11, <#[R9 + 8]> */
		/* 8217C5FCh case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 8217C5FCh case   18:*/		return 0x8217C600;
		  /* 8217C600h */ case   19:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217C600h case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217C600h case   19:*/		return 0x8217C604;
		  /* 8217C604h */ case   20:  		/* cmplwi CR6, R11, 8064 */
		/* 8217C604h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001F80);
		/* 8217C604h case   20:*/		return 0x8217C608;
		  /* 8217C608h */ case   21:  		/* bc 4, CR6_EQ, -372 */
		/* 8217C608h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C608h case   21:*/		return 0x8217C60C;
		  /* 8217C60Ch */ case   22:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 8217C60Ch case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 8217C60Ch case   22:*/		return 0x8217C610;
		  /* 8217C610h */ case   23:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217C610h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217C610h case   23:*/		return 0x8217C614;
		  /* 8217C614h */ case   24:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C614h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C614h case   24:*/		return 0x8217C618;
		  /* 8217C618h */ case   25:  		/* bc 4, CR0_EQ, 12 */
		/* 8217C618h case   25:*/		if ( !regs.CR[0].eq ) { return 0x8217C624;  }
		/* 8217C618h case   25:*/		return 0x8217C61C;
		  /* 8217C61Ch */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 8217C61Ch case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C61Ch case   26:*/		return 0x8217C620;
		  /* 8217C620h */ case   27:  		/* bc 4, CR6_EQ, -396 */
		/* 8217C620h case   27:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C620h case   27:*/		return 0x8217C624;
	}
	return 0x8217C624;
} // Block from 8217C5B4h-8217C624h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217C624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C624);
		  /* 8217C624h */ case    0:  		/* lwz R11, <#[R7 + 20]> */
		/* 8217C624h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000014) );
		/* 8217C624h case    0:*/		return 0x8217C628;
		  /* 8217C628h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C628h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C628h case    1:*/		return 0x8217C62C;
		  /* 8217C62Ch */ case    2:  		/* bc 4, CR0_EQ, -408 */
		/* 8217C62Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217C494;  }
		/* 8217C62Ch case    2:*/		return 0x8217C630;
		  /* 8217C630h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8217C630h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217C630h case    3:*/		return 0x8217C634;
		  /* 8217C634h */ case    4:  		/* bc 12, CR0_EQ, -416 */
		/* 8217C634h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217C494;  }
		/* 8217C634h case    4:*/		return 0x8217C638;
		  /* 8217C638h */ case    5:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217C638h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217C638h case    5:*/		return 0x8217C63C;
		  /* 8217C63Ch */ case    6:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8217C63Ch case    6:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8217C63Ch case    6:*/		return 0x8217C640;
		  /* 8217C640h */ case    7:  		/* cmplwi CR6, R10, 14336 */
		/* 8217C640h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 8217C640h case    7:*/		return 0x8217C644;
		  /* 8217C644h */ case    8:  		/* bc 4, CR6_EQ, -432 */
		/* 8217C644h case    8:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C644h case    8:*/		return 0x8217C648;
		  /* 8217C648h */ case    9:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 8217C648h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 8217C648h case    9:*/		return 0x8217C64C;
		  /* 8217C64Ch */ case   10:  		/* lwz R10, <#[R10 + 40]> */
		/* 8217C64Ch case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000028) );
		/* 8217C64Ch case   10:*/		return 0x8217C650;
		  /* 8217C650h */ case   11:  		/* rlwinm. R7, R10, 0, 31, 31 */
		/* 8217C650h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R7,regs.R10);
		/* 8217C650h case   11:*/		return 0x8217C654;
		  /* 8217C654h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 8217C654h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217C660;  }
		/* 8217C654h case   12:*/		return 0x8217C658;
		  /* 8217C658h */ case   13:  		/* cmplwi CR6, R10, 0 */
		/* 8217C658h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217C658h case   13:*/		return 0x8217C65C;
		  /* 8217C65Ch */ case   14:  		/* bc 4, CR6_EQ, -456 */
		/* 8217C65Ch case   14:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C65Ch case   14:*/		return 0x8217C660;
	}
	return 0x8217C660;
} // Block from 8217C624h-8217C660h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217C660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C660);
		  /* 8217C660h */ case    0:  		/* lwz R10, <#[R9 + 44]> */
		/* 8217C660h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x0000002C) );
		/* 8217C660h case    0:*/		return 0x8217C664;
		  /* 8217C664h */ case    1:  		/* lwz R10, <#[R10 + 12]> */
		/* 8217C664h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217C664h case    1:*/		return 0x8217C668;
		  /* 8217C668h */ case    2:  		/* cmplw CR6, R11, R10 */
		/* 8217C668h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217C668h case    2:*/		return 0x8217C66C;
		  /* 8217C66Ch */ case    3:  		/* bc 4, CR6_EQ, -472 */
		/* 8217C66Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C66Ch case    3:*/		return 0x8217C670;
		  /* 8217C670h */ case    4:  		/* stw R8, <#[R29]> */
		/* 8217C670h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R29 + 0x00000000) );
		/* 8217C670h case    4:*/		return 0x8217C674;
		  /* 8217C674h */ case    5:  		/* stw R8, <#[R30]> */
		/* 8217C674h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R30 + 0x00000000) );
		/* 8217C674h case    5:*/		return 0x8217C678;
		  /* 8217C678h */ case    6:  		/* b -272 */
		/* 8217C678h case    6:*/		return 0x8217C568;
		/* 8217C678h case    6:*/		return 0x8217C67C;
	}
	return 0x8217C67C;
} // Block from 8217C660h-8217C67Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217C67Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C67C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C67C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C67C);
		  /* 8217C67Ch */ case    0:  		/* cmpwi CR6, R3, 3 */
		/* 8217C67Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8217C67Ch case    0:*/		return 0x8217C680;
		  /* 8217C680h */ case    1:  		/* bc 4, CR6_EQ, -280 */
		/* 8217C680h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217C568;  }
		/* 8217C680h case    1:*/		return 0x8217C684;
		  /* 8217C684h */ case    2:  		/* cmplw CR6, R7, R9 */
		/* 8217C684h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R9);
		/* 8217C684h case    2:*/		return 0x8217C688;
		  /* 8217C688h */ case    3:  		/* bc 4, CR6_EQ, -500 */
		/* 8217C688h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217C494;  }
		/* 8217C688h case    3:*/		return 0x8217C68C;
		  /* 8217C68Ch */ case    4:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 8217C68Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 8217C68Ch case    4:*/		return 0x8217C690;
		  /* 8217C690h */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217C690h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C690h case    5:*/		return 0x8217C694;
		  /* 8217C694h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217C694h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C694h case    6:*/		return 0x8217C698;
		  /* 8217C698h */ case    7:  		/* addic R10, R10, -1 */
		/* 8217C698h case    7:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217C698h case    7:*/		return 0x8217C69C;
		  /* 8217C69Ch */ case    8:  		/* subfe R10, R10, R10 */
		/* 8217C69Ch case    8:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217C69Ch case    8:*/		return 0x8217C6A0;
		  /* 8217C6A0h */ case    9:  		/* and R11, R10, R11 */
		/* 8217C6A0h case    9:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217C6A0h case    9:*/		return 0x8217C6A4;
		  /* 8217C6A4h */ case   10:  		/* b -324 */
		/* 8217C6A4h case   10:*/		return 0x8217C560;
		/* 8217C6A4h case   10:*/		return 0x8217C6A8;
	}
	return 0x8217C6A8;
} // Block from 8217C67Ch-8217C6A8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217C6A8h
// Function ''
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C6A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C6A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C6A8);
		  /* 8217C6A8h */ case    0:  		/* mfspr R12, LR */
		/* 8217C6A8h case    0:*/		regs.R12 = regs.LR;
		/* 8217C6A8h case    0:*/		return 0x8217C6AC;
		  /* 8217C6ACh */ case    1:  		/* bl -963676 */
		/* 8217C6ACh case    1:*/		regs.LR = 0x8217C6B0; return 0x82091250;
		/* 8217C6ACh case    1:*/		return 0x8217C6B0;
		  /* 8217C6B0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8217C6B0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8217C6B0h case    2:*/		return 0x8217C6B4;
		  /* 8217C6B4h */ case    3:  		/* lwz R11, <#[R3 + 4]> */
		/* 8217C6B4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8217C6B4h case    3:*/		return 0x8217C6B8;
		  /* 8217C6B8h */ case    4:  		/* mr R28, R3 */
		/* 8217C6B8h case    4:*/		regs.R28 = regs.R3;
		/* 8217C6B8h case    4:*/		return 0x8217C6BC;
		  /* 8217C6BCh */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C6BCh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C6BCh case    5:*/		return 0x8217C6C0;
		  /* 8217C6C0h */ case    6:  		/* bc 4, CR0_EQ, 240 */
		/* 8217C6C0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217C7B0;  }
		/* 8217C6C0h case    6:*/		return 0x8217C6C4;
		  /* 8217C6C4h */ case    7:  		/* mr R27, R11 */
		/* 8217C6C4h case    7:*/		regs.R27 = regs.R11;
		/* 8217C6C4h case    7:*/		return 0x8217C6C8;
		  /* 8217C6C8h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 8217C6C8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217C6C8h case    8:*/		return 0x8217C6CC;
		  /* 8217C6CCh */ case    9:  		/* bc 12, CR0_EQ, 228 */
		/* 8217C6CCh case    9:*/		if ( regs.CR[0].eq ) { return 0x8217C7B0;  }
		/* 8217C6CCh case    9:*/		return 0x8217C6D0;
		  /* 8217C6D0h */ case   10:  		/* lwz R31, <#[R27 + 28]> */
		/* 8217C6D0h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217C6D0h case   10:*/		return 0x8217C6D4;
		  /* 8217C6D4h */ case   11:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217C6D4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217C6D4h case   11:*/		return 0x8217C6D8;
		  /* 8217C6D8h */ case   12:  		/* bc 4, CR0_EQ, 188 */
		/* 8217C6D8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217C794;  }
		/* 8217C6D8h case   12:*/		return 0x8217C6DC;
		  /* 8217C6DCh */ case   13:  		/* cmplwi CR0, R31, 0 */
		/* 8217C6DCh case   13:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217C6DCh case   13:*/		return 0x8217C6E0;
		  /* 8217C6E0h */ case   14:  		/* bc 12, CR0_EQ, 180 */
		/* 8217C6E0h case   14:*/		if ( regs.CR[0].eq ) { return 0x8217C794;  }
		/* 8217C6E0h case   14:*/		return 0x8217C6E4;
		  /* 8217C6E4h */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217C6E4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217C6E4h case   15:*/		return 0x8217C6E8;
		  /* 8217C6E8h */ case   16:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217C6E8h case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217C6E8h case   16:*/		return 0x8217C6EC;
		  /* 8217C6ECh */ case   17:  		/* cmplwi CR6, R11, 109 */
		/* 8217C6ECh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006D);
		/* 8217C6ECh case   17:*/		return 0x8217C6F0;
		  /* 8217C6F0h */ case   18:  		/* bc 12, CR6_EQ, 12 */
		/* 8217C6F0h case   18:*/		if ( regs.CR[6].eq ) { return 0x8217C6FC;  }
		/* 8217C6F0h case   18:*/		return 0x8217C6F4;
		  /* 8217C6F4h */ case   19:  		/* cmplwi CR6, R11, 108 */
		/* 8217C6F4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006C);
		/* 8217C6F4h case   19:*/		return 0x8217C6F8;
		  /* 8217C6F8h */ case   20:  		/* bc 4, CR6_EQ, 132 */
		/* 8217C6F8h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8217C77C;  }
		/* 8217C6F8h case   20:*/		return 0x8217C6FC;
	}
	return 0x8217C6FC;
} // Block from 8217C6A8h-8217C6FCh (21 instructions)

//////////////////////////////////////////////////////
// Block at 8217C6FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C6FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C6FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C6FC);
		  /* 8217C6FCh */ case    0:  		/* addi R11, R11, -109 */
		/* 8217C6FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFF93);
		/* 8217C6FCh case    0:*/		return 0x8217C700;
		  /* 8217C700h */ case    1:  		/* mr R5, R28 */
		/* 8217C700h case    1:*/		regs.R5 = regs.R28;
		/* 8217C700h case    1:*/		return 0x8217C704;
		  /* 8217C704h */ case    2:  		/* addic R10, R11, -1 */
		/* 8217C704h case    2:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 8217C704h case    2:*/		return 0x8217C708;
		  /* 8217C708h */ case    3:  		/* mr R3, R31 */
		/* 8217C708h case    3:*/		regs.R3 = regs.R31;
		/* 8217C708h case    3:*/		return 0x8217C70C;
		  /* 8217C70Ch */ case    4:  		/* subfe R11, R10, R11 */
		/* 8217C70Ch case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217C70Ch case    4:*/		return 0x8217C710;
		  /* 8217C710h */ case    5:  		/* subfic R9, R11, 12 */
		/* 8217C710h case    5:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R11,0xC);
		/* 8217C710h case    5:*/		return 0x8217C714;
		  /* 8217C714h */ case    6:  		/* subfic R10, R11, 1 */
		/* 8217C714h case    6:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R11,0x1);
		/* 8217C714h case    6:*/		return 0x8217C718;
		  /* 8217C718h */ case    7:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8217C718h case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8217C718h case    7:*/		return 0x8217C71C;
		  /* 8217C71Ch */ case    8:  		/* addi R10, R10, 11 */
		/* 8217C71Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xB);
		/* 8217C71Ch case    8:*/		return 0x8217C720;
		  /* 8217C720h */ case    9:  		/* addi R11, R11, 11 */
		/* 8217C720h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 8217C720h case    9:*/		return 0x8217C724;
		  /* 8217C724h */ case   10:  		/* rlwinm R30, R10, 2, 0, 29 */
		/* 8217C724h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R30,regs.R10);
		/* 8217C724h case   10:*/		return 0x8217C728;
		  /* 8217C728h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217C728h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217C728h case   11:*/		return 0x8217C72C;
		  /* 8217C72Ch */ case   12:  		/* lwzx R10, <#[R9 + R31]> */
		/* 8217C72Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R31 + 0x00000000) );
		/* 8217C72Ch case   12:*/		return 0x8217C730;
		  /* 8217C730h */ case   13:  		/* lwzx R4, <#[R30 + R31]> */
		/* 8217C730h case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 8217C730h case   13:*/		return 0x8217C734;
		  /* 8217C734h */ case   14:  		/* lwzx R26, <#[R11 + R31]> */
		/* 8217C734h case   14:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 8217C734h case   14:*/		return 0x8217C738;
		  /* 8217C738h */ case   15:  		/* lwz R29, <#[R10 + 12]> */
		/* 8217C738h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217C738h case   15:*/		return 0x8217C73C;
		  /* 8217C73Ch */ case   16:  		/* bl -15916 */
		/* 8217C73Ch case   16:*/		regs.LR = 0x8217C740; return 0x82178910;
		/* 8217C73Ch case   16:*/		return 0x8217C740;
		  /* 8217C740h */ case   17:  		/* mr R4, R26 */
		/* 8217C740h case   17:*/		regs.R4 = regs.R26;
		/* 8217C740h case   17:*/		return 0x8217C744;
		  /* 8217C744h */ case   18:  		/* mr R3, R31 */
		/* 8217C744h case   18:*/		regs.R3 = regs.R31;
		/* 8217C744h case   18:*/		return 0x8217C748;
		  /* 8217C748h */ case   19:  		/* bl -17792 */
		/* 8217C748h case   19:*/		regs.LR = 0x8217C74C; return 0x821781C8;
		/* 8217C748h case   19:*/		return 0x8217C74C;
		  /* 8217C74Ch */ case   20:  		/* stwx R3, <#[R30 + R31]> */
		/* 8217C74Ch case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + regs.R31 + 0x00000000) );
		/* 8217C74Ch case   20:*/		return 0x8217C750;
		  /* 8217C750h */ case   21:  		/* mr R3, R29 */
		/* 8217C750h case   21:*/		regs.R3 = regs.R29;
		/* 8217C750h case   21:*/		return 0x8217C754;
		  /* 8217C754h */ case   22:  		/* bl -97748 */
		/* 8217C754h case   22:*/		regs.LR = 0x8217C758; return 0x82164980;
		/* 8217C754h case   22:*/		return 0x8217C758;
		  /* 8217C758h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C758h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C758h case   23:*/		return 0x8217C75C;
		  /* 8217C75Ch */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 8217C75Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x8217C76C;  }
		/* 8217C75Ch case   24:*/		return 0x8217C760;
		  /* 8217C760h */ case   25:  		/* mr R4, R29 */
		/* 8217C760h case   25:*/		regs.R4 = regs.R29;
		/* 8217C760h case   25:*/		return 0x8217C764;
		  /* 8217C764h */ case   26:  		/* mr R3, R28 */
		/* 8217C764h case   26:*/		regs.R3 = regs.R28;
		/* 8217C764h case   26:*/		return 0x8217C768;
		  /* 8217C768h */ case   27:  		/* bl 716520 */
		/* 8217C768h case   27:*/		regs.LR = 0x8217C76C; return 0x8222B650;
		/* 8217C768h case   27:*/		return 0x8217C76C;
	}
	return 0x8217C76C;
} // Block from 8217C6FCh-8217C76Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217C76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C76C);
		  /* 8217C76Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217C76Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217C76Ch case    0:*/		return 0x8217C770;
		  /* 8217C770h */ case    1:  		/* li R10, 3 */
		/* 8217C770h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 8217C770h case    1:*/		return 0x8217C774;
		  /* 8217C774h */ case    2:  		/* rlwimi R11, R10, 7, 18, 24 */
		/* 8217C774h case    2:*/		cpu::op::rlwimi<0,7,18,24>(regs,&regs.R11,regs.R10);
		/* 8217C774h case    2:*/		return 0x8217C778;
		  /* 8217C778h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 8217C778h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217C778h case    3:*/		return 0x8217C77C;
	}
	return 0x8217C77C;
} // Block from 8217C76Ch-8217C77Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217C77Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C77C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C77C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C77C);
		  /* 8217C77Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217C77Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217C77Ch case    0:*/		return 0x8217C780;
		  /* 8217C780h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8217C780h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8217C780h case    1:*/		return 0x8217C784;
		  /* 8217C784h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217C784h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217C784h case    2:*/		return 0x8217C788;
		  /* 8217C788h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217C788h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217C794;  }
		/* 8217C788h case    3:*/		return 0x8217C78C;
		  /* 8217C78Ch */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217C78Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217C78Ch case    4:*/		return 0x8217C790;
		  /* 8217C790h */ case    5:  		/* bc 4, CR6_EQ, -172 */
		/* 8217C790h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217C6E4;  }
		/* 8217C790h case    5:*/		return 0x8217C794;
	}
	return 0x8217C794;
} // Block from 8217C77Ch-8217C794h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C794h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C794( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C794) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C794);
		  /* 8217C794h */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 8217C794h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 8217C794h case    0:*/		return 0x8217C798;
		  /* 8217C798h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217C798h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C798h case    1:*/		return 0x8217C79C;
		  /* 8217C79Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C79Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C79Ch case    2:*/		return 0x8217C7A0;
		  /* 8217C7A0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217C7A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217C7B0;  }
		/* 8217C7A0h case    3:*/		return 0x8217C7A4;
		  /* 8217C7A4h */ case    4:  		/* mr R27, R11 */
		/* 8217C7A4h case    4:*/		regs.R27 = regs.R11;
		/* 8217C7A4h case    4:*/		return 0x8217C7A8;
		  /* 8217C7A8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217C7A8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C7A8h case    5:*/		return 0x8217C7AC;
		  /* 8217C7ACh */ case    6:  		/* bc 4, CR6_EQ, -220 */
		/* 8217C7ACh case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217C6D0;  }
		/* 8217C7ACh case    6:*/		return 0x8217C7B0;
	}
	return 0x8217C7B0;
} // Block from 8217C794h-8217C7B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217C7B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C7B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C7B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C7B0);
		  /* 8217C7B0h */ case    0:  		/* addi R1, R1, 144 */
		/* 8217C7B0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217C7B0h case    0:*/		return 0x8217C7B4;
		  /* 8217C7B4h */ case    1:  		/* b -963860 */
		/* 8217C7B4h case    1:*/		return 0x820912A0;
		/* 8217C7B4h case    1:*/		return 0x8217C7B8;
	}
	return 0x8217C7B8;
} // Block from 8217C7B0h-8217C7B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217C7B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C7B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C7B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C7B8);
		  /* 8217C7B8h */ case    0:  		/* mfspr R12, LR */
		/* 8217C7B8h case    0:*/		regs.R12 = regs.LR;
		/* 8217C7B8h case    0:*/		return 0x8217C7BC;
		  /* 8217C7BCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8217C7BCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8217C7BCh case    1:*/		return 0x8217C7C0;
		  /* 8217C7C0h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8217C7C0h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8217C7C0h case    2:*/		return 0x8217C7C4;
		  /* 8217C7C4h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8217C7C4h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8217C7C4h case    3:*/		return 0x8217C7C8;
		  /* 8217C7C8h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8217C7C8h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8217C7C8h case    4:*/		return 0x8217C7CC;
		  /* 8217C7CCh */ case    5:  		/* lwz R4, <#[R3 + 4]> */
		/* 8217C7CCh case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x00000004) );
		/* 8217C7CCh case    5:*/		return 0x8217C7D0;
		  /* 8217C7D0h */ case    6:  		/* mr R30, R3 */
		/* 8217C7D0h case    6:*/		regs.R30 = regs.R3;
		/* 8217C7D0h case    6:*/		return 0x8217C7D4;
		  /* 8217C7D4h */ case    7:  		/* rlwinm. R11, R4, 0, 31, 31 */
		/* 8217C7D4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R4);
		/* 8217C7D4h case    7:*/		return 0x8217C7D8;
		  /* 8217C7D8h */ case    8:  		/* bc 4, CR0_EQ, 100 */
		/* 8217C7D8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217C83C;  }
		/* 8217C7D8h case    8:*/		return 0x8217C7DC;
		  /* 8217C7DCh */ case    9:  		/* cmplwi CR0, R4, 0 */
		/* 8217C7DCh case    9:*/		cpu::op::cmplwi<0>(regs,regs.R4,0x00000000);
		/* 8217C7DCh case    9:*/		return 0x8217C7E0;
		  /* 8217C7E0h */ case   10:  		/* bc 12, CR0_EQ, 92 */
		/* 8217C7E0h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217C83C;  }
		/* 8217C7E0h case   10:*/		return 0x8217C7E4;
		  /* 8217C7E4h */ case   11:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8217C7E4h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8217C7E4h case   11:*/		return 0x8217C7E8;
		  /* 8217C7E8h */ case   12:  		/* mr R3, R30 */
		/* 8217C7E8h case   12:*/		regs.R3 = regs.R30;
		/* 8217C7E8h case   12:*/		return 0x8217C7EC;
		  /* 8217C7ECh */ case   13:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217C7ECh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C7ECh case   13:*/		return 0x8217C7F0;
		  /* 8217C7F0h */ case   14:  		/* lwz R9, <#[R11]> */
		/* 8217C7F0h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C7F0h case   14:*/		return 0x8217C7F4;
		  /* 8217C7F4h */ case   15:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8217C7F4h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8217C7F4h case   15:*/		return 0x8217C7F8;
		  /* 8217C7F8h */ case   16:  		/* lwz R8, <#[R11 + 4]> */
		/* 8217C7F8h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C7F8h case   16:*/		return 0x8217C7FC;
		  /* 8217C7FCh */ case   17:  		/* rlwinm R7, R8, 0, 31, 31 */
		/* 8217C7FCh case   17:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R8);
		/* 8217C7FCh case   17:*/		return 0x8217C800;
		  /* 8217C800h */ case   18:  		/* addic R7, R7, -1 */
		/* 8217C800h case   18:*/		cpu::op::addic<0>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 8217C800h case   18:*/		return 0x8217C804;
		  /* 8217C804h */ case   19:  		/* stw R9, <#[R10]> */
		/* 8217C804h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217C804h case   19:*/		return 0x8217C808;
		  /* 8217C808h */ case   20:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217C808h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C808h case   20:*/		return 0x8217C80C;
		  /* 8217C80Ch */ case   21:  		/* subfe R9, R7, R7 */
		/* 8217C80Ch case   21:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R7,regs.R7);
		/* 8217C80Ch case   21:*/		return 0x8217C810;
		  /* 8217C810h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 8217C810h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C810h case   22:*/		return 0x8217C814;
		  /* 8217C814h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217C814h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217C814h case   23:*/		return 0x8217C818;
		  /* 8217C818h */ case   24:  		/* stw R10, <#[R11]> */
		/* 8217C818h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C818h case   24:*/		return 0x8217C81C;
		  /* 8217C81Ch */ case   25:  		/* and R31, R9, R8 */
		/* 8217C81Ch case   25:*/		cpu::op::and<0>(regs,&regs.R31,regs.R9,regs.R8);
		/* 8217C81Ch case   25:*/		return 0x8217C820;
		  /* 8217C820h */ case   26:  		/* lwz R11, <#[R4 + 12]> */
		/* 8217C820h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8217C820h case   26:*/		return 0x8217C824;
		  /* 8217C824h */ case   27:  		/* mulli R11, R11, 36 */
		/* 8217C824h case   27:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217C824h case   27:*/		return 0x8217C828;
		  /* 8217C828h */ case   28:  		/* addi R5, R11, 16 */
		/* 8217C828h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x10);
		/* 8217C828h case   28:*/		return 0x8217C82C;
		  /* 8217C82Ch */ case   29:  		/* bl -174628 */
		/* 8217C82Ch case   29:*/		regs.LR = 0x8217C830; return 0x82151E08;
		/* 8217C82Ch case   29:*/		return 0x8217C830;
		  /* 8217C830h */ case   30:  		/* mr R4, R31 */
		/* 8217C830h case   30:*/		regs.R4 = regs.R31;
		/* 8217C830h case   30:*/		return 0x8217C834;
		  /* 8217C834h */ case   31:  		/* cmplwi CR6, R31, 0 */
		/* 8217C834h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217C834h case   31:*/		return 0x8217C838;
		  /* 8217C838h */ case   32:  		/* bc 4, CR6_EQ, -84 */
		/* 8217C838h case   32:*/		if ( !regs.CR[6].eq ) { return 0x8217C7E4;  }
		/* 8217C838h case   32:*/		return 0x8217C83C;
	}
	return 0x8217C83C;
} // Block from 8217C7B8h-8217C83Ch (33 instructions)

//////////////////////////////////////////////////////
// Block at 8217C83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C83C);
		  /* 8217C83Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 8217C83Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8217C83Ch case    0:*/		return 0x8217C840;
		  /* 8217C840h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 8217C840h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8217C840h case    1:*/		return 0x8217C844;
		  /* 8217C844h */ case    2:  		/* mtspr LR, R12 */
		/* 8217C844h case    2:*/		regs.LR = regs.R12;
		/* 8217C844h case    2:*/		return 0x8217C848;
		  /* 8217C848h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 8217C848h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8217C848h case    3:*/		return 0x8217C84C;
		  /* 8217C84Ch */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 8217C84Ch case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8217C84Ch case    4:*/		return 0x8217C850;
		  /* 8217C850h */ case    5:  		/* bclr 20, CR0_LT */
		/* 8217C850h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8217C850h case    5:*/		return 0x8217C854;
	}
	return 0x8217C854;
} // Block from 8217C83Ch-8217C854h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C854);
		  /* 8217C854h */ case    0:  		/* nop */
		/* 8217C854h case    0:*/		cpu::op::nop();
		/* 8217C854h case    0:*/		return 0x8217C858;
	}
	return 0x8217C858;
} // Block from 8217C854h-8217C858h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C858h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C858( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C858) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C858);
		  /* 8217C858h */ case    0:  		/* mfspr R12, LR */
		/* 8217C858h case    0:*/		regs.R12 = regs.LR;
		/* 8217C858h case    0:*/		return 0x8217C85C;
		  /* 8217C85Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 8217C85Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8217C85Ch case    1:*/		return 0x8217C860;
		  /* 8217C860h */ case    2:  		/* std R30, <#[R1 - 24]> */
		/* 8217C860h case    2:*/		cpu::mem::store64( regs, regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8217C860h case    2:*/		return 0x8217C864;
		  /* 8217C864h */ case    3:  		/* std R31, <#[R1 - 16]> */
		/* 8217C864h case    3:*/		cpu::mem::store64( regs, regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8217C864h case    3:*/		return 0x8217C868;
		  /* 8217C868h */ case    4:  		/* stwu R1, <#[R1 - 112]> */
		/* 8217C868h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8217C868h case    4:*/		return 0x8217C86C;
		  /* 8217C86Ch */ case    5:  		/* mr R31, R3 */
		/* 8217C86Ch case    5:*/		regs.R31 = regs.R3;
		/* 8217C86Ch case    5:*/		return 0x8217C870;
		  /* 8217C870h */ case    6:  		/* cmplwi CR6, R4, 10 */
		/* 8217C870h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000000A);
		/* 8217C870h case    6:*/		return 0x8217C874;
		  /* 8217C874h */ case    7:  		/* mr R30, R4 */
		/* 8217C874h case    7:*/		regs.R30 = regs.R4;
		/* 8217C874h case    7:*/		return 0x8217C878;
		  /* 8217C878h */ case    8:  		/* bc 12, CR6_GT, 8 */
		/* 8217C878h case    8:*/		if ( regs.CR[6].gt ) { return 0x8217C880;  }
		/* 8217C878h case    8:*/		return 0x8217C87C;
		  /* 8217C87Ch */ case    9:  		/* li R30, 10 */
		/* 8217C87Ch case    9:*/		cpu::op::li<0>(regs,&regs.R30,0xA);
		/* 8217C87Ch case    9:*/		return 0x8217C880;
	}
	return 0x8217C880;
} // Block from 8217C858h-8217C880h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217C880h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C880( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C880) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C880);
		  /* 8217C880h */ case    0:  		/* mulli R11, R30, 36 */
		/* 8217C880h case    0:*/		cpu::op::mulli<0>(regs,&regs.R11,regs.R30,0x24);
		/* 8217C880h case    0:*/		return 0x8217C884;
		  /* 8217C884h */ case    1:  		/* addi R4, R11, 16 */
		/* 8217C884h case    1:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0x10);
		/* 8217C884h case    1:*/		return 0x8217C888;
		  /* 8217C888h */ case    2:  		/* mr R3, R31 */
		/* 8217C888h case    2:*/		regs.R3 = regs.R31;
		/* 8217C888h case    2:*/		return 0x8217C88C;
		  /* 8217C88Ch */ case    3:  		/* bl -96516 */
		/* 8217C88Ch case    3:*/		regs.LR = 0x8217C890; return 0x82164F88;
		/* 8217C88Ch case    3:*/		return 0x8217C890;
		  /* 8217C890h */ case    4:  		/* li R9, 0 */
		/* 8217C890h case    4:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8217C890h case    4:*/		return 0x8217C894;
		  /* 8217C894h */ case    5:  		/* stw R30, <#[R3 + 12]> */
		/* 8217C894h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217C894h case    5:*/		return 0x8217C898;
		  /* 8217C898h */ case    6:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 8217C898h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 8217C898h case    6:*/		return 0x8217C89C;
		  /* 8217C89Ch */ case    7:  		/* stw R9, <#[R3 + 8]> */
		/* 8217C89Ch case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8217C89Ch case    7:*/		return 0x8217C8A0;
		  /* 8217C8A0h */ case    8:  		/* ori R8, R31, 1 */
		/* 8217C8A0h case    8:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R31,0x1);
		/* 8217C8A0h case    8:*/		return 0x8217C8A4;
		  /* 8217C8A4h */ case    9:  		/* lwz R9, <#[R31]> */
		/* 8217C8A4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8217C8A4h case    9:*/		return 0x8217C8A8;
		  /* 8217C8A8h */ case   10:  		/* addi R10, R11, 4 */
		/* 8217C8A8h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217C8A8h case   10:*/		return 0x8217C8AC;
		  /* 8217C8ACh */ case   11:  		/* stw R9, <#[R11]> */
		/* 8217C8ACh case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217C8ACh case   11:*/		return 0x8217C8B0;
		  /* 8217C8B0h */ case   12:  		/* lwz R9, <#[R31]> */
		/* 8217C8B0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8217C8B0h case   12:*/		return 0x8217C8B4;
		  /* 8217C8B4h */ case   13:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217C8B4h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217C8B4h case   13:*/		return 0x8217C8B8;
		  /* 8217C8B8h */ case   14:  		/* stw R11, <#[R9]> */
		/* 8217C8B8h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8217C8B8h case   14:*/		return 0x8217C8BC;
		  /* 8217C8BCh */ case   15:  		/* stw R8, <#[R11 + 4]> */
		/* 8217C8BCh case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217C8BCh case   15:*/		return 0x8217C8C0;
		  /* 8217C8C0h */ case   16:  		/* stw R10, <#[R31]> */
		/* 8217C8C0h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8217C8C0h case   16:*/		return 0x8217C8C4;
		  /* 8217C8C4h */ case   17:  		/* addi R1, R1, 112 */
		/* 8217C8C4h case   17:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8217C8C4h case   17:*/		return 0x8217C8C8;
		  /* 8217C8C8h */ case   18:  		/* lwz R12, <#[R1 - 8]> */
		/* 8217C8C8h case   18:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 8217C8C8h case   18:*/		return 0x8217C8CC;
		  /* 8217C8CCh */ case   19:  		/* mtspr LR, R12 */
		/* 8217C8CCh case   19:*/		regs.LR = regs.R12;
		/* 8217C8CCh case   19:*/		return 0x8217C8D0;
		  /* 8217C8D0h */ case   20:  		/* ld R30, <#[R1 - 24]> */
		/* 8217C8D0h case   20:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 8217C8D0h case   20:*/		return 0x8217C8D4;
		  /* 8217C8D4h */ case   21:  		/* ld R31, <#[R1 - 16]> */
		/* 8217C8D4h case   21:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 8217C8D4h case   21:*/		return 0x8217C8D8;
		  /* 8217C8D8h */ case   22:  		/* bclr 20, CR0_LT */
		/* 8217C8D8h case   22:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8217C8D8h case   22:*/		return 0x8217C8DC;
	}
	return 0x8217C8DC;
} // Block from 8217C880h-8217C8DCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 8217C8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C8DC);
		  /* 8217C8DCh */ case    0:  		/* nop */
		/* 8217C8DCh case    0:*/		cpu::op::nop();
		/* 8217C8DCh case    0:*/		return 0x8217C8E0;
	}
	return 0x8217C8E0;
} // Block from 8217C8DCh-8217C8E0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C8E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C8E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C8E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C8E0);
		  /* 8217C8E0h */ case    0:  		/* mfspr R12, LR */
		/* 8217C8E0h case    0:*/		regs.R12 = regs.LR;
		/* 8217C8E0h case    0:*/		return 0x8217C8E4;
		  /* 8217C8E4h */ case    1:  		/* bl -964240 */
		/* 8217C8E4h case    1:*/		regs.LR = 0x8217C8E8; return 0x82091254;
		/* 8217C8E4h case    1:*/		return 0x8217C8E8;
		  /* 8217C8E8h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8217C8E8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8217C8E8h case    2:*/		return 0x8217C8EC;
		  /* 8217C8ECh */ case    3:  		/* lwz R11, <#[R4 + 36]> */
		/* 8217C8ECh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 8217C8ECh case    3:*/		return 0x8217C8F0;
		  /* 8217C8F0h */ case    4:  		/* mr R27, R3 */
		/* 8217C8F0h case    4:*/		regs.R27 = regs.R3;
		/* 8217C8F0h case    4:*/		return 0x8217C8F4;
		  /* 8217C8F4h */ case    5:  		/* mr R29, R4 */
		/* 8217C8F4h case    5:*/		regs.R29 = regs.R4;
		/* 8217C8F4h case    5:*/		return 0x8217C8F8;
		  /* 8217C8F8h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C8F8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C8F8h case    6:*/		return 0x8217C8FC;
		  /* 8217C8FCh */ case    7:  		/* bc 4, CR0_EQ, 60 */
		/* 8217C8FCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x8217C938;  }
		/* 8217C8FCh case    7:*/		return 0x8217C900;
		  /* 8217C900h */ case    8:  		/* mr R30, R11 */
		/* 8217C900h case    8:*/		regs.R30 = regs.R11;
		/* 8217C900h case    8:*/		return 0x8217C904;
		  /* 8217C904h */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8217C904h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217C904h case    9:*/		return 0x8217C908;
		  /* 8217C908h */ case   10:  		/* bc 12, CR0_EQ, 48 */
		/* 8217C908h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217C938;  }
		/* 8217C908h case   10:*/		return 0x8217C90C;
		  /* 8217C90Ch */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217C90Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217C90Ch case   11:*/		return 0x8217C910;
		  /* 8217C910h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217C910h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217C910h case   12:*/		return 0x8217C914;
		  /* 8217C914h */ case   13:  		/* cmplwi CR6, R11, 10624 */
		/* 8217C914h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 8217C914h case   13:*/		return 0x8217C918;
		  /* 8217C918h */ case   14:  		/* bc 12, CR6_EQ, 44 */
		/* 8217C918h case   14:*/		if ( regs.CR[6].eq ) { return 0x8217C944;  }
		/* 8217C918h case   14:*/		return 0x8217C91C;
		  /* 8217C91Ch */ case   15:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217C91Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217C91Ch case   15:*/		return 0x8217C920;
		  /* 8217C920h */ case   16:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217C920h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217C920h case   16:*/		return 0x8217C924;
		  /* 8217C924h */ case   17:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217C924h case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217C924h case   17:*/		return 0x8217C928;
		  /* 8217C928h */ case   18:  		/* bc 4, CR0_EQ, 16 */
		/* 8217C928h case   18:*/		if ( !regs.CR[0].eq ) { return 0x8217C938;  }
		/* 8217C928h case   18:*/		return 0x8217C92C;
		  /* 8217C92Ch */ case   19:  		/* mr R30, R11 */
		/* 8217C92Ch case   19:*/		regs.R30 = regs.R11;
		/* 8217C92Ch case   19:*/		return 0x8217C930;
		  /* 8217C930h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 8217C930h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C930h case   20:*/		return 0x8217C934;
		  /* 8217C934h */ case   21:  		/* bc 4, CR6_EQ, -40 */
		/* 8217C934h case   21:*/		if ( !regs.CR[6].eq ) { return 0x8217C90C;  }
		/* 8217C934h case   21:*/		return 0x8217C938;
	}
	return 0x8217C938;
} // Block from 8217C8E0h-8217C938h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217C938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C938);
		  /* 8217C938h */ case    0:  		/* li R4, 4800 */
		/* 8217C938h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217C938h case    0:*/		return 0x8217C93C;
		  /* 8217C93Ch */ case    1:  		/* mr R3, R27 */
		/* 8217C93Ch case    1:*/		regs.R3 = regs.R27;
		/* 8217C93Ch case    1:*/		return 0x8217C940;
		  /* 8217C940h */ case    2:  		/* bl -174808 */
		/* 8217C940h case    2:*/		regs.LR = 0x8217C944; return 0x82151E68;
		/* 8217C940h case    2:*/		return 0x8217C944;
	}
	return 0x8217C944;
} // Block from 8217C938h-8217C944h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217C944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C944);
		  /* 8217C944h */ case    0:  		/* lwz R28, <#[R29 + 8]> */
		/* 8217C944h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x00000008) );
		/* 8217C944h case    0:*/		return 0x8217C948;
		  /* 8217C948h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8217C948h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8217C948h case    1:*/		return 0x8217C94C;
		  /* 8217C94Ch */ case    2:  		/* bc 12, CR6_EQ, 120 */
		/* 8217C94Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8217C9C4;  }
		/* 8217C94Ch case    2:*/		return 0x8217C950;
		  /* 8217C950h */ case    3:  		/* lwz R31, <#[R28 + 4]> */
		/* 8217C950h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000004) );
		/* 8217C950h case    3:*/		return 0x8217C954;
		  /* 8217C954h */ case    4:  		/* b 60 */
		/* 8217C954h case    4:*/		return 0x8217C990;
		/* 8217C954h case    4:*/		return 0x8217C958;
		  /* 8217C958h */ case    5:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217C958h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217C958h case    5:*/		return 0x8217C95C;
		  /* 8217C95Ch */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 8217C95Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217C95Ch case    6:*/		return 0x8217C960;
		  /* 8217C960h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 8217C960h case    7:*/		if ( regs.CR[6].eq ) { return 0x8217C974;  }
		/* 8217C960h case    7:*/		return 0x8217C964;
		  /* 8217C964h */ case    8:  		/* lwz R11, <#[R10 + 12]> */
		/* 8217C964h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217C964h case    8:*/		return 0x8217C968;
		  /* 8217C968h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 8217C968h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217C968h case    9:*/		return 0x8217C96C;
		  /* 8217C96Ch */ case   10:  		/* li R11, 1 */
		/* 8217C96Ch case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217C96Ch case   10:*/		return 0x8217C970;
		  /* 8217C970h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 8217C970h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8217C978;  }
		/* 8217C970h case   11:*/		return 0x8217C974;
	}
	return 0x8217C974;
} // Block from 8217C944h-8217C974h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217C974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C974);
		  /* 8217C974h */ case    0:  		/* li R11, 0 */
		/* 8217C974h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217C974h case    0:*/		return 0x8217C978;
	}
	return 0x8217C978;
} // Block from 8217C974h-8217C978h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217C978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C978);
		  /* 8217C978h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217C978h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217C978h case    0:*/		return 0x8217C97C;
		  /* 8217C97Ch */ case    1:  		/* bc 4, CR0_EQ, 60 */
		/* 8217C97Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217C9B8;  }
		/* 8217C97Ch case    1:*/		return 0x8217C980;
		  /* 8217C980h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8217C980h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217C980h case    2:*/		return 0x8217C984;
		  /* 8217C984h */ case    3:  		/* li R31, 0 */
		/* 8217C984h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8217C984h case    3:*/		return 0x8217C988;
		  /* 8217C988h */ case    4:  		/* bc 12, CR6_EQ, 8 */
		/* 8217C988h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217C990;  }
		/* 8217C988h case    4:*/		return 0x8217C98C;
		  /* 8217C98Ch */ case    5:  		/* lwz R31, <#[R10 + 4]> */
		/* 8217C98Ch case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000004) );
		/* 8217C98Ch case    5:*/		return 0x8217C990;
	}
	return 0x8217C990;
} // Block from 8217C978h-8217C990h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217C990h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C990( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C990) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C990);
		  /* 8217C990h */ case    0:  		/* li R7, 0 */
		/* 8217C990h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217C990h case    0:*/		return 0x8217C994;
		  /* 8217C994h */ case    1:  		/* mr R6, R30 */
		/* 8217C994h case    1:*/		regs.R6 = regs.R30;
		/* 8217C994h case    1:*/		return 0x8217C998;
		  /* 8217C998h */ case    2:  		/* mr R5, R29 */
		/* 8217C998h case    2:*/		regs.R5 = regs.R29;
		/* 8217C998h case    2:*/		return 0x8217C99C;
		  /* 8217C99Ch */ case    3:  		/* mr R4, R31 */
		/* 8217C99Ch case    3:*/		regs.R4 = regs.R31;
		/* 8217C99Ch case    3:*/		return 0x8217C9A0;
		  /* 8217C9A0h */ case    4:  		/* mr R3, R27 */
		/* 8217C9A0h case    4:*/		regs.R3 = regs.R27;
		/* 8217C9A0h case    4:*/		return 0x8217C9A4;
		  /* 8217C9A4h */ case    5:  		/* bl -8876 */
		/* 8217C9A4h case    5:*/		regs.LR = 0x8217C9A8; return 0x8217A6F8;
		/* 8217C9A4h case    5:*/		return 0x8217C9A8;
		  /* 8217C9A8h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217C9A8h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217C9A8h case    6:*/		return 0x8217C9AC;
		  /* 8217C9ACh */ case    7:  		/* bc 12, CR0_EQ, -84 */
		/* 8217C9ACh case    7:*/		if ( regs.CR[0].eq ) { return 0x8217C958;  }
		/* 8217C9ACh case    7:*/		return 0x8217C9B0;
		  /* 8217C9B0h */ case    8:  		/* lwz R28, <#[R28 + 12]> */
		/* 8217C9B0h case    8:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x0000000C) );
		/* 8217C9B0h case    8:*/		return 0x8217C9B4;
		  /* 8217C9B4h */ case    9:  		/* b -108 */
		/* 8217C9B4h case    9:*/		return 0x8217C948;
		/* 8217C9B4h case    9:*/		return 0x8217C9B8;
	}
	return 0x8217C9B8;
} // Block from 8217C990h-8217C9B8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217C9B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C9B8);
		  /* 8217C9B8h */ case    0:  		/* li R4, 4800 */
		/* 8217C9B8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217C9B8h case    0:*/		return 0x8217C9BC;
		  /* 8217C9BCh */ case    1:  		/* mr R3, R27 */
		/* 8217C9BCh case    1:*/		regs.R3 = regs.R27;
		/* 8217C9BCh case    1:*/		return 0x8217C9C0;
		  /* 8217C9C0h */ case    2:  		/* bl -174936 */
		/* 8217C9C0h case    2:*/		regs.LR = 0x8217C9C4; return 0x82151E68;
		/* 8217C9C0h case    2:*/		return 0x8217C9C4;
	}
	return 0x8217C9C4;
} // Block from 8217C9B8h-8217C9C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217C9C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C9C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C9C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C9C4);
		  /* 8217C9C4h */ case    0:  		/* addi R1, R1, 128 */
		/* 8217C9C4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217C9C4h case    0:*/		return 0x8217C9C8;
		  /* 8217C9C8h */ case    1:  		/* b -964388 */
		/* 8217C9C8h case    1:*/		return 0x820912A4;
		/* 8217C9C8h case    1:*/		return 0x8217C9CC;
		  /* 8217C9CCh */ case    2:  		/* nop */
		/* 8217C9CCh case    2:*/		cpu::op::nop();
		/* 8217C9CCh case    2:*/		return 0x8217C9D0;
	}
	return 0x8217C9D0;
} // Block from 8217C9C4h-8217C9D0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217C9D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C9D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C9D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C9D0);
		  /* 8217C9D0h */ case    0:  		/* mfspr R12, LR */
		/* 8217C9D0h case    0:*/		regs.R12 = regs.LR;
		/* 8217C9D0h case    0:*/		return 0x8217C9D4;
		  /* 8217C9D4h */ case    1:  		/* bl -964528 */
		/* 8217C9D4h case    1:*/		regs.LR = 0x8217C9D8; return 0x82091224;
		/* 8217C9D4h case    1:*/		return 0x8217C9D8;
		  /* 8217C9D8h */ case    2:  		/* stfd FR31, <#[R1 - 152]> */
		/* 8217C9D8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF68) );
		/* 8217C9D8h case    2:*/		return 0x8217C9DC;
		  /* 8217C9DCh */ case    3:  		/* stwu R1, <#[R1 - 320]> */
		/* 8217C9DCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEC0);
		/* 8217C9DCh case    3:*/		return 0x8217C9E0;
		  /* 8217C9E0h */ case    4:  		/* lwz R11, <#[R3 + 44]> */
		/* 8217C9E0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000002C) );
		/* 8217C9E0h case    4:*/		return 0x8217C9E4;
		  /* 8217C9E4h */ case    5:  		/* mr R16, R3 */
		/* 8217C9E4h case    5:*/		regs.R16 = regs.R3;
		/* 8217C9E4h case    5:*/		return 0x8217C9E8;
		  /* 8217C9E8h */ case    6:  		/* rlwinm. R11, R11, 0, 16, 16 */
		/* 8217C9E8h case    6:*/		cpu::op::rlwinm<1,0,16,16>(regs,&regs.R11,regs.R11);
		/* 8217C9E8h case    6:*/		return 0x8217C9EC;
		  /* 8217C9ECh */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 8217C9ECh case    7:*/		if ( regs.CR[0].eq ) { return 0x8217C9F8;  }
		/* 8217C9ECh case    7:*/		return 0x8217C9F0;
		  /* 8217C9F0h */ case    8:  		/* li R3, 0 */
		/* 8217C9F0h case    8:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217C9F0h case    8:*/		return 0x8217C9F4;
		  /* 8217C9F4h */ case    9:  		/* b 4340 */
		/* 8217C9F4h case    9:*/		return 0x8217DAE8;
		/* 8217C9F4h case    9:*/		return 0x8217C9F8;
	}
	return 0x8217C9F8;
} // Block from 8217C9D0h-8217C9F8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217C9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217C9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217C9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217C9F8);
		  /* 8217C9F8h */ case    0:  		/* lwz R11, <#[R16 + 40]> */
		/* 8217C9F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000028) );
		/* 8217C9F8h case    0:*/		return 0x8217C9FC;
		  /* 8217C9FCh */ case    1:  		/* li R15, 0 */
		/* 8217C9FCh case    1:*/		cpu::op::li<0>(regs,&regs.R15,0x0);
		/* 8217C9FCh case    1:*/		return 0x8217CA00;
		  /* 8217CA00h */ case    2:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 8217CA00h case    2:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 8217CA00h case    2:*/		return 0x8217CA04;
		  /* 8217CA04h */ case    3:  		/* bc 12, CR0_EQ, 3640 */
		/* 8217CA04h case    3:*/		if ( regs.CR[0].eq ) { return 0x8217D83C;  }
		/* 8217CA04h case    3:*/		return 0x8217CA08;
		  /* 8217CA08h */ case    4:  		/* lwz R11, <#[R16 + 4]> */
		/* 8217CA08h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000004) );
		/* 8217CA08h case    4:*/		return 0x8217CA0C;
		  /* 8217CA0Ch */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217CA0Ch case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217CA0Ch case    5:*/		return 0x8217CA10;
		  /* 8217CA10h */ case    6:  		/* bc 4, CR0_EQ, 116 */
		/* 8217CA10h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217CA84;  }
		/* 8217CA10h case    6:*/		return 0x8217CA14;
		  /* 8217CA14h */ case    7:  		/* mr R30, R11 */
		/* 8217CA14h case    7:*/		regs.R30 = regs.R11;
		/* 8217CA14h case    7:*/		return 0x8217CA18;
		  /* 8217CA18h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 8217CA18h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217CA18h case    8:*/		return 0x8217CA1C;
		  /* 8217CA1Ch */ case    9:  		/* bc 12, CR0_EQ, 104 */
		/* 8217CA1Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8217CA84;  }
		/* 8217CA1Ch case    9:*/		return 0x8217CA20;
		  /* 8217CA20h */ case   10:  		/* lwz R31, <#[R30 + 28]> */
		/* 8217CA20h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		/* 8217CA20h case   10:*/		return 0x8217CA24;
		  /* 8217CA24h */ case   11:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217CA24h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217CA24h case   11:*/		return 0x8217CA28;
		  /* 8217CA28h */ case   12:  		/* bc 4, CR0_EQ, 64 */
		/* 8217CA28h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217CA68;  }
		/* 8217CA28h case   12:*/		return 0x8217CA2C;
		  /* 8217CA2Ch */ case   13:  		/* cmplwi CR0, R31, 0 */
		/* 8217CA2Ch case   13:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217CA2Ch case   13:*/		return 0x8217CA30;
		  /* 8217CA30h */ case   14:  		/* bc 12, CR0_EQ, 56 */
		/* 8217CA30h case   14:*/		if ( regs.CR[0].eq ) { return 0x8217CA68;  }
		/* 8217CA30h case   14:*/		return 0x8217CA34;
		  /* 8217CA34h */ case   15:  		/* mr R3, R31 */
		/* 8217CA34h case   15:*/		regs.R3 = regs.R31;
		/* 8217CA34h case   15:*/		return 0x8217CA38;
		  /* 8217CA38h */ case   16:  		/* bl -100600 */
		/* 8217CA38h case   16:*/		regs.LR = 0x8217CA3C; return 0x82164140;
		/* 8217CA38h case   16:*/		return 0x8217CA3C;
		  /* 8217CA3Ch */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217CA3Ch case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217CA3Ch case   17:*/		return 0x8217CA40;
		  /* 8217CA40h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 8217CA40h case   18:*/		if ( regs.CR[0].eq ) { return 0x8217CA50;  }
		/* 8217CA40h case   18:*/		return 0x8217CA44;
		  /* 8217CA44h */ case   19:  		/* lwz R11, <#[R31 + 20]> */
		/* 8217CA44h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CA44h case   19:*/		return 0x8217CA48;
		  /* 8217CA48h */ case   20:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 8217CA48h case   20:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 8217CA48h case   20:*/		return 0x8217CA4C;
		  /* 8217CA4Ch */ case   21:  		/* stw R11, <#[R31 + 20]> */
		/* 8217CA4Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CA4Ch case   21:*/		return 0x8217CA50;
	}
	return 0x8217CA50;
} // Block from 8217C9F8h-8217CA50h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217CA50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CA50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CA50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CA50);
		  /* 8217CA50h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217CA50h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217CA50h case    0:*/		return 0x8217CA54;
		  /* 8217CA54h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8217CA54h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8217CA54h case    1:*/		return 0x8217CA58;
		  /* 8217CA58h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217CA58h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217CA58h case    2:*/		return 0x8217CA5C;
		  /* 8217CA5Ch */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217CA5Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217CA68;  }
		/* 8217CA5Ch case    3:*/		return 0x8217CA60;
		  /* 8217CA60h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217CA60h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217CA60h case    4:*/		return 0x8217CA64;
		  /* 8217CA64h */ case    5:  		/* bc 4, CR6_EQ, -48 */
		/* 8217CA64h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217CA34;  }
		/* 8217CA64h case    5:*/		return 0x8217CA68;
	}
	return 0x8217CA68;
} // Block from 8217CA50h-8217CA68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217CA68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CA68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CA68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CA68);
		  /* 8217CA68h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217CA68h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217CA68h case    0:*/		return 0x8217CA6C;
		  /* 8217CA6Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217CA6Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217CA6Ch case    1:*/		return 0x8217CA70;
		  /* 8217CA70h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217CA70h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217CA70h case    2:*/		return 0x8217CA74;
		  /* 8217CA74h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217CA74h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217CA84;  }
		/* 8217CA74h case    3:*/		return 0x8217CA78;
		  /* 8217CA78h */ case    4:  		/* mr R30, R11 */
		/* 8217CA78h case    4:*/		regs.R30 = regs.R11;
		/* 8217CA78h case    4:*/		return 0x8217CA7C;
		  /* 8217CA7Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217CA7Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217CA7Ch case    5:*/		return 0x8217CA80;
	}
	return 0x8217CA80;
} // Block from 8217CA68h-8217CA80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217CA80h
// Function '?PHIHasMERGEDependentInBlocks@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PAVBlock@2@111@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CA80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CA80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CA80);
		  /* 8217CA80h */ case    0:  		/* bc 4, CR6_EQ, -96 */
		/* 8217CA80h case    0:*/		if ( !regs.CR[6].eq ) { return 0x8217CA20;  }
		/* 8217CA80h case    0:*/		return 0x8217CA84;
	}
	return 0x8217CA84;
} // Block from 8217CA80h-8217CA84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217CA84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CA84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CA84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CA84);
		  /* 8217CA84h */ case    0:  		/* lwz R11, <#[R16 + 4]> */
		/* 8217CA84h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000004) );
		/* 8217CA84h case    0:*/		return 0x8217CA88;
		  /* 8217CA88h */ case    1:  		/* li R29, 0 */
		/* 8217CA88h case    1:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8217CA88h case    1:*/		return 0x8217CA8C;
		  /* 8217CA8Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217CA8Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217CA8Ch case    2:*/		return 0x8217CA90;
		  /* 8217CA90h */ case    3:  		/* bc 4, CR0_EQ, 548 */
		/* 8217CA90h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217CCB4;  }
		/* 8217CA90h case    3:*/		return 0x8217CA94;
		  /* 8217CA94h */ case    4:  		/* mr R28, R11 */
		/* 8217CA94h case    4:*/		regs.R28 = regs.R11;
		/* 8217CA94h case    4:*/		return 0x8217CA98;
		  /* 8217CA98h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 8217CA98h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217CA98h case    5:*/		return 0x8217CA9C;
		  /* 8217CA9Ch */ case    6:  		/* bc 12, CR0_EQ, 536 */
		/* 8217CA9Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x8217CCB4;  }
		/* 8217CA9Ch case    6:*/		return 0x8217CAA0;
		  /* 8217CAA0h */ case    7:  		/* lwz R31, <#[R28 + 28]> */
		/* 8217CAA0h case    7:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x0000001C) );
		/* 8217CAA0h case    7:*/		return 0x8217CAA4;
		  /* 8217CAA4h */ case    8:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217CAA4h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217CAA4h case    8:*/		return 0x8217CAA8;
		  /* 8217CAA8h */ case    9:  		/* bc 4, CR0_EQ, 428 */
		/* 8217CAA8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8217CC54;  }
		/* 8217CAA8h case    9:*/		return 0x8217CAAC;
		  /* 8217CAACh */ case   10:  		/* cmplwi CR0, R31, 0 */
		/* 8217CAACh case   10:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217CAACh case   10:*/		return 0x8217CAB0;
		  /* 8217CAB0h */ case   11:  		/* bc 12, CR0_EQ, 420 */
		/* 8217CAB0h case   11:*/		if ( regs.CR[0].eq ) { return 0x8217CC54;  }
		/* 8217CAB0h case   11:*/		return 0x8217CAB4;
		  /* 8217CAB4h */ case   12:  		/* mr R3, R31 */
		/* 8217CAB4h case   12:*/		regs.R3 = regs.R31;
		/* 8217CAB4h case   12:*/		return 0x8217CAB8;
		  /* 8217CAB8h */ case   13:  		/* bl -100728 */
		/* 8217CAB8h case   13:*/		regs.LR = 0x8217CABC; return 0x82164140;
		/* 8217CAB8h case   13:*/		return 0x8217CABC;
		  /* 8217CABCh */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217CABCh case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217CABCh case   14:*/		return 0x8217CAC0;
		  /* 8217CAC0h */ case   15:  		/* bc 12, CR0_EQ, 380 */
		/* 8217CAC0h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217CC3C;  }
		/* 8217CAC0h case   15:*/		return 0x8217CAC4;
		  /* 8217CAC4h */ case   16:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217CAC4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217CAC4h case   16:*/		return 0x8217CAC8;
		  /* 8217CAC8h */ case   17:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217CAC8h case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217CAC8h case   17:*/		return 0x8217CACC;
		  /* 8217CACCh */ case   18:  		/* cmpwi CR6, R11, 65 */
		/* 8217CACCh case   18:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000041);
		/* 8217CACCh case   18:*/		return 0x8217CAD0;
		  /* 8217CAD0h */ case   19:  		/* bc 12, CR6_GT, 84 */
		/* 8217CAD0h case   19:*/		if ( regs.CR[6].gt ) { return 0x8217CB24;  }
		/* 8217CAD0h case   19:*/		return 0x8217CAD4;
		  /* 8217CAD4h */ case   20:  		/* bc 12, CR6_EQ, 48 */
		/* 8217CAD4h case   20:*/		if ( regs.CR[6].eq ) { return 0x8217CB04;  }
		/* 8217CAD4h case   20:*/		return 0x8217CAD8;
		  /* 8217CAD8h */ case   21:  		/* cmpwi CR6, R11, 21 */
		/* 8217CAD8h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000015);
		/* 8217CAD8h case   21:*/		return 0x8217CADC;
		  /* 8217CADCh */ case   22:  		/* bc 12, CR6_LT, 96 */
		/* 8217CADCh case   22:*/		if ( regs.CR[6].lt ) { return 0x8217CB3C;  }
		/* 8217CADCh case   22:*/		return 0x8217CAE0;
		  /* 8217CAE0h */ case   23:  		/* cmpwi CR6, R11, 24 */
		/* 8217CAE0h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 8217CAE0h case   23:*/		return 0x8217CAE4;
		  /* 8217CAE4h */ case   24:  		/* bc 4, CR6_GT, 44 */
		/* 8217CAE4h case   24:*/		if ( !regs.CR[6].gt ) { return 0x8217CB10;  }
		/* 8217CAE4h case   24:*/		return 0x8217CAE8;
		  /* 8217CAE8h */ case   25:  		/* cmpwi CR6, R11, 63 */
		/* 8217CAE8h case   25:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003F);
		/* 8217CAE8h case   25:*/		return 0x8217CAEC;
		  /* 8217CAECh */ case   26:  		/* bc 12, CR6_EQ, 24 */
		/* 8217CAECh case   26:*/		if ( regs.CR[6].eq ) { return 0x8217CB04;  }
		/* 8217CAECh case   26:*/		return 0x8217CAF0;
		  /* 8217CAF0h */ case   27:  		/* cmpwi CR6, R11, 64 */
		/* 8217CAF0h case   27:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000040);
		/* 8217CAF0h case   27:*/		return 0x8217CAF4;
		  /* 8217CAF4h */ case   28:  		/* bc 4, CR6_EQ, 72 */
		/* 8217CAF4h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8217CB3C;  }
		/* 8217CAF4h case   28:*/		return 0x8217CAF8;
		  /* 8217CAF8h */ case   29:  		/* lwz R11, <#[R31 + 20]> */
		/* 8217CAF8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CAF8h case   29:*/		return 0x8217CAFC;
		  /* 8217CAFCh */ case   30:  		/* oris R11, R11, 6144 */
		/* 8217CAFCh case   30:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x1800);
		/* 8217CAFCh case   30:*/		return 0x8217CB00;
		  /* 8217CB00h */ case   31:  		/* b 28 */
		/* 8217CB00h case   31:*/		return 0x8217CB1C;
		/* 8217CB00h case   31:*/		return 0x8217CB04;
	}
	return 0x8217CB04;
} // Block from 8217CA84h-8217CB04h (32 instructions)

//////////////////////////////////////////////////////
// Block at 8217CB04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CB04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CB04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CB04);
		  /* 8217CB04h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8217CB04h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CB04h case    0:*/		return 0x8217CB08;
		  /* 8217CB08h */ case    1:  		/* rlwinm R11, R11, 0, 5, 2 */
		/* 8217CB08h case    1:*/		cpu::op::rlwinm<0,0,5,2>(regs,&regs.R11,regs.R11);
		/* 8217CB08h case    1:*/		return 0x8217CB0C;
		  /* 8217CB0Ch */ case    2:  		/* b 16 */
		/* 8217CB0Ch case    2:*/		return 0x8217CB1C;
		/* 8217CB0Ch case    2:*/		return 0x8217CB10;
	}
	return 0x8217CB10;
} // Block from 8217CB04h-8217CB10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CB10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CB10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CB10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CB10);
		  /* 8217CB10h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8217CB10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CB10h case    0:*/		return 0x8217CB14;
		  /* 8217CB14h */ case    1:  		/* li R10, 1 */
		/* 8217CB14h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8217CB14h case    1:*/		return 0x8217CB18;
		  /* 8217CB18h */ case    2:  		/* rlwimi R11, R10, 27, 3, 4 */
		/* 8217CB18h case    2:*/		cpu::op::rlwimi<0,27,3,4>(regs,&regs.R11,regs.R10);
		/* 8217CB18h case    2:*/		return 0x8217CB1C;
	}
	return 0x8217CB1C;
} // Block from 8217CB10h-8217CB1Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CB1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CB1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CB1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CB1C);
		  /* 8217CB1Ch */ case    0:  		/* stw R11, <#[R31 + 20]> */
		/* 8217CB1Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CB1Ch case    0:*/		return 0x8217CB20;
		  /* 8217CB20h */ case    1:  		/* b 216 */
		/* 8217CB20h case    1:*/		return 0x8217CBF8;
		/* 8217CB20h case    1:*/		return 0x8217CB24;
	}
	return 0x8217CB24;
} // Block from 8217CB1Ch-8217CB24h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217CB24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CB24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CB24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CB24);
		  /* 8217CB24h */ case    0:  		/* cmpwi CR6, R11, 66 */
		/* 8217CB24h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000042);
		/* 8217CB24h case    0:*/		return 0x8217CB28;
		  /* 8217CB28h */ case    1:  		/* bc 12, CR6_EQ, 32 */
		/* 8217CB28h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217CB48;  }
		/* 8217CB28h case    1:*/		return 0x8217CB2C;
		  /* 8217CB2Ch */ case    2:  		/* cmpwi CR6, R11, 108 */
		/* 8217CB2Ch case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000006C);
		/* 8217CB2Ch case    2:*/		return 0x8217CB30;
	}
	return 0x8217CB30;
} // Block from 8217CB24h-8217CB30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CB30h
// Function '?MergeBlocks_ForPredicationReduction@Compiler@D3DXShader@@AAA_NPAVBlock@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CB30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CB30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CB30);
		  /* 8217CB30h */ case    0:  		/* bc 12, CR6_EQ, -44 */
		/* 8217CB30h case    0:*/		if ( regs.CR[6].eq ) { return 0x8217CB04;  }
		/* 8217CB30h case    0:*/		return 0x8217CB34;
		  /* 8217CB34h */ case    1:  		/* cmpwi CR6, R11, 109 */
		/* 8217CB34h case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000006D);
		/* 8217CB34h case    1:*/		return 0x8217CB38;
		  /* 8217CB38h */ case    2:  		/* bc 12, CR6_EQ, -52 */
		/* 8217CB38h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217CB04;  }
		/* 8217CB38h case    2:*/		return 0x8217CB3C;
	}
	return 0x8217CB3C;
} // Block from 8217CB30h-8217CB3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CB3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CB3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CB3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CB3C);
		  /* 8217CB3Ch */ case    0:  		/* li R4, 4800 */
		/* 8217CB3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217CB3Ch case    0:*/		return 0x8217CB40;
		  /* 8217CB40h */ case    1:  		/* mr R3, R16 */
		/* 8217CB40h case    1:*/		regs.R3 = regs.R16;
		/* 8217CB40h case    1:*/		return 0x8217CB44;
		  /* 8217CB44h */ case    2:  		/* bl -175324 */
		/* 8217CB44h case    2:*/		regs.LR = 0x8217CB48; return 0x82151E68;
		/* 8217CB44h case    2:*/		return 0x8217CB48;
	}
	return 0x8217CB48;
} // Block from 8217CB3Ch-8217CB48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CB48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CB48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CB48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CB48);
		  /* 8217CB48h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8217CB48h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CB48h case    0:*/		return 0x8217CB4C;
		  /* 8217CB4Ch */ case    1:  		/* li R10, 0 */
		/* 8217CB4Ch case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217CB4Ch case    1:*/		return 0x8217CB50;
		  /* 8217CB50h */ case    2:  		/* li R9, 0 */
		/* 8217CB50h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8217CB50h case    2:*/		return 0x8217CB54;
		  /* 8217CB54h */ case    3:  		/* rlwinm R11, R11, 0, 5, 2 */
		/* 8217CB54h case    3:*/		cpu::op::rlwinm<0,0,5,2>(regs,&regs.R11,regs.R11);
		/* 8217CB54h case    3:*/		return 0x8217CB58;
		  /* 8217CB58h */ case    4:  		/* li R8, 0 */
		/* 8217CB58h case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217CB58h case    4:*/		return 0x8217CB5C;
		  /* 8217CB5Ch */ case    5:  		/* stw R11, <#[R31 + 20]> */
		/* 8217CB5Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CB5Ch case    5:*/		return 0x8217CB60;
		  /* 8217CB60h */ case    6:  		/* addi R7, R1, 112 */
		/* 8217CB60h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 8217CB60h case    6:*/		return 0x8217CB64;
		  /* 8217CB64h */ case    7:  		/* addi R6, R1, 116 */
		/* 8217CB64h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x74);
		/* 8217CB64h case    7:*/		return 0x8217CB68;
		  /* 8217CB68h */ case    8:  		/* lwz R3, <#[R31 + 44]> */
		/* 8217CB68h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 8217CB68h case    8:*/		return 0x8217CB6C;
		  /* 8217CB6Ch */ case    9:  		/* addi R5, R1, 108 */
		/* 8217CB6Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x6C);
		/* 8217CB6Ch case    9:*/		return 0x8217CB70;
		  /* 8217CB70h */ case   10:  		/* li R4, 0 */
		/* 8217CB70h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217CB70h case   10:*/		return 0x8217CB74;
		  /* 8217CB74h */ case   11:  		/* bl 682332 */
		/* 8217CB74h case   11:*/		regs.LR = 0x8217CB78; return 0x822234D0;
		/* 8217CB74h case   11:*/		return 0x8217CB78;
		  /* 8217CB78h */ case   12:  		/* lwz R30, <#[R1 + 108]> */
		/* 8217CB78h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x0000006C) );
		/* 8217CB78h case   12:*/		return 0x8217CB7C;
		  /* 8217CB7Ch */ case   13:  		/* mr R3, R30 */
		/* 8217CB7Ch case   13:*/		regs.R3 = regs.R30;
		/* 8217CB7Ch case   13:*/		return 0x8217CB80;
		  /* 8217CB80h */ case   14:  		/* lwz R29, <#[R30 + 8]> */
		/* 8217CB80h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 8217CB80h case   14:*/		return 0x8217CB84;
		  /* 8217CB84h */ case   15:  		/* rlwinm R11, R29, 0, 18, 24 */
		/* 8217CB84h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R29);
		/* 8217CB84h case   15:*/		return 0x8217CB88;
		  /* 8217CB88h */ case   16:  		/* cmplwi CR6, R11, 16000 */
		/* 8217CB88h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 8217CB88h case   16:*/		return 0x8217CB8C;
		  /* 8217CB8Ch */ case   17:  		/* bc 4, CR6_EQ, 32 */
		/* 8217CB8Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x8217CBAC;  }
		/* 8217CB8Ch case   17:*/		return 0x8217CB90;
	}
	return 0x8217CB90;
} // Block from 8217CB48h-8217CB90h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8217CB90h
// Function '?FindPreviousPredicateStackDef@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CB90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CB90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CB90);
		  /* 8217CB90h */ case    0:  		/* lwz R5, <#[R1 + 112]> */
		/* 8217CB90h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000070) );
		/* 8217CB90h case    0:*/		return 0x8217CB94;
		  /* 8217CB94h */ case    1:  		/* lwz R4, <#[R1 + 116]> */
		/* 8217CB94h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000074) );
		/* 8217CB94h case    1:*/		return 0x8217CB98;
		  /* 8217CB98h */ case    2:  		/* bl 674544 */
		/* 8217CB98h case    2:*/		regs.LR = 0x8217CB9C; return 0x82221688;
		/* 8217CB98h case    2:*/		return 0x8217CB9C;
		  /* 8217CB9Ch */ case    3:  		/* fctidz FR0, FR1 */
		/* 8217CB9Ch case    3:*/		cpu::op::fctidz<0>(regs,&regs.FR0,regs.FR1);
		/* 8217CB9Ch case    3:*/		return 0x8217CBA0;
		  /* 8217CBA0h */ case    4:  		/* stfd FR0, <#[R1 + 152]> */
		/* 8217CBA0h case    4:*/		cpu::mem::store64f( regs, regs.FR0, (uint32)(regs.R1 + 0x00000098) );
		/* 8217CBA0h case    4:*/		return 0x8217CBA4;
		  /* 8217CBA4h */ case    5:  		/* lwz R29, <#[R1 + 156]> */
		/* 8217CBA4h case    5:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000009C) );
		/* 8217CBA4h case    5:*/		return 0x8217CBA8;
		  /* 8217CBA8h */ case    6:  		/* b 80 */
		/* 8217CBA8h case    6:*/		return 0x8217CBF8;
		/* 8217CBA8h case    6:*/		return 0x8217CBAC;
	}
	return 0x8217CBAC;
} // Block from 8217CB90h-8217CBACh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217CBACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CBAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CBAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CBAC);
		  /* 8217CBACh */ case    0:  		/* bl -100972 */
		/* 8217CBACh case    0:*/		regs.LR = 0x8217CBB0; return 0x82164140;
		/* 8217CBACh case    0:*/		return 0x8217CBB0;
		  /* 8217CBB0h */ case    1:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217CBB0h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217CBB0h case    1:*/		return 0x8217CBB4;
		  /* 8217CBB4h */ case    2:  		/* bc 12, CR0_EQ, 208 */
		/* 8217CBB4h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217CC84;  }
		/* 8217CBB4h case    2:*/		return 0x8217CBB8;
		  /* 8217CBB8h */ case    3:  		/* rlwinm. R11, R29, 9, 31, 31 */
		/* 8217CBB8h case    3:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R29);
		/* 8217CBB8h case    3:*/		return 0x8217CBBC;
		  /* 8217CBBCh */ case    4:  		/* bc 12, CR0_EQ, 28 */
		/* 8217CBBCh case    4:*/		if ( regs.CR[0].eq ) { return 0x8217CBD8;  }
		/* 8217CBBCh case    4:*/		return 0x8217CBC0;
		  /* 8217CBC0h */ case    5:  		/* mr R4, R31 */
		/* 8217CBC0h case    5:*/		regs.R4 = regs.R31;
		/* 8217CBC0h case    5:*/		return 0x8217CBC4;
		  /* 8217CBC4h */ case    6:  		/* lhz R5, <#[R30 + 18]> */
		/* 8217CBC4h case    6:*/		cpu::mem::load16z( regs, &regs.R5, (uint32)(regs.R30 + 0x00000012) );
		/* 8217CBC4h case    6:*/		return 0x8217CBC8;
		  /* 8217CBC8h */ case    7:  		/* mr R3, R16 */
		/* 8217CBC8h case    7:*/		regs.R3 = regs.R16;
		/* 8217CBC8h case    7:*/		return 0x8217CBCC;
		  /* 8217CBCCh */ case    8:  		/* bl -2260 */
		/* 8217CBCCh case    8:*/		regs.LR = 0x8217CBD0; return 0x8217C2F8;
		/* 8217CBCCh case    8:*/		return 0x8217CBD0;
		  /* 8217CBD0h */ case    9:  		/* mr R30, R3 */
		/* 8217CBD0h case    9:*/		regs.R30 = regs.R3;
		/* 8217CBD0h case    9:*/		return 0x8217CBD4;
		  /* 8217CBD4h */ case   10:  		/* stw R3, <#[R1 + 108]> */
		/* 8217CBD4h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x0000006C) );
		/* 8217CBD4h case   10:*/		return 0x8217CBD8;
	}
	return 0x8217CBD8;
} // Block from 8217CBACh-8217CBD8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217CBD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CBD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CBD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CBD8);
		  /* 8217CBD8h */ case    0:  		/* lwz R11, <#[R30 + 20]> */
		/* 8217CBD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000014) );
		/* 8217CBD8h case    0:*/		return 0x8217CBDC;
		  /* 8217CBDCh */ case    1:  		/* rlwinm. R10, R11, 0, 3, 4 */
		/* 8217CBDCh case    1:*/		cpu::op::rlwinm<1,0,3,4>(regs,&regs.R10,regs.R11);
		/* 8217CBDCh case    1:*/		return 0x8217CBE0;
		  /* 8217CBE0h */ case    2:  		/* rlwinm R29, R11, 19, 18, 31 */
		/* 8217CBE0h case    2:*/		cpu::op::rlwinm<0,19,18,31>(regs,&regs.R29,regs.R11);
		/* 8217CBE0h case    2:*/		return 0x8217CBE4;
		  /* 8217CBE4h */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 8217CBE4h case    3:*/		if ( regs.CR[0].eq ) { return 0x8217CBF8;  }
		/* 8217CBE4h case    3:*/		return 0x8217CBE8;
		  /* 8217CBE8h */ case    4:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 8217CBE8h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 8217CBE8h case    4:*/		return 0x8217CBEC;
		  /* 8217CBECh */ case    5:  		/* rlwinm R11, R11, 5, 30, 31 */
		/* 8217CBECh case    5:*/		cpu::op::rlwinm<0,5,30,31>(regs,&regs.R11,regs.R11);
		/* 8217CBECh case    5:*/		return 0x8217CBF0;
		  /* 8217CBF0h */ case    6:  		/* subf R11, R11, R29 */
		/* 8217CBF0h case    6:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 8217CBF0h case    6:*/		return 0x8217CBF4;
		  /* 8217CBF4h */ case    7:  		/* addi R29, R11, 2 */
		/* 8217CBF4h case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x2);
		/* 8217CBF4h case    7:*/		return 0x8217CBF8;
	}
	return 0x8217CBF8;
} // Block from 8217CBD8h-8217CBF8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217CBF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CBF8);
		  /* 8217CBF8h */ case    0:  		/* lwz R11, <#[R31 + 20]> */
		/* 8217CBF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CBF8h case    0:*/		return 0x8217CBFC;
		  /* 8217CBFCh */ case    1:  		/* rlwimi R11, R29, 13, 5, 18 */
		/* 8217CBFCh case    1:*/		cpu::op::rlwimi<0,13,5,18>(regs,&regs.R11,regs.R29);
		/* 8217CBFCh case    1:*/		return 0x8217CC00;
		  /* 8217CC00h */ case    2:  		/* mr R10, R11 */
		/* 8217CC00h case    2:*/		regs.R10 = regs.R11;
		/* 8217CC00h case    2:*/		return 0x8217CC04;
		  /* 8217CC04h */ case    3:  		/* rlwinm R11, R11, 5, 30, 31 */
		/* 8217CC04h case    3:*/		cpu::op::rlwinm<0,5,30,31>(regs,&regs.R11,regs.R11);
		/* 8217CC04h case    3:*/		return 0x8217CC08;
		  /* 8217CC08h */ case    4:  		/* stw R10, <#[R31 + 20]> */
		/* 8217CC08h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000014) );
		/* 8217CC08h case    4:*/		return 0x8217CC0C;
		  /* 8217CC0Ch */ case    5:  		/* cmplwi CR6, R11, 1 */
		/* 8217CC0Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8217CC0Ch case    5:*/		return 0x8217CC10;
		  /* 8217CC10h */ case    6:  		/* bc 12, CR6_LT, 44 */
		/* 8217CC10h case    6:*/		if ( regs.CR[6].lt ) { return 0x8217CC3C;  }
		/* 8217CC10h case    6:*/		return 0x8217CC14;
		  /* 8217CC14h */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 8217CC14h case    7:*/		if ( regs.CR[6].eq ) { return 0x8217CC30;  }
		/* 8217CC14h case    7:*/		return 0x8217CC18;
		  /* 8217CC18h */ case    8:  		/* cmplwi CR6, R11, 3 */
		/* 8217CC18h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8217CC18h case    8:*/		return 0x8217CC1C;
		  /* 8217CC1Ch */ case    9:  		/* bc 4, CR6_EQ, 116 */
		/* 8217CC1Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8217CC90;  }
		/* 8217CC1Ch case    9:*/		return 0x8217CC20;
		  /* 8217CC20h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 8217CC20h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217CC20h case   10:*/		return 0x8217CC24;
		  /* 8217CC24h */ case   11:  		/* bc 12, CR6_EQ, 120 */
		/* 8217CC24h case   11:*/		if ( regs.CR[6].eq ) { return 0x8217CC9C;  }
		/* 8217CC24h case   11:*/		return 0x8217CC28;
		  /* 8217CC28h */ case   12:  		/* addi R29, R29, -1 */
		/* 8217CC28h case   12:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 8217CC28h case   12:*/		return 0x8217CC2C;
		  /* 8217CC2Ch */ case   13:  		/* b 16 */
		/* 8217CC2Ch case   13:*/		return 0x8217CC3C;
		/* 8217CC2Ch case   13:*/		return 0x8217CC30;
	}
	return 0x8217CC30;
} // Block from 8217CBF8h-8217CC30h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217CC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CC30);
		  /* 8217CC30h */ case    0:  		/* addi R29, R29, 1 */
		/* 8217CC30h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 8217CC30h case    0:*/		return 0x8217CC34;
		  /* 8217CC34h */ case    1:  		/* cmplwi CR6, R29, 16383 */
		/* 8217CC34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00003FFF);
		/* 8217CC34h case    1:*/		return 0x8217CC38;
		  /* 8217CC38h */ case    2:  		/* bc 12, CR6_GT, 112 */
		/* 8217CC38h case    2:*/		if ( regs.CR[6].gt ) { return 0x8217CCA8;  }
		/* 8217CC38h case    2:*/		return 0x8217CC3C;
	}
	return 0x8217CC3C;
} // Block from 8217CC30h-8217CC3Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CC3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CC3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CC3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CC3C);
		  /* 8217CC3Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217CC3Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217CC3Ch case    0:*/		return 0x8217CC40;
		  /* 8217CC40h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8217CC40h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8217CC40h case    1:*/		return 0x8217CC44;
		  /* 8217CC44h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217CC44h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217CC44h case    2:*/		return 0x8217CC48;
		  /* 8217CC48h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217CC48h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217CC54;  }
		/* 8217CC48h case    3:*/		return 0x8217CC4C;
		  /* 8217CC4Ch */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217CC4Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217CC4Ch case    4:*/		return 0x8217CC50;
		  /* 8217CC50h */ case    5:  		/* bc 4, CR6_EQ, -412 */
		/* 8217CC50h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217CAB4;  }
		/* 8217CC50h case    5:*/		return 0x8217CC54;
	}
	return 0x8217CC54;
} // Block from 8217CC3Ch-8217CC54h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217CC54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CC54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CC54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CC54);
		  /* 8217CC54h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8217CC54h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8217CC54h case    0:*/		return 0x8217CC58;
		  /* 8217CC58h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217CC58h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217CC58h case    1:*/		return 0x8217CC5C;
		  /* 8217CC5Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217CC5Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217CC5Ch case    2:*/		return 0x8217CC60;
		  /* 8217CC60h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217CC60h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217CC70;  }
		/* 8217CC60h case    3:*/		return 0x8217CC64;
		  /* 8217CC64h */ case    4:  		/* mr R28, R11 */
		/* 8217CC64h case    4:*/		regs.R28 = regs.R11;
		/* 8217CC64h case    4:*/		return 0x8217CC68;
		  /* 8217CC68h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217CC68h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217CC68h case    5:*/		return 0x8217CC6C;
		  /* 8217CC6Ch */ case    6:  		/* bc 4, CR6_EQ, -460 */
		/* 8217CC6Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217CAA0;  }
		/* 8217CC6Ch case    6:*/		return 0x8217CC70;
	}
	return 0x8217CC70;
} // Block from 8217CC54h-8217CC70h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217CC70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CC70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CC70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CC70);
		  /* 8217CC70h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8217CC70h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217CC70h case    0:*/		return 0x8217CC74;
		  /* 8217CC74h */ case    1:  		/* bc 12, CR6_EQ, 64 */
		/* 8217CC74h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217CCB4;  }
		/* 8217CC74h case    1:*/		return 0x8217CC78;
		  /* 8217CC78h */ case    2:  		/* li R4, 4800 */
		/* 8217CC78h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217CC78h case    2:*/		return 0x8217CC7C;
		  /* 8217CC7Ch */ case    3:  		/* mr R3, R16 */
		/* 8217CC7Ch case    3:*/		regs.R3 = regs.R16;
		/* 8217CC7Ch case    3:*/		return 0x8217CC80;
		  /* 8217CC80h */ case    4:  		/* bl -175640 */
		/* 8217CC80h case    4:*/		regs.LR = 0x8217CC84; return 0x82151E68;
		/* 8217CC80h case    4:*/		return 0x8217CC84;
	}
	return 0x8217CC84;
} // Block from 8217CC70h-8217CC84h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217CC84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CC84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CC84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CC84);
		  /* 8217CC84h */ case    0:  		/* li R4, 4800 */
		/* 8217CC84h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217CC84h case    0:*/		return 0x8217CC88;
		  /* 8217CC88h */ case    1:  		/* mr R3, R16 */
		/* 8217CC88h case    1:*/		regs.R3 = regs.R16;
		/* 8217CC88h case    1:*/		return 0x8217CC8C;
		  /* 8217CC8Ch */ case    2:  		/* bl -175652 */
		/* 8217CC8Ch case    2:*/		regs.LR = 0x8217CC90; return 0x82151E68;
		/* 8217CC8Ch case    2:*/		return 0x8217CC90;
	}
	return 0x8217CC90;
} // Block from 8217CC84h-8217CC90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CC90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CC90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CC90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CC90);
		  /* 8217CC90h */ case    0:  		/* li R4, 4800 */
		/* 8217CC90h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217CC90h case    0:*/		return 0x8217CC94;
		  /* 8217CC94h */ case    1:  		/* mr R3, R16 */
		/* 8217CC94h case    1:*/		regs.R3 = regs.R16;
		/* 8217CC94h case    1:*/		return 0x8217CC98;
		  /* 8217CC98h */ case    2:  		/* bl -175664 */
		/* 8217CC98h case    2:*/		regs.LR = 0x8217CC9C; return 0x82151E68;
		/* 8217CC98h case    2:*/		return 0x8217CC9C;
	}
	return 0x8217CC9C;
} // Block from 8217CC90h-8217CC9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CC9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CC9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CC9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CC9C);
		  /* 8217CC9Ch */ case    0:  		/* li R4, 4800 */
		/* 8217CC9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217CC9Ch case    0:*/		return 0x8217CCA0;
		  /* 8217CCA0h */ case    1:  		/* mr R3, R16 */
		/* 8217CCA0h case    1:*/		regs.R3 = regs.R16;
		/* 8217CCA0h case    1:*/		return 0x8217CCA4;
		  /* 8217CCA4h */ case    2:  		/* bl -175676 */
		/* 8217CCA4h case    2:*/		regs.LR = 0x8217CCA8; return 0x82151E68;
		/* 8217CCA4h case    2:*/		return 0x8217CCA8;
	}
	return 0x8217CCA8;
} // Block from 8217CC9Ch-8217CCA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CCA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CCA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CCA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CCA8);
		  /* 8217CCA8h */ case    0:  		/* li R4, 3535 */
		/* 8217CCA8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDCF);
		/* 8217CCA8h case    0:*/		return 0x8217CCAC;
		  /* 8217CCACh */ case    1:  		/* mr R3, R16 */
		/* 8217CCACh case    1:*/		regs.R3 = regs.R16;
		/* 8217CCACh case    1:*/		return 0x8217CCB0;
		  /* 8217CCB0h */ case    2:  		/* bl -175688 */
		/* 8217CCB0h case    2:*/		regs.LR = 0x8217CCB4; return 0x82151E68;
		/* 8217CCB0h case    2:*/		return 0x8217CCB4;
	}
	return 0x8217CCB4;
} // Block from 8217CCA8h-8217CCB4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CCB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CCB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CCB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CCB4);
		  /* 8217CCB4h */ case    0:  		/* lis R11, -32256 */
		/* 8217CCB4h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8217CCB4h case    0:*/		return 0x8217CCB8;
		  /* 8217CCB8h */ case    1:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 8217CCB8h case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 8217CCB8h case    1:*/		return 0x8217CCBC;
		  /* 8217CCBCh */ case    2:  		/* lwz R11, <#[R16 + 4]> */
		/* 8217CCBCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000004) );
		/* 8217CCBCh case    2:*/		return 0x8217CCC0;
		  /* 8217CCC0h */ case    3:  		/* li R21, 0 */
		/* 8217CCC0h case    3:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8217CCC0h case    3:*/		return 0x8217CCC4;
		  /* 8217CCC4h */ case    4:  		/* li R30, 16384 */
		/* 8217CCC4h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x4000);
		/* 8217CCC4h case    4:*/		return 0x8217CCC8;
		  /* 8217CCC8h */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217CCC8h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217CCC8h case    5:*/		return 0x8217CCCC;
		  /* 8217CCCCh */ case    6:  		/* li R18, 0 */
		/* 8217CCCCh case    6:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 8217CCCCh case    6:*/		return 0x8217CCD0;
		  /* 8217CCD0h */ case    7:  		/* li R26, 0 */
		/* 8217CCD0h case    7:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8217CCD0h case    7:*/		return 0x8217CCD4;
		  /* 8217CCD4h */ case    8:  		/* li R25, 1 */
		/* 8217CCD4h case    8:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8217CCD4h case    8:*/		return 0x8217CCD8;
	}
	return 0x8217CCD8;
} // Block from 8217CCB4h-8217CCD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217CCD8h
// Function '?IdentifySimpleControlFlow@Compiler@D3DXShader@@AAA_NPAVBlock@2@PAVInstruction@2@PAW4ControlStructureType@12@PA_NPAPAV32@444@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CCD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CCD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CCD8);
		  /* 8217CCD8h */ case    0:  		/* li R20, 1 */
		/* 8217CCD8h case    0:*/		cpu::op::li<0>(regs,&regs.R20,0x1);
		/* 8217CCD8h case    0:*/		return 0x8217CCDC;
		  /* 8217CCDCh */ case    1:  		/* li R19, 1 */
		/* 8217CCDCh case    1:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 8217CCDCh case    1:*/		return 0x8217CCE0;
		  /* 8217CCE0h */ case    2:  		/* bc 4, CR0_EQ, 1840 */
		/* 8217CCE0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217D410;  }
		/* 8217CCE0h case    2:*/		return 0x8217CCE4;
		  /* 8217CCE4h */ case    3:  		/* lwz R11, <#[R16]> */
		/* 8217CCE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8217CCE4h case    3:*/		return 0x8217CCE8;
		  /* 8217CCE8h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217CCE8h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217CCE8h case    4:*/		return 0x8217CCEC;
		  /* 8217CCECh */ case    5:  		/* addi R17, R11, -4 */
		/* 8217CCECh case    5:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R11,0xFFFFFFFC);
		/* 8217CCECh case    5:*/		return 0x8217CCF0;
		  /* 8217CCF0h */ case    6:  		/* cmplwi CR6, R17, 0 */
		/* 8217CCF0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 8217CCF0h case    6:*/		return 0x8217CCF4;
		  /* 8217CCF4h */ case    7:  		/* bc 12, CR6_EQ, 2692 */
		/* 8217CCF4h case    7:*/		if ( regs.CR[6].eq ) { return 0x8217D778;  }
		/* 8217CCF4h case    7:*/		return 0x8217CCF8;
		  /* 8217CCF8h */ case    8:  		/* lwz R11, <#[R17 + 28]> */
		/* 8217CCF8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x0000001C) );
		/* 8217CCF8h case    8:*/		return 0x8217CCFC;
		  /* 8217CCFCh */ case    9:  		/* addi R23, R17, 24 */
		/* 8217CCFCh case    9:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R17,0x18);
		/* 8217CCFCh case    9:*/		return 0x8217CD00;
		  /* 8217CD00h */ case   10:  		/* li R22, 0 */
		/* 8217CD00h case   10:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 8217CD00h case   10:*/		return 0x8217CD04;
		  /* 8217CD04h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217CD04h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217CD04h case   11:*/		return 0x8217CD08;
		  /* 8217CD08h */ case   12:  		/* bc 4, CR0_EQ, 1784 */
		/* 8217CD08h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217D400;  }
		/* 8217CD08h case   12:*/		return 0x8217CD0C;
		  /* 8217CD0Ch */ case   13:  		/* lwz R11, <#[R23]> */
		/* 8217CD0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8217CD0Ch case   13:*/		return 0x8217CD10;
		  /* 8217CD10h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217CD10h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217CD10h case   14:*/		return 0x8217CD14;
		  /* 8217CD14h */ case   15:  		/* addic. R28, R11, -40 */
		/* 8217CD14h case   15:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 8217CD14h case   15:*/		return 0x8217CD18;
		  /* 8217CD18h */ case   16:  		/* bc 12, CR0_EQ, 1768 */
		/* 8217CD18h case   16:*/		if ( regs.CR[0].eq ) { return 0x8217D400;  }
		/* 8217CD18h case   16:*/		return 0x8217CD1C;
		  /* 8217CD1Ch */ case   17:  		/* mr R3, R28 */
		/* 8217CD1Ch case   17:*/		regs.R3 = regs.R28;
		/* 8217CD1Ch case   17:*/		return 0x8217CD20;
		  /* 8217CD20h */ case   18:  		/* bl -101344 */
		/* 8217CD20h case   18:*/		regs.LR = 0x8217CD24; return 0x82164140;
		/* 8217CD20h case   18:*/		return 0x8217CD24;
		  /* 8217CD24h */ case   19:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217CD24h case   19:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217CD24h case   19:*/		return 0x8217CD28;
		  /* 8217CD28h */ case   20:  		/* bc 12, CR0_EQ, 1340 */
		/* 8217CD28h case   20:*/		if ( regs.CR[0].eq ) { return 0x8217D264;  }
		/* 8217CD28h case   20:*/		return 0x8217CD2C;
		  /* 8217CD2Ch */ case   21:  		/* mr R3, R28 */
		/* 8217CD2Ch case   21:*/		regs.R3 = regs.R28;
		/* 8217CD2Ch case   21:*/		return 0x8217CD30;
		  /* 8217CD30h */ case   22:  		/* bl -101504 */
		/* 8217CD30h case   22:*/		regs.LR = 0x8217CD34; return 0x821640B0;
		/* 8217CD30h case   22:*/		return 0x8217CD34;
		  /* 8217CD34h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217CD34h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217CD34h case   23:*/		return 0x8217CD38;
		  /* 8217CD38h */ case   24:  		/* bc 12, CR0_EQ, 28 */
		/* 8217CD38h case   24:*/		if ( regs.CR[0].eq ) { return 0x8217CD54;  }
		/* 8217CD38h case   24:*/		return 0x8217CD3C;
		  /* 8217CD3Ch */ case   25:  		/* rlwinm R11, R21, 0, 24, 31 */
		/* 8217CD3Ch case   25:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R21);
		/* 8217CD3Ch case   25:*/		return 0x8217CD40;
		  /* 8217CD40h */ case   26:  		/* lwz R10, <#[R28 + 20]> */
		/* 8217CD40h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CD40h case   26:*/		return 0x8217CD44;
		  /* 8217CD44h */ case   27:  		/* cntlzw R11, R11 */
		/* 8217CD44h case   27:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8217CD44h case   27:*/		return 0x8217CD48;
		  /* 8217CD48h */ case   28:  		/* rlwimi R10, R11, 26, 0, 0 */
		/* 8217CD48h case   28:*/		cpu::op::rlwimi<0,26,0,0>(regs,&regs.R10,regs.R11);
		/* 8217CD48h case   28:*/		return 0x8217CD4C;
		  /* 8217CD4Ch */ case   29:  		/* stw R10, <#[R28 + 20]> */
		/* 8217CD4Ch case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CD4Ch case   29:*/		return 0x8217CD50;
		  /* 8217CD50h */ case   30:  		/* b 16 */
		/* 8217CD50h case   30:*/		return 0x8217CD60;
		/* 8217CD50h case   30:*/		return 0x8217CD54;
	}
	return 0x8217CD54;
} // Block from 8217CCD8h-8217CD54h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8217CD54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CD54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CD54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CD54);
		  /* 8217CD54h */ case    0:  		/* lwz R11, <#[R28 + 20]> */
		/* 8217CD54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CD54h case    0:*/		return 0x8217CD58;
		  /* 8217CD58h */ case    1:  		/* oris R11, R11, 32768 */
		/* 8217CD58h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 8217CD58h case    1:*/		return 0x8217CD5C;
		  /* 8217CD5Ch */ case    2:  		/* stw R11, <#[R28 + 20]> */
		/* 8217CD5Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CD5Ch case    2:*/		return 0x8217CD60;
	}
	return 0x8217CD60;
} // Block from 8217CD54h-8217CD60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CD60);
		  /* 8217CD60h */ case    0:  		/* lwz R10, <#[R28 + 20]> */
		/* 8217CD60h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CD60h case    0:*/		return 0x8217CD64;
		  /* 8217CD64h */ case    1:  		/* rlwinm. R11, R10, 5, 30, 31 */
		/* 8217CD64h case    1:*/		cpu::op::rlwinm<1,5,30,31>(regs,&regs.R11,regs.R10);
		/* 8217CD64h case    1:*/		return 0x8217CD68;
		  /* 8217CD68h */ case    2:  		/* rlwinm R29, R10, 19, 18, 31 */
		/* 8217CD68h case    2:*/		cpu::op::rlwinm<0,19,18,31>(regs,&regs.R29,regs.R10);
		/* 8217CD68h case    2:*/		return 0x8217CD6C;
		  /* 8217CD6Ch */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8217CD6Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8217CD78;  }
		/* 8217CD6Ch case    3:*/		return 0x8217CD70;
		  /* 8217CD70h */ case    4:  		/* subf R11, R11, R29 */
		/* 8217CD70h case    4:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 8217CD70h case    4:*/		return 0x8217CD74;
		  /* 8217CD74h */ case    5:  		/* addi R29, R11, 2 */
		/* 8217CD74h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x2);
		/* 8217CD74h case    5:*/		return 0x8217CD78;
	}
	return 0x8217CD78;
} // Block from 8217CD60h-8217CD78h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217CD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CD78);
		  /* 8217CD78h */ case    0:  		/* cmplw CR6, R29, R30 */
		/* 8217CD78h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R30);
		/* 8217CD78h case    0:*/		return 0x8217CD7C;
		  /* 8217CD7Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8217CD7Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8217CD90;  }
		/* 8217CD7Ch case    1:*/		return 0x8217CD80;
		  /* 8217CD80h */ case    2:  		/* cmplwi CR6, R18, 0 */
		/* 8217CD80h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 8217CD80h case    2:*/		return 0x8217CD84;
		  /* 8217CD84h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 8217CD84h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217CD90;  }
		/* 8217CD84h case    3:*/		return 0x8217CD88;
		  /* 8217CD88h */ case    4:  		/* oris R11, R10, 16384 */
		/* 8217CD88h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R10,0x4000);
		/* 8217CD88h case    4:*/		return 0x8217CD8C;
		  /* 8217CD8Ch */ case    5:  		/* stw R11, <#[R28 + 20]> */
		/* 8217CD8Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CD8Ch case    5:*/		return 0x8217CD90;
	}
	return 0x8217CD90;
} // Block from 8217CD78h-8217CD90h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217CD90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CD90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CD90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CD90);
		  /* 8217CD90h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217CD90h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217CD90h case    0:*/		return 0x8217CD94;
		  /* 8217CD94h */ case    1:  		/* li R27, 0 */
		/* 8217CD94h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 8217CD94h case    1:*/		return 0x8217CD98;
		  /* 8217CD98h */ case    2:  		/* li R24, 0 */
		/* 8217CD98h case    2:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8217CD98h case    2:*/		return 0x8217CD9C;
		  /* 8217CD9Ch */ case    3:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217CD9Ch case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217CD9Ch case    3:*/		return 0x8217CDA0;
		  /* 8217CDA0h */ case    4:  		/* stw R27, <#[R1 + 100]> */
		/* 8217CDA0h case    4:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R1 + 0x00000064) );
		/* 8217CDA0h case    4:*/		return 0x8217CDA4;
		  /* 8217CDA4h */ case    5:  		/* stw R24, <#[R1 + 104]> */
		/* 8217CDA4h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000068) );
		/* 8217CDA4h case    5:*/		return 0x8217CDA8;
		  /* 8217CDA8h */ case    6:  		/* cmplwi CR6, R11, 21 */
		/* 8217CDA8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 8217CDA8h case    6:*/		return 0x8217CDAC;
		  /* 8217CDACh */ case    7:  		/* bc 12, CR6_LT, 16 */
		/* 8217CDACh case    7:*/		if ( regs.CR[6].lt ) { return 0x8217CDBC;  }
		/* 8217CDACh case    7:*/		return 0x8217CDB0;
		  /* 8217CDB0h */ case    8:  		/* cmplwi CR6, R11, 24 */
		/* 8217CDB0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8217CDB0h case    8:*/		return 0x8217CDB4;
		  /* 8217CDB4h */ case    9:  		/* li R11, 1 */
		/* 8217CDB4h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217CDB4h case    9:*/		return 0x8217CDB8;
		  /* 8217CDB8h */ case   10:  		/* bc 4, CR6_GT, 8 */
		/* 8217CDB8h case   10:*/		if ( !regs.CR[6].gt ) { return 0x8217CDC0;  }
		/* 8217CDB8h case   10:*/		return 0x8217CDBC;
	}
	return 0x8217CDBC;
} // Block from 8217CD90h-8217CDBCh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217CDBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CDBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CDBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CDBC);
		  /* 8217CDBCh */ case    0:  		/* li R11, 0 */
		/* 8217CDBCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217CDBCh case    0:*/		return 0x8217CDC0;
	}
	return 0x8217CDC0;
} // Block from 8217CDBCh-8217CDC0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217CDC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CDC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CDC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CDC0);
		  /* 8217CDC0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217CDC0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217CDC0h case    0:*/		return 0x8217CDC4;
		  /* 8217CDC4h */ case    1:  		/* bc 12, CR0_EQ, 408 */
		/* 8217CDC4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217CF5C;  }
		/* 8217CDC4h case    1:*/		return 0x8217CDC8;
		  /* 8217CDC8h */ case    2:  		/* addi R6, R1, 104 */
		/* 8217CDC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x68);
		/* 8217CDC8h case    2:*/		return 0x8217CDCC;
		  /* 8217CDCCh */ case    3:  		/* addi R5, R1, 100 */
		/* 8217CDCCh case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 8217CDCCh case    3:*/		return 0x8217CDD0;
		  /* 8217CDD0h */ case    4:  		/* mr R4, R28 */
		/* 8217CDD0h case    4:*/		regs.R4 = regs.R28;
		/* 8217CDD0h case    4:*/		return 0x8217CDD4;
		  /* 8217CDD4h */ case    5:  		/* mr R3, R16 */
		/* 8217CDD4h case    5:*/		regs.R3 = regs.R16;
		/* 8217CDD4h case    5:*/		return 0x8217CDD8;
		  /* 8217CDD8h */ case    6:  		/* bl -20632 */
		/* 8217CDD8h case    6:*/		regs.LR = 0x8217CDDC; return 0x82177D40;
		/* 8217CDD8h case    6:*/		return 0x8217CDDC;
		  /* 8217CDDCh */ case    7:  		/* lwz R11, <#[R28 + 20]> */
		/* 8217CDDCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CDDCh case    7:*/		return 0x8217CDE0;
		  /* 8217CDE0h */ case    8:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8217CDE0h case    8:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8217CDE0h case    8:*/		return 0x8217CDE4;
		  /* 8217CDE4h */ case    9:  		/* lwz R24, <#[R1 + 104]> */
		/* 8217CDE4h case    9:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000068) );
		/* 8217CDE4h case    9:*/		return 0x8217CDE8;
		  /* 8217CDE8h */ case   10:  		/* bc 12, CR0_EQ, 36 */
		/* 8217CDE8h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217CE0C;  }
		/* 8217CDE8h case   10:*/		return 0x8217CDEC;
		  /* 8217CDECh */ case   11:  		/* cmplwi CR6, R24, 0 */
		/* 8217CDECh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217CDECh case   11:*/		return 0x8217CDF0;
		  /* 8217CDF0h */ case   12:  		/* bc 4, CR6_EQ, 2404 */
		/* 8217CDF0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8217D754;  }
		/* 8217CDF0h case   12:*/		return 0x8217CDF4;
		  /* 8217CDF4h */ case   13:  		/* lwz R27, <#[R1 + 100]> */
		/* 8217CDF4h case   13:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000064) );
		/* 8217CDF4h case   13:*/		return 0x8217CDF8;
		  /* 8217CDF8h */ case   14:  		/* cmplwi CR6, R27, 0 */
		/* 8217CDF8h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8217CDF8h case   14:*/		return 0x8217CDFC;
		  /* 8217CDFCh */ case   15:  		/* bc 4, CR6_EQ, 2392 */
		/* 8217CDFCh case   15:*/		if ( !regs.CR[6].eq ) { return 0x8217D754;  }
		/* 8217CDFCh case   15:*/		return 0x8217CE00;
		  /* 8217CE00h */ case   16:  		/* oris R11, R11, 8192 */
		/* 8217CE00h case   16:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 8217CE00h case   16:*/		return 0x8217CE04;
		  /* 8217CE04h */ case   17:  		/* stw R11, <#[R28 + 20]> */
		/* 8217CE04h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CE04h case   17:*/		return 0x8217CE08;
		  /* 8217CE08h */ case   18:  		/* b 340 */
		/* 8217CE08h case   18:*/		return 0x8217CF5C;
		/* 8217CE08h case   18:*/		return 0x8217CE0C;
	}
	return 0x8217CE0C;
} // Block from 8217CDC0h-8217CE0Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 8217CE0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CE0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CE0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CE0C);
		  /* 8217CE0Ch */ case    0:  		/* lwz R27, <#[R1 + 100]> */
		/* 8217CE0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000064) );
		/* 8217CE0Ch case    0:*/		return 0x8217CE10;
		  /* 8217CE10h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 8217CE10h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8217CE10h case    1:*/		return 0x8217CE14;
		  /* 8217CE14h */ case    2:  		/* bc 4, CR6_EQ, 40 */
		/* 8217CE14h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217CE3C;  }
		/* 8217CE14h case    2:*/		return 0x8217CE18;
		  /* 8217CE18h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 8217CE18h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217CE18h case    3:*/		return 0x8217CE1C;
		  /* 8217CE1Ch */ case    4:  		/* bc 4, CR6_EQ, 24 */
		/* 8217CE1Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8217CE34;  }
		/* 8217CE1Ch case    4:*/		return 0x8217CE20;
		  /* 8217CE20h */ case    5:  		/* lwz R10, <#[R26 + 20]> */
		/* 8217CE20h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000014) );
		/* 8217CE20h case    5:*/		return 0x8217CE24;
		  /* 8217CE24h */ case    6:  		/* rlwinm R10, R10, 19, 18, 31 */
		/* 8217CE24h case    6:*/		cpu::op::rlwinm<0,19,18,31>(regs,&regs.R10,regs.R10);
		/* 8217CE24h case    6:*/		return 0x8217CE28;
		  /* 8217CE28h */ case    7:  		/* cmplw CR6, R10, R29 */
		/* 8217CE28h case    7:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 8217CE28h case    7:*/		return 0x8217CE2C;
		  /* 8217CE2Ch */ case    8:  		/* bc 12, CR6_LT, -44 */
		/* 8217CE2Ch case    8:*/		if ( regs.CR[6].lt ) { return 0x8217CE00;  }
		/* 8217CE2Ch case    8:*/		return 0x8217CE30;
		  /* 8217CE30h */ case    9:  		/* b 12 */
		/* 8217CE30h case    9:*/		return 0x8217CE3C;
		/* 8217CE30h case    9:*/		return 0x8217CE34;
	}
	return 0x8217CE34;
} // Block from 8217CE0Ch-8217CE34h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217CE34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CE34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CE34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CE34);
		  /* 8217CE34h */ case    0:  		/* cmplw CR6, R24, R26 */
		/* 8217CE34h case    0:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R26);
		/* 8217CE34h case    0:*/		return 0x8217CE38;
		  /* 8217CE38h */ case    1:  		/* bc 12, CR6_EQ, -56 */
		/* 8217CE38h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217CE00;  }
		/* 8217CE38h case    1:*/		return 0x8217CE3C;
	}
	return 0x8217CE3C;
} // Block from 8217CE34h-8217CE3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217CE3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CE3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CE3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CE3C);
		  /* 8217CE3Ch */ case    0:  		/* rlwinm. R11, R19, 0, 24, 31 */
		/* 8217CE3Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R19);
		/* 8217CE3Ch case    0:*/		return 0x8217CE40;
		  /* 8217CE40h */ case    1:  		/* bc 4, CR0_EQ, 284 */
		/* 8217CE40h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217CF5C;  }
		/* 8217CE40h case    1:*/		return 0x8217CE44;
		  /* 8217CE44h */ case    2:  		/* cmplwi CR6, R27, 0 */
		/* 8217CE44h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8217CE44h case    2:*/		return 0x8217CE48;
		  /* 8217CE48h */ case    3:  		/* bc 12, CR6_EQ, 276 */
		/* 8217CE48h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217CF5C;  }
		/* 8217CE48h case    3:*/		return 0x8217CE4C;
		  /* 8217CE4Ch */ case    4:  		/* lwz R11, <#[R27 + 20]> */
		/* 8217CE4Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 8217CE4Ch case    4:*/		return 0x8217CE50;
		  /* 8217CE50h */ case    5:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 8217CE50h case    5:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 8217CE50h case    5:*/		return 0x8217CE54;
		  /* 8217CE54h */ case    6:  		/* bc 12, CR0_EQ, 264 */
		/* 8217CE54h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217CF5C;  }
		/* 8217CE54h case    6:*/		return 0x8217CE58;
		  /* 8217CE58h */ case    7:  		/* cmplw CR6, R26, R27 */
		/* 8217CE58h case    7:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R27);
		/* 8217CE58h case    7:*/		return 0x8217CE5C;
		  /* 8217CE5Ch */ case    8:  		/* bc 4, CR6_EQ, 256 */
		/* 8217CE5Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x8217CF5C;  }
		/* 8217CE5Ch case    8:*/		return 0x8217CE60;
		  /* 8217CE60h */ case    9:  		/* cmplwi CR6, R24, 0 */
		/* 8217CE60h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217CE60h case    9:*/		return 0x8217CE64;
		  /* 8217CE64h */ case   10:  		/* bc 4, CR6_EQ, 248 */
		/* 8217CE64h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8217CF5C;  }
		/* 8217CE64h case   10:*/		return 0x8217CE68;
		  /* 8217CE68h */ case   11:  		/* lwz R3, <#[R28 + 44]> */
		/* 8217CE68h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000002C) );
		/* 8217CE68h case   11:*/		return 0x8217CE6C;
		  /* 8217CE6Ch */ case   12:  		/* fmr FR1, FR31 */
		/* 8217CE6Ch case   12:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 8217CE6Ch case   12:*/		return 0x8217CE70;
		  /* 8217CE70h */ case   13:  		/* bl -94400 */
		/* 8217CE70h case   13:*/		regs.LR = 0x8217CE74; return 0x82165DB0;
		/* 8217CE70h case   13:*/		return 0x8217CE74;
		  /* 8217CE74h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217CE74h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217CE74h case   14:*/		return 0x8217CE78;
		  /* 8217CE78h */ case   15:  		/* bc 12, CR0_EQ, 228 */
		/* 8217CE78h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217CF5C;  }
		/* 8217CE78h case   15:*/		return 0x8217CE7C;
		  /* 8217CE7Ch */ case   16:  		/* lwz R11, <#[R28 + 20]> */
		/* 8217CE7Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CE7Ch case   16:*/		return 0x8217CE80;
		  /* 8217CE80h */ case   17:  		/* oris R11, R11, 8192 */
		/* 8217CE80h case   17:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x2000);
		/* 8217CE80h case   17:*/		return 0x8217CE84;
		  /* 8217CE84h */ case   18:  		/* stw R11, <#[R28 + 20]> */
		/* 8217CE84h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CE84h case   18:*/		return 0x8217CE88;
		  /* 8217CE88h */ case   19:  		/* lwz R11, <#[R27 + 28]> */
		/* 8217CE88h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217CE88h case   19:*/		return 0x8217CE8C;
		  /* 8217CE8Ch */ case   20:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217CE8Ch case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217CE8Ch case   20:*/		return 0x8217CE90;
		  /* 8217CE90h */ case   21:  		/* b 180 */
		/* 8217CE90h case   21:*/		return 0x8217CF44;
		/* 8217CE90h case   21:*/		return 0x8217CE94;
		  /* 8217CE94h */ case   22:  		/* lwz R11, <#[R30 + 76]> */
		/* 8217CE94h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000004C) );
		/* 8217CE94h case   22:*/		return 0x8217CE98;
		  /* 8217CE98h */ case   23:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 8217CE98h case   23:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 8217CE98h case   23:*/		return 0x8217CE9C;
		  /* 8217CE9Ch */ case   24:  		/* bc 12, CR0_EQ, 192 */
		/* 8217CE9Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x8217CF5C;  }
		/* 8217CE9Ch case   24:*/		return 0x8217CEA0;
		  /* 8217CEA0h */ case   25:  		/* lwz R11, <#[R30 + 112]> */
		/* 8217CEA0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000070) );
		/* 8217CEA0h case   25:*/		return 0x8217CEA4;
		  /* 8217CEA4h */ case   26:  		/* lwz R10, <#[R11 + 48]> */
		/* 8217CEA4h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8217CEA4h case   26:*/		return 0x8217CEA8;
		  /* 8217CEA8h */ case   27:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 8217CEA8h case   27:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 8217CEA8h case   27:*/		return 0x8217CEAC;
		  /* 8217CEACh */ case   28:  		/* bc 12, CR0_EQ, 48 */
		/* 8217CEACh case   28:*/		if ( regs.CR[0].eq ) { return 0x8217CEDC;  }
		/* 8217CEACh case   28:*/		return 0x8217CEB0;
		  /* 8217CEB0h */ case   29:  		/* b 16 */
		/* 8217CEB0h case   29:*/		return 0x8217CEC0;
		/* 8217CEB0h case   29:*/		return 0x8217CEB4;
		  /* 8217CEB4h */ case   30:  		/* lwz R10, <#[R11 + 48]> */
		/* 8217CEB4h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8217CEB4h case   30:*/		return 0x8217CEB8;
		  /* 8217CEB8h */ case   31:  		/* rlwinm. R10, R10, 0, 9, 9 */
		/* 8217CEB8h case   31:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R10,regs.R10);
		/* 8217CEB8h case   31:*/		return 0x8217CEBC;
		  /* 8217CEBCh */ case   32:  		/* bc 12, CR0_EQ, 16 */
		/* 8217CEBCh case   32:*/		if ( regs.CR[0].eq ) { return 0x8217CECC;  }
		/* 8217CEBCh case   32:*/		return 0x8217CEC0;
	}
	return 0x8217CEC0;
} // Block from 8217CE3Ch-8217CEC0h (33 instructions)

//////////////////////////////////////////////////////
// Block at 8217CEC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CEC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CEC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CEC0);
		  /* 8217CEC0h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 8217CEC0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8217CEC0h case    0:*/		return 0x8217CEC4;
		  /* 8217CEC4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217CEC4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217CEC4h case    1:*/		return 0x8217CEC8;
		  /* 8217CEC8h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8217CEC8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217CEB4;  }
		/* 8217CEC8h case    2:*/		return 0x8217CECC;
	}
	return 0x8217CECC;
} // Block from 8217CEC0h-8217CECCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CECC);
		  /* 8217CECCh */ case    0:  		/* lwz R10, <#[R11 + 48]> */
		/* 8217CECCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 8217CECCh case    0:*/		return 0x8217CED0;
		  /* 8217CED0h */ case    1:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 8217CED0h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 8217CED0h case    1:*/		return 0x8217CED4;
		  /* 8217CED4h */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 8217CED4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217CEC0;  }
		/* 8217CED4h case    2:*/		return 0x8217CED8;
		  /* 8217CED8h */ case    3:  		/* stw R11, <#[R30 + 112]> */
		/* 8217CED8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000070) );
		/* 8217CED8h case    3:*/		return 0x8217CEDC;
	}
	return 0x8217CEDC;
} // Block from 8217CECCh-8217CEDCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217CEDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CEDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CEDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CEDC);
		  /* 8217CEDCh */ case    0:  		/* lwz R11, <#[R30 + 112]> */
		/* 8217CEDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000070) );
		/* 8217CEDCh case    0:*/		return 0x8217CEE0;
		  /* 8217CEE0h */ case    1:  		/* lwz R10, <#[R28 + 28]> */
		/* 8217CEE0h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000001C) );
		/* 8217CEE0h case    1:*/		return 0x8217CEE4;
		  /* 8217CEE4h */ case    2:  		/* cmpw CR6, R11, R10 */
		/* 8217CEE4h case    2:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 8217CEE4h case    2:*/		return 0x8217CEE8;
		  /* 8217CEE8h */ case    3:  		/* bc 4, CR6_EQ, 116 */
		/* 8217CEE8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217CF5C;  }
		/* 8217CEE8h case    3:*/		return 0x8217CEEC;
		  /* 8217CEECh */ case    4:  		/* lwz R11, <#[R30 + 28]> */
		/* 8217CEECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000001C) );
		/* 8217CEECh case    4:*/		return 0x8217CEF0;
		  /* 8217CEF0h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217CEF0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217CEF0h case    5:*/		return 0x8217CEF4;
		  /* 8217CEF4h */ case    6:  		/* bc 4, CR0_EQ, 76 */
		/* 8217CEF4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217CF40;  }
		/* 8217CEF4h case    6:*/		return 0x8217CEF8;
		  /* 8217CEF8h */ case    7:  		/* mr R31, R11 */
		/* 8217CEF8h case    7:*/		regs.R31 = regs.R11;
		/* 8217CEF8h case    7:*/		return 0x8217CEFC;
		  /* 8217CEFCh */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 8217CEFCh case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217CEFCh case    8:*/		return 0x8217CF00;
		  /* 8217CF00h */ case    9:  		/* bc 12, CR0_EQ, 64 */
		/* 8217CF00h case    9:*/		if ( regs.CR[0].eq ) { return 0x8217CF40;  }
		/* 8217CF00h case    9:*/		return 0x8217CF04;
		  /* 8217CF04h */ case   10:  		/* mr R3, R31 */
		/* 8217CF04h case   10:*/		regs.R3 = regs.R31;
		/* 8217CF04h case   10:*/		return 0x8217CF08;
		  /* 8217CF08h */ case   11:  		/* bl -101976 */
		/* 8217CF08h case   11:*/		regs.LR = 0x8217CF0C; return 0x821640B0;
		/* 8217CF08h case   11:*/		return 0x8217CF0C;
		  /* 8217CF0Ch */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217CF0Ch case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217CF0Ch case   12:*/		return 0x8217CF10;
		  /* 8217CF10h */ case   13:  		/* bc 4, CR0_EQ, 36 */
		/* 8217CF10h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8217CF34;  }
		/* 8217CF10h case   13:*/		return 0x8217CF14;
		  /* 8217CF14h */ case   14:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217CF14h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217CF14h case   14:*/		return 0x8217CF18;
		  /* 8217CF18h */ case   15:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217CF18h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217CF18h case   15:*/		return 0x8217CF1C;
		  /* 8217CF1Ch */ case   16:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217CF1Ch case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217CF1Ch case   16:*/		return 0x8217CF20;
		  /* 8217CF20h */ case   17:  		/* bc 4, CR0_EQ, 32 */
		/* 8217CF20h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8217CF40;  }
		/* 8217CF20h case   17:*/		return 0x8217CF24;
		  /* 8217CF24h */ case   18:  		/* mr R31, R11 */
		/* 8217CF24h case   18:*/		regs.R31 = regs.R11;
		/* 8217CF24h case   18:*/		return 0x8217CF28;
		  /* 8217CF28h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 8217CF28h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217CF28h case   19:*/		return 0x8217CF2C;
		  /* 8217CF2Ch */ case   20:  		/* bc 4, CR6_EQ, -40 */
		/* 8217CF2Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x8217CF04;  }
		/* 8217CF2Ch case   20:*/		return 0x8217CF30;
		  /* 8217CF30h */ case   21:  		/* b 16 */
		/* 8217CF30h case   21:*/		return 0x8217CF40;
		/* 8217CF30h case   21:*/		return 0x8217CF34;
	}
	return 0x8217CF34;
} // Block from 8217CEDCh-8217CF34h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217CF34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CF34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CF34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CF34);
		  /* 8217CF34h */ case    0:  		/* lwz R11, <#[R28 + 20]> */
		/* 8217CF34h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CF34h case    0:*/		return 0x8217CF38;
		  /* 8217CF38h */ case    1:  		/* rlwinm R11, R11, 0, 3, 1 */
		/* 8217CF38h case    1:*/		cpu::op::rlwinm<0,0,3,1>(regs,&regs.R11,regs.R11);
		/* 8217CF38h case    1:*/		return 0x8217CF3C;
		  /* 8217CF3Ch */ case    2:  		/* stw R11, <#[R28 + 20]> */
		/* 8217CF3Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217CF3Ch case    2:*/		return 0x8217CF40;
	}
	return 0x8217CF40;
} // Block from 8217CF34h-8217CF40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217CF40h
// Function '?CleanPredication@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CF40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CF40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CF40);
		  /* 8217CF40h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217CF40h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217CF40h case    0:*/		return 0x8217CF44;
	}
	return 0x8217CF44;
} // Block from 8217CF40h-8217CF44h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217CF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CF44);
		  /* 8217CF44h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217CF44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217CF44h case    0:*/		return 0x8217CF48;
		  /* 8217CF48h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217CF48h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217CF48h case    1:*/		return 0x8217CF4C;
		  /* 8217CF4Ch */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 8217CF4Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217CF5C;  }
		/* 8217CF4Ch case    2:*/		return 0x8217CF50;
		  /* 8217CF50h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8217CF50h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217CF50h case    3:*/		return 0x8217CF54;
		  /* 8217CF54h */ case    4:  		/* mr R30, R11 */
		/* 8217CF54h case    4:*/		regs.R30 = regs.R11;
		/* 8217CF54h case    4:*/		return 0x8217CF58;
		  /* 8217CF58h */ case    5:  		/* bc 4, CR6_EQ, -196 */
		/* 8217CF58h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217CE94;  }
		/* 8217CF58h case    5:*/		return 0x8217CF5C;
	}
	return 0x8217CF5C;
} // Block from 8217CF44h-8217CF5Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217CF5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CF5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CF5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CF5C);
		  /* 8217CF5Ch */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 8217CF5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8217CF5Ch case    0:*/		return 0x8217CF60;
		  /* 8217CF60h */ case    1:  		/* bc 12, CR6_EQ, 88 */
		/* 8217CF60h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217CFB8;  }
		/* 8217CF60h case    1:*/		return 0x8217CF64;
		  /* 8217CF64h */ case    2:  		/* lwz R10, <#[R26 + 8]> */
		/* 8217CF64h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 8217CF64h case    2:*/		return 0x8217CF68;
		  /* 8217CF68h */ case    3:  		/* rlwinm R11, R10, 0, 18, 24 */
		/* 8217CF68h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R10);
		/* 8217CF68h case    3:*/		return 0x8217CF6C;
		  /* 8217CF6Ch */ case    4:  		/* cmplwi CR6, R11, 8448 */
		/* 8217CF6Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002100);
		/* 8217CF6Ch case    4:*/		return 0x8217CF70;
		  /* 8217CF70h */ case    5:  		/* bc 4, CR6_EQ, 72 */
		/* 8217CF70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217CFB8;  }
		/* 8217CF70h case    5:*/		return 0x8217CF74;
		  /* 8217CF74h */ case    6:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217CF74h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217CF74h case    6:*/		return 0x8217CF78;
		  /* 8217CF78h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217CF78h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217CF78h case    7:*/		return 0x8217CF7C;
		  /* 8217CF7Ch */ case    8:  		/* cmplwi CR6, R11, 8320 */
		/* 8217CF7Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002080);
		/* 8217CF7Ch case    8:*/		return 0x8217CF80;
		  /* 8217CF80h */ case    9:  		/* bc 12, CR6_EQ, 56 */
		/* 8217CF80h case    9:*/		if ( regs.CR[6].eq ) { return 0x8217CFB8;  }
		/* 8217CF80h case    9:*/		return 0x8217CF84;
		  /* 8217CF84h */ case   10:  		/* lwz R11, <#[R26 + 20]> */
		/* 8217CF84h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000014) );
		/* 8217CF84h case   10:*/		return 0x8217CF88;
		  /* 8217CF88h */ case   11:  		/* rlwinm R9, R11, 19, 18, 31 */
		/* 8217CF88h case   11:*/		cpu::op::rlwinm<0,19,18,31>(regs,&regs.R9,regs.R11);
		/* 8217CF88h case   11:*/		return 0x8217CF8C;
		  /* 8217CF8Ch */ case   12:  		/* cmplw CR6, R9, R29 */
		/* 8217CF8Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R29);
		/* 8217CF8Ch case   12:*/		return 0x8217CF90;
		  /* 8217CF90h */ case   13:  		/* bc 4, CR6_EQ, 40 */
		/* 8217CF90h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8217CFB8;  }
		/* 8217CF90h case   13:*/		return 0x8217CF94;
		  /* 8217CF94h */ case   14:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8217CF94h case   14:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8217CF94h case   14:*/		return 0x8217CF98;
		  /* 8217CF98h */ case   15:  		/* bc 4, CR0_EQ, 1152 */
		/* 8217CF98h case   15:*/		if ( !regs.CR[0].eq ) { return 0x8217D418;  }
		/* 8217CF98h case   15:*/		return 0x8217CF9C;
		  /* 8217CF9Ch */ case   16:  		/* rlwinm. R11, R20, 0, 24, 31 */
		/* 8217CF9Ch case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R20);
		/* 8217CF9Ch case   16:*/		return 0x8217CFA0;
		  /* 8217CFA0h */ case   17:  		/* bc 4, CR0_EQ, 24 */
		/* 8217CFA0h case   17:*/		if ( !regs.CR[0].eq ) { return 0x8217CFB8;  }
		/* 8217CFA0h case   17:*/		return 0x8217CFA4;
		  /* 8217CFA4h */ case   18:  		/* rlwinm. R11, R10, 0, 0, 0 */
		/* 8217CFA4h case   18:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R10);
		/* 8217CFA4h case   18:*/		return 0x8217CFA8;
		  /* 8217CFA8h */ case   19:  		/* bc 12, CR0_EQ, 1136 */
		/* 8217CFA8h case   19:*/		if ( regs.CR[0].eq ) { return 0x8217D418;  }
		/* 8217CFA8h case   19:*/		return 0x8217CFAC;
		  /* 8217CFACh */ case   20:  		/* lwz R11, <#[R26 + 4]> */
		/* 8217CFACh case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 8217CFACh case   20:*/		return 0x8217CFB0;
		  /* 8217CFB0h */ case   21:  		/* cmpwi CR6, R11, 0 */
		/* 8217CFB0h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8217CFB0h case   21:*/		return 0x8217CFB4;
		  /* 8217CFB4h */ case   22:  		/* bc 12, CR6_EQ, 1124 */
		/* 8217CFB4h case   22:*/		if ( regs.CR[6].eq ) { return 0x8217D418;  }
		/* 8217CFB4h case   22:*/		return 0x8217CFB8;
	}
	return 0x8217CFB8;
} // Block from 8217CF5Ch-8217CFB8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8217CFB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CFB8);
		  /* 8217CFB8h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217CFB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217CFB8h case    0:*/		return 0x8217CFBC;
		  /* 8217CFBCh */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217CFBCh case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217CFBCh case    1:*/		return 0x8217CFC0;
		  /* 8217CFC0h */ case    2:  		/* cmplwi CR6, R11, 66 */
		/* 8217CFC0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000042);
		/* 8217CFC0h case    2:*/		return 0x8217CFC4;
		  /* 8217CFC4h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 8217CFC4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217CFD0;  }
		/* 8217CFC4h case    3:*/		return 0x8217CFC8;
		  /* 8217CFC8h */ case    4:  		/* cmplwi CR6, R11, 109 */
		/* 8217CFC8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006D);
		/* 8217CFC8h case    4:*/		return 0x8217CFCC;
		  /* 8217CFCCh */ case    5:  		/* bc 4, CR6_EQ, 116 */
		/* 8217CFCCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217D040;  }
		/* 8217CFCCh case    5:*/		return 0x8217CFD0;
	}
	return 0x8217CFD0;
} // Block from 8217CFB8h-8217CFD0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217CFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217CFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217CFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217CFD0);
		  /* 8217CFD0h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 8217CFD0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 8217CFD0h case    0:*/		return 0x8217CFD4;
		  /* 8217CFD4h */ case    1:  		/* bc 4, CR0_EQ, 108 */
		/* 8217CFD4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217D040;  }
		/* 8217CFD4h case    1:*/		return 0x8217CFD8;
		  /* 8217CFD8h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 8217CFD8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8217CFD8h case    2:*/		return 0x8217CFDC;
		  /* 8217CFDCh */ case    3:  		/* bc 12, CR6_EQ, 100 */
		/* 8217CFDCh case    3:*/		if ( regs.CR[6].eq ) { return 0x8217D040;  }
		/* 8217CFDCh case    3:*/		return 0x8217CFE0;
		  /* 8217CFE0h */ case    4:  		/* lwz R11, <#[R26 + 8]> */
		/* 8217CFE0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8217CFE0h case    4:*/		return 0x8217CFE4;
		  /* 8217CFE4h */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217CFE4h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217CFE4h case    5:*/		return 0x8217CFE8;
		  /* 8217CFE8h */ case    6:  		/* cmplwi CR6, R11, 8320 */
		/* 8217CFE8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002080);
		/* 8217CFE8h case    6:*/		return 0x8217CFEC;
		  /* 8217CFECh */ case    7:  		/* bc 4, CR6_EQ, 84 */
		/* 8217CFECh case    7:*/		if ( !regs.CR[6].eq ) { return 0x8217D040;  }
		/* 8217CFECh case    7:*/		return 0x8217CFF0;
		  /* 8217CFF0h */ case    8:  		/* lwz R31, <#[R26]> */
		/* 8217CFF0h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 8217CFF0h case    8:*/		return 0x8217CFF4;
		  /* 8217CFF4h */ case    9:  		/* cmplwi CR6, R31, 0 */
		/* 8217CFF4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217CFF4h case    9:*/		return 0x8217CFF8;
		  /* 8217CFF8h */ case   10:  		/* bc 12, CR6_EQ, 1056 */
		/* 8217CFF8h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217D418;  }
		/* 8217CFF8h case   10:*/		return 0x8217CFFC;
		  /* 8217CFFCh */ case   11:  		/* lwz R11, <#[R31]> */
		/* 8217CFFCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217CFFCh case   11:*/		return 0x8217D000;
		  /* 8217D000h */ case   12:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8217D000h case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8217D000h case   12:*/		return 0x8217D004;
		  /* 8217D004h */ case   13:  		/* bc 12, CR0_EQ, 52 */
		/* 8217D004h case   13:*/		if ( regs.CR[0].eq ) { return 0x8217D038;  }
		/* 8217D004h case   13:*/		return 0x8217D008;
		  /* 8217D008h */ case   14:  		/* li R10, 0 */
		/* 8217D008h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217D008h case   14:*/		return 0x8217D00C;
		  /* 8217D00Ch */ case   15:  		/* li R9, 0 */
		/* 8217D00Ch case   15:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8217D00Ch case   15:*/		return 0x8217D010;
		  /* 8217D010h */ case   16:  		/* li R8, 0 */
		/* 8217D010h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217D010h case   16:*/		return 0x8217D014;
		  /* 8217D014h */ case   17:  		/* addi R7, R1, 132 */
		/* 8217D014h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x84);
		/* 8217D014h case   17:*/		return 0x8217D018;
		  /* 8217D018h */ case   18:  		/* addi R6, R1, 136 */
		/* 8217D018h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x88);
		/* 8217D018h case   18:*/		return 0x8217D01C;
		  /* 8217D01Ch */ case   19:  		/* addi R5, R1, 120 */
		/* 8217D01Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 8217D01Ch case   19:*/		return 0x8217D020;
		  /* 8217D020h */ case   20:  		/* li R4, 0 */
		/* 8217D020h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217D020h case   20:*/		return 0x8217D024;
		  /* 8217D024h */ case   21:  		/* mr R3, R31 */
		/* 8217D024h case   21:*/		regs.R3 = regs.R31;
		/* 8217D024h case   21:*/		return 0x8217D028;
		  /* 8217D028h */ case   22:  		/* bl 681128 */
		/* 8217D028h case   22:*/		regs.LR = 0x8217D02C; return 0x822234D0;
		/* 8217D028h case   22:*/		return 0x8217D02C;
		  /* 8217D02Ch */ case   23:  		/* lwz R11, <#[R1 + 120]> */
		/* 8217D02Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000078) );
		/* 8217D02Ch case   23:*/		return 0x8217D030;
		  /* 8217D030h */ case   24:  		/* cmplw CR6, R11, R28 */
		/* 8217D030h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8217D030h case   24:*/		return 0x8217D034;
		  /* 8217D034h */ case   25:  		/* bc 4, CR6_EQ, 12 */
		/* 8217D034h case   25:*/		if ( !regs.CR[6].eq ) { return 0x8217D040;  }
		/* 8217D034h case   25:*/		return 0x8217D038;
	}
	return 0x8217D038;
} // Block from 8217CFD0h-8217D038h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8217D038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D038);
		  /* 8217D038h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 8217D038h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 8217D038h case    0:*/		return 0x8217D03C;
		  /* 8217D03Ch */ case    1:  		/* b -72 */
		/* 8217D03Ch case    1:*/		return 0x8217CFF4;
		/* 8217D03Ch case    1:*/		return 0x8217D040;
	}
	return 0x8217D040;
} // Block from 8217D038h-8217D040h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D040);
		  /* 8217D040h */ case    0:  		/* lwz R11, <#[R28 + 20]> */
		/* 8217D040h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217D040h case    0:*/		return 0x8217D044;
		  /* 8217D044h */ case    1:  		/* rlwinm. R10, R11, 0, 0, 0 */
		/* 8217D044h case    1:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R11);
		/* 8217D044h case    1:*/		return 0x8217D048;
		  /* 8217D048h */ case    2:  		/* bc 12, CR0_EQ, 80 */
		/* 8217D048h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217D098;  }
		/* 8217D048h case    2:*/		return 0x8217D04C;
		  /* 8217D04Ch */ case    3:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 8217D04Ch case    3:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 8217D04Ch case    3:*/		return 0x8217D050;
	}
	return 0x8217D050;
} // Block from 8217D040h-8217D050h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217D050h
// Function '?RemoveAll@?$ArrayList@UCNDOperation@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@QAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D050( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D050) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D050);
		  /* 8217D050h */ case    0:  		/* bc 12, CR0_EQ, 72 */
		/* 8217D050h case    0:*/		if ( regs.CR[0].eq ) { return 0x8217D098;  }
		/* 8217D050h case    0:*/		return 0x8217D054;
		  /* 8217D054h */ case    1:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217D054h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217D054h case    1:*/		return 0x8217D058;
		  /* 8217D058h */ case    2:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 8217D058h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 8217D058h case    2:*/		return 0x8217D05C;
		  /* 8217D05Ch */ case    3:  		/* cmplwi CR6, R10, 32 */
		/* 8217D05Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000020);
		/* 8217D05Ch case    3:*/		return 0x8217D060;
		  /* 8217D060h */ case    4:  		/* bc 12, CR6_LT, 16 */
		/* 8217D060h case    4:*/		if ( regs.CR[6].lt ) { return 0x8217D070;  }
		/* 8217D060h case    4:*/		return 0x8217D064;
		  /* 8217D064h */ case    5:  		/* cmplwi CR6, R10, 82 */
		/* 8217D064h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000052);
		/* 8217D064h case    5:*/		return 0x8217D068;
		  /* 8217D068h */ case    6:  		/* li R11, 1 */
		/* 8217D068h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217D068h case    6:*/		return 0x8217D06C;
		  /* 8217D06Ch */ case    7:  		/* bc 4, CR6_GT, 8 */
		/* 8217D06Ch case    7:*/		if ( !regs.CR[6].gt ) { return 0x8217D074;  }
		/* 8217D06Ch case    7:*/		return 0x8217D070;
	}
	return 0x8217D070;
} // Block from 8217D050h-8217D070h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D070h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D070( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D070) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D070);
		  /* 8217D070h */ case    0:  		/* li R11, 0 */
		/* 8217D070h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D070h case    0:*/		return 0x8217D074;
	}
	return 0x8217D074;
} // Block from 8217D070h-8217D074h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D074);
		  /* 8217D074h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217D074h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217D074h case    0:*/		return 0x8217D078;
		  /* 8217D078h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8217D078h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217D098;  }
		/* 8217D078h case    1:*/		return 0x8217D07C;
		  /* 8217D07Ch */ case    2:  		/* cmplwi CR6, R10, 63 */
		/* 8217D07Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000003F);
		/* 8217D07Ch case    2:*/		return 0x8217D080;
		  /* 8217D080h */ case    3:  		/* bc 4, CR6_EQ, 944 */
		/* 8217D080h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217D430;  }
		/* 8217D080h case    3:*/		return 0x8217D084;
		  /* 8217D084h */ case    4:  		/* mr R4, R28 */
		/* 8217D084h case    4:*/		regs.R4 = regs.R28;
		/* 8217D084h case    4:*/		return 0x8217D088;
		  /* 8217D088h */ case    5:  		/* mr R3, R16 */
		/* 8217D088h case    5:*/		regs.R3 = regs.R16;
		/* 8217D088h case    5:*/		return 0x8217D08C;
		  /* 8217D08Ch */ case    6:  		/* bl -13292 */
		/* 8217D08Ch case    6:*/		regs.LR = 0x8217D090; return 0x82179CA0;
		/* 8217D08Ch case    6:*/		return 0x8217D090;
		  /* 8217D090h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D090h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D090h case    7:*/		return 0x8217D094;
		  /* 8217D094h */ case    8:  		/* bc 4, CR0_EQ, 924 */
		/* 8217D094h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217D430;  }
		/* 8217D094h case    8:*/		return 0x8217D098;
	}
	return 0x8217D098;
} // Block from 8217D074h-8217D098h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217D098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D098);
		  /* 8217D098h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217D098h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217D098h case    0:*/		return 0x8217D09C;
		  /* 8217D09Ch */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217D09Ch case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217D09Ch case    1:*/		return 0x8217D0A0;
		  /* 8217D0A0h */ case    2:  		/* cmplwi CR6, R11, 8064 */
		/* 8217D0A0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001F80);
		/* 8217D0A0h case    2:*/		return 0x8217D0A4;
		  /* 8217D0A4h */ case    3:  		/* bc 4, CR6_EQ, 60 */
		/* 8217D0A4h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217D0E0;  }
		/* 8217D0A4h case    3:*/		return 0x8217D0A8;
		  /* 8217D0A8h */ case    4:  		/* lwz R11, <#[R28 + 20]> */
		/* 8217D0A8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217D0A8h case    4:*/		return 0x8217D0AC;
		  /* 8217D0ACh */ case    5:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8217D0ACh case    5:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8217D0ACh case    5:*/		return 0x8217D0B0;
		  /* 8217D0B0h */ case    6:  		/* bc 12, CR0_EQ, 48 */
		/* 8217D0B0h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217D0E0;  }
		/* 8217D0B0h case    6:*/		return 0x8217D0B4;
		  /* 8217D0B4h */ case    7:  		/* cmplwi CR6, R26, 0 */
		/* 8217D0B4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8217D0B4h case    7:*/		return 0x8217D0B8;
		  /* 8217D0B8h */ case    8:  		/* bc 12, CR6_EQ, 40 */
		/* 8217D0B8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8217D0E0;  }
		/* 8217D0B8h case    8:*/		return 0x8217D0BC;
		  /* 8217D0BCh */ case    9:  		/* lwz R11, <#[R26 + 8]> */
		/* 8217D0BCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8217D0BCh case    9:*/		return 0x8217D0C0;
		  /* 8217D0C0h */ case   10:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217D0C0h case   10:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217D0C0h case   10:*/		return 0x8217D0C4;
		  /* 8217D0C4h */ case   11:  		/* cmplwi CR6, R11, 8192 */
		/* 8217D0C4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002000);
		/* 8217D0C4h case   11:*/		return 0x8217D0C8;
		  /* 8217D0C8h */ case   12:  		/* bc 4, CR6_EQ, 24 */
		/* 8217D0C8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x8217D0E0;  }
		/* 8217D0C8h case   12:*/		return 0x8217D0CC;
		  /* 8217D0CCh */ case   13:  		/* mr R4, R28 */
		/* 8217D0CCh case   13:*/		regs.R4 = regs.R28;
		/* 8217D0CCh case   13:*/		return 0x8217D0D0;
		  /* 8217D0D0h */ case   14:  		/* mr R3, R16 */
		/* 8217D0D0h case   14:*/		regs.R3 = regs.R16;
		/* 8217D0D0h case   14:*/		return 0x8217D0D4;
		  /* 8217D0D4h */ case   15:  		/* bl -13364 */
		/* 8217D0D4h case   15:*/		regs.LR = 0x8217D0D8; return 0x82179CA0;
		/* 8217D0D4h case   15:*/		return 0x8217D0D8;
		  /* 8217D0D8h */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D0D8h case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D0D8h case   16:*/		return 0x8217D0DC;
		  /* 8217D0DCh */ case   17:  		/* bc 4, CR0_EQ, 852 */
		/* 8217D0DCh case   17:*/		if ( !regs.CR[0].eq ) { return 0x8217D430;  }
		/* 8217D0DCh case   17:*/		return 0x8217D0E0;
	}
	return 0x8217D0E0;
} // Block from 8217D098h-8217D0E0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8217D0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D0E0);
		  /* 8217D0E0h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217D0E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217D0E0h case    0:*/		return 0x8217D0E4;
		  /* 8217D0E4h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217D0E4h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217D0E4h case    1:*/		return 0x8217D0E8;
		  /* 8217D0E8h */ case    2:  		/* cmplwi CR6, R11, 21 */
		/* 8217D0E8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 8217D0E8h case    2:*/		return 0x8217D0EC;
		  /* 8217D0ECh */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 8217D0ECh case    3:*/		if ( regs.CR[6].lt ) { return 0x8217D0FC;  }
		/* 8217D0ECh case    3:*/		return 0x8217D0F0;
	}
	return 0x8217D0F0;
} // Block from 8217D0E0h-8217D0F0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217D0F0h
// Function '?GetSpaceWorker@?$ArrayList@UCNDOperation@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@D3DXShader@@AAAPAUArrayListEntry@12@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D0F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D0F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D0F0);
		  /* 8217D0F0h */ case    0:  		/* cmplwi CR6, R11, 24 */
		/* 8217D0F0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8217D0F0h case    0:*/		return 0x8217D0F4;
		  /* 8217D0F4h */ case    1:  		/* li R11, 1 */
		/* 8217D0F4h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217D0F4h case    1:*/		return 0x8217D0F8;
		  /* 8217D0F8h */ case    2:  		/* bc 4, CR6_GT, 8 */
		/* 8217D0F8h case    2:*/		if ( !regs.CR[6].gt ) { return 0x8217D100;  }
		/* 8217D0F8h case    2:*/		return 0x8217D0FC;
	}
	return 0x8217D0FC;
} // Block from 8217D0F0h-8217D0FCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D0FC);
		  /* 8217D0FCh */ case    0:  		/* li R11, 0 */
		/* 8217D0FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D0FCh case    0:*/		return 0x8217D100;
	}
	return 0x8217D100;
} // Block from 8217D0FCh-8217D100h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D100);
		  /* 8217D100h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217D100h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217D100h case    0:*/		return 0x8217D104;
		  /* 8217D104h */ case    1:  		/* bc 12, CR0_EQ, 184 */
		/* 8217D104h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217D1BC;  }
		/* 8217D104h case    1:*/		return 0x8217D108;
		  /* 8217D108h */ case    2:  		/* lwz R11, <#[R28 + 20]> */
		/* 8217D108h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217D108h case    2:*/		return 0x8217D10C;
		  /* 8217D10Ch */ case    3:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8217D10Ch case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8217D10Ch case    3:*/		return 0x8217D110;
		  /* 8217D110h */ case    4:  		/* bc 12, CR0_EQ, 172 */
		/* 8217D110h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217D1BC;  }
		/* 8217D110h case    4:*/		return 0x8217D114;
		  /* 8217D114h */ case    5:  		/* cmplwi CR6, R26, 0 */
		/* 8217D114h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 8217D114h case    5:*/		return 0x8217D118;
		  /* 8217D118h */ case    6:  		/* bc 12, CR6_EQ, 164 */
		/* 8217D118h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217D1BC;  }
		/* 8217D118h case    6:*/		return 0x8217D11C;
		  /* 8217D11Ch */ case    7:  		/* lwz R11, <#[R26 + 8]> */
		/* 8217D11Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8217D11Ch case    7:*/		return 0x8217D120;
		  /* 8217D120h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217D120h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217D120h case    8:*/		return 0x8217D124;
		  /* 8217D124h */ case    9:  		/* cmplwi CR6, R11, 8064 */
		/* 8217D124h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00001F80);
		/* 8217D124h case    9:*/		return 0x8217D128;
		  /* 8217D128h */ case   10:  		/* bc 4, CR6_EQ, 148 */
		/* 8217D128h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8217D1BC;  }
		/* 8217D128h case   10:*/		return 0x8217D12C;
		  /* 8217D12Ch */ case   11:  		/* mr R4, R26 */
		/* 8217D12Ch case   11:*/		regs.R4 = regs.R26;
		/* 8217D12Ch case   11:*/		return 0x8217D130;
		  /* 8217D130h */ case   12:  		/* mr R3, R16 */
		/* 8217D130h case   12:*/		regs.R3 = regs.R16;
		/* 8217D130h case   12:*/		return 0x8217D134;
		  /* 8217D134h */ case   13:  		/* bl -13460 */
		/* 8217D134h case   13:*/		regs.LR = 0x8217D138; return 0x82179CA0;
		/* 8217D134h case   13:*/		return 0x8217D138;
		  /* 8217D138h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D138h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D138h case   14:*/		return 0x8217D13C;
		  /* 8217D13Ch */ case   15:  		/* bc 12, CR0_EQ, 128 */
		/* 8217D13Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x8217D1BC;  }
		/* 8217D13Ch case   15:*/		return 0x8217D140;
		  /* 8217D140h */ case   16:  		/* lwz R10, <#[R26 + 28]> */
		/* 8217D140h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000001C) );
		/* 8217D140h case   16:*/		return 0x8217D144;
		  /* 8217D144h */ case   17:  		/* lwz R11, <#[R10 + 112]> */
		/* 8217D144h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000070) );
		/* 8217D144h case   17:*/		return 0x8217D148;
		  /* 8217D148h */ case   18:  		/* lwz R9, <#[R11 + 48]> */
		/* 8217D148h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8217D148h case   18:*/		return 0x8217D14C;
		  /* 8217D14Ch */ case   19:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 8217D14Ch case   19:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 8217D14Ch case   19:*/		return 0x8217D150;
		  /* 8217D150h */ case   20:  		/* bc 12, CR0_EQ, 48 */
		/* 8217D150h case   20:*/		if ( regs.CR[0].eq ) { return 0x8217D180;  }
		/* 8217D150h case   20:*/		return 0x8217D154;
		  /* 8217D154h */ case   21:  		/* b 16 */
		/* 8217D154h case   21:*/		return 0x8217D164;
		/* 8217D154h case   21:*/		return 0x8217D158;
		  /* 8217D158h */ case   22:  		/* lwz R9, <#[R11 + 48]> */
		/* 8217D158h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8217D158h case   22:*/		return 0x8217D15C;
		  /* 8217D15Ch */ case   23:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8217D15Ch case   23:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8217D15Ch case   23:*/		return 0x8217D160;
		  /* 8217D160h */ case   24:  		/* bc 12, CR0_EQ, 16 */
		/* 8217D160h case   24:*/		if ( regs.CR[0].eq ) { return 0x8217D170;  }
		/* 8217D160h case   24:*/		return 0x8217D164;
	}
	return 0x8217D164;
} // Block from 8217D100h-8217D164h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8217D164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D164);
		  /* 8217D164h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 8217D164h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8217D164h case    0:*/		return 0x8217D168;
		  /* 8217D168h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217D168h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217D168h case    1:*/		return 0x8217D16C;
		  /* 8217D16Ch */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8217D16Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217D158;  }
		/* 8217D16Ch case    2:*/		return 0x8217D170;
	}
	return 0x8217D170;
} // Block from 8217D164h-8217D170h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D170);
		  /* 8217D170h */ case    0:  		/* lwz R9, <#[R11 + 48]> */
		/* 8217D170h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8217D170h case    0:*/		return 0x8217D174;
		  /* 8217D174h */ case    1:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 8217D174h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 8217D174h case    1:*/		return 0x8217D178;
	}
	return 0x8217D178;
} // Block from 8217D170h-8217D178h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D178h
// Function '?HoistExports@Compiler@D3DXShader@@AAAXPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D178);
		  /* 8217D178h */ case    0:  		/* bc 4, CR0_EQ, -20 */
		/* 8217D178h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8217D164;  }
		/* 8217D178h case    0:*/		return 0x8217D17C;
		  /* 8217D17Ch */ case    1:  		/* stw R11, <#[R10 + 112]> */
		/* 8217D17Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000070) );
		/* 8217D17Ch case    1:*/		return 0x8217D180;
	}
	return 0x8217D180;
} // Block from 8217D178h-8217D180h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D180h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D180( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D180) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D180);
		  /* 8217D180h */ case    0:  		/* mr R3, R16 */
		/* 8217D180h case    0:*/		regs.R3 = regs.R16;
		/* 8217D180h case    0:*/		return 0x8217D184;
		  /* 8217D184h */ case    1:  		/* lwz R4, <#[R10 + 112]> */
		/* 8217D184h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000070) );
		/* 8217D184h case    1:*/		return 0x8217D188;
		  /* 8217D188h */ case    2:  		/* bl -18712 */
		/* 8217D188h case    2:*/		regs.LR = 0x8217D18C; return 0x82178870;
		/* 8217D188h case    2:*/		return 0x8217D18C;
		  /* 8217D18Ch */ case    3:  		/* or. R31, R3, R3 */
		/* 8217D18Ch case    3:*/		cpu::op::or<1>(regs,&regs.R31,regs.R3,regs.R3);
		/* 8217D18Ch case    3:*/		return 0x8217D190;
		  /* 8217D190h */ case    4:  		/* bc 12, CR0_EQ, 680 */
		/* 8217D190h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217D438;  }
		/* 8217D190h case    4:*/		return 0x8217D194;
		  /* 8217D194h */ case    5:  		/* mr R4, R16 */
		/* 8217D194h case    5:*/		regs.R4 = regs.R16;
		/* 8217D194h case    5:*/		return 0x8217D198;
		  /* 8217D198h */ case    6:  		/* mr R3, R31 */
		/* 8217D198h case    6:*/		regs.R3 = regs.R31;
		/* 8217D198h case    6:*/		return 0x8217D19C;
		  /* 8217D19Ch */ case    7:  		/* bl -100884 */
		/* 8217D19Ch case    7:*/		regs.LR = 0x8217D1A0; return 0x82164788;
		/* 8217D19Ch case    7:*/		return 0x8217D1A0;
		  /* 8217D1A0h */ case    8:  		/* cmpwi CR6, R3, 9 */
		/* 8217D1A0h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000009);
		/* 8217D1A0h case    8:*/		return 0x8217D1A4;
		  /* 8217D1A4h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 8217D1A4h case    9:*/		if ( regs.CR[6].eq ) { return 0x8217D1BC;  }
		/* 8217D1A4h case    9:*/		return 0x8217D1A8;
		  /* 8217D1A8h */ case   10:  		/* mr R4, R16 */
		/* 8217D1A8h case   10:*/		regs.R4 = regs.R16;
		/* 8217D1A8h case   10:*/		return 0x8217D1AC;
		  /* 8217D1ACh */ case   11:  		/* mr R3, R31 */
		/* 8217D1ACh case   11:*/		regs.R3 = regs.R31;
		/* 8217D1ACh case   11:*/		return 0x8217D1B0;
		  /* 8217D1B0h */ case   12:  		/* bl -100904 */
		/* 8217D1B0h case   12:*/		regs.LR = 0x8217D1B4; return 0x82164788;
		/* 8217D1B0h case   12:*/		return 0x8217D1B4;
		  /* 8217D1B4h */ case   13:  		/* cmpwi CR6, R3, 8 */
		/* 8217D1B4h case   13:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000008);
		/* 8217D1B4h case   13:*/		return 0x8217D1B8;
		  /* 8217D1B8h */ case   14:  		/* bc 4, CR6_EQ, 640 */
		/* 8217D1B8h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8217D438;  }
		/* 8217D1B8h case   14:*/		return 0x8217D1BC;
	}
	return 0x8217D1BC;
} // Block from 8217D180h-8217D1BCh (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217D1BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D1BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D1BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D1BC);
		  /* 8217D1BCh */ case    0:  		/* lwz R11, <#[R28 + 20]> */
		/* 8217D1BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000014) );
		/* 8217D1BCh case    0:*/		return 0x8217D1C0;
		  /* 8217D1C0h */ case    1:  		/* rlwinm. R10, R11, 0, 2, 2 */
		/* 8217D1C0h case    1:*/		cpu::op::rlwinm<1,0,2,2>(regs,&regs.R10,regs.R11);
		/* 8217D1C0h case    1:*/		return 0x8217D1C4;
		  /* 8217D1C4h */ case    2:  		/* bc 12, CR0_EQ, 56 */
		/* 8217D1C4h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217D1FC;  }
		/* 8217D1C4h case    2:*/		return 0x8217D1C8;
		  /* 8217D1C8h */ case    3:  		/* cmplwi CR6, R24, 0 */
		/* 8217D1C8h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217D1C8h case    3:*/		return 0x8217D1CC;
		  /* 8217D1CCh */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8217D1CCh case    4:*/		if ( regs.CR[6].eq ) { return 0x8217D1DC;  }
		/* 8217D1CCh case    4:*/		return 0x8217D1D0;
		  /* 8217D1D0h */ case    5:  		/* lwz R10, <#[R24 + 20]> */
		/* 8217D1D0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000014) );
		/* 8217D1D0h case    5:*/		return 0x8217D1D4;
		  /* 8217D1D4h */ case    6:  		/* rlwinm. R10, R10, 0, 0, 0 */
		/* 8217D1D4h case    6:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R10,regs.R10);
		/* 8217D1D4h case    6:*/		return 0x8217D1D8;
		  /* 8217D1D8h */ case    7:  		/* bc 12, CR0_EQ, 36 */
		/* 8217D1D8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8217D1FC;  }
		/* 8217D1D8h case    7:*/		return 0x8217D1DC;
	}
	return 0x8217D1DC;
} // Block from 8217D1BCh-8217D1DCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D1DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D1DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D1DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D1DC);
		  /* 8217D1DCh */ case    0:  		/* lwz R10, <#[R28 + 48]> */
		/* 8217D1DCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000030) );
		/* 8217D1DCh case    0:*/		return 0x8217D1E0;
		  /* 8217D1E0h */ case    1:  		/* lwz R9, <#[R10 + 12]> */
		/* 8217D1E0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217D1E0h case    1:*/		return 0x8217D1E4;
		  /* 8217D1E4h */ case    2:  		/* lwz R9, <#[R9 + 8]> */
		/* 8217D1E4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8217D1E4h case    2:*/		return 0x8217D1E8;
		  /* 8217D1E8h */ case    3:  		/* rlwinm. R9, R9, 9, 31, 31 */
		/* 8217D1E8h case    3:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R9,regs.R9);
		/* 8217D1E8h case    3:*/		return 0x8217D1EC;
		  /* 8217D1ECh */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 8217D1ECh case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217D1FC;  }
		/* 8217D1ECh case    4:*/		return 0x8217D1F0;
		  /* 8217D1F0h */ case    5:  		/* lwz R10, <#[R10]> */
		/* 8217D1F0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 8217D1F0h case    5:*/		return 0x8217D1F4;
		  /* 8217D1F4h */ case    6:  		/* rlwinm. R10, R10, 0, 28, 28 */
		/* 8217D1F4h case    6:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R10,regs.R10);
		/* 8217D1F4h case    6:*/		return 0x8217D1F8;
		  /* 8217D1F8h */ case    7:  		/* bc 12, CR0_EQ, 592 */
		/* 8217D1F8h case    7:*/		if ( regs.CR[0].eq ) { return 0x8217D448;  }
		/* 8217D1F8h case    7:*/		return 0x8217D1FC;
	}
	return 0x8217D1FC;
} // Block from 8217D1DCh-8217D1FCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D1FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D1FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D1FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D1FC);
		  /* 8217D1FCh */ case    0:  		/* lwz R10, <#[R28 + 8]> */
		/* 8217D1FCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 8217D1FCh case    0:*/		return 0x8217D200;
		  /* 8217D200h */ case    1:  		/* rlwinm. R30, R11, 19, 18, 31 */
		/* 8217D200h case    1:*/		cpu::op::rlwinm<1,19,18,31>(regs,&regs.R30,regs.R11);
		/* 8217D200h case    1:*/		return 0x8217D204;
		  /* 8217D204h */ case    2:  		/* rlwinm R11, R10, 0, 18, 24 */
		/* 8217D204h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R10);
		/* 8217D204h case    2:*/		return 0x8217D208;
		  /* 8217D208h */ case    3:  		/* addi R11, R11, -8320 */
		/* 8217D208h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFDF80);
		/* 8217D208h case    3:*/		return 0x8217D20C;
		  /* 8217D20Ch */ case    4:  		/* addic R9, R11, -1 */
		/* 8217D20Ch case    4:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 8217D20Ch case    4:*/		return 0x8217D210;
		  /* 8217D210h */ case    5:  		/* subfe R25, R9, R11 */
		/* 8217D210h case    5:*/		cpu::op::subfe<0>(regs,&regs.R25,regs.R9,regs.R11);
		/* 8217D210h case    5:*/		return 0x8217D214;
		  /* 8217D214h */ case    6:  		/* bc 4, CR0_EQ, 72 */
		/* 8217D214h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217D25C;  }
		/* 8217D214h case    6:*/		return 0x8217D218;
		  /* 8217D218h */ case    7:  		/* rlwinm. R11, R10, 0, 10, 12 */
		/* 8217D218h case    7:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R10);
		/* 8217D218h case    7:*/		return 0x8217D21C;
		  /* 8217D21Ch */ case    8:  		/* bc 12, CR0_EQ, 64 */
		/* 8217D21Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8217D25C;  }
		/* 8217D21Ch case    8:*/		return 0x8217D220;
		  /* 8217D220h */ case    9:  		/* li R10, 0 */
		/* 8217D220h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217D220h case    9:*/		return 0x8217D224;
		  /* 8217D224h */ case   10:  		/* lwz R3, <#[R28 + 44]> */
		/* 8217D224h case   10:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x0000002C) );
		/* 8217D224h case   10:*/		return 0x8217D228;
		  /* 8217D228h */ case   11:  		/* li R9, 0 */
		/* 8217D228h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8217D228h case   11:*/		return 0x8217D22C;
		  /* 8217D22Ch */ case   12:  		/* li R8, 0 */
		/* 8217D22Ch case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217D22Ch case   12:*/		return 0x8217D230;
		  /* 8217D230h */ case   13:  		/* addi R7, R1, 140 */
		/* 8217D230h case   13:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x8C);
		/* 8217D230h case   13:*/		return 0x8217D234;
		  /* 8217D234h */ case   14:  		/* addi R6, R1, 144 */
		/* 8217D234h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x90);
		/* 8217D234h case   14:*/		return 0x8217D238;
		  /* 8217D238h */ case   15:  		/* addi R5, R1, 124 */
		/* 8217D238h case   15:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x7C);
		/* 8217D238h case   15:*/		return 0x8217D23C;
		  /* 8217D23Ch */ case   16:  		/* li R4, 0 */
		/* 8217D23Ch case   16:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217D23Ch case   16:*/		return 0x8217D240;
		  /* 8217D240h */ case   17:  		/* bl 680592 */
		/* 8217D240h case   17:*/		regs.LR = 0x8217D244; return 0x822234D0;
		/* 8217D240h case   17:*/		return 0x8217D244;
		  /* 8217D244h */ case   18:  		/* lwz R11, <#[R1 + 124]> */
		/* 8217D244h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000007C) );
		/* 8217D244h case   18:*/		return 0x8217D248;
		  /* 8217D248h */ case   19:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217D248h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217D248h case   19:*/		return 0x8217D24C;
		  /* 8217D24Ch */ case   20:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217D24Ch case   20:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217D24Ch case   20:*/		return 0x8217D250;
		  /* 8217D250h */ case   21:  		/* cmplwi CR6, R11, 16000 */
		/* 8217D250h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 8217D250h case   21:*/		return 0x8217D254;
		  /* 8217D254h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 8217D254h case   22:*/		if ( !regs.CR[6].eq ) { return 0x8217D25C;  }
		/* 8217D254h case   22:*/		return 0x8217D258;
		  /* 8217D258h */ case   23:  		/* li R30, 16384 */
		/* 8217D258h case   23:*/		cpu::op::li<0>(regs,&regs.R30,0x4000);
		/* 8217D258h case   23:*/		return 0x8217D25C;
	}
	return 0x8217D25C;
} // Block from 8217D1FCh-8217D25Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 8217D25Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D25C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D25C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D25C);
		  /* 8217D25Ch */ case    0:  		/* mr R26, R28 */
		/* 8217D25Ch case    0:*/		regs.R26 = regs.R28;
		/* 8217D25Ch case    0:*/		return 0x8217D260;
		  /* 8217D260h */ case    1:  		/* b 124 */
		/* 8217D260h case    1:*/		return 0x8217D2DC;
		/* 8217D260h case    1:*/		return 0x8217D264;
	}
	return 0x8217D264;
} // Block from 8217D25Ch-8217D264h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D264h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D264( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D264) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D264);
		  /* 8217D264h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217D264h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217D264h case    0:*/		return 0x8217D268;
	}
	return 0x8217D268;
} // Block from 8217D264h-8217D268h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D268h
// Function '?OptimizePredication@Compiler@D3DXShader@@AAA_NXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D268);
		  /* 8217D268h */ case    0:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 8217D268h case    0:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 8217D268h case    0:*/		return 0x8217D26C;
		  /* 8217D26Ch */ case    1:  		/* cmplwi CR6, R10, 85 */
		/* 8217D26Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000055);
		/* 8217D26Ch case    1:*/		return 0x8217D270;
		  /* 8217D270h */ case    2:  		/* bc 4, CR6_EQ, 24 */
		/* 8217D270h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217D288;  }
		/* 8217D270h case    2:*/		return 0x8217D274;
		  /* 8217D274h */ case    3:  		/* lwz R11, <#[R17 + 48]> */
		/* 8217D274h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 8217D274h case    3:*/		return 0x8217D278;
		  /* 8217D278h */ case    4:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8217D278h case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8217D278h case    4:*/		return 0x8217D27C;
		  /* 8217D27Ch */ case    5:  		/* bc 12, CR0_EQ, 96 */
		/* 8217D27Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8217D2DC;  }
		/* 8217D27Ch case    5:*/		return 0x8217D280;
		  /* 8217D280h */ case    6:  		/* addi R18, R18, 1 */
		/* 8217D280h case    6:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 8217D280h case    6:*/		return 0x8217D284;
		  /* 8217D284h */ case    7:  		/* b 88 */
		/* 8217D284h case    7:*/		return 0x8217D2DC;
		/* 8217D284h case    7:*/		return 0x8217D288;
	}
	return 0x8217D288;
} // Block from 8217D268h-8217D288h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D288);
		  /* 8217D288h */ case    0:  		/* cmplwi CR6, R10, 84 */
		/* 8217D288h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000054);
		/* 8217D288h case    0:*/		return 0x8217D28C;
		  /* 8217D28Ch */ case    1:  		/* bc 4, CR6_EQ, 80 */
		/* 8217D28Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217D2DC;  }
		/* 8217D28Ch case    1:*/		return 0x8217D290;
		  /* 8217D290h */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8217D290h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8217D290h case    2:*/		return 0x8217D294;
		  /* 8217D294h */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8217D294h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8217D294h case    3:*/		return 0x8217D298;
		  /* 8217D298h */ case    4:  		/* li R4, 84 */
		/* 8217D298h case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 8217D298h case    4:*/		return 0x8217D29C;
		  /* 8217D29Ch */ case    5:  		/* mr R3, R16 */
		/* 8217D29Ch case    5:*/		regs.R3 = regs.R16;
		/* 8217D29Ch case    5:*/		return 0x8217D2A0;
		  /* 8217D2A0h */ case    6:  		/* bl -102000 */
		/* 8217D2A0h case    6:*/		regs.LR = 0x8217D2A4; return 0x82164430;
		/* 8217D2A0h case    6:*/		return 0x8217D2A4;
		  /* 8217D2A4h */ case    7:  		/* addi R11, R28, -16 */
		/* 8217D2A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFF0);
		/* 8217D2A4h case    7:*/		return 0x8217D2A8;
		  /* 8217D2A8h */ case    8:  		/* lwzx R11, <#[R3 + R11]> */
		/* 8217D2A8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8217D2A8h case    8:*/		return 0x8217D2AC;
		  /* 8217D2ACh */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217D2ACh case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217D2ACh case    9:*/		return 0x8217D2B0;
		  /* 8217D2B0h */ case   10:  		/* lwz R11, <#[R11]> */
		/* 8217D2B0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217D2B0h case   10:*/		return 0x8217D2B4;
		  /* 8217D2B4h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217D2B4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217D2B4h case   11:*/		return 0x8217D2B8;
		  /* 8217D2B8h */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 8217D2B8h case   12:*/		if ( regs.CR[0].eq ) { return 0x8217D2C4;  }
		/* 8217D2B8h case   12:*/		return 0x8217D2BC;
		  /* 8217D2BCh */ case   13:  		/* li R11, 0 */
		/* 8217D2BCh case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D2BCh case   13:*/		return 0x8217D2C0;
		  /* 8217D2C0h */ case   14:  		/* b 12 */
		/* 8217D2C0h case   14:*/		return 0x8217D2CC;
		/* 8217D2C0h case   14:*/		return 0x8217D2C4;
	}
	return 0x8217D2C4;
} // Block from 8217D288h-8217D2C4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217D2C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D2C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D2C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D2C4);
		  /* 8217D2C4h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217D2C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217D2C4h case    0:*/		return 0x8217D2C8;
		  /* 8217D2C8h */ case    1:  		/* addi R11, R11, -4 */
		/* 8217D2C8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 8217D2C8h case    1:*/		return 0x8217D2CC;
	}
	return 0x8217D2CC;
} // Block from 8217D2C4h-8217D2CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D2CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D2CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D2CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D2CC);
		  /* 8217D2CCh */ case    0:  		/* lwz R11, <#[R11 + 48]> */
		/* 8217D2CCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 8217D2CCh case    0:*/		return 0x8217D2D0;
		  /* 8217D2D0h */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 8217D2D0h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 8217D2D0h case    1:*/		return 0x8217D2D4;
		  /* 8217D2D4h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 8217D2D4h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217D2DC;  }
		/* 8217D2D4h case    2:*/		return 0x8217D2D8;
		  /* 8217D2D8h */ case    3:  		/* addi R18, R18, -1 */
		/* 8217D2D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0xFFFFFFFF);
		/* 8217D2D8h case    3:*/		return 0x8217D2DC;
	}
	return 0x8217D2DC;
} // Block from 8217D2CCh-8217D2DCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217D2DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D2DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D2DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D2DC);
		  /* 8217D2DCh */ case    0:  		/* mr R3, R28 */
		/* 8217D2DCh case    0:*/		regs.R3 = regs.R28;
		/* 8217D2DCh case    0:*/		return 0x8217D2E0;
		  /* 8217D2E0h */ case    1:  		/* bl -102960 */
		/* 8217D2E0h case    1:*/		regs.LR = 0x8217D2E4; return 0x821640B0;
		/* 8217D2E0h case    1:*/		return 0x8217D2E4;
		  /* 8217D2E4h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D2E4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D2E4h case    2:*/		return 0x8217D2E8;
		  /* 8217D2E8h */ case    3:  		/* bc 12, CR0_EQ, 40 */
		/* 8217D2E8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8217D310;  }
		/* 8217D2E8h case    3:*/		return 0x8217D2EC;
		  /* 8217D2ECh */ case    4:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217D2ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217D2ECh case    4:*/		return 0x8217D2F0;
		  /* 8217D2F0h */ case    5:  		/* li R21, 0 */
		/* 8217D2F0h case    5:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8217D2F0h case    5:*/		return 0x8217D2F4;
		  /* 8217D2F4h */ case    6:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 8217D2F4h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 8217D2F4h case    6:*/		return 0x8217D2F8;
		  /* 8217D2F8h */ case    7:  		/* addi R11, R10, -66 */
		/* 8217D2F8h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFFFBE);
		/* 8217D2F8h case    7:*/		return 0x8217D2FC;
		  /* 8217D2FCh */ case    8:  		/* addi R10, R10, -63 */
		/* 8217D2FCh case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFC1);
		/* 8217D2FCh case    8:*/		return 0x8217D300;
		  /* 8217D300h */ case    9:  		/* addic R9, R11, -1 */
		/* 8217D300h case    9:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 8217D300h case    9:*/		return 0x8217D304;
		  /* 8217D304h */ case   10:  		/* subfe R20, R9, R11 */
		/* 8217D304h case   10:*/		cpu::op::subfe<0>(regs,&regs.R20,regs.R9,regs.R11);
		/* 8217D304h case   10:*/		return 0x8217D308;
		  /* 8217D308h */ case   11:  		/* addic R11, R10, -1 */
		/* 8217D308h case   11:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R10,0xFFFFFFFF);
		/* 8217D308h case   11:*/		return 0x8217D30C;
		  /* 8217D30Ch */ case   12:  		/* subfe R19, R11, R10 */
		/* 8217D30Ch case   12:*/		cpu::op::subfe<0>(regs,&regs.R19,regs.R11,regs.R10);
		/* 8217D30Ch case   12:*/		return 0x8217D310;
	}
	return 0x8217D310;
} // Block from 8217D2DCh-8217D310h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217D310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D310);
		  /* 8217D310h */ case    0:  		/* lwz R31, <#[R28 + 8]> */
		/* 8217D310h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000008) );
		/* 8217D310h case    0:*/		return 0x8217D314;
		  /* 8217D314h */ case    1:  		/* rlwinm. R11, R31, 15, 31, 31 */
		/* 8217D314h case    1:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R31);
		/* 8217D314h case    1:*/		return 0x8217D318;
		  /* 8217D318h */ case    2:  		/* bc 4, CR0_EQ, 48 */
		/* 8217D318h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217D348;  }
		/* 8217D318h case    2:*/		return 0x8217D31C;
		  /* 8217D31Ch */ case    3:  		/* lwz R11, <#[R17 + 76]> */
		/* 8217D31Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x0000004C) );
		/* 8217D31Ch case    3:*/		return 0x8217D320;
		  /* 8217D320h */ case    4:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 8217D320h case    4:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 8217D320h case    4:*/		return 0x8217D324;
		  /* 8217D324h */ case    5:  		/* bc 12, CR0_EQ, 64 */
		/* 8217D324h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217D364;  }
		/* 8217D324h case    5:*/		return 0x8217D328;
		  /* 8217D328h */ case    6:  		/* mr R3, R28 */
		/* 8217D328h case    6:*/		regs.R3 = regs.R28;
		/* 8217D328h case    6:*/		return 0x8217D32C;
		  /* 8217D32Ch */ case    7:  		/* bl -66980 */
		/* 8217D32Ch case    7:*/		regs.LR = 0x8217D330; return 0x8216CD88;
		/* 8217D32Ch case    7:*/		return 0x8217D330;
		  /* 8217D330h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D330h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D330h case    8:*/		return 0x8217D334;
		  /* 8217D334h */ case    9:  		/* bc 12, CR0_EQ, 48 */
		/* 8217D334h case    9:*/		if ( regs.CR[0].eq ) { return 0x8217D364;  }
		/* 8217D334h case    9:*/		return 0x8217D338;
		  /* 8217D338h */ case   10:  		/* mr R3, R28 */
		/* 8217D338h case   10:*/		regs.R3 = regs.R28;
		/* 8217D338h case   10:*/		return 0x8217D33C;
		  /* 8217D33Ch */ case   11:  		/* bl -102908 */
		/* 8217D33Ch case   11:*/		regs.LR = 0x8217D340; return 0x82164140;
		/* 8217D33Ch case   11:*/		return 0x8217D340;
		  /* 8217D340h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D340h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D340h case   12:*/		return 0x8217D344;
		  /* 8217D344h */ case   13:  		/* bc 4, CR0_EQ, 32 */
		/* 8217D344h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8217D364;  }
		/* 8217D344h case   13:*/		return 0x8217D348;
	}
	return 0x8217D348;
} // Block from 8217D310h-8217D348h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217D348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D348);
		  /* 8217D348h */ case    0:  		/* rlwinm R11, R31, 0, 18, 24 */
		/* 8217D348h case    0:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R31);
		/* 8217D348h case    0:*/		return 0x8217D34C;
		  /* 8217D34Ch */ case    1:  		/* cmplwi CR6, R11, 11520 */
		/* 8217D34Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002D00);
		/* 8217D34Ch case    1:*/		return 0x8217D350;
		  /* 8217D350h */ case    2:  		/* bc 4, CR6_EQ, 16 */
		/* 8217D350h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217D360;  }
		/* 8217D350h case    2:*/		return 0x8217D354;
		  /* 8217D354h */ case    3:  		/* lwz R11, <#[R17 + 48]> */
		/* 8217D354h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000030) );
		/* 8217D354h case    3:*/		return 0x8217D358;
		  /* 8217D358h */ case    4:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 8217D358h case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 8217D358h case    4:*/		return 0x8217D35C;
		  /* 8217D35Ch */ case    5:  		/* bc 4, CR0_EQ, 8 */
		/* 8217D35Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217D364;  }
		/* 8217D35Ch case    5:*/		return 0x8217D360;
	}
	return 0x8217D360;
} // Block from 8217D348h-8217D360h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217D360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D360);
		  /* 8217D360h */ case    0:  		/* li R21, 1 */
		/* 8217D360h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 8217D360h case    0:*/		return 0x8217D364;
	}
	return 0x8217D364;
} // Block from 8217D360h-8217D364h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D364);
		  /* 8217D364h */ case    0:  		/* cmplwi CR6, R22, 0 */
		/* 8217D364h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 8217D364h case    0:*/		return 0x8217D368;
		  /* 8217D368h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 8217D368h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217D3BC;  }
		/* 8217D368h case    1:*/		return 0x8217D36C;
		  /* 8217D36Ch */ case    2:  		/* rlwinm R11, R22, 0, 0, 30 */
		/* 8217D36Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R22);
		/* 8217D36Ch case    2:*/		return 0x8217D370;
		  /* 8217D370h */ case    3:  		/* lwz R10, <#[R11 + 36]> */
		/* 8217D370h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8217D370h case    3:*/		return 0x8217D374;
		  /* 8217D374h */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 8217D374h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 8217D374h case    4:*/		return 0x8217D378;
		  /* 8217D378h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 8217D378h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217D384;  }
		/* 8217D378h case    5:*/		return 0x8217D37C;
		  /* 8217D37Ch */ case    6:  		/* li R11, 0 */
		/* 8217D37Ch case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D37Ch case    6:*/		return 0x8217D380;
		  /* 8217D380h */ case    7:  		/* b 12 */
		/* 8217D380h case    7:*/		return 0x8217D38C;
		/* 8217D380h case    7:*/		return 0x8217D384;
	}
	return 0x8217D384;
} // Block from 8217D364h-8217D384h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D384h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D384( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D384) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D384);
		  /* 8217D384h */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 8217D384h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 8217D384h case    0:*/		return 0x8217D388;
		  /* 8217D388h */ case    1:  		/* addi R11, R11, -40 */
		/* 8217D388h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217D388h case    1:*/		return 0x8217D38C;
	}
	return 0x8217D38C;
} // Block from 8217D384h-8217D38Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D38Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D38C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D38C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D38C);
		  /* 8217D38Ch */ case    0:  		/* cmplw CR6, R28, R11 */
		/* 8217D38Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8217D38Ch case    0:*/		return 0x8217D390;
		  /* 8217D390h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 8217D390h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217D3AC;  }
		/* 8217D390h case    1:*/		return 0x8217D394;
		  /* 8217D394h */ case    2:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8217D394h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8217D394h case    2:*/		return 0x8217D398;
		  /* 8217D398h */ case    3:  		/* mr R22, R28 */
		/* 8217D398h case    3:*/		regs.R22 = regs.R28;
		/* 8217D398h case    3:*/		return 0x8217D39C;
		  /* 8217D39Ch */ case    4:  		/* lwz R11, <#[R11 + 36]> */
		/* 8217D39Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8217D39Ch case    4:*/		return 0x8217D3A0;
		  /* 8217D3A0h */ case    5:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217D3A0h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217D3A0h case    5:*/		return 0x8217D3A4;
		  /* 8217D3A4h */ case    6:  		/* bc 4, CR0_EQ, 92 */
		/* 8217D3A4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217D400;  }
		/* 8217D3A4h case    6:*/		return 0x8217D3A8;
		  /* 8217D3A8h */ case    7:  		/* b 72 */
		/* 8217D3A8h case    7:*/		return 0x8217D3F0;
		/* 8217D3A8h case    7:*/		return 0x8217D3AC;
	}
	return 0x8217D3AC;
} // Block from 8217D38Ch-8217D3ACh (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D3ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D3AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D3AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D3AC);
		  /* 8217D3ACh */ case    0:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 8217D3ACh case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 8217D3ACh case    0:*/		return 0x8217D3B0;
		  /* 8217D3B0h */ case    1:  		/* bc 4, CR0_EQ, 80 */
		/* 8217D3B0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217D400;  }
		/* 8217D3B0h case    1:*/		return 0x8217D3B4;
		  /* 8217D3B4h */ case    2:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 8217D3B4h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 8217D3B4h case    2:*/		return 0x8217D3B8;
		  /* 8217D3B8h */ case    3:  		/* b 60 */
		/* 8217D3B8h case    3:*/		return 0x8217D3F4;
		/* 8217D3B8h case    3:*/		return 0x8217D3BC;
	}
	return 0x8217D3BC;
} // Block from 8217D3ACh-8217D3BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217D3BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D3BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D3BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D3BC);
		  /* 8217D3BCh */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 8217D3BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 8217D3BCh case    0:*/		return 0x8217D3C0;
		  /* 8217D3C0h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217D3C0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217D3C0h case    1:*/		return 0x8217D3C4;
		  /* 8217D3C4h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 8217D3C4h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217D3D0;  }
		/* 8217D3C4h case    2:*/		return 0x8217D3C8;
		  /* 8217D3C8h */ case    3:  		/* li R11, 0 */
		/* 8217D3C8h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D3C8h case    3:*/		return 0x8217D3CC;
		  /* 8217D3CCh */ case    4:  		/* b 16 */
		/* 8217D3CCh case    4:*/		return 0x8217D3DC;
		/* 8217D3CCh case    4:*/		return 0x8217D3D0;
	}
	return 0x8217D3D0;
} // Block from 8217D3BCh-8217D3D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217D3D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D3D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D3D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D3D0);
		  /* 8217D3D0h */ case    0:  		/* lwz R11, <#[R23]> */
		/* 8217D3D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8217D3D0h case    0:*/		return 0x8217D3D4;
		  /* 8217D3D4h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217D3D4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217D3D4h case    1:*/		return 0x8217D3D8;
		  /* 8217D3D8h */ case    2:  		/* addi R11, R11, -40 */
		/* 8217D3D8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217D3D8h case    2:*/		return 0x8217D3DC;
	}
	return 0x8217D3DC;
} // Block from 8217D3D0h-8217D3DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D3DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D3DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D3DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D3DC);
		  /* 8217D3DCh */ case    0:  		/* cmplw CR6, R28, R11 */
		/* 8217D3DCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 8217D3DCh case    0:*/		return 0x8217D3E0;
		  /* 8217D3E0h */ case    1:  		/* bc 12, CR6_EQ, -76 */
		/* 8217D3E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217D394;  }
		/* 8217D3E0h case    1:*/		return 0x8217D3E4;
		  /* 8217D3E4h */ case    2:  		/* cmplwi CR6, R10, 0 */
		/* 8217D3E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217D3E4h case    2:*/		return 0x8217D3E8;
		  /* 8217D3E8h */ case    3:  		/* bc 4, CR6_EQ, 24 */
		/* 8217D3E8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217D400;  }
		/* 8217D3E8h case    3:*/		return 0x8217D3EC;
		  /* 8217D3ECh */ case    4:  		/* lwz R11, <#[R23]> */
		/* 8217D3ECh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 8217D3ECh case    4:*/		return 0x8217D3F0;
	}
	return 0x8217D3F0;
} // Block from 8217D3DCh-8217D3F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217D3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D3F0);
		  /* 8217D3F0h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217D3F0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217D3F0h case    0:*/		return 0x8217D3F4;
	}
	return 0x8217D3F4;
} // Block from 8217D3F0h-8217D3F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D3F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D3F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D3F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D3F4);
		  /* 8217D3F4h */ case    0:  		/* addi R28, R11, -40 */
		/* 8217D3F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 8217D3F4h case    0:*/		return 0x8217D3F8;
		  /* 8217D3F8h */ case    1:  		/* cmplwi CR6, R28, 0 */
		/* 8217D3F8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8217D3F8h case    1:*/		return 0x8217D3FC;
		  /* 8217D3FCh */ case    2:  		/* bc 4, CR6_EQ, -1760 */
		/* 8217D3FCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217CD1C;  }
		/* 8217D3FCh case    2:*/		return 0x8217D400;
	}
	return 0x8217D400;
} // Block from 8217D3F4h-8217D400h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D400h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D400( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D400) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D400);
		  /* 8217D400h */ case    0:  		/* rlwinm R11, R17, 0, 0, 30 */
		/* 8217D400h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R17);
		/* 8217D400h case    0:*/		return 0x8217D404;
		  /* 8217D404h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 8217D404h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217D404h case    1:*/		return 0x8217D408;
		  /* 8217D408h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217D408h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217D408h case    2:*/		return 0x8217D40C;
		  /* 8217D40Ch */ case    3:  		/* bc 12, CR0_EQ, -1828 */
		/* 8217D40Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x8217CCE8;  }
		/* 8217D40Ch case    3:*/		return 0x8217D410;
	}
	return 0x8217D410;
} // Block from 8217D400h-8217D410h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217D410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D410);
		  /* 8217D410h */ case    0:  		/* li R17, 0 */
		/* 8217D410h case    0:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 8217D410h case    0:*/		return 0x8217D414;
		  /* 8217D414h */ case    1:  		/* b -1828 */
		/* 8217D414h case    1:*/		return 0x8217CCF0;
		/* 8217D414h case    1:*/		return 0x8217D418;
	}
	return 0x8217D418;
} // Block from 8217D410h-8217D418h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D418);
		  /* 8217D418h */ case    0:  		/* mr R4, R26 */
		/* 8217D418h case    0:*/		regs.R4 = regs.R26;
		/* 8217D418h case    0:*/		return 0x8217D41C;
		  /* 8217D41Ch */ case    1:  		/* li R5, 0 */
		/* 8217D41Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217D41Ch case    1:*/		return 0x8217D420;
		  /* 8217D420h */ case    2:  		/* mr R3, R16 */
		/* 8217D420h case    2:*/		regs.R3 = regs.R16;
		/* 8217D420h case    2:*/		return 0x8217D424;
		  /* 8217D424h */ case    3:  		/* bl -20340 */
		/* 8217D424h case    3:*/		regs.LR = 0x8217D428; return 0x821784B0;
		/* 8217D424h case    3:*/		return 0x8217D428;
		  /* 8217D428h */ case    4:  		/* li R15, 1 */
		/* 8217D428h case    4:*/		cpu::op::li<0>(regs,&regs.R15,0x1);
		/* 8217D428h case    4:*/		return 0x8217D42C;
		  /* 8217D42Ch */ case    5:  		/* b -1904 */
		/* 8217D42Ch case    5:*/		return 0x8217CCBC;
		/* 8217D42Ch case    5:*/		return 0x8217D430;
	}
	return 0x8217D430;
} // Block from 8217D418h-8217D430h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217D430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D430);
		  /* 8217D430h */ case    0:  		/* mr R4, R28 */
		/* 8217D430h case    0:*/		regs.R4 = regs.R28;
		/* 8217D430h case    0:*/		return 0x8217D434;
		  /* 8217D434h */ case    1:  		/* b -24 */
		/* 8217D434h case    1:*/		return 0x8217D41C;
		/* 8217D434h case    1:*/		return 0x8217D438;
	}
	return 0x8217D438;
} // Block from 8217D430h-8217D438h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D438);
		  /* 8217D438h */ case    0:  		/* mr R4, R16 */
		/* 8217D438h case    0:*/		regs.R4 = regs.R16;
		/* 8217D438h case    0:*/		return 0x8217D43C;
		  /* 8217D43Ch */ case    1:  		/* mr R3, R28 */
		/* 8217D43Ch case    1:*/		regs.R3 = regs.R28;
		/* 8217D43Ch case    1:*/		return 0x8217D440;
		  /* 8217D440h */ case    2:  		/* bl 673000 */
		/* 8217D440h case    2:*/		regs.LR = 0x8217D444; return 0x82221928;
		/* 8217D440h case    2:*/		return 0x8217D444;
		  /* 8217D444h */ case    3:  		/* b -44 */
		/* 8217D444h case    3:*/		return 0x8217D418;
		/* 8217D444h case    3:*/		return 0x8217D448;
	}
	return 0x8217D448;
} // Block from 8217D438h-8217D448h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217D448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D448);
		  /* 8217D448h */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 8217D448h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 8217D448h case    0:*/		return 0x8217D44C;
		  /* 8217D44Ch */ case    1:  		/* addi R29, R28, 4 */
		/* 8217D44Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0x4);
		/* 8217D44Ch case    1:*/		return 0x8217D450;
		  /* 8217D450h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8217D450h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217D450h case    2:*/		return 0x8217D454;
		  /* 8217D454h */ case    3:  		/* bc 12, CR6_EQ, 780 */
		/* 8217D454h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217D760;  }
		/* 8217D454h case    3:*/		return 0x8217D458;
		  /* 8217D458h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 8217D458h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8217D458h case    4:*/		return 0x8217D45C;
		  /* 8217D45Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 8217D45Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217D45Ch case    5:*/		return 0x8217D460;
		  /* 8217D460h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 8217D460h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217D474;  }
		/* 8217D460h case    6:*/		return 0x8217D464;
		  /* 8217D464h */ case    7:  		/* lwz R10, <#[R10 + 8]> */
		/* 8217D464h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8217D464h case    7:*/		return 0x8217D468;
		  /* 8217D468h */ case    8:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8217D468h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8217D468h case    8:*/		return 0x8217D46C;
		  /* 8217D46Ch */ case    9:  		/* cmplwi CR6, R10, 11520 */
		/* 8217D46Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002D00);
		/* 8217D46Ch case    9:*/		return 0x8217D470;
		  /* 8217D470h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 8217D470h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217D47C;  }
		/* 8217D470h case   10:*/		return 0x8217D474;
	}
	return 0x8217D474;
} // Block from 8217D448h-8217D474h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217D474h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D474( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D474) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D474);
		  /* 8217D474h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217D474h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217D474h case    0:*/		return 0x8217D478;
		  /* 8217D478h */ case    1:  		/* b -40 */
		/* 8217D478h case    1:*/		return 0x8217D450;
		/* 8217D478h case    1:*/		return 0x8217D47C;
	}
	return 0x8217D47C;
} // Block from 8217D474h-8217D47Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D47Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D47C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D47C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D47C);
		  /* 8217D47Ch */ case    0:  		/* lwz R11, <#[R11 + 16]> */
		/* 8217D47Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8217D47Ch case    0:*/		return 0x8217D480;
		  /* 8217D480h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217D480h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217D480h case    1:*/		return 0x8217D484;
		  /* 8217D484h */ case    2:  		/* addi R31, R11, 36 */
		/* 8217D484h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0x24);
		/* 8217D484h case    2:*/		return 0x8217D488;
		  /* 8217D488h */ case    3:  		/* lwz R10, <#[R11 + 36]> */
		/* 8217D488h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8217D488h case    3:*/		return 0x8217D48C;
		  /* 8217D48Ch */ case    4:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 8217D48Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 8217D48Ch case    4:*/		return 0x8217D490;
		  /* 8217D490h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 8217D490h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217D49C;  }
		/* 8217D490h case    5:*/		return 0x8217D494;
		  /* 8217D494h */ case    6:  		/* li R11, 0 */
		/* 8217D494h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D494h case    6:*/		return 0x8217D498;
		  /* 8217D498h */ case    7:  		/* b 12 */
		/* 8217D498h case    7:*/		return 0x8217D4A4;
		/* 8217D498h case    7:*/		return 0x8217D49C;
	}
	return 0x8217D49C;
} // Block from 8217D47Ch-8217D49Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D49C);
		  /* 8217D49Ch */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 8217D49Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 8217D49Ch case    0:*/		return 0x8217D4A0;
		  /* 8217D4A0h */ case    1:  		/* addi R11, R11, -40 */
		/* 8217D4A0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217D4A0h case    1:*/		return 0x8217D4A4;
	}
	return 0x8217D4A4;
} // Block from 8217D49Ch-8217D4A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D4A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D4A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D4A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D4A4);
		  /* 8217D4A4h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217D4A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217D4A4h case    0:*/		return 0x8217D4A8;
		  /* 8217D4A8h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217D4A8h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217D4A8h case    1:*/		return 0x8217D4AC;
		  /* 8217D4ACh */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 8217D4ACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 8217D4ACh case    2:*/		return 0x8217D4B0;
		  /* 8217D4B0h */ case    3:  		/* bc 12, CR6_LT, 16 */
		/* 8217D4B0h case    3:*/		if ( regs.CR[6].lt ) { return 0x8217D4C0;  }
		/* 8217D4B0h case    3:*/		return 0x8217D4B4;
		  /* 8217D4B4h */ case    4:  		/* cmplwi CR6, R11, 102 */
		/* 8217D4B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 8217D4B4h case    4:*/		return 0x8217D4B8;
		  /* 8217D4B8h */ case    5:  		/* li R11, 1 */
		/* 8217D4B8h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217D4B8h case    5:*/		return 0x8217D4BC;
		  /* 8217D4BCh */ case    6:  		/* bc 4, CR6_GT, 8 */
		/* 8217D4BCh case    6:*/		if ( !regs.CR[6].gt ) { return 0x8217D4C4;  }
		/* 8217D4BCh case    6:*/		return 0x8217D4C0;
	}
	return 0x8217D4C0;
} // Block from 8217D4A4h-8217D4C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217D4C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D4C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D4C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D4C0);
		  /* 8217D4C0h */ case    0:  		/* li R11, 0 */
		/* 8217D4C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D4C0h case    0:*/		return 0x8217D4C4;
	}
	return 0x8217D4C4;
} // Block from 8217D4C0h-8217D4C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D4C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D4C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D4C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D4C4);
		  /* 8217D4C4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217D4C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217D4C4h case    0:*/		return 0x8217D4C8;
		  /* 8217D4C8h */ case    1:  		/* bc 4, CR0_EQ, 32 */
		/* 8217D4C8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217D4E8;  }
		/* 8217D4C8h case    1:*/		return 0x8217D4CC;
		  /* 8217D4CCh */ case    2:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 8217D4CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 8217D4CCh case    2:*/		return 0x8217D4D0;
		  /* 8217D4D0h */ case    3:  		/* bc 12, CR0_EQ, 12 */
		/* 8217D4D0h case    3:*/		if ( regs.CR[0].eq ) { return 0x8217D4DC;  }
		/* 8217D4D0h case    3:*/		return 0x8217D4D4;
		  /* 8217D4D4h */ case    4:  		/* li R11, 0 */
		/* 8217D4D4h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D4D4h case    4:*/		return 0x8217D4D8;
		  /* 8217D4D8h */ case    5:  		/* b -88 */
		/* 8217D4D8h case    5:*/		return 0x8217D480;
		/* 8217D4D8h case    5:*/		return 0x8217D4DC;
	}
	return 0x8217D4DC;
} // Block from 8217D4C4h-8217D4DCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217D4DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D4DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D4DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D4DC);
		  /* 8217D4DCh */ case    0:  		/* rlwinm R11, R10, 0, 0, 30 */
		/* 8217D4DCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R10);
		/* 8217D4DCh case    0:*/		return 0x8217D4E0;
		  /* 8217D4E0h */ case    1:  		/* addi R11, R11, -40 */
		/* 8217D4E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217D4E0h case    1:*/		return 0x8217D4E4;
		  /* 8217D4E4h */ case    2:  		/* b -100 */
		/* 8217D4E4h case    2:*/		return 0x8217D480;
		/* 8217D4E4h case    2:*/		return 0x8217D4E8;
	}
	return 0x8217D4E8;
} // Block from 8217D4DCh-8217D4E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D4E8);
		  /* 8217D4E8h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217D4E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217D4E8h case    0:*/		return 0x8217D4EC;
		  /* 8217D4ECh */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217D4ECh case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217D4ECh case    1:*/		return 0x8217D4F0;
		  /* 8217D4F0h */ case    2:  		/* cmpwi CR6, R11, 21 */
		/* 8217D4F0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000015);
		/* 8217D4F0h case    2:*/		return 0x8217D4F4;
		  /* 8217D4F4h */ case    3:  		/* bc 12, CR6_EQ, 52 */
		/* 8217D4F4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217D528;  }
		/* 8217D4F4h case    3:*/		return 0x8217D4F8;
		  /* 8217D4F8h */ case    4:  		/* cmpwi CR6, R11, 22 */
		/* 8217D4F8h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000016);
		/* 8217D4F8h case    4:*/		return 0x8217D4FC;
		  /* 8217D4FCh */ case    5:  		/* bc 12, CR6_EQ, 36 */
		/* 8217D4FCh case    5:*/		if ( regs.CR[6].eq ) { return 0x8217D520;  }
		/* 8217D4FCh case    5:*/		return 0x8217D500;
		  /* 8217D500h */ case    6:  		/* cmpwi CR6, R11, 23 */
		/* 8217D500h case    6:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000017);
		/* 8217D500h case    6:*/		return 0x8217D504;
		  /* 8217D504h */ case    7:  		/* bc 12, CR6_EQ, 20 */
		/* 8217D504h case    7:*/		if ( regs.CR[6].eq ) { return 0x8217D518;  }
		/* 8217D504h case    7:*/		return 0x8217D508;
		  /* 8217D508h */ case    8:  		/* cmpwi CR6, R11, 24 */
		/* 8217D508h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 8217D508h case    8:*/		return 0x8217D50C;
		  /* 8217D50Ch */ case    9:  		/* bc 4, CR6_EQ, 608 */
		/* 8217D50Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8217D76C;  }
		/* 8217D50Ch case    9:*/		return 0x8217D510;
		  /* 8217D510h */ case   10:  		/* li R6, 62 */
		/* 8217D510h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x3E);
		/* 8217D510h case   10:*/		return 0x8217D514;
		  /* 8217D514h */ case   11:  		/* b 24 */
		/* 8217D514h case   11:*/		return 0x8217D52C;
		/* 8217D514h case   11:*/		return 0x8217D518;
	}
	return 0x8217D518;
} // Block from 8217D4E8h-8217D518h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217D518h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D518( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D518) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D518);
		  /* 8217D518h */ case    0:  		/* li R6, 61 */
		/* 8217D518h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3D);
		/* 8217D518h case    0:*/		return 0x8217D51C;
		  /* 8217D51Ch */ case    1:  		/* b 16 */
		/* 8217D51Ch case    1:*/		return 0x8217D52C;
		/* 8217D51Ch case    1:*/		return 0x8217D520;
	}
	return 0x8217D520;
} // Block from 8217D518h-8217D520h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D520);
		  /* 8217D520h */ case    0:  		/* li R6, 60 */
		/* 8217D520h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3C);
		/* 8217D520h case    0:*/		return 0x8217D524;
		  /* 8217D524h */ case    1:  		/* b 8 */
		/* 8217D524h case    1:*/		return 0x8217D52C;
		/* 8217D524h case    1:*/		return 0x8217D528;
	}
	return 0x8217D528;
} // Block from 8217D520h-8217D528h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D528);
		  /* 8217D528h */ case    0:  		/* li R6, 59 */
		/* 8217D528h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x3B);
		/* 8217D528h case    0:*/		return 0x8217D52C;
	}
	return 0x8217D52C;
} // Block from 8217D528h-8217D52Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D52Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D52C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D52C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D52C);
		  /* 8217D52Ch */ case    0:  		/* li R8, 1 */
		/* 8217D52Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217D52Ch case    0:*/		return 0x8217D530;
		  /* 8217D530h */ case    1:  		/* li R7, 1 */
		/* 8217D530h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8217D530h case    1:*/		return 0x8217D534;
		  /* 8217D534h */ case    2:  		/* li R5, 0 */
		/* 8217D534h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217D534h case    2:*/		return 0x8217D538;
		  /* 8217D538h */ case    3:  		/* mr R4, R17 */
		/* 8217D538h case    3:*/		regs.R4 = regs.R17;
		/* 8217D538h case    3:*/		return 0x8217D53C;
		  /* 8217D53Ch */ case    4:  		/* mr R3, R16 */
		/* 8217D53Ch case    4:*/		regs.R3 = regs.R16;
		/* 8217D53Ch case    4:*/		return 0x8217D540;
		  /* 8217D540h */ case    5:  		/* bl 685144 */
		/* 8217D540h case    5:*/		regs.LR = 0x8217D544; return 0x82224998;
		/* 8217D540h case    5:*/		return 0x8217D544;
		  /* 8217D544h */ case    6:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 8217D544h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 8217D544h case    6:*/		return 0x8217D548;
		  /* 8217D548h */ case    7:  		/* lwz R9, <#[R31]> */
		/* 8217D548h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8217D548h case    7:*/		return 0x8217D54C;
		  /* 8217D54Ch */ case    8:  		/* addi R8, R31, -36 */
		/* 8217D54Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R31,0xFFFFFFDC);
		/* 8217D54Ch case    8:*/		return 0x8217D550;
		  /* 8217D550h */ case    9:  		/* addi R11, R11, 36 */
		/* 8217D550h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217D550h case    9:*/		return 0x8217D554;
		  /* 8217D554h */ case   10:  		/* mr R30, R3 */
		/* 8217D554h case   10:*/		regs.R30 = regs.R3;
		/* 8217D554h case   10:*/		return 0x8217D558;
		  /* 8217D558h */ case   11:  		/* addi R7, R11, -36 */
		/* 8217D558h case   11:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8217D558h case   11:*/		return 0x8217D55C;
		  /* 8217D55Ch */ case   12:  		/* addi R10, R11, 4 */
		/* 8217D55Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217D55Ch case   12:*/		return 0x8217D560;
		  /* 8217D560h */ case   13:  		/* stw R9, <#[R11]> */
		/* 8217D560h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217D560h case   13:*/		return 0x8217D564;
		  /* 8217D564h */ case   14:  		/* lwz R9, <#[R31]> */
		/* 8217D564h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 8217D564h case   14:*/		return 0x8217D568;
		  /* 8217D568h */ case   15:  		/* rlwinm R9, R9, 0, 0, 30 */
		/* 8217D568h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R9);
		/* 8217D568h case   15:*/		return 0x8217D56C;
		  /* 8217D56Ch */ case   16:  		/* stw R7, <#[R9]> */
		/* 8217D56Ch case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 8217D56Ch case   16:*/		return 0x8217D570;
		  /* 8217D570h */ case   17:  		/* stw R8, <#[R11 + 4]> */
		/* 8217D570h case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217D570h case   17:*/		return 0x8217D574;
		  /* 8217D574h */ case   18:  		/* stw R10, <#[R31]> */
		/* 8217D574h case   18:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8217D574h case   18:*/		return 0x8217D578;
		  /* 8217D578h */ case   19:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217D578h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217D578h case   19:*/		return 0x8217D57C;
		  /* 8217D57Ch */ case   20:  		/* ori R11, R11, 64 */
		/* 8217D57Ch case   20:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x40);
		/* 8217D57Ch case   20:*/		return 0x8217D580;
		  /* 8217D580h */ case   21:  		/* stw R11, <#[R3 + 8]> */
		/* 8217D580h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217D580h case   21:*/		return 0x8217D584;
		  /* 8217D584h */ case   22:  		/* lwz R4, <#[R28 + 48]> */
		/* 8217D584h case   22:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000030) );
		/* 8217D584h case   22:*/		return 0x8217D588;
		  /* 8217D588h */ case   23:  		/* bl -21440 */
		/* 8217D588h case   23:*/		regs.LR = 0x8217D58C; return 0x821781C8;
		/* 8217D588h case   23:*/		return 0x8217D58C;
		  /* 8217D58Ch */ case   24:  		/* stw R3, <#[R30 + 44]> */
		/* 8217D58Ch case   24:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x0000002C) );
		/* 8217D58Ch case   24:*/		return 0x8217D590;
		  /* 8217D590h */ case   25:  		/* cmplwi CR6, R27, 0 */
		/* 8217D590h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 8217D590h case   25:*/		return 0x8217D594;
		  /* 8217D594h */ case   26:  		/* bc 12, CR6_EQ, 204 */
		/* 8217D594h case   26:*/		if ( regs.CR[6].eq ) { return 0x8217D660;  }
		/* 8217D594h case   26:*/		return 0x8217D598;
		  /* 8217D598h */ case   27:  		/* lwz R11, <#[R27 + 28]> */
		/* 8217D598h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217D598h case   27:*/		return 0x8217D59C;
		  /* 8217D59Ch */ case   28:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217D59Ch case   28:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217D59Ch case   28:*/		return 0x8217D5A0;
		  /* 8217D5A0h */ case   29:  		/* b 156 */
		/* 8217D5A0h case   29:*/		return 0x8217D63C;
		/* 8217D5A0h case   29:*/		return 0x8217D5A4;
		  /* 8217D5A4h */ case   30:  		/* lwz R10, <#[R31 + 76]> */
		/* 8217D5A4h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217D5A4h case   30:*/		return 0x8217D5A8;
		  /* 8217D5A8h */ case   31:  		/* rlwinm. R11, R10, 10, 31, 31 */
		/* 8217D5A8h case   31:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R10);
		/* 8217D5A8h case   31:*/		return 0x8217D5AC;
		  /* 8217D5ACh */ case   32:  		/* bc 12, CR0_EQ, 164 */
		/* 8217D5ACh case   32:*/		if ( regs.CR[0].eq ) { return 0x8217D650;  }
		/* 8217D5ACh case   32:*/		return 0x8217D5B0;
		  /* 8217D5B0h */ case   33:  		/* lwz R11, <#[R31 + 112]> */
		/* 8217D5B0h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 8217D5B0h case   33:*/		return 0x8217D5B4;
		  /* 8217D5B4h */ case   34:  		/* lwz R9, <#[R11 + 48]> */
		/* 8217D5B4h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8217D5B4h case   34:*/		return 0x8217D5B8;
		  /* 8217D5B8h */ case   35:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 8217D5B8h case   35:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 8217D5B8h case   35:*/		return 0x8217D5BC;
		  /* 8217D5BCh */ case   36:  		/* bc 12, CR0_EQ, 48 */
		/* 8217D5BCh case   36:*/		if ( regs.CR[0].eq ) { return 0x8217D5EC;  }
		/* 8217D5BCh case   36:*/		return 0x8217D5C0;
		  /* 8217D5C0h */ case   37:  		/* b 16 */
		/* 8217D5C0h case   37:*/		return 0x8217D5D0;
		/* 8217D5C0h case   37:*/		return 0x8217D5C4;
		  /* 8217D5C4h */ case   38:  		/* lwz R9, <#[R11 + 48]> */
		/* 8217D5C4h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8217D5C4h case   38:*/		return 0x8217D5C8;
		  /* 8217D5C8h */ case   39:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8217D5C8h case   39:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8217D5C8h case   39:*/		return 0x8217D5CC;
		  /* 8217D5CCh */ case   40:  		/* bc 12, CR0_EQ, 16 */
		/* 8217D5CCh case   40:*/		if ( regs.CR[0].eq ) { return 0x8217D5DC;  }
		/* 8217D5CCh case   40:*/		return 0x8217D5D0;
	}
	return 0x8217D5D0;
} // Block from 8217D52Ch-8217D5D0h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8217D5D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D5D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D5D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D5D0);
		  /* 8217D5D0h */ case    0:  		/* lwz R11, <#[R11 + 80]> */
		/* 8217D5D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000050) );
		/* 8217D5D0h case    0:*/		return 0x8217D5D4;
		  /* 8217D5D4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217D5D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217D5D4h case    1:*/		return 0x8217D5D8;
		  /* 8217D5D8h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8217D5D8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217D5C4;  }
		/* 8217D5D8h case    2:*/		return 0x8217D5DC;
	}
	return 0x8217D5DC;
} // Block from 8217D5D0h-8217D5DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D5DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D5DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D5DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D5DC);
		  /* 8217D5DCh */ case    0:  		/* lwz R9, <#[R11 + 48]> */
		/* 8217D5DCh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000030) );
		/* 8217D5DCh case    0:*/		return 0x8217D5E0;
		  /* 8217D5E0h */ case    1:  		/* rlwinm. R9, R9, 10, 31, 31 */
		/* 8217D5E0h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R9,regs.R9);
		/* 8217D5E0h case    1:*/		return 0x8217D5E4;
		  /* 8217D5E4h */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 8217D5E4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217D5D0;  }
		/* 8217D5E4h case    2:*/		return 0x8217D5E8;
		  /* 8217D5E8h */ case    3:  		/* stw R11, <#[R31 + 112]> */
		/* 8217D5E8h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 8217D5E8h case    3:*/		return 0x8217D5EC;
	}
	return 0x8217D5EC;
} // Block from 8217D5DCh-8217D5ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217D5ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D5EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D5EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D5EC);
		  /* 8217D5ECh */ case    0:  		/* lwz R11, <#[R31 + 112]> */
		/* 8217D5ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000070) );
		/* 8217D5ECh case    0:*/		return 0x8217D5F0;
		  /* 8217D5F0h */ case    1:  		/* lwz R9, <#[R28 + 28]> */
		/* 8217D5F0h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x0000001C) );
		/* 8217D5F0h case    1:*/		return 0x8217D5F4;
		  /* 8217D5F4h */ case    2:  		/* cmpw CR6, R11, R9 */
		/* 8217D5F4h case    2:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R9);
		/* 8217D5F4h case    2:*/		return 0x8217D5F8;
		  /* 8217D5F8h */ case    3:  		/* bc 4, CR6_EQ, 88 */
		/* 8217D5F8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217D650;  }
		/* 8217D5F8h case    3:*/		return 0x8217D5FC;
		  /* 8217D5FCh */ case    4:  		/* rlwinm R11, R10, 0, 9, 7 */
		/* 8217D5FCh case    4:*/		cpu::op::rlwinm<0,0,9,7>(regs,&regs.R11,regs.R10);
		/* 8217D5FCh case    4:*/		return 0x8217D600;
		  /* 8217D600h */ case    5:  		/* mr R4, R31 */
		/* 8217D600h case    5:*/		regs.R4 = regs.R31;
		/* 8217D600h case    5:*/		return 0x8217D604;
		  /* 8217D604h */ case    6:  		/* stw R11, <#[R31 + 76]> */
		/* 8217D604h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000004C) );
		/* 8217D604h case    6:*/		return 0x8217D608;
		  /* 8217D608h */ case    7:  		/* mr R3, R16 */
		/* 8217D608h case    7:*/		regs.R3 = regs.R16;
		/* 8217D608h case    7:*/		return 0x8217D60C;
		  /* 8217D60Ch */ case    8:  		/* bl -19868 */
		/* 8217D60Ch case    8:*/		regs.LR = 0x8217D610; return 0x82178870;
		/* 8217D60Ch case    8:*/		return 0x8217D610;
		  /* 8217D610h */ case    9:  		/* cmplwi CR0, R3, 0 */
		/* 8217D610h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8217D610h case    9:*/		return 0x8217D614;
		  /* 8217D614h */ case   10:  		/* bc 12, CR0_EQ, 36 */
		/* 8217D614h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217D638;  }
		/* 8217D614h case   10:*/		return 0x8217D618;
		  /* 8217D618h */ case   11:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217D618h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217D618h case   11:*/		return 0x8217D61C;
		  /* 8217D61Ch */ case   12:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 8217D61Ch case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 8217D61Ch case   12:*/		return 0x8217D620;
		  /* 8217D620h */ case   13:  		/* cmplwi CR6, R10, 10880 */
		/* 8217D620h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002A80);
		/* 8217D620h case   13:*/		return 0x8217D624;
		  /* 8217D624h */ case   14:  		/* bc 4, CR6_EQ, 20 */
		/* 8217D624h case   14:*/		if ( !regs.CR[6].eq ) { return 0x8217D638;  }
		/* 8217D624h case   14:*/		return 0x8217D628;
		  /* 8217D628h */ case   15:  		/* rlwinm. R10, R11, 15, 31, 31 */
		/* 8217D628h case   15:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R10,regs.R11);
		/* 8217D628h case   15:*/		return 0x8217D62C;
		  /* 8217D62Ch */ case   16:  		/* bc 12, CR0_EQ, 12 */
		/* 8217D62Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x8217D638;  }
		/* 8217D62Ch case   16:*/		return 0x8217D630;
		  /* 8217D630h */ case   17:  		/* rlwinm R11, R11, 0, 14, 12 */
		/* 8217D630h case   17:*/		cpu::op::rlwinm<0,0,14,12>(regs,&regs.R11,regs.R11);
		/* 8217D630h case   17:*/		return 0x8217D634;
		  /* 8217D634h */ case   18:  		/* stw R11, <#[R3 + 8]> */
		/* 8217D634h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217D634h case   18:*/		return 0x8217D638;
	}
	return 0x8217D638;
} // Block from 8217D5ECh-8217D638h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8217D638h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D638( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D638) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D638);
		  /* 8217D638h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217D638h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217D638h case    0:*/		return 0x8217D63C;
	}
	return 0x8217D63C;
} // Block from 8217D638h-8217D63Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D63C);
		  /* 8217D63Ch */ case    0:  		/* lwz R31, <#[R11 + 4]> */
		/* 8217D63Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 8217D63Ch case    0:*/		return 0x8217D640;
		  /* 8217D640h */ case    1:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217D640h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217D640h case    1:*/		return 0x8217D644;
		  /* 8217D644h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 8217D644h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217D650;  }
		/* 8217D644h case    2:*/		return 0x8217D648;
		  /* 8217D648h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 8217D648h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217D648h case    3:*/		return 0x8217D64C;
		  /* 8217D64Ch */ case    4:  		/* bc 4, CR6_EQ, -168 */
		/* 8217D64Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8217D5A4;  }
		/* 8217D64Ch case    4:*/		return 0x8217D650;
	}
	return 0x8217D650;
} // Block from 8217D63Ch-8217D650h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217D650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D650);
		  /* 8217D650h */ case    0:  		/* li R5, 0 */
		/* 8217D650h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217D650h case    0:*/		return 0x8217D654;
		  /* 8217D654h */ case    1:  		/* mr R4, R27 */
		/* 8217D654h case    1:*/		regs.R4 = regs.R27;
		/* 8217D654h case    1:*/		return 0x8217D658;
		  /* 8217D658h */ case    2:  		/* mr R3, R16 */
		/* 8217D658h case    2:*/		regs.R3 = regs.R16;
		/* 8217D658h case    2:*/		return 0x8217D65C;
		  /* 8217D65Ch */ case    3:  		/* bl -20908 */
		/* 8217D65Ch case    3:*/		regs.LR = 0x8217D660; return 0x821784B0;
		/* 8217D65Ch case    3:*/		return 0x8217D660;
	}
	return 0x8217D660;
} // Block from 8217D650h-8217D660h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217D660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D660);
		  /* 8217D660h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 8217D660h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217D660h case    0:*/		return 0x8217D664;
		  /* 8217D664h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8217D664h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217D678;  }
		/* 8217D664h case    1:*/		return 0x8217D668;
		  /* 8217D668h */ case    2:  		/* li R5, 0 */
		/* 8217D668h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217D668h case    2:*/		return 0x8217D66C;
		  /* 8217D66Ch */ case    3:  		/* mr R4, R24 */
		/* 8217D66Ch case    3:*/		regs.R4 = regs.R24;
		/* 8217D66Ch case    3:*/		return 0x8217D670;
		  /* 8217D670h */ case    4:  		/* mr R3, R16 */
		/* 8217D670h case    4:*/		regs.R3 = regs.R16;
		/* 8217D670h case    4:*/		return 0x8217D674;
		  /* 8217D674h */ case    5:  		/* bl -20932 */
		/* 8217D674h case    5:*/		regs.LR = 0x8217D678; return 0x821784B0;
		/* 8217D674h case    5:*/		return 0x8217D678;
	}
	return 0x8217D678;
} // Block from 8217D660h-8217D678h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217D678h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D678( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D678) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D678);
		  /* 8217D678h */ case    0:  		/* mr R8, R29 */
		/* 8217D678h case    0:*/		regs.R8 = regs.R29;
		/* 8217D678h case    0:*/		return 0x8217D67C;
		  /* 8217D67Ch */ case    1:  		/* lwz R11, <#[R8]> */
		/* 8217D67Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8217D67Ch case    1:*/		return 0x8217D680;
		  /* 8217D680h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 8217D680h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217D680h case    2:*/		return 0x8217D684;
		  /* 8217D684h */ case    3:  		/* bc 12, CR6_EQ, 128 */
		/* 8217D684h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217D704;  }
		/* 8217D684h case    3:*/		return 0x8217D688;
		  /* 8217D688h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 8217D688h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8217D688h case    4:*/		return 0x8217D68C;
		  /* 8217D68Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 8217D68Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217D68Ch case    5:*/		return 0x8217D690;
		  /* 8217D690h */ case    6:  		/* bc 12, CR6_EQ, 96 */
		/* 8217D690h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217D6F0;  }
		/* 8217D690h case    6:*/		return 0x8217D694;
		  /* 8217D694h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 8217D694h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217D694h case    7:*/		return 0x8217D698;
		  /* 8217D698h */ case    8:  		/* rlwinm. R9, R10, 0, 1, 1 */
		/* 8217D698h case    8:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R9,regs.R10);
		/* 8217D698h case    8:*/		return 0x8217D69C;
		  /* 8217D69Ch */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 8217D69Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x8217D6AC;  }
		/* 8217D69Ch case    9:*/		return 0x8217D6A0;
		  /* 8217D6A0h */ case   10:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 8217D6A0h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 8217D6A0h case   10:*/		return 0x8217D6A4;
		  /* 8217D6A4h */ case   11:  		/* li R10, 1 */
		/* 8217D6A4h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8217D6A4h case   11:*/		return 0x8217D6A8;
		  /* 8217D6A8h */ case   12:  		/* bc 12, CR0_EQ, 8 */
		/* 8217D6A8h case   12:*/		if ( regs.CR[0].eq ) { return 0x8217D6B0;  }
		/* 8217D6A8h case   12:*/		return 0x8217D6AC;
	}
	return 0x8217D6AC;
} // Block from 8217D678h-8217D6ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217D6ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D6AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D6AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D6AC);
		  /* 8217D6ACh */ case    0:  		/* li R10, 0 */
		/* 8217D6ACh case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217D6ACh case    0:*/		return 0x8217D6B0;
	}
	return 0x8217D6B0;
} // Block from 8217D6ACh-8217D6B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D6B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D6B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D6B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D6B0);
		  /* 8217D6B0h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 8217D6B0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 8217D6B0h case    0:*/		return 0x8217D6B4;
		  /* 8217D6B4h */ case    1:  		/* bc 12, CR0_EQ, 60 */
		/* 8217D6B4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217D6F0;  }
		/* 8217D6B4h case    1:*/		return 0x8217D6B8;
		  /* 8217D6B8h */ case    2:  		/* lwz R10, <#[R11 + 12]> */
		/* 8217D6B8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217D6B8h case    2:*/		return 0x8217D6BC;
		  /* 8217D6BCh */ case    3:  		/* addi R10, R10, 4 */
		/* 8217D6BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8217D6BCh case    3:*/		return 0x8217D6C0;
		  /* 8217D6C0h */ case    4:  		/* lwz R9, <#[R10]> */
		/* 8217D6C0h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217D6C0h case    4:*/		return 0x8217D6C4;
		  /* 8217D6C4h */ case    5:  		/* b 12 */
		/* 8217D6C4h case    5:*/		return 0x8217D6D0;
		/* 8217D6C4h case    5:*/		return 0x8217D6C8;
		  /* 8217D6C8h */ case    6:  		/* addi R10, R9, 8 */
		/* 8217D6C8h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 8217D6C8h case    6:*/		return 0x8217D6CC;
		  /* 8217D6CCh */ case    7:  		/* lwz R9, <#[R9 + 8]> */
		/* 8217D6CCh case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8217D6CCh case    7:*/		return 0x8217D6D0;
	}
	return 0x8217D6D0;
} // Block from 8217D6B0h-8217D6D0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D6D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D6D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D6D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D6D0);
		  /* 8217D6D0h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 8217D6D0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8217D6D0h case    0:*/		return 0x8217D6D4;
		  /* 8217D6D4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8217D6D4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217D6C8;  }
		/* 8217D6D4h case    1:*/		return 0x8217D6D8;
		  /* 8217D6D8h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 8217D6D8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8217D6D8h case    2:*/		return 0x8217D6DC;
		  /* 8217D6DCh */ case    3:  		/* stw R9, <#[R10]> */
		/* 8217D6DCh case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217D6DCh case    3:*/		return 0x8217D6E0;
		  /* 8217D6E0h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 8217D6E0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8217D6E0h case    4:*/		return 0x8217D6E4;
		  /* 8217D6E4h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 8217D6E4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217D6E4h case    5:*/		return 0x8217D6E8;
		  /* 8217D6E8h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 8217D6E8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 8217D6E8h case    6:*/		return 0x8217D6EC;
		  /* 8217D6ECh */ case    7:  		/* stw R30, <#[R11 + 12]> */
		/* 8217D6ECh case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217D6ECh case    7:*/		return 0x8217D6F0;
	}
	return 0x8217D6F0;
} // Block from 8217D6D0h-8217D6F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D6F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D6F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D6F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D6F0);
		  /* 8217D6F0h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 8217D6F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8217D6F0h case    0:*/		return 0x8217D6F4;
		  /* 8217D6F4h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 8217D6F4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8217D6F4h case    1:*/		return 0x8217D6F8;
		  /* 8217D6F8h */ case    2:  		/* bc 4, CR6_EQ, -124 */
		/* 8217D6F8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217D67C;  }
		/* 8217D6F8h case    2:*/		return 0x8217D6FC;
		  /* 8217D6FCh */ case    3:  		/* addi R8, R11, 8 */
		/* 8217D6FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 8217D6FCh case    3:*/		return 0x8217D700;
		  /* 8217D700h */ case    4:  		/* b -132 */
		/* 8217D700h case    4:*/		return 0x8217D67C;
		/* 8217D700h case    4:*/		return 0x8217D704;
	}
	return 0x8217D704;
} // Block from 8217D6F0h-8217D704h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217D704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D704);
		  /* 8217D704h */ case    0:  		/* lwz R31, <#[R28]> */
		/* 8217D704h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 8217D704h case    0:*/		return 0x8217D708;
		  /* 8217D708h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8217D708h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217D708h case    1:*/		return 0x8217D70C;
		  /* 8217D70Ch */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 8217D70Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8217D730;  }
		/* 8217D70Ch case    2:*/		return 0x8217D710;
		  /* 8217D710h */ case    3:  		/* lwz R11, <#[R31]> */
		/* 8217D710h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217D710h case    3:*/		return 0x8217D714;
		  /* 8217D714h */ case    4:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8217D714h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8217D714h case    4:*/		return 0x8217D718;
		  /* 8217D718h */ case    5:  		/* bc 4, CR0_EQ, 16 */
		/* 8217D718h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217D728;  }
		/* 8217D718h case    5:*/		return 0x8217D71C;
		  /* 8217D71Ch */ case    6:  		/* mr R4, R31 */
		/* 8217D71Ch case    6:*/		regs.R4 = regs.R31;
		/* 8217D71Ch case    6:*/		return 0x8217D720;
		  /* 8217D720h */ case    7:  		/* mr R3, R30 */
		/* 8217D720h case    7:*/		regs.R3 = regs.R30;
		/* 8217D720h case    7:*/		return 0x8217D724;
		  /* 8217D724h */ case    8:  		/* bl -21852 */
		/* 8217D724h case    8:*/		regs.LR = 0x8217D728; return 0x821781C8;
		/* 8217D724h case    8:*/		return 0x8217D728;
	}
	return 0x8217D728;
} // Block from 8217D704h-8217D728h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217D728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D728);
		  /* 8217D728h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 8217D728h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 8217D728h case    0:*/		return 0x8217D72C;
		  /* 8217D72Ch */ case    1:  		/* b -36 */
		/* 8217D72Ch case    1:*/		return 0x8217D708;
		/* 8217D72Ch case    1:*/		return 0x8217D730;
	}
	return 0x8217D730;
} // Block from 8217D728h-8217D730h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D730);
		  /* 8217D730h */ case    0:  		/* mr R3, R30 */
		/* 8217D730h case    0:*/		regs.R3 = regs.R30;
		/* 8217D730h case    0:*/		return 0x8217D734;
		  /* 8217D734h */ case    1:  		/* bl -21436 */
		/* 8217D734h case    1:*/		regs.LR = 0x8217D738; return 0x82178378;
		/* 8217D734h case    1:*/		return 0x8217D738;
		  /* 8217D738h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217D738h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217D738h case    2:*/		return 0x8217D73C;
		  /* 8217D73Ch */ case    3:  		/* mr R4, R28 */
		/* 8217D73Ch case    3:*/		regs.R4 = regs.R28;
		/* 8217D73Ch case    3:*/		return 0x8217D740;
		  /* 8217D740h */ case    4:  		/* oris R11, R11, 256 */
		/* 8217D740h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8217D740h case    4:*/		return 0x8217D744;
		  /* 8217D744h */ case    5:  		/* mr R3, R16 */
		/* 8217D744h case    5:*/		regs.R3 = regs.R16;
		/* 8217D744h case    5:*/		return 0x8217D748;
		  /* 8217D748h */ case    6:  		/* stw R11, <#[R30 + 8]> */
		/* 8217D748h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217D748h case    6:*/		return 0x8217D74C;
		  /* 8217D74Ch */ case    7:  		/* bl 712452 */
		/* 8217D74Ch case    7:*/		regs.LR = 0x8217D750; return 0x8222B650;
		/* 8217D74Ch case    7:*/		return 0x8217D750;
		  /* 8217D750h */ case    8:  		/* b -808 */
		/* 8217D750h case    8:*/		return 0x8217D428;
		/* 8217D750h case    8:*/		return 0x8217D754;
	}
	return 0x8217D754;
} // Block from 8217D730h-8217D754h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217D754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D754);
		  /* 8217D754h */ case    0:  		/* li R4, 4800 */
		/* 8217D754h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217D754h case    0:*/		return 0x8217D758;
		  /* 8217D758h */ case    1:  		/* mr R3, R16 */
		/* 8217D758h case    1:*/		regs.R3 = regs.R16;
		/* 8217D758h case    1:*/		return 0x8217D75C;
		  /* 8217D75Ch */ case    2:  		/* bl -178420 */
		/* 8217D75Ch case    2:*/		regs.LR = 0x8217D760; return 0x82151E68;
		/* 8217D75Ch case    2:*/		return 0x8217D760;
	}
	return 0x8217D760;
} // Block from 8217D754h-8217D760h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D760);
		  /* 8217D760h */ case    0:  		/* li R4, 4800 */
		/* 8217D760h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217D760h case    0:*/		return 0x8217D764;
		  /* 8217D764h */ case    1:  		/* mr R3, R16 */
		/* 8217D764h case    1:*/		regs.R3 = regs.R16;
		/* 8217D764h case    1:*/		return 0x8217D768;
		  /* 8217D768h */ case    2:  		/* bl -178432 */
		/* 8217D768h case    2:*/		regs.LR = 0x8217D76C; return 0x82151E68;
		/* 8217D768h case    2:*/		return 0x8217D76C;
	}
	return 0x8217D76C;
} // Block from 8217D760h-8217D76Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D76Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D76C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D76C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D76C);
		  /* 8217D76Ch */ case    0:  		/* li R4, 4800 */
		/* 8217D76Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217D76Ch case    0:*/		return 0x8217D770;
		  /* 8217D770h */ case    1:  		/* mr R3, R16 */
		/* 8217D770h case    1:*/		regs.R3 = regs.R16;
		/* 8217D770h case    1:*/		return 0x8217D774;
		  /* 8217D774h */ case    2:  		/* bl -178444 */
		/* 8217D774h case    2:*/		regs.LR = 0x8217D778; return 0x82151E68;
		/* 8217D774h case    2:*/		return 0x8217D778;
	}
	return 0x8217D778;
} // Block from 8217D76Ch-8217D778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217D778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D778);
		  /* 8217D778h */ case    0:  		/* rlwinm. R11, R15, 0, 24, 31 */
		/* 8217D778h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R15);
		/* 8217D778h case    0:*/		return 0x8217D77C;
		  /* 8217D77Ch */ case    1:  		/* bc 12, CR0_EQ, 192 */
		/* 8217D77Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8217D83C;  }
		/* 8217D77Ch case    1:*/		return 0x8217D780;
		  /* 8217D780h */ case    2:  		/* lwz R11, <#[R16 + 4]> */
		/* 8217D780h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000004) );
		/* 8217D780h case    2:*/		return 0x8217D784;
		  /* 8217D784h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217D784h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217D784h case    3:*/		return 0x8217D788;
		  /* 8217D788h */ case    4:  		/* bc 4, CR0_EQ, 180 */
		/* 8217D788h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217D83C;  }
		/* 8217D788h case    4:*/		return 0x8217D78C;
		  /* 8217D78Ch */ case    5:  		/* mr R30, R11 */
		/* 8217D78Ch case    5:*/		regs.R30 = regs.R11;
		/* 8217D78Ch case    5:*/		return 0x8217D790;
		  /* 8217D790h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8217D790h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217D790h case    6:*/		return 0x8217D794;
		  /* 8217D794h */ case    7:  		/* bc 12, CR0_EQ, 168 */
		/* 8217D794h case    7:*/		if ( regs.CR[0].eq ) { return 0x8217D83C;  }
		/* 8217D794h case    7:*/		return 0x8217D798;
		  /* 8217D798h */ case    8:  		/* lwz R31, <#[R30 + 28]> */
		/* 8217D798h case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x0000001C) );
		/* 8217D798h case    8:*/		return 0x8217D79C;
		  /* 8217D79Ch */ case    9:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217D79Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217D79Ch case    9:*/		return 0x8217D7A0;
		  /* 8217D7A0h */ case   10:  		/* bc 4, CR0_EQ, 128 */
		/* 8217D7A0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8217D820;  }
		/* 8217D7A0h case   10:*/		return 0x8217D7A4;
		  /* 8217D7A4h */ case   11:  		/* cmplwi CR0, R31, 0 */
		/* 8217D7A4h case   11:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217D7A4h case   11:*/		return 0x8217D7A8;
		  /* 8217D7A8h */ case   12:  		/* bc 12, CR0_EQ, 120 */
		/* 8217D7A8h case   12:*/		if ( regs.CR[0].eq ) { return 0x8217D820;  }
		/* 8217D7A8h case   12:*/		return 0x8217D7AC;
		  /* 8217D7ACh */ case   13:  		/* mr R3, R31 */
		/* 8217D7ACh case   13:*/		regs.R3 = regs.R31;
		/* 8217D7ACh case   13:*/		return 0x8217D7B0;
		  /* 8217D7B0h */ case   14:  		/* bl -104048 */
		/* 8217D7B0h case   14:*/		regs.LR = 0x8217D7B4; return 0x82164140;
		/* 8217D7B0h case   14:*/		return 0x8217D7B4;
		  /* 8217D7B4h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D7B4h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D7B4h case   15:*/		return 0x8217D7B8;
		  /* 8217D7B8h */ case   16:  		/* bc 12, CR0_EQ, 80 */
		/* 8217D7B8h case   16:*/		if ( regs.CR[0].eq ) { return 0x8217D808;  }
		/* 8217D7B8h case   16:*/		return 0x8217D7BC;
		  /* 8217D7BCh */ case   17:  		/* lwz R11, <#[R31 + 4]> */
		/* 8217D7BCh case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8217D7BCh case   17:*/		return 0x8217D7C0;
		  /* 8217D7C0h */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 8217D7C0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217D7C0h case   18:*/		return 0x8217D7C4;
		  /* 8217D7C4h */ case   19:  		/* bc 12, CR6_EQ, 36 */
		/* 8217D7C4h case   19:*/		if ( regs.CR[6].eq ) { return 0x8217D7E8;  }
		/* 8217D7C4h case   19:*/		return 0x8217D7C8;
		  /* 8217D7C8h */ case   20:  		/* lwz R10, <#[R11 + 16]> */
		/* 8217D7C8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8217D7C8h case   20:*/		return 0x8217D7CC;
		  /* 8217D7CCh */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 8217D7CCh case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217D7CCh case   21:*/		return 0x8217D7D0;
		  /* 8217D7D0h */ case   22:  		/* bc 12, CR6_EQ, 16 */
		/* 8217D7D0h case   22:*/		if ( regs.CR[6].eq ) { return 0x8217D7E0;  }
		/* 8217D7D0h case   22:*/		return 0x8217D7D4;
		  /* 8217D7D4h */ case   23:  		/* lwz R10, <#[R11]> */
		/* 8217D7D4h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217D7D4h case   23:*/		return 0x8217D7D8;
		  /* 8217D7D8h */ case   24:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 8217D7D8h case   24:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 8217D7D8h case   24:*/		return 0x8217D7DC;
		  /* 8217D7DCh */ case   25:  		/* bc 4, CR0_EQ, 44 */
		/* 8217D7DCh case   25:*/		if ( !regs.CR[0].eq ) { return 0x8217D808;  }
		/* 8217D7DCh case   25:*/		return 0x8217D7E0;
	}
	return 0x8217D7E0;
} // Block from 8217D778h-8217D7E0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8217D7E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D7E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D7E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D7E0);
		  /* 8217D7E0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217D7E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217D7E0h case    0:*/		return 0x8217D7E4;
		  /* 8217D7E4h */ case    1:  		/* b -36 */
		/* 8217D7E4h case    1:*/		return 0x8217D7C0;
		/* 8217D7E4h case    1:*/		return 0x8217D7E8;
	}
	return 0x8217D7E8;
} // Block from 8217D7E0h-8217D7E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D7E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D7E8);
		  /* 8217D7E8h */ case    0:  		/* lis R12, -130 */
		/* 8217D7E8h case    0:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFFF7E);
		/* 8217D7E8h case    0:*/		return 0x8217D7EC;
		  /* 8217D7ECh */ case    1:  		/* lwz R11, <#[R31 + 16]> */
		/* 8217D7ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8217D7ECh case    1:*/		return 0x8217D7F0;
		  /* 8217D7F0h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217D7F0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217D7F0h case    2:*/		return 0x8217D7F4;
		  /* 8217D7F4h */ case    3:  		/* ori R12, R12, 16353 */
		/* 8217D7F4h case    3:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x3FE1);
		/* 8217D7F4h case    3:*/		return 0x8217D7F8;
		  /* 8217D7F8h */ case    4:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 8217D7F8h case    4:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 8217D7F8h case    4:*/		return 0x8217D7FC;
		  /* 8217D7FCh */ case    5:  		/* and R10, R10, R12 */
		/* 8217D7FCh case    5:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R12);
		/* 8217D7FCh case    5:*/		return 0x8217D800;
		  /* 8217D800h */ case    6:  		/* stw R11, <#[R31 + 16]> */
		/* 8217D800h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8217D800h case    6:*/		return 0x8217D804;
		  /* 8217D804h */ case    7:  		/* stw R10, <#[R31 + 8]> */
		/* 8217D804h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217D804h case    7:*/		return 0x8217D808;
	}
	return 0x8217D808;
} // Block from 8217D7E8h-8217D808h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217D808h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D808( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D808) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D808);
		  /* 8217D808h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217D808h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217D808h case    0:*/		return 0x8217D80C;
		  /* 8217D80Ch */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 8217D80Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 8217D80Ch case    1:*/		return 0x8217D810;
		  /* 8217D810h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217D810h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217D810h case    2:*/		return 0x8217D814;
		  /* 8217D814h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217D814h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217D820;  }
		/* 8217D814h case    3:*/		return 0x8217D818;
		  /* 8217D818h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217D818h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217D818h case    4:*/		return 0x8217D81C;
		  /* 8217D81Ch */ case    5:  		/* bc 4, CR6_EQ, -112 */
		/* 8217D81Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217D7AC;  }
		/* 8217D81Ch case    5:*/		return 0x8217D820;
	}
	return 0x8217D820;
} // Block from 8217D808h-8217D820h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217D820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D820);
		  /* 8217D820h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217D820h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217D820h case    0:*/		return 0x8217D824;
		  /* 8217D824h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217D824h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217D824h case    1:*/		return 0x8217D828;
		  /* 8217D828h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217D828h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217D828h case    2:*/		return 0x8217D82C;
		  /* 8217D82Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217D82Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217D83C;  }
		/* 8217D82Ch case    3:*/		return 0x8217D830;
		  /* 8217D830h */ case    4:  		/* mr R30, R11 */
		/* 8217D830h case    4:*/		regs.R30 = regs.R11;
		/* 8217D830h case    4:*/		return 0x8217D834;
		  /* 8217D834h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217D834h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217D834h case    5:*/		return 0x8217D838;
		  /* 8217D838h */ case    6:  		/* bc 4, CR6_EQ, -160 */
		/* 8217D838h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217D798;  }
		/* 8217D838h case    6:*/		return 0x8217D83C;
	}
	return 0x8217D83C;
} // Block from 8217D820h-8217D83Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217D83Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D83C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D83C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D83C);
		  /* 8217D83Ch */ case    0:  		/* lwz R11, <#[R16 + 4]> */
		/* 8217D83Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000004) );
		/* 8217D83Ch case    0:*/		return 0x8217D840;
		  /* 8217D840h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217D840h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217D840h case    1:*/		return 0x8217D844;
		  /* 8217D844h */ case    2:  		/* bc 4, CR0_EQ, 672 */
		/* 8217D844h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217DAE4;  }
		/* 8217D844h case    2:*/		return 0x8217D848;
		  /* 8217D848h */ case    3:  		/* mr R26, R11 */
		/* 8217D848h case    3:*/		regs.R26 = regs.R11;
		/* 8217D848h case    3:*/		return 0x8217D84C;
		  /* 8217D84Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8217D84Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217D84Ch case    4:*/		return 0x8217D850;
		  /* 8217D850h */ case    5:  		/* bc 12, CR0_EQ, 660 */
		/* 8217D850h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217DAE4;  }
		/* 8217D850h case    5:*/		return 0x8217D854;
		  /* 8217D854h */ case    6:  		/* lwz R11, <#[R26 + 48]> */
		/* 8217D854h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 8217D854h case    6:*/		return 0x8217D858;
		  /* 8217D858h */ case    7:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 8217D858h case    7:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 8217D858h case    7:*/		return 0x8217D85C;
		  /* 8217D85Ch */ case    8:  		/* bc 4, CR0_EQ, 620 */
		/* 8217D85Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217D85Ch case    8:*/		return 0x8217D860;
		  /* 8217D860h */ case    9:  		/* lwz R11, <#[R26 + 28]> */
		/* 8217D860h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 8217D860h case    9:*/		return 0x8217D864;
		  /* 8217D864h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217D864h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217D864h case   10:*/		return 0x8217D868;
		  /* 8217D868h */ case   11:  		/* bc 4, CR0_EQ, 608 */
		/* 8217D868h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217D868h case   11:*/		return 0x8217D86C;
		  /* 8217D86Ch */ case   12:  		/* lwz R11, <#[R26 + 24]> */
		/* 8217D86Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000018) );
		/* 8217D86Ch case   12:*/		return 0x8217D870;
		  /* 8217D870h */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217D870h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217D870h case   13:*/		return 0x8217D874;
		  /* 8217D874h */ case   14:  		/* addic. R31, R11, -40 */
		/* 8217D874h case   14:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 8217D874h case   14:*/		return 0x8217D878;
		  /* 8217D878h */ case   15:  		/* bc 12, CR0_EQ, 592 */
		/* 8217D878h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217D878h case   15:*/		return 0x8217D87C;
		  /* 8217D87Ch */ case   16:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217D87Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217D87Ch case   16:*/		return 0x8217D880;
		  /* 8217D880h */ case   17:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8217D880h case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8217D880h case   17:*/		return 0x8217D884;
		  /* 8217D884h */ case   18:  		/* cmplwi CR6, R11, 86 */
		/* 8217D884h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8217D884h case   18:*/		return 0x8217D888;
		  /* 8217D888h */ case   19:  		/* bc 12, CR6_EQ, 48 */
		/* 8217D888h case   19:*/		if ( regs.CR[6].eq ) { return 0x8217D8B8;  }
		/* 8217D888h case   19:*/		return 0x8217D88C;
		  /* 8217D88Ch */ case   20:  		/* cmplwi CR6, R11, 87 */
		/* 8217D88Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8217D88Ch case   20:*/		return 0x8217D890;
		  /* 8217D890h */ case   21:  		/* bc 12, CR6_EQ, 40 */
		/* 8217D890h case   21:*/		if ( regs.CR[6].eq ) { return 0x8217D8B8;  }
		/* 8217D890h case   21:*/		return 0x8217D894;
		  /* 8217D894h */ case   22:  		/* cmplwi CR6, R11, 89 */
		/* 8217D894h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8217D894h case   22:*/		return 0x8217D898;
		  /* 8217D898h */ case   23:  		/* bc 12, CR6_EQ, 32 */
		/* 8217D898h case   23:*/		if ( regs.CR[6].eq ) { return 0x8217D8B8;  }
		/* 8217D898h case   23:*/		return 0x8217D89C;
		  /* 8217D89Ch */ case   24:  		/* cmplwi CR6, R11, 90 */
		/* 8217D89Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8217D89Ch case   24:*/		return 0x8217D8A0;
		  /* 8217D8A0h */ case   25:  		/* bc 12, CR6_EQ, 24 */
		/* 8217D8A0h case   25:*/		if ( regs.CR[6].eq ) { return 0x8217D8B8;  }
		/* 8217D8A0h case   25:*/		return 0x8217D8A4;
		  /* 8217D8A4h */ case   26:  		/* cmplwi CR6, R11, 84 */
		/* 8217D8A4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8217D8A4h case   26:*/		return 0x8217D8A8;
		  /* 8217D8A8h */ case   27:  		/* bc 12, CR6_EQ, 16 */
		/* 8217D8A8h case   27:*/		if ( regs.CR[6].eq ) { return 0x8217D8B8;  }
		/* 8217D8A8h case   27:*/		return 0x8217D8AC;
		  /* 8217D8ACh */ case   28:  		/* cmplwi CR6, R11, 85 */
		/* 8217D8ACh case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8217D8ACh case   28:*/		return 0x8217D8B0;
		  /* 8217D8B0h */ case   29:  		/* li R11, 0 */
		/* 8217D8B0h case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D8B0h case   29:*/		return 0x8217D8B4;
		  /* 8217D8B4h */ case   30:  		/* bc 4, CR6_EQ, 8 */
		/* 8217D8B4h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8217D8BC;  }
		/* 8217D8B4h case   30:*/		return 0x8217D8B8;
	}
	return 0x8217D8B8;
} // Block from 8217D83Ch-8217D8B8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8217D8B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D8B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D8B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D8B8);
		  /* 8217D8B8h */ case    0:  		/* li R11, 1 */
		/* 8217D8B8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217D8B8h case    0:*/		return 0x8217D8BC;
	}
	return 0x8217D8BC;
} // Block from 8217D8B8h-8217D8BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D8BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D8BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D8BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D8BC);
		  /* 8217D8BCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217D8BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217D8BCh case    0:*/		return 0x8217D8C0;
		  /* 8217D8C0h */ case    1:  		/* bc 12, CR0_EQ, 520 */
		/* 8217D8C0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217D8C0h case    1:*/		return 0x8217D8C4;
		  /* 8217D8C4h */ case    2:  		/* rlwinm. R11, R10, 15, 31, 31 */
		/* 8217D8C4h case    2:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R10);
		/* 8217D8C4h case    2:*/		return 0x8217D8C8;
		  /* 8217D8C8h */ case    3:  		/* bc 12, CR0_EQ, 512 */
		/* 8217D8C8h case    3:*/		if ( regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217D8C8h case    3:*/		return 0x8217D8CC;
		  /* 8217D8CCh */ case    4:  		/* addi R11, R1, 148 */
		/* 8217D8CCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x94);
		/* 8217D8CCh case    4:*/		return 0x8217D8D0;
		  /* 8217D8D0h */ case    5:  		/* addi R10, R1, 152 */
		/* 8217D8D0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x98);
		/* 8217D8D0h case    5:*/		return 0x8217D8D4;
		  /* 8217D8D4h */ case    6:  		/* addi R9, R1, 100 */
		/* 8217D8D4h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x64);
		/* 8217D8D4h case    6:*/		return 0x8217D8D8;
		  /* 8217D8D8h */ case    7:  		/* stw R11, <#[R1 + 84]> */
		/* 8217D8D8h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8217D8D8h case    7:*/		return 0x8217D8DC;
		  /* 8217D8DCh */ case    8:  		/* addi R8, R1, 104 */
		/* 8217D8DCh case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x68);
		/* 8217D8DCh case    8:*/		return 0x8217D8E0;
		  /* 8217D8E0h */ case    9:  		/* addi R7, R1, 96 */
		/* 8217D8E0h case    9:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8217D8E0h case    9:*/		return 0x8217D8E4;
		  /* 8217D8E4h */ case   10:  		/* addi R6, R1, 128 */
		/* 8217D8E4h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x80);
		/* 8217D8E4h case   10:*/		return 0x8217D8E8;
		  /* 8217D8E8h */ case   11:  		/* mr R5, R31 */
		/* 8217D8E8h case   11:*/		regs.R5 = regs.R31;
		/* 8217D8E8h case   11:*/		return 0x8217D8EC;
		  /* 8217D8ECh */ case   12:  		/* mr R4, R26 */
		/* 8217D8ECh case   12:*/		regs.R4 = regs.R26;
		/* 8217D8ECh case   12:*/		return 0x8217D8F0;
		  /* 8217D8F0h */ case   13:  		/* mr R3, R16 */
		/* 8217D8F0h case   13:*/		regs.R3 = regs.R16;
		/* 8217D8F0h case   13:*/		return 0x8217D8F4;
		  /* 8217D8F4h */ case   14:  		/* bl -5300 */
		/* 8217D8F4h case   14:*/		regs.LR = 0x8217D8F8; return 0x8217C440;
		/* 8217D8F4h case   14:*/		return 0x8217D8F8;
		  /* 8217D8F8h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D8F8h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D8F8h case   15:*/		return 0x8217D8FC;
		  /* 8217D8FCh */ case   16:  		/* bc 12, CR0_EQ, 460 */
		/* 8217D8FCh case   16:*/		if ( regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217D8FCh case   16:*/		return 0x8217D900;
		  /* 8217D900h */ case   17:  		/* mr R4, R16 */
		/* 8217D900h case   17:*/		regs.R4 = regs.R16;
		/* 8217D900h case   17:*/		return 0x8217D904;
		  /* 8217D904h */ case   18:  		/* mr R3, R31 */
		/* 8217D904h case   18:*/		regs.R3 = regs.R31;
		/* 8217D904h case   18:*/		return 0x8217D908;
		  /* 8217D908h */ case   19:  		/* bl -102784 */
		/* 8217D908h case   19:*/		regs.LR = 0x8217D90C; return 0x82164788;
		/* 8217D908h case   19:*/		return 0x8217D90C;
		  /* 8217D90Ch */ case   20:  		/* cmpwi CR6, R3, 1 */
		/* 8217D90Ch case   20:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000001);
		/* 8217D90Ch case   20:*/		return 0x8217D910;
		  /* 8217D910h */ case   21:  		/* bc 12, CR6_EQ, 440 */
		/* 8217D910h case   21:*/		if ( regs.CR[6].eq ) { return 0x8217DAC8;  }
		/* 8217D910h case   21:*/		return 0x8217D914;
		  /* 8217D914h */ case   22:  		/* cmpwi CR6, R3, 2 */
		/* 8217D914h case   22:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8217D914h case   22:*/		return 0x8217D918;
		  /* 8217D918h */ case   23:  		/* bc 4, CR6_GT, 28 */
		/* 8217D918h case   23:*/		if ( !regs.CR[6].gt ) { return 0x8217D934;  }
		/* 8217D918h case   23:*/		return 0x8217D91C;
		  /* 8217D91Ch */ case   24:  		/* cmpwi CR6, R3, 4 */
		/* 8217D91Ch case   24:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 8217D91Ch case   24:*/		return 0x8217D920;
		  /* 8217D920h */ case   25:  		/* bc 4, CR6_GT, 424 */
		/* 8217D920h case   25:*/		if ( !regs.CR[6].gt ) { return 0x8217DAC8;  }
		/* 8217D920h case   25:*/		return 0x8217D924;
		  /* 8217D924h */ case   26:  		/* cmpwi CR6, R3, 7 */
		/* 8217D924h case   26:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000007);
		/* 8217D924h case   26:*/		return 0x8217D928;
		  /* 8217D928h */ case   27:  		/* bc 4, CR6_GT, 12 */
		/* 8217D928h case   27:*/		if ( !regs.CR[6].gt ) { return 0x8217D934;  }
		/* 8217D928h case   27:*/		return 0x8217D92C;
		  /* 8217D92Ch */ case   28:  		/* cmpwi CR6, R3, 9 */
		/* 8217D92Ch case   28:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000009);
		/* 8217D92Ch case   28:*/		return 0x8217D930;
		  /* 8217D930h */ case   29:  		/* bc 4, CR6_GT, 408 */
		/* 8217D930h case   29:*/		if ( !regs.CR[6].gt ) { return 0x8217DAC8;  }
		/* 8217D930h case   29:*/		return 0x8217D934;
	}
	return 0x8217D934;
} // Block from 8217D8BCh-8217D934h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8217D934h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D934( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D934) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D934);
		  /* 8217D934h */ case    0:  		/* mr R3, R31 */
		/* 8217D934h case    0:*/		regs.R3 = regs.R31;
		/* 8217D934h case    0:*/		return 0x8217D938;
		  /* 8217D938h */ case    1:  		/* bl -68864 */
		/* 8217D938h case    1:*/		regs.LR = 0x8217D93C; return 0x8216CC38;
		/* 8217D938h case    1:*/		return 0x8217D93C;
		  /* 8217D93Ch */ case    2:  		/* lwz R30, <#[R3 + 12]> */
		/* 8217D93Ch case    2:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217D93Ch case    2:*/		return 0x8217D940;
		  /* 8217D940h */ case    3:  		/* lwz R11, <#[R1 + 128]> */
		/* 8217D940h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 8217D940h case    3:*/		return 0x8217D944;
		  /* 8217D944h */ case    4:  		/* mr R6, R31 */
		/* 8217D944h case    4:*/		regs.R6 = regs.R31;
		/* 8217D944h case    4:*/		return 0x8217D948;
		  /* 8217D948h */ case    5:  		/* lwz R28, <#[R1 + 104]> */
		/* 8217D948h case    5:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000068) );
		/* 8217D948h case    5:*/		return 0x8217D94C;
		  /* 8217D94Ch */ case    6:  		/* mr R7, R30 */
		/* 8217D94Ch case    6:*/		regs.R7 = regs.R30;
		/* 8217D94Ch case    6:*/		return 0x8217D950;
		  /* 8217D950h */ case    7:  		/* cmpwi CR6, R11, 3 */
		/* 8217D950h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 8217D950h case    7:*/		return 0x8217D954;
		  /* 8217D954h */ case    8:  		/* mr R3, R16 */
		/* 8217D954h case    8:*/		regs.R3 = regs.R16;
		/* 8217D954h case    8:*/		return 0x8217D958;
		  /* 8217D958h */ case    9:  		/* bc 4, CR6_EQ, 224 */
		/* 8217D958h case    9:*/		if ( !regs.CR[6].eq ) { return 0x8217DA38;  }
		/* 8217D958h case    9:*/		return 0x8217D95C;
		  /* 8217D95Ch */ case   10:  		/* lwz R27, <#[R1 + 100]> */
		/* 8217D95Ch case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000064) );
		/* 8217D95Ch case   10:*/		return 0x8217D960;
		  /* 8217D960h */ case   11:  		/* addi R8, R1, 97 */
		/* 8217D960h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x61);
		/* 8217D960h case   11:*/		return 0x8217D964;
		  /* 8217D964h */ case   12:  		/* mr R5, R28 */
		/* 8217D964h case   12:*/		regs.R5 = regs.R28;
		/* 8217D964h case   12:*/		return 0x8217D968;
		  /* 8217D968h */ case   13:  		/* mr R4, R27 */
		/* 8217D968h case   13:*/		regs.R4 = regs.R27;
		/* 8217D968h case   13:*/		return 0x8217D96C;
		  /* 8217D96Ch */ case   14:  		/* bl -17452 */
		/* 8217D96Ch case   14:*/		regs.LR = 0x8217D970; return 0x82179540;
		/* 8217D96Ch case   14:*/		return 0x8217D970;
		  /* 8217D970h */ case   15:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217D970h case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217D970h case   15:*/		return 0x8217D974;
		  /* 8217D974h */ case   16:  		/* bc 12, CR0_EQ, 340 */
		/* 8217D974h case   16:*/		if ( regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217D974h case   16:*/		return 0x8217D978;
		  /* 8217D978h */ case   17:  		/* lbz R29, <#[R1 + 96]> */
		/* 8217D978h case   17:*/		cpu::mem::load8z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 8217D978h case   17:*/		return 0x8217D97C;
		  /* 8217D97Ch */ case   18:  		/* cmplwi CR0, R29, 0 */
		/* 8217D97Ch case   18:*/		cpu::op::cmplwi<0>(regs,regs.R29,0x00000000);
		/* 8217D97Ch case   18:*/		return 0x8217D980;
		  /* 8217D980h */ case   19:  		/* bc 12, CR0_EQ, 84 */
		/* 8217D980h case   19:*/		if ( regs.CR[0].eq ) { return 0x8217D9D4;  }
		/* 8217D980h case   19:*/		return 0x8217D984;
		  /* 8217D984h */ case   20:  		/* lwz R10, <#[R30 + 4]> */
		/* 8217D984h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 8217D984h case   20:*/		return 0x8217D988;
		  /* 8217D988h */ case   21:  		/* cmplwi CR6, R10, 0 */
		/* 8217D988h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217D988h case   21:*/		return 0x8217D98C;
		  /* 8217D98Ch */ case   22:  		/* bc 12, CR6_EQ, 40 */
		/* 8217D98Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x8217D9B4;  }
		/* 8217D98Ch case   22:*/		return 0x8217D990;
		  /* 8217D990h */ case   23:  		/* lwz R11, <#[R10 + 16]> */
		/* 8217D990h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 8217D990h case   23:*/		return 0x8217D994;
		  /* 8217D994h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 8217D994h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217D994h case   24:*/		return 0x8217D998;
		  /* 8217D998h */ case   25:  		/* bc 12, CR6_EQ, 12 */
		/* 8217D998h case   25:*/		if ( regs.CR[6].eq ) { return 0x8217D9A4;  }
		/* 8217D998h case   25:*/		return 0x8217D99C;
		  /* 8217D99Ch */ case   26:  		/* cmplw CR6, R11, R31 */
		/* 8217D99Ch case   26:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 8217D99Ch case   26:*/		return 0x8217D9A0;
		  /* 8217D9A0h */ case   27:  		/* bc 4, CR6_EQ, 12 */
		/* 8217D9A0h case   27:*/		if ( !regs.CR[6].eq ) { return 0x8217D9AC;  }
		/* 8217D9A0h case   27:*/		return 0x8217D9A4;
	}
	return 0x8217D9A4;
} // Block from 8217D934h-8217D9A4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217D9A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D9A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D9A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D9A4);
		  /* 8217D9A4h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 8217D9A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8217D9A4h case    0:*/		return 0x8217D9A8;
		  /* 8217D9A8h */ case    1:  		/* b -32 */
		/* 8217D9A8h case    1:*/		return 0x8217D988;
		/* 8217D9A8h case    1:*/		return 0x8217D9AC;
	}
	return 0x8217D9AC;
} // Block from 8217D9A4h-8217D9ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D9ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D9AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D9AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D9AC);
		  /* 8217D9ACh */ case    0:  		/* li R11, 1 */
		/* 8217D9ACh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217D9ACh case    0:*/		return 0x8217D9B0;
		  /* 8217D9B0h */ case    1:  		/* b 8 */
		/* 8217D9B0h case    1:*/		return 0x8217D9B8;
		/* 8217D9B0h case    1:*/		return 0x8217D9B4;
	}
	return 0x8217D9B4;
} // Block from 8217D9ACh-8217D9B4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217D9B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D9B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D9B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D9B4);
		  /* 8217D9B4h */ case    0:  		/* li R11, 0 */
		/* 8217D9B4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217D9B4h case    0:*/		return 0x8217D9B8;
	}
	return 0x8217D9B8;
} // Block from 8217D9B4h-8217D9B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217D9B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D9B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D9B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D9B8);
		  /* 8217D9B8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217D9B8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217D9B8h case    0:*/		return 0x8217D9BC;
		  /* 8217D9BCh */ case    1:  		/* bc 4, CR0_EQ, 268 */
		/* 8217D9BCh case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217D9BCh case    1:*/		return 0x8217D9C0;
		  /* 8217D9C0h */ case    2:  		/* mr R4, R31 */
		/* 8217D9C0h case    2:*/		regs.R4 = regs.R31;
		/* 8217D9C0h case    2:*/		return 0x8217D9C4;
		  /* 8217D9C4h */ case    3:  		/* mr R3, R16 */
		/* 8217D9C4h case    3:*/		regs.R3 = regs.R16;
		/* 8217D9C4h case    3:*/		return 0x8217D9C8;
		  /* 8217D9C8h */ case    4:  		/* bl -20416 */
		/* 8217D9C8h case    4:*/		regs.LR = 0x8217D9CC; return 0x82178A08;
		/* 8217D9C8h case    4:*/		return 0x8217D9CC;
		  /* 8217D9CCh */ case    5:  		/* li R29, 0 */
		/* 8217D9CCh case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8217D9CCh case    5:*/		return 0x8217D9D0;
		  /* 8217D9D0h */ case    6:  		/* stb R29, <#[R1 + 96]> */
		/* 8217D9D0h case    6:*/		cpu::mem::store8( regs, regs.R29, (uint32)(regs.R1 + 0x00000060) );
		/* 8217D9D0h case    6:*/		return 0x8217D9D4;
	}
	return 0x8217D9D4;
} // Block from 8217D9B8h-8217D9D4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217D9D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217D9D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217D9D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217D9D4);
		  /* 8217D9D4h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217D9D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217D9D4h case    0:*/		return 0x8217D9D8;
		  /* 8217D9D8h */ case    1:  		/* mr R3, R16 */
		/* 8217D9D8h case    1:*/		regs.R3 = regs.R16;
		/* 8217D9D8h case    1:*/		return 0x8217D9DC;
		  /* 8217D9DCh */ case    2:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8217D9DCh case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8217D9DCh case    2:*/		return 0x8217D9E0;
		  /* 8217D9E0h */ case    3:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8217D9E0h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8217D9E0h case    3:*/		return 0x8217D9E4;
		  /* 8217D9E4h */ case    4:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8217D9E4h case    4:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8217D9E4h case    4:*/		return 0x8217D9E8;
		  /* 8217D9E8h */ case    5:  		/* bl -103864 */
		/* 8217D9E8h case    5:*/		regs.LR = 0x8217D9EC; return 0x82164430;
		/* 8217D9E8h case    5:*/		return 0x8217D9EC;
		  /* 8217D9ECh */ case    6:  		/* addi R11, R31, -16 */
		/* 8217D9ECh case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFF0);
		/* 8217D9ECh case    6:*/		return 0x8217D9F0;
		  /* 8217D9F0h */ case    7:  		/* add R11, R3, R11 */
		/* 8217D9F0h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8217D9F0h case    7:*/		return 0x8217D9F4;
		  /* 8217D9F4h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 8217D9F4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217D9F4h case    8:*/		return 0x8217D9F8;
		  /* 8217D9F8h */ case    9:  		/* cmplw CR6, R10, R28 */
		/* 8217D9F8h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 8217D9F8h case    9:*/		return 0x8217D9FC;
		  /* 8217D9FCh */ case   10:  		/* bc 12, CR6_EQ, 20 */
		/* 8217D9FCh case   10:*/		if ( regs.CR[6].eq ) { return 0x8217DA10;  }
		/* 8217D9FCh case   10:*/		return 0x8217DA00;
		  /* 8217DA00h */ case   11:  		/* lwz R10, <#[R11 + 12]> */
		/* 8217DA00h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217DA00h case   11:*/		return 0x8217DA04;
		  /* 8217DA04h */ case   12:  		/* nor R9, R10, R10 */
		/* 8217DA04h case   12:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R10,regs.R10);
		/* 8217DA04h case   12:*/		return 0x8217DA08;
		  /* 8217DA08h */ case   13:  		/* rlwimi R9, R10, 0, 31, 29 */
		/* 8217DA08h case   13:*/		cpu::op::rlwimi<0,0,31,29>(regs,&regs.R9,regs.R10);
		/* 8217DA08h case   13:*/		return 0x8217DA0C;
		  /* 8217DA0Ch */ case   14:  		/* stw R9, <#[R11 + 12]> */
		/* 8217DA0Ch case   14:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217DA0Ch case   14:*/		return 0x8217DA10;
	}
	return 0x8217DA10;
} // Block from 8217D9D4h-8217DA10h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217DA10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DA10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DA10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DA10);
		  /* 8217DA10h */ case    0:  		/* rlwinm R10, R29, 0, 24, 31 */
		/* 8217DA10h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R10,regs.R29);
		/* 8217DA10h case    0:*/		return 0x8217DA14;
		  /* 8217DA14h */ case    1:  		/* stw R28, <#[R11]> */
		/* 8217DA14h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x00000000) );
		/* 8217DA14h case    1:*/		return 0x8217DA18;
		  /* 8217DA18h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217DA18h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217DA18h case    2:*/		return 0x8217DA1C;
		  /* 8217DA1Ch */ case    3:  		/* li R7, 1 */
		/* 8217DA1Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8217DA1Ch case    3:*/		return 0x8217DA20;
		  /* 8217DA20h */ case    4:  		/* rlwimi R11, R10, 18, 13, 13 */
		/* 8217DA20h case    4:*/		cpu::op::rlwimi<0,18,13,13>(regs,&regs.R11,regs.R10);
		/* 8217DA20h case    4:*/		return 0x8217DA24;
		  /* 8217DA24h */ case    5:  		/* lbz R8, <#[R1 + 97]> */
		/* 8217DA24h case    5:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000061) );
		/* 8217DA24h case    5:*/		return 0x8217DA28;
		  /* 8217DA28h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 8217DA28h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217DA28h case    6:*/		return 0x8217DA2C;
		  /* 8217DA2Ch */ case    7:  		/* mr R6, R28 */
		/* 8217DA2Ch case    7:*/		regs.R6 = regs.R28;
		/* 8217DA2Ch case    7:*/		return 0x8217DA30;
		  /* 8217DA30h */ case    8:  		/* mr R5, R27 */
		/* 8217DA30h case    8:*/		regs.R5 = regs.R27;
		/* 8217DA30h case    8:*/		return 0x8217DA34;
		  /* 8217DA34h */ case    9:  		/* b 124 */
		/* 8217DA34h case    9:*/		return 0x8217DAB0;
		/* 8217DA34h case    9:*/		return 0x8217DA38;
	}
	return 0x8217DA38;
} // Block from 8217DA10h-8217DA38h (10 instructions)

//////////////////////////////////////////////////////
// Block at 8217DA38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DA38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DA38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DA38);
		  /* 8217DA38h */ case    0:  		/* addi R8, R1, 98 */
		/* 8217DA38h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x62);
		/* 8217DA38h case    0:*/		return 0x8217DA3C;
		  /* 8217DA3Ch */ case    1:  		/* li R5, 0 */
		/* 8217DA3Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217DA3Ch case    1:*/		return 0x8217DA40;
		  /* 8217DA40h */ case    2:  		/* mr R4, R28 */
		/* 8217DA40h case    2:*/		regs.R4 = regs.R28;
		/* 8217DA40h case    2:*/		return 0x8217DA44;
		  /* 8217DA44h */ case    3:  		/* bl -17668 */
		/* 8217DA44h case    3:*/		regs.LR = 0x8217DA48; return 0x82179540;
		/* 8217DA44h case    3:*/		return 0x8217DA48;
		  /* 8217DA48h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217DA48h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217DA48h case    4:*/		return 0x8217DA4C;
		  /* 8217DA4Ch */ case    5:  		/* bc 12, CR0_EQ, 124 */
		/* 8217DA4Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217DA4Ch case    5:*/		return 0x8217DA50;
		  /* 8217DA50h */ case    6:  		/* lwz R29, <#[R1 + 100]> */
		/* 8217DA50h case    6:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000064) );
		/* 8217DA50h case    6:*/		return 0x8217DA54;
		  /* 8217DA54h */ case    7:  		/* addi R8, R1, 99 */
		/* 8217DA54h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x63);
		/* 8217DA54h case    7:*/		return 0x8217DA58;
		  /* 8217DA58h */ case    8:  		/* mr R7, R30 */
		/* 8217DA58h case    8:*/		regs.R7 = regs.R30;
		/* 8217DA58h case    8:*/		return 0x8217DA5C;
		  /* 8217DA5Ch */ case    9:  		/* mr R6, R31 */
		/* 8217DA5Ch case    9:*/		regs.R6 = regs.R31;
		/* 8217DA5Ch case    9:*/		return 0x8217DA60;
		  /* 8217DA60h */ case   10:  		/* li R5, 0 */
		/* 8217DA60h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217DA60h case   10:*/		return 0x8217DA64;
		  /* 8217DA64h */ case   11:  		/* mr R4, R29 */
		/* 8217DA64h case   11:*/		regs.R4 = regs.R29;
		/* 8217DA64h case   11:*/		return 0x8217DA68;
		  /* 8217DA68h */ case   12:  		/* mr R3, R16 */
		/* 8217DA68h case   12:*/		regs.R3 = regs.R16;
		/* 8217DA68h case   12:*/		return 0x8217DA6C;
		  /* 8217DA6Ch */ case   13:  		/* bl -17708 */
		/* 8217DA6Ch case   13:*/		regs.LR = 0x8217DA70; return 0x82179540;
		/* 8217DA6Ch case   13:*/		return 0x8217DA70;
		  /* 8217DA70h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217DA70h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217DA70h case   14:*/		return 0x8217DA74;
		  /* 8217DA74h */ case   15:  		/* bc 12, CR0_EQ, 84 */
		/* 8217DA74h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217DAC8;  }
		/* 8217DA74h case   15:*/		return 0x8217DA78;
		  /* 8217DA78h */ case   16:  		/* lbz R31, <#[R1 + 96]> */
		/* 8217DA78h case   16:*/		cpu::mem::load8z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 8217DA78h case   16:*/		return 0x8217DA7C;
		  /* 8217DA7Ch */ case   17:  		/* li R6, 0 */
		/* 8217DA7Ch case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8217DA7Ch case   17:*/		return 0x8217DA80;
		  /* 8217DA80h */ case   18:  		/* mr R5, R28 */
		/* 8217DA80h case   18:*/		regs.R5 = regs.R28;
		/* 8217DA80h case   18:*/		return 0x8217DA84;
		  /* 8217DA84h */ case   19:  		/* lbz R8, <#[R1 + 98]> */
		/* 8217DA84h case   19:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000062) );
		/* 8217DA84h case   19:*/		return 0x8217DA88;
		  /* 8217DA88h */ case   20:  		/* mr R7, R31 */
		/* 8217DA88h case   20:*/		regs.R7 = regs.R31;
		/* 8217DA88h case   20:*/		return 0x8217DA8C;
		  /* 8217DA8Ch */ case   21:  		/* mr R4, R26 */
		/* 8217DA8Ch case   21:*/		regs.R4 = regs.R26;
		/* 8217DA8Ch case   21:*/		return 0x8217DA90;
		  /* 8217DA90h */ case   22:  		/* mr R3, R16 */
		/* 8217DA90h case   22:*/		regs.R3 = regs.R16;
		/* 8217DA90h case   22:*/		return 0x8217DA94;
		  /* 8217DA94h */ case   23:  		/* bl -16828 */
		/* 8217DA94h case   23:*/		regs.LR = 0x8217DA98; return 0x821798D8;
		/* 8217DA94h case   23:*/		return 0x8217DA98;
		  /* 8217DA98h */ case   24:  		/* mr R11, R31 */
		/* 8217DA98h case   24:*/		regs.R11 = regs.R31;
		/* 8217DA98h case   24:*/		return 0x8217DA9C;
		  /* 8217DA9Ch */ case   25:  		/* lbz R8, <#[R1 + 99]> */
		/* 8217DA9Ch case   25:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000063) );
		/* 8217DA9Ch case   25:*/		return 0x8217DAA0;
		  /* 8217DAA0h */ case   26:  		/* li R6, 0 */
		/* 8217DAA0h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8217DAA0h case   26:*/		return 0x8217DAA4;
		  /* 8217DAA4h */ case   27:  		/* cntlzw R11, R11 */
		/* 8217DAA4h case   27:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 8217DAA4h case   27:*/		return 0x8217DAA8;
		  /* 8217DAA8h */ case   28:  		/* mr R5, R29 */
		/* 8217DAA8h case   28:*/		regs.R5 = regs.R29;
		/* 8217DAA8h case   28:*/		return 0x8217DAAC;
		  /* 8217DAACh */ case   29:  		/* rlwinm R7, R11, 27, 31, 31 */
		/* 8217DAACh case   29:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R7,regs.R11);
		/* 8217DAACh case   29:*/		return 0x8217DAB0;
	}
	return 0x8217DAB0;
} // Block from 8217DA38h-8217DAB0h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8217DAB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DAB0);
		  /* 8217DAB0h */ case    0:  		/* mr R4, R26 */
		/* 8217DAB0h case    0:*/		regs.R4 = regs.R26;
		/* 8217DAB0h case    0:*/		return 0x8217DAB4;
		  /* 8217DAB4h */ case    1:  		/* mr R3, R16 */
		/* 8217DAB4h case    1:*/		regs.R3 = regs.R16;
		/* 8217DAB4h case    1:*/		return 0x8217DAB8;
		  /* 8217DAB8h */ case    2:  		/* bl -16864 */
		/* 8217DAB8h case    2:*/		regs.LR = 0x8217DABC; return 0x821798D8;
		/* 8217DAB8h case    2:*/		return 0x8217DABC;
		  /* 8217DABCh */ case    3:  		/* lwz R11, <#[R26 + 48]> */
		/* 8217DABCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 8217DABCh case    3:*/		return 0x8217DAC0;
		  /* 8217DAC0h */ case    4:  		/* oris R11, R11, 3072 */
		/* 8217DAC0h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC00);
		/* 8217DAC0h case    4:*/		return 0x8217DAC4;
		  /* 8217DAC4h */ case    5:  		/* stw R11, <#[R26 + 48]> */
		/* 8217DAC4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000030) );
		/* 8217DAC4h case    5:*/		return 0x8217DAC8;
	}
	return 0x8217DAC8;
} // Block from 8217DAB0h-8217DAC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217DAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DAC8);
		  /* 8217DAC8h */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 8217DAC8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 8217DAC8h case    0:*/		return 0x8217DACC;
		  /* 8217DACCh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217DACCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217DACCh case    1:*/		return 0x8217DAD0;
		  /* 8217DAD0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DAD0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DAD0h case    2:*/		return 0x8217DAD4;
		  /* 8217DAD4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217DAD4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217DAE4;  }
		/* 8217DAD4h case    3:*/		return 0x8217DAD8;
		  /* 8217DAD8h */ case    4:  		/* mr R26, R11 */
		/* 8217DAD8h case    4:*/		regs.R26 = regs.R11;
		/* 8217DAD8h case    4:*/		return 0x8217DADC;
		  /* 8217DADCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217DADCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217DADCh case    5:*/		return 0x8217DAE0;
		  /* 8217DAE0h */ case    6:  		/* bc 4, CR6_EQ, -652 */
		/* 8217DAE0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217D854;  }
		/* 8217DAE0h case    6:*/		return 0x8217DAE4;
	}
	return 0x8217DAE4;
} // Block from 8217DAC8h-8217DAE4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217DAE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DAE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DAE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DAE4);
		  /* 8217DAE4h */ case    0:  		/* mr R3, R15 */
		/* 8217DAE4h case    0:*/		regs.R3 = regs.R15;
		/* 8217DAE4h case    0:*/		return 0x8217DAE8;
	}
	return 0x8217DAE8;
} // Block from 8217DAE4h-8217DAE8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217DAE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DAE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DAE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DAE8);
		  /* 8217DAE8h */ case    0:  		/* addi R1, R1, 320 */
		/* 8217DAE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x140);
		/* 8217DAE8h case    0:*/		return 0x8217DAEC;
		  /* 8217DAECh */ case    1:  		/* lfd FR31, <#[R1 - 152]> */
		/* 8217DAECh case    1:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF68) );
		/* 8217DAECh case    1:*/		return 0x8217DAF0;
		  /* 8217DAF0h */ case    2:  		/* b -968828 */
		/* 8217DAF0h case    2:*/		return 0x82091274;
		/* 8217DAF0h case    2:*/		return 0x8217DAF4;
		  /* 8217DAF4h */ case    3:  		/* nop */
		/* 8217DAF4h case    3:*/		cpu::op::nop();
		/* 8217DAF4h case    3:*/		return 0x8217DAF8;
	}
	return 0x8217DAF8;
} // Block from 8217DAE8h-8217DAF8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217DAF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DAF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DAF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DAF8);
		  /* 8217DAF8h */ case    0:  		/* mfspr R12, LR */
		/* 8217DAF8h case    0:*/		regs.R12 = regs.LR;
		/* 8217DAF8h case    0:*/		return 0x8217DAFC;
		  /* 8217DAFCh */ case    1:  		/* bl -968920 */
		/* 8217DAFCh case    1:*/		regs.LR = 0x8217DB00; return 0x82091224;
		/* 8217DAFCh case    1:*/		return 0x8217DB00;
		  /* 8217DB00h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 8217DB00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 8217DB00h case    2:*/		return 0x8217DB04;
		  /* 8217DB04h */ case    3:  		/* lwz R11, <#[R4 + 48]> */
		/* 8217DB04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 8217DB04h case    3:*/		return 0x8217DB08;
		  /* 8217DB08h */ case    4:  		/* mr R19, R3 */
		/* 8217DB08h case    4:*/		regs.R19 = regs.R3;
		/* 8217DB08h case    4:*/		return 0x8217DB0C;
		  /* 8217DB0Ch */ case    5:  		/* mr R17, R4 */
		/* 8217DB0Ch case    5:*/		regs.R17 = regs.R4;
		/* 8217DB0Ch case    5:*/		return 0x8217DB10;
		  /* 8217DB10h */ case    6:  		/* mr R31, R5 */
		/* 8217DB10h case    6:*/		regs.R31 = regs.R5;
		/* 8217DB10h case    6:*/		return 0x8217DB14;
		  /* 8217DB14h */ case    7:  		/* mr R15, R6 */
		/* 8217DB14h case    7:*/		regs.R15 = regs.R6;
		/* 8217DB14h case    7:*/		return 0x8217DB18;
		  /* 8217DB18h */ case    8:  		/* mr R16, R7 */
		/* 8217DB18h case    8:*/		regs.R16 = regs.R7;
		/* 8217DB18h case    8:*/		return 0x8217DB1C;
		  /* 8217DB1Ch */ case    9:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 8217DB1Ch case    9:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 8217DB1Ch case    9:*/		return 0x8217DB20;
		  /* 8217DB20h */ case   10:  		/* bc 4, CR0_EQ, 1060 */
		/* 8217DB20h case   10:*/		if ( !regs.CR[0].eq ) { return 0x8217DF44;  }
		/* 8217DB20h case   10:*/		return 0x8217DB24;
		  /* 8217DB24h */ case   11:  		/* lwz R11, <#[R5 + 48]> */
		/* 8217DB24h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000030) );
		/* 8217DB24h case   11:*/		return 0x8217DB28;
		  /* 8217DB28h */ case   12:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 8217DB28h case   12:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 8217DB28h case   12:*/		return 0x8217DB2C;
		  /* 8217DB2Ch */ case   13:  		/* bc 4, CR0_EQ, 1048 */
		/* 8217DB2Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x8217DF44;  }
		/* 8217DB2Ch case   13:*/		return 0x8217DB30;
		  /* 8217DB30h */ case   14:  		/* lwz R11, <#[R4 + 68]> */
		/* 8217DB30h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000044) );
		/* 8217DB30h case   14:*/		return 0x8217DB34;
		  /* 8217DB34h */ case   15:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8217DB34h case   15:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8217DB34h case   15:*/		return 0x8217DB38;
		  /* 8217DB38h */ case   16:  		/* bc 4, CR0_EQ, 1036 */
		/* 8217DB38h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8217DF44;  }
		/* 8217DB38h case   16:*/		return 0x8217DB3C;
		  /* 8217DB3Ch */ case   17:  		/* lwz R11, <#[R5 + 68]> */
		/* 8217DB3Ch case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000044) );
		/* 8217DB3Ch case   17:*/		return 0x8217DB40;
		  /* 8217DB40h */ case   18:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8217DB40h case   18:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8217DB40h case   18:*/		return 0x8217DB44;
		  /* 8217DB44h */ case   19:  		/* bc 4, CR0_EQ, 1024 */
		/* 8217DB44h case   19:*/		if ( !regs.CR[0].eq ) { return 0x8217DF44;  }
		/* 8217DB44h case   19:*/		return 0x8217DB48;
		  /* 8217DB48h */ case   20:  		/* lwz R11, <#[R4 + 76]> */
		/* 8217DB48h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000004C) );
		/* 8217DB48h case   20:*/		return 0x8217DB4C;
		  /* 8217DB4Ch */ case   21:  		/* lwz R10, <#[R5 + 76]> */
		/* 8217DB4Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x0000004C) );
		/* 8217DB4Ch case   21:*/		return 0x8217DB50;
		  /* 8217DB50h */ case   22:  		/* xor R11, R11, R10 */
		/* 8217DB50h case   22:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8217DB50h case   22:*/		return 0x8217DB54;
		  /* 8217DB54h */ case   23:  		/* rlwinm. R11, R11, 0, 13, 31 */
		/* 8217DB54h case   23:*/		cpu::op::rlwinm<1,0,13,31>(regs,&regs.R11,regs.R11);
		/* 8217DB54h case   23:*/		return 0x8217DB58;
		  /* 8217DB58h */ case   24:  		/* bc 4, CR0_EQ, 1004 */
		/* 8217DB58h case   24:*/		if ( !regs.CR[0].eq ) { return 0x8217DF44;  }
		/* 8217DB58h case   24:*/		return 0x8217DB5C;
		  /* 8217DB5Ch */ case   25:  		/* lwz R11, <#[R4 + 36]> */
		/* 8217DB5Ch case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 8217DB5Ch case   25:*/		return 0x8217DB60;
		  /* 8217DB60h */ case   26:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DB60h case   26:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DB60h case   26:*/		return 0x8217DB64;
		  /* 8217DB64h */ case   27:  		/* bc 4, CR0_EQ, 60 */
		/* 8217DB64h case   27:*/		if ( !regs.CR[0].eq ) { return 0x8217DBA0;  }
		/* 8217DB64h case   27:*/		return 0x8217DB68;
		  /* 8217DB68h */ case   28:  		/* cmplwi CR0, R11, 0 */
		/* 8217DB68h case   28:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217DB68h case   28:*/		return 0x8217DB6C;
		  /* 8217DB6Ch */ case   29:  		/* bc 12, CR0_EQ, 52 */
		/* 8217DB6Ch case   29:*/		if ( regs.CR[0].eq ) { return 0x8217DBA0;  }
		/* 8217DB6Ch case   29:*/		return 0x8217DB70;
		  /* 8217DB70h */ case   30:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217DB70h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217DB70h case   30:*/		return 0x8217DB74;
		  /* 8217DB74h */ case   31:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 8217DB74h case   31:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 8217DB74h case   31:*/		return 0x8217DB78;
		  /* 8217DB78h */ case   32:  		/* cmplwi CR6, R10, 90 */
		/* 8217DB78h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000005A);
		/* 8217DB78h case   32:*/		return 0x8217DB7C;
		  /* 8217DB7Ch */ case   33:  		/* bc 12, CR6_EQ, 12 */
		/* 8217DB7Ch case   33:*/		if ( regs.CR[6].eq ) { return 0x8217DB88;  }
		/* 8217DB7Ch case   33:*/		return 0x8217DB80;
		  /* 8217DB80h */ case   34:  		/* cmplwi CR6, R10, 64 */
		/* 8217DB80h case   34:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000040);
		/* 8217DB80h case   34:*/		return 0x8217DB84;
		  /* 8217DB84h */ case   35:  		/* bc 4, CR6_EQ, 960 */
		/* 8217DB84h case   35:*/		if ( !regs.CR[6].eq ) { return 0x8217DF44;  }
		/* 8217DB84h case   35:*/		return 0x8217DB88;
	}
	return 0x8217DB88;
} // Block from 8217DAF8h-8217DB88h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8217DB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DB88);
		  /* 8217DB88h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217DB88h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217DB88h case    0:*/		return 0x8217DB8C;
		  /* 8217DB8Ch */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217DB8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217DB8Ch case    1:*/		return 0x8217DB90;
		  /* 8217DB90h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DB90h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DB90h case    2:*/		return 0x8217DB94;
		  /* 8217DB94h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217DB94h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217DBA0;  }
		/* 8217DB94h case    3:*/		return 0x8217DB98;
		  /* 8217DB98h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217DB98h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217DB98h case    4:*/		return 0x8217DB9C;
		  /* 8217DB9Ch */ case    5:  		/* bc 4, CR6_EQ, -44 */
		/* 8217DB9Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217DB70;  }
		/* 8217DB9Ch case    5:*/		return 0x8217DBA0;
	}
	return 0x8217DBA0;
} // Block from 8217DB88h-8217DBA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217DBA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DBA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DBA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DBA0);
		  /* 8217DBA0h */ case    0:  		/* li R5, 36 */
		/* 8217DBA0h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x24);
		/* 8217DBA0h case    0:*/		return 0x8217DBA4;
		  /* 8217DBA4h */ case    1:  		/* li R4, 8 */
		/* 8217DBA4h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8217DBA4h case    1:*/		return 0x8217DBA8;
		  /* 8217DBA8h */ case    2:  		/* mr R3, R19 */
		/* 8217DBA8h case    2:*/		regs.R3 = regs.R19;
		/* 8217DBA8h case    2:*/		return 0x8217DBAC;
		  /* 8217DBACh */ case    3:  		/* li R18, 1 */
		/* 8217DBACh case    3:*/		cpu::op::li<0>(regs,&regs.R18,0x1);
		/* 8217DBACh case    3:*/		return 0x8217DBB0;
		  /* 8217DBB0h */ case    4:  		/* bl -103104 */
		/* 8217DBB0h case    4:*/		regs.LR = 0x8217DBB4; return 0x821648F0;
		/* 8217DBB0h case    4:*/		return 0x8217DBB4;
		  /* 8217DBB4h */ case    5:  		/* addi R20, R3, 4 */
		/* 8217DBB4h case    5:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R3,0x4);
		/* 8217DBB4h case    5:*/		return 0x8217DBB8;
		  /* 8217DBB8h */ case    6:  		/* ori R11, R3, 1 */
		/* 8217DBB8h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8217DBB8h case    6:*/		return 0x8217DBBC;
		  /* 8217DBBCh */ case    7:  		/* ori R10, R20, 1 */
		/* 8217DBBCh case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R20,0x1);
		/* 8217DBBCh case    7:*/		return 0x8217DBC0;
		  /* 8217DBC0h */ case    8:  		/* stw R11, <#[R3 + 4]> */
		/* 8217DBC0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8217DBC0h case    8:*/		return 0x8217DBC4;
		  /* 8217DBC4h */ case    9:  		/* mr R21, R3 */
		/* 8217DBC4h case    9:*/		regs.R21 = regs.R3;
		/* 8217DBC4h case    9:*/		return 0x8217DBC8;
		  /* 8217DBC8h */ case   10:  		/* stw R10, <#[R3]> */
		/* 8217DBC8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8217DBC8h case   10:*/		return 0x8217DBCC;
		  /* 8217DBCCh */ case   11:  		/* lwz R11, <#[R31 + 20]> */
		/* 8217DBCCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 8217DBCCh case   11:*/		return 0x8217DBD0;
		  /* 8217DBD0h */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DBD0h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DBD0h case   12:*/		return 0x8217DBD4;
		  /* 8217DBD4h */ case   13:  		/* bc 4, CR0_EQ, 52 */
		/* 8217DBD4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8217DC08;  }
		/* 8217DBD4h case   13:*/		return 0x8217DBD8;
		  /* 8217DBD8h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 8217DBD8h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217DBD8h case   14:*/		return 0x8217DBDC;
		  /* 8217DBDCh */ case   15:  		/* bc 12, CR0_EQ, 44 */
		/* 8217DBDCh case   15:*/		if ( regs.CR[0].eq ) { return 0x8217DC08;  }
		/* 8217DBDCh case   15:*/		return 0x8217DBE0;
		  /* 8217DBE0h */ case   16:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217DBE0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217DBE0h case   16:*/		return 0x8217DBE4;
		  /* 8217DBE4h */ case   17:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8217DBE4h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8217DBE4h case   17:*/		return 0x8217DBE8;
		  /* 8217DBE8h */ case   18:  		/* cmplwi CR6, R10, 14336 */
		/* 8217DBE8h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 8217DBE8h case   18:*/		return 0x8217DBEC;
		  /* 8217DBECh */ case   19:  		/* bc 4, CR6_EQ, 820 */
		/* 8217DBECh case   19:*/		if ( !regs.CR[6].eq ) { return 0x8217DF20;  }
		/* 8217DBECh case   19:*/		return 0x8217DBF0;
		  /* 8217DBF0h */ case   20:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217DBF0h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217DBF0h case   20:*/		return 0x8217DBF4;
		  /* 8217DBF4h */ case   21:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217DBF4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217DBF4h case   21:*/		return 0x8217DBF8;
		  /* 8217DBF8h */ case   22:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DBF8h case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DBF8h case   22:*/		return 0x8217DBFC;
		  /* 8217DBFCh */ case   23:  		/* bc 4, CR0_EQ, 12 */
		/* 8217DBFCh case   23:*/		if ( !regs.CR[0].eq ) { return 0x8217DC08;  }
		/* 8217DBFCh case   23:*/		return 0x8217DC00;
		  /* 8217DC00h */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 8217DC00h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217DC00h case   24:*/		return 0x8217DC04;
		  /* 8217DC04h */ case   25:  		/* bc 4, CR6_EQ, -36 */
		/* 8217DC04h case   25:*/		if ( !regs.CR[6].eq ) { return 0x8217DBE0;  }
		/* 8217DC04h case   25:*/		return 0x8217DC08;
	}
	return 0x8217DC08;
} // Block from 8217DBA0h-8217DC08h (26 instructions)

//////////////////////////////////////////////////////
// Block at 8217DC08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DC08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DC08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DC08);
		  /* 8217DC08h */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 8217DC08h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8217DC08h case    0:*/		return 0x8217DC0C;
		  /* 8217DC0Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DC0Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DC0Ch case    1:*/		return 0x8217DC10;
		  /* 8217DC10h */ case    2:  		/* bc 4, CR0_EQ, 788 */
		/* 8217DC10h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217DF24;  }
		/* 8217DC10h case    2:*/		return 0x8217DC14;
		  /* 8217DC14h */ case    3:  		/* mr R23, R11 */
		/* 8217DC14h case    3:*/		regs.R23 = regs.R11;
		/* 8217DC14h case    3:*/		return 0x8217DC18;
		  /* 8217DC18h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8217DC18h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217DC18h case    4:*/		return 0x8217DC1C;
		  /* 8217DC1Ch */ case    5:  		/* bc 12, CR0_EQ, 776 */
		/* 8217DC1Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x8217DF24;  }
		/* 8217DC1Ch case    5:*/		return 0x8217DC20;
		  /* 8217DC20h */ case    6:  		/* lwz R11, <#[R23 + 8]> */
		/* 8217DC20h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 8217DC20h case    6:*/		return 0x8217DC24;
		  /* 8217DC24h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217DC24h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217DC24h case    7:*/		return 0x8217DC28;
		  /* 8217DC28h */ case    8:  		/* cmplwi CR6, R11, 14080 */
		/* 8217DC28h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 8217DC28h case    8:*/		return 0x8217DC2C;
		  /* 8217DC2Ch */ case    9:  		/* bc 4, CR6_EQ, 724 */
		/* 8217DC2Ch case    9:*/		if ( !regs.CR[6].eq ) { return 0x8217DF00;  }
		/* 8217DC2Ch case    9:*/		return 0x8217DC30;
		  /* 8217DC30h */ case   10:  		/* addi R11, R1, 112 */
		/* 8217DC30h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 8217DC30h case   10:*/		return 0x8217DC34;
		  /* 8217DC34h */ case   11:  		/* addi R22, R23, 44 */
		/* 8217DC34h case   11:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R23,0x2C);
		/* 8217DC34h case   11:*/		return 0x8217DC38;
		  /* 8217DC38h */ case   12:  		/* li R24, 0 */
		/* 8217DC38h case   12:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 8217DC38h case   12:*/		return 0x8217DC3C;
		  /* 8217DC3Ch */ case   13:  		/* li R31, 0 */
		/* 8217DC3Ch case   13:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8217DC3Ch case   13:*/		return 0x8217DC40;
		  /* 8217DC40h */ case   14:  		/* addi R30, R11, -4 */
		/* 8217DC40h case   14:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 8217DC40h case   14:*/		return 0x8217DC44;
		  /* 8217DC44h */ case   15:  		/* mr R29, R22 */
		/* 8217DC44h case   15:*/		regs.R29 = regs.R22;
		/* 8217DC44h case   15:*/		return 0x8217DC48;
		  /* 8217DC48h */ case   16:  		/* lwz R11, <#[R23 + 8]> */
		/* 8217DC48h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 8217DC48h case   16:*/		return 0x8217DC4C;
		  /* 8217DC4Ch */ case   17:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 8217DC4Ch case   17:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 8217DC4Ch case   17:*/		return 0x8217DC50;
		  /* 8217DC50h */ case   18:  		/* cmplw CR6, R31, R11 */
		/* 8217DC50h case   18:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8217DC50h case   18:*/		return 0x8217DC54;
		  /* 8217DC54h */ case   19:  		/* bc 4, CR6_LT, 84 */
		/* 8217DC54h case   19:*/		if ( !regs.CR[6].lt ) { return 0x8217DCA8;  }
		/* 8217DC54h case   19:*/		return 0x8217DC58;
		  /* 8217DC58h */ case   20:  		/* lwz R3, <#[R29]> */
		/* 8217DC58h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 8217DC58h case   20:*/		return 0x8217DC5C;
		  /* 8217DC5Ch */ case   21:  		/* lwz R11, <#[R3 + 12]> */
		/* 8217DC5Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217DC5Ch case   21:*/		return 0x8217DC60;
		  /* 8217DC60h */ case   22:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217DC60h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217DC60h case   22:*/		return 0x8217DC64;
		  /* 8217DC64h */ case   23:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217DC64h case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217DC64h case   23:*/		return 0x8217DC68;
		  /* 8217DC68h */ case   24:  		/* cmplwi CR6, R11, 14336 */
		/* 8217DC68h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8217DC68h case   24:*/		return 0x8217DC6C;
		  /* 8217DC6Ch */ case   25:  		/* bc 4, CR6_EQ, 48 */
		/* 8217DC6Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x8217DC9C;  }
		/* 8217DC6Ch case   25:*/		return 0x8217DC70;
		  /* 8217DC70h */ case   26:  		/* li R10, 0 */
		/* 8217DC70h case   26:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217DC70h case   26:*/		return 0x8217DC74;
		  /* 8217DC74h */ case   27:  		/* mr R9, R23 */
		/* 8217DC74h case   27:*/		regs.R9 = regs.R23;
		/* 8217DC74h case   27:*/		return 0x8217DC78;
		  /* 8217DC78h */ case   28:  		/* li R8, 0 */
		/* 8217DC78h case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217DC78h case   28:*/		return 0x8217DC7C;
		  /* 8217DC7Ch */ case   29:  		/* addi R7, R1, 88 */
		/* 8217DC7Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 8217DC7Ch case   29:*/		return 0x8217DC80;
		  /* 8217DC80h */ case   30:  		/* addi R6, R1, 92 */
		/* 8217DC80h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x5C);
		/* 8217DC80h case   30:*/		return 0x8217DC84;
		  /* 8217DC84h */ case   31:  		/* addi R5, R1, 80 */
		/* 8217DC84h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 8217DC84h case   31:*/		return 0x8217DC88;
		  /* 8217DC88h */ case   32:  		/* li R4, 0 */
		/* 8217DC88h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217DC88h case   32:*/		return 0x8217DC8C;
		  /* 8217DC8Ch */ case   33:  		/* bl 677956 */
		/* 8217DC8Ch case   33:*/		regs.LR = 0x8217DC90; return 0x822234D0;
		/* 8217DC8Ch case   33:*/		return 0x8217DC90;
		  /* 8217DC90h */ case   34:  		/* lwz R11, <#[R1 + 80]> */
		/* 8217DC90h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8217DC90h case   34:*/		return 0x8217DC94;
		  /* 8217DC94h */ case   35:  		/* addi R24, R24, 1 */
		/* 8217DC94h case   35:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 8217DC94h case   35:*/		return 0x8217DC98;
		  /* 8217DC98h */ case   36:  		/* stwu R11, <#[R30 + 4]> */
		/* 8217DC98h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 8217DC98h case   36:*/		return 0x8217DC9C;
	}
	return 0x8217DC9C;
} // Block from 8217DC08h-8217DC9Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 8217DC9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DC9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DC9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DC9C);
		  /* 8217DC9Ch */ case    0:  		/* addi R31, R31, 1 */
		/* 8217DC9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8217DC9Ch case    0:*/		return 0x8217DCA0;
		  /* 8217DCA0h */ case    1:  		/* addi R29, R29, 4 */
		/* 8217DCA0h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8217DCA0h case    1:*/		return 0x8217DCA4;
		  /* 8217DCA4h */ case    2:  		/* b -92 */
		/* 8217DCA4h case    2:*/		return 0x8217DC48;
		/* 8217DCA4h case    2:*/		return 0x8217DCA8;
	}
	return 0x8217DCA8;
} // Block from 8217DC9Ch-8217DCA8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217DCA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DCA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DCA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DCA8);
		  /* 8217DCA8h */ case    0:  		/* subf R28, R24, R11 */
		/* 8217DCA8h case    0:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R24,regs.R11);
		/* 8217DCA8h case    0:*/		return 0x8217DCAC;
		  /* 8217DCACh */ case    1:  		/* li R30, 0 */
		/* 8217DCACh case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8217DCACh case    1:*/		return 0x8217DCB0;
		  /* 8217DCB0h */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 8217DCB0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217DCB0h case    2:*/		return 0x8217DCB4;
		  /* 8217DCB4h */ case    3:  		/* bc 12, CR6_EQ, 196 */
		/* 8217DCB4h case    3:*/		if ( regs.CR[6].eq ) { return 0x8217DD78;  }
		/* 8217DCB4h case    3:*/		return 0x8217DCB8;
		  /* 8217DCB8h */ case    4:  		/* addi R29, R1, 112 */
		/* 8217DCB8h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x70);
		/* 8217DCB8h case    4:*/		return 0x8217DCBC;
		  /* 8217DCBCh */ case    5:  		/* lwz R31, <#[R29]> */
		/* 8217DCBCh case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 8217DCBCh case    5:*/		return 0x8217DCC0;
		  /* 8217DCC0h */ case    6:  		/* li R11, 0 */
		/* 8217DCC0h case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217DCC0h case    6:*/		return 0x8217DCC4;
		  /* 8217DCC4h */ case    7:  		/* cmplwi CR6, R30, 0 */
		/* 8217DCC4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217DCC4h case    7:*/		return 0x8217DCC8;
		  /* 8217DCC8h */ case    8:  		/* bc 12, CR6_EQ, 36 */
		/* 8217DCC8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8217DCEC;  }
		/* 8217DCC8h case    8:*/		return 0x8217DCCC;
		  /* 8217DCCCh */ case    9:  		/* addi R10, R1, 112 */
		/* 8217DCCCh case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8217DCCCh case    9:*/		return 0x8217DCD0;
		  /* 8217DCD0h */ case   10:  		/* lwz R9, <#[R10]> */
		/* 8217DCD0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217DCD0h case   10:*/		return 0x8217DCD4;
		  /* 8217DCD4h */ case   11:  		/* cmplw CR6, R31, R9 */
		/* 8217DCD4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R9);
		/* 8217DCD4h case   11:*/		return 0x8217DCD8;
		  /* 8217DCD8h */ case   12:  		/* bc 12, CR6_EQ, 20 */
		/* 8217DCD8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8217DCEC;  }
		/* 8217DCD8h case   12:*/		return 0x8217DCDC;
		  /* 8217DCDCh */ case   13:  		/* addi R11, R11, 1 */
		/* 8217DCDCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217DCDCh case   13:*/		return 0x8217DCE0;
		  /* 8217DCE0h */ case   14:  		/* addi R10, R10, 4 */
		/* 8217DCE0h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8217DCE0h case   14:*/		return 0x8217DCE4;
		  /* 8217DCE4h */ case   15:  		/* cmplw CR6, R11, R30 */
		/* 8217DCE4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8217DCE4h case   15:*/		return 0x8217DCE8;
		  /* 8217DCE8h */ case   16:  		/* bc 12, CR6_LT, -24 */
		/* 8217DCE8h case   16:*/		if ( regs.CR[6].lt ) { return 0x8217DCD0;  }
		/* 8217DCE8h case   16:*/		return 0x8217DCEC;
	}
	return 0x8217DCEC;
} // Block from 8217DCA8h-8217DCECh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8217DCECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DCEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DCEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DCEC);
		  /* 8217DCECh */ case    0:  		/* cmplw CR6, R11, R30 */
		/* 8217DCECh case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8217DCECh case    0:*/		return 0x8217DCF0;
		  /* 8217DCF0h */ case    1:  		/* bc 4, CR6_EQ, 120 */
		/* 8217DCF0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217DD68;  }
		/* 8217DCF0h case    1:*/		return 0x8217DCF4;
		  /* 8217DCF4h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217DCF4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217DCF4h case    2:*/		return 0x8217DCF8;
		  /* 8217DCF8h */ case    3:  		/* mr R4, R31 */
		/* 8217DCF8h case    3:*/		regs.R4 = regs.R31;
		/* 8217DCF8h case    3:*/		return 0x8217DCFC;
		  /* 8217DCFCh */ case    4:  		/* mr R3, R21 */
		/* 8217DCFCh case    4:*/		regs.R3 = regs.R21;
		/* 8217DCFCh case    4:*/		return 0x8217DD00;
		  /* 8217DD00h */ case    5:  		/* rlwinm R11, R11, 18, 29, 31 */
		/* 8217DD00h case    5:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R11);
		/* 8217DD00h case    5:*/		return 0x8217DD04;
		  /* 8217DD04h */ case    6:  		/* add R28, R11, R28 */
		/* 8217DD04h case    6:*/		cpu::op::add<0>(regs,&regs.R28,regs.R11,regs.R28);
		/* 8217DD04h case    6:*/		return 0x8217DD08;
		  /* 8217DD08h */ case    7:  		/* bl -48344 */
		/* 8217DD08h case    7:*/		regs.LR = 0x8217DD0C; return 0x82172030;
		/* 8217DD08h case    7:*/		return 0x8217DD0C;
		  /* 8217DD0Ch */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217DD0Ch case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217DD0Ch case    8:*/		return 0x8217DD10;
		  /* 8217DD10h */ case    9:  		/* bc 4, CR0_EQ, 528 */
		/* 8217DD10h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8217DF20;  }
		/* 8217DD10h case    9:*/		return 0x8217DD14;
		  /* 8217DD14h */ case   10:  		/* lwz R11, <#[R20]> */
		/* 8217DD14h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 8217DD14h case   10:*/		return 0x8217DD18;
		  /* 8217DD18h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217DD18h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217DD18h case   11:*/		return 0x8217DD1C;
		  /* 8217DD1Ch */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8217DD1Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217DD44;  }
		/* 8217DD1Ch case   12:*/		return 0x8217DD20;
		  /* 8217DD20h */ case   13:  		/* lwz R11, <#[R21]> */
		/* 8217DD20h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 8217DD20h case   13:*/		return 0x8217DD24;
		  /* 8217DD24h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217DD24h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217DD24h case   14:*/		return 0x8217DD28;
		  /* 8217DD28h */ case   15:  		/* addic. R3, R11, -4 */
		/* 8217DD28h case   15:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8217DD28h case   15:*/		return 0x8217DD2C;
		  /* 8217DD2Ch */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 8217DD2Ch case   16:*/		if ( regs.CR[0].eq ) { return 0x8217DD44;  }
		/* 8217DD2Ch case   16:*/		return 0x8217DD30;
		  /* 8217DD30h */ case   17:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217DD30h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217DD30h case   17:*/		return 0x8217DD34;
		  /* 8217DD34h */ case   18:  		/* lwz R10, <#[R3 + 12]> */
		/* 8217DD34h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217DD34h case   18:*/		return 0x8217DD38;
		  /* 8217DD38h */ case   19:  		/* addi R11, R11, 1 */
		/* 8217DD38h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217DD38h case   19:*/		return 0x8217DD3C;
		  /* 8217DD3Ch */ case   20:  		/* cmplw CR6, R11, R10 */
		/* 8217DD3Ch case   20:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217DD3Ch case   20:*/		return 0x8217DD40;
		  /* 8217DD40h */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 8217DD40h case   21:*/		if ( !regs.CR[6].gt ) { return 0x8217DD50;  }
		/* 8217DD40h case   21:*/		return 0x8217DD44;
	}
	return 0x8217DD44;
} // Block from 8217DCECh-8217DD44h (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217DD44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DD44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DD44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DD44);
		  /* 8217DD44h */ case    0:  		/* li R4, 1 */
		/* 8217DD44h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217DD44h case    0:*/		return 0x8217DD48;
		  /* 8217DD48h */ case    1:  		/* mr R3, R21 */
		/* 8217DD48h case    1:*/		regs.R3 = regs.R21;
		/* 8217DD48h case    1:*/		return 0x8217DD4C;
		  /* 8217DD4Ch */ case    2:  		/* bl 62332 */
		/* 8217DD4Ch case    2:*/		regs.LR = 0x8217DD50; return 0x8218D0C8;
		/* 8217DD4Ch case    2:*/		return 0x8217DD50;
	}
	return 0x8217DD50;
} // Block from 8217DD44h-8217DD50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217DD50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DD50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DD50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DD50);
		  /* 8217DD50h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217DD50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217DD50h case    0:*/		return 0x8217DD54;
		  /* 8217DD54h */ case    1:  		/* addi R10, R11, 4 */
		/* 8217DD54h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217DD54h case    1:*/		return 0x8217DD58;
		  /* 8217DD58h */ case    2:  		/* addi R9, R11, 1 */
		/* 8217DD58h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8217DD58h case    2:*/		return 0x8217DD5C;
		  /* 8217DD5Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8217DD5Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8217DD5Ch case    3:*/		return 0x8217DD60;
		  /* 8217DD60h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8217DD60h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8217DD60h case    4:*/		return 0x8217DD64;
		  /* 8217DD64h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8217DD64h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8217DD64h case    5:*/		return 0x8217DD68;
	}
	return 0x8217DD68;
} // Block from 8217DD50h-8217DD68h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217DD68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DD68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DD68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DD68);
		  /* 8217DD68h */ case    0:  		/* addi R30, R30, 1 */
		/* 8217DD68h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8217DD68h case    0:*/		return 0x8217DD6C;
		  /* 8217DD6Ch */ case    1:  		/* addi R29, R29, 4 */
		/* 8217DD6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8217DD6Ch case    1:*/		return 0x8217DD70;
		  /* 8217DD70h */ case    2:  		/* cmplw CR6, R30, R24 */
		/* 8217DD70h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 8217DD70h case    2:*/		return 0x8217DD74;
		  /* 8217DD74h */ case    3:  		/* bc 12, CR6_LT, -184 */
		/* 8217DD74h case    3:*/		if ( regs.CR[6].lt ) { return 0x8217DCBC;  }
		/* 8217DD74h case    3:*/		return 0x8217DD78;
	}
	return 0x8217DD78;
} // Block from 8217DD68h-8217DD78h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217DD78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DD78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DD78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DD78);
		  /* 8217DD78h */ case    0:  		/* cmplwi CR6, R28, 4 */
		/* 8217DD78h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000004);
		/* 8217DD78h case    0:*/		return 0x8217DD7C;
		  /* 8217DD7Ch */ case    1:  		/* bc 12, CR6_GT, 420 */
		/* 8217DD7Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x8217DF20;  }
		/* 8217DD7Ch case    1:*/		return 0x8217DD80;
		  /* 8217DD80h */ case    2:  		/* lwz R11, <#[R17 + 28]> */
		/* 8217DD80h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x0000001C) );
		/* 8217DD80h case    2:*/		return 0x8217DD84;
		  /* 8217DD84h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DD84h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DD84h case    3:*/		return 0x8217DD88;
		  /* 8217DD88h */ case    4:  		/* bc 4, CR0_EQ, 376 */
		/* 8217DD88h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217DF00;  }
		/* 8217DD88h case    4:*/		return 0x8217DD8C;
		  /* 8217DD8Ch */ case    5:  		/* mr R28, R11 */
		/* 8217DD8Ch case    5:*/		regs.R28 = regs.R11;
		/* 8217DD8Ch case    5:*/		return 0x8217DD90;
		  /* 8217DD90h */ case    6:  		/* cmplwi CR0, R11, 0 */
		/* 8217DD90h case    6:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217DD90h case    6:*/		return 0x8217DD94;
		  /* 8217DD94h */ case    7:  		/* bc 12, CR0_EQ, 364 */
		/* 8217DD94h case    7:*/		if ( regs.CR[0].eq ) { return 0x8217DF00;  }
		/* 8217DD94h case    7:*/		return 0x8217DD98;
		  /* 8217DD98h */ case    8:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217DD98h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217DD98h case    8:*/		return 0x8217DD9C;
		  /* 8217DD9Ch */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217DD9Ch case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217DD9Ch case    9:*/		return 0x8217DDA0;
		  /* 8217DDA0h */ case   10:  		/* cmplwi CR6, R11, 14080 */
		/* 8217DDA0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 8217DDA0h case   10:*/		return 0x8217DDA4;
		  /* 8217DDA4h */ case   11:  		/* bc 4, CR6_EQ, 320 */
		/* 8217DDA4h case   11:*/		if ( !regs.CR[6].eq ) { return 0x8217DEE4;  }
		/* 8217DDA4h case   11:*/		return 0x8217DDA8;
		  /* 8217DDA8h */ case   12:  		/* li R25, 0 */
		/* 8217DDA8h case   12:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8217DDA8h case   12:*/		return 0x8217DDAC;
		  /* 8217DDACh */ case   13:  		/* li R26, 0 */
		/* 8217DDACh case   13:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 8217DDACh case   13:*/		return 0x8217DDB0;
		  /* 8217DDB0h */ case   14:  		/* addi R27, R28, 44 */
		/* 8217DDB0h case   14:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0x2C);
		/* 8217DDB0h case   14:*/		return 0x8217DDB4;
		  /* 8217DDB4h */ case   15:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217DDB4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217DDB4h case   15:*/		return 0x8217DDB8;
		  /* 8217DDB8h */ case   16:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 8217DDB8h case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 8217DDB8h case   16:*/		return 0x8217DDBC;
		  /* 8217DDBCh */ case   17:  		/* cmplw CR6, R26, R11 */
		/* 8217DDBCh case   17:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 8217DDBCh case   17:*/		return 0x8217DDC0;
		  /* 8217DDC0h */ case   18:  		/* bc 4, CR6_LT, 272 */
		/* 8217DDC0h case   18:*/		if ( !regs.CR[6].lt ) { return 0x8217DED0;  }
		/* 8217DDC0h case   18:*/		return 0x8217DDC4;
		  /* 8217DDC4h */ case   19:  		/* lwz R31, <#[R27]> */
		/* 8217DDC4h case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 8217DDC4h case   19:*/		return 0x8217DDC8;
		  /* 8217DDC8h */ case   20:  		/* li R10, 0 */
		/* 8217DDC8h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217DDC8h case   20:*/		return 0x8217DDCC;
		  /* 8217DDCCh */ case   21:  		/* mr R9, R28 */
		/* 8217DDCCh case   21:*/		regs.R9 = regs.R28;
		/* 8217DDCCh case   21:*/		return 0x8217DDD0;
		  /* 8217DDD0h */ case   22:  		/* li R8, 0 */
		/* 8217DDD0h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217DDD0h case   22:*/		return 0x8217DDD4;
		  /* 8217DDD4h */ case   23:  		/* addi R7, R1, 96 */
		/* 8217DDD4h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x60);
		/* 8217DDD4h case   23:*/		return 0x8217DDD8;
		  /* 8217DDD8h */ case   24:  		/* addi R6, R1, 100 */
		/* 8217DDD8h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x64);
		/* 8217DDD8h case   24:*/		return 0x8217DDDC;
		  /* 8217DDDCh */ case   25:  		/* addi R5, R1, 84 */
		/* 8217DDDCh case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x54);
		/* 8217DDDCh case   25:*/		return 0x8217DDE0;
		  /* 8217DDE0h */ case   26:  		/* li R4, 0 */
		/* 8217DDE0h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217DDE0h case   26:*/		return 0x8217DDE4;
		  /* 8217DDE4h */ case   27:  		/* mr R3, R31 */
		/* 8217DDE4h case   27:*/		regs.R3 = regs.R31;
		/* 8217DDE4h case   27:*/		return 0x8217DDE8;
		  /* 8217DDE8h */ case   28:  		/* bl 677608 */
		/* 8217DDE8h case   28:*/		regs.LR = 0x8217DDEC; return 0x822234D0;
		/* 8217DDE8h case   28:*/		return 0x8217DDEC;
		  /* 8217DDECh */ case   29:  		/* li R11, 0 */
		/* 8217DDECh case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217DDECh case   29:*/		return 0x8217DDF0;
		  /* 8217DDF0h */ case   30:  		/* cmplwi CR6, R24, 0 */
		/* 8217DDF0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8217DDF0h case   30:*/		return 0x8217DDF4;
		  /* 8217DDF4h */ case   31:  		/* bc 12, CR6_EQ, 40 */
		/* 8217DDF4h case   31:*/		if ( regs.CR[6].eq ) { return 0x8217DE1C;  }
		/* 8217DDF4h case   31:*/		return 0x8217DDF8;
		  /* 8217DDF8h */ case   32:  		/* addi R10, R1, 112 */
		/* 8217DDF8h case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 8217DDF8h case   32:*/		return 0x8217DDFC;
		  /* 8217DDFCh */ case   33:  		/* lwz R9, <#[R10]> */
		/* 8217DDFCh case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217DDFCh case   33:*/		return 0x8217DE00;
		  /* 8217DE00h */ case   34:  		/* lwz R8, <#[R1 + 84]> */
		/* 8217DE00h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 8217DE00h case   34:*/		return 0x8217DE04;
		  /* 8217DE04h */ case   35:  		/* cmplw CR6, R8, R9 */
		/* 8217DE04h case   35:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 8217DE04h case   35:*/		return 0x8217DE08;
		  /* 8217DE08h */ case   36:  		/* bc 12, CR6_EQ, 280 */
		/* 8217DE08h case   36:*/		if ( regs.CR[6].eq ) { return 0x8217DF20;  }
		/* 8217DE08h case   36:*/		return 0x8217DE0C;
		  /* 8217DE0Ch */ case   37:  		/* addi R11, R11, 1 */
		/* 8217DE0Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217DE0Ch case   37:*/		return 0x8217DE10;
		  /* 8217DE10h */ case   38:  		/* addi R10, R10, 4 */
		/* 8217DE10h case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8217DE10h case   38:*/		return 0x8217DE14;
		  /* 8217DE14h */ case   39:  		/* cmplw CR6, R11, R24 */
		/* 8217DE14h case   39:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 8217DE14h case   39:*/		return 0x8217DE18;
		  /* 8217DE18h */ case   40:  		/* bc 12, CR6_LT, -28 */
		/* 8217DE18h case   40:*/		if ( regs.CR[6].lt ) { return 0x8217DDFC;  }
		/* 8217DE18h case   40:*/		return 0x8217DE1C;
	}
	return 0x8217DE1C;
} // Block from 8217DD78h-8217DE1Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 8217DE1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DE1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DE1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DE1C);
		  /* 8217DE1Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 8217DE1Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8217DE1Ch case    0:*/		return 0x8217DE20;
		  /* 8217DE20h */ case    1:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217DE20h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217DE20h case    1:*/		return 0x8217DE24;
		  /* 8217DE24h */ case    2:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 8217DE24h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 8217DE24h case    2:*/		return 0x8217DE28;
		  /* 8217DE28h */ case    3:  		/* cmplwi CR6, R10, 14336 */
		/* 8217DE28h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003800);
		/* 8217DE28h case    3:*/		return 0x8217DE2C;
		  /* 8217DE2Ch */ case    4:  		/* bc 4, CR6_EQ, 152 */
		/* 8217DE2Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x8217DEC4;  }
		/* 8217DE2Ch case    4:*/		return 0x8217DE30;
		  /* 8217DE30h */ case    5:  		/* mr R3, R19 */
		/* 8217DE30h case    5:*/		regs.R3 = regs.R19;
		/* 8217DE30h case    5:*/		return 0x8217DE34;
		  /* 8217DE34h */ case    6:  		/* lhz R4, <#[R11 + 18]> */
		/* 8217DE34h case    6:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000012) );
		/* 8217DE34h case    6:*/		return 0x8217DE38;
		  /* 8217DE38h */ case    7:  		/* bl 23336 */
		/* 8217DE38h case    7:*/		regs.LR = 0x8217DE3C; return 0x82183960;
		/* 8217DE38h case    7:*/		return 0x8217DE3C;
		  /* 8217DE3Ch */ case    8:  		/* mr R29, R3 */
		/* 8217DE3Ch case    8:*/		regs.R29 = regs.R3;
		/* 8217DE3Ch case    8:*/		return 0x8217DE40;
		  /* 8217DE40h */ case    9:  		/* li R31, 0 */
		/* 8217DE40h case    9:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8217DE40h case    9:*/		return 0x8217DE44;
		  /* 8217DE44h */ case   10:  		/* mr R30, R22 */
		/* 8217DE44h case   10:*/		regs.R30 = regs.R22;
		/* 8217DE44h case   10:*/		return 0x8217DE48;
		  /* 8217DE48h */ case   11:  		/* lwz R11, <#[R23 + 8]> */
		/* 8217DE48h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 8217DE48h case   11:*/		return 0x8217DE4C;
		  /* 8217DE4Ch */ case   12:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 8217DE4Ch case   12:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 8217DE4Ch case   12:*/		return 0x8217DE50;
		  /* 8217DE50h */ case   13:  		/* cmplw CR6, R31, R11 */
		/* 8217DE50h case   13:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 8217DE50h case   13:*/		return 0x8217DE54;
		  /* 8217DE54h */ case   14:  		/* bc 4, CR6_LT, 112 */
		/* 8217DE54h case   14:*/		if ( !regs.CR[6].lt ) { return 0x8217DEC4;  }
		/* 8217DE54h case   14:*/		return 0x8217DE58;
		  /* 8217DE58h */ case   15:  		/* lwz R11, <#[R30]> */
		/* 8217DE58h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8217DE58h case   15:*/		return 0x8217DE5C;
		  /* 8217DE5Ch */ case   16:  		/* lwz R10, <#[R11 + 12]> */
		/* 8217DE5Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217DE5Ch case   16:*/		return 0x8217DE60;
		  /* 8217DE60h */ case   17:  		/* lwz R11, <#[R10 + 8]> */
		/* 8217DE60h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 8217DE60h case   17:*/		return 0x8217DE64;
		  /* 8217DE64h */ case   18:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217DE64h case   18:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217DE64h case   18:*/		return 0x8217DE68;
		  /* 8217DE68h */ case   19:  		/* cmplwi CR6, R11, 14336 */
		/* 8217DE68h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8217DE68h case   19:*/		return 0x8217DE6C;
		  /* 8217DE6Ch */ case   20:  		/* bc 4, CR6_EQ, 76 */
		/* 8217DE6Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x8217DEB8;  }
		/* 8217DE6Ch case   20:*/		return 0x8217DE70;
		  /* 8217DE70h */ case   21:  		/* rlwinm. R11, R15, 0, 24, 31 */
		/* 8217DE70h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R15);
		/* 8217DE70h case   21:*/		return 0x8217DE74;
		  /* 8217DE74h */ case   22:  		/* bc 12, CR0_EQ, 44 */
		/* 8217DE74h case   22:*/		if ( regs.CR[0].eq ) { return 0x8217DEA0;  }
		/* 8217DE74h case   22:*/		return 0x8217DE78;
		  /* 8217DE78h */ case   23:  		/* lwz R11, <#[R10]> */
		/* 8217DE78h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8217DE78h case   23:*/		return 0x8217DE7C;
		  /* 8217DE7Ch */ case   24:  		/* cmplwi CR6, R11, 0 */
		/* 8217DE7Ch case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217DE7Ch case   24:*/		return 0x8217DE80;
		  /* 8217DE80h */ case   25:  		/* bc 12, CR6_EQ, 20 */
		/* 8217DE80h case   25:*/		if ( regs.CR[6].eq ) { return 0x8217DE94;  }
		/* 8217DE80h case   25:*/		return 0x8217DE84;
		  /* 8217DE84h */ case   26:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217DE84h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217DE84h case   26:*/		return 0x8217DE88;
		  /* 8217DE88h */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 8217DE88h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217DE88h case   27:*/		return 0x8217DE8C;
		  /* 8217DE8Ch */ case   28:  		/* li R11, 1 */
		/* 8217DE8Ch case   28:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217DE8Ch case   28:*/		return 0x8217DE90;
		  /* 8217DE90h */ case   29:  		/* bc 4, CR6_EQ, 8 */
		/* 8217DE90h case   29:*/		if ( !regs.CR[6].eq ) { return 0x8217DE98;  }
		/* 8217DE90h case   29:*/		return 0x8217DE94;
	}
	return 0x8217DE94;
} // Block from 8217DE1Ch-8217DE94h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8217DE94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DE94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DE94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DE94);
		  /* 8217DE94h */ case    0:  		/* li R11, 0 */
		/* 8217DE94h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217DE94h case    0:*/		return 0x8217DE98;
	}
	return 0x8217DE98;
} // Block from 8217DE94h-8217DE98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217DE98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DE98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DE98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DE98);
		  /* 8217DE98h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217DE98h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217DE98h case    0:*/		return 0x8217DE9C;
		  /* 8217DE9Ch */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 8217DE9Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217DEB8;  }
		/* 8217DE9Ch case    1:*/		return 0x8217DEA0;
	}
	return 0x8217DEA0;
} // Block from 8217DE98h-8217DEA0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217DEA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DEA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DEA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DEA0);
		  /* 8217DEA0h */ case    0:  		/* mr R3, R19 */
		/* 8217DEA0h case    0:*/		regs.R3 = regs.R19;
		/* 8217DEA0h case    0:*/		return 0x8217DEA4;
		  /* 8217DEA4h */ case    1:  		/* lhz R4, <#[R10 + 18]> */
		/* 8217DEA4h case    1:*/		cpu::mem::load16z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000012) );
		/* 8217DEA4h case    1:*/		return 0x8217DEA8;
		  /* 8217DEA8h */ case    2:  		/* bl 23224 */
		/* 8217DEA8h case    2:*/		regs.LR = 0x8217DEAC; return 0x82183960;
		/* 8217DEA8h case    2:*/		return 0x8217DEAC;
		  /* 8217DEACh */ case    3:  		/* cmplw CR6, R3, R29 */
		/* 8217DEACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R29);
		/* 8217DEACh case    3:*/		return 0x8217DEB0;
		  /* 8217DEB0h */ case    4:  		/* bc 4, CR6_EQ, 8 */
		/* 8217DEB0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x8217DEB8;  }
		/* 8217DEB0h case    4:*/		return 0x8217DEB4;
		  /* 8217DEB4h */ case    5:  		/* li R25, 1 */
		/* 8217DEB4h case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 8217DEB4h case    5:*/		return 0x8217DEB8;
	}
	return 0x8217DEB8;
} // Block from 8217DEA0h-8217DEB8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217DEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DEB8);
		  /* 8217DEB8h */ case    0:  		/* addi R31, R31, 1 */
		/* 8217DEB8h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 8217DEB8h case    0:*/		return 0x8217DEBC;
		  /* 8217DEBCh */ case    1:  		/* addi R30, R30, 4 */
		/* 8217DEBCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 8217DEBCh case    1:*/		return 0x8217DEC0;
		  /* 8217DEC0h */ case    2:  		/* b -120 */
		/* 8217DEC0h case    2:*/		return 0x8217DE48;
		/* 8217DEC0h case    2:*/		return 0x8217DEC4;
	}
	return 0x8217DEC4;
} // Block from 8217DEB8h-8217DEC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217DEC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DEC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DEC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DEC4);
		  /* 8217DEC4h */ case    0:  		/* addi R26, R26, 1 */
		/* 8217DEC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 8217DEC4h case    0:*/		return 0x8217DEC8;
		  /* 8217DEC8h */ case    1:  		/* addi R27, R27, 4 */
		/* 8217DEC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 8217DEC8h case    1:*/		return 0x8217DECC;
		  /* 8217DECCh */ case    2:  		/* b -280 */
		/* 8217DECCh case    2:*/		return 0x8217DDB4;
		/* 8217DECCh case    2:*/		return 0x8217DED0;
	}
	return 0x8217DED0;
} // Block from 8217DEC4h-8217DED0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217DED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DED0);
		  /* 8217DED0h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 8217DED0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 8217DED0h case    0:*/		return 0x8217DED4;
		  /* 8217DED4h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8217DED4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217DEE4;  }
		/* 8217DED4h case    1:*/		return 0x8217DED8;
		  /* 8217DED8h */ case    2:  		/* lwz R11, <#[R16]> */
		/* 8217DED8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8217DED8h case    2:*/		return 0x8217DEDC;
		  /* 8217DEDCh */ case    3:  		/* addi R11, R11, 1 */
		/* 8217DEDCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217DEDCh case    3:*/		return 0x8217DEE0;
		  /* 8217DEE0h */ case    4:  		/* stw R11, <#[R16]> */
		/* 8217DEE0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 8217DEE0h case    4:*/		return 0x8217DEE4;
	}
	return 0x8217DEE4;
} // Block from 8217DED0h-8217DEE4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217DEE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DEE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DEE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DEE4);
		  /* 8217DEE4h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8217DEE4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8217DEE4h case    0:*/		return 0x8217DEE8;
		  /* 8217DEE8h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217DEE8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217DEE8h case    1:*/		return 0x8217DEEC;
		  /* 8217DEECh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DEECh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DEECh case    2:*/		return 0x8217DEF0;
		  /* 8217DEF0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217DEF0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217DF00;  }
		/* 8217DEF0h case    3:*/		return 0x8217DEF4;
		  /* 8217DEF4h */ case    4:  		/* mr R28, R11 */
		/* 8217DEF4h case    4:*/		regs.R28 = regs.R11;
		/* 8217DEF4h case    4:*/		return 0x8217DEF8;
		  /* 8217DEF8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217DEF8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217DEF8h case    5:*/		return 0x8217DEFC;
		  /* 8217DEFCh */ case    6:  		/* bc 4, CR6_EQ, -356 */
		/* 8217DEFCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217DD98;  }
		/* 8217DEFCh case    6:*/		return 0x8217DF00;
	}
	return 0x8217DF00;
} // Block from 8217DEE4h-8217DF00h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217DF00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DF00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DF00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DF00);
		  /* 8217DF00h */ case    0:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 8217DF00h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 8217DF00h case    0:*/		return 0x8217DF04;
		  /* 8217DF04h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217DF04h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217DF04h case    1:*/		return 0x8217DF08;
		  /* 8217DF08h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217DF08h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217DF08h case    2:*/		return 0x8217DF0C;
		  /* 8217DF0Ch */ case    3:  		/* bc 4, CR0_EQ, 24 */
		/* 8217DF0Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217DF24;  }
		/* 8217DF0Ch case    3:*/		return 0x8217DF10;
		  /* 8217DF10h */ case    4:  		/* mr R23, R11 */
		/* 8217DF10h case    4:*/		regs.R23 = regs.R11;
		/* 8217DF10h case    4:*/		return 0x8217DF14;
		  /* 8217DF14h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217DF14h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217DF14h case    5:*/		return 0x8217DF18;
		  /* 8217DF18h */ case    6:  		/* bc 4, CR6_EQ, -760 */
		/* 8217DF18h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217DC20;  }
		/* 8217DF18h case    6:*/		return 0x8217DF1C;
		  /* 8217DF1Ch */ case    7:  		/* b 8 */
		/* 8217DF1Ch case    7:*/		return 0x8217DF24;
		/* 8217DF1Ch case    7:*/		return 0x8217DF20;
	}
	return 0x8217DF20;
} // Block from 8217DF00h-8217DF20h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217DF20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DF20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DF20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DF20);
		  /* 8217DF20h */ case    0:  		/* li R18, 0 */
		/* 8217DF20h case    0:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 8217DF20h case    0:*/		return 0x8217DF24;
	}
	return 0x8217DF24;
} // Block from 8217DF20h-8217DF24h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217DF24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DF24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DF24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DF24);
		  /* 8217DF24h */ case    0:  		/* mr R3, R21 */
		/* 8217DF24h case    0:*/		regs.R3 = regs.R21;
		/* 8217DF24h case    0:*/		return 0x8217DF28;
		  /* 8217DF28h */ case    1:  		/* bl 473784 */
		/* 8217DF28h case    1:*/		regs.LR = 0x8217DF2C; return 0x821F19E0;
		/* 8217DF28h case    1:*/		return 0x8217DF2C;
		  /* 8217DF2Ch */ case    2:  		/* addi R11, R19, 972 */
		/* 8217DF2Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R19,0x3CC);
		/* 8217DF2Ch case    2:*/		return 0x8217DF30;
		  /* 8217DF30h */ case    3:  		/* mr R3, R18 */
		/* 8217DF30h case    3:*/		regs.R3 = regs.R18;
		/* 8217DF30h case    3:*/		return 0x8217DF34;
		  /* 8217DF34h */ case    4:  		/* lwz R11, <#[R19 + 976]> */
		/* 8217DF34h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x000003D0) );
		/* 8217DF34h case    4:*/		return 0x8217DF38;
		  /* 8217DF38h */ case    5:  		/* stw R11, <#[R21]> */
		/* 8217DF38h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 8217DF38h case    5:*/		return 0x8217DF3C;
		  /* 8217DF3Ch */ case    6:  		/* stw R21, <#[R19 + 976]> */
		/* 8217DF3Ch case    6:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R19 + 0x000003D0) );
		/* 8217DF3Ch case    6:*/		return 0x8217DF40;
		  /* 8217DF40h */ case    7:  		/* b 8 */
		/* 8217DF40h case    7:*/		return 0x8217DF48;
		/* 8217DF40h case    7:*/		return 0x8217DF44;
	}
	return 0x8217DF44;
} // Block from 8217DF24h-8217DF44h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217DF44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DF44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DF44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DF44);
		  /* 8217DF44h */ case    0:  		/* li R3, 0 */
		/* 8217DF44h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217DF44h case    0:*/		return 0x8217DF48;
	}
	return 0x8217DF48;
} // Block from 8217DF44h-8217DF48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217DF48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DF48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DF48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DF48);
		  /* 8217DF48h */ case    0:  		/* addi R1, R1, 272 */
		/* 8217DF48h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 8217DF48h case    0:*/		return 0x8217DF4C;
		  /* 8217DF4Ch */ case    1:  		/* b -969944 */
		/* 8217DF4Ch case    1:*/		return 0x82091274;
		/* 8217DF4Ch case    1:*/		return 0x8217DF50;
	}
	return 0x8217DF50;
} // Block from 8217DF48h-8217DF50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217DF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DF50);
		  /* 8217DF50h */ case    0:  		/* mfspr R12, LR */
		/* 8217DF50h case    0:*/		regs.R12 = regs.LR;
		/* 8217DF50h case    0:*/		return 0x8217DF54;
		  /* 8217DF54h */ case    1:  		/* bl -969976 */
		/* 8217DF54h case    1:*/		regs.LR = 0x8217DF58; return 0x8209125C;
		/* 8217DF54h case    1:*/		return 0x8217DF58;
		  /* 8217DF58h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 8217DF58h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 8217DF58h case    2:*/		return 0x8217DF5C;
		  /* 8217DF5Ch */ case    3:  		/* lwz R11, <#[R4 + 8]> */
		/* 8217DF5Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8217DF5Ch case    3:*/		return 0x8217DF60;
		  /* 8217DF60h */ case    4:  		/* mr R30, R3 */
		/* 8217DF60h case    4:*/		regs.R30 = regs.R3;
		/* 8217DF60h case    4:*/		return 0x8217DF64;
		  /* 8217DF64h */ case    5:  		/* mr R31, R4 */
		/* 8217DF64h case    5:*/		regs.R31 = regs.R4;
		/* 8217DF64h case    5:*/		return 0x8217DF68;
		  /* 8217DF68h */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217DF68h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217DF68h case    6:*/		return 0x8217DF6C;
		  /* 8217DF6Ch */ case    7:  		/* mr R29, R5 */
		/* 8217DF6Ch case    7:*/		regs.R29 = regs.R5;
		/* 8217DF6Ch case    7:*/		return 0x8217DF70;
		  /* 8217DF70h */ case    8:  		/* cmplwi CR6, R11, 86 */
		/* 8217DF70h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8217DF70h case    8:*/		return 0x8217DF74;
		  /* 8217DF74h */ case    9:  		/* bc 12, CR6_EQ, 48 */
		/* 8217DF74h case    9:*/		if ( regs.CR[6].eq ) { return 0x8217DFA4;  }
		/* 8217DF74h case    9:*/		return 0x8217DF78;
		  /* 8217DF78h */ case   10:  		/* cmplwi CR6, R11, 87 */
		/* 8217DF78h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8217DF78h case   10:*/		return 0x8217DF7C;
		  /* 8217DF7Ch */ case   11:  		/* bc 12, CR6_EQ, 40 */
		/* 8217DF7Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x8217DFA4;  }
		/* 8217DF7Ch case   11:*/		return 0x8217DF80;
		  /* 8217DF80h */ case   12:  		/* cmplwi CR6, R11, 89 */
		/* 8217DF80h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8217DF80h case   12:*/		return 0x8217DF84;
		  /* 8217DF84h */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 8217DF84h case   13:*/		if ( regs.CR[6].eq ) { return 0x8217DFA4;  }
		/* 8217DF84h case   13:*/		return 0x8217DF88;
		  /* 8217DF88h */ case   14:  		/* cmplwi CR6, R11, 90 */
		/* 8217DF88h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8217DF88h case   14:*/		return 0x8217DF8C;
		  /* 8217DF8Ch */ case   15:  		/* bc 12, CR6_EQ, 24 */
		/* 8217DF8Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8217DFA4;  }
		/* 8217DF8Ch case   15:*/		return 0x8217DF90;
		  /* 8217DF90h */ case   16:  		/* cmplwi CR6, R11, 84 */
		/* 8217DF90h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8217DF90h case   16:*/		return 0x8217DF94;
		  /* 8217DF94h */ case   17:  		/* bc 12, CR6_EQ, 16 */
		/* 8217DF94h case   17:*/		if ( regs.CR[6].eq ) { return 0x8217DFA4;  }
		/* 8217DF94h case   17:*/		return 0x8217DF98;
		  /* 8217DF98h */ case   18:  		/* cmplwi CR6, R11, 85 */
		/* 8217DF98h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8217DF98h case   18:*/		return 0x8217DF9C;
		  /* 8217DF9Ch */ case   19:  		/* li R11, 0 */
		/* 8217DF9Ch case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217DF9Ch case   19:*/		return 0x8217DFA0;
		  /* 8217DFA0h */ case   20:  		/* bc 4, CR6_EQ, 8 */
		/* 8217DFA0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8217DFA8;  }
		/* 8217DFA0h case   20:*/		return 0x8217DFA4;
	}
	return 0x8217DFA4;
} // Block from 8217DF50h-8217DFA4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8217DFA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DFA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DFA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DFA4);
		  /* 8217DFA4h */ case    0:  		/* li R11, 1 */
		/* 8217DFA4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217DFA4h case    0:*/		return 0x8217DFA8;
	}
	return 0x8217DFA8;
} // Block from 8217DFA4h-8217DFA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217DFA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DFA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DFA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DFA8);
		  /* 8217DFA8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217DFA8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217DFA8h case    0:*/		return 0x8217DFAC;
		  /* 8217DFACh */ case    1:  		/* bc 12, CR0_EQ, 44 */
		/* 8217DFACh case    1:*/		if ( regs.CR[0].eq ) { return 0x8217DFD8;  }
		/* 8217DFACh case    1:*/		return 0x8217DFB0;
		  /* 8217DFB0h */ case    2:  		/* mr R4, R30 */
		/* 8217DFB0h case    2:*/		regs.R4 = regs.R30;
		/* 8217DFB0h case    2:*/		return 0x8217DFB4;
		  /* 8217DFB4h */ case    3:  		/* mr R3, R31 */
		/* 8217DFB4h case    3:*/		regs.R3 = regs.R31;
		/* 8217DFB4h case    3:*/		return 0x8217DFB8;
		  /* 8217DFB8h */ case    4:  		/* bl -104496 */
		/* 8217DFB8h case    4:*/		regs.LR = 0x8217DFBC; return 0x82164788;
		/* 8217DFB8h case    4:*/		return 0x8217DFBC;
		  /* 8217DFBCh */ case    5:  		/* cmpwi CR6, R3, 8 */
		/* 8217DFBCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000008);
		/* 8217DFBCh case    5:*/		return 0x8217DFC0;
		  /* 8217DFC0h */ case    6:  		/* bc 12, CR6_EQ, 120 */
		/* 8217DFC0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217E038;  }
		/* 8217DFC0h case    6:*/		return 0x8217DFC4;
		  /* 8217DFC4h */ case    7:  		/* cmpwi CR6, R3, 9 */
		/* 8217DFC4h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000009);
		/* 8217DFC4h case    7:*/		return 0x8217DFC8;
		  /* 8217DFC8h */ case    8:  		/* bc 12, CR6_EQ, 112 */
		/* 8217DFC8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8217E038;  }
		/* 8217DFC8h case    8:*/		return 0x8217DFCC;
		  /* 8217DFCCh */ case    9:  		/* lwz R11, <#[R30 + 40]> */
		/* 8217DFCCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 8217DFCCh case    9:*/		return 0x8217DFD0;
		  /* 8217DFD0h */ case   10:  		/* ori R11, R11, 256 */
		/* 8217DFD0h case   10:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8217DFD0h case   10:*/		return 0x8217DFD4;
		  /* 8217DFD4h */ case   11:  		/* stw R11, <#[R30 + 40]> */
		/* 8217DFD4h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000028) );
		/* 8217DFD4h case   11:*/		return 0x8217DFD8;
	}
	return 0x8217DFD8;
} // Block from 8217DFA8h-8217DFD8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217DFD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217DFD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217DFD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217DFD8);
		  /* 8217DFD8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217DFD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217DFD8h case    0:*/		return 0x8217DFDC;
		  /* 8217DFDCh */ case    1:  		/* oris R11, R11, 2048 */
		/* 8217DFDCh case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 8217DFDCh case    1:*/		return 0x8217DFE0;
		  /* 8217DFE0h */ case    2:  		/* stw R11, <#[R31 + 8]> */
		/* 8217DFE0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217DFE0h case    2:*/		return 0x8217DFE4;
		  /* 8217DFE4h */ case    3:  		/* lwz R11, <#[R29 + 4]> */
		/* 8217DFE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 8217DFE4h case    3:*/		return 0x8217DFE8;
		  /* 8217DFE8h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217DFE8h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217DFE8h case    4:*/		return 0x8217DFEC;
		  /* 8217DFECh */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 8217DFECh case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217E014;  }
		/* 8217DFECh case    5:*/		return 0x8217DFF0;
		  /* 8217DFF0h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 8217DFF0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8217DFF0h case    6:*/		return 0x8217DFF4;
		  /* 8217DFF4h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217DFF4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217DFF4h case    7:*/		return 0x8217DFF8;
		  /* 8217DFF8h */ case    8:  		/* addic. R3, R11, -4 */
		/* 8217DFF8h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8217DFF8h case    8:*/		return 0x8217DFFC;
		  /* 8217DFFCh */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 8217DFFCh case    9:*/		if ( regs.CR[0].eq ) { return 0x8217E014;  }
		/* 8217DFFCh case    9:*/		return 0x8217E000;
		  /* 8217E000h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217E000h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E000h case   10:*/		return 0x8217E004;
		  /* 8217E004h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 8217E004h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217E004h case   11:*/		return 0x8217E008;
		  /* 8217E008h */ case   12:  		/* addi R11, R11, 1 */
		/* 8217E008h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217E008h case   12:*/		return 0x8217E00C;
		  /* 8217E00Ch */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8217E00Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217E00Ch case   13:*/		return 0x8217E010;
		  /* 8217E010h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 8217E010h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8217E020;  }
		/* 8217E010h case   14:*/		return 0x8217E014;
	}
	return 0x8217E014;
} // Block from 8217DFD8h-8217E014h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217E014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E014);
		  /* 8217E014h */ case    0:  		/* li R4, 1 */
		/* 8217E014h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217E014h case    0:*/		return 0x8217E018;
		  /* 8217E018h */ case    1:  		/* mr R3, R29 */
		/* 8217E018h case    1:*/		regs.R3 = regs.R29;
		/* 8217E018h case    1:*/		return 0x8217E01C;
		  /* 8217E01Ch */ case    2:  		/* bl 61612 */
		/* 8217E01Ch case    2:*/		regs.LR = 0x8217E020; return 0x8218D0C8;
		/* 8217E01Ch case    2:*/		return 0x8217E020;
	}
	return 0x8217E020;
} // Block from 8217E014h-8217E020h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217E020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E020);
		  /* 8217E020h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217E020h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E020h case    0:*/		return 0x8217E024;
		  /* 8217E024h */ case    1:  		/* addi R10, R11, 4 */
		/* 8217E024h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217E024h case    1:*/		return 0x8217E028;
		  /* 8217E028h */ case    2:  		/* addi R9, R11, 1 */
		/* 8217E028h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8217E028h case    2:*/		return 0x8217E02C;
		  /* 8217E02Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8217E02Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8217E02Ch case    3:*/		return 0x8217E030;
		  /* 8217E030h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8217E030h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E030h case    4:*/		return 0x8217E034;
		  /* 8217E034h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8217E034h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8217E034h case    5:*/		return 0x8217E038;
	}
	return 0x8217E038;
} // Block from 8217E020h-8217E038h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217E038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E038);
		  /* 8217E038h */ case    0:  		/* addi R1, R1, 112 */
		/* 8217E038h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 8217E038h case    0:*/		return 0x8217E03C;
		  /* 8217E03Ch */ case    1:  		/* b -970128 */
		/* 8217E03Ch case    1:*/		return 0x820912AC;
		/* 8217E03Ch case    1:*/		return 0x8217E040;
	}
	return 0x8217E040;
} // Block from 8217E038h-8217E040h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E040);
		  /* 8217E040h */ case    0:  		/* mfspr R12, LR */
		/* 8217E040h case    0:*/		regs.R12 = regs.LR;
		/* 8217E040h case    0:*/		return 0x8217E044;
		  /* 8217E044h */ case    1:  		/* bl -970232 */
		/* 8217E044h case    1:*/		regs.LR = 0x8217E048; return 0x8209124C;
		/* 8217E044h case    1:*/		return 0x8217E048;
		  /* 8217E048h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 8217E048h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 8217E048h case    2:*/		return 0x8217E04C;
		  /* 8217E04Ch */ case    3:  		/* lwz R11, <#[R4 + 20]> */
		/* 8217E04Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 8217E04Ch case    3:*/		return 0x8217E050;
		  /* 8217E050h */ case    4:  		/* mr R27, R4 */
		/* 8217E050h case    4:*/		regs.R27 = regs.R4;
		/* 8217E050h case    4:*/		return 0x8217E054;
		  /* 8217E054h */ case    5:  		/* mr R25, R5 */
		/* 8217E054h case    5:*/		regs.R25 = regs.R5;
		/* 8217E054h case    5:*/		return 0x8217E058;
		  /* 8217E058h */ case    6:  		/* mr R26, R6 */
		/* 8217E058h case    6:*/		regs.R26 = regs.R6;
		/* 8217E058h case    6:*/		return 0x8217E05C;
		  /* 8217E05Ch */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217E05Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217E05Ch case    7:*/		return 0x8217E060;
		  /* 8217E060h */ case    8:  		/* bc 12, CR0_EQ, 56 */
		/* 8217E060h case    8:*/		if ( regs.CR[0].eq ) { return 0x8217E098;  }
		/* 8217E060h case    8:*/		return 0x8217E064;
		  /* 8217E064h */ case    9:  		/* lwz R11, <#[R4 + 28]> */
		/* 8217E064h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 8217E064h case    9:*/		return 0x8217E068;
		  /* 8217E068h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217E068h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217E068h case   10:*/		return 0x8217E06C;
		  /* 8217E06Ch */ case   11:  		/* bc 12, CR0_EQ, 16 */
		/* 8217E06Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8217E07C;  }
		/* 8217E06Ch case   11:*/		return 0x8217E070;
		  /* 8217E070h */ case   12:  		/* lwz R11, <#[R4 + 36]> */
		/* 8217E070h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000024) );
		/* 8217E070h case   12:*/		return 0x8217E074;
		  /* 8217E074h */ case   13:  		/* addi R29, R4, 32 */
		/* 8217E074h case   13:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R4,0x20);
		/* 8217E074h case   13:*/		return 0x8217E078;
		  /* 8217E078h */ case   14:  		/* b 12 */
		/* 8217E078h case   14:*/		return 0x8217E084;
		/* 8217E078h case   14:*/		return 0x8217E07C;
	}
	return 0x8217E07C;
} // Block from 8217E040h-8217E07Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217E07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E07C);
		  /* 8217E07Ch */ case    0:  		/* lwz R11, <#[R27 + 28]> */
		/* 8217E07Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217E07Ch case    0:*/		return 0x8217E080;
		  /* 8217E080h */ case    1:  		/* addi R29, R27, 24 */
		/* 8217E080h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x18);
		/* 8217E080h case    1:*/		return 0x8217E084;
	}
	return 0x8217E084;
} // Block from 8217E07Ch-8217E084h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E084h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E084( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E084) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E084);
		  /* 8217E084h */ case    0:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217E084h case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E084h case    0:*/		return 0x8217E088;
		  /* 8217E088h */ case    1:  		/* addic R10, R10, -1 */
		/* 8217E088h case    1:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217E088h case    1:*/		return 0x8217E08C;
		  /* 8217E08Ch */ case    2:  		/* subfe R10, R10, R10 */
		/* 8217E08Ch case    2:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217E08Ch case    2:*/		return 0x8217E090;
		  /* 8217E090h */ case    3:  		/* and R30, R10, R11 */
		/* 8217E090h case    3:*/		cpu::op::and<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 8217E090h case    3:*/		return 0x8217E094;
		  /* 8217E094h */ case    4:  		/* b 372 */
		/* 8217E094h case    4:*/		return 0x8217E208;
		/* 8217E094h case    4:*/		return 0x8217E098;
	}
	return 0x8217E098;
} // Block from 8217E084h-8217E098h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217E098h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E098);
		  /* 8217E098h */ case    0:  		/* lwz R10, <#[R27 + 20]> */
		/* 8217E098h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000014) );
		/* 8217E098h case    0:*/		return 0x8217E09C;
		  /* 8217E09Ch */ case    1:  		/* addi R29, R27, 16 */
		/* 8217E09Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x10);
		/* 8217E09Ch case    1:*/		return 0x8217E0A0;
		  /* 8217E0A0h */ case    2:  		/* rlwinm R9, R10, 0, 31, 31 */
		/* 8217E0A0h case    2:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R10);
		/* 8217E0A0h case    2:*/		return 0x8217E0A4;
		  /* 8217E0A4h */ case    3:  		/* addic R11, R9, -1 */
		/* 8217E0A4h case    3:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R9,0xFFFFFFFF);
		/* 8217E0A4h case    3:*/		return 0x8217E0A8;
		  /* 8217E0A8h */ case    4:  		/* subfe R11, R11, R11 */
		/* 8217E0A8h case    4:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8217E0A8h case    4:*/		return 0x8217E0AC;
		  /* 8217E0ACh */ case    5:  		/* and R30, R11, R10 */
		/* 8217E0ACh case    5:*/		cpu::op::and<0>(regs,&regs.R30,regs.R11,regs.R10);
		/* 8217E0ACh case    5:*/		return 0x8217E0B0;
		  /* 8217E0B0h */ case    6:  		/* b 344 */
		/* 8217E0B0h case    6:*/		return 0x8217E208;
		/* 8217E0B0h case    6:*/		return 0x8217E0B4;
		  /* 8217E0B4h */ case    7:  		/* lwz R28, <#[R30 + 4]> */
		/* 8217E0B4h case    7:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000004) );
		/* 8217E0B4h case    7:*/		return 0x8217E0B8;
		  /* 8217E0B8h */ case    8:  		/* cmplwi CR6, R28, 0 */
		/* 8217E0B8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8217E0B8h case    8:*/		return 0x8217E0BC;
		  /* 8217E0BCh */ case    9:  		/* bc 12, CR6_EQ, 224 */
		/* 8217E0BCh case    9:*/		if ( regs.CR[6].eq ) { return 0x8217E19C;  }
		/* 8217E0BCh case    9:*/		return 0x8217E0C0;
		  /* 8217E0C0h */ case   10:  		/* lwz R31, <#[R28 + 16]> */
		/* 8217E0C0h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000010) );
		/* 8217E0C0h case   10:*/		return 0x8217E0C4;
		  /* 8217E0C4h */ case   11:  		/* cmplwi CR6, R31, 0 */
		/* 8217E0C4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217E0C4h case   11:*/		return 0x8217E0C8;
		  /* 8217E0C8h */ case   12:  		/* bc 12, CR6_EQ, 204 */
		/* 8217E0C8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8217E194;  }
		/* 8217E0C8h case   12:*/		return 0x8217E0CC;
		  /* 8217E0CCh */ case   13:  		/* lwz R11, <#[R28]> */
		/* 8217E0CCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 8217E0CCh case   13:*/		return 0x8217E0D0;
		  /* 8217E0D0h */ case   14:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8217E0D0h case   14:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8217E0D0h case   14:*/		return 0x8217E0D4;
		  /* 8217E0D4h */ case   15:  		/* bc 12, CR0_EQ, 192 */
		/* 8217E0D4h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217E194;  }
		/* 8217E0D4h case   15:*/		return 0x8217E0D8;
		  /* 8217E0D8h */ case   16:  		/* lwz R9, <#[R31 + 8]> */
		/* 8217E0D8h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 8217E0D8h case   16:*/		return 0x8217E0DC;
		  /* 8217E0DCh */ case   17:  		/* rlwinm R11, R9, 0, 18, 24 */
		/* 8217E0DCh case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R9);
		/* 8217E0DCh case   17:*/		return 0x8217E0E0;
		  /* 8217E0E0h */ case   18:  		/* cmplwi CR6, R11, 14336 */
		/* 8217E0E0h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8217E0E0h case   18:*/		return 0x8217E0E4;
		  /* 8217E0E4h */ case   19:  		/* bc 4, CR6_EQ, 176 */
		/* 8217E0E4h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8217E194;  }
		/* 8217E0E4h case   19:*/		return 0x8217E0E8;
		  /* 8217E0E8h */ case   20:  		/* rlwinm. R11, R9, 5, 31, 31 */
		/* 8217E0E8h case   20:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R9);
		/* 8217E0E8h case   20:*/		return 0x8217E0EC;
		  /* 8217E0ECh */ case   21:  		/* bc 4, CR0_EQ, 168 */
		/* 8217E0ECh case   21:*/		if ( !regs.CR[0].eq ) { return 0x8217E194;  }
		/* 8217E0ECh case   21:*/		return 0x8217E0F0;
		  /* 8217E0F0h */ case   22:  		/* lwz R11, <#[R31 + 28]> */
		/* 8217E0F0h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 8217E0F0h case   22:*/		return 0x8217E0F4;
		  /* 8217E0F4h */ case   23:  		/* li R10, 1 */
		/* 8217E0F4h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 8217E0F4h case   23:*/		return 0x8217E0F8;
		  /* 8217E0F8h */ case   24:  		/* lwz R8, <#[R25 + 48]> */
		/* 8217E0F8h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000030) );
		/* 8217E0F8h case   24:*/		return 0x8217E0FC;
		  /* 8217E0FCh */ case   25:  		/* rlwinm R8, R8, 0, 13, 31 */
		/* 8217E0FCh case   25:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R8,regs.R8);
		/* 8217E0FCh case   25:*/		return 0x8217E100;
		  /* 8217E100h */ case   26:  		/* lwz R7, <#[R11 + 40]> */
		/* 8217E100h case   26:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000028) );
		/* 8217E100h case   26:*/		return 0x8217E104;
		  /* 8217E104h */ case   27:  		/* rlwinm R11, R8, 27, 5, 31 */
		/* 8217E104h case   27:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R8);
		/* 8217E104h case   27:*/		return 0x8217E108;
		  /* 8217E108h */ case   28:  		/* rlwinm R8, R8, 0, 27, 31 */
		/* 8217E108h case   28:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R8);
		/* 8217E108h case   28:*/		return 0x8217E10C;
		  /* 8217E10Ch */ case   29:  		/* addi R11, R11, 1 */
		/* 8217E10Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217E10Ch case   29:*/		return 0x8217E110;
		  /* 8217E110h */ case   30:  		/* slw R8, R10, R8 */
		/* 8217E110h case   30:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R10,regs.R8);
		/* 8217E110h case   30:*/		return 0x8217E114;
		  /* 8217E114h */ case   31:  		/* lwz R6, <#[R7]> */
		/* 8217E114h case   31:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 8217E114h case   31:*/		return 0x8217E118;
		  /* 8217E118h */ case   32:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 8217E118h case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 8217E118h case   32:*/		return 0x8217E11C;
		  /* 8217E11Ch */ case   33:  		/* rlwinm R11, R6, 0, 13, 31 */
		/* 8217E11Ch case   33:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R6);
		/* 8217E11Ch case   33:*/		return 0x8217E120;
		  /* 8217E120h */ case   34:  		/* addi R11, R11, 31 */
		/* 8217E120h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 8217E120h case   34:*/		return 0x8217E124;
		  /* 8217E124h */ case   35:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 8217E124h case   35:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 8217E124h case   35:*/		return 0x8217E128;
		  /* 8217E128h */ case   36:  		/* add R11, R11, R10 */
		/* 8217E128h case   36:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8217E128h case   36:*/		return 0x8217E12C;
		  /* 8217E12Ch */ case   37:  		/* lwzx R11, <#[R11 + R7]> */
		/* 8217E12Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 8217E12Ch case   37:*/		return 0x8217E130;
		  /* 8217E130h */ case   38:  		/* and. R11, R11, R8 */
		/* 8217E130h case   38:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8217E130h case   38:*/		return 0x8217E134;
		  /* 8217E134h */ case   39:  		/* bc 4, CR0_EQ, 96 */
		/* 8217E134h case   39:*/		if ( !regs.CR[0].eq ) { return 0x8217E194;  }
		/* 8217E134h case   39:*/		return 0x8217E138;
		  /* 8217E138h */ case   40:  		/* oris R11, R9, 2048 */
		/* 8217E138h case   40:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R9,0x800);
		/* 8217E138h case   40:*/		return 0x8217E13C;
		  /* 8217E13Ch */ case   41:  		/* stw R11, <#[R31 + 8]> */
		/* 8217E13Ch case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217E13Ch case   41:*/		return 0x8217E140;
		  /* 8217E140h */ case   42:  		/* lwz R11, <#[R26 + 4]> */
		/* 8217E140h case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 8217E140h case   42:*/		return 0x8217E144;
		  /* 8217E144h */ case   43:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217E144h case   43:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217E144h case   43:*/		return 0x8217E148;
		  /* 8217E148h */ case   44:  		/* bc 4, CR0_EQ, 40 */
		/* 8217E148h case   44:*/		if ( !regs.CR[0].eq ) { return 0x8217E170;  }
		/* 8217E148h case   44:*/		return 0x8217E14C;
		  /* 8217E14Ch */ case   45:  		/* lwz R11, <#[R26]> */
		/* 8217E14Ch case   45:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8217E14Ch case   45:*/		return 0x8217E150;
		  /* 8217E150h */ case   46:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217E150h case   46:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217E150h case   46:*/		return 0x8217E154;
		  /* 8217E154h */ case   47:  		/* addic. R3, R11, -4 */
		/* 8217E154h case   47:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8217E154h case   47:*/		return 0x8217E158;
		  /* 8217E158h */ case   48:  		/* bc 12, CR0_EQ, 24 */
		/* 8217E158h case   48:*/		if ( regs.CR[0].eq ) { return 0x8217E170;  }
		/* 8217E158h case   48:*/		return 0x8217E15C;
		  /* 8217E15Ch */ case   49:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217E15Ch case   49:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E15Ch case   49:*/		return 0x8217E160;
		  /* 8217E160h */ case   50:  		/* lwz R10, <#[R3 + 12]> */
		/* 8217E160h case   50:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217E160h case   50:*/		return 0x8217E164;
		  /* 8217E164h */ case   51:  		/* addi R11, R11, 1 */
		/* 8217E164h case   51:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217E164h case   51:*/		return 0x8217E168;
		  /* 8217E168h */ case   52:  		/* cmplw CR6, R11, R10 */
		/* 8217E168h case   52:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217E168h case   52:*/		return 0x8217E16C;
		  /* 8217E16Ch */ case   53:  		/* bc 4, CR6_GT, 16 */
		/* 8217E16Ch case   53:*/		if ( !regs.CR[6].gt ) { return 0x8217E17C;  }
		/* 8217E16Ch case   53:*/		return 0x8217E170;
	}
	return 0x8217E170;
} // Block from 8217E098h-8217E170h (54 instructions)

//////////////////////////////////////////////////////
// Block at 8217E170h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E170( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E170) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E170);
		  /* 8217E170h */ case    0:  		/* li R4, 1 */
		/* 8217E170h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217E170h case    0:*/		return 0x8217E174;
		  /* 8217E174h */ case    1:  		/* mr R3, R26 */
		/* 8217E174h case    1:*/		regs.R3 = regs.R26;
		/* 8217E174h case    1:*/		return 0x8217E178;
		  /* 8217E178h */ case    2:  		/* bl 61264 */
		/* 8217E178h case    2:*/		regs.LR = 0x8217E17C; return 0x8218D0C8;
		/* 8217E178h case    2:*/		return 0x8217E17C;
	}
	return 0x8217E17C;
} // Block from 8217E170h-8217E17Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217E17Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E17C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E17C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E17C);
		  /* 8217E17Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217E17Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E17Ch case    0:*/		return 0x8217E180;
		  /* 8217E180h */ case    1:  		/* addi R10, R11, 4 */
		/* 8217E180h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217E180h case    1:*/		return 0x8217E184;
		  /* 8217E184h */ case    2:  		/* addi R9, R11, 1 */
		/* 8217E184h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8217E184h case    2:*/		return 0x8217E188;
		  /* 8217E188h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8217E188h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8217E188h case    3:*/		return 0x8217E18C;
		  /* 8217E18Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8217E18Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E18Ch case    4:*/		return 0x8217E190;
		  /* 8217E190h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8217E190h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8217E190h case    5:*/		return 0x8217E194;
	}
	return 0x8217E194;
} // Block from 8217E17Ch-8217E194h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217E194h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E194( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E194) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E194);
		  /* 8217E194h */ case    0:  		/* lwz R28, <#[R28 + 8]> */
		/* 8217E194h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R28 + 0x00000008) );
		/* 8217E194h case    0:*/		return 0x8217E198;
		  /* 8217E198h */ case    1:  		/* b -224 */
		/* 8217E198h case    1:*/		return 0x8217E0B8;
		/* 8217E198h case    1:*/		return 0x8217E19C;
	}
	return 0x8217E19C;
} // Block from 8217E194h-8217E19Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E19Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E19C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E19C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E19C);
		  /* 8217E19Ch */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217E19Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217E19Ch case    0:*/		return 0x8217E1A0;
		  /* 8217E1A0h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217E1A0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217E1A0h case    1:*/		return 0x8217E1A4;
		  /* 8217E1A4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E1A4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E1A4h case    2:*/		return 0x8217E1A8;
		  /* 8217E1A8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217E1A8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217E1B8;  }
		/* 8217E1A8h case    3:*/		return 0x8217E1AC;
		  /* 8217E1ACh */ case    4:  		/* mr R30, R11 */
		/* 8217E1ACh case    4:*/		regs.R30 = regs.R11;
		/* 8217E1ACh case    4:*/		return 0x8217E1B0;
		  /* 8217E1B0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217E1B0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E1B0h case    5:*/		return 0x8217E1B4;
		  /* 8217E1B4h */ case    6:  		/* bc 4, CR6_EQ, -256 */
		/* 8217E1B4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217E0B4;  }
		/* 8217E1B4h case    6:*/		return 0x8217E1B8;
	}
	return 0x8217E1B8;
} // Block from 8217E19Ch-8217E1B8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217E1B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E1B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E1B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E1B8);
		  /* 8217E1B8h */ case    0:  		/* addi R10, R27, 32 */
		/* 8217E1B8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R27,0x20);
		/* 8217E1B8h case    0:*/		return 0x8217E1BC;
		  /* 8217E1BCh */ case    1:  		/* cmplw CR6, R29, R10 */
		/* 8217E1BCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 8217E1BCh case    1:*/		return 0x8217E1C0;
		  /* 8217E1C0h */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 8217E1C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217E210;  }
		/* 8217E1C0h case    2:*/		return 0x8217E1C4;
		  /* 8217E1C4h */ case    3:  		/* addi R11, R27, 24 */
		/* 8217E1C4h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x18);
		/* 8217E1C4h case    3:*/		return 0x8217E1C8;
		  /* 8217E1C8h */ case    4:  		/* cmplw CR6, R29, R11 */
		/* 8217E1C8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 8217E1C8h case    4:*/		return 0x8217E1CC;
		  /* 8217E1CCh */ case    5:  		/* bc 12, CR6_EQ, 40 */
		/* 8217E1CCh case    5:*/		if ( regs.CR[6].eq ) { return 0x8217E1F4;  }
		/* 8217E1CCh case    5:*/		return 0x8217E1D0;
		  /* 8217E1D0h */ case    6:  		/* lwz R9, <#[R27 + 28]> */
		/* 8217E1D0h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x0000001C) );
		/* 8217E1D0h case    6:*/		return 0x8217E1D4;
		  /* 8217E1D4h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 8217E1D4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 8217E1D4h case    7:*/		return 0x8217E1D8;
		  /* 8217E1D8h */ case    8:  		/* bc 4, CR0_EQ, 28 */
		/* 8217E1D8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217E1F4;  }
		/* 8217E1D8h case    8:*/		return 0x8217E1DC;
		  /* 8217E1DCh */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217E1DCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217E1DCh case    9:*/		return 0x8217E1E0;
		  /* 8217E1E0h */ case   10:  		/* mr R29, R11 */
		/* 8217E1E0h case   10:*/		regs.R29 = regs.R11;
		/* 8217E1E0h case   10:*/		return 0x8217E1E4;
		  /* 8217E1E4h */ case   11:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 8217E1E4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 8217E1E4h case   11:*/		return 0x8217E1E8;
		  /* 8217E1E8h */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 8217E1E8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x8217E210;  }
		/* 8217E1E8h case   12:*/		return 0x8217E1EC;
		  /* 8217E1ECh */ case   13:  		/* mr R30, R10 */
		/* 8217E1ECh case   13:*/		regs.R30 = regs.R10;
		/* 8217E1ECh case   13:*/		return 0x8217E1F0;
		  /* 8217E1F0h */ case   14:  		/* b 24 */
		/* 8217E1F0h case   14:*/		return 0x8217E208;
		/* 8217E1F0h case   14:*/		return 0x8217E1F4;
	}
	return 0x8217E1F4;
} // Block from 8217E1B8h-8217E1F4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217E1F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E1F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E1F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E1F4);
		  /* 8217E1F4h */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 8217E1F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217E1F4h case    0:*/		return 0x8217E1F8;
		  /* 8217E1F8h */ case    1:  		/* mr R29, R10 */
		/* 8217E1F8h case    1:*/		regs.R29 = regs.R10;
		/* 8217E1F8h case    1:*/		return 0x8217E1FC;
		  /* 8217E1FCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E1FCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E1FCh case    2:*/		return 0x8217E200;
		  /* 8217E200h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217E200h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217E210;  }
		/* 8217E200h case    3:*/		return 0x8217E204;
		  /* 8217E204h */ case    4:  		/* mr R30, R11 */
		/* 8217E204h case    4:*/		regs.R30 = regs.R11;
		/* 8217E204h case    4:*/		return 0x8217E208;
	}
	return 0x8217E208;
} // Block from 8217E1F4h-8217E208h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217E208h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E208( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E208) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E208);
		  /* 8217E208h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8217E208h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217E208h case    0:*/		return 0x8217E20C;
		  /* 8217E20Ch */ case    1:  		/* bc 4, CR6_EQ, -344 */
		/* 8217E20Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217E0B4;  }
		/* 8217E20Ch case    1:*/		return 0x8217E210;
	}
	return 0x8217E210;
} // Block from 8217E208h-8217E210h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E210);
		  /* 8217E210h */ case    0:  		/* addi R1, R1, 144 */
		/* 8217E210h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 8217E210h case    0:*/		return 0x8217E214;
		  /* 8217E214h */ case    1:  		/* b -970616 */
		/* 8217E214h case    1:*/		return 0x8209129C;
		/* 8217E214h case    1:*/		return 0x8217E218;
	}
	return 0x8217E218;
} // Block from 8217E210h-8217E218h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E218);
		  /* 8217E218h */ case    0:  		/* mfspr R12, LR */
		/* 8217E218h case    0:*/		regs.R12 = regs.LR;
		/* 8217E218h case    0:*/		return 0x8217E21C;
		  /* 8217E21Ch */ case    1:  		/* bl -970692 */
		/* 8217E21Ch case    1:*/		regs.LR = 0x8217E220; return 0x82091258;
		/* 8217E21Ch case    1:*/		return 0x8217E220;
		  /* 8217E220h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8217E220h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8217E220h case    2:*/		return 0x8217E224;
		  /* 8217E224h */ case    3:  		/* lwz R11, <#[R3 + 108]> */
		/* 8217E224h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8217E224h case    3:*/		return 0x8217E228;
		  /* 8217E228h */ case    4:  		/* mr R28, R5 */
		/* 8217E228h case    4:*/		regs.R28 = regs.R5;
		/* 8217E228h case    4:*/		return 0x8217E22C;
		  /* 8217E22Ch */ case    5:  		/* li R5, 0 */
		/* 8217E22Ch case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217E22Ch case    5:*/		return 0x8217E230;
		  /* 8217E230h */ case    6:  		/* addi R30, R11, 1 */
		/* 8217E230h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1);
		/* 8217E230h case    6:*/		return 0x8217E234;
		  /* 8217E234h */ case    7:  		/* mr R31, R3 */
		/* 8217E234h case    7:*/		regs.R31 = regs.R3;
		/* 8217E234h case    7:*/		return 0x8217E238;
		  /* 8217E238h */ case    8:  		/* stw R30, <#[R3 + 108]> */
		/* 8217E238h case    8:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R3 + 0x0000006C) );
		/* 8217E238h case    8:*/		return 0x8217E23C;
		  /* 8217E23Ch */ case    9:  		/* stw R30, <#[R4 + 44]> */
		/* 8217E23Ch case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R4 + 0x0000002C) );
		/* 8217E23Ch case    9:*/		return 0x8217E240;
		  /* 8217E240h */ case   10:  		/* mr R4, R30 */
		/* 8217E240h case   10:*/		regs.R4 = regs.R30;
		/* 8217E240h case   10:*/		return 0x8217E244;
		  /* 8217E244h */ case   11:  		/* bl 267828 */
		/* 8217E244h case   11:*/		regs.LR = 0x8217E248; return 0x821BF878;
		/* 8217E244h case   11:*/		return 0x8217E248;
		  /* 8217E248h */ case   12:  		/* lwz R11, <#[R31 + 4]> */
		/* 8217E248h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8217E248h case   12:*/		return 0x8217E24C;
		  /* 8217E24Ch */ case   13:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E24Ch case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E24Ch case   13:*/		return 0x8217E250;
		  /* 8217E250h */ case   14:  		/* bc 4, CR0_EQ, 144 */
		/* 8217E250h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8217E2E0;  }
		/* 8217E250h case   14:*/		return 0x8217E254;
		  /* 8217E254h */ case   15:  		/* mr R29, R11 */
		/* 8217E254h case   15:*/		regs.R29 = regs.R11;
		/* 8217E254h case   15:*/		return 0x8217E258;
		  /* 8217E258h */ case   16:  		/* cmplwi CR0, R11, 0 */
		/* 8217E258h case   16:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217E258h case   16:*/		return 0x8217E25C;
		  /* 8217E25Ch */ case   17:  		/* bc 12, CR0_EQ, 132 */
		/* 8217E25Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x8217E2E0;  }
		/* 8217E25Ch case   17:*/		return 0x8217E260;
		  /* 8217E260h */ case   18:  		/* lwz R11, <#[R29 + 44]> */
		/* 8217E260h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 8217E260h case   18:*/		return 0x8217E264;
		  /* 8217E264h */ case   19:  		/* cmplw CR6, R11, R30 */
		/* 8217E264h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8217E264h case   19:*/		return 0x8217E268;
		  /* 8217E268h */ case   20:  		/* bc 4, CR6_EQ, 92 */
		/* 8217E268h case   20:*/		if ( !regs.CR[6].eq ) { return 0x8217E2C4;  }
		/* 8217E268h case   20:*/		return 0x8217E26C;
		  /* 8217E26Ch */ case   21:  		/* lwz R11, <#[R29 + 36]> */
		/* 8217E26Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 8217E26Ch case   21:*/		return 0x8217E270;
		  /* 8217E270h */ case   22:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217E270h case   22:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217E270h case   22:*/		return 0x8217E274;
		  /* 8217E274h */ case   23:  		/* bc 4, CR0_EQ, 80 */
		/* 8217E274h case   23:*/		if ( !regs.CR[0].eq ) { return 0x8217E2C4;  }
		/* 8217E274h case   23:*/		return 0x8217E278;
		  /* 8217E278h */ case   24:  		/* lwz R11, <#[R29 + 32]> */
		/* 8217E278h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 8217E278h case   24:*/		return 0x8217E27C;
		  /* 8217E27Ch */ case   25:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217E27Ch case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217E27Ch case   25:*/		return 0x8217E280;
		  /* 8217E280h */ case   26:  		/* addic. R4, R11, -40 */
		/* 8217E280h case   26:*/		cpu::op::addic<1>(regs,&regs.R4,regs.R11,0xFFFFFFD8);
		/* 8217E280h case   26:*/		return 0x8217E284;
		  /* 8217E284h */ case   27:  		/* bc 12, CR0_EQ, 64 */
		/* 8217E284h case   27:*/		if ( regs.CR[0].eq ) { return 0x8217E2C4;  }
		/* 8217E284h case   27:*/		return 0x8217E288;
		  /* 8217E288h */ case   28:  		/* lwz R10, <#[R4 + 8]> */
		/* 8217E288h case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 8217E288h case   28:*/		return 0x8217E28C;
		  /* 8217E28Ch */ case   29:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8217E28Ch case   29:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8217E28Ch case   29:*/		return 0x8217E290;
		  /* 8217E290h */ case   30:  		/* cmplwi CR6, R11, 83 */
		/* 8217E290h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000053);
		/* 8217E290h case   30:*/		return 0x8217E294;
		  /* 8217E294h */ case   31:  		/* bc 12, CR6_LT, 16 */
		/* 8217E294h case   31:*/		if ( regs.CR[6].lt ) { return 0x8217E2A4;  }
		/* 8217E294h case   31:*/		return 0x8217E298;
		  /* 8217E298h */ case   32:  		/* cmplwi CR6, R11, 95 */
		/* 8217E298h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 8217E298h case   32:*/		return 0x8217E29C;
		  /* 8217E29Ch */ case   33:  		/* li R11, 1 */
		/* 8217E29Ch case   33:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217E29Ch case   33:*/		return 0x8217E2A0;
		  /* 8217E2A0h */ case   34:  		/* bc 4, CR6_GT, 8 */
		/* 8217E2A0h case   34:*/		if ( !regs.CR[6].gt ) { return 0x8217E2A8;  }
		/* 8217E2A0h case   34:*/		return 0x8217E2A4;
	}
	return 0x8217E2A4;
} // Block from 8217E218h-8217E2A4h (35 instructions)

//////////////////////////////////////////////////////
// Block at 8217E2A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E2A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E2A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E2A4);
		  /* 8217E2A4h */ case    0:  		/* li R11, 0 */
		/* 8217E2A4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217E2A4h case    0:*/		return 0x8217E2A8;
	}
	return 0x8217E2A8;
} // Block from 8217E2A4h-8217E2A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217E2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E2A8);
		  /* 8217E2A8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217E2A8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217E2A8h case    0:*/		return 0x8217E2AC;
		  /* 8217E2ACh */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8217E2ACh case    1:*/		if ( regs.CR[0].eq ) { return 0x8217E2C4;  }
		/* 8217E2ACh case    1:*/		return 0x8217E2B0;
		  /* 8217E2B0h */ case    2:  		/* rlwinm. R11, R10, 5, 31, 31 */
		/* 8217E2B0h case    2:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R10);
		/* 8217E2B0h case    2:*/		return 0x8217E2B4;
		  /* 8217E2B4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217E2B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217E2C4;  }
		/* 8217E2B4h case    3:*/		return 0x8217E2B8;
		  /* 8217E2B8h */ case    4:  		/* mr R5, R28 */
		/* 8217E2B8h case    4:*/		regs.R5 = regs.R28;
		/* 8217E2B8h case    4:*/		return 0x8217E2BC;
		  /* 8217E2BCh */ case    5:  		/* mr R3, R31 */
		/* 8217E2BCh case    5:*/		regs.R3 = regs.R31;
		/* 8217E2BCh case    5:*/		return 0x8217E2C0;
		  /* 8217E2C0h */ case    6:  		/* bl -880 */
		/* 8217E2C0h case    6:*/		regs.LR = 0x8217E2C4; return 0x8217DF50;
		/* 8217E2C0h case    6:*/		return 0x8217E2C4;
	}
	return 0x8217E2C4;
} // Block from 8217E2A8h-8217E2C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217E2C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E2C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E2C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E2C4);
		  /* 8217E2C4h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 8217E2C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 8217E2C4h case    0:*/		return 0x8217E2C8;
		  /* 8217E2C8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217E2C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217E2C8h case    1:*/		return 0x8217E2CC;
		  /* 8217E2CCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E2CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E2CCh case    2:*/		return 0x8217E2D0;
		  /* 8217E2D0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217E2D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217E2E0;  }
		/* 8217E2D0h case    3:*/		return 0x8217E2D4;
		  /* 8217E2D4h */ case    4:  		/* mr R29, R11 */
		/* 8217E2D4h case    4:*/		regs.R29 = regs.R11;
		/* 8217E2D4h case    4:*/		return 0x8217E2D8;
		  /* 8217E2D8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217E2D8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E2D8h case    5:*/		return 0x8217E2DC;
		  /* 8217E2DCh */ case    6:  		/* bc 4, CR6_EQ, -124 */
		/* 8217E2DCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217E260;  }
		/* 8217E2DCh case    6:*/		return 0x8217E2E0;
	}
	return 0x8217E2E0;
} // Block from 8217E2C4h-8217E2E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217E2E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E2E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E2E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E2E0);
		  /* 8217E2E0h */ case    0:  		/* addi R1, R1, 128 */
		/* 8217E2E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217E2E0h case    0:*/		return 0x8217E2E4;
		  /* 8217E2E4h */ case    1:  		/* b -970812 */
		/* 8217E2E4h case    1:*/		return 0x820912A8;
		/* 8217E2E4h case    1:*/		return 0x8217E2E8;
	}
	return 0x8217E2E8;
} // Block from 8217E2E0h-8217E2E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E2E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E2E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E2E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E2E8);
		  /* 8217E2E8h */ case    0:  		/* mfspr R12, LR */
		/* 8217E2E8h case    0:*/		regs.R12 = regs.LR;
		/* 8217E2E8h case    0:*/		return 0x8217E2EC;
		  /* 8217E2ECh */ case    1:  		/* bl -970904 */
		/* 8217E2ECh case    1:*/		regs.LR = 0x8217E2F0; return 0x82091254;
		/* 8217E2ECh case    1:*/		return 0x8217E2F0;
		  /* 8217E2F0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 8217E2F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 8217E2F0h case    2:*/		return 0x8217E2F4;
		  /* 8217E2F4h */ case    3:  		/* lwz R11, <#[R3 + 108]> */
		/* 8217E2F4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8217E2F4h case    3:*/		return 0x8217E2F8;
		  /* 8217E2F8h */ case    4:  		/* mr R29, R5 */
		/* 8217E2F8h case    4:*/		regs.R29 = regs.R5;
		/* 8217E2F8h case    4:*/		return 0x8217E2FC;
		  /* 8217E2FCh */ case    5:  		/* li R5, 1 */
		/* 8217E2FCh case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8217E2FCh case    5:*/		return 0x8217E300;
		  /* 8217E300h */ case    6:  		/* addi R11, R11, 1 */
		/* 8217E300h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217E300h case    6:*/		return 0x8217E304;
		  /* 8217E304h */ case    7:  		/* mr R31, R3 */
		/* 8217E304h case    7:*/		regs.R31 = regs.R3;
		/* 8217E304h case    7:*/		return 0x8217E308;
		  /* 8217E308h */ case    8:  		/* stw R11, <#[R3 + 108]> */
		/* 8217E308h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000006C) );
		/* 8217E308h case    8:*/		return 0x8217E30C;
		  /* 8217E30Ch */ case    9:  		/* mr R28, R6 */
		/* 8217E30Ch case    9:*/		regs.R28 = regs.R6;
		/* 8217E30Ch case    9:*/		return 0x8217E310;
		  /* 8217E310h */ case   10:  		/* stw R11, <#[R4 + 44]> */
		/* 8217E310h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 8217E310h case   10:*/		return 0x8217E314;
		  /* 8217E314h */ case   11:  		/* mr R4, R11 */
		/* 8217E314h case   11:*/		regs.R4 = regs.R11;
		/* 8217E314h case   11:*/		return 0x8217E318;
		  /* 8217E318h */ case   12:  		/* mr R27, R11 */
		/* 8217E318h case   12:*/		regs.R27 = regs.R11;
		/* 8217E318h case   12:*/		return 0x8217E31C;
		  /* 8217E31Ch */ case   13:  		/* bl 267612 */
		/* 8217E31Ch case   13:*/		regs.LR = 0x8217E320; return 0x821BF878;
		/* 8217E31Ch case   13:*/		return 0x8217E320;
		  /* 8217E320h */ case   14:  		/* lwz R11, <#[R31 + 108]> */
		/* 8217E320h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000006C) );
		/* 8217E320h case   14:*/		return 0x8217E324;
		  /* 8217E324h */ case   15:  		/* li R5, 1 */
		/* 8217E324h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 8217E324h case   15:*/		return 0x8217E328;
		  /* 8217E328h */ case   16:  		/* addi R30, R11, 1 */
		/* 8217E328h case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0x1);
		/* 8217E328h case   16:*/		return 0x8217E32C;
		  /* 8217E32Ch */ case   17:  		/* mr R3, R31 */
		/* 8217E32Ch case   17:*/		regs.R3 = regs.R31;
		/* 8217E32Ch case   17:*/		return 0x8217E330;
		  /* 8217E330h */ case   18:  		/* stw R30, <#[R31 + 108]> */
		/* 8217E330h case   18:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000006C) );
		/* 8217E330h case   18:*/		return 0x8217E334;
		  /* 8217E334h */ case   19:  		/* mr R4, R30 */
		/* 8217E334h case   19:*/		regs.R4 = regs.R30;
		/* 8217E334h case   19:*/		return 0x8217E338;
		  /* 8217E338h */ case   20:  		/* stw R30, <#[R29 + 44]> */
		/* 8217E338h case   20:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R29 + 0x0000002C) );
		/* 8217E338h case   20:*/		return 0x8217E33C;
		  /* 8217E33Ch */ case   21:  		/* bl 267580 */
		/* 8217E33Ch case   21:*/		regs.LR = 0x8217E340; return 0x821BF878;
		/* 8217E33Ch case   21:*/		return 0x8217E340;
		  /* 8217E340h */ case   22:  		/* lwz R11, <#[R31 + 4]> */
		/* 8217E340h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8217E340h case   22:*/		return 0x8217E344;
		  /* 8217E344h */ case   23:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E344h case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E344h case   23:*/		return 0x8217E348;
		  /* 8217E348h */ case   24:  		/* bc 4, CR0_EQ, 152 */
		/* 8217E348h case   24:*/		if ( !regs.CR[0].eq ) { return 0x8217E3E0;  }
		/* 8217E348h case   24:*/		return 0x8217E34C;
		  /* 8217E34Ch */ case   25:  		/* mr R29, R11 */
		/* 8217E34Ch case   25:*/		regs.R29 = regs.R11;
		/* 8217E34Ch case   25:*/		return 0x8217E350;
		  /* 8217E350h */ case   26:  		/* cmplwi CR0, R11, 0 */
		/* 8217E350h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217E350h case   26:*/		return 0x8217E354;
		  /* 8217E354h */ case   27:  		/* bc 12, CR0_EQ, 140 */
		/* 8217E354h case   27:*/		if ( regs.CR[0].eq ) { return 0x8217E3E0;  }
		/* 8217E354h case   27:*/		return 0x8217E358;
		  /* 8217E358h */ case   28:  		/* lwz R11, <#[R29 + 44]> */
		/* 8217E358h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 8217E358h case   28:*/		return 0x8217E35C;
		  /* 8217E35Ch */ case   29:  		/* cmplw CR6, R11, R27 */
		/* 8217E35Ch case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R27);
		/* 8217E35Ch case   29:*/		return 0x8217E360;
		  /* 8217E360h */ case   30:  		/* bc 4, CR6_EQ, 100 */
		/* 8217E360h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8217E3C4;  }
		/* 8217E360h case   30:*/		return 0x8217E364;
		  /* 8217E364h */ case   31:  		/* cmplw CR6, R11, R30 */
		/* 8217E364h case   31:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8217E364h case   31:*/		return 0x8217E368;
		  /* 8217E368h */ case   32:  		/* bc 12, CR6_EQ, 92 */
		/* 8217E368h case   32:*/		if ( regs.CR[6].eq ) { return 0x8217E3C4;  }
		/* 8217E368h case   32:*/		return 0x8217E36C;
		  /* 8217E36Ch */ case   33:  		/* lwz R11, <#[R29 + 36]> */
		/* 8217E36Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 8217E36Ch case   33:*/		return 0x8217E370;
		  /* 8217E370h */ case   34:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217E370h case   34:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217E370h case   34:*/		return 0x8217E374;
		  /* 8217E374h */ case   35:  		/* bc 4, CR0_EQ, 80 */
		/* 8217E374h case   35:*/		if ( !regs.CR[0].eq ) { return 0x8217E3C4;  }
		/* 8217E374h case   35:*/		return 0x8217E378;
		  /* 8217E378h */ case   36:  		/* lwz R11, <#[R29 + 32]> */
		/* 8217E378h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 8217E378h case   36:*/		return 0x8217E37C;
		  /* 8217E37Ch */ case   37:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217E37Ch case   37:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217E37Ch case   37:*/		return 0x8217E380;
		  /* 8217E380h */ case   38:  		/* addic. R4, R11, -40 */
		/* 8217E380h case   38:*/		cpu::op::addic<1>(regs,&regs.R4,regs.R11,0xFFFFFFD8);
		/* 8217E380h case   38:*/		return 0x8217E384;
		  /* 8217E384h */ case   39:  		/* bc 12, CR0_EQ, 64 */
		/* 8217E384h case   39:*/		if ( regs.CR[0].eq ) { return 0x8217E3C4;  }
		/* 8217E384h case   39:*/		return 0x8217E388;
		  /* 8217E388h */ case   40:  		/* lwz R10, <#[R4 + 8]> */
		/* 8217E388h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 8217E388h case   40:*/		return 0x8217E38C;
		  /* 8217E38Ch */ case   41:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8217E38Ch case   41:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8217E38Ch case   41:*/		return 0x8217E390;
	}
	return 0x8217E390;
} // Block from 8217E2E8h-8217E390h (42 instructions)

//////////////////////////////////////////////////////
// Block at 8217E390h
// Function '?CanCombineBlocks@Compiler@D3DXShader@@AAA_NPAVBlock@2@0_NPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E390);
		  /* 8217E390h */ case    0:  		/* cmplwi CR6, R11, 83 */
		/* 8217E390h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000053);
		/* 8217E390h case    0:*/		return 0x8217E394;
		  /* 8217E394h */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 8217E394h case    1:*/		if ( regs.CR[6].lt ) { return 0x8217E3A4;  }
		/* 8217E394h case    1:*/		return 0x8217E398;
		  /* 8217E398h */ case    2:  		/* cmplwi CR6, R11, 95 */
		/* 8217E398h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005F);
		/* 8217E398h case    2:*/		return 0x8217E39C;
		  /* 8217E39Ch */ case    3:  		/* li R11, 1 */
		/* 8217E39Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217E39Ch case    3:*/		return 0x8217E3A0;
		  /* 8217E3A0h */ case    4:  		/* bc 4, CR6_GT, 8 */
		/* 8217E3A0h case    4:*/		if ( !regs.CR[6].gt ) { return 0x8217E3A8;  }
		/* 8217E3A0h case    4:*/		return 0x8217E3A4;
	}
	return 0x8217E3A4;
} // Block from 8217E390h-8217E3A4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217E3A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E3A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E3A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E3A4);
		  /* 8217E3A4h */ case    0:  		/* li R11, 0 */
		/* 8217E3A4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217E3A4h case    0:*/		return 0x8217E3A8;
	}
	return 0x8217E3A8;
} // Block from 8217E3A4h-8217E3A8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217E3A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E3A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E3A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E3A8);
		  /* 8217E3A8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217E3A8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217E3A8h case    0:*/		return 0x8217E3AC;
		  /* 8217E3ACh */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 8217E3ACh case    1:*/		if ( regs.CR[0].eq ) { return 0x8217E3C4;  }
		/* 8217E3ACh case    1:*/		return 0x8217E3B0;
		  /* 8217E3B0h */ case    2:  		/* rlwinm. R11, R10, 5, 31, 31 */
		/* 8217E3B0h case    2:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R10);
		/* 8217E3B0h case    2:*/		return 0x8217E3B4;
		  /* 8217E3B4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217E3B4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217E3C4;  }
		/* 8217E3B4h case    3:*/		return 0x8217E3B8;
		  /* 8217E3B8h */ case    4:  		/* mr R5, R28 */
		/* 8217E3B8h case    4:*/		regs.R5 = regs.R28;
		/* 8217E3B8h case    4:*/		return 0x8217E3BC;
		  /* 8217E3BCh */ case    5:  		/* mr R3, R31 */
		/* 8217E3BCh case    5:*/		regs.R3 = regs.R31;
		/* 8217E3BCh case    5:*/		return 0x8217E3C0;
		  /* 8217E3C0h */ case    6:  		/* bl -1136 */
		/* 8217E3C0h case    6:*/		regs.LR = 0x8217E3C4; return 0x8217DF50;
		/* 8217E3C0h case    6:*/		return 0x8217E3C4;
	}
	return 0x8217E3C4;
} // Block from 8217E3A8h-8217E3C4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217E3C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E3C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E3C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E3C4);
		  /* 8217E3C4h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 8217E3C4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 8217E3C4h case    0:*/		return 0x8217E3C8;
		  /* 8217E3C8h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217E3C8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217E3C8h case    1:*/		return 0x8217E3CC;
		  /* 8217E3CCh */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E3CCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E3CCh case    2:*/		return 0x8217E3D0;
		  /* 8217E3D0h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217E3D0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217E3E0;  }
		/* 8217E3D0h case    3:*/		return 0x8217E3D4;
		  /* 8217E3D4h */ case    4:  		/* mr R29, R11 */
		/* 8217E3D4h case    4:*/		regs.R29 = regs.R11;
		/* 8217E3D4h case    4:*/		return 0x8217E3D8;
		  /* 8217E3D8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217E3D8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E3D8h case    5:*/		return 0x8217E3DC;
		  /* 8217E3DCh */ case    6:  		/* bc 4, CR6_EQ, -132 */
		/* 8217E3DCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217E358;  }
		/* 8217E3DCh case    6:*/		return 0x8217E3E0;
	}
	return 0x8217E3E0;
} // Block from 8217E3C4h-8217E3E0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217E3E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E3E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E3E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E3E0);
		  /* 8217E3E0h */ case    0:  		/* addi R1, R1, 128 */
		/* 8217E3E0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 8217E3E0h case    0:*/		return 0x8217E3E4;
		  /* 8217E3E4h */ case    1:  		/* b -971072 */
		/* 8217E3E4h case    1:*/		return 0x820912A4;
		/* 8217E3E4h case    1:*/		return 0x8217E3E8;
	}
	return 0x8217E3E8;
} // Block from 8217E3E0h-8217E3E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E3E8);
		  /* 8217E3E8h */ case    0:  		/* mfspr R12, LR */
		/* 8217E3E8h case    0:*/		regs.R12 = regs.LR;
		/* 8217E3E8h case    0:*/		return 0x8217E3EC;
		  /* 8217E3ECh */ case    1:  		/* bl -971172 */
		/* 8217E3ECh case    1:*/		regs.LR = 0x8217E3F0; return 0x82091248;
		/* 8217E3ECh case    1:*/		return 0x8217E3F0;
		  /* 8217E3F0h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 8217E3F0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8217E3F0h case    2:*/		return 0x8217E3F4;
		  /* 8217E3F4h */ case    3:  		/* mr R28, R3 */
		/* 8217E3F4h case    3:*/		regs.R28 = regs.R3;
		/* 8217E3F4h case    3:*/		return 0x8217E3F8;
		  /* 8217E3F8h */ case    4:  		/* mr R25, R4 */
		/* 8217E3F8h case    4:*/		regs.R25 = regs.R4;
		/* 8217E3F8h case    4:*/		return 0x8217E3FC;
		  /* 8217E3FCh */ case    5:  		/* lwz R11, <#[R25 + 12]> */
		/* 8217E3FCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 8217E3FCh case    5:*/		return 0x8217E400;
		  /* 8217E400h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 8217E400h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E400h case    6:*/		return 0x8217E404;
		  /* 8217E404h */ case    7:  		/* bc 12, CR6_EQ, 24 */
		/* 8217E404h case    7:*/		if ( regs.CR[6].eq ) { return 0x8217E41C;  }
		/* 8217E404h case    7:*/		return 0x8217E408;
		  /* 8217E408h */ case    8:  		/* lwz R11, <#[R11]> */
		/* 8217E408h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217E408h case    8:*/		return 0x8217E40C;
		  /* 8217E40Ch */ case    9:  		/* cmplwi CR0, R11, 0 */
		/* 8217E40Ch case    9:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217E40Ch case    9:*/		return 0x8217E410;
		  /* 8217E410h */ case   10:  		/* bc 12, CR0_EQ, 12 */
		/* 8217E410h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217E41C;  }
		/* 8217E410h case   10:*/		return 0x8217E414;
		  /* 8217E414h */ case   11:  		/* mr R25, R11 */
		/* 8217E414h case   11:*/		regs.R25 = regs.R11;
		/* 8217E414h case   11:*/		return 0x8217E418;
		  /* 8217E418h */ case   12:  		/* b -28 */
		/* 8217E418h case   12:*/		return 0x8217E3FC;
		/* 8217E418h case   12:*/		return 0x8217E41C;
	}
	return 0x8217E41C;
} // Block from 8217E3E8h-8217E41Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217E41Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E41C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E41C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E41C);
		  /* 8217E41Ch */ case    0:  		/* lwz R11, <#[R25 + 36]> */
		/* 8217E41Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000024) );
		/* 8217E41Ch case    0:*/		return 0x8217E420;
		  /* 8217E420h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E420h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E420h case    1:*/		return 0x8217E424;
		  /* 8217E424h */ case    2:  		/* bc 4, CR0_EQ, 60 */
		/* 8217E424h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217E460;  }
		/* 8217E424h case    2:*/		return 0x8217E428;
		  /* 8217E428h */ case    3:  		/* mr R24, R11 */
		/* 8217E428h case    3:*/		regs.R24 = regs.R11;
		/* 8217E428h case    3:*/		return 0x8217E42C;
		  /* 8217E42Ch */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 8217E42Ch case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217E42Ch case    4:*/		return 0x8217E430;
		  /* 8217E430h */ case    5:  		/* bc 12, CR0_EQ, 48 */
		/* 8217E430h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217E460;  }
		/* 8217E430h case    5:*/		return 0x8217E434;
		  /* 8217E434h */ case    6:  		/* lwz R11, <#[R24 + 8]> */
		/* 8217E434h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 8217E434h case    6:*/		return 0x8217E438;
		  /* 8217E438h */ case    7:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217E438h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217E438h case    7:*/		return 0x8217E43C;
		  /* 8217E43Ch */ case    8:  		/* cmplwi CR6, R11, 10624 */
		/* 8217E43Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 8217E43Ch case    8:*/		return 0x8217E440;
		  /* 8217E440h */ case    9:  		/* bc 12, CR6_EQ, 44 */
		/* 8217E440h case    9:*/		if ( regs.CR[6].eq ) { return 0x8217E46C;  }
		/* 8217E440h case    9:*/		return 0x8217E444;
		  /* 8217E444h */ case   10:  		/* rlwinm R11, R24, 0, 0, 30 */
		/* 8217E444h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R24);
		/* 8217E444h case   10:*/		return 0x8217E448;
		  /* 8217E448h */ case   11:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217E448h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217E448h case   11:*/		return 0x8217E44C;
		  /* 8217E44Ch */ case   12:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E44Ch case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E44Ch case   12:*/		return 0x8217E450;
		  /* 8217E450h */ case   13:  		/* bc 4, CR0_EQ, 16 */
		/* 8217E450h case   13:*/		if ( !regs.CR[0].eq ) { return 0x8217E460;  }
		/* 8217E450h case   13:*/		return 0x8217E454;
		  /* 8217E454h */ case   14:  		/* mr R24, R11 */
		/* 8217E454h case   14:*/		regs.R24 = regs.R11;
		/* 8217E454h case   14:*/		return 0x8217E458;
		  /* 8217E458h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 8217E458h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E458h case   15:*/		return 0x8217E45C;
		  /* 8217E45Ch */ case   16:  		/* bc 4, CR6_EQ, -40 */
		/* 8217E45Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x8217E434;  }
		/* 8217E45Ch case   16:*/		return 0x8217E460;
	}
	return 0x8217E460;
} // Block from 8217E41Ch-8217E460h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8217E460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E460);
		  /* 8217E460h */ case    0:  		/* li R4, 4800 */
		/* 8217E460h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217E460h case    0:*/		return 0x8217E464;
		  /* 8217E464h */ case    1:  		/* mr R3, R28 */
		/* 8217E464h case    1:*/		regs.R3 = regs.R28;
		/* 8217E464h case    1:*/		return 0x8217E468;
		  /* 8217E468h */ case    2:  		/* bl -181760 */
		/* 8217E468h case    2:*/		regs.LR = 0x8217E46C; return 0x82151E68;
		/* 8217E468h case    2:*/		return 0x8217E46C;
	}
	return 0x8217E46C;
} // Block from 8217E460h-8217E46Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217E46Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E46C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E46C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E46C);
		  /* 8217E46Ch */ case    0:  		/* li R5, 6 */
		/* 8217E46Ch case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x6);
		/* 8217E46Ch case    0:*/		return 0x8217E470;
		  /* 8217E470h */ case    1:  		/* li R4, 8 */
		/* 8217E470h case    1:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8217E470h case    1:*/		return 0x8217E474;
		  /* 8217E474h */ case    2:  		/* mr R3, R28 */
		/* 8217E474h case    2:*/		regs.R3 = regs.R28;
		/* 8217E474h case    2:*/		return 0x8217E478;
		  /* 8217E478h */ case    3:  		/* bl -105352 */
		/* 8217E478h case    3:*/		regs.LR = 0x8217E47C; return 0x821648F0;
		/* 8217E478h case    3:*/		return 0x8217E47C;
		  /* 8217E47Ch */ case    4:  		/* addi R27, R3, 4 */
		/* 8217E47Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R3,0x4);
		/* 8217E47Ch case    4:*/		return 0x8217E480;
		  /* 8217E480h */ case    5:  		/* ori R11, R3, 1 */
		/* 8217E480h case    5:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8217E480h case    5:*/		return 0x8217E484;
		  /* 8217E484h */ case    6:  		/* ori R10, R27, 1 */
		/* 8217E484h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R27,0x1);
		/* 8217E484h case    6:*/		return 0x8217E488;
		  /* 8217E488h */ case    7:  		/* stw R11, <#[R3 + 4]> */
		/* 8217E488h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8217E488h case    7:*/		return 0x8217E48C;
		  /* 8217E48Ch */ case    8:  		/* mr R31, R3 */
		/* 8217E48Ch case    8:*/		regs.R31 = regs.R3;
		/* 8217E48Ch case    8:*/		return 0x8217E490;
		  /* 8217E490h */ case    9:  		/* stw R10, <#[R3]> */
		/* 8217E490h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8217E490h case    9:*/		return 0x8217E494;
		  /* 8217E494h */ case   10:  		/* mr R30, R25 */
		/* 8217E494h case   10:*/		regs.R30 = regs.R25;
		/* 8217E494h case   10:*/		return 0x8217E498;
		  /* 8217E498h */ case   11:  		/* lwz R11, <#[R28 + 112]> */
		/* 8217E498h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000070) );
		/* 8217E498h case   11:*/		return 0x8217E49C;
		  /* 8217E49Ch */ case   12:  		/* addi R26, R11, 1 */
		/* 8217E49Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x1);
		/* 8217E49Ch case   12:*/		return 0x8217E4A0;
		  /* 8217E4A0h */ case   13:  		/* stw R26, <#[R28 + 112]> */
		/* 8217E4A0h case   13:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R28 + 0x00000070) );
		/* 8217E4A0h case   13:*/		return 0x8217E4A4;
		  /* 8217E4A4h */ case   14:  		/* lwz R29, <#[R30 + 8]> */
		/* 8217E4A4h case   14:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 8217E4A4h case   14:*/		return 0x8217E4A8;
		  /* 8217E4A8h */ case   15:  		/* cmplwi CR6, R29, 0 */
		/* 8217E4A8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217E4A8h case   15:*/		return 0x8217E4AC;
		  /* 8217E4ACh */ case   16:  		/* bc 12, CR6_EQ, 132 */
		/* 8217E4ACh case   16:*/		if ( regs.CR[6].eq ) { return 0x8217E530;  }
		/* 8217E4ACh case   16:*/		return 0x8217E4B0;
		  /* 8217E4B0h */ case   17:  		/* lwz R30, <#[R29 + 4]> */
		/* 8217E4B0h case   17:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x00000004) );
		/* 8217E4B0h case   17:*/		return 0x8217E4B4;
		  /* 8217E4B4h */ case   18:  		/* mr R7, R26 */
		/* 8217E4B4h case   18:*/		regs.R7 = regs.R26;
		/* 8217E4B4h case   18:*/		return 0x8217E4B8;
		  /* 8217E4B8h */ case   19:  		/* mr R6, R24 */
		/* 8217E4B8h case   19:*/		regs.R6 = regs.R24;
		/* 8217E4B8h case   19:*/		return 0x8217E4BC;
		  /* 8217E4BCh */ case   20:  		/* mr R5, R25 */
		/* 8217E4BCh case   20:*/		regs.R5 = regs.R25;
		/* 8217E4BCh case   20:*/		return 0x8217E4C0;
		  /* 8217E4C0h */ case   21:  		/* mr R4, R30 */
		/* 8217E4C0h case   21:*/		regs.R4 = regs.R30;
		/* 8217E4C0h case   21:*/		return 0x8217E4C4;
		  /* 8217E4C4h */ case   22:  		/* mr R3, R28 */
		/* 8217E4C4h case   22:*/		regs.R3 = regs.R28;
		/* 8217E4C4h case   22:*/		return 0x8217E4C8;
		  /* 8217E4C8h */ case   23:  		/* bl -15824 */
		/* 8217E4C8h case   23:*/		regs.LR = 0x8217E4CC; return 0x8217A6F8;
		/* 8217E4C8h case   23:*/		return 0x8217E4CC;
		  /* 8217E4CCh */ case   24:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217E4CCh case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217E4CCh case   24:*/		return 0x8217E4D0;
		  /* 8217E4D0h */ case   25:  		/* bc 4, CR0_EQ, 88 */
		/* 8217E4D0h case   25:*/		if ( !regs.CR[0].eq ) { return 0x8217E528;  }
		/* 8217E4D0h case   25:*/		return 0x8217E4D4;
		  /* 8217E4D4h */ case   26:  		/* lwz R11, <#[R27]> */
		/* 8217E4D4h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8217E4D4h case   26:*/		return 0x8217E4D8;
		  /* 8217E4D8h */ case   27:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217E4D8h case   27:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217E4D8h case   27:*/		return 0x8217E4DC;
		  /* 8217E4DCh */ case   28:  		/* bc 4, CR0_EQ, 40 */
		/* 8217E4DCh case   28:*/		if ( !regs.CR[0].eq ) { return 0x8217E504;  }
		/* 8217E4DCh case   28:*/		return 0x8217E4E0;
		  /* 8217E4E0h */ case   29:  		/* lwz R11, <#[R31]> */
		/* 8217E4E0h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217E4E0h case   29:*/		return 0x8217E4E4;
		  /* 8217E4E4h */ case   30:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217E4E4h case   30:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217E4E4h case   30:*/		return 0x8217E4E8;
		  /* 8217E4E8h */ case   31:  		/* addic. R3, R11, -4 */
		/* 8217E4E8h case   31:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8217E4E8h case   31:*/		return 0x8217E4EC;
		  /* 8217E4ECh */ case   32:  		/* bc 12, CR0_EQ, 24 */
		/* 8217E4ECh case   32:*/		if ( regs.CR[0].eq ) { return 0x8217E504;  }
		/* 8217E4ECh case   32:*/		return 0x8217E4F0;
		  /* 8217E4F0h */ case   33:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217E4F0h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E4F0h case   33:*/		return 0x8217E4F4;
		  /* 8217E4F4h */ case   34:  		/* lwz R10, <#[R3 + 12]> */
		/* 8217E4F4h case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217E4F4h case   34:*/		return 0x8217E4F8;
		  /* 8217E4F8h */ case   35:  		/* addi R11, R11, 1 */
		/* 8217E4F8h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217E4F8h case   35:*/		return 0x8217E4FC;
		  /* 8217E4FCh */ case   36:  		/* cmplw CR6, R11, R10 */
		/* 8217E4FCh case   36:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217E4FCh case   36:*/		return 0x8217E500;
		  /* 8217E500h */ case   37:  		/* bc 4, CR6_GT, 16 */
		/* 8217E500h case   37:*/		if ( !regs.CR[6].gt ) { return 0x8217E510;  }
		/* 8217E500h case   37:*/		return 0x8217E504;
	}
	return 0x8217E504;
} // Block from 8217E46Ch-8217E504h (38 instructions)

//////////////////////////////////////////////////////
// Block at 8217E504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E504);
		  /* 8217E504h */ case    0:  		/* li R4, 1 */
		/* 8217E504h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217E504h case    0:*/		return 0x8217E508;
		  /* 8217E508h */ case    1:  		/* mr R3, R31 */
		/* 8217E508h case    1:*/		regs.R3 = regs.R31;
		/* 8217E508h case    1:*/		return 0x8217E50C;
		  /* 8217E50Ch */ case    2:  		/* bl 60348 */
		/* 8217E50Ch case    2:*/		regs.LR = 0x8217E510; return 0x8218D0C8;
		/* 8217E50Ch case    2:*/		return 0x8217E510;
	}
	return 0x8217E510;
} // Block from 8217E504h-8217E510h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217E510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E510);
		  /* 8217E510h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217E510h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E510h case    0:*/		return 0x8217E514;
		  /* 8217E514h */ case    1:  		/* addi R10, R11, 4 */
		/* 8217E514h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217E514h case    1:*/		return 0x8217E518;
		  /* 8217E518h */ case    2:  		/* addi R9, R11, 1 */
		/* 8217E518h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8217E518h case    2:*/		return 0x8217E51C;
		  /* 8217E51Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8217E51Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8217E51Ch case    3:*/		return 0x8217E520;
		  /* 8217E520h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8217E520h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E520h case    4:*/		return 0x8217E524;
		  /* 8217E524h */ case    5:  		/* stwx R30, <#[R11 + R3]> */
		/* 8217E524h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8217E524h case    5:*/		return 0x8217E528;
	}
	return 0x8217E528;
} // Block from 8217E510h-8217E528h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217E528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E528);
		  /* 8217E528h */ case    0:  		/* lwz R29, <#[R29 + 12]> */
		/* 8217E528h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x0000000C) );
		/* 8217E528h case    0:*/		return 0x8217E52C;
		  /* 8217E52Ch */ case    1:  		/* b -132 */
		/* 8217E52Ch case    1:*/		return 0x8217E4A8;
		/* 8217E52Ch case    1:*/		return 0x8217E530;
	}
	return 0x8217E530;
} // Block from 8217E528h-8217E530h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E530h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E530( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E530) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E530);
		  /* 8217E530h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 8217E530h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8217E530h case    0:*/		return 0x8217E534;
		  /* 8217E534h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217E534h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217E534h case    1:*/		return 0x8217E538;
		  /* 8217E538h */ case    2:  		/* bc 4, CR0_EQ, 160 */
		/* 8217E538h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217E5D8;  }
		/* 8217E538h case    2:*/		return 0x8217E53C;
		  /* 8217E53Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8217E53Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217E53Ch case    3:*/		return 0x8217E540;
		  /* 8217E540h */ case    4:  		/* bc 12, CR0_EQ, 152 */
		/* 8217E540h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217E5D8;  }
		/* 8217E540h case    4:*/		return 0x8217E544;
		  /* 8217E544h */ case    5:  		/* lwz R11, <#[R31]> */
		/* 8217E544h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217E544h case    5:*/		return 0x8217E548;
		  /* 8217E548h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217E548h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217E548h case    6:*/		return 0x8217E54C;
		  /* 8217E54Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 8217E54Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8217E54Ch case    7:*/		return 0x8217E550;
		  /* 8217E550h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217E550h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217E550h case    8:*/		return 0x8217E554;
		  /* 8217E554h */ case    9:  		/* addi R10, R11, 3 */
		/* 8217E554h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8217E554h case    9:*/		return 0x8217E558;
		  /* 8217E558h */ case   10:  		/* addic. R11, R11, -1 */
		/* 8217E558h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8217E558h case   10:*/		return 0x8217E55C;
		  /* 8217E55Ch */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8217E55Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8217E55Ch case   11:*/		return 0x8217E560;
		  /* 8217E560h */ case   12:  		/* lwzx R30, <#[R10 + R4]> */
		/* 8217E560h case   12:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8217E560h case   12:*/		return 0x8217E564;
		  /* 8217E564h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 8217E564h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8217E564h case   13:*/		return 0x8217E568;
		  /* 8217E568h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 8217E568h case   14:*/		if ( !regs.CR[0].eq ) { return 0x8217E5A4;  }
		/* 8217E568h case   14:*/		return 0x8217E56C;
		  /* 8217E56Ch */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8217E56Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8217E56Ch case   15:*/		return 0x8217E570;
		  /* 8217E570h */ case   16:  		/* mr R3, R31 */
		/* 8217E570h case   16:*/		regs.R3 = regs.R31;
		/* 8217E570h case   16:*/		return 0x8217E574;
		  /* 8217E574h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217E574h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217E574h case   17:*/		return 0x8217E578;
		  /* 8217E578h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 8217E578h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217E578h case   18:*/		return 0x8217E57C;
		  /* 8217E57Ch */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8217E57Ch case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8217E57Ch case   19:*/		return 0x8217E580;
		  /* 8217E580h */ case   20:  		/* stw R9, <#[R10]> */
		/* 8217E580h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217E580h case   20:*/		return 0x8217E584;
		  /* 8217E584h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217E584h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217E584h case   21:*/		return 0x8217E588;
		  /* 8217E588h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 8217E588h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217E588h case   22:*/		return 0x8217E58C;
		  /* 8217E58Ch */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217E58Ch case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217E58Ch case   23:*/		return 0x8217E590;
		  /* 8217E590h */ case   24:  		/* stw R10, <#[R11]> */
		/* 8217E590h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217E590h case   24:*/		return 0x8217E594;
		  /* 8217E594h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 8217E594h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8217E594h case   25:*/		return 0x8217E598;
		  /* 8217E598h */ case   26:  		/* addi R11, R11, 4 */
		/* 8217E598h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8217E598h case   26:*/		return 0x8217E59C;
		  /* 8217E59Ch */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8217E59Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8217E59Ch case   27:*/		return 0x8217E5A0;
		  /* 8217E5A0h */ case   28:  		/* bl -182168 */
		/* 8217E5A0h case   28:*/		regs.LR = 0x8217E5A4; return 0x82151E08;
		/* 8217E5A0h case   28:*/		return 0x8217E5A4;
	}
	return 0x8217E5A4;
} // Block from 8217E530h-8217E5A4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8217E5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E5A4);
		  /* 8217E5A4h */ case    0:  		/* lwz R11, <#[R30 + 12]> */
		/* 8217E5A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000000C) );
		/* 8217E5A4h case    0:*/		return 0x8217E5A8;
		  /* 8217E5A8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217E5A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E5A8h case    1:*/		return 0x8217E5AC;
		  /* 8217E5ACh */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8217E5ACh case    2:*/		if ( regs.CR[6].eq ) { return 0x8217E5C0;  }
		/* 8217E5ACh case    2:*/		return 0x8217E5B0;
		  /* 8217E5B0h */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217E5B0h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217E5B0h case    3:*/		return 0x8217E5B4;
		  /* 8217E5B4h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217E5B4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E5B4h case    4:*/		return 0x8217E5B8;
		  /* 8217E5B8h */ case    5:  		/* li R11, 1 */
		/* 8217E5B8h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217E5B8h case    5:*/		return 0x8217E5BC;
		  /* 8217E5BCh */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8217E5BCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217E5C4;  }
		/* 8217E5BCh case    6:*/		return 0x8217E5C0;
	}
	return 0x8217E5C0;
} // Block from 8217E5A4h-8217E5C0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217E5C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E5C0);
		  /* 8217E5C0h */ case    0:  		/* li R11, 0 */
		/* 8217E5C0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217E5C0h case    0:*/		return 0x8217E5C4;
	}
	return 0x8217E5C4;
} // Block from 8217E5C0h-8217E5C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217E5C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E5C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E5C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E5C4);
		  /* 8217E5C4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217E5C4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217E5C4h case    0:*/		return 0x8217E5C8;
		  /* 8217E5C8h */ case    1:  		/* bc 12, CR0_EQ, -292 */
		/* 8217E5C8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217E4A4;  }
		/* 8217E5C8h case    1:*/		return 0x8217E5CC;
		  /* 8217E5CCh */ case    2:  		/* li R4, 4800 */
		/* 8217E5CCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217E5CCh case    2:*/		return 0x8217E5D0;
		  /* 8217E5D0h */ case    3:  		/* mr R3, R28 */
		/* 8217E5D0h case    3:*/		regs.R3 = regs.R28;
		/* 8217E5D0h case    3:*/		return 0x8217E5D4;
		  /* 8217E5D4h */ case    4:  		/* bl -182124 */
		/* 8217E5D4h case    4:*/		regs.LR = 0x8217E5D8; return 0x82151E68;
		/* 8217E5D4h case    4:*/		return 0x8217E5D8;
	}
	return 0x8217E5D8;
} // Block from 8217E5C4h-8217E5D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217E5D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E5D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E5D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E5D8);
		  /* 8217E5D8h */ case    0:  		/* lwz R10, <#[R28 + 976]> */
		/* 8217E5D8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x000003D0) );
		/* 8217E5D8h case    0:*/		return 0x8217E5DC;
		  /* 8217E5DCh */ case    1:  		/* addi R11, R28, 972 */
		/* 8217E5DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x3CC);
		/* 8217E5DCh case    1:*/		return 0x8217E5E0;
		  /* 8217E5E0h */ case    2:  		/* stw R10, <#[R31]> */
		/* 8217E5E0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 8217E5E0h case    2:*/		return 0x8217E5E4;
		  /* 8217E5E4h */ case    3:  		/* stw R31, <#[R28 + 976]> */
		/* 8217E5E4h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x000003D0) );
		/* 8217E5E4h case    3:*/		return 0x8217E5E8;
		  /* 8217E5E8h */ case    4:  		/* addi R1, R1, 160 */
		/* 8217E5E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8217E5E8h case    4:*/		return 0x8217E5EC;
		  /* 8217E5ECh */ case    5:  		/* b -971604 */
		/* 8217E5ECh case    5:*/		return 0x82091298;
		/* 8217E5ECh case    5:*/		return 0x8217E5F0;
	}
	return 0x8217E5F0;
} // Block from 8217E5D8h-8217E5F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217E5F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E5F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E5F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E5F0);
		  /* 8217E5F0h */ case    0:  		/* mfspr R12, LR */
		/* 8217E5F0h case    0:*/		regs.R12 = regs.LR;
		/* 8217E5F0h case    0:*/		return 0x8217E5F4;
		  /* 8217E5F4h */ case    1:  		/* bl -971712 */
		/* 8217E5F4h case    1:*/		regs.LR = 0x8217E5F8; return 0x82091234;
		/* 8217E5F4h case    1:*/		return 0x8217E5F8;
		  /* 8217E5F8h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 8217E5F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 8217E5F8h case    2:*/		return 0x8217E5FC;
		  /* 8217E5FCh */ case    3:  		/* lwz R11, <#[R5 + 8]> */
		/* 8217E5FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 8217E5FCh case    3:*/		return 0x8217E600;
		  /* 8217E600h */ case    4:  		/* mr R26, R3 */
		/* 8217E600h case    4:*/		regs.R26 = regs.R3;
		/* 8217E600h case    4:*/		return 0x8217E604;
		  /* 8217E604h */ case    5:  		/* mr R23, R5 */
		/* 8217E604h case    5:*/		regs.R23 = regs.R5;
		/* 8217E604h case    5:*/		return 0x8217E608;
		  /* 8217E608h */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217E608h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217E608h case    6:*/		return 0x8217E60C;
		  /* 8217E60Ch */ case    7:  		/* mr R22, R6 */
		/* 8217E60Ch case    7:*/		regs.R22 = regs.R6;
		/* 8217E60Ch case    7:*/		return 0x8217E610;
		  /* 8217E610h */ case    8:  		/* mr R25, R7 */
		/* 8217E610h case    8:*/		regs.R25 = regs.R7;
		/* 8217E610h case    8:*/		return 0x8217E614;
		  /* 8217E614h */ case    9:  		/* mr R21, R8 */
		/* 8217E614h case    9:*/		regs.R21 = regs.R8;
		/* 8217E614h case    9:*/		return 0x8217E618;
		  /* 8217E618h */ case   10:  		/* cmplwi CR6, R11, 21 */
		/* 8217E618h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000015);
		/* 8217E618h case   10:*/		return 0x8217E61C;
		  /* 8217E61Ch */ case   11:  		/* bc 12, CR6_LT, 16 */
		/* 8217E61Ch case   11:*/		if ( regs.CR[6].lt ) { return 0x8217E62C;  }
		/* 8217E61Ch case   11:*/		return 0x8217E620;
		  /* 8217E620h */ case   12:  		/* cmplwi CR6, R11, 24 */
		/* 8217E620h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000018);
		/* 8217E620h case   12:*/		return 0x8217E624;
		  /* 8217E624h */ case   13:  		/* li R11, 1 */
		/* 8217E624h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217E624h case   13:*/		return 0x8217E628;
		  /* 8217E628h */ case   14:  		/* bc 4, CR6_GT, 8 */
		/* 8217E628h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8217E630;  }
		/* 8217E628h case   14:*/		return 0x8217E62C;
	}
	return 0x8217E62C;
} // Block from 8217E5F0h-8217E62Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217E62Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E62C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E62C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E62C);
		  /* 8217E62Ch */ case    0:  		/* li R11, 0 */
		/* 8217E62Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217E62Ch case    0:*/		return 0x8217E630;
	}
	return 0x8217E630;
} // Block from 8217E62Ch-8217E630h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217E630h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E630( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E630) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E630);
		  /* 8217E630h */ case    0:  		/* rlwinm R11, R11, 0, 24, 31 */
		/* 8217E630h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217E630h case    0:*/		return 0x8217E634;
		  /* 8217E634h */ case    1:  		/* lwz R10, <#[R4 + 4]> */
		/* 8217E634h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000004) );
		/* 8217E634h case    1:*/		return 0x8217E638;
		  /* 8217E638h */ case    2:  		/* li R9, 0 */
		/* 8217E638h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 8217E638h case    2:*/		return 0x8217E63C;
		  /* 8217E63Ch */ case    3:  		/* stw R4, <#[R1 + 80]> */
		/* 8217E63Ch case    3:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 8217E63Ch case    3:*/		return 0x8217E640;
		  /* 8217E640h */ case    4:  		/* addic R8, R11, -1 */
		/* 8217E640h case    4:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 8217E640h case    4:*/		return 0x8217E644;
		  /* 8217E644h */ case    5:  		/* rlwinm R7, R10, 0, 31, 31 */
		/* 8217E644h case    5:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R10);
		/* 8217E644h case    5:*/		return 0x8217E648;
		  /* 8217E648h */ case    6:  		/* stw R9, <#[R1 + 88]> */
		/* 8217E648h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x00000058) );
		/* 8217E648h case    6:*/		return 0x8217E64C;
		  /* 8217E64Ch */ case    7:  		/* subfe R11, R8, R11 */
		/* 8217E64Ch case    7:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8217E64Ch case    7:*/		return 0x8217E650;
		  /* 8217E650h */ case    8:  		/* addic R9, R7, -1 */
		/* 8217E650h case    8:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R7,0xFFFFFFFF);
		/* 8217E650h case    8:*/		return 0x8217E654;
		  /* 8217E654h */ case    9:  		/* addi R11, R11, 11 */
		/* 8217E654h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 8217E654h case    9:*/		return 0x8217E658;
		  /* 8217E658h */ case   10:  		/* subfe R9, R9, R9 */
		/* 8217E658h case   10:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 8217E658h case   10:*/		return 0x8217E65C;
		  /* 8217E65Ch */ case   11:  		/* rlwinm R8, R11, 2, 0, 29 */
		/* 8217E65Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R11);
		/* 8217E65Ch case   11:*/		return 0x8217E660;
		  /* 8217E660h */ case   12:  		/* and R11, R9, R10 */
		/* 8217E660h case   12:*/		cpu::op::and<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 8217E660h case   12:*/		return 0x8217E664;
		  /* 8217E664h */ case   13:  		/* stw R11, <#[R1 + 84]> */
		/* 8217E664h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8217E664h case   13:*/		return 0x8217E668;
		  /* 8217E668h */ case   14:  		/* lwzx R24, <#[R8 + R23]> */
		/* 8217E668h case   14:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R8 + regs.R23 + 0x00000000) );
		/* 8217E668h case   14:*/		return 0x8217E66C;
		  /* 8217E66Ch */ case   15:  		/* b 8 */
		/* 8217E66Ch case   15:*/		return 0x8217E674;
		/* 8217E66Ch case   15:*/		return 0x8217E670;
		  /* 8217E670h */ case   16:  		/* lwz R11, <#[R1 + 84]> */
		/* 8217E670h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8217E670h case   16:*/		return 0x8217E674;
	}
	return 0x8217E674;
} // Block from 8217E630h-8217E674h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8217E674h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E674( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E674) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E674);
		  /* 8217E674h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8217E674h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E674h case    0:*/		return 0x8217E678;
		  /* 8217E678h */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 8217E678h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217E690;  }
		/* 8217E678h case    1:*/		return 0x8217E67C;
		  /* 8217E67Ch */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217E67Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217E67Ch case    2:*/		return 0x8217E680;
		  /* 8217E680h */ case    3:  		/* lwz R10, <#[R1 + 88]> */
		/* 8217E680h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000058) );
		/* 8217E680h case    3:*/		return 0x8217E684;
		  /* 8217E684h */ case    4:  		/* cmplw CR6, R10, R11 */
		/* 8217E684h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8217E684h case    4:*/		return 0x8217E688;
		  /* 8217E688h */ case    5:  		/* li R11, 0 */
		/* 8217E688h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217E688h case    5:*/		return 0x8217E68C;
		  /* 8217E68Ch */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8217E68Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217E694;  }
		/* 8217E68Ch case    6:*/		return 0x8217E690;
	}
	return 0x8217E690;
} // Block from 8217E674h-8217E690h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217E690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E690);
		  /* 8217E690h */ case    0:  		/* li R11, 1 */
		/* 8217E690h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217E690h case    0:*/		return 0x8217E694;
	}
	return 0x8217E694;
} // Block from 8217E690h-8217E694h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217E694h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E694( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E694) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E694);
		  /* 8217E694h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217E694h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217E694h case    0:*/		return 0x8217E698;
		  /* 8217E698h */ case    1:  		/* bc 4, CR0_EQ, 924 */
		/* 8217E698h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217EA34;  }
		/* 8217E698h case    1:*/		return 0x8217E69C;
		  /* 8217E69Ch */ case    2:  		/* addi R3, R1, 80 */
		/* 8217E69Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 8217E69Ch case    2:*/		return 0x8217E6A0;
		  /* 8217E6A0h */ case    3:  		/* bl -18688 */
		/* 8217E6A0h case    3:*/		regs.LR = 0x8217E6A4; return 0x82179DA0;
		/* 8217E6A0h case    3:*/		return 0x8217E6A4;
		  /* 8217E6A4h */ case    4:  		/* mr R27, R3 */
		/* 8217E6A4h case    4:*/		regs.R27 = regs.R3;
		/* 8217E6A4h case    4:*/		return 0x8217E6A8;
		  /* 8217E6A8h */ case    5:  		/* mr R4, R24 */
		/* 8217E6A8h case    5:*/		regs.R4 = regs.R24;
		/* 8217E6A8h case    5:*/		return 0x8217E6AC;
		  /* 8217E6ACh */ case    6:  		/* lwz R5, <#[R24 + 12]> */
		/* 8217E6ACh case    6:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R24 + 0x0000000C) );
		/* 8217E6ACh case    6:*/		return 0x8217E6B0;
		  /* 8217E6B0h */ case    7:  		/* mr R3, R26 */
		/* 8217E6B0h case    7:*/		regs.R3 = regs.R26;
		/* 8217E6B0h case    7:*/		return 0x8217E6B4;
		  /* 8217E6B4h */ case    8:  		/* bl -54724 */
		/* 8217E6B4h case    8:*/		regs.LR = 0x8217E6B8; return 0x821710F0;
		/* 8217E6B4h case    8:*/		return 0x8217E6B8;
		  /* 8217E6B8h */ case    9:  		/* mr R29, R3 */
		/* 8217E6B8h case    9:*/		regs.R29 = regs.R3;
		/* 8217E6B8h case    9:*/		return 0x8217E6BC;
		  /* 8217E6BCh */ case   10:  		/* lwz R11, <#[R27 + 16]> */
		/* 8217E6BCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8217E6BCh case   10:*/		return 0x8217E6C0;
		  /* 8217E6C0h */ case   11:  		/* mr R3, R26 */
		/* 8217E6C0h case   11:*/		regs.R3 = regs.R26;
		/* 8217E6C0h case   11:*/		return 0x8217E6C4;
		  /* 8217E6C4h */ case   12:  		/* lwz R10, <#[R29]> */
		/* 8217E6C4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 8217E6C4h case   12:*/		return 0x8217E6C8;
		  /* 8217E6C8h */ case   13:  		/* rlwimi R10, R11, 25, 4, 6 */
		/* 8217E6C8h case   13:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R10,regs.R11);
		/* 8217E6C8h case   13:*/		return 0x8217E6CC;
		  /* 8217E6CCh */ case   14:  		/* rlwinm R11, R10, 27, 30, 31 */
		/* 8217E6CCh case   14:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R11,regs.R10);
		/* 8217E6CCh case   14:*/		return 0x8217E6D0;
		  /* 8217E6D0h */ case   15:  		/* rlwinm R9, R10, 29, 28, 29 */
		/* 8217E6D0h case   15:*/		cpu::op::rlwinm<0,29,28,29>(regs,&regs.R9,regs.R10);
		/* 8217E6D0h case   15:*/		return 0x8217E6D4;
		  /* 8217E6D4h */ case   16:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 8217E6D4h case   16:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 8217E6D4h case   16:*/		return 0x8217E6D8;
		  /* 8217E6D8h */ case   17:  		/* or R9, R9, R11 */
		/* 8217E6D8h case   17:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 8217E6D8h case   17:*/		return 0x8217E6DC;
		  /* 8217E6DCh */ case   18:  		/* rlwinm R9, R9, 2, 26, 29 */
		/* 8217E6DCh case   18:*/		cpu::op::rlwinm<0,2,26,29>(regs,&regs.R9,regs.R9);
		/* 8217E6DCh case   18:*/		return 0x8217E6E0;
		  /* 8217E6E0h */ case   19:  		/* or R9, R9, R11 */
		/* 8217E6E0h case   19:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 8217E6E0h case   19:*/		return 0x8217E6E4;
		  /* 8217E6E4h */ case   20:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 8217E6E4h case   20:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 8217E6E4h case   20:*/		return 0x8217E6E8;
		  /* 8217E6E8h */ case   21:  		/* or R11, R9, R11 */
		/* 8217E6E8h case   21:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8217E6E8h case   21:*/		return 0x8217E6EC;
		  /* 8217E6ECh */ case   22:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 8217E6ECh case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 8217E6ECh case   22:*/		return 0x8217E6F0;
		  /* 8217E6F0h */ case   23:  		/* or R11, R11, R10 */
		/* 8217E6F0h case   23:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8217E6F0h case   23:*/		return 0x8217E6F4;
		  /* 8217E6F4h */ case   24:  		/* stw R11, <#[R29]> */
		/* 8217E6F4h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8217E6F4h case   24:*/		return 0x8217E6F8;
		  /* 8217E6F8h */ case   25:  		/* lwz R4, <#[R27]> */
		/* 8217E6F8h case   25:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 8217E6F8h case   25:*/		return 0x8217E6FC;
		  /* 8217E6FCh */ case   26:  		/* lwz R11, <#[R27 + 16]> */
		/* 8217E6FCh case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8217E6FCh case   26:*/		return 0x8217E700;
		  /* 8217E700h */ case   27:  		/* rlwinm R30, R11, 0, 29, 31 */
		/* 8217E700h case   27:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R30,regs.R11);
		/* 8217E700h case   27:*/		return 0x8217E704;
		  /* 8217E704h */ case   28:  		/* lwz R20, <#[R27 + 8]> */
		/* 8217E704h case   28:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R27 + 0x00000008) );
		/* 8217E704h case   28:*/		return 0x8217E708;
		  /* 8217E708h */ case   29:  		/* bl -26376 */
		/* 8217E708h case   29:*/		regs.LR = 0x8217E70C; return 0x82178000;
		/* 8217E708h case   29:*/		return 0x8217E70C;
		  /* 8217E70Ch */ case   30:  		/* lwz R11, <#[R3]> */
		/* 8217E70Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217E70Ch case   30:*/		return 0x8217E710;
		  /* 8217E710h */ case   31:  		/* li R4, 0 */
		/* 8217E710h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217E710h case   31:*/		return 0x8217E714;
		  /* 8217E714h */ case   32:  		/* mr R31, R3 */
		/* 8217E714h case   32:*/		regs.R31 = regs.R3;
		/* 8217E714h case   32:*/		return 0x8217E718;
		  /* 8217E718h */ case   33:  		/* rlwimi R11, R30, 25, 4, 6 */
		/* 8217E718h case   33:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R30);
		/* 8217E718h case   33:*/		return 0x8217E71C;
		  /* 8217E71Ch */ case   34:  		/* stw R11, <#[R3]> */
		/* 8217E71Ch case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217E71Ch case   34:*/		return 0x8217E720;
		  /* 8217E720h */ case   35:  		/* bl -27744 */
		/* 8217E720h case   35:*/		regs.LR = 0x8217E724; return 0x82177AC0;
		/* 8217E720h case   35:*/		return 0x8217E724;
		  /* 8217E724h */ case   36:  		/* lwz R11, <#[R31]> */
		/* 8217E724h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217E724h case   36:*/		return 0x8217E728;
		  /* 8217E728h */ case   37:  		/* mr R3, R26 */
		/* 8217E728h case   37:*/		regs.R3 = regs.R26;
		/* 8217E728h case   37:*/		return 0x8217E72C;
		  /* 8217E72Ch */ case   38:  		/* rlwimi R11, R20, 5, 19, 26 */
		/* 8217E72Ch case   38:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R20);
		/* 8217E72Ch case   38:*/		return 0x8217E730;
		  /* 8217E730h */ case   39:  		/* mr R28, R31 */
		/* 8217E730h case   39:*/		regs.R28 = regs.R31;
		/* 8217E730h case   39:*/		return 0x8217E734;
		  /* 8217E734h */ case   40:  		/* stw R11, <#[R31]> */
		/* 8217E734h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217E734h case   40:*/		return 0x8217E738;
		  /* 8217E738h */ case   41:  		/* lwz R4, <#[R27 + 4]> */
		/* 8217E738h case   41:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000004) );
		/* 8217E738h case   41:*/		return 0x8217E73C;
		  /* 8217E73Ch */ case   42:  		/* lwz R11, <#[R27 + 16]> */
		/* 8217E73Ch case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8217E73Ch case   42:*/		return 0x8217E740;
		  /* 8217E740h */ case   43:  		/* rlwinm R20, R11, 0, 29, 31 */
		/* 8217E740h case   43:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R20,regs.R11);
		/* 8217E740h case   43:*/		return 0x8217E744;
		  /* 8217E744h */ case   44:  		/* lwz R19, <#[R27 + 12]> */
		/* 8217E744h case   44:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R27 + 0x0000000C) );
		/* 8217E744h case   44:*/		return 0x8217E748;
		  /* 8217E748h */ case   45:  		/* bl -26440 */
		/* 8217E748h case   45:*/		regs.LR = 0x8217E74C; return 0x82178000;
		/* 8217E748h case   45:*/		return 0x8217E74C;
		  /* 8217E74Ch */ case   46:  		/* lwz R11, <#[R3]> */
		/* 8217E74Ch case   46:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217E74Ch case   46:*/		return 0x8217E750;
		  /* 8217E750h */ case   47:  		/* li R4, 0 */
		/* 8217E750h case   47:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217E750h case   47:*/		return 0x8217E754;
		  /* 8217E754h */ case   48:  		/* mr R30, R3 */
		/* 8217E754h case   48:*/		regs.R30 = regs.R3;
		/* 8217E754h case   48:*/		return 0x8217E758;
		  /* 8217E758h */ case   49:  		/* rlwimi R11, R20, 25, 4, 6 */
		/* 8217E758h case   49:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R20);
		/* 8217E758h case   49:*/		return 0x8217E75C;
		  /* 8217E75Ch */ case   50:  		/* stw R11, <#[R3]> */
		/* 8217E75Ch case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217E75Ch case   50:*/		return 0x8217E760;
		  /* 8217E760h */ case   51:  		/* bl -27808 */
		/* 8217E760h case   51:*/		regs.LR = 0x8217E764; return 0x82177AC0;
		/* 8217E760h case   51:*/		return 0x8217E764;
		  /* 8217E764h */ case   52:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 8217E764h case   52:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 8217E764h case   52:*/		return 0x8217E768;
		  /* 8217E768h */ case   53:  		/* mr R7, R30 */
		/* 8217E768h case   53:*/		regs.R7 = regs.R30;
		/* 8217E768h case   53:*/		return 0x8217E76C;
		  /* 8217E76Ch */ case   54:  		/* lwz R11, <#[R30]> */
		/* 8217E76Ch case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8217E76Ch case   54:*/		return 0x8217E770;
		  /* 8217E770h */ case   55:  		/* rlwimi R11, R19, 5, 19, 26 */
		/* 8217E770h case   55:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R19);
		/* 8217E770h case   55:*/		return 0x8217E774;
		  /* 8217E774h */ case   56:  		/* stw R11, <#[R30]> */
		/* 8217E774h case   56:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8217E774h case   56:*/		return 0x8217E778;
		  /* 8217E778h */ case   57:  		/* bc 4, CR0_EQ, 12 */
		/* 8217E778h case   57:*/		if ( !regs.CR[0].eq ) { return 0x8217E784;  }
		/* 8217E778h case   57:*/		return 0x8217E77C;
		  /* 8217E77Ch */ case   58:  		/* mr R28, R30 */
		/* 8217E77Ch case   58:*/		regs.R28 = regs.R30;
		/* 8217E77Ch case   58:*/		return 0x8217E780;
		  /* 8217E780h */ case   59:  		/* mr R7, R31 */
		/* 8217E780h case   59:*/		regs.R7 = regs.R31;
		/* 8217E780h case   59:*/		return 0x8217E784;
	}
	return 0x8217E784;
} // Block from 8217E694h-8217E784h (60 instructions)

//////////////////////////////////////////////////////
// Block at 8217E784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E784);
		  /* 8217E784h */ case    0:  		/* lwz R11, <#[R27 + 16]> */
		/* 8217E784h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8217E784h case    0:*/		return 0x8217E788;
		  /* 8217E788h */ case    1:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 8217E788h case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 8217E788h case    1:*/		return 0x8217E78C;
		  /* 8217E78Ch */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 8217E78Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217E79C;  }
		/* 8217E78Ch case    2:*/		return 0x8217E790;
		  /* 8217E790h */ case    3:  		/* mr R11, R28 */
		/* 8217E790h case    3:*/		regs.R11 = regs.R28;
		/* 8217E790h case    3:*/		return 0x8217E794;
		  /* 8217E794h */ case    4:  		/* mr R28, R7 */
		/* 8217E794h case    4:*/		regs.R28 = regs.R7;
		/* 8217E794h case    4:*/		return 0x8217E798;
		  /* 8217E798h */ case    5:  		/* mr R7, R11 */
		/* 8217E798h case    5:*/		regs.R7 = regs.R11;
		/* 8217E798h case    5:*/		return 0x8217E79C;
	}
	return 0x8217E79C;
} // Block from 8217E784h-8217E79Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217E79Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E79C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E79C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E79C);
		  /* 8217E79Ch */ case    0:  		/* lwz R11, <#[R23 + 8]> */
		/* 8217E79Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 8217E79Ch case    0:*/		return 0x8217E7A0;
		  /* 8217E7A0h */ case    1:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217E7A0h case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217E7A0h case    1:*/		return 0x8217E7A4;
		  /* 8217E7A4h */ case    2:  		/* cmpwi CR6, R11, 59 */
		/* 8217E7A4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003B);
		/* 8217E7A4h case    2:*/		return 0x8217E7A8;
		  /* 8217E7A8h */ case    3:  		/* bc 12, CR6_GT, 52 */
		/* 8217E7A8h case    3:*/		if ( regs.CR[6].gt ) { return 0x8217E7DC;  }
		/* 8217E7A8h case    3:*/		return 0x8217E7AC;
		  /* 8217E7ACh */ case    4:  		/* bc 12, CR6_EQ, 36 */
		/* 8217E7ACh case    4:*/		if ( regs.CR[6].eq ) { return 0x8217E7D0;  }
		/* 8217E7ACh case    4:*/		return 0x8217E7B0;
		  /* 8217E7B0h */ case    5:  		/* cmpwi CR6, R11, 21 */
		/* 8217E7B0h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000015);
		/* 8217E7B0h case    5:*/		return 0x8217E7B4;
		  /* 8217E7B4h */ case    6:  		/* bc 12, CR6_EQ, 28 */
		/* 8217E7B4h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217E7D0;  }
		/* 8217E7B4h case    6:*/		return 0x8217E7B8;
		  /* 8217E7B8h */ case    7:  		/* cmpwi CR6, R11, 22 */
		/* 8217E7B8h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000016);
		/* 8217E7B8h case    7:*/		return 0x8217E7BC;
		  /* 8217E7BCh */ case    8:  		/* bc 12, CR6_EQ, 120 */
		/* 8217E7BCh case    8:*/		if ( regs.CR[6].eq ) { return 0x8217E834;  }
		/* 8217E7BCh case    8:*/		return 0x8217E7C0;
		  /* 8217E7C0h */ case    9:  		/* cmpwi CR6, R11, 23 */
		/* 8217E7C0h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000017);
		/* 8217E7C0h case    9:*/		return 0x8217E7C4;
		  /* 8217E7C4h */ case   10:  		/* bc 12, CR6_EQ, 80 */
		/* 8217E7C4h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217E814;  }
		/* 8217E7C4h case   10:*/		return 0x8217E7C8;
		  /* 8217E7C8h */ case   11:  		/* cmpwi CR6, R11, 24 */
		/* 8217E7C8h case   11:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000018);
		/* 8217E7C8h case   11:*/		return 0x8217E7CC;
		  /* 8217E7CCh */ case   12:  		/* b 36 */
		/* 8217E7CCh case   12:*/		return 0x8217E7F0;
		/* 8217E7CCh case   12:*/		return 0x8217E7D0;
	}
	return 0x8217E7D0;
} // Block from 8217E79Ch-8217E7D0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217E7D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E7D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E7D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E7D0);
		  /* 8217E7D0h */ case    0:  		/* mr R8, R7 */
		/* 8217E7D0h case    0:*/		regs.R8 = regs.R7;
		/* 8217E7D0h case    0:*/		return 0x8217E7D4;
		  /* 8217E7D4h */ case    1:  		/* mr R7, R28 */
		/* 8217E7D4h case    1:*/		regs.R7 = regs.R28;
		/* 8217E7D4h case    1:*/		return 0x8217E7D8;
		  /* 8217E7D8h */ case    2:  		/* b 96 */
		/* 8217E7D8h case    2:*/		return 0x8217E838;
		/* 8217E7D8h case    2:*/		return 0x8217E7DC;
	}
	return 0x8217E7DC;
} // Block from 8217E7D0h-8217E7DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217E7DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E7DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E7DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E7DC);
		  /* 8217E7DCh */ case    0:  		/* cmpwi CR6, R11, 60 */
		/* 8217E7DCh case    0:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003C);
		/* 8217E7DCh case    0:*/		return 0x8217E7E0;
		  /* 8217E7E0h */ case    1:  		/* bc 12, CR6_EQ, 84 */
		/* 8217E7E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217E834;  }
		/* 8217E7E0h case    1:*/		return 0x8217E7E4;
		  /* 8217E7E4h */ case    2:  		/* cmpwi CR6, R11, 61 */
		/* 8217E7E4h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003D);
		/* 8217E7E4h case    2:*/		return 0x8217E7E8;
	}
	return 0x8217E7E8;
} // Block from 8217E7DCh-8217E7E8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217E7E8h
// Function '?MarkThreadDependentInstruction@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E7E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E7E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E7E8);
		  /* 8217E7E8h */ case    0:  		/* bc 12, CR6_EQ, 44 */
		/* 8217E7E8h case    0:*/		if ( regs.CR[6].eq ) { return 0x8217E814;  }
		/* 8217E7E8h case    0:*/		return 0x8217E7EC;
		  /* 8217E7ECh */ case    1:  		/* cmpwi CR6, R11, 62 */
		/* 8217E7ECh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000003E);
		/* 8217E7ECh case    1:*/		return 0x8217E7F0;
	}
	return 0x8217E7F0;
} // Block from 8217E7E8h-8217E7F0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217E7F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E7F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E7F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E7F0);
		  /* 8217E7F0h */ case    0:  		/* mr R3, R26 */
		/* 8217E7F0h case    0:*/		regs.R3 = regs.R26;
		/* 8217E7F0h case    0:*/		return 0x8217E7F4;
		  /* 8217E7F4h */ case    1:  		/* bc 4, CR6_EQ, 568 */
		/* 8217E7F4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217EA2C;  }
		/* 8217E7F4h case    1:*/		return 0x8217E7F8;
		  /* 8217E7F8h */ case    2:  		/* mr R8, R7 */
		/* 8217E7F8h case    2:*/		regs.R8 = regs.R7;
		/* 8217E7F8h case    2:*/		return 0x8217E7FC;
		  /* 8217E7FCh */ case    3:  		/* mr R7, R28 */
		/* 8217E7FCh case    3:*/		regs.R7 = regs.R28;
		/* 8217E7FCh case    3:*/		return 0x8217E800;
		  /* 8217E800h */ case    4:  		/* mr R6, R29 */
		/* 8217E800h case    4:*/		regs.R6 = regs.R29;
		/* 8217E800h case    4:*/		return 0x8217E804;
		  /* 8217E804h */ case    5:  		/* li R5, 0 */
		/* 8217E804h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217E804h case    5:*/		return 0x8217E808;
		  /* 8217E808h */ case    6:  		/* mr R4, R25 */
		/* 8217E808h case    6:*/		regs.R4 = regs.R25;
		/* 8217E808h case    6:*/		return 0x8217E80C;
		  /* 8217E80Ch */ case    7:  		/* bl -18372 */
		/* 8217E80Ch case    7:*/		regs.LR = 0x8217E810; return 0x8217A048;
		/* 8217E80Ch case    7:*/		return 0x8217E810;
		  /* 8217E810h */ case    8:  		/* b 60 */
		/* 8217E810h case    8:*/		return 0x8217E84C;
		/* 8217E810h case    8:*/		return 0x8217E814;
	}
	return 0x8217E814;
} // Block from 8217E7F0h-8217E814h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217E814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E814);
		  /* 8217E814h */ case    0:  		/* mr R8, R7 */
		/* 8217E814h case    0:*/		regs.R8 = regs.R7;
		/* 8217E814h case    0:*/		return 0x8217E818;
		  /* 8217E818h */ case    1:  		/* mr R7, R28 */
		/* 8217E818h case    1:*/		regs.R7 = regs.R28;
		/* 8217E818h case    1:*/		return 0x8217E81C;
		  /* 8217E81Ch */ case    2:  		/* mr R6, R29 */
		/* 8217E81Ch case    2:*/		regs.R6 = regs.R29;
		/* 8217E81Ch case    2:*/		return 0x8217E820;
		  /* 8217E820h */ case    3:  		/* li R5, 0 */
		/* 8217E820h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217E820h case    3:*/		return 0x8217E824;
		  /* 8217E824h */ case    4:  		/* mr R4, R25 */
		/* 8217E824h case    4:*/		regs.R4 = regs.R25;
		/* 8217E824h case    4:*/		return 0x8217E828;
		  /* 8217E828h */ case    5:  		/* mr R3, R26 */
		/* 8217E828h case    5:*/		regs.R3 = regs.R26;
		/* 8217E828h case    5:*/		return 0x8217E82C;
		  /* 8217E82Ch */ case    6:  		/* bl -18116 */
		/* 8217E82Ch case    6:*/		regs.LR = 0x8217E830; return 0x8217A168;
		/* 8217E82Ch case    6:*/		return 0x8217E830;
		  /* 8217E830h */ case    7:  		/* b 28 */
		/* 8217E830h case    7:*/		return 0x8217E84C;
		/* 8217E830h case    7:*/		return 0x8217E834;
	}
	return 0x8217E834;
} // Block from 8217E814h-8217E834h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217E834h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E834( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E834) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E834);
		  /* 8217E834h */ case    0:  		/* mr R8, R28 */
		/* 8217E834h case    0:*/		regs.R8 = regs.R28;
		/* 8217E834h case    0:*/		return 0x8217E838;
	}
	return 0x8217E838;
} // Block from 8217E834h-8217E838h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217E838h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E838( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E838) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E838);
		  /* 8217E838h */ case    0:  		/* mr R6, R29 */
		/* 8217E838h case    0:*/		regs.R6 = regs.R29;
		/* 8217E838h case    0:*/		return 0x8217E83C;
		  /* 8217E83Ch */ case    1:  		/* li R5, 0 */
		/* 8217E83Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217E83Ch case    1:*/		return 0x8217E840;
		  /* 8217E840h */ case    2:  		/* mr R4, R25 */
		/* 8217E840h case    2:*/		regs.R4 = regs.R25;
		/* 8217E840h case    2:*/		return 0x8217E844;
		  /* 8217E844h */ case    3:  		/* mr R3, R26 */
		/* 8217E844h case    3:*/		regs.R3 = regs.R26;
		/* 8217E844h case    3:*/		return 0x8217E848;
		  /* 8217E848h */ case    4:  		/* bl -18720 */
		/* 8217E848h case    4:*/		regs.LR = 0x8217E84C; return 0x82179F28;
		/* 8217E848h case    4:*/		return 0x8217E84C;
	}
	return 0x8217E84C;
} // Block from 8217E838h-8217E84Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217E84Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E84C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E84C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E84C);
		  /* 8217E84Ch */ case    0:  		/* rlwinm R11, R3, 0, 0, 30 */
		/* 8217E84Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R3);
		/* 8217E84Ch case    0:*/		return 0x8217E850;
		  /* 8217E850h */ case    1:  		/* lwz R8, <#[R25 + 28]> */
		/* 8217E850h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 8217E850h case    1:*/		return 0x8217E854;
		  /* 8217E854h */ case    2:  		/* addi R10, R25, 24 */
		/* 8217E854h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0x18);
		/* 8217E854h case    2:*/		return 0x8217E858;
		  /* 8217E858h */ case    3:  		/* addi R11, R11, 36 */
		/* 8217E858h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 8217E858h case    3:*/		return 0x8217E85C;
		  /* 8217E85Ch */ case    4:  		/* addi R10, R10, 4 */
		/* 8217E85Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8217E85Ch case    4:*/		return 0x8217E860;
		  /* 8217E860h */ case    5:  		/* addi R9, R11, 4 */
		/* 8217E860h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8217E860h case    5:*/		return 0x8217E864;
		  /* 8217E864h */ case    6:  		/* ori R10, R10, 1 */
		/* 8217E864h case    6:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217E864h case    6:*/		return 0x8217E868;
		  /* 8217E868h */ case    7:  		/* addi R7, R11, -36 */
		/* 8217E868h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFDC);
		/* 8217E868h case    7:*/		return 0x8217E86C;
		  /* 8217E86Ch */ case    8:  		/* stw R8, <#[R11 + 4]> */
		/* 8217E86Ch case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 8217E86Ch case    8:*/		return 0x8217E870;
		  /* 8217E870h */ case    9:  		/* mr R31, R3 */
		/* 8217E870h case    9:*/		regs.R31 = regs.R3;
		/* 8217E870h case    9:*/		return 0x8217E874;
		  /* 8217E874h */ case   10:  		/* lwz R8, <#[R25 + 28]> */
		/* 8217E874h case   10:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 8217E874h case   10:*/		return 0x8217E878;
		  /* 8217E878h */ case   11:  		/* rlwinm R8, R8, 0, 0, 30 */
		/* 8217E878h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R8,regs.R8);
		/* 8217E878h case   11:*/		return 0x8217E87C;
		  /* 8217E87Ch */ case   12:  		/* stw R9, <#[R8 + 36]> */
		/* 8217E87Ch case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R8 + 0x00000024) );
		/* 8217E87Ch case   12:*/		return 0x8217E880;
		  /* 8217E880h */ case   13:  		/* stw R10, <#[R11]> */
		/* 8217E880h case   13:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217E880h case   13:*/		return 0x8217E884;
		  /* 8217E884h */ case   14:  		/* stw R7, <#[R25 + 28]> */
		/* 8217E884h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R25 + 0x0000001C) );
		/* 8217E884h case   14:*/		return 0x8217E888;
		  /* 8217E888h */ case   15:  		/* lwz R11, <#[R29]> */
		/* 8217E888h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8217E888h case   15:*/		return 0x8217E88C;
		  /* 8217E88Ch */ case   16:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 8217E88Ch case   16:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 8217E88Ch case   16:*/		return 0x8217E890;
		  /* 8217E890h */ case   17:  		/* bc 12, CR0_EQ, 52 */
		/* 8217E890h case   17:*/		if ( regs.CR[0].eq ) { return 0x8217E8C4;  }
		/* 8217E890h case   17:*/		return 0x8217E894;
		  /* 8217E894h */ case   18:  		/* lwz R11, <#[R26 + 40]> */
		/* 8217E894h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000028) );
		/* 8217E894h case   18:*/		return 0x8217E898;
		  /* 8217E898h */ case   19:  		/* rlwinm. R11, R11, 0, 17, 17 */
		/* 8217E898h case   19:*/		cpu::op::rlwinm<1,0,17,17>(regs,&regs.R11,regs.R11);
		/* 8217E898h case   19:*/		return 0x8217E89C;
		  /* 8217E89Ch */ case   20:  		/* bc 12, CR0_EQ, 40 */
		/* 8217E89Ch case   20:*/		if ( regs.CR[0].eq ) { return 0x8217E8C4;  }
		/* 8217E89Ch case   20:*/		return 0x8217E8A0;
		  /* 8217E8A0h */ case   21:  		/* mr R3, R23 */
		/* 8217E8A0h case   21:*/		regs.R3 = regs.R23;
		/* 8217E8A0h case   21:*/		return 0x8217E8A4;
		  /* 8217E8A4h */ case   22:  		/* bl -28044 */
		/* 8217E8A4h case   22:*/		regs.LR = 0x8217E8A8; return 0x82177B18;
		/* 8217E8A4h case   22:*/		return 0x8217E8A8;
		  /* 8217E8A8h */ case   23:  		/* mr R4, R3 */
		/* 8217E8A8h case   23:*/		regs.R4 = regs.R3;
		/* 8217E8A8h case   23:*/		return 0x8217E8AC;
		  /* 8217E8ACh */ case   24:  		/* mr R3, R26 */
		/* 8217E8ACh case   24:*/		regs.R3 = regs.R26;
		/* 8217E8ACh case   24:*/		return 0x8217E8B0;
		  /* 8217E8B0h */ case   25:  		/* li R5, 0 */
		/* 8217E8B0h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217E8B0h case   25:*/		return 0x8217E8B4;
		  /* 8217E8B4h */ case   26:  		/* bl -57700 */
		/* 8217E8B4h case   26:*/		regs.LR = 0x8217E8B8; return 0x82170750;
		/* 8217E8B4h case   26:*/		return 0x8217E8B8;
		  /* 8217E8B8h */ case   27:  		/* mr R4, R3 */
		/* 8217E8B8h case   27:*/		regs.R4 = regs.R3;
		/* 8217E8B8h case   27:*/		return 0x8217E8BC;
		  /* 8217E8BCh */ case   28:  		/* mr R3, R31 */
		/* 8217E8BCh case   28:*/		regs.R3 = regs.R31;
		/* 8217E8BCh case   28:*/		return 0x8217E8C0;
		  /* 8217E8C0h */ case   29:  		/* bl -26360 */
		/* 8217E8C0h case   29:*/		regs.LR = 0x8217E8C4; return 0x821781C8;
		/* 8217E8C0h case   29:*/		return 0x8217E8C4;
	}
	return 0x8217E8C4;
} // Block from 8217E84Ch-8217E8C4h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8217E8C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E8C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E8C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E8C4);
		  /* 8217E8C4h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 8217E8C4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 8217E8C4h case    0:*/		return 0x8217E8C8;
		  /* 8217E8C8h */ case    1:  		/* bc 12, CR6_EQ, 112 */
		/* 8217E8C8h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217E938;  }
		/* 8217E8C8h case    1:*/		return 0x8217E8CC;
		  /* 8217E8CCh */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217E8CCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217E8CCh case    2:*/		return 0x8217E8D0;
		  /* 8217E8D0h */ case    3:  		/* oris R11, R11, 128 */
		/* 8217E8D0h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 8217E8D0h case    3:*/		return 0x8217E8D4;
		  /* 8217E8D4h */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 8217E8D4h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217E8D4h case    4:*/		return 0x8217E8D8;
	}
	return 0x8217E8D8;
} // Block from 8217E8C4h-8217E8D8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217E8D8h
// Function '?MarkThreadDependentPHIs@Compiler@D3DXShader@@AAAXPAVBlock@2@0PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E8D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E8D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E8D8);
		  /* 8217E8D8h */ case    0:  		/* lwz R11, <#[R27 + 20]> */
		/* 8217E8D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000014) );
		/* 8217E8D8h case    0:*/		return 0x8217E8DC;
		  /* 8217E8DCh */ case    1:  		/* lwz R11, <#[R11 + 16]> */
		/* 8217E8DCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000010) );
		/* 8217E8DCh case    1:*/		return 0x8217E8E0;
		  /* 8217E8E0h */ case    2:  		/* sth R11, <#[R31 + 18]> */
		/* 8217E8E0h case    2:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000012) );
		/* 8217E8E0h case    2:*/		return 0x8217E8E4;
		  /* 8217E8E4h */ case    3:  		/* lwz R11, <#[R21 + 4]> */
		/* 8217E8E4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 8217E8E4h case    3:*/		return 0x8217E8E8;
		  /* 8217E8E8h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217E8E8h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217E8E8h case    4:*/		return 0x8217E8EC;
		  /* 8217E8ECh */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 8217E8ECh case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217E914;  }
		/* 8217E8ECh case    5:*/		return 0x8217E8F0;
		  /* 8217E8F0h */ case    6:  		/* lwz R11, <#[R21]> */
		/* 8217E8F0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 8217E8F0h case    6:*/		return 0x8217E8F4;
		  /* 8217E8F4h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217E8F4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217E8F4h case    7:*/		return 0x8217E8F8;
		  /* 8217E8F8h */ case    8:  		/* addic. R3, R11, -4 */
		/* 8217E8F8h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8217E8F8h case    8:*/		return 0x8217E8FC;
		  /* 8217E8FCh */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 8217E8FCh case    9:*/		if ( regs.CR[0].eq ) { return 0x8217E914;  }
		/* 8217E8FCh case    9:*/		return 0x8217E900;
		  /* 8217E900h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217E900h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E900h case   10:*/		return 0x8217E904;
		  /* 8217E904h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 8217E904h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217E904h case   11:*/		return 0x8217E908;
		  /* 8217E908h */ case   12:  		/* addi R11, R11, 1 */
		/* 8217E908h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217E908h case   12:*/		return 0x8217E90C;
		  /* 8217E90Ch */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 8217E90Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217E90Ch case   13:*/		return 0x8217E910;
		  /* 8217E910h */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 8217E910h case   14:*/		if ( !regs.CR[6].gt ) { return 0x8217E920;  }
		/* 8217E910h case   14:*/		return 0x8217E914;
	}
	return 0x8217E914;
} // Block from 8217E8D8h-8217E914h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217E914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E914);
		  /* 8217E914h */ case    0:  		/* li R4, 1 */
		/* 8217E914h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217E914h case    0:*/		return 0x8217E918;
		  /* 8217E918h */ case    1:  		/* mr R3, R21 */
		/* 8217E918h case    1:*/		regs.R3 = regs.R21;
		/* 8217E918h case    1:*/		return 0x8217E91C;
		  /* 8217E91Ch */ case    2:  		/* bl 59308 */
		/* 8217E91Ch case    2:*/		regs.LR = 0x8217E920; return 0x8218D0C8;
		/* 8217E91Ch case    2:*/		return 0x8217E920;
	}
	return 0x8217E920;
} // Block from 8217E914h-8217E920h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217E920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E920);
		  /* 8217E920h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217E920h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E920h case    0:*/		return 0x8217E924;
		  /* 8217E924h */ case    1:  		/* addi R10, R11, 4 */
		/* 8217E924h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217E924h case    1:*/		return 0x8217E928;
		  /* 8217E928h */ case    2:  		/* addi R9, R11, 1 */
		/* 8217E928h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 8217E928h case    2:*/		return 0x8217E92C;
		  /* 8217E92Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 8217E92Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 8217E92Ch case    3:*/		return 0x8217E930;
		  /* 8217E930h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 8217E930h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 8217E930h case    4:*/		return 0x8217E934;
		  /* 8217E934h */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 8217E934h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 8217E934h case    5:*/		return 0x8217E938;
	}
	return 0x8217E938;
} // Block from 8217E920h-8217E938h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217E938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E938);
		  /* 8217E938h */ case    0:  		/* lwz R11, <#[R27 + 16]> */
		/* 8217E938h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8217E938h case    0:*/		return 0x8217E93C;
		  /* 8217E93Ch */ case    1:  		/* li R30, 0 */
		/* 8217E93Ch case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8217E93Ch case    1:*/		return 0x8217E940;
		  /* 8217E940h */ case    2:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 8217E940h case    2:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8217E940h case    2:*/		return 0x8217E944;
		  /* 8217E944h */ case    3:  		/* bc 12, CR0_EQ, -724 */
		/* 8217E944h case    3:*/		if ( regs.CR[0].eq ) { return 0x8217E670;  }
		/* 8217E944h case    3:*/		return 0x8217E948;
		  /* 8217E948h */ case    4:  		/* addi R29, R27, 20 */
		/* 8217E948h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x14);
		/* 8217E948h case    4:*/		return 0x8217E94C;
		  /* 8217E94Ch */ case    5:  		/* lwz R4, <#[R29]> */
		/* 8217E94Ch case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 8217E94Ch case    5:*/		return 0x8217E950;
		  /* 8217E950h */ case    6:  		/* addi R8, R4, 4 */
		/* 8217E950h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R4,0x4);
		/* 8217E950h case    6:*/		return 0x8217E954;
		  /* 8217E954h */ case    7:  		/* lwz R11, <#[R8]> */
		/* 8217E954h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8217E954h case    7:*/		return 0x8217E958;
		  /* 8217E958h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 8217E958h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217E958h case    8:*/		return 0x8217E95C;
		  /* 8217E95Ch */ case    9:  		/* bc 12, CR6_EQ, 164 */
		/* 8217E95Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8217EA00;  }
		/* 8217E95Ch case    9:*/		return 0x8217E960;
		  /* 8217E960h */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 8217E960h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 8217E960h case   10:*/		return 0x8217E964;
		  /* 8217E964h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 8217E964h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217E964h case   11:*/		return 0x8217E968;
		  /* 8217E968h */ case   12:  		/* bc 12, CR6_EQ, 132 */
		/* 8217E968h case   12:*/		if ( regs.CR[6].eq ) { return 0x8217E9EC;  }
		/* 8217E968h case   12:*/		return 0x8217E96C;
		  /* 8217E96Ch */ case   13:  		/* lwz R10, <#[R11 + 12]> */
		/* 8217E96Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217E96Ch case   13:*/		return 0x8217E970;
		  /* 8217E970h */ case   14:  		/* addi R10, R10, 4 */
		/* 8217E970h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 8217E970h case   14:*/		return 0x8217E974;
		  /* 8217E974h */ case   15:  		/* lwz R9, <#[R10]> */
		/* 8217E974h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217E974h case   15:*/		return 0x8217E978;
		  /* 8217E978h */ case   16:  		/* b 12 */
		/* 8217E978h case   16:*/		return 0x8217E984;
		/* 8217E978h case   16:*/		return 0x8217E97C;
		  /* 8217E97Ch */ case   17:  		/* addi R10, R9, 8 */
		/* 8217E97Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 8217E97Ch case   17:*/		return 0x8217E980;
		  /* 8217E980h */ case   18:  		/* lwz R9, <#[R9 + 8]> */
		/* 8217E980h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 8217E980h case   18:*/		return 0x8217E984;
	}
	return 0x8217E984;
} // Block from 8217E938h-8217E984h (19 instructions)

//////////////////////////////////////////////////////
// Block at 8217E984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E984);
		  /* 8217E984h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 8217E984h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8217E984h case    0:*/		return 0x8217E988;
		  /* 8217E988h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8217E988h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217E97C;  }
		/* 8217E988h case    1:*/		return 0x8217E98C;
		  /* 8217E98Ch */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 8217E98Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 8217E98Ch case    2:*/		return 0x8217E990;
		  /* 8217E990h */ case    3:  		/* ori R7, R30, 228 */
		/* 8217E990h case    3:*/		cpu::op::ori<0>(regs,&regs.R7,regs.R30,0xE4);
		/* 8217E990h case    3:*/		return 0x8217E994;
		  /* 8217E994h */ case    4:  		/* stw R9, <#[R10]> */
		/* 8217E994h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217E994h case    4:*/		return 0x8217E998;
		  /* 8217E998h */ case    5:  		/* lwz R10, <#[R31 + 4]> */
		/* 8217E998h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 8217E998h case    5:*/		return 0x8217E99C;
		  /* 8217E99Ch */ case    6:  		/* stw R10, <#[R11 + 8]> */
		/* 8217E99Ch case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217E99Ch case    6:*/		return 0x8217E9A0;
		  /* 8217E9A0h */ case    7:  		/* stw R11, <#[R31 + 4]> */
		/* 8217E9A0h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 8217E9A0h case    7:*/		return 0x8217E9A4;
		  /* 8217E9A4h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 8217E9A4h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217E9A4h case    8:*/		return 0x8217E9A8;
		  /* 8217E9A8h */ case    9:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 8217E9A8h case    9:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 8217E9A8h case    9:*/		return 0x8217E9AC;
		  /* 8217E9ACh */ case   10:  		/* rlwinm R6, R10, 24, 29, 30 */
		/* 8217E9ACh case   10:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R6,regs.R10);
		/* 8217E9ACh case   10:*/		return 0x8217E9B0;
		  /* 8217E9B0h */ case   11:  		/* stw R31, <#[R11 + 12]> */
		/* 8217E9B0h case   11:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217E9B0h case   11:*/		return 0x8217E9B4;
		  /* 8217E9B4h */ case   12:  		/* srw R9, R7, R9 */
		/* 8217E9B4h case   12:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8217E9B4h case   12:*/		return 0x8217E9B8;
		  /* 8217E9B8h */ case   13:  		/* srw R6, R7, R6 */
		/* 8217E9B8h case   13:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R7,regs.R6);
		/* 8217E9B8h case   13:*/		return 0x8217E9BC;
		  /* 8217E9BCh */ case   14:  		/* rlwimi R6, R9, 2, 28, 29 */
		/* 8217E9BCh case   14:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R6,regs.R9);
		/* 8217E9BCh case   14:*/		return 0x8217E9C0;
		  /* 8217E9C0h */ case   15:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 8217E9C0h case   15:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 8217E9C0h case   15:*/		return 0x8217E9C4;
		  /* 8217E9C4h */ case   16:  		/* rlwinm R5, R10, 28, 29, 30 */
		/* 8217E9C4h case   16:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R5,regs.R10);
		/* 8217E9C4h case   16:*/		return 0x8217E9C8;
		  /* 8217E9C8h */ case   17:  		/* srw R9, R7, R9 */
		/* 8217E9C8h case   17:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 8217E9C8h case   17:*/		return 0x8217E9CC;
		  /* 8217E9CCh */ case   18:  		/* rlwinm R6, R6, 0, 28, 31 */
		/* 8217E9CCh case   18:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R6,regs.R6);
		/* 8217E9CCh case   18:*/		return 0x8217E9D0;
		  /* 8217E9D0h */ case   19:  		/* srw R7, R7, R5 */
		/* 8217E9D0h case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 8217E9D0h case   19:*/		return 0x8217E9D4;
		  /* 8217E9D4h */ case   20:  		/* rlwimi R9, R6, 2, 0, 29 */
		/* 8217E9D4h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R6);
		/* 8217E9D4h case   20:*/		return 0x8217E9D8;
		  /* 8217E9D8h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 8217E9D8h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 8217E9D8h case   21:*/		return 0x8217E9DC;
		  /* 8217E9DCh */ case   22:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 8217E9DCh case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 8217E9DCh case   22:*/		return 0x8217E9E0;
		  /* 8217E9E0h */ case   23:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 8217E9E0h case   23:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 8217E9E0h case   23:*/		return 0x8217E9E4;
		  /* 8217E9E4h */ case   24:  		/* or R10, R9, R10 */
		/* 8217E9E4h case   24:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8217E9E4h case   24:*/		return 0x8217E9E8;
		  /* 8217E9E8h */ case   25:  		/* stw R10, <#[R11]> */
		/* 8217E9E8h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217E9E8h case   25:*/		return 0x8217E9EC;
	}
	return 0x8217E9EC;
} // Block from 8217E984h-8217E9ECh (26 instructions)

//////////////////////////////////////////////////////
// Block at 8217E9ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217E9EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217E9EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217E9EC);
		  /* 8217E9ECh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 8217E9ECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 8217E9ECh case    0:*/		return 0x8217E9F0;
		  /* 8217E9F0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 8217E9F0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8217E9F0h case    1:*/		return 0x8217E9F4;
		  /* 8217E9F4h */ case    2:  		/* bc 4, CR6_EQ, -160 */
		/* 8217E9F4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217E954;  }
		/* 8217E9F4h case    2:*/		return 0x8217E9F8;
		  /* 8217E9F8h */ case    3:  		/* addi R8, R11, 8 */
		/* 8217E9F8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 8217E9F8h case    3:*/		return 0x8217E9FC;
		  /* 8217E9FCh */ case    4:  		/* b -168 */
		/* 8217E9FCh case    4:*/		return 0x8217E954;
		/* 8217E9FCh case    4:*/		return 0x8217EA00;
	}
	return 0x8217EA00;
} // Block from 8217E9ECh-8217EA00h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217EA00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EA00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EA00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EA00);
		  /* 8217EA00h */ case    0:  		/* li R6, 1 */
		/* 8217EA00h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217EA00h case    0:*/		return 0x8217EA04;
		  /* 8217EA04h */ case    1:  		/* li R5, 0 */
		/* 8217EA04h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217EA04h case    1:*/		return 0x8217EA08;
		  /* 8217EA08h */ case    2:  		/* mr R3, R26 */
		/* 8217EA08h case    2:*/		regs.R3 = regs.R26;
		/* 8217EA08h case    2:*/		return 0x8217EA0C;
		  /* 8217EA0Ch */ case    3:  		/* bl 707004 */
		/* 8217EA0Ch case    3:*/		regs.LR = 0x8217EA10; return 0x8222B3C8;
		/* 8217EA0Ch case    3:*/		return 0x8217EA10;
		  /* 8217EA10h */ case    4:  		/* lwz R11, <#[R27 + 16]> */
		/* 8217EA10h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 8217EA10h case    4:*/		return 0x8217EA14;
		  /* 8217EA14h */ case    5:  		/* addi R30, R30, 1 */
		/* 8217EA14h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 8217EA14h case    5:*/		return 0x8217EA18;
		  /* 8217EA18h */ case    6:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 8217EA18h case    6:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 8217EA18h case    6:*/		return 0x8217EA1C;
		  /* 8217EA1Ch */ case    7:  		/* addi R29, R29, 4 */
		/* 8217EA1Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 8217EA1Ch case    7:*/		return 0x8217EA20;
		  /* 8217EA20h */ case    8:  		/* cmplw CR6, R30, R11 */
		/* 8217EA20h case    8:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 8217EA20h case    8:*/		return 0x8217EA24;
		  /* 8217EA24h */ case    9:  		/* bc 12, CR6_LT, -216 */
		/* 8217EA24h case    9:*/		if ( regs.CR[6].lt ) { return 0x8217E94C;  }
		/* 8217EA24h case    9:*/		return 0x8217EA28;
		  /* 8217EA28h */ case   10:  		/* b -952 */
		/* 8217EA28h case   10:*/		return 0x8217E670;
		/* 8217EA28h case   10:*/		return 0x8217EA2C;
	}
	return 0x8217EA2C;
} // Block from 8217EA00h-8217EA2Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217EA2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EA2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EA2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EA2C);
		  /* 8217EA2Ch */ case    0:  		/* li R4, 4800 */
		/* 8217EA2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217EA2Ch case    0:*/		return 0x8217EA30;
		  /* 8217EA30h */ case    1:  		/* bl -183240 */
		/* 8217EA30h case    1:*/		regs.LR = 0x8217EA34; return 0x82151E68;
		/* 8217EA30h case    1:*/		return 0x8217EA34;
	}
	return 0x8217EA34;
} // Block from 8217EA2Ch-8217EA34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217EA34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EA34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EA34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EA34);
		  /* 8217EA34h */ case    0:  		/* addi R1, R1, 208 */
		/* 8217EA34h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 8217EA34h case    0:*/		return 0x8217EA38;
		  /* 8217EA38h */ case    1:  		/* b -972724 */
		/* 8217EA38h case    1:*/		return 0x82091284;
		/* 8217EA38h case    1:*/		return 0x8217EA3C;
		  /* 8217EA3Ch */ case    2:  		/* nop */
		/* 8217EA3Ch case    2:*/		cpu::op::nop();
		/* 8217EA3Ch case    2:*/		return 0x8217EA40;
	}
	return 0x8217EA40;
} // Block from 8217EA34h-8217EA40h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217EA40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EA40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EA40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EA40);
		  /* 8217EA40h */ case    0:  		/* mfspr R12, LR */
		/* 8217EA40h case    0:*/		regs.R12 = regs.LR;
		/* 8217EA40h case    0:*/		return 0x8217EA44;
		  /* 8217EA44h */ case    1:  		/* bl -972812 */
		/* 8217EA44h case    1:*/		regs.LR = 0x8217EA48; return 0x82091238;
		/* 8217EA44h case    1:*/		return 0x8217EA48;
		  /* 8217EA48h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 8217EA48h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 8217EA48h case    2:*/		return 0x8217EA4C;
		  /* 8217EA4Ch */ case    3:  		/* mr R21, R5 */
		/* 8217EA4Ch case    3:*/		regs.R21 = regs.R5;
		/* 8217EA4Ch case    3:*/		return 0x8217EA50;
		  /* 8217EA50h */ case    4:  		/* li R5, 8 */
		/* 8217EA50h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x8);
		/* 8217EA50h case    4:*/		return 0x8217EA54;
		  /* 8217EA54h */ case    5:  		/* li R4, 8 */
		/* 8217EA54h case    5:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8217EA54h case    5:*/		return 0x8217EA58;
		  /* 8217EA58h */ case    6:  		/* mr R28, R3 */
		/* 8217EA58h case    6:*/		regs.R28 = regs.R3;
		/* 8217EA58h case    6:*/		return 0x8217EA5C;
		  /* 8217EA5Ch */ case    7:  		/* mr R20, R6 */
		/* 8217EA5Ch case    7:*/		regs.R20 = regs.R6;
		/* 8217EA5Ch case    7:*/		return 0x8217EA60;
		  /* 8217EA60h */ case    8:  		/* mr R23, R7 */
		/* 8217EA60h case    8:*/		regs.R23 = regs.R7;
		/* 8217EA60h case    8:*/		return 0x8217EA64;
		  /* 8217EA64h */ case    9:  		/* mr R22, R8 */
		/* 8217EA64h case    9:*/		regs.R22 = regs.R8;
		/* 8217EA64h case    9:*/		return 0x8217EA68;
		  /* 8217EA68h */ case   10:  		/* mr R24, R9 */
		/* 8217EA68h case   10:*/		regs.R24 = regs.R9;
		/* 8217EA68h case   10:*/		return 0x8217EA6C;
		  /* 8217EA6Ch */ case   11:  		/* bl -106876 */
		/* 8217EA6Ch case   11:*/		regs.LR = 0x8217EA70; return 0x821648F0;
		/* 8217EA6Ch case   11:*/		return 0x8217EA70;
		  /* 8217EA70h */ case   12:  		/* addi R25, R3, 4 */
		/* 8217EA70h case   12:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 8217EA70h case   12:*/		return 0x8217EA74;
		  /* 8217EA74h */ case   13:  		/* ori R11, R3, 1 */
		/* 8217EA74h case   13:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8217EA74h case   13:*/		return 0x8217EA78;
		  /* 8217EA78h */ case   14:  		/* ori R10, R25, 1 */
		/* 8217EA78h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R25,0x1);
		/* 8217EA78h case   14:*/		return 0x8217EA7C;
		  /* 8217EA7Ch */ case   15:  		/* stw R11, <#[R3 + 4]> */
		/* 8217EA7Ch case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8217EA7Ch case   15:*/		return 0x8217EA80;
		  /* 8217EA80h */ case   16:  		/* mr R30, R3 */
		/* 8217EA80h case   16:*/		regs.R30 = regs.R3;
		/* 8217EA80h case   16:*/		return 0x8217EA84;
		  /* 8217EA84h */ case   17:  		/* stw R10, <#[R3]> */
		/* 8217EA84h case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8217EA84h case   17:*/		return 0x8217EA88;
		  /* 8217EA88h */ case   18:  		/* lwz R29, <#[R24 + 20]> */
		/* 8217EA88h case   18:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R24 + 0x00000014) );
		/* 8217EA88h case   18:*/		return 0x8217EA8C;
		  /* 8217EA8Ch */ case   19:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 8217EA8Ch case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 8217EA8Ch case   19:*/		return 0x8217EA90;
		  /* 8217EA90h */ case   20:  		/* bc 4, CR0_EQ, 392 */
		/* 8217EA90h case   20:*/		if ( !regs.CR[0].eq ) { return 0x8217EC18;  }
		/* 8217EA90h case   20:*/		return 0x8217EA94;
		  /* 8217EA94h */ case   21:  		/* cmplwi CR0, R29, 0 */
		/* 8217EA94h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R29,0x00000000);
		/* 8217EA94h case   21:*/		return 0x8217EA98;
		  /* 8217EA98h */ case   22:  		/* bc 12, CR0_EQ, 384 */
		/* 8217EA98h case   22:*/		if ( regs.CR[0].eq ) { return 0x8217EC18;  }
		/* 8217EA98h case   22:*/		return 0x8217EA9C;
		  /* 8217EA9Ch */ case   23:  		/* lwz R11, <#[R29 + 8]> */
		/* 8217EA9Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8217EA9Ch case   23:*/		return 0x8217EAA0;
		  /* 8217EAA0h */ case   24:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217EAA0h case   24:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217EAA0h case   24:*/		return 0x8217EAA4;
		  /* 8217EAA4h */ case   25:  		/* cmplwi CR6, R11, 14336 */
		/* 8217EAA4h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 8217EAA4h case   25:*/		return 0x8217EAA8;
		  /* 8217EAA8h */ case   26:  		/* bc 4, CR6_EQ, 332 */
		/* 8217EAA8h case   26:*/		if ( !regs.CR[6].eq ) { return 0x8217EBF4;  }
		/* 8217EAA8h case   26:*/		return 0x8217EAAC;
		  /* 8217EAACh */ case   27:  		/* lwz R11, <#[R29]> */
		/* 8217EAACh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 8217EAACh case   27:*/		return 0x8217EAB0;
	}
	return 0x8217EAB0;
} // Block from 8217EA40h-8217EAB0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217EAB0h
// Function '?MarkReachableBranchesAsThreadDependent@Compiler@D3DXShader@@AAAXPAVBlock@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EAB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EAB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EAB0);
		  /* 8217EAB0h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8217EAB0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217EAB0h case    0:*/		return 0x8217EAB4;
		  /* 8217EAB4h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 8217EAB4h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217EAC8;  }
		/* 8217EAB4h case    1:*/		return 0x8217EAB8;
		  /* 8217EAB8h */ case    2:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217EAB8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217EAB8h case    2:*/		return 0x8217EABC;
		  /* 8217EABCh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8217EABCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217EABCh case    3:*/		return 0x8217EAC0;
		  /* 8217EAC0h */ case    4:  		/* li R11, 1 */
		/* 8217EAC0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217EAC0h case    4:*/		return 0x8217EAC4;
		  /* 8217EAC4h */ case    5:  		/* bc 4, CR6_EQ, 8 */
		/* 8217EAC4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217EACC;  }
		/* 8217EAC4h case    5:*/		return 0x8217EAC8;
	}
	return 0x8217EAC8;
} // Block from 8217EAB0h-8217EAC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217EAC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EAC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EAC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EAC8);
		  /* 8217EAC8h */ case    0:  		/* li R11, 0 */
		/* 8217EAC8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217EAC8h case    0:*/		return 0x8217EACC;
	}
	return 0x8217EACC;
} // Block from 8217EAC8h-8217EACCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217EACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EACC);
		  /* 8217EACCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217EACCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217EACCh case    0:*/		return 0x8217EAD0;
		  /* 8217EAD0h */ case    1:  		/* bc 12, CR0_EQ, 292 */
		/* 8217EAD0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217EBF4;  }
		/* 8217EAD0h case    1:*/		return 0x8217EAD4;
		  /* 8217EAD4h */ case    2:  		/* li R7, 1 */
		/* 8217EAD4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8217EAD4h case    2:*/		return 0x8217EAD8;
		  /* 8217EAD8h */ case    3:  		/* li R6, 0 */
		/* 8217EAD8h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8217EAD8h case    3:*/		return 0x8217EADC;
		  /* 8217EADCh */ case    4:  		/* mr R5, R23 */
		/* 8217EADCh case    4:*/		regs.R5 = regs.R23;
		/* 8217EADCh case    4:*/		return 0x8217EAE0;
		  /* 8217EAE0h */ case    5:  		/* mr R4, R29 */
		/* 8217EAE0h case    5:*/		regs.R4 = regs.R29;
		/* 8217EAE0h case    5:*/		return 0x8217EAE4;
		  /* 8217EAE4h */ case    6:  		/* mr R3, R28 */
		/* 8217EAE4h case    6:*/		regs.R3 = regs.R28;
		/* 8217EAE4h case    6:*/		return 0x8217EAE8;
		  /* 8217EAE8h */ case    7:  		/* bl 432664 */
		/* 8217EAE8h case    7:*/		regs.LR = 0x8217EAEC; return 0x821E8500;
		/* 8217EAE8h case    7:*/		return 0x8217EAEC;
		  /* 8217EAECh */ case    8:  		/* mr R27, R3 */
		/* 8217EAECh case    8:*/		regs.R27 = regs.R3;
		/* 8217EAECh case    8:*/		return 0x8217EAF0;
		  /* 8217EAF0h */ case    9:  		/* li R7, 1 */
		/* 8217EAF0h case    9:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 8217EAF0h case    9:*/		return 0x8217EAF4;
		  /* 8217EAF4h */ case   10:  		/* li R6, 0 */
		/* 8217EAF4h case   10:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8217EAF4h case   10:*/		return 0x8217EAF8;
		  /* 8217EAF8h */ case   11:  		/* mr R5, R22 */
		/* 8217EAF8h case   11:*/		regs.R5 = regs.R22;
		/* 8217EAF8h case   11:*/		return 0x8217EAFC;
		  /* 8217EAFCh */ case   12:  		/* mr R4, R29 */
		/* 8217EAFCh case   12:*/		regs.R4 = regs.R29;
		/* 8217EAFCh case   12:*/		return 0x8217EB00;
		  /* 8217EB00h */ case   13:  		/* mr R3, R28 */
		/* 8217EB00h case   13:*/		regs.R3 = regs.R28;
		/* 8217EB00h case   13:*/		return 0x8217EB04;
		  /* 8217EB04h */ case   14:  		/* bl 432636 */
		/* 8217EB04h case   14:*/		regs.LR = 0x8217EB08; return 0x821E8500;
		/* 8217EB04h case   14:*/		return 0x8217EB08;
		  /* 8217EB08h */ case   15:  		/* mr R26, R3 */
		/* 8217EB08h case   15:*/		regs.R26 = regs.R3;
		/* 8217EB08h case   15:*/		return 0x8217EB0C;
		  /* 8217EB0Ch */ case   16:  		/* cmplw CR6, R27, R3 */
		/* 8217EB0Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R3);
		/* 8217EB0Ch case   16:*/		return 0x8217EB10;
		  /* 8217EB10h */ case   17:  		/* bc 12, CR6_EQ, 228 */
		/* 8217EB10h case   17:*/		if ( regs.CR[6].eq ) { return 0x8217EBF4;  }
		/* 8217EB10h case   17:*/		return 0x8217EB14;
		  /* 8217EB14h */ case   18:  		/* lwz R11, <#[R25]> */
		/* 8217EB14h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8217EB14h case   18:*/		return 0x8217EB18;
		  /* 8217EB18h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217EB18h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217EB18h case   19:*/		return 0x8217EB1C;
		  /* 8217EB1Ch */ case   20:  		/* bc 4, CR0_EQ, 40 */
		/* 8217EB1Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x8217EB44;  }
		/* 8217EB1Ch case   20:*/		return 0x8217EB20;
		  /* 8217EB20h */ case   21:  		/* lwz R11, <#[R30]> */
		/* 8217EB20h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8217EB20h case   21:*/		return 0x8217EB24;
		  /* 8217EB24h */ case   22:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217EB24h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217EB24h case   22:*/		return 0x8217EB28;
		  /* 8217EB28h */ case   23:  		/* addic. R3, R11, -4 */
		/* 8217EB28h case   23:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 8217EB28h case   23:*/		return 0x8217EB2C;
		  /* 8217EB2Ch */ case   24:  		/* bc 12, CR0_EQ, 24 */
		/* 8217EB2Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x8217EB44;  }
		/* 8217EB2Ch case   24:*/		return 0x8217EB30;
		  /* 8217EB30h */ case   25:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217EB30h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217EB30h case   25:*/		return 0x8217EB34;
		  /* 8217EB34h */ case   26:  		/* lwz R10, <#[R3 + 12]> */
		/* 8217EB34h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 8217EB34h case   26:*/		return 0x8217EB38;
		  /* 8217EB38h */ case   27:  		/* addi R11, R11, 1 */
		/* 8217EB38h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217EB38h case   27:*/		return 0x8217EB3C;
		  /* 8217EB3Ch */ case   28:  		/* cmplw CR6, R11, R10 */
		/* 8217EB3Ch case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 8217EB3Ch case   28:*/		return 0x8217EB40;
		  /* 8217EB40h */ case   29:  		/* bc 4, CR6_GT, 16 */
		/* 8217EB40h case   29:*/		if ( !regs.CR[6].gt ) { return 0x8217EB50;  }
		/* 8217EB40h case   29:*/		return 0x8217EB44;
	}
	return 0x8217EB44;
} // Block from 8217EACCh-8217EB44h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8217EB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EB44);
		  /* 8217EB44h */ case    0:  		/* li R4, 1 */
		/* 8217EB44h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 8217EB44h case    0:*/		return 0x8217EB48;
		  /* 8217EB48h */ case    1:  		/* mr R3, R30 */
		/* 8217EB48h case    1:*/		regs.R3 = regs.R30;
		/* 8217EB48h case    1:*/		return 0x8217EB4C;
		  /* 8217EB4Ch */ case    2:  		/* bl -8948 */
		/* 8217EB4Ch case    2:*/		regs.LR = 0x8217EB50; return 0x8217C858;
		/* 8217EB4Ch case    2:*/		return 0x8217EB50;
	}
	return 0x8217EB50;
} // Block from 8217EB44h-8217EB50h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217EB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EB50);
		  /* 8217EB50h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217EB50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217EB50h case    0:*/		return 0x8217EB54;
		  /* 8217EB54h */ case    1:  		/* li R5, 9 */
		/* 8217EB54h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x9);
		/* 8217EB54h case    1:*/		return 0x8217EB58;
		  /* 8217EB58h */ case    2:  		/* li R10, 0 */
		/* 8217EB58h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217EB58h case    2:*/		return 0x8217EB5C;
		  /* 8217EB5Ch */ case    3:  		/* mulli R9, R11, 36 */
		/* 8217EB5Ch case    3:*/		cpu::op::mulli<0>(regs,&regs.R9,regs.R11,0x24);
		/* 8217EB5Ch case    3:*/		return 0x8217EB60;
		  /* 8217EB60h */ case    4:  		/* add R9, R9, R3 */
		/* 8217EB60h case    4:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R3);
		/* 8217EB60h case    4:*/		return 0x8217EB64;
		  /* 8217EB64h */ case    5:  		/* addi R11, R11, 1 */
		/* 8217EB64h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217EB64h case    5:*/		return 0x8217EB68;
		  /* 8217EB68h */ case    6:  		/* addi R31, R9, 16 */
		/* 8217EB68h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R9,0x10);
		/* 8217EB68h case    6:*/		return 0x8217EB6C;
		  /* 8217EB6Ch */ case    7:  		/* stw R11, <#[R3 + 8]> */
		/* 8217EB6Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217EB6Ch case    7:*/		return 0x8217EB70;
		  /* 8217EB70h */ case    8:  		/* mr R9, R29 */
		/* 8217EB70h case    8:*/		regs.R9 = regs.R29;
		/* 8217EB70h case    8:*/		return 0x8217EB74;
		  /* 8217EB74h */ case    9:  		/* li R8, 0 */
		/* 8217EB74h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217EB74h case    9:*/		return 0x8217EB78;
		  /* 8217EB78h */ case   10:  		/* addi R7, R1, 84 */
		/* 8217EB78h case   10:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8217EB78h case   10:*/		return 0x8217EB7C;
		  /* 8217EB7Ch */ case   11:  		/* addi R6, R1, 80 */
		/* 8217EB7Ch case   11:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8217EB7Ch case   11:*/		return 0x8217EB80;
	}
	return 0x8217EB80;
} // Block from 8217EB50h-8217EB80h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217EB80h
// Function '?MarkReachableScopeExitBranchesAsThreadDependent@Compiler@D3DXShader@@AAAXPAVBlock@2@0PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EB80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EB80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EB80);
		  /* 8217EB80h */ case    0:  		/* lwz R11, <#[R31 + 16]> */
		/* 8217EB80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8217EB80h case    0:*/		return 0x8217EB84;
		  /* 8217EB84h */ case    1:  		/* rlwimi R11, R5, 0, 28, 31 */
		/* 8217EB84h case    1:*/		cpu::op::rlwimi<0,0,28,31>(regs,&regs.R11,regs.R5);
		/* 8217EB84h case    1:*/		return 0x8217EB88;
		  /* 8217EB88h */ case    2:  		/* stw R29, <#[R31 + 20]> */
		/* 8217EB88h case    2:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x00000014) );
		/* 8217EB88h case    2:*/		return 0x8217EB8C;
		  /* 8217EB8Ch */ case    3:  		/* li R4, 0 */
		/* 8217EB8Ch case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217EB8Ch case    3:*/		return 0x8217EB90;
		  /* 8217EB90h */ case    4:  		/* stw R11, <#[R31 + 16]> */
		/* 8217EB90h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 8217EB90h case    4:*/		return 0x8217EB94;
		  /* 8217EB94h */ case    5:  		/* mr R5, R31 */
		/* 8217EB94h case    5:*/		regs.R5 = regs.R31;
		/* 8217EB94h case    5:*/		return 0x8217EB98;
		  /* 8217EB98h */ case    6:  		/* mr R3, R27 */
		/* 8217EB98h case    6:*/		regs.R3 = regs.R27;
		/* 8217EB98h case    6:*/		return 0x8217EB9C;
		  /* 8217EB9Ch */ case    7:  		/* bl 674100 */
		/* 8217EB9Ch case    7:*/		regs.LR = 0x8217EBA0; return 0x822234D0;
		/* 8217EB9Ch case    7:*/		return 0x8217EBA0;
		  /* 8217EBA0h */ case    8:  		/* lwz R11, <#[R1 + 80]> */
		/* 8217EBA0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8217EBA0h case    8:*/		return 0x8217EBA4;
		  /* 8217EBA4h */ case    9:  		/* ori R11, R11, 228 */
		/* 8217EBA4h case    9:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE4);
		/* 8217EBA4h case    9:*/		return 0x8217EBA8;
		  /* 8217EBA8h */ case   10:  		/* stw R11, <#[R31 + 8]> */
		/* 8217EBA8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217EBA8h case   10:*/		return 0x8217EBAC;
		  /* 8217EBACh */ case   11:  		/* lwz R11, <#[R1 + 84]> */
		/* 8217EBACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8217EBACh case   11:*/		return 0x8217EBB0;
		  /* 8217EBB0h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8217EBB0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217EBB0h case   12:*/		return 0x8217EBB4;
		  /* 8217EBB4h */ case   13:  		/* bc 4, CR6_EQ, 92 */
		/* 8217EBB4h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8217EC10;  }
		/* 8217EBB4h case   13:*/		return 0x8217EBB8;
		  /* 8217EBB8h */ case   14:  		/* li R10, 0 */
		/* 8217EBB8h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217EBB8h case   14:*/		return 0x8217EBBC;
		  /* 8217EBBCh */ case   15:  		/* mr R9, R29 */
		/* 8217EBBCh case   15:*/		regs.R9 = regs.R29;
		/* 8217EBBCh case   15:*/		return 0x8217EBC0;
		  /* 8217EBC0h */ case   16:  		/* li R8, 0 */
		/* 8217EBC0h case   16:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217EBC0h case   16:*/		return 0x8217EBC4;
		  /* 8217EBC4h */ case   17:  		/* addi R7, R1, 84 */
		/* 8217EBC4h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 8217EBC4h case   17:*/		return 0x8217EBC8;
		  /* 8217EBC8h */ case   18:  		/* addi R6, R1, 80 */
		/* 8217EBC8h case   18:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8217EBC8h case   18:*/		return 0x8217EBCC;
		  /* 8217EBCCh */ case   19:  		/* addi R5, R31, 4 */
		/* 8217EBCCh case   19:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x4);
		/* 8217EBCCh case   19:*/		return 0x8217EBD0;
		  /* 8217EBD0h */ case   20:  		/* li R4, 0 */
		/* 8217EBD0h case   20:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 8217EBD0h case   20:*/		return 0x8217EBD4;
		  /* 8217EBD4h */ case   21:  		/* mr R3, R26 */
		/* 8217EBD4h case   21:*/		regs.R3 = regs.R26;
		/* 8217EBD4h case   21:*/		return 0x8217EBD8;
		  /* 8217EBD8h */ case   22:  		/* bl 674040 */
		/* 8217EBD8h case   22:*/		regs.LR = 0x8217EBDC; return 0x822234D0;
		/* 8217EBD8h case   22:*/		return 0x8217EBDC;
		  /* 8217EBDCh */ case   23:  		/* lwz R11, <#[R1 + 80]> */
		/* 8217EBDCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 8217EBDCh case   23:*/		return 0x8217EBE0;
		  /* 8217EBE0h */ case   24:  		/* ori R11, R11, 228 */
		/* 8217EBE0h case   24:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0xE4);
		/* 8217EBE0h case   24:*/		return 0x8217EBE4;
		  /* 8217EBE4h */ case   25:  		/* stw R11, <#[R31 + 12]> */
		/* 8217EBE4h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 8217EBE4h case   25:*/		return 0x8217EBE8;
		  /* 8217EBE8h */ case   26:  		/* lwz R11, <#[R1 + 84]> */
		/* 8217EBE8h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 8217EBE8h case   26:*/		return 0x8217EBEC;
		  /* 8217EBECh */ case   27:  		/* cmplwi CR6, R11, 0 */
		/* 8217EBECh case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217EBECh case   27:*/		return 0x8217EBF0;
		  /* 8217EBF0h */ case   28:  		/* bc 4, CR6_EQ, 32 */
		/* 8217EBF0h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8217EC10;  }
		/* 8217EBF0h case   28:*/		return 0x8217EBF4;
	}
	return 0x8217EBF4;
} // Block from 8217EB80h-8217EBF4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8217EBF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EBF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EBF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EBF4);
		  /* 8217EBF4h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 8217EBF4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 8217EBF4h case    0:*/		return 0x8217EBF8;
		  /* 8217EBF8h */ case    1:  		/* lwz R29, <#[R11 + 40]> */
		/* 8217EBF8h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000028) );
		/* 8217EBF8h case    1:*/		return 0x8217EBFC;
		  /* 8217EBFCh */ case    2:  		/* rlwinm. R11, R29, 0, 31, 31 */
		/* 8217EBFCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R29);
		/* 8217EBFCh case    2:*/		return 0x8217EC00;
		  /* 8217EC00h */ case    3:  		/* bc 4, CR0_EQ, 24 */
		/* 8217EC00h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217EC18;  }
		/* 8217EC00h case    3:*/		return 0x8217EC04;
		  /* 8217EC04h */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 8217EC04h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217EC04h case    4:*/		return 0x8217EC08;
		  /* 8217EC08h */ case    5:  		/* bc 4, CR6_EQ, -364 */
		/* 8217EC08h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217EA9C;  }
		/* 8217EC08h case    5:*/		return 0x8217EC0C;
		  /* 8217EC0Ch */ case    6:  		/* b 12 */
		/* 8217EC0Ch case    6:*/		return 0x8217EC18;
		/* 8217EC0Ch case    6:*/		return 0x8217EC10;
	}
	return 0x8217EC10;
} // Block from 8217EBF4h-8217EC10h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217EC10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EC10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EC10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EC10);
		  /* 8217EC10h */ case    0:  		/* mr R3, R30 */
		/* 8217EC10h case    0:*/		regs.R3 = regs.R30;
		/* 8217EC10h case    0:*/		return 0x8217EC14;
		  /* 8217EC14h */ case    1:  		/* bl -9308 */
		/* 8217EC14h case    1:*/		regs.LR = 0x8217EC18; return 0x8217C7B8;
		/* 8217EC14h case    1:*/		return 0x8217EC18;
	}
	return 0x8217EC18;
} // Block from 8217EC10h-8217EC18h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217EC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EC18);
		  /* 8217EC18h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 8217EC18h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8217EC18h case    0:*/		return 0x8217EC1C;
		  /* 8217EC1Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217EC1Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217EC1Ch case    1:*/		return 0x8217EC20;
		  /* 8217EC20h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 8217EC20h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217EC2C;  }
		/* 8217EC20h case    2:*/		return 0x8217EC24;
		  /* 8217EC24h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8217EC24h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217EC24h case    3:*/		return 0x8217EC28;
		  /* 8217EC28h */ case    4:  		/* bc 4, CR0_EQ, 12 */
		/* 8217EC28h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217EC34;  }
		/* 8217EC28h case    4:*/		return 0x8217EC2C;
	}
	return 0x8217EC2C;
} // Block from 8217EC18h-8217EC2Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217EC2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EC2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EC2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EC2C);
		  /* 8217EC2Ch */ case    0:  		/* li R3, 0 */
		/* 8217EC2Ch case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217EC2Ch case    0:*/		return 0x8217EC30;
		  /* 8217EC30h */ case    1:  		/* b 60 */
		/* 8217EC30h case    1:*/		return 0x8217EC6C;
		/* 8217EC30h case    1:*/		return 0x8217EC34;
	}
	return 0x8217EC34;
} // Block from 8217EC2Ch-8217EC34h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217EC34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EC34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EC34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EC34);
		  /* 8217EC34h */ case    0:  		/* li R8, 0 */
		/* 8217EC34h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217EC34h case    0:*/		return 0x8217EC38;
		  /* 8217EC38h */ case    1:  		/* mr R7, R24 */
		/* 8217EC38h case    1:*/		regs.R7 = regs.R24;
		/* 8217EC38h case    1:*/		return 0x8217EC3C;
		  /* 8217EC3Ch */ case    2:  		/* mr R6, R20 */
		/* 8217EC3Ch case    2:*/		regs.R6 = regs.R20;
		/* 8217EC3Ch case    2:*/		return 0x8217EC40;
		  /* 8217EC40h */ case    3:  		/* mr R5, R21 */
		/* 8217EC40h case    3:*/		regs.R5 = regs.R21;
		/* 8217EC40h case    3:*/		return 0x8217EC44;
		  /* 8217EC44h */ case    4:  		/* mr R4, R30 */
		/* 8217EC44h case    4:*/		regs.R4 = regs.R30;
		/* 8217EC44h case    4:*/		return 0x8217EC48;
		  /* 8217EC48h */ case    5:  		/* mr R3, R28 */
		/* 8217EC48h case    5:*/		regs.R3 = regs.R28;
		/* 8217EC48h case    5:*/		return 0x8217EC4C;
		  /* 8217EC4Ch */ case    6:  		/* bl -1628 */
		/* 8217EC4Ch case    6:*/		regs.LR = 0x8217EC50; return 0x8217E5F0;
		/* 8217EC4Ch case    6:*/		return 0x8217EC50;
		  /* 8217EC50h */ case    7:  		/* mr R3, R30 */
		/* 8217EC50h case    7:*/		regs.R3 = regs.R30;
		/* 8217EC50h case    7:*/		return 0x8217EC54;
		  /* 8217EC54h */ case    8:  		/* bl -9372 */
		/* 8217EC54h case    8:*/		regs.LR = 0x8217EC58; return 0x8217C7B8;
		/* 8217EC54h case    8:*/		return 0x8217EC58;
		  /* 8217EC58h */ case    9:  		/* addi R11, R28, 972 */
		/* 8217EC58h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0x3CC);
		/* 8217EC58h case    9:*/		return 0x8217EC5C;
		  /* 8217EC5Ch */ case   10:  		/* li R3, 1 */
		/* 8217EC5Ch case   10:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 8217EC5Ch case   10:*/		return 0x8217EC60;
		  /* 8217EC60h */ case   11:  		/* lwz R11, <#[R28 + 976]> */
		/* 8217EC60h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x000003D0) );
		/* 8217EC60h case   11:*/		return 0x8217EC64;
		  /* 8217EC64h */ case   12:  		/* stw R11, <#[R30]> */
		/* 8217EC64h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 8217EC64h case   12:*/		return 0x8217EC68;
		  /* 8217EC68h */ case   13:  		/* stw R30, <#[R28 + 976]> */
		/* 8217EC68h case   13:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x000003D0) );
		/* 8217EC68h case   13:*/		return 0x8217EC6C;
	}
	return 0x8217EC6C;
} // Block from 8217EC34h-8217EC6Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217EC6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EC6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EC6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EC6C);
		  /* 8217EC6Ch */ case    0:  		/* addi R1, R1, 192 */
		/* 8217EC6Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 8217EC6Ch case    0:*/		return 0x8217EC70;
		  /* 8217EC70h */ case    1:  		/* b -973288 */
		/* 8217EC70h case    1:*/		return 0x82091288;
		/* 8217EC70h case    1:*/		return 0x8217EC74;
		  /* 8217EC74h */ case    2:  		/* nop */
		/* 8217EC74h case    2:*/		cpu::op::nop();
		/* 8217EC74h case    2:*/		return 0x8217EC78;
	}
	return 0x8217EC78;
} // Block from 8217EC6Ch-8217EC78h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217EC78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EC78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EC78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EC78);
		  /* 8217EC78h */ case    0:  		/* mfspr R12, LR */
		/* 8217EC78h case    0:*/		regs.R12 = regs.LR;
		/* 8217EC78h case    0:*/		return 0x8217EC7C;
		  /* 8217EC7Ch */ case    1:  		/* bl -973368 */
		/* 8217EC7Ch case    1:*/		regs.LR = 0x8217EC80; return 0x82091244;
		/* 8217EC7Ch case    1:*/		return 0x8217EC80;
	}
	return 0x8217EC80;
} // Block from 8217EC78h-8217EC80h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217EC80h
// Function '?HoistExports_AfterPredication@Compiler@D3DXShader@@AAAXPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EC80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EC80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EC80);
		  /* 8217EC80h */ case    0:  		/* stwu R1, <#[R1 - 160]> */
		/* 8217EC80h case    0:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 8217EC80h case    0:*/		return 0x8217EC84;
		  /* 8217EC84h */ case    1:  		/* li R5, 38 */
		/* 8217EC84h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x26);
		/* 8217EC84h case    1:*/		return 0x8217EC88;
		  /* 8217EC88h */ case    2:  		/* li R4, 8 */
		/* 8217EC88h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 8217EC88h case    2:*/		return 0x8217EC8C;
		  /* 8217EC8Ch */ case    3:  		/* mr R24, R3 */
		/* 8217EC8Ch case    3:*/		regs.R24 = regs.R3;
		/* 8217EC8Ch case    3:*/		return 0x8217EC90;
		  /* 8217EC90h */ case    4:  		/* bl -107424 */
		/* 8217EC90h case    4:*/		regs.LR = 0x8217EC94; return 0x821648F0;
		/* 8217EC90h case    4:*/		return 0x8217EC94;
		  /* 8217EC94h */ case    5:  		/* addi R25, R3, 4 */
		/* 8217EC94h case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x4);
		/* 8217EC94h case    5:*/		return 0x8217EC98;
		  /* 8217EC98h */ case    6:  		/* ori R11, R3, 1 */
		/* 8217EC98h case    6:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 8217EC98h case    6:*/		return 0x8217EC9C;
		  /* 8217EC9Ch */ case    7:  		/* ori R10, R25, 1 */
		/* 8217EC9Ch case    7:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R25,0x1);
		/* 8217EC9Ch case    7:*/		return 0x8217ECA0;
		  /* 8217ECA0h */ case    8:  		/* stw R11, <#[R3 + 4]> */
		/* 8217ECA0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 8217ECA0h case    8:*/		return 0x8217ECA4;
		  /* 8217ECA4h */ case    9:  		/* mr R26, R3 */
		/* 8217ECA4h case    9:*/		regs.R26 = regs.R3;
		/* 8217ECA4h case    9:*/		return 0x8217ECA8;
		  /* 8217ECA8h */ case   10:  		/* stw R10, <#[R3]> */
		/* 8217ECA8h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 8217ECA8h case   10:*/		return 0x8217ECAC;
		  /* 8217ECACh */ case   11:  		/* li R23, 1 */
		/* 8217ECACh case   11:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 8217ECACh case   11:*/		return 0x8217ECB0;
		  /* 8217ECB0h */ case   12:  		/* lwz R11, <#[R24 + 4]> */
		/* 8217ECB0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8217ECB0h case   12:*/		return 0x8217ECB4;
		  /* 8217ECB4h */ case   13:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217ECB4h case   13:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217ECB4h case   13:*/		return 0x8217ECB8;
		  /* 8217ECB8h */ case   14:  		/* addic R10, R10, -1 */
		/* 8217ECB8h case   14:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217ECB8h case   14:*/		return 0x8217ECBC;
		  /* 8217ECBCh */ case   15:  		/* subfe R10, R10, R10 */
		/* 8217ECBCh case   15:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217ECBCh case   15:*/		return 0x8217ECC0;
		  /* 8217ECC0h */ case   16:  		/* and R11, R10, R11 */
		/* 8217ECC0h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217ECC0h case   16:*/		return 0x8217ECC4;
		  /* 8217ECC4h */ case   17:  		/* lwz R11, <#[R11 + 20]> */
		/* 8217ECC4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000014) );
		/* 8217ECC4h case   17:*/		return 0x8217ECC8;
		  /* 8217ECC8h */ case   18:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217ECC8h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217ECC8h case   18:*/		return 0x8217ECCC;
		  /* 8217ECCCh */ case   19:  		/* bc 4, CR0_EQ, 160 */
		/* 8217ECCCh case   19:*/		if ( !regs.CR[0].eq ) { return 0x8217ED6C;  }
		/* 8217ECCCh case   19:*/		return 0x8217ECD0;
		  /* 8217ECD0h */ case   20:  		/* mr R30, R11 */
		/* 8217ECD0h case   20:*/		regs.R30 = regs.R11;
		/* 8217ECD0h case   20:*/		return 0x8217ECD4;
		  /* 8217ECD4h */ case   21:  		/* cmplwi CR0, R11, 0 */
		/* 8217ECD4h case   21:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217ECD4h case   21:*/		return 0x8217ECD8;
		  /* 8217ECD8h */ case   22:  		/* bc 12, CR0_EQ, 148 */
		/* 8217ECD8h case   22:*/		if ( regs.CR[0].eq ) { return 0x8217ED6C;  }
		/* 8217ECD8h case   22:*/		return 0x8217ECDC;
		  /* 8217ECDCh */ case   23:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217ECDCh case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217ECDCh case   23:*/		return 0x8217ECE0;
		  /* 8217ECE0h */ case   24:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 8217ECE0h case   24:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 8217ECE0h case   24:*/		return 0x8217ECE4;
		  /* 8217ECE4h */ case   25:  		/* cmplwi CR6, R10, 14464 */
		/* 8217ECE4h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003880);
		/* 8217ECE4h case   25:*/		return 0x8217ECE8;
		  /* 8217ECE8h */ case   26:  		/* bc 4, CR6_EQ, 104 */
		/* 8217ECE8h case   26:*/		if ( !regs.CR[6].eq ) { return 0x8217ED50;  }
		/* 8217ECE8h case   26:*/		return 0x8217ECEC;
		  /* 8217ECECh */ case   27:  		/* oris R11, R11, 2048 */
		/* 8217ECECh case   27:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 8217ECECh case   27:*/		return 0x8217ECF0;
		  /* 8217ECF0h */ case   28:  		/* lwz R31, <#[R30 + 4]> */
		/* 8217ECF0h case   28:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 8217ECF0h case   28:*/		return 0x8217ECF4;
		  /* 8217ECF4h */ case   29:  		/* stw R11, <#[R30 + 8]> */
		/* 8217ECF4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217ECF4h case   29:*/		return 0x8217ECF8;
		  /* 8217ECF8h */ case   30:  		/* cmplwi CR6, R31, 0 */
		/* 8217ECF8h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217ECF8h case   30:*/		return 0x8217ECFC;
		  /* 8217ECFCh */ case   31:  		/* bc 12, CR6_EQ, 84 */
		/* 8217ECFCh case   31:*/		if ( regs.CR[6].eq ) { return 0x8217ED50;  }
		/* 8217ECFCh case   31:*/		return 0x8217ED00;
		  /* 8217ED00h */ case   32:  		/* lwz R4, <#[R31 + 16]> */
		/* 8217ED00h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8217ED00h case   32:*/		return 0x8217ED04;
		  /* 8217ED04h */ case   33:  		/* cmplwi CR6, R4, 0 */
		/* 8217ED04h case   33:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8217ED04h case   33:*/		return 0x8217ED08;
		  /* 8217ED08h */ case   34:  		/* bc 12, CR6_EQ, 64 */
		/* 8217ED08h case   34:*/		if ( regs.CR[6].eq ) { return 0x8217ED48;  }
		/* 8217ED08h case   34:*/		return 0x8217ED0C;
		  /* 8217ED0Ch */ case   35:  		/* lwz R11, <#[R31]> */
		/* 8217ED0Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217ED0Ch case   35:*/		return 0x8217ED10;
		  /* 8217ED10h */ case   36:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8217ED10h case   36:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8217ED10h case   36:*/		return 0x8217ED14;
		  /* 8217ED14h */ case   37:  		/* bc 4, CR0_EQ, 16 */
		/* 8217ED14h case   37:*/		if ( !regs.CR[0].eq ) { return 0x8217ED24;  }
		/* 8217ED14h case   37:*/		return 0x8217ED18;
		  /* 8217ED18h */ case   38:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8217ED18h case   38:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8217ED18h case   38:*/		return 0x8217ED1C;
		  /* 8217ED1Ch */ case   39:  		/* li R11, 0 */
		/* 8217ED1Ch case   39:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217ED1Ch case   39:*/		return 0x8217ED20;
		  /* 8217ED20h */ case   40:  		/* bc 12, CR0_EQ, 8 */
		/* 8217ED20h case   40:*/		if ( regs.CR[0].eq ) { return 0x8217ED28;  }
		/* 8217ED20h case   40:*/		return 0x8217ED24;
	}
	return 0x8217ED24;
} // Block from 8217EC80h-8217ED24h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8217ED24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ED24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ED24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ED24);
		  /* 8217ED24h */ case    0:  		/* mr R11, R23 */
		/* 8217ED24h case    0:*/		regs.R11 = regs.R23;
		/* 8217ED24h case    0:*/		return 0x8217ED28;
	}
	return 0x8217ED28;
} // Block from 8217ED24h-8217ED28h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217ED28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ED28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ED28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ED28);
		  /* 8217ED28h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217ED28h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217ED28h case    0:*/		return 0x8217ED2C;
		  /* 8217ED2Ch */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 8217ED2Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8217ED48;  }
		/* 8217ED2Ch case    1:*/		return 0x8217ED30;
		  /* 8217ED30h */ case    2:  		/* lwz R11, <#[R4 + 8]> */
		/* 8217ED30h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8217ED30h case    2:*/		return 0x8217ED34;
		  /* 8217ED34h */ case    3:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 8217ED34h case    3:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 8217ED34h case    3:*/		return 0x8217ED38;
		  /* 8217ED38h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 8217ED38h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217ED48;  }
		/* 8217ED38h case    4:*/		return 0x8217ED3C;
		  /* 8217ED3Ch */ case    5:  		/* mr R5, R26 */
		/* 8217ED3Ch case    5:*/		regs.R5 = regs.R26;
		/* 8217ED3Ch case    5:*/		return 0x8217ED40;
		  /* 8217ED40h */ case    6:  		/* mr R3, R24 */
		/* 8217ED40h case    6:*/		regs.R3 = regs.R24;
		/* 8217ED40h case    6:*/		return 0x8217ED44;
		  /* 8217ED44h */ case    7:  		/* bl -3572 */
		/* 8217ED44h case    7:*/		regs.LR = 0x8217ED48; return 0x8217DF50;
		/* 8217ED44h case    7:*/		return 0x8217ED48;
	}
	return 0x8217ED48;
} // Block from 8217ED28h-8217ED48h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217ED48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ED48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ED48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ED48);
		  /* 8217ED48h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 8217ED48h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8217ED48h case    0:*/		return 0x8217ED4C;
		  /* 8217ED4Ch */ case    1:  		/* b -84 */
		/* 8217ED4Ch case    1:*/		return 0x8217ECF8;
		/* 8217ED4Ch case    1:*/		return 0x8217ED50;
	}
	return 0x8217ED50;
} // Block from 8217ED48h-8217ED50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217ED50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ED50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ED50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ED50);
		  /* 8217ED50h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217ED50h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217ED50h case    0:*/		return 0x8217ED54;
		  /* 8217ED54h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 8217ED54h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 8217ED54h case    1:*/		return 0x8217ED58;
		  /* 8217ED58h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217ED58h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217ED58h case    2:*/		return 0x8217ED5C;
		  /* 8217ED5Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217ED5Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217ED6C;  }
		/* 8217ED5Ch case    3:*/		return 0x8217ED60;
		  /* 8217ED60h */ case    4:  		/* mr R30, R11 */
		/* 8217ED60h case    4:*/		regs.R30 = regs.R11;
		/* 8217ED60h case    4:*/		return 0x8217ED64;
		  /* 8217ED64h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217ED64h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217ED64h case    5:*/		return 0x8217ED68;
		  /* 8217ED68h */ case    6:  		/* bc 4, CR6_EQ, -140 */
		/* 8217ED68h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217ECDC;  }
		/* 8217ED68h case    6:*/		return 0x8217ED6C;
	}
	return 0x8217ED6C;
} // Block from 8217ED50h-8217ED6Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217ED6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217ED6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217ED6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217ED6C);
		  /* 8217ED6Ch */ case    0:  		/* lwz R11, <#[R24 + 40]> */
		/* 8217ED6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 8217ED6Ch case    0:*/		return 0x8217ED70;
		  /* 8217ED70h */ case    1:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8217ED70h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8217ED70h case    1:*/		return 0x8217ED74;
		  /* 8217ED74h */ case    2:  		/* bc 12, CR0_EQ, 208 */
		/* 8217ED74h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217EE44;  }
		/* 8217ED74h case    2:*/		return 0x8217ED78;
		  /* 8217ED78h */ case    3:  		/* lwz R11, <#[R24 + 4]> */
		/* 8217ED78h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8217ED78h case    3:*/		return 0x8217ED7C;
		  /* 8217ED7Ch */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217ED7Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217ED7Ch case    4:*/		return 0x8217ED80;
		  /* 8217ED80h */ case    5:  		/* bc 4, CR0_EQ, 196 */
		/* 8217ED80h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217EE44;  }
		/* 8217ED80h case    5:*/		return 0x8217ED84;
		  /* 8217ED84h */ case    6:  		/* mr R30, R11 */
		/* 8217ED84h case    6:*/		regs.R30 = regs.R11;
		/* 8217ED84h case    6:*/		return 0x8217ED88;
		  /* 8217ED88h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8217ED88h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217ED88h case    7:*/		return 0x8217ED8C;
		  /* 8217ED8Ch */ case    8:  		/* bc 12, CR0_EQ, 184 */
		/* 8217ED8Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8217EE44;  }
		/* 8217ED8Ch case    8:*/		return 0x8217ED90;
		  /* 8217ED90h */ case    9:  		/* lwz R11, <#[R30 + 36]> */
		/* 8217ED90h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8217ED90h case    9:*/		return 0x8217ED94;
		  /* 8217ED94h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217ED94h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217ED94h case   10:*/		return 0x8217ED98;
		  /* 8217ED98h */ case   11:  		/* bc 4, CR0_EQ, 144 */
		/* 8217ED98h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8217EE28;  }
		/* 8217ED98h case   11:*/		return 0x8217ED9C;
		  /* 8217ED9Ch */ case   12:  		/* lwz R11, <#[R30 + 32]> */
		/* 8217ED9Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8217ED9Ch case   12:*/		return 0x8217EDA0;
		  /* 8217EDA0h */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217EDA0h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217EDA0h case   13:*/		return 0x8217EDA4;
		  /* 8217EDA4h */ case   14:  		/* addic. R31, R11, -40 */
		/* 8217EDA4h case   14:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 8217EDA4h case   14:*/		return 0x8217EDA8;
		  /* 8217EDA8h */ case   15:  		/* bc 12, CR0_EQ, 128 */
		/* 8217EDA8h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217EE28;  }
		/* 8217EDA8h case   15:*/		return 0x8217EDAC;
		  /* 8217EDACh */ case   16:  		/* lwz R10, <#[R31 + 8]> */
		/* 8217EDACh case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8217EDACh case   16:*/		return 0x8217EDB0;
		  /* 8217EDB0h */ case   17:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 8217EDB0h case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 8217EDB0h case   17:*/		return 0x8217EDB4;
		  /* 8217EDB4h */ case   18:  		/* cmplwi CR6, R11, 86 */
		/* 8217EDB4h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8217EDB4h case   18:*/		return 0x8217EDB8;
		  /* 8217EDB8h */ case   19:  		/* bc 12, CR6_EQ, 48 */
		/* 8217EDB8h case   19:*/		if ( regs.CR[6].eq ) { return 0x8217EDE8;  }
		/* 8217EDB8h case   19:*/		return 0x8217EDBC;
		  /* 8217EDBCh */ case   20:  		/* cmplwi CR6, R11, 87 */
		/* 8217EDBCh case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8217EDBCh case   20:*/		return 0x8217EDC0;
		  /* 8217EDC0h */ case   21:  		/* bc 12, CR6_EQ, 40 */
		/* 8217EDC0h case   21:*/		if ( regs.CR[6].eq ) { return 0x8217EDE8;  }
		/* 8217EDC0h case   21:*/		return 0x8217EDC4;
		  /* 8217EDC4h */ case   22:  		/* cmplwi CR6, R11, 89 */
		/* 8217EDC4h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8217EDC4h case   22:*/		return 0x8217EDC8;
		  /* 8217EDC8h */ case   23:  		/* bc 12, CR6_EQ, 32 */
		/* 8217EDC8h case   23:*/		if ( regs.CR[6].eq ) { return 0x8217EDE8;  }
		/* 8217EDC8h case   23:*/		return 0x8217EDCC;
		  /* 8217EDCCh */ case   24:  		/* cmplwi CR6, R11, 90 */
		/* 8217EDCCh case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8217EDCCh case   24:*/		return 0x8217EDD0;
		  /* 8217EDD0h */ case   25:  		/* bc 12, CR6_EQ, 24 */
		/* 8217EDD0h case   25:*/		if ( regs.CR[6].eq ) { return 0x8217EDE8;  }
		/* 8217EDD0h case   25:*/		return 0x8217EDD4;
		  /* 8217EDD4h */ case   26:  		/* cmplwi CR6, R11, 84 */
		/* 8217EDD4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8217EDD4h case   26:*/		return 0x8217EDD8;
		  /* 8217EDD8h */ case   27:  		/* bc 12, CR6_EQ, 16 */
		/* 8217EDD8h case   27:*/		if ( regs.CR[6].eq ) { return 0x8217EDE8;  }
		/* 8217EDD8h case   27:*/		return 0x8217EDDC;
		  /* 8217EDDCh */ case   28:  		/* cmplwi CR6, R11, 85 */
		/* 8217EDDCh case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8217EDDCh case   28:*/		return 0x8217EDE0;
		  /* 8217EDE0h */ case   29:  		/* li R11, 0 */
		/* 8217EDE0h case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217EDE0h case   29:*/		return 0x8217EDE4;
		  /* 8217EDE4h */ case   30:  		/* bc 4, CR6_EQ, 8 */
		/* 8217EDE4h case   30:*/		if ( !regs.CR[6].eq ) { return 0x8217EDEC;  }
		/* 8217EDE4h case   30:*/		return 0x8217EDE8;
	}
	return 0x8217EDE8;
} // Block from 8217ED6Ch-8217EDE8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8217EDE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EDE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EDE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EDE8);
		  /* 8217EDE8h */ case    0:  		/* mr R11, R23 */
		/* 8217EDE8h case    0:*/		regs.R11 = regs.R23;
		/* 8217EDE8h case    0:*/		return 0x8217EDEC;
	}
	return 0x8217EDEC;
} // Block from 8217EDE8h-8217EDECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217EDECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EDEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EDEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EDEC);
		  /* 8217EDECh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217EDECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217EDECh case    0:*/		return 0x8217EDF0;
		  /* 8217EDF0h */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 8217EDF0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217EE28;  }
		/* 8217EDF0h case    1:*/		return 0x8217EDF4;
		  /* 8217EDF4h */ case    2:  		/* rlwinm. R11, R10, 5, 31, 31 */
		/* 8217EDF4h case    2:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R10);
		/* 8217EDF4h case    2:*/		return 0x8217EDF8;
		  /* 8217EDF8h */ case    3:  		/* bc 4, CR0_EQ, 48 */
		/* 8217EDF8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217EE28;  }
		/* 8217EDF8h case    3:*/		return 0x8217EDFC;
		  /* 8217EDFCh */ case    4:  		/* mr R4, R24 */
		/* 8217EDFCh case    4:*/		regs.R4 = regs.R24;
		/* 8217EDFCh case    4:*/		return 0x8217EE00;
		  /* 8217EE00h */ case    5:  		/* mr R3, R31 */
		/* 8217EE00h case    5:*/		regs.R3 = regs.R31;
		/* 8217EE00h case    5:*/		return 0x8217EE04;
		  /* 8217EE04h */ case    6:  		/* bl -108156 */
		/* 8217EE04h case    6:*/		regs.LR = 0x8217EE08; return 0x82164788;
		/* 8217EE04h case    6:*/		return 0x8217EE08;
		  /* 8217EE08h */ case    7:  		/* cmpwi CR6, R3, 3 */
		/* 8217EE08h case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 8217EE08h case    7:*/		return 0x8217EE0C;
		  /* 8217EE0Ch */ case    8:  		/* bc 12, CR6_EQ, 12 */
		/* 8217EE0Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x8217EE18;  }
		/* 8217EE0Ch case    8:*/		return 0x8217EE10;
		  /* 8217EE10h */ case    9:  		/* cmpwi CR6, R3, 4 */
		/* 8217EE10h case    9:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 8217EE10h case    9:*/		return 0x8217EE14;
		  /* 8217EE14h */ case   10:  		/* bc 4, CR6_EQ, 20 */
		/* 8217EE14h case   10:*/		if ( !regs.CR[6].eq ) { return 0x8217EE28;  }
		/* 8217EE14h case   10:*/		return 0x8217EE18;
	}
	return 0x8217EE18;
} // Block from 8217EDECh-8217EE18h (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217EE18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EE18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EE18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EE18);
		  /* 8217EE18h */ case    0:  		/* mr R5, R26 */
		/* 8217EE18h case    0:*/		regs.R5 = regs.R26;
		/* 8217EE18h case    0:*/		return 0x8217EE1C;
		  /* 8217EE1Ch */ case    1:  		/* mr R4, R31 */
		/* 8217EE1Ch case    1:*/		regs.R4 = regs.R31;
		/* 8217EE1Ch case    1:*/		return 0x8217EE20;
		  /* 8217EE20h */ case    2:  		/* mr R3, R24 */
		/* 8217EE20h case    2:*/		regs.R3 = regs.R24;
		/* 8217EE20h case    2:*/		return 0x8217EE24;
		  /* 8217EE24h */ case    3:  		/* bl -3796 */
		/* 8217EE24h case    3:*/		regs.LR = 0x8217EE28; return 0x8217DF50;
		/* 8217EE24h case    3:*/		return 0x8217EE28;
	}
	return 0x8217EE28;
} // Block from 8217EE18h-8217EE28h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217EE28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EE28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EE28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EE28);
		  /* 8217EE28h */ case    0:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217EE28h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217EE28h case    0:*/		return 0x8217EE2C;
		  /* 8217EE2Ch */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217EE2Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217EE2Ch case    1:*/		return 0x8217EE30;
		  /* 8217EE30h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217EE30h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217EE30h case    2:*/		return 0x8217EE34;
		  /* 8217EE34h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217EE34h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217EE44;  }
		/* 8217EE34h case    3:*/		return 0x8217EE38;
		  /* 8217EE38h */ case    4:  		/* mr R30, R11 */
		/* 8217EE38h case    4:*/		regs.R30 = regs.R11;
		/* 8217EE38h case    4:*/		return 0x8217EE3C;
		  /* 8217EE3Ch */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217EE3Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217EE3Ch case    5:*/		return 0x8217EE40;
		  /* 8217EE40h */ case    6:  		/* bc 4, CR6_EQ, -176 */
		/* 8217EE40h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217ED90;  }
		/* 8217EE40h case    6:*/		return 0x8217EE44;
	}
	return 0x8217EE44;
} // Block from 8217EE28h-8217EE44h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217EE44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EE44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EE44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EE44);
		  /* 8217EE44h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 8217EE44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8217EE44h case    0:*/		return 0x8217EE48;
		  /* 8217EE48h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217EE48h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217EE48h case    1:*/		return 0x8217EE4C;
		  /* 8217EE4Ch */ case    2:  		/* bc 4, CR0_EQ, 432 */
		/* 8217EE4Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217EFFC;  }
		/* 8217EE4Ch case    2:*/		return 0x8217EE50;
		  /* 8217EE50h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8217EE50h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217EE50h case    3:*/		return 0x8217EE54;
		  /* 8217EE54h */ case    4:  		/* bc 12, CR0_EQ, 424 */
		/* 8217EE54h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217EFFC;  }
		/* 8217EE54h case    4:*/		return 0x8217EE58;
		  /* 8217EE58h */ case    5:  		/* lwz R11, <#[R26]> */
		/* 8217EE58h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8217EE58h case    5:*/		return 0x8217EE5C;
		  /* 8217EE5Ch */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217EE5Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217EE5Ch case    6:*/		return 0x8217EE60;
		  /* 8217EE60h */ case    7:  		/* addi R4, R11, -4 */
		/* 8217EE60h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 8217EE60h case    7:*/		return 0x8217EE64;
		  /* 8217EE64h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217EE64h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217EE64h case    8:*/		return 0x8217EE68;
		  /* 8217EE68h */ case    9:  		/* addi R10, R11, 3 */
		/* 8217EE68h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 8217EE68h case    9:*/		return 0x8217EE6C;
		  /* 8217EE6Ch */ case   10:  		/* addic. R11, R11, -1 */
		/* 8217EE6Ch case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8217EE6Ch case   10:*/		return 0x8217EE70;
		  /* 8217EE70h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8217EE70h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8217EE70h case   11:*/		return 0x8217EE74;
		  /* 8217EE74h */ case   12:  		/* lwzx R29, <#[R10 + R4]> */
		/* 8217EE74h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 8217EE74h case   12:*/		return 0x8217EE78;
		  /* 8217EE78h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 8217EE78h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8217EE78h case   13:*/		return 0x8217EE7C;
		  /* 8217EE7Ch */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 8217EE7Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x8217EEB8;  }
		/* 8217EE7Ch case   14:*/		return 0x8217EE80;
		  /* 8217EE80h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 8217EE80h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 8217EE80h case   15:*/		return 0x8217EE84;
		  /* 8217EE84h */ case   16:  		/* mr R3, R26 */
		/* 8217EE84h case   16:*/		regs.R3 = regs.R26;
		/* 8217EE84h case   16:*/		return 0x8217EE88;
	}
	return 0x8217EE88;
} // Block from 8217EE44h-8217EE88h (17 instructions)

//////////////////////////////////////////////////////
// Block at 8217EE88h
// Function '?ApplyCNDOperations@Compiler@D3DXShader@@AAAXPAV?$ArrayList@UCNDOperation@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAVInstruction@2@_NPAVBlock@2@PAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EE88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EE88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EE88);
		  /* 8217EE88h */ case    0:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217EE88h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217EE88h case    0:*/		return 0x8217EE8C;
		  /* 8217EE8Ch */ case    1:  		/* lwz R9, <#[R11]> */
		/* 8217EE8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 8217EE8Ch case    1:*/		return 0x8217EE90;
		  /* 8217EE90h */ case    2:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8217EE90h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8217EE90h case    2:*/		return 0x8217EE94;
		  /* 8217EE94h */ case    3:  		/* stw R9, <#[R10]> */
		/* 8217EE94h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217EE94h case    3:*/		return 0x8217EE98;
		  /* 8217EE98h */ case    4:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217EE98h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217EE98h case    4:*/		return 0x8217EE9C;
		  /* 8217EE9Ch */ case    5:  		/* lwz R11, <#[R11]> */
		/* 8217EE9Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217EE9Ch case    5:*/		return 0x8217EEA0;
		  /* 8217EEA0h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217EEA0h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217EEA0h case    6:*/		return 0x8217EEA4;
		  /* 8217EEA4h */ case    7:  		/* stw R10, <#[R11]> */
		/* 8217EEA4h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217EEA4h case    7:*/		return 0x8217EEA8;
		  /* 8217EEA8h */ case    8:  		/* lwz R11, <#[R4 + 12]> */
		/* 8217EEA8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 8217EEA8h case    8:*/		return 0x8217EEAC;
		  /* 8217EEACh */ case    9:  		/* addi R11, R11, 4 */
		/* 8217EEACh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 8217EEACh case    9:*/		return 0x8217EEB0;
		  /* 8217EEB0h */ case   10:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 8217EEB0h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 8217EEB0h case   10:*/		return 0x8217EEB4;
		  /* 8217EEB4h */ case   11:  		/* bl -184492 */
		/* 8217EEB4h case   11:*/		regs.LR = 0x8217EEB8; return 0x82151E08;
		/* 8217EEB4h case   11:*/		return 0x8217EEB8;
	}
	return 0x8217EEB8;
} // Block from 8217EE88h-8217EEB8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217EEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EEB8);
		  /* 8217EEB8h */ case    0:  		/* lwz R30, <#[R29 + 28]> */
		/* 8217EEB8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x0000001C) );
		/* 8217EEB8h case    0:*/		return 0x8217EEBC;
		  /* 8217EEBCh */ case    1:  		/* lwz R10, <#[R30 + 40]> */
		/* 8217EEBCh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000028) );
		/* 8217EEBCh case    1:*/		return 0x8217EEC0;
		  /* 8217EEC0h */ case    2:  		/* lwz R11, <#[R10 + 4]> */
		/* 8217EEC0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217EEC0h case    2:*/		return 0x8217EEC4;
		  /* 8217EEC4h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217EEC4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217EEC4h case    3:*/		return 0x8217EEC8;
		  /* 8217EEC8h */ case    4:  		/* bc 4, CR0_EQ, -132 */
		/* 8217EEC8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217EE44;  }
		/* 8217EEC8h case    4:*/		return 0x8217EECC;
		  /* 8217EECCh */ case    5:  		/* lwz R11, <#[R29 + 8]> */
		/* 8217EECCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 8217EECCh case    5:*/		return 0x8217EED0;
		  /* 8217EED0h */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217EED0h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217EED0h case    6:*/		return 0x8217EED4;
		  /* 8217EED4h */ case    7:  		/* cmplwi CR6, R11, 86 */
		/* 8217EED4h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8217EED4h case    7:*/		return 0x8217EED8;
		  /* 8217EED8h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 8217EED8h case    8:*/		if ( regs.CR[6].eq ) { return 0x8217EF08;  }
		/* 8217EED8h case    8:*/		return 0x8217EEDC;
		  /* 8217EEDCh */ case    9:  		/* cmplwi CR6, R11, 87 */
		/* 8217EEDCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8217EEDCh case    9:*/		return 0x8217EEE0;
		  /* 8217EEE0h */ case   10:  		/* bc 12, CR6_EQ, 40 */
		/* 8217EEE0h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217EF08;  }
		/* 8217EEE0h case   10:*/		return 0x8217EEE4;
		  /* 8217EEE4h */ case   11:  		/* cmplwi CR6, R11, 89 */
		/* 8217EEE4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8217EEE4h case   11:*/		return 0x8217EEE8;
		  /* 8217EEE8h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 8217EEE8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8217EF08;  }
		/* 8217EEE8h case   12:*/		return 0x8217EEEC;
		  /* 8217EEECh */ case   13:  		/* cmplwi CR6, R11, 90 */
		/* 8217EEECh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8217EEECh case   13:*/		return 0x8217EEF0;
		  /* 8217EEF0h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 8217EEF0h case   14:*/		if ( regs.CR[6].eq ) { return 0x8217EF08;  }
		/* 8217EEF0h case   14:*/		return 0x8217EEF4;
		  /* 8217EEF4h */ case   15:  		/* cmplwi CR6, R11, 84 */
		/* 8217EEF4h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8217EEF4h case   15:*/		return 0x8217EEF8;
		  /* 8217EEF8h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 8217EEF8h case   16:*/		if ( regs.CR[6].eq ) { return 0x8217EF08;  }
		/* 8217EEF8h case   16:*/		return 0x8217EEFC;
		  /* 8217EEFCh */ case   17:  		/* cmplwi CR6, R11, 85 */
		/* 8217EEFCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8217EEFCh case   17:*/		return 0x8217EF00;
		  /* 8217EF00h */ case   18:  		/* li R11, 0 */
		/* 8217EF00h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217EF00h case   18:*/		return 0x8217EF04;
		  /* 8217EF04h */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 8217EF04h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8217EF0C;  }
		/* 8217EF04h case   19:*/		return 0x8217EF08;
	}
	return 0x8217EF08;
} // Block from 8217EEB8h-8217EF08h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8217EF08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EF08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EF08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EF08);
		  /* 8217EF08h */ case    0:  		/* mr R11, R23 */
		/* 8217EF08h case    0:*/		regs.R11 = regs.R23;
		/* 8217EF08h case    0:*/		return 0x8217EF0C;
	}
	return 0x8217EF0C;
} // Block from 8217EF08h-8217EF0Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217EF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EF0C);
		  /* 8217EF0Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217EF0Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217EF0Ch case    0:*/		return 0x8217EF10;
		  /* 8217EF10h */ case    1:  		/* bc 12, CR0_EQ, 144 */
		/* 8217EF10h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217EFA0;  }
		/* 8217EF10h case    1:*/		return 0x8217EF14;
		  /* 8217EF14h */ case    2:  		/* lwz R11, <#[R10]> */
		/* 8217EF14h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 8217EF14h case    2:*/		return 0x8217EF18;
		  /* 8217EF18h */ case    3:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 8217EF18h case    3:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 8217EF18h case    3:*/		return 0x8217EF1C;
		  /* 8217EF1Ch */ case    4:  		/* bc 12, CR0_EQ, 132 */
		/* 8217EF1Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x8217EFA0;  }
		/* 8217EF1Ch case    4:*/		return 0x8217EF20;
		  /* 8217EF20h */ case    5:  		/* lwz R31, <#[R24 + 4]> */
		/* 8217EF20h case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R24 + 0x00000004) );
		/* 8217EF20h case    5:*/		return 0x8217EF24;
		  /* 8217EF24h */ case    6:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217EF24h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217EF24h case    6:*/		return 0x8217EF28;
		  /* 8217EF28h */ case    7:  		/* bc 4, CR0_EQ, 120 */
		/* 8217EF28h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8217EFA0;  }
		/* 8217EF28h case    7:*/		return 0x8217EF2C;
		  /* 8217EF2Ch */ case    8:  		/* cmplwi CR0, R31, 0 */
		/* 8217EF2Ch case    8:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 8217EF2Ch case    8:*/		return 0x8217EF30;
		  /* 8217EF30h */ case    9:  		/* bc 12, CR0_EQ, 112 */
		/* 8217EF30h case    9:*/		if ( regs.CR[0].eq ) { return 0x8217EFA0;  }
		/* 8217EF30h case    9:*/		return 0x8217EF34;
		  /* 8217EF34h */ case   10:  		/* lwz R9, <#[R31 + 40]> */
		/* 8217EF34h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 8217EF34h case   10:*/		return 0x8217EF38;
		  /* 8217EF38h */ case   11:  		/* lwz R11, <#[R30 + 48]> */
		/* 8217EF38h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8217EF38h case   11:*/		return 0x8217EF3C;
		  /* 8217EF3Ch */ case   12:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 8217EF3Ch case   12:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 8217EF3Ch case   12:*/		return 0x8217EF40;
		  /* 8217EF40h */ case   13:  		/* lwz R8, <#[R9]> */
		/* 8217EF40h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8217EF40h case   13:*/		return 0x8217EF44;
		  /* 8217EF44h */ case   14:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 8217EF44h case   14:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 8217EF44h case   14:*/		return 0x8217EF48;
		  /* 8217EF48h */ case   15:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 8217EF48h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 8217EF48h case   15:*/		return 0x8217EF4C;
		  /* 8217EF4Ch */ case   16:  		/* rlwinm R10, R8, 0, 13, 31 */
		/* 8217EF4Ch case   16:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R8);
		/* 8217EF4Ch case   16:*/		return 0x8217EF50;
		  /* 8217EF50h */ case   17:  		/* addi R11, R11, 1 */
		/* 8217EF50h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217EF50h case   17:*/		return 0x8217EF54;
		  /* 8217EF54h */ case   18:  		/* addi R10, R10, 31 */
		/* 8217EF54h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 8217EF54h case   18:*/		return 0x8217EF58;
		  /* 8217EF58h */ case   19:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217EF58h case   19:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217EF58h case   19:*/		return 0x8217EF5C;
		  /* 8217EF5Ch */ case   20:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 8217EF5Ch case   20:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 8217EF5Ch case   20:*/		return 0x8217EF60;
		  /* 8217EF60h */ case   21:  		/* slw R8, R23, R7 */
		/* 8217EF60h case   21:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R23,regs.R7);
		/* 8217EF60h case   21:*/		return 0x8217EF64;
		  /* 8217EF64h */ case   22:  		/* add R11, R10, R11 */
		/* 8217EF64h case   22:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217EF64h case   22:*/		return 0x8217EF68;
		  /* 8217EF68h */ case   23:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8217EF68h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8217EF68h case   23:*/		return 0x8217EF6C;
		  /* 8217EF6Ch */ case   24:  		/* and. R11, R11, R8 */
		/* 8217EF6Ch case   24:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8217EF6Ch case   24:*/		return 0x8217EF70;
		  /* 8217EF70h */ case   25:  		/* bc 12, CR0_EQ, 24 */
		/* 8217EF70h case   25:*/		if ( regs.CR[0].eq ) { return 0x8217EF88;  }
		/* 8217EF70h case   25:*/		return 0x8217EF74;
		  /* 8217EF74h */ case   26:  		/* mr R6, R26 */
		/* 8217EF74h case   26:*/		regs.R6 = regs.R26;
		/* 8217EF74h case   26:*/		return 0x8217EF78;
		  /* 8217EF78h */ case   27:  		/* mr R5, R30 */
		/* 8217EF78h case   27:*/		regs.R5 = regs.R30;
		/* 8217EF78h case   27:*/		return 0x8217EF7C;
		  /* 8217EF7Ch */ case   28:  		/* mr R4, R31 */
		/* 8217EF7Ch case   28:*/		regs.R4 = regs.R31;
		/* 8217EF7Ch case   28:*/		return 0x8217EF80;
		  /* 8217EF80h */ case   29:  		/* mr R3, R24 */
		/* 8217EF80h case   29:*/		regs.R3 = regs.R24;
		/* 8217EF80h case   29:*/		return 0x8217EF84;
		  /* 8217EF84h */ case   30:  		/* bl -3908 */
		/* 8217EF84h case   30:*/		regs.LR = 0x8217EF88; return 0x8217E040;
		/* 8217EF84h case   30:*/		return 0x8217EF88;
	}
	return 0x8217EF88;
} // Block from 8217EF0Ch-8217EF88h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8217EF88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EF88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EF88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EF88);
		  /* 8217EF88h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217EF88h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217EF88h case    0:*/		return 0x8217EF8C;
		  /* 8217EF8Ch */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 8217EF8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 8217EF8Ch case    1:*/		return 0x8217EF90;
		  /* 8217EF90h */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 8217EF90h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 8217EF90h case    2:*/		return 0x8217EF94;
		  /* 8217EF94h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217EF94h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217EFA0;  }
		/* 8217EF94h case    3:*/		return 0x8217EF98;
		  /* 8217EF98h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 8217EF98h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217EF98h case    4:*/		return 0x8217EF9C;
		  /* 8217EF9Ch */ case    5:  		/* bc 4, CR6_EQ, -104 */
		/* 8217EF9Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217EF34;  }
		/* 8217EF9Ch case    5:*/		return 0x8217EFA0;
	}
	return 0x8217EFA0;
} // Block from 8217EF88h-8217EFA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217EFA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EFA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EFA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EFA0);
		  /* 8217EFA0h */ case    0:  		/* lwz R31, <#[R29 + 4]> */
		/* 8217EFA0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 8217EFA0h case    0:*/		return 0x8217EFA4;
		  /* 8217EFA4h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8217EFA4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217EFA4h case    1:*/		return 0x8217EFA8;
		  /* 8217EFA8h */ case    2:  		/* bc 12, CR6_EQ, -356 */
		/* 8217EFA8h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217EE44;  }
		/* 8217EFA8h case    2:*/		return 0x8217EFAC;
		  /* 8217EFACh */ case    3:  		/* lwz R4, <#[R31 + 16]> */
		/* 8217EFACh case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 8217EFACh case    3:*/		return 0x8217EFB0;
		  /* 8217EFB0h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 8217EFB0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 8217EFB0h case    4:*/		return 0x8217EFB4;
		  /* 8217EFB4h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 8217EFB4h case    5:*/		if ( regs.CR[6].eq ) { return 0x8217EFF4;  }
		/* 8217EFB4h case    5:*/		return 0x8217EFB8;
		  /* 8217EFB8h */ case    6:  		/* lwz R11, <#[R31]> */
		/* 8217EFB8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 8217EFB8h case    6:*/		return 0x8217EFBC;
		  /* 8217EFBCh */ case    7:  		/* rlwinm. R10, R11, 0, 1, 1 */
		/* 8217EFBCh case    7:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R11);
		/* 8217EFBCh case    7:*/		return 0x8217EFC0;
		  /* 8217EFC0h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 8217EFC0h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217EFD0;  }
		/* 8217EFC0h case    8:*/		return 0x8217EFC4;
		  /* 8217EFC4h */ case    9:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8217EFC4h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8217EFC4h case    9:*/		return 0x8217EFC8;
		  /* 8217EFC8h */ case   10:  		/* li R11, 0 */
		/* 8217EFC8h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217EFC8h case   10:*/		return 0x8217EFCC;
		  /* 8217EFCCh */ case   11:  		/* bc 12, CR0_EQ, 8 */
		/* 8217EFCCh case   11:*/		if ( regs.CR[0].eq ) { return 0x8217EFD4;  }
		/* 8217EFCCh case   11:*/		return 0x8217EFD0;
	}
	return 0x8217EFD0;
} // Block from 8217EFA0h-8217EFD0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217EFD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EFD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EFD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EFD0);
		  /* 8217EFD0h */ case    0:  		/* mr R11, R23 */
		/* 8217EFD0h case    0:*/		regs.R11 = regs.R23;
		/* 8217EFD0h case    0:*/		return 0x8217EFD4;
	}
	return 0x8217EFD4;
} // Block from 8217EFD0h-8217EFD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217EFD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EFD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EFD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EFD4);
		  /* 8217EFD4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217EFD4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217EFD4h case    0:*/		return 0x8217EFD8;
		  /* 8217EFD8h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 8217EFD8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217EFF4;  }
		/* 8217EFD8h case    1:*/		return 0x8217EFDC;
		  /* 8217EFDCh */ case    2:  		/* lwz R11, <#[R4 + 8]> */
		/* 8217EFDCh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 8217EFDCh case    2:*/		return 0x8217EFE0;
		  /* 8217EFE0h */ case    3:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 8217EFE0h case    3:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 8217EFE0h case    3:*/		return 0x8217EFE4;
		  /* 8217EFE4h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 8217EFE4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217EFF4;  }
		/* 8217EFE4h case    4:*/		return 0x8217EFE8;
		  /* 8217EFE8h */ case    5:  		/* mr R5, R26 */
		/* 8217EFE8h case    5:*/		regs.R5 = regs.R26;
		/* 8217EFE8h case    5:*/		return 0x8217EFEC;
		  /* 8217EFECh */ case    6:  		/* mr R3, R24 */
		/* 8217EFECh case    6:*/		regs.R3 = regs.R24;
		/* 8217EFECh case    6:*/		return 0x8217EFF0;
		  /* 8217EFF0h */ case    7:  		/* bl -4256 */
		/* 8217EFF0h case    7:*/		regs.LR = 0x8217EFF4; return 0x8217DF50;
		/* 8217EFF0h case    7:*/		return 0x8217EFF4;
	}
	return 0x8217EFF4;
} // Block from 8217EFD4h-8217EFF4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217EFF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EFF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EFF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EFF4);
		  /* 8217EFF4h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 8217EFF4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 8217EFF4h case    0:*/		return 0x8217EFF8;
		  /* 8217EFF8h */ case    1:  		/* b -84 */
		/* 8217EFF8h case    1:*/		return 0x8217EFA4;
		/* 8217EFF8h case    1:*/		return 0x8217EFFC;
	}
	return 0x8217EFFC;
} // Block from 8217EFF4h-8217EFFCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217EFFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217EFFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217EFFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217EFFC);
		  /* 8217EFFCh */ case    0:  		/* lwz R11, <#[R24 + 40]> */
		/* 8217EFFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 8217EFFCh case    0:*/		return 0x8217F000;
		  /* 8217F000h */ case    1:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 8217F000h case    1:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 8217F000h case    1:*/		return 0x8217F004;
		  /* 8217F004h */ case    2:  		/* bc 12, CR0_EQ, 872 */
		/* 8217F004h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217F36C;  }
		/* 8217F004h case    2:*/		return 0x8217F008;
		  /* 8217F008h */ case    3:  		/* lwz R11, <#[R24 + 4]> */
		/* 8217F008h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8217F008h case    3:*/		return 0x8217F00C;
		  /* 8217F00Ch */ case    4:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217F00Ch case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F00Ch case    4:*/		return 0x8217F010;
		  /* 8217F010h */ case    5:  		/* bc 4, CR0_EQ, 840 */
		/* 8217F010h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217F358;  }
		/* 8217F010h case    5:*/		return 0x8217F014;
		  /* 8217F014h */ case    6:  		/* mr R27, R11 */
		/* 8217F014h case    6:*/		regs.R27 = regs.R11;
		/* 8217F014h case    6:*/		return 0x8217F018;
		  /* 8217F018h */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 8217F018h case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217F018h case    7:*/		return 0x8217F01C;
		  /* 8217F01Ch */ case    8:  		/* bc 12, CR0_EQ, 828 */
		/* 8217F01Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x8217F358;  }
		/* 8217F01Ch case    8:*/		return 0x8217F020;
		  /* 8217F020h */ case    9:  		/* lwz R11, <#[R27 + 36]> */
		/* 8217F020h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000024) );
		/* 8217F020h case    9:*/		return 0x8217F024;
		  /* 8217F024h */ case   10:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F024h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F024h case   10:*/		return 0x8217F028;
		  /* 8217F028h */ case   11:  		/* bc 4, CR0_EQ, 788 */
		/* 8217F028h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8217F33C;  }
		/* 8217F028h case   11:*/		return 0x8217F02C;
		  /* 8217F02Ch */ case   12:  		/* lwz R11, <#[R27 + 32]> */
		/* 8217F02Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000020) );
		/* 8217F02Ch case   12:*/		return 0x8217F030;
		  /* 8217F030h */ case   13:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F030h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F030h case   13:*/		return 0x8217F034;
		  /* 8217F034h */ case   14:  		/* addic. R28, R11, -40 */
		/* 8217F034h case   14:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 8217F034h case   14:*/		return 0x8217F038;
		  /* 8217F038h */ case   15:  		/* bc 12, CR0_EQ, 772 */
		/* 8217F038h case   15:*/		if ( regs.CR[0].eq ) { return 0x8217F33C;  }
		/* 8217F038h case   15:*/		return 0x8217F03C;
		  /* 8217F03Ch */ case   16:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217F03Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217F03Ch case   16:*/		return 0x8217F040;
		  /* 8217F040h */ case   17:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217F040h case   17:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217F040h case   17:*/		return 0x8217F044;
		  /* 8217F044h */ case   18:  		/* cmplwi CR6, R11, 10624 */
		/* 8217F044h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 8217F044h case   18:*/		return 0x8217F048;
		  /* 8217F048h */ case   19:  		/* bc 4, CR6_EQ, 240 */
		/* 8217F048h case   19:*/		if ( !regs.CR[6].eq ) { return 0x8217F138;  }
		/* 8217F048h case   19:*/		return 0x8217F04C;
		  /* 8217F04Ch */ case   20:  		/* mr R4, R27 */
		/* 8217F04Ch case   20:*/		regs.R4 = regs.R27;
		/* 8217F04Ch case   20:*/		return 0x8217F050;
		  /* 8217F050h */ case   21:  		/* mr R3, R24 */
		/* 8217F050h case   21:*/		regs.R3 = regs.R24;
		/* 8217F050h case   21:*/		return 0x8217F054;
		  /* 8217F054h */ case   22:  		/* bl 262628 */
		/* 8217F054h case   22:*/		regs.LR = 0x8217F058; return 0x821BF238;
		/* 8217F054h case   22:*/		return 0x8217F058;
		  /* 8217F058h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217F058h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217F058h case   23:*/		return 0x8217F05C;
		  /* 8217F05Ch */ case   24:  		/* bc 12, CR0_EQ, 220 */
		/* 8217F05Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x8217F138;  }
		/* 8217F05Ch case   24:*/		return 0x8217F060;
		  /* 8217F060h */ case   25:  		/* lwz R30, <#[R27 + 64]> */
		/* 8217F060h case   25:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000040) );
		/* 8217F060h case   25:*/		return 0x8217F064;
		  /* 8217F064h */ case   26:  		/* b 204 */
		/* 8217F064h case   26:*/		return 0x8217F130;
		/* 8217F064h case   26:*/		return 0x8217F068;
		  /* 8217F068h */ case   27:  		/* lwz R11, <#[R30 + 36]> */
		/* 8217F068h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8217F068h case   27:*/		return 0x8217F06C;
		  /* 8217F06Ch */ case   28:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F06Ch case   28:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F06Ch case   28:*/		return 0x8217F070;
		  /* 8217F070h */ case   29:  		/* bc 12, CR0_EQ, 12 */
		/* 8217F070h case   29:*/		if ( regs.CR[0].eq ) { return 0x8217F07C;  }
		/* 8217F070h case   29:*/		return 0x8217F074;
		  /* 8217F074h */ case   30:  		/* li R31, 0 */
		/* 8217F074h case   30:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8217F074h case   30:*/		return 0x8217F078;
		  /* 8217F078h */ case   31:  		/* b 16 */
		/* 8217F078h case   31:*/		return 0x8217F088;
		/* 8217F078h case   31:*/		return 0x8217F07C;
	}
	return 0x8217F07C;
} // Block from 8217EFFCh-8217F07Ch (32 instructions)

//////////////////////////////////////////////////////
// Block at 8217F07Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F07C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F07C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F07C);
		  /* 8217F07Ch */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 8217F07Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8217F07Ch case    0:*/		return 0x8217F080;
		  /* 8217F080h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F080h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F080h case    1:*/		return 0x8217F084;
		  /* 8217F084h */ case    2:  		/* addi R31, R11, -40 */
		/* 8217F084h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 8217F084h case    2:*/		return 0x8217F088;
	}
	return 0x8217F088;
} // Block from 8217F07Ch-8217F088h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F088);
		  /* 8217F088h */ case    0:  		/* lwz R29, <#[R31 + 8]> */
		/* 8217F088h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000008) );
		/* 8217F088h case    0:*/		return 0x8217F08C;
		  /* 8217F08Ch */ case    1:  		/* rlwinm. R11, R29, 5, 31, 31 */
		/* 8217F08Ch case    1:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R29);
		/* 8217F08Ch case    1:*/		return 0x8217F090;
		  /* 8217F090h */ case    2:  		/* bc 4, CR0_EQ, 108 */
		/* 8217F090h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217F0FC;  }
		/* 8217F090h case    2:*/		return 0x8217F094;
		  /* 8217F094h */ case    3:  		/* rlwinm R11, R29, 25, 25, 31 */
		/* 8217F094h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R29);
		/* 8217F094h case    3:*/		return 0x8217F098;
		  /* 8217F098h */ case    4:  		/* cmplwi CR6, R11, 86 */
		/* 8217F098h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8217F098h case    4:*/		return 0x8217F09C;
		  /* 8217F09Ch */ case    5:  		/* bc 12, CR6_EQ, 48 */
		/* 8217F09Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x8217F0CC;  }
		/* 8217F09Ch case    5:*/		return 0x8217F0A0;
		  /* 8217F0A0h */ case    6:  		/* cmplwi CR6, R11, 87 */
		/* 8217F0A0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8217F0A0h case    6:*/		return 0x8217F0A4;
		  /* 8217F0A4h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 8217F0A4h case    7:*/		if ( regs.CR[6].eq ) { return 0x8217F0CC;  }
		/* 8217F0A4h case    7:*/		return 0x8217F0A8;
		  /* 8217F0A8h */ case    8:  		/* cmplwi CR6, R11, 89 */
		/* 8217F0A8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8217F0A8h case    8:*/		return 0x8217F0AC;
		  /* 8217F0ACh */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 8217F0ACh case    9:*/		if ( regs.CR[6].eq ) { return 0x8217F0CC;  }
		/* 8217F0ACh case    9:*/		return 0x8217F0B0;
		  /* 8217F0B0h */ case   10:  		/* cmplwi CR6, R11, 90 */
		/* 8217F0B0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8217F0B0h case   10:*/		return 0x8217F0B4;
		  /* 8217F0B4h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 8217F0B4h case   11:*/		if ( regs.CR[6].eq ) { return 0x8217F0CC;  }
		/* 8217F0B4h case   11:*/		return 0x8217F0B8;
		  /* 8217F0B8h */ case   12:  		/* cmplwi CR6, R11, 84 */
		/* 8217F0B8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8217F0B8h case   12:*/		return 0x8217F0BC;
		  /* 8217F0BCh */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 8217F0BCh case   13:*/		if ( regs.CR[6].eq ) { return 0x8217F0CC;  }
		/* 8217F0BCh case   13:*/		return 0x8217F0C0;
		  /* 8217F0C0h */ case   14:  		/* cmplwi CR6, R11, 85 */
		/* 8217F0C0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8217F0C0h case   14:*/		return 0x8217F0C4;
		  /* 8217F0C4h */ case   15:  		/* li R11, 0 */
		/* 8217F0C4h case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217F0C4h case   15:*/		return 0x8217F0C8;
		  /* 8217F0C8h */ case   16:  		/* bc 4, CR6_EQ, 8 */
		/* 8217F0C8h case   16:*/		if ( !regs.CR[6].eq ) { return 0x8217F0D0;  }
		/* 8217F0C8h case   16:*/		return 0x8217F0CC;
	}
	return 0x8217F0CC;
} // Block from 8217F088h-8217F0CCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 8217F0CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F0CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F0CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F0CC);
		  /* 8217F0CCh */ case    0:  		/* mr R11, R23 */
		/* 8217F0CCh case    0:*/		regs.R11 = regs.R23;
		/* 8217F0CCh case    0:*/		return 0x8217F0D0;
	}
	return 0x8217F0D0;
} // Block from 8217F0CCh-8217F0D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F0D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F0D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F0D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F0D0);
		  /* 8217F0D0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217F0D0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217F0D0h case    0:*/		return 0x8217F0D4;
		  /* 8217F0D4h */ case    1:  		/* bc 12, CR0_EQ, 32 */
		/* 8217F0D4h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217F0F4;  }
		/* 8217F0D4h case    1:*/		return 0x8217F0D8;
		  /* 8217F0D8h */ case    2:  		/* mr R4, R24 */
		/* 8217F0D8h case    2:*/		regs.R4 = regs.R24;
		/* 8217F0D8h case    2:*/		return 0x8217F0DC;
		  /* 8217F0DCh */ case    3:  		/* mr R3, R31 */
		/* 8217F0DCh case    3:*/		regs.R3 = regs.R31;
		/* 8217F0DCh case    3:*/		return 0x8217F0E0;
		  /* 8217F0E0h */ case    4:  		/* bl -108888 */
		/* 8217F0E0h case    4:*/		regs.LR = 0x8217F0E4; return 0x82164788;
		/* 8217F0E0h case    4:*/		return 0x8217F0E4;
		  /* 8217F0E4h */ case    5:  		/* cmpwi CR6, R3, 8 */
		/* 8217F0E4h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000008);
		/* 8217F0E4h case    5:*/		return 0x8217F0E8;
		  /* 8217F0E8h */ case    6:  		/* bc 12, CR6_EQ, 80 */
		/* 8217F0E8h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217F138;  }
		/* 8217F0E8h case    6:*/		return 0x8217F0EC;
		  /* 8217F0ECh */ case    7:  		/* cmpwi CR6, R3, 9 */
		/* 8217F0ECh case    7:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000009);
		/* 8217F0ECh case    7:*/		return 0x8217F0F0;
		  /* 8217F0F0h */ case    8:  		/* bc 12, CR6_EQ, 72 */
		/* 8217F0F0h case    8:*/		if ( regs.CR[6].eq ) { return 0x8217F138;  }
		/* 8217F0F0h case    8:*/		return 0x8217F0F4;
	}
	return 0x8217F0F4;
} // Block from 8217F0D0h-8217F0F4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217F0F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F0F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F0F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F0F4);
		  /* 8217F0F4h */ case    0:  		/* oris R11, R29, 2048 */
		/* 8217F0F4h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R29,0x800);
		/* 8217F0F4h case    0:*/		return 0x8217F0F8;
		  /* 8217F0F8h */ case    1:  		/* stw R11, <#[R31 + 8]> */
		/* 8217F0F8h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217F0F8h case    1:*/		return 0x8217F0FC;
	}
	return 0x8217F0FC;
} // Block from 8217F0F4h-8217F0FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F0FC);
		  /* 8217F0FCh */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217F0FCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217F0FCh case    0:*/		return 0x8217F100;
		  /* 8217F100h */ case    1:  		/* rlwinm. R10, R11, 5, 31, 31 */
		/* 8217F100h case    1:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F100h case    1:*/		return 0x8217F104;
		  /* 8217F104h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 8217F104h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217F110;  }
		/* 8217F104h case    2:*/		return 0x8217F108;
		  /* 8217F108h */ case    3:  		/* oris R11, R11, 2048 */
		/* 8217F108h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x800);
		/* 8217F108h case    3:*/		return 0x8217F10C;
		  /* 8217F10Ch */ case    4:  		/* stw R11, <#[R28 + 8]> */
		/* 8217F10Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217F10Ch case    4:*/		return 0x8217F110;
	}
	return 0x8217F110;
} // Block from 8217F0FCh-8217F110h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217F110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F110);
		  /* 8217F110h */ case    0:  		/* lwz R11, <#[R24 + 44]> */
		/* 8217F110h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 8217F110h case    0:*/		return 0x8217F114;
		  /* 8217F114h */ case    1:  		/* mr R5, R26 */
		/* 8217F114h case    1:*/		regs.R5 = regs.R26;
		/* 8217F114h case    1:*/		return 0x8217F118;
		  /* 8217F118h */ case    2:  		/* mr R4, R30 */
		/* 8217F118h case    2:*/		regs.R4 = regs.R30;
		/* 8217F118h case    2:*/		return 0x8217F11C;
		  /* 8217F11Ch */ case    3:  		/* ori R11, R11, 256 */
		/* 8217F11Ch case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x100);
		/* 8217F11Ch case    3:*/		return 0x8217F120;
		  /* 8217F120h */ case    4:  		/* mr R3, R24 */
		/* 8217F120h case    4:*/		regs.R3 = regs.R24;
		/* 8217F120h case    4:*/		return 0x8217F124;
		  /* 8217F124h */ case    5:  		/* stw R11, <#[R24 + 44]> */
		/* 8217F124h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x0000002C) );
		/* 8217F124h case    5:*/		return 0x8217F128;
		  /* 8217F128h */ case    6:  		/* bl -3856 */
		/* 8217F128h case    6:*/		regs.LR = 0x8217F12C; return 0x8217E218;
		/* 8217F128h case    6:*/		return 0x8217F12C;
		  /* 8217F12Ch */ case    7:  		/* lwz R30, <#[R30 + 64]> */
		/* 8217F12Ch case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000040) );
		/* 8217F12Ch case    7:*/		return 0x8217F130;
	}
	return 0x8217F130;
} // Block from 8217F110h-8217F130h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217F130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F130);
		  /* 8217F130h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 8217F130h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217F130h case    0:*/		return 0x8217F134;
		  /* 8217F134h */ case    1:  		/* bc 4, CR6_EQ, -204 */
		/* 8217F134h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217F068;  }
		/* 8217F134h case    1:*/		return 0x8217F138;
	}
	return 0x8217F138;
} // Block from 8217F130h-8217F138h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F138h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F138( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F138) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F138);
		  /* 8217F138h */ case    0:  		/* lwz R10, <#[R27 + 8]> */
		/* 8217F138h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 8217F138h case    0:*/		return 0x8217F13C;
		  /* 8217F13Ch */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217F13Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217F13Ch case    1:*/		return 0x8217F140;
		  /* 8217F140h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 8217F140h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217F154;  }
		/* 8217F140h case    2:*/		return 0x8217F144;
		  /* 8217F144h */ case    3:  		/* lwz R11, <#[R10 + 12]> */
		/* 8217F144h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217F144h case    3:*/		return 0x8217F148;
		  /* 8217F148h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8217F148h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217F148h case    4:*/		return 0x8217F14C;
		  /* 8217F14Ch */ case    5:  		/* mr R11, R23 */
		/* 8217F14Ch case    5:*/		regs.R11 = regs.R23;
		/* 8217F14Ch case    5:*/		return 0x8217F150;
		  /* 8217F150h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 8217F150h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217F158;  }
		/* 8217F150h case    6:*/		return 0x8217F154;
	}
	return 0x8217F154;
} // Block from 8217F138h-8217F154h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217F154h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F154( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F154) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F154);
		  /* 8217F154h */ case    0:  		/* li R11, 0 */
		/* 8217F154h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217F154h case    0:*/		return 0x8217F158;
	}
	return 0x8217F158;
} // Block from 8217F154h-8217F158h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F158h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F158( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F158) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F158);
		  /* 8217F158h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217F158h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217F158h case    0:*/		return 0x8217F15C;
		  /* 8217F15Ch */ case    1:  		/* bc 12, CR0_EQ, 480 */
		/* 8217F15Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8217F33C;  }
		/* 8217F15Ch case    1:*/		return 0x8217F160;
		  /* 8217F160h */ case    2:  		/* lwz R11, <#[R27 + 40]> */
		/* 8217F160h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000028) );
		/* 8217F160h case    2:*/		return 0x8217F164;
		  /* 8217F164h */ case    3:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217F164h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217F164h case    3:*/		return 0x8217F168;
		  /* 8217F168h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F168h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F168h case    4:*/		return 0x8217F16C;
		  /* 8217F16Ch */ case    5:  		/* bc 4, CR0_EQ, 464 */
		/* 8217F16Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217F33C;  }
		/* 8217F16Ch case    5:*/		return 0x8217F170;
		  /* 8217F170h */ case    6:  		/* li R3, 0 */
		/* 8217F170h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217F170h case    6:*/		return 0x8217F174;
		  /* 8217F174h */ case    7:  		/* li R29, 0 */
		/* 8217F174h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8217F174h case    7:*/		return 0x8217F178;
		  /* 8217F178h */ case    8:  		/* li R30, 0 */
		/* 8217F178h case    8:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 8217F178h case    8:*/		return 0x8217F17C;
		  /* 8217F17Ch */ case    9:  		/* mr R31, R10 */
		/* 8217F17Ch case    9:*/		regs.R31 = regs.R10;
		/* 8217F17Ch case    9:*/		return 0x8217F180;
		  /* 8217F180h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 8217F180h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217F180h case   10:*/		return 0x8217F184;
		  /* 8217F184h */ case   11:  		/* bc 12, CR6_EQ, 96 */
		/* 8217F184h case   11:*/		if ( regs.CR[6].eq ) { return 0x8217F1E4;  }
		/* 8217F184h case   11:*/		return 0x8217F188;
		  /* 8217F188h */ case   12:  		/* lwz R4, <#[R31 + 4]> */
		/* 8217F188h case   12:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000004) );
		/* 8217F188h case   12:*/		return 0x8217F18C;
		  /* 8217F18Ch */ case   13:  		/* lwz R11, <#[R4 + 40]> */
		/* 8217F18Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000028) );
		/* 8217F18Ch case   13:*/		return 0x8217F190;
		  /* 8217F190h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217F190h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217F190h case   14:*/		return 0x8217F194;
		  /* 8217F194h */ case   15:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 8217F194h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8217F194h case   15:*/		return 0x8217F198;
		  /* 8217F198h */ case   16:  		/* bc 4, CR0_EQ, 64 */
		/* 8217F198h case   16:*/		if ( !regs.CR[0].eq ) { return 0x8217F1D8;  }
		/* 8217F198h case   16:*/		return 0x8217F19C;
		  /* 8217F19Ch */ case   17:  		/* lwz R10, <#[R27 + 48]> */
		/* 8217F19Ch case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000030) );
		/* 8217F19Ch case   17:*/		return 0x8217F1A0;
		  /* 8217F1A0h */ case   18:  		/* rlwinm R9, R10, 0, 13, 31 */
		/* 8217F1A0h case   18:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R10);
		/* 8217F1A0h case   18:*/		return 0x8217F1A4;
		  /* 8217F1A4h */ case   19:  		/* rlwinm R10, R9, 27, 5, 31 */
		/* 8217F1A4h case   19:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R10,regs.R9);
		/* 8217F1A4h case   19:*/		return 0x8217F1A8;
		  /* 8217F1A8h */ case   20:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217F1A8h case   20:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217F1A8h case   20:*/		return 0x8217F1AC;
		  /* 8217F1ACh */ case   21:  		/* addi R10, R10, 1 */
		/* 8217F1ACh case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217F1ACh case   21:*/		return 0x8217F1B0;
		  /* 8217F1B0h */ case   22:  		/* slw R9, R23, R9 */
		/* 8217F1B0h case   22:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 8217F1B0h case   22:*/		return 0x8217F1B4;
		  /* 8217F1B4h */ case   23:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 8217F1B4h case   23:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 8217F1B4h case   23:*/		return 0x8217F1B8;
		  /* 8217F1B8h */ case   24:  		/* lwzx R11, <#[R10 + R11]> */
		/* 8217F1B8h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 8217F1B8h case   24:*/		return 0x8217F1BC;
		  /* 8217F1BCh */ case   25:  		/* and. R11, R9, R11 */
		/* 8217F1BCh case   25:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8217F1BCh case   25:*/		return 0x8217F1C0;
		  /* 8217F1C0h */ case   26:  		/* bc 4, CR0_EQ, 32 */
		/* 8217F1C0h case   26:*/		if ( !regs.CR[0].eq ) { return 0x8217F1E0;  }
		/* 8217F1C0h case   26:*/		return 0x8217F1C4;
		  /* 8217F1C4h */ case   27:  		/* cmplwi CR6, R3, 0 */
		/* 8217F1C4h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 8217F1C4h case   27:*/		return 0x8217F1C8;
		  /* 8217F1C8h */ case   28:  		/* bc 4, CR6_EQ, 12 */
		/* 8217F1C8h case   28:*/		if ( !regs.CR[6].eq ) { return 0x8217F1D4;  }
		/* 8217F1C8h case   28:*/		return 0x8217F1CC;
		  /* 8217F1CCh */ case   29:  		/* mr R3, R4 */
		/* 8217F1CCh case   29:*/		regs.R3 = regs.R4;
		/* 8217F1CCh case   29:*/		return 0x8217F1D0;
		  /* 8217F1D0h */ case   30:  		/* b 8 */
		/* 8217F1D0h case   30:*/		return 0x8217F1D8;
		/* 8217F1D0h case   30:*/		return 0x8217F1D4;
	}
	return 0x8217F1D4;
} // Block from 8217F158h-8217F1D4h (31 instructions)

//////////////////////////////////////////////////////
// Block at 8217F1D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F1D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F1D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F1D4);
		  /* 8217F1D4h */ case    0:  		/* bl 723324 */
		/* 8217F1D4h case    0:*/		regs.LR = 0x8217F1D8; return 0x8222FB50;
		/* 8217F1D4h case    0:*/		return 0x8217F1D8;
	}
	return 0x8217F1D8;
} // Block from 8217F1D4h-8217F1D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F1D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F1D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F1D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F1D8);
		  /* 8217F1D8h */ case    0:  		/* lwz R31, <#[R31 + 12]> */
		/* 8217F1D8h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 8217F1D8h case    0:*/		return 0x8217F1DC;
		  /* 8217F1DCh */ case    1:  		/* b -92 */
		/* 8217F1DCh case    1:*/		return 0x8217F180;
		/* 8217F1DCh case    1:*/		return 0x8217F1E0;
	}
	return 0x8217F1E0;
} // Block from 8217F1D8h-8217F1E0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F1E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F1E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F1E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F1E0);
		  /* 8217F1E0h */ case    0:  		/* mr R30, R23 */
		/* 8217F1E0h case    0:*/		regs.R30 = regs.R23;
		/* 8217F1E0h case    0:*/		return 0x8217F1E4;
	}
	return 0x8217F1E4;
} // Block from 8217F1E0h-8217F1E4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F1E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F1E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F1E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F1E4);
		  /* 8217F1E4h */ case    0:  		/* rlwinm. R11, R30, 0, 24, 31 */
		/* 8217F1E4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R30);
		/* 8217F1E4h case    0:*/		return 0x8217F1E8;
		  /* 8217F1E8h */ case    1:  		/* bc 4, CR0_EQ, 340 */
		/* 8217F1E8h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217F33C;  }
		/* 8217F1E8h case    1:*/		return 0x8217F1EC;
		  /* 8217F1ECh */ case    2:  		/* lwz R9, <#[R27 + 8]> */
		/* 8217F1ECh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R27 + 0x00000008) );
		/* 8217F1ECh case    2:*/		return 0x8217F1F0;
		  /* 8217F1F0h */ case    3:  		/* mr R10, R9 */
		/* 8217F1F0h case    3:*/		regs.R10 = regs.R9;
		/* 8217F1F0h case    3:*/		return 0x8217F1F4;
		  /* 8217F1F4h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 8217F1F4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217F1F4h case    4:*/		return 0x8217F1F8;
		  /* 8217F1F8h */ case    5:  		/* bc 12, CR6_EQ, 56 */
		/* 8217F1F8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8217F230;  }
		/* 8217F1F8h case    5:*/		return 0x8217F1FC;
		  /* 8217F1FCh */ case    6:  		/* lwz R11, <#[R10 + 4]> */
		/* 8217F1FCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217F1FCh case    6:*/		return 0x8217F200;
		  /* 8217F200h */ case    7:  		/* lwz R8, <#[R11 + 40]> */
		/* 8217F200h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 8217F200h case    7:*/		return 0x8217F204;
		  /* 8217F204h */ case    8:  		/* lwz R8, <#[R8 + 4]> */
		/* 8217F204h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000004) );
		/* 8217F204h case    8:*/		return 0x8217F208;
		  /* 8217F208h */ case    9:  		/* rlwinm. R8, R8, 0, 31, 31 */
		/* 8217F208h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R8);
		/* 8217F208h case    9:*/		return 0x8217F20C;
		  /* 8217F20Ch */ case   10:  		/* bc 4, CR0_EQ, 24 */
		/* 8217F20Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x8217F224;  }
		/* 8217F20Ch case   10:*/		return 0x8217F210;
		  /* 8217F210h */ case   11:  		/* cmplw CR6, R3, R11 */
		/* 8217F210h case   11:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8217F210h case   11:*/		return 0x8217F214;
		  /* 8217F214h */ case   12:  		/* bc 12, CR6_EQ, 16 */
		/* 8217F214h case   12:*/		if ( regs.CR[6].eq ) { return 0x8217F224;  }
		/* 8217F214h case   12:*/		return 0x8217F218;
		  /* 8217F218h */ case   13:  		/* lwz R11, <#[R11 + 52]> */
		/* 8217F218h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000034) );
		/* 8217F218h case   13:*/		return 0x8217F21C;
		  /* 8217F21Ch */ case   14:  		/* cmplw CR6, R3, R11 */
		/* 8217F21Ch case   14:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 8217F21Ch case   14:*/		return 0x8217F220;
		  /* 8217F220h */ case   15:  		/* bc 4, CR6_EQ, 12 */
		/* 8217F220h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8217F22C;  }
		/* 8217F220h case   15:*/		return 0x8217F224;
	}
	return 0x8217F224;
} // Block from 8217F1E4h-8217F224h (16 instructions)

//////////////////////////////////////////////////////
// Block at 8217F224h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F224( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F224) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F224);
		  /* 8217F224h */ case    0:  		/* lwz R10, <#[R10 + 12]> */
		/* 8217F224h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8217F224h case    0:*/		return 0x8217F228;
		  /* 8217F228h */ case    1:  		/* b -52 */
		/* 8217F228h case    1:*/		return 0x8217F1F4;
		/* 8217F228h case    1:*/		return 0x8217F22C;
	}
	return 0x8217F22C;
} // Block from 8217F224h-8217F22Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F22Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F22C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F22C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F22C);
		  /* 8217F22Ch */ case    0:  		/* mr R29, R23 */
		/* 8217F22Ch case    0:*/		regs.R29 = regs.R23;
		/* 8217F22Ch case    0:*/		return 0x8217F230;
	}
	return 0x8217F230;
} // Block from 8217F22Ch-8217F230h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F230);
		  /* 8217F230h */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 8217F230h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 8217F230h case    0:*/		return 0x8217F234;
		  /* 8217F234h */ case    1:  		/* bc 12, CR0_EQ, 264 */
		/* 8217F234h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217F33C;  }
		/* 8217F234h case    1:*/		return 0x8217F238;
		  /* 8217F238h */ case    2:  		/* mr R8, R3 */
		/* 8217F238h case    2:*/		regs.R8 = regs.R3;
		/* 8217F238h case    2:*/		return 0x8217F23C;
		  /* 8217F23Ch */ case    3:  		/* lwz R11, <#[R8 + 36]> */
		/* 8217F23Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000024) );
		/* 8217F23Ch case    3:*/		return 0x8217F240;
		  /* 8217F240h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F240h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F240h case    4:*/		return 0x8217F244;
		  /* 8217F244h */ case    5:  		/* bc 4, CR0_EQ, 92 */
		/* 8217F244h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217F2A0;  }
		/* 8217F244h case    5:*/		return 0x8217F248;
		  /* 8217F248h */ case    6:  		/* lwz R11, <#[R8 + 32]> */
		/* 8217F248h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000020) );
		/* 8217F248h case    6:*/		return 0x8217F24C;
		  /* 8217F24Ch */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F24Ch case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F24Ch case    7:*/		return 0x8217F250;
		  /* 8217F250h */ case    8:  		/* addic. R11, R11, -40 */
		/* 8217F250h case    8:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217F250h case    8:*/		return 0x8217F254;
		  /* 8217F254h */ case    9:  		/* bc 12, CR0_EQ, 76 */
		/* 8217F254h case    9:*/		if ( regs.CR[0].eq ) { return 0x8217F2A0;  }
		/* 8217F254h case    9:*/		return 0x8217F258;
		  /* 8217F258h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217F258h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F258h case   10:*/		return 0x8217F25C;
		  /* 8217F25Ch */ case   11:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8217F25Ch case   11:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8217F25Ch case   11:*/		return 0x8217F260;
		  /* 8217F260h */ case   12:  		/* cmplwi CR6, R11, 86 */
		/* 8217F260h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 8217F260h case   12:*/		return 0x8217F264;
		  /* 8217F264h */ case   13:  		/* bc 12, CR6_EQ, 48 */
		/* 8217F264h case   13:*/		if ( regs.CR[6].eq ) { return 0x8217F294;  }
		/* 8217F264h case   13:*/		return 0x8217F268;
		  /* 8217F268h */ case   14:  		/* cmplwi CR6, R11, 87 */
		/* 8217F268h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 8217F268h case   14:*/		return 0x8217F26C;
		  /* 8217F26Ch */ case   15:  		/* bc 12, CR6_EQ, 40 */
		/* 8217F26Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x8217F294;  }
		/* 8217F26Ch case   15:*/		return 0x8217F270;
		  /* 8217F270h */ case   16:  		/* cmplwi CR6, R11, 89 */
		/* 8217F270h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 8217F270h case   16:*/		return 0x8217F274;
		  /* 8217F274h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 8217F274h case   17:*/		if ( regs.CR[6].eq ) { return 0x8217F294;  }
		/* 8217F274h case   17:*/		return 0x8217F278;
		  /* 8217F278h */ case   18:  		/* cmplwi CR6, R11, 90 */
		/* 8217F278h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 8217F278h case   18:*/		return 0x8217F27C;
		  /* 8217F27Ch */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 8217F27Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x8217F294;  }
		/* 8217F27Ch case   19:*/		return 0x8217F280;
		  /* 8217F280h */ case   20:  		/* cmplwi CR6, R11, 84 */
		/* 8217F280h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 8217F280h case   20:*/		return 0x8217F284;
		  /* 8217F284h */ case   21:  		/* bc 12, CR6_EQ, 16 */
		/* 8217F284h case   21:*/		if ( regs.CR[6].eq ) { return 0x8217F294;  }
		/* 8217F284h case   21:*/		return 0x8217F288;
		  /* 8217F288h */ case   22:  		/* cmplwi CR6, R11, 85 */
		/* 8217F288h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 8217F288h case   22:*/		return 0x8217F28C;
		  /* 8217F28Ch */ case   23:  		/* li R11, 0 */
		/* 8217F28Ch case   23:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217F28Ch case   23:*/		return 0x8217F290;
		  /* 8217F290h */ case   24:  		/* bc 4, CR6_EQ, 8 */
		/* 8217F290h case   24:*/		if ( !regs.CR[6].eq ) { return 0x8217F298;  }
		/* 8217F290h case   24:*/		return 0x8217F294;
	}
	return 0x8217F294;
} // Block from 8217F230h-8217F294h (25 instructions)

//////////////////////////////////////////////////////
// Block at 8217F294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F294);
		  /* 8217F294h */ case    0:  		/* mr R11, R23 */
		/* 8217F294h case    0:*/		regs.R11 = regs.R23;
		/* 8217F294h case    0:*/		return 0x8217F298;
	}
	return 0x8217F298;
} // Block from 8217F294h-8217F298h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F298);
		  /* 8217F298h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217F298h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217F298h case    0:*/		return 0x8217F29C;
		  /* 8217F29Ch */ case    1:  		/* bc 4, CR0_EQ, 28 */
		/* 8217F29Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217F2B8;  }
		/* 8217F29Ch case    1:*/		return 0x8217F2A0;
	}
	return 0x8217F2A0;
} // Block from 8217F298h-8217F2A0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F2A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F2A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F2A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F2A0);
		  /* 8217F2A0h */ case    0:  		/* lwz R8, <#[R8 + 52]> */
		/* 8217F2A0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000034) );
		/* 8217F2A0h case    0:*/		return 0x8217F2A4;
		  /* 8217F2A4h */ case    1:  		/* cmplwi CR6, R8, 0 */
		/* 8217F2A4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 8217F2A4h case    1:*/		return 0x8217F2A8;
		  /* 8217F2A8h */ case    2:  		/* bc 4, CR6_EQ, -108 */
		/* 8217F2A8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217F23C;  }
		/* 8217F2A8h case    2:*/		return 0x8217F2AC;
		  /* 8217F2ACh */ case    3:  		/* li R4, 4800 */
		/* 8217F2ACh case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217F2ACh case    3:*/		return 0x8217F2B0;
		  /* 8217F2B0h */ case    4:  		/* mr R3, R24 */
		/* 8217F2B0h case    4:*/		regs.R3 = regs.R24;
		/* 8217F2B0h case    4:*/		return 0x8217F2B4;
		  /* 8217F2B4h */ case    5:  		/* bl -185420 */
		/* 8217F2B4h case    5:*/		regs.LR = 0x8217F2B8; return 0x82151E68;
		/* 8217F2B4h case    5:*/		return 0x8217F2B8;
	}
	return 0x8217F2B8;
} // Block from 8217F2A0h-8217F2B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217F2B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F2B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F2B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F2B8);
		  /* 8217F2B8h */ case    0:  		/* cmplwi CR6, R9, 0 */
		/* 8217F2B8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8217F2B8h case    0:*/		return 0x8217F2BC;
		  /* 8217F2BCh */ case    1:  		/* bc 12, CR6_EQ, 128 */
		/* 8217F2BCh case    1:*/		if ( regs.CR[6].eq ) { return 0x8217F33C;  }
		/* 8217F2BCh case    1:*/		return 0x8217F2C0;
		  /* 8217F2C0h */ case    2:  		/* lwz R11, <#[R9 + 4]> */
		/* 8217F2C0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 8217F2C0h case    2:*/		return 0x8217F2C4;
		  /* 8217F2C4h */ case    3:  		/* cmplw CR6, R8, R11 */
		/* 8217F2C4h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8217F2C4h case    3:*/		return 0x8217F2C8;
		  /* 8217F2C8h */ case    4:  		/* bc 12, CR6_EQ, 88 */
		/* 8217F2C8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217F320;  }
		/* 8217F2C8h case    4:*/		return 0x8217F2CC;
		  /* 8217F2CCh */ case    5:  		/* lwz R10, <#[R11 + 40]> */
		/* 8217F2CCh case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000028) );
		/* 8217F2CCh case    5:*/		return 0x8217F2D0;
		  /* 8217F2D0h */ case    6:  		/* lwz R10, <#[R10 + 4]> */
		/* 8217F2D0h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8217F2D0h case    6:*/		return 0x8217F2D4;
		  /* 8217F2D4h */ case    7:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 8217F2D4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8217F2D4h case    7:*/		return 0x8217F2D8;
	}
	return 0x8217F2D8;
} // Block from 8217F2B8h-8217F2D8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217F2D8h
// Function '?ConvertJumpToCNDInstructions@Compiler@D3DXShader@@AAA_NPAVInstruction@2@0_NPAVBlock@2@22@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F2D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F2D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F2D8);
		  /* 8217F2D8h */ case    0:  		/* bc 4, CR0_EQ, 72 */
		/* 8217F2D8h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8217F320;  }
		/* 8217F2D8h case    0:*/		return 0x8217F2DC;
		  /* 8217F2DCh */ case    1:  		/* b 56 */
		/* 8217F2DCh case    1:*/		return 0x8217F314;
		/* 8217F2DCh case    1:*/		return 0x8217F2E0;
		  /* 8217F2E0h */ case    2:  		/* lwz R10, <#[R11 + 36]> */
		/* 8217F2E0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8217F2E0h case    2:*/		return 0x8217F2E4;
		  /* 8217F2E4h */ case    3:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 8217F2E4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8217F2E4h case    3:*/		return 0x8217F2E8;
		  /* 8217F2E8h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 8217F2E8h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217F2F4;  }
		/* 8217F2E8h case    4:*/		return 0x8217F2EC;
		  /* 8217F2ECh */ case    5:  		/* li R10, 0 */
		/* 8217F2ECh case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 8217F2ECh case    5:*/		return 0x8217F2F0;
		  /* 8217F2F0h */ case    6:  		/* b 16 */
		/* 8217F2F0h case    6:*/		return 0x8217F300;
		/* 8217F2F0h case    6:*/		return 0x8217F2F4;
	}
	return 0x8217F2F4;
} // Block from 8217F2D8h-8217F2F4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217F2F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F2F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F2F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F2F4);
		  /* 8217F2F4h */ case    0:  		/* lwz R10, <#[R11 + 32]> */
		/* 8217F2F4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000020) );
		/* 8217F2F4h case    0:*/		return 0x8217F2F8;
		  /* 8217F2F8h */ case    1:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8217F2F8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8217F2F8h case    1:*/		return 0x8217F2FC;
		  /* 8217F2FCh */ case    2:  		/* addi R10, R10, -40 */
		/* 8217F2FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFD8);
		/* 8217F2FCh case    2:*/		return 0x8217F300;
	}
	return 0x8217F300;
} // Block from 8217F2F4h-8217F300h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F300h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F300( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F300) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F300);
		  /* 8217F300h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 8217F300h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 8217F300h case    0:*/		return 0x8217F304;
		  /* 8217F304h */ case    1:  		/* rlwinm. R10, R10, 5, 31, 31 */
		/* 8217F304h case    1:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R10,regs.R10);
		/* 8217F304h case    1:*/		return 0x8217F308;
		  /* 8217F308h */ case    2:  		/* bc 4, CR0_EQ, 32 */
		/* 8217F308h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217F328;  }
		/* 8217F308h case    2:*/		return 0x8217F30C;
		  /* 8217F30Ch */ case    3:  		/* cmplw CR6, R11, R8 */
		/* 8217F30Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 8217F30Ch case    3:*/		return 0x8217F310;
		  /* 8217F310h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 8217F310h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217F320;  }
		/* 8217F310h case    4:*/		return 0x8217F314;
	}
	return 0x8217F314;
} // Block from 8217F300h-8217F314h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217F314h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F314( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F314) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F314);
		  /* 8217F314h */ case    0:  		/* lwz R11, <#[R11 + 64]> */
		/* 8217F314h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000040) );
		/* 8217F314h case    0:*/		return 0x8217F318;
		  /* 8217F318h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217F318h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217F318h case    1:*/		return 0x8217F31C;
		  /* 8217F31Ch */ case    2:  		/* bc 4, CR6_EQ, -60 */
		/* 8217F31Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217F2E0;  }
		/* 8217F31Ch case    2:*/		return 0x8217F320;
	}
	return 0x8217F320;
} // Block from 8217F314h-8217F320h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F320);
		  /* 8217F320h */ case    0:  		/* lwz R9, <#[R9 + 12]> */
		/* 8217F320h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 8217F320h case    0:*/		return 0x8217F324;
		  /* 8217F324h */ case    1:  		/* b -108 */
		/* 8217F324h case    1:*/		return 0x8217F2B8;
		/* 8217F324h case    1:*/		return 0x8217F328;
	}
	return 0x8217F328;
} // Block from 8217F320h-8217F328h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F328);
		  /* 8217F328h */ case    0:  		/* mr R4, R3 */
		/* 8217F328h case    0:*/		regs.R4 = regs.R3;
		/* 8217F328h case    0:*/		return 0x8217F32C;
		  /* 8217F32Ch */ case    1:  		/* mr R6, R26 */
		/* 8217F32Ch case    1:*/		regs.R6 = regs.R26;
		/* 8217F32Ch case    1:*/		return 0x8217F330;
		  /* 8217F330h */ case    2:  		/* mr R5, R27 */
		/* 8217F330h case    2:*/		regs.R5 = regs.R27;
		/* 8217F330h case    2:*/		return 0x8217F334;
		  /* 8217F334h */ case    3:  		/* mr R3, R24 */
		/* 8217F334h case    3:*/		regs.R3 = regs.R24;
		/* 8217F334h case    3:*/		return 0x8217F338;
		  /* 8217F338h */ case    4:  		/* bl -4176 */
		/* 8217F338h case    4:*/		regs.LR = 0x8217F33C; return 0x8217E2E8;
		/* 8217F338h case    4:*/		return 0x8217F33C;
	}
	return 0x8217F33C;
} // Block from 8217F328h-8217F33Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217F33Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F33C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F33C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F33C);
		  /* 8217F33Ch */ case    0:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 8217F33Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 8217F33Ch case    0:*/		return 0x8217F340;
		  /* 8217F340h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217F340h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217F340h case    1:*/		return 0x8217F344;
		  /* 8217F344h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217F344h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F344h case    2:*/		return 0x8217F348;
		  /* 8217F348h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217F348h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217F358;  }
		/* 8217F348h case    3:*/		return 0x8217F34C;
		  /* 8217F34Ch */ case    4:  		/* mr R27, R11 */
		/* 8217F34Ch case    4:*/		regs.R27 = regs.R11;
		/* 8217F34Ch case    4:*/		return 0x8217F350;
		  /* 8217F350h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217F350h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217F350h case    5:*/		return 0x8217F354;
		  /* 8217F354h */ case    6:  		/* bc 4, CR6_EQ, -820 */
		/* 8217F354h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217F020;  }
		/* 8217F354h case    6:*/		return 0x8217F358;
	}
	return 0x8217F358;
} // Block from 8217F33Ch-8217F358h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217F358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F358);
		  /* 8217F358h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 8217F358h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 8217F358h case    0:*/		return 0x8217F35C;
		  /* 8217F35Ch */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217F35Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F35Ch case    1:*/		return 0x8217F360;
		  /* 8217F360h */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 8217F360h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217F36C;  }
		/* 8217F360h case    2:*/		return 0x8217F364;
		  /* 8217F364h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 8217F364h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217F364h case    3:*/		return 0x8217F368;
		  /* 8217F368h */ case    4:  		/* bc 4, CR0_EQ, -1316 */
		/* 8217F368h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217EE44;  }
		/* 8217F368h case    4:*/		return 0x8217F36C;
	}
	return 0x8217F36C;
} // Block from 8217F358h-8217F36Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217F36Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F36C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F36C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F36C);
		  /* 8217F36Ch */ case    0:  		/* lwz R10, <#[R24 + 976]> */
		/* 8217F36Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x000003D0) );
		/* 8217F36Ch case    0:*/		return 0x8217F370;
		  /* 8217F370h */ case    1:  		/* addi R11, R24, 972 */
		/* 8217F370h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0x3CC);
		/* 8217F370h case    1:*/		return 0x8217F374;
		  /* 8217F374h */ case    2:  		/* stw R10, <#[R26]> */
		/* 8217F374h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 8217F374h case    2:*/		return 0x8217F378;
		  /* 8217F378h */ case    3:  		/* stw R26, <#[R24 + 976]> */
		/* 8217F378h case    3:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R24 + 0x000003D0) );
		/* 8217F378h case    3:*/		return 0x8217F37C;
		  /* 8217F37Ch */ case    4:  		/* lwz R11, <#[R24 + 4]> */
		/* 8217F37Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8217F37Ch case    4:*/		return 0x8217F380;
		  /* 8217F380h */ case    5:  		/* li R25, 0 */
		/* 8217F380h case    5:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 8217F380h case    5:*/		return 0x8217F384;
		  /* 8217F384h */ case    6:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217F384h case    6:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F384h case    6:*/		return 0x8217F388;
		  /* 8217F388h */ case    7:  		/* addic R10, R10, -1 */
		/* 8217F388h case    7:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217F388h case    7:*/		return 0x8217F38C;
		  /* 8217F38Ch */ case    8:  		/* subfe R10, R10, R10 */
		/* 8217F38Ch case    8:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217F38Ch case    8:*/		return 0x8217F390;
		  /* 8217F390h */ case    9:  		/* and R11, R10, R11 */
		/* 8217F390h case    9:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217F390h case    9:*/		return 0x8217F394;
		  /* 8217F394h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F394h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F394h case   10:*/		return 0x8217F398;
		  /* 8217F398h */ case   11:  		/* b 680 */
		/* 8217F398h case   11:*/		return 0x8217F640;
		/* 8217F398h case   11:*/		return 0x8217F39C;
		  /* 8217F39Ch */ case   12:  		/* lwz R11, <#[R26 + 36]> */
		/* 8217F39Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000024) );
		/* 8217F39Ch case   12:*/		return 0x8217F3A0;
		  /* 8217F3A0h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F3A0h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F3A0h case   13:*/		return 0x8217F3A4;
		  /* 8217F3A4h */ case   14:  		/* bc 12, CR0_EQ, 40 */
		/* 8217F3A4h case   14:*/		if ( regs.CR[0].eq ) { return 0x8217F3CC;  }
		/* 8217F3A4h case   14:*/		return 0x8217F3A8;
		  /* 8217F3A8h */ case   15:  		/* lwz R11, <#[R26 + 28]> */
		/* 8217F3A8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000001C) );
		/* 8217F3A8h case   15:*/		return 0x8217F3AC;
		  /* 8217F3ACh */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F3ACh case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F3ACh case   16:*/		return 0x8217F3B0;
		  /* 8217F3B0h */ case   17:  		/* bc 12, CR0_EQ, 16 */
		/* 8217F3B0h case   17:*/		if ( regs.CR[0].eq ) { return 0x8217F3C0;  }
		/* 8217F3B0h case   17:*/		return 0x8217F3B4;
		  /* 8217F3B4h */ case   18:  		/* lwz R10, <#[R26 + 20]> */
		/* 8217F3B4h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000014) );
		/* 8217F3B4h case   18:*/		return 0x8217F3B8;
		  /* 8217F3B8h */ case   19:  		/* addi R11, R26, 16 */
		/* 8217F3B8h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x10);
		/* 8217F3B8h case   19:*/		return 0x8217F3BC;
		  /* 8217F3BCh */ case   20:  		/* b 24 */
		/* 8217F3BCh case   20:*/		return 0x8217F3D4;
		/* 8217F3BCh case   20:*/		return 0x8217F3C0;
	}
	return 0x8217F3C0;
} // Block from 8217F36Ch-8217F3C0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8217F3C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F3C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F3C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F3C0);
		  /* 8217F3C0h */ case    0:  		/* lwz R10, <#[R26 + 28]> */
		/* 8217F3C0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000001C) );
		/* 8217F3C0h case    0:*/		return 0x8217F3C4;
		  /* 8217F3C4h */ case    1:  		/* addi R11, R26, 24 */
		/* 8217F3C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x18);
		/* 8217F3C4h case    1:*/		return 0x8217F3C8;
		  /* 8217F3C8h */ case    2:  		/* b 12 */
		/* 8217F3C8h case    2:*/		return 0x8217F3D4;
		/* 8217F3C8h case    2:*/		return 0x8217F3CC;
	}
	return 0x8217F3CC;
} // Block from 8217F3C0h-8217F3CCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F3CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F3CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F3CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F3CC);
		  /* 8217F3CCh */ case    0:  		/* lwz R10, <#[R26 + 36]> */
		/* 8217F3CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000024) );
		/* 8217F3CCh case    0:*/		return 0x8217F3D0;
		  /* 8217F3D0h */ case    1:  		/* addi R11, R26, 32 */
		/* 8217F3D0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x20);
		/* 8217F3D0h case    1:*/		return 0x8217F3D4;
	}
	return 0x8217F3D4;
} // Block from 8217F3CCh-8217F3D4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F3D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F3D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F3D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F3D4);
		  /* 8217F3D4h */ case    0:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 8217F3D4h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8217F3D4h case    0:*/		return 0x8217F3D8;
		  /* 8217F3D8h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 8217F3D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217F3E4;  }
		/* 8217F3D8h case    1:*/		return 0x8217F3DC;
		  /* 8217F3DCh */ case    2:  		/* li R28, 0 */
		/* 8217F3DCh case    2:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 8217F3DCh case    2:*/		return 0x8217F3E0;
		  /* 8217F3E0h */ case    3:  		/* b 16 */
		/* 8217F3E0h case    3:*/		return 0x8217F3F0;
		/* 8217F3E0h case    3:*/		return 0x8217F3E4;
	}
	return 0x8217F3E4;
} // Block from 8217F3D4h-8217F3E4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217F3E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F3E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F3E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F3E4);
		  /* 8217F3E4h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 8217F3E4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217F3E4h case    0:*/		return 0x8217F3E8;
		  /* 8217F3E8h */ case    1:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 8217F3E8h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 8217F3E8h case    1:*/		return 0x8217F3EC;
		  /* 8217F3ECh */ case    2:  		/* addi R28, R10, -40 */
		/* 8217F3ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R10,0xFFFFFFD8);
		/* 8217F3ECh case    2:*/		return 0x8217F3F0;
	}
	return 0x8217F3F0;
} // Block from 8217F3E4h-8217F3F0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F3F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F3F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F3F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F3F0);
		  /* 8217F3F0h */ case    0:  		/* mr R27, R11 */
		/* 8217F3F0h case    0:*/		regs.R27 = regs.R11;
		/* 8217F3F0h case    0:*/		return 0x8217F3F4;
		  /* 8217F3F4h */ case    1:  		/* b 576 */
		/* 8217F3F4h case    1:*/		return 0x8217F634;
		/* 8217F3F4h case    1:*/		return 0x8217F3F8;
		  /* 8217F3F8h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217F3F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217F3F8h case    2:*/		return 0x8217F3FC;
		  /* 8217F3FCh */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217F3FCh case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217F3FCh case    3:*/		return 0x8217F400;
		  /* 8217F400h */ case    4:  		/* cmplwi CR6, R11, 12416 */
		/* 8217F400h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003080);
		/* 8217F400h case    4:*/		return 0x8217F404;
		  /* 8217F404h */ case    5:  		/* bc 4, CR6_EQ, 152 */
		/* 8217F404h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217F49C;  }
		/* 8217F404h case    5:*/		return 0x8217F408;
		  /* 8217F408h */ case    6:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217F408h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217F408h case    6:*/		return 0x8217F40C;
		  /* 8217F40Ch */ case    7:  		/* mr R3, R24 */
		/* 8217F40Ch case    7:*/		regs.R3 = regs.R24;
		/* 8217F40Ch case    7:*/		return 0x8217F410;
		  /* 8217F410h */ case    8:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 8217F410h case    8:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 8217F410h case    8:*/		return 0x8217F414;
		  /* 8217F414h */ case    9:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 8217F414h case    9:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 8217F414h case    9:*/		return 0x8217F418;
		  /* 8217F418h */ case   10:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 8217F418h case   10:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 8217F418h case   10:*/		return 0x8217F41C;
		  /* 8217F41Ch */ case   11:  		/* bl -110572 */
		/* 8217F41Ch case   11:*/		regs.LR = 0x8217F420; return 0x82164430;
		/* 8217F41Ch case   11:*/		return 0x8217F420;
		  /* 8217F420h */ case   12:  		/* addi R11, R28, -24 */
		/* 8217F420h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R28,0xFFFFFFE8);
		/* 8217F420h case   12:*/		return 0x8217F424;
		  /* 8217F424h */ case   13:  		/* add R11, R3, R11 */
		/* 8217F424h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 8217F424h case   13:*/		return 0x8217F428;
		  /* 8217F428h */ case   14:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217F428h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217F428h case   14:*/		return 0x8217F42C;
		  /* 8217F42Ch */ case   15:  		/* rlwinm. R10, R10, 0, 3, 3 */
		/* 8217F42Ch case   15:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R10,regs.R10);
		/* 8217F42Ch case   15:*/		return 0x8217F430;
		  /* 8217F430h */ case   16:  		/* bc 12, CR0_EQ, 108 */
		/* 8217F430h case   16:*/		if ( regs.CR[0].eq ) { return 0x8217F49C;  }
		/* 8217F430h case   16:*/		return 0x8217F434;
		  /* 8217F434h */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217F434h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F434h case   17:*/		return 0x8217F438;
		  /* 8217F438h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F438h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F438h case   18:*/		return 0x8217F43C;
		  /* 8217F43Ch */ case   19:  		/* bc 4, CR0_EQ, 96 */
		/* 8217F43Ch case   19:*/		if ( !regs.CR[0].eq ) { return 0x8217F49C;  }
		/* 8217F43Ch case   19:*/		return 0x8217F440;
		  /* 8217F440h */ case   20:  		/* lwz R9, <#[R28]> */
		/* 8217F440h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 8217F440h case   20:*/		return 0x8217F444;
		  /* 8217F444h */ case   21:  		/* cmplwi CR6, R9, 0 */
		/* 8217F444h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8217F444h case   21:*/		return 0x8217F448;
		  /* 8217F448h */ case   22:  		/* bc 12, CR6_EQ, 84 */
		/* 8217F448h case   22:*/		if ( regs.CR[6].eq ) { return 0x8217F49C;  }
		/* 8217F448h case   22:*/		return 0x8217F44C;
		  /* 8217F44Ch */ case   23:  		/* lwz R11, <#[R9]> */
		/* 8217F44Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 8217F44Ch case   23:*/		return 0x8217F450;
		  /* 8217F450h */ case   24:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 8217F450h case   24:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 8217F450h case   24:*/		return 0x8217F454;
		  /* 8217F454h */ case   25:  		/* bc 12, CR0_EQ, 64 */
		/* 8217F454h case   25:*/		if ( regs.CR[0].eq ) { return 0x8217F494;  }
		/* 8217F454h case   25:*/		return 0x8217F458;
		  /* 8217F458h */ case   26:  		/* lwz R11, <#[R9 + 12]> */
		/* 8217F458h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 8217F458h case   26:*/		return 0x8217F45C;
		  /* 8217F45Ch */ case   27:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217F45Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F45Ch case   27:*/		return 0x8217F460;
		  /* 8217F460h */ case   28:  		/* rlwinm. R8, R10, 0, 3, 3 */
		/* 8217F460h case   28:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R8,regs.R10);
		/* 8217F460h case   28:*/		return 0x8217F464;
		  /* 8217F464h */ case   29:  		/* bc 4, CR0_EQ, 48 */
		/* 8217F464h case   29:*/		if ( !regs.CR[0].eq ) { return 0x8217F494;  }
		/* 8217F464h case   29:*/		return 0x8217F468;
		  /* 8217F468h */ case   30:  		/* oris R10, R10, 4096 */
		/* 8217F468h case   30:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x1000);
		/* 8217F468h case   30:*/		return 0x8217F46C;
		  /* 8217F46Ch */ case   31:  		/* lwz R8, <#[R11 + 28]> */
		/* 8217F46Ch case   31:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 8217F46Ch case   31:*/		return 0x8217F470;
		  /* 8217F470h */ case   32:  		/* stw R10, <#[R11 + 8]> */
		/* 8217F470h case   32:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F470h case   32:*/		return 0x8217F474;
		  /* 8217F474h */ case   33:  		/* lwz R11, <#[R24 + 4]> */
		/* 8217F474h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8217F474h case   33:*/		return 0x8217F478;
		  /* 8217F478h */ case   34:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217F478h case   34:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F478h case   34:*/		return 0x8217F47C;
		  /* 8217F47Ch */ case   35:  		/* addic R10, R10, -1 */
		/* 8217F47Ch case   35:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217F47Ch case   35:*/		return 0x8217F480;
		  /* 8217F480h */ case   36:  		/* subfe R10, R10, R10 */
		/* 8217F480h case   36:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217F480h case   36:*/		return 0x8217F484;
		  /* 8217F484h */ case   37:  		/* and R11, R10, R11 */
		/* 8217F484h case   37:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217F484h case   37:*/		return 0x8217F488;
		  /* 8217F488h */ case   38:  		/* cmplw CR6, R8, R11 */
		/* 8217F488h case   38:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8217F488h case   38:*/		return 0x8217F48C;
		  /* 8217F48Ch */ case   39:  		/* bc 12, CR6_EQ, 8 */
		/* 8217F48Ch case   39:*/		if ( regs.CR[6].eq ) { return 0x8217F494;  }
		/* 8217F48Ch case   39:*/		return 0x8217F490;
		  /* 8217F490h */ case   40:  		/* mr R25, R23 */
		/* 8217F490h case   40:*/		regs.R25 = regs.R23;
		/* 8217F490h case   40:*/		return 0x8217F494;
	}
	return 0x8217F494;
} // Block from 8217F3F0h-8217F494h (41 instructions)

//////////////////////////////////////////////////////
// Block at 8217F494h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F494( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F494) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F494);
		  /* 8217F494h */ case    0:  		/* lwz R9, <#[R9 + 4]> */
		/* 8217F494h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8217F494h case    0:*/		return 0x8217F498;
		  /* 8217F498h */ case    1:  		/* b -84 */
		/* 8217F498h case    1:*/		return 0x8217F444;
		/* 8217F498h case    1:*/		return 0x8217F49C;
	}
	return 0x8217F49C;
} // Block from 8217F494h-8217F49Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F49C);
		  /* 8217F49Ch */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 8217F49Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 8217F49Ch case    0:*/		return 0x8217F4A0;
		  /* 8217F4A0h */ case    1:  		/* rlwinm. R11, R11, 0, 3, 3 */
		/* 8217F4A0h case    1:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R11);
		/* 8217F4A0h case    1:*/		return 0x8217F4A4;
		  /* 8217F4A4h */ case    2:  		/* bc 12, CR0_EQ, 292 */
		/* 8217F4A4h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217F5C8;  }
		/* 8217F4A4h case    2:*/		return 0x8217F4A8;
		  /* 8217F4A8h */ case    3:  		/* lwz R9, <#[R28]> */
		/* 8217F4A8h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 8217F4A8h case    3:*/		return 0x8217F4AC;
		  /* 8217F4ACh */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 8217F4ACh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8217F4ACh case    4:*/		return 0x8217F4B0;
		  /* 8217F4B0h */ case    5:  		/* bc 12, CR6_EQ, 72 */
		/* 8217F4B0h case    5:*/		if ( regs.CR[6].eq ) { return 0x8217F4F8;  }
		/* 8217F4B0h case    5:*/		return 0x8217F4B4;
		  /* 8217F4B4h */ case    6:  		/* lwz R11, <#[R9 + 12]> */
		/* 8217F4B4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 8217F4B4h case    6:*/		return 0x8217F4B8;
		  /* 8217F4B8h */ case    7:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217F4B8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F4B8h case    7:*/		return 0x8217F4BC;
		  /* 8217F4BCh */ case    8:  		/* rlwinm. R8, R10, 0, 3, 3 */
		/* 8217F4BCh case    8:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R8,regs.R10);
		/* 8217F4BCh case    8:*/		return 0x8217F4C0;
		  /* 8217F4C0h */ case    9:  		/* bc 4, CR0_EQ, 48 */
		/* 8217F4C0h case    9:*/		if ( !regs.CR[0].eq ) { return 0x8217F4F0;  }
		/* 8217F4C0h case    9:*/		return 0x8217F4C4;
		  /* 8217F4C4h */ case   10:  		/* oris R10, R10, 4096 */
		/* 8217F4C4h case   10:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x1000);
		/* 8217F4C4h case   10:*/		return 0x8217F4C8;
		  /* 8217F4C8h */ case   11:  		/* lwz R8, <#[R11 + 28]> */
		/* 8217F4C8h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 8217F4C8h case   11:*/		return 0x8217F4CC;
		  /* 8217F4CCh */ case   12:  		/* stw R10, <#[R11 + 8]> */
		/* 8217F4CCh case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F4CCh case   12:*/		return 0x8217F4D0;
		  /* 8217F4D0h */ case   13:  		/* lwz R11, <#[R24 + 4]> */
		/* 8217F4D0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000004) );
		/* 8217F4D0h case   13:*/		return 0x8217F4D4;
		  /* 8217F4D4h */ case   14:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217F4D4h case   14:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F4D4h case   14:*/		return 0x8217F4D8;
		  /* 8217F4D8h */ case   15:  		/* addic R10, R10, -1 */
		/* 8217F4D8h case   15:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217F4D8h case   15:*/		return 0x8217F4DC;
		  /* 8217F4DCh */ case   16:  		/* subfe R10, R10, R10 */
		/* 8217F4DCh case   16:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217F4DCh case   16:*/		return 0x8217F4E0;
		  /* 8217F4E0h */ case   17:  		/* and R11, R10, R11 */
		/* 8217F4E0h case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217F4E0h case   17:*/		return 0x8217F4E4;
		  /* 8217F4E4h */ case   18:  		/* cmplw CR6, R8, R11 */
		/* 8217F4E4h case   18:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 8217F4E4h case   18:*/		return 0x8217F4E8;
		  /* 8217F4E8h */ case   19:  		/* bc 12, CR6_EQ, 8 */
		/* 8217F4E8h case   19:*/		if ( regs.CR[6].eq ) { return 0x8217F4F0;  }
		/* 8217F4E8h case   19:*/		return 0x8217F4EC;
		  /* 8217F4ECh */ case   20:  		/* mr R25, R23 */
		/* 8217F4ECh case   20:*/		regs.R25 = regs.R23;
		/* 8217F4ECh case   20:*/		return 0x8217F4F0;
	}
	return 0x8217F4F0;
} // Block from 8217F49Ch-8217F4F0h (21 instructions)

//////////////////////////////////////////////////////
// Block at 8217F4F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F4F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F4F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F4F0);
		  /* 8217F4F0h */ case    0:  		/* lwz R9, <#[R9 + 4]> */
		/* 8217F4F0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 8217F4F0h case    0:*/		return 0x8217F4F4;
		  /* 8217F4F4h */ case    1:  		/* b -72 */
		/* 8217F4F4h case    1:*/		return 0x8217F4AC;
		/* 8217F4F4h case    1:*/		return 0x8217F4F8;
	}
	return 0x8217F4F8;
} // Block from 8217F4F0h-8217F4F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F4F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F4F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F4F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F4F8);
		  /* 8217F4F8h */ case    0:  		/* lwz R29, <#[R26 + 52]> */
		/* 8217F4F8h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000034) );
		/* 8217F4F8h case    0:*/		return 0x8217F4FC;
		  /* 8217F4FCh */ case    1:  		/* b 196 */
		/* 8217F4FCh case    1:*/		return 0x8217F5C0;
		/* 8217F4FCh case    1:*/		return 0x8217F500;
		  /* 8217F500h */ case    2:  		/* lwz R11, <#[R29 + 36]> */
		/* 8217F500h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000024) );
		/* 8217F500h case    2:*/		return 0x8217F504;
		  /* 8217F504h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F504h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F504h case    3:*/		return 0x8217F508;
		  /* 8217F508h */ case    4:  		/* bc 4, CR0_EQ, 180 */
		/* 8217F508h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217F5BC;  }
		/* 8217F508h case    4:*/		return 0x8217F50C;
		  /* 8217F50Ch */ case    5:  		/* lwz R11, <#[R29 + 32]> */
		/* 8217F50Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000020) );
		/* 8217F50Ch case    5:*/		return 0x8217F510;
	}
	return 0x8217F510;
} // Block from 8217F4F8h-8217F510h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217F510h
// Function '?MarkThreadDependentInstructions@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F510);
		  /* 8217F510h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F510h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F510h case    0:*/		return 0x8217F514;
		  /* 8217F514h */ case    1:  		/* addic. R30, R11, -40 */
		/* 8217F514h case    1:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 8217F514h case    1:*/		return 0x8217F518;
		  /* 8217F518h */ case    2:  		/* bc 12, CR0_EQ, 164 */
		/* 8217F518h case    2:*/		if ( regs.CR[0].eq ) { return 0x8217F5BC;  }
		/* 8217F518h case    2:*/		return 0x8217F51C;
		  /* 8217F51Ch */ case    3:  		/* lwz R31, <#[R30 + 8]> */
		/* 8217F51Ch case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000008) );
		/* 8217F51Ch case    3:*/		return 0x8217F520;
		  /* 8217F520h */ case    4:  		/* rlwinm. R11, R31, 0, 3, 3 */
		/* 8217F520h case    4:*/		cpu::op::rlwinm<1,0,3,3>(regs,&regs.R11,regs.R31);
		/* 8217F520h case    4:*/		return 0x8217F524;
		  /* 8217F524h */ case    5:  		/* bc 4, CR0_EQ, 152 */
		/* 8217F524h case    5:*/		if ( !regs.CR[0].eq ) { return 0x8217F5BC;  }
		/* 8217F524h case    5:*/		return 0x8217F528;
		  /* 8217F528h */ case    6:  		/* rlwinm R4, R31, 25, 25, 31 */
		/* 8217F528h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R31);
		/* 8217F528h case    6:*/		return 0x8217F52C;
		  /* 8217F52Ch */ case    7:  		/* cmplwi CR6, R4, 86 */
		/* 8217F52Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000056);
		/* 8217F52Ch case    7:*/		return 0x8217F530;
		  /* 8217F530h */ case    8:  		/* bc 12, CR6_EQ, 48 */
		/* 8217F530h case    8:*/		if ( regs.CR[6].eq ) { return 0x8217F560;  }
		/* 8217F530h case    8:*/		return 0x8217F534;
		  /* 8217F534h */ case    9:  		/* cmplwi CR6, R4, 87 */
		/* 8217F534h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000057);
		/* 8217F534h case    9:*/		return 0x8217F538;
		  /* 8217F538h */ case   10:  		/* bc 12, CR6_EQ, 40 */
		/* 8217F538h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217F560;  }
		/* 8217F538h case   10:*/		return 0x8217F53C;
		  /* 8217F53Ch */ case   11:  		/* cmplwi CR6, R4, 89 */
		/* 8217F53Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000059);
		/* 8217F53Ch case   11:*/		return 0x8217F540;
		  /* 8217F540h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 8217F540h case   12:*/		if ( regs.CR[6].eq ) { return 0x8217F560;  }
		/* 8217F540h case   12:*/		return 0x8217F544;
		  /* 8217F544h */ case   13:  		/* cmplwi CR6, R4, 90 */
		/* 8217F544h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000005A);
		/* 8217F544h case   13:*/		return 0x8217F548;
		  /* 8217F548h */ case   14:  		/* bc 12, CR6_EQ, 24 */
		/* 8217F548h case   14:*/		if ( regs.CR[6].eq ) { return 0x8217F560;  }
		/* 8217F548h case   14:*/		return 0x8217F54C;
		  /* 8217F54Ch */ case   15:  		/* cmplwi CR6, R4, 84 */
		/* 8217F54Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000054);
		/* 8217F54Ch case   15:*/		return 0x8217F550;
		  /* 8217F550h */ case   16:  		/* bc 12, CR6_EQ, 16 */
		/* 8217F550h case   16:*/		if ( regs.CR[6].eq ) { return 0x8217F560;  }
		/* 8217F550h case   16:*/		return 0x8217F554;
		  /* 8217F554h */ case   17:  		/* cmplwi CR6, R4, 85 */
		/* 8217F554h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000055);
		/* 8217F554h case   17:*/		return 0x8217F558;
		  /* 8217F558h */ case   18:  		/* li R11, 0 */
		/* 8217F558h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217F558h case   18:*/		return 0x8217F55C;
		  /* 8217F55Ch */ case   19:  		/* bc 4, CR6_EQ, 8 */
		/* 8217F55Ch case   19:*/		if ( !regs.CR[6].eq ) { return 0x8217F564;  }
		/* 8217F55Ch case   19:*/		return 0x8217F560;
	}
	return 0x8217F560;
} // Block from 8217F510h-8217F560h (20 instructions)

//////////////////////////////////////////////////////
// Block at 8217F560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F560);
		  /* 8217F560h */ case    0:  		/* mr R11, R23 */
		/* 8217F560h case    0:*/		regs.R11 = regs.R23;
		/* 8217F560h case    0:*/		return 0x8217F564;
	}
	return 0x8217F564;
} // Block from 8217F560h-8217F564h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F564);
		  /* 8217F564h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217F564h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217F564h case    0:*/		return 0x8217F568;
		  /* 8217F568h */ case    1:  		/* bc 12, CR0_EQ, 84 */
		/* 8217F568h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217F5BC;  }
		/* 8217F568h case    1:*/		return 0x8217F56C;
		  /* 8217F56Ch */ case    2:  		/* rlwinm R6, R31, 18, 29, 31 */
		/* 8217F56Ch case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R31);
		/* 8217F56Ch case    2:*/		return 0x8217F570;
		  /* 8217F570h */ case    3:  		/* rlwinm R5, R31, 13, 29, 31 */
		/* 8217F570h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R31);
		/* 8217F570h case    3:*/		return 0x8217F574;
		  /* 8217F574h */ case    4:  		/* mr R3, R24 */
		/* 8217F574h case    4:*/		regs.R3 = regs.R24;
		/* 8217F574h case    4:*/		return 0x8217F578;
		  /* 8217F578h */ case    5:  		/* bl -110920 */
		/* 8217F578h case    5:*/		regs.LR = 0x8217F57C; return 0x82164430;
		/* 8217F578h case    5:*/		return 0x8217F57C;
		  /* 8217F57Ch */ case    6:  		/* addi R11, R30, -16 */
		/* 8217F57Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 8217F57Ch case    6:*/		return 0x8217F580;
		  /* 8217F580h */ case    7:  		/* lwz R10, <#[R26 + 40]> */
		/* 8217F580h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000028) );
		/* 8217F580h case    7:*/		return 0x8217F584;
		  /* 8217F584h */ case    8:  		/* lwzx R11, <#[R3 + R11]> */
		/* 8217F584h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + regs.R11 + 0x00000000) );
		/* 8217F584h case    8:*/		return 0x8217F588;
		  /* 8217F588h */ case    9:  		/* lwz R11, <#[R11 + 48]> */
		/* 8217F588h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000030) );
		/* 8217F588h case    9:*/		return 0x8217F58C;
		  /* 8217F58Ch */ case   10:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217F58Ch case   10:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217F58Ch case   10:*/		return 0x8217F590;
		  /* 8217F590h */ case   11:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8217F590h case   11:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8217F590h case   11:*/		return 0x8217F594;
		  /* 8217F594h */ case   12:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217F594h case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217F594h case   12:*/		return 0x8217F598;
		  /* 8217F598h */ case   13:  		/* addi R11, R11, 1 */
		/* 8217F598h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217F598h case   13:*/		return 0x8217F59C;
		  /* 8217F59Ch */ case   14:  		/* slw R9, R23, R9 */
		/* 8217F59Ch case   14:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 8217F59Ch case   14:*/		return 0x8217F5A0;
		  /* 8217F5A0h */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217F5A0h case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217F5A0h case   15:*/		return 0x8217F5A4;
		  /* 8217F5A4h */ case   16:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8217F5A4h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8217F5A4h case   16:*/		return 0x8217F5A8;
		  /* 8217F5A8h */ case   17:  		/* and. R11, R11, R9 */
		/* 8217F5A8h case   17:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217F5A8h case   17:*/		return 0x8217F5AC;
		  /* 8217F5ACh */ case   18:  		/* bc 4, CR0_EQ, 16 */
		/* 8217F5ACh case   18:*/		if ( !regs.CR[0].eq ) { return 0x8217F5BC;  }
		/* 8217F5ACh case   18:*/		return 0x8217F5B0;
		  /* 8217F5B0h */ case   19:  		/* oris R11, R31, 4096 */
		/* 8217F5B0h case   19:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R31,0x1000);
		/* 8217F5B0h case   19:*/		return 0x8217F5B4;
		  /* 8217F5B4h */ case   20:  		/* mr R25, R23 */
		/* 8217F5B4h case   20:*/		regs.R25 = regs.R23;
		/* 8217F5B4h case   20:*/		return 0x8217F5B8;
		  /* 8217F5B8h */ case   21:  		/* stw R11, <#[R30 + 8]> */
		/* 8217F5B8h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217F5B8h case   21:*/		return 0x8217F5BC;
	}
	return 0x8217F5BC;
} // Block from 8217F564h-8217F5BCh (22 instructions)

//////////////////////////////////////////////////////
// Block at 8217F5BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F5BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F5BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F5BC);
		  /* 8217F5BCh */ case    0:  		/* lwz R29, <#[R29 + 52]> */
		/* 8217F5BCh case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R29 + 0x00000034) );
		/* 8217F5BCh case    0:*/		return 0x8217F5C0;
	}
	return 0x8217F5C0;
} // Block from 8217F5BCh-8217F5C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F5C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F5C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F5C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F5C0);
		  /* 8217F5C0h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8217F5C0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217F5C0h case    0:*/		return 0x8217F5C4;
		  /* 8217F5C4h */ case    1:  		/* bc 4, CR6_EQ, -196 */
		/* 8217F5C4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217F500;  }
		/* 8217F5C4h case    1:*/		return 0x8217F5C8;
	}
	return 0x8217F5C8;
} // Block from 8217F5C0h-8217F5C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F5C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F5C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F5C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F5C8);
		  /* 8217F5C8h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8217F5C8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8217F5C8h case    0:*/		return 0x8217F5CC;
		  /* 8217F5CCh */ case    1:  		/* lwz R11, <#[R11 + 36]> */
		/* 8217F5CCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000024) );
		/* 8217F5CCh case    1:*/		return 0x8217F5D0;
		  /* 8217F5D0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217F5D0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F5D0h case    2:*/		return 0x8217F5D4;
		  /* 8217F5D4h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217F5D4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217F5E4;  }
		/* 8217F5D4h case    3:*/		return 0x8217F5D8;
		  /* 8217F5D8h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F5D8h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F5D8h case    4:*/		return 0x8217F5DC;
		  /* 8217F5DCh */ case    5:  		/* addic. R28, R11, -40 */
		/* 8217F5DCh case    5:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 8217F5DCh case    5:*/		return 0x8217F5E0;
		  /* 8217F5E0h */ case    6:  		/* bc 4, CR0_EQ, -488 */
		/* 8217F5E0h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217F3F8;  }
		/* 8217F5E0h case    6:*/		return 0x8217F5E4;
	}
	return 0x8217F5E4;
} // Block from 8217F5C8h-8217F5E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217F5E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F5E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F5E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F5E4);
		  /* 8217F5E4h */ case    0:  		/* addi R10, R26, 16 */
		/* 8217F5E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R26,0x10);
		/* 8217F5E4h case    0:*/		return 0x8217F5E8;
		  /* 8217F5E8h */ case    1:  		/* cmplw CR6, R27, R10 */
		/* 8217F5E8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R10);
		/* 8217F5E8h case    1:*/		return 0x8217F5EC;
		  /* 8217F5ECh */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 8217F5ECh case    2:*/		if ( regs.CR[6].eq ) { return 0x8217F63C;  }
		/* 8217F5ECh case    2:*/		return 0x8217F5F0;
		  /* 8217F5F0h */ case    3:  		/* addi R11, R26, 24 */
		/* 8217F5F0h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x18);
		/* 8217F5F0h case    3:*/		return 0x8217F5F4;
		  /* 8217F5F4h */ case    4:  		/* cmplw CR6, R27, R11 */
		/* 8217F5F4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 8217F5F4h case    4:*/		return 0x8217F5F8;
		  /* 8217F5F8h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 8217F5F8h case    5:*/		if ( regs.CR[6].eq ) { return 0x8217F618;  }
		/* 8217F5F8h case    5:*/		return 0x8217F5FC;
		  /* 8217F5FCh */ case    6:  		/* lwz R9, <#[R26 + 28]> */
		/* 8217F5FCh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R26 + 0x0000001C) );
		/* 8217F5FCh case    6:*/		return 0x8217F600;
		  /* 8217F600h */ case    7:  		/* rlwinm. R9, R9, 0, 31, 31 */
		/* 8217F600h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R9);
		/* 8217F600h case    7:*/		return 0x8217F604;
		  /* 8217F604h */ case    8:  		/* bc 4, CR0_EQ, 20 */
		/* 8217F604h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217F618;  }
		/* 8217F604h case    8:*/		return 0x8217F608;
		  /* 8217F608h */ case    9:  		/* lwz R10, <#[R11 + 4]> */
		/* 8217F608h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217F608h case    9:*/		return 0x8217F60C;
		  /* 8217F60Ch */ case   10:  		/* mr R27, R11 */
		/* 8217F60Ch case   10:*/		regs.R27 = regs.R11;
		/* 8217F60Ch case   10:*/		return 0x8217F610;
		  /* 8217F610h */ case   11:  		/* rlwinm. R11, R10, 0, 31, 31 */
		/* 8217F610h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R10);
		/* 8217F610h case   11:*/		return 0x8217F614;
		  /* 8217F614h */ case   12:  		/* b 16 */
		/* 8217F614h case   12:*/		return 0x8217F624;
		/* 8217F614h case   12:*/		return 0x8217F618;
	}
	return 0x8217F618;
} // Block from 8217F5E4h-8217F618h (13 instructions)

//////////////////////////////////////////////////////
// Block at 8217F618h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F618( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F618) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F618);
		  /* 8217F618h */ case    0:  		/* lwz R11, <#[R10 + 4]> */
		/* 8217F618h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 8217F618h case    0:*/		return 0x8217F61C;
		  /* 8217F61Ch */ case    1:  		/* mr R27, R10 */
		/* 8217F61Ch case    1:*/		regs.R27 = regs.R10;
		/* 8217F61Ch case    1:*/		return 0x8217F620;
		  /* 8217F620h */ case    2:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F620h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F620h case    2:*/		return 0x8217F624;
	}
	return 0x8217F624;
} // Block from 8217F618h-8217F624h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F624);
		  /* 8217F624h */ case    0:  		/* bc 4, CR0_EQ, 24 */
		/* 8217F624h case    0:*/		if ( !regs.CR[0].eq ) { return 0x8217F63C;  }
		/* 8217F624h case    0:*/		return 0x8217F628;
		  /* 8217F628h */ case    1:  		/* lwz R11, <#[R27]> */
		/* 8217F628h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8217F628h case    1:*/		return 0x8217F62C;
		  /* 8217F62Ch */ case    2:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F62Ch case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F62Ch case    2:*/		return 0x8217F630;
		  /* 8217F630h */ case    3:  		/* addi R28, R11, -40 */
		/* 8217F630h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R11,0xFFFFFFD8);
		/* 8217F630h case    3:*/		return 0x8217F634;
	}
	return 0x8217F634;
} // Block from 8217F624h-8217F634h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217F634h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F634( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F634) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F634);
		  /* 8217F634h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 8217F634h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8217F634h case    0:*/		return 0x8217F638;
		  /* 8217F638h */ case    1:  		/* bc 4, CR6_EQ, -576 */
		/* 8217F638h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217F3F8;  }
		/* 8217F638h case    1:*/		return 0x8217F63C;
	}
	return 0x8217F63C;
} // Block from 8217F634h-8217F63Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F63Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F63C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F63C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F63C);
		  /* 8217F63Ch */ case    0:  		/* rlwinm R11, R26, 0, 0, 30 */
		/* 8217F63Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R26);
		/* 8217F63Ch case    0:*/		return 0x8217F640;
	}
	return 0x8217F640;
} // Block from 8217F63Ch-8217F640h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F640h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F640( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F640) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F640);
		  /* 8217F640h */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217F640h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217F640h case    0:*/		return 0x8217F644;
		  /* 8217F644h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217F644h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F644h case    1:*/		return 0x8217F648;
		  /* 8217F648h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 8217F648h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217F658;  }
		/* 8217F648h case    2:*/		return 0x8217F64C;
		  /* 8217F64Ch */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 8217F64Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217F64Ch case    3:*/		return 0x8217F650;
		  /* 8217F650h */ case    4:  		/* mr R26, R11 */
		/* 8217F650h case    4:*/		regs.R26 = regs.R11;
		/* 8217F650h case    4:*/		return 0x8217F654;
		  /* 8217F654h */ case    5:  		/* bc 4, CR6_EQ, -696 */
		/* 8217F654h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217F39C;  }
		/* 8217F654h case    5:*/		return 0x8217F658;
	}
	return 0x8217F658;
} // Block from 8217F640h-8217F658h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217F658h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F658( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F658) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F658);
		  /* 8217F658h */ case    0:  		/* rlwinm. R11, R25, 0, 24, 31 */
		/* 8217F658h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R25);
		/* 8217F658h case    0:*/		return 0x8217F65C;
		  /* 8217F65Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 8217F65Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x8217F66C;  }
		/* 8217F65Ch case    1:*/		return 0x8217F660;
		  /* 8217F660h */ case    2:  		/* lwz R10, <#[R24 + 40]> */
		/* 8217F660h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000028) );
		/* 8217F660h case    2:*/		return 0x8217F664;
		  /* 8217F664h */ case    3:  		/* oris R10, R10, 128 */
		/* 8217F664h case    3:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x80);
		/* 8217F664h case    3:*/		return 0x8217F668;
		  /* 8217F668h */ case    4:  		/* stw R10, <#[R24 + 40]> */
		/* 8217F668h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000028) );
		/* 8217F668h case    4:*/		return 0x8217F66C;
	}
	return 0x8217F66C;
} // Block from 8217F658h-8217F66Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217F66Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F66C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F66C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F66C);
		  /* 8217F66Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8217F66Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217F66Ch case    0:*/		return 0x8217F670;
		  /* 8217F670h */ case    1:  		/* bc 4, CR6_EQ, -756 */
		/* 8217F670h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217F37C;  }
		/* 8217F670h case    1:*/		return 0x8217F674;
		  /* 8217F674h */ case    2:  		/* addi R1, R1, 160 */
		/* 8217F674h case    2:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 8217F674h case    2:*/		return 0x8217F678;
		  /* 8217F678h */ case    3:  		/* b -975844 */
		/* 8217F678h case    3:*/		return 0x82091294;
		/* 8217F678h case    3:*/		return 0x8217F67C;
		  /* 8217F67Ch */ case    4:  		/* nop */
		/* 8217F67Ch case    4:*/		cpu::op::nop();
		/* 8217F67Ch case    4:*/		return 0x8217F680;
		  /* 8217F680h */ case    5:  		/* lwz R11, <#[R3 + 40]> */
		/* 8217F680h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 8217F680h case    5:*/		return 0x8217F684;
		  /* 8217F684h */ case    6:  		/* rlwinm R11, R11, 0, 8, 23 */
		/* 8217F684h case    6:*/		cpu::op::rlwinm<0,0,8,23>(regs,&regs.R11,regs.R11);
		/* 8217F684h case    6:*/		return 0x8217F688;
		  /* 8217F688h */ case    7:  		/* rlwinm. R11, R11, 0, 23, 8 */
		/* 8217F688h case    7:*/		cpu::op::rlwinm<1,0,23,8>(regs,&regs.R11,regs.R11);
		/* 8217F688h case    7:*/		return 0x8217F68C;
		  /* 8217F68Ch */ case    8:  		/* bclr 12, CR0_EQ */
		/* 8217F68Ch case    8:*/		if ( regs.CR[0].eq ) { return (uint32)regs.LR; }
		/* 8217F68Ch case    8:*/		return 0x8217F690;
	}
	return 0x8217F690;
} // Block from 8217F66Ch-8217F690h (9 instructions)

//////////////////////////////////////////////////////
// Block at 8217F690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F690);
		  /* 8217F690h */ case    0:  		/* lwz R9, <#[R3 + 4]> */
		/* 8217F690h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000004) );
		/* 8217F690h case    0:*/		return 0x8217F694;
		  /* 8217F694h */ case    1:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 8217F694h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 8217F694h case    1:*/		return 0x8217F698;
		  /* 8217F698h */ case    2:  		/* bc 4, CR0_EQ, 220 */
		/* 8217F698h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217F774;  }
		/* 8217F698h case    2:*/		return 0x8217F69C;
		  /* 8217F69Ch */ case    3:  		/* cmplwi CR0, R9, 0 */
		/* 8217F69Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R9,0x00000000);
		/* 8217F69Ch case    3:*/		return 0x8217F6A0;
		  /* 8217F6A0h */ case    4:  		/* bc 12, CR0_EQ, 212 */
		/* 8217F6A0h case    4:*/		if ( regs.CR[0].eq ) { return 0x8217F774;  }
		/* 8217F6A0h case    4:*/		return 0x8217F6A4;
		  /* 8217F6A4h */ case    5:  		/* lwz R11, <#[R9 + 20]> */
		/* 8217F6A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 8217F6A4h case    5:*/		return 0x8217F6A8;
		  /* 8217F6A8h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F6A8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F6A8h case    6:*/		return 0x8217F6AC;
		  /* 8217F6ACh */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 8217F6ACh case    7:*/		if ( regs.CR[0].eq ) { return 0x8217F6D4;  }
		/* 8217F6ACh case    7:*/		return 0x8217F6B0;
		  /* 8217F6B0h */ case    8:  		/* lwz R11, <#[R9 + 28]> */
		/* 8217F6B0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000001C) );
		/* 8217F6B0h case    8:*/		return 0x8217F6B4;
		  /* 8217F6B4h */ case    9:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F6B4h case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F6B4h case    9:*/		return 0x8217F6B8;
		  /* 8217F6B8h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 8217F6B8h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217F6C8;  }
		/* 8217F6B8h case   10:*/		return 0x8217F6BC;
		  /* 8217F6BCh */ case   11:  		/* lwz R11, <#[R9 + 36]> */
		/* 8217F6BCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000024) );
		/* 8217F6BCh case   11:*/		return 0x8217F6C0;
		  /* 8217F6C0h */ case   12:  		/* addi R10, R9, 32 */
		/* 8217F6C0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x20);
		/* 8217F6C0h case   12:*/		return 0x8217F6C4;
		  /* 8217F6C4h */ case   13:  		/* b 24 */
		/* 8217F6C4h case   13:*/		return 0x8217F6DC;
		/* 8217F6C4h case   13:*/		return 0x8217F6C8;
	}
	return 0x8217F6C8;
} // Block from 8217F690h-8217F6C8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217F6C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F6C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F6C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F6C8);
		  /* 8217F6C8h */ case    0:  		/* lwz R11, <#[R9 + 28]> */
		/* 8217F6C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000001C) );
		/* 8217F6C8h case    0:*/		return 0x8217F6CC;
		  /* 8217F6CCh */ case    1:  		/* addi R10, R9, 24 */
		/* 8217F6CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x18);
		/* 8217F6CCh case    1:*/		return 0x8217F6D0;
		  /* 8217F6D0h */ case    2:  		/* b 12 */
		/* 8217F6D0h case    2:*/		return 0x8217F6DC;
		/* 8217F6D0h case    2:*/		return 0x8217F6D4;
	}
	return 0x8217F6D4;
} // Block from 8217F6C8h-8217F6D4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F6D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F6D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F6D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F6D4);
		  /* 8217F6D4h */ case    0:  		/* lwz R11, <#[R9 + 20]> */
		/* 8217F6D4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000014) );
		/* 8217F6D4h case    0:*/		return 0x8217F6D8;
		  /* 8217F6D8h */ case    1:  		/* addi R10, R9, 16 */
		/* 8217F6D8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x10);
		/* 8217F6D8h case    1:*/		return 0x8217F6DC;
	}
	return 0x8217F6DC;
} // Block from 8217F6D4h-8217F6DCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F6DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F6DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F6DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F6DC);
		  /* 8217F6DCh */ case    0:  		/* rlwinm R8, R11, 0, 31, 31 */
		/* 8217F6DCh case    0:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R8,regs.R11);
		/* 8217F6DCh case    0:*/		return 0x8217F6E0;
		  /* 8217F6E0h */ case    1:  		/* addic R8, R8, -1 */
		/* 8217F6E0h case    1:*/		cpu::op::addic<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 8217F6E0h case    1:*/		return 0x8217F6E4;
		  /* 8217F6E4h */ case    2:  		/* subfe R8, R8, R8 */
		/* 8217F6E4h case    2:*/		cpu::op::subfe<0>(regs,&regs.R8,regs.R8,regs.R8);
		/* 8217F6E4h case    2:*/		return 0x8217F6E8;
		  /* 8217F6E8h */ case    3:  		/* and R11, R8, R11 */
		/* 8217F6E8h case    3:*/		cpu::op::and<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 8217F6E8h case    3:*/		return 0x8217F6EC;
		  /* 8217F6ECh */ case    4:  		/* b 104 */
		/* 8217F6ECh case    4:*/		return 0x8217F754;
		/* 8217F6ECh case    4:*/		return 0x8217F6F0;
		  /* 8217F6F0h */ case    5:  		/* lwz R8, <#[R11 + 8]> */
		/* 8217F6F0h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F6F0h case    5:*/		return 0x8217F6F4;
		  /* 8217F6F4h */ case    6:  		/* rlwinm R7, R11, 0, 0, 30 */
		/* 8217F6F4h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R11);
		/* 8217F6F4h case    6:*/		return 0x8217F6F8;
		  /* 8217F6F8h */ case    7:  		/* rlwinm R8, R8, 0, 5, 2 */
		/* 8217F6F8h case    7:*/		cpu::op::rlwinm<0,0,5,2>(regs,&regs.R8,regs.R8);
		/* 8217F6F8h case    7:*/		return 0x8217F6FC;
		  /* 8217F6FCh */ case    8:  		/* stw R8, <#[R11 + 8]> */
		/* 8217F6FCh case    8:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F6FCh case    8:*/		return 0x8217F700;
		  /* 8217F700h */ case    9:  		/* lwz R11, <#[R7 + 40]> */
		/* 8217F700h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000028) );
		/* 8217F700h case    9:*/		return 0x8217F704;
		  /* 8217F704h */ case   10:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 8217F704h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 8217F704h case   10:*/		return 0x8217F708;
		  /* 8217F708h */ case   11:  		/* bc 4, CR0_EQ, 12 */
		/* 8217F708h case   11:*/		if ( !regs.CR[0].eq ) { return 0x8217F714;  }
		/* 8217F708h case   11:*/		return 0x8217F70C;
		  /* 8217F70Ch */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 8217F70Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217F70Ch case   12:*/		return 0x8217F710;
		  /* 8217F710h */ case   13:  		/* bc 4, CR6_EQ, -32 */
		/* 8217F710h case   13:*/		if ( !regs.CR[6].eq ) { return 0x8217F6F0;  }
		/* 8217F710h case   13:*/		return 0x8217F714;
	}
	return 0x8217F714;
} // Block from 8217F6DCh-8217F714h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217F714h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F714( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F714) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F714);
		  /* 8217F714h */ case    0:  		/* addi R7, R9, 32 */
		/* 8217F714h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R9,0x20);
		/* 8217F714h case    0:*/		return 0x8217F718;
		  /* 8217F718h */ case    1:  		/* cmplw CR6, R10, R7 */
		/* 8217F718h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 8217F718h case    1:*/		return 0x8217F71C;
		  /* 8217F71Ch */ case    2:  		/* bc 12, CR6_EQ, 64 */
		/* 8217F71Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8217F75C;  }
		/* 8217F71Ch case    2:*/		return 0x8217F720;
		  /* 8217F720h */ case    3:  		/* addi R8, R9, 24 */
		/* 8217F720h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R9,0x18);
		/* 8217F720h case    3:*/		return 0x8217F724;
		  /* 8217F724h */ case    4:  		/* cmplw CR6, R10, R8 */
		/* 8217F724h case    4:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R8);
		/* 8217F724h case    4:*/		return 0x8217F728;
		  /* 8217F728h */ case    5:  		/* bc 12, CR6_EQ, 28 */
		/* 8217F728h case    5:*/		if ( regs.CR[6].eq ) { return 0x8217F744;  }
		/* 8217F728h case    5:*/		return 0x8217F72C;
		  /* 8217F72Ch */ case    6:  		/* lwz R11, <#[R9 + 28]> */
		/* 8217F72Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000001C) );
		/* 8217F72Ch case    6:*/		return 0x8217F730;
		  /* 8217F730h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F730h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F730h case    7:*/		return 0x8217F734;
		  /* 8217F734h */ case    8:  		/* bc 4, CR0_EQ, 16 */
		/* 8217F734h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217F744;  }
		/* 8217F734h case    8:*/		return 0x8217F738;
		  /* 8217F738h */ case    9:  		/* lwz R11, <#[R8 + 4]> */
		/* 8217F738h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 8217F738h case    9:*/		return 0x8217F73C;
		  /* 8217F73Ch */ case   10:  		/* mr R10, R8 */
		/* 8217F73Ch case   10:*/		regs.R10 = regs.R8;
		/* 8217F73Ch case   10:*/		return 0x8217F740;
		  /* 8217F740h */ case   11:  		/* b 12 */
		/* 8217F740h case   11:*/		return 0x8217F74C;
		/* 8217F740h case   11:*/		return 0x8217F744;
	}
	return 0x8217F744;
} // Block from 8217F714h-8217F744h (12 instructions)

//////////////////////////////////////////////////////
// Block at 8217F744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F744);
		  /* 8217F744h */ case    0:  		/* lwz R11, <#[R7 + 4]> */
		/* 8217F744h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 8217F744h case    0:*/		return 0x8217F748;
		  /* 8217F748h */ case    1:  		/* mr R10, R7 */
		/* 8217F748h case    1:*/		regs.R10 = regs.R7;
		/* 8217F748h case    1:*/		return 0x8217F74C;
	}
	return 0x8217F74C;
} // Block from 8217F744h-8217F74Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F74Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F74C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F74C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F74C);
		  /* 8217F74Ch */ case    0:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 8217F74Ch case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 8217F74Ch case    0:*/		return 0x8217F750;
		  /* 8217F750h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 8217F750h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217F75C;  }
		/* 8217F750h case    1:*/		return 0x8217F754;
	}
	return 0x8217F754;
} // Block from 8217F74Ch-8217F754h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F754h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F754( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F754) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F754);
		  /* 8217F754h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 8217F754h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217F754h case    0:*/		return 0x8217F758;
		  /* 8217F758h */ case    1:  		/* bc 4, CR6_EQ, -104 */
		/* 8217F758h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217F6F0;  }
		/* 8217F758h case    1:*/		return 0x8217F75C;
	}
	return 0x8217F75C;
} // Block from 8217F754h-8217F75Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F75Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F75C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F75C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F75C);
		  /* 8217F75Ch */ case    0:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 8217F75Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 8217F75Ch case    0:*/		return 0x8217F760;
		  /* 8217F760h */ case    1:  		/* lwz R9, <#[R11 + 4]> */
		/* 8217F760h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8217F760h case    1:*/		return 0x8217F764;
		  /* 8217F764h */ case    2:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 8217F764h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 8217F764h case    2:*/		return 0x8217F768;
		  /* 8217F768h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 8217F768h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217F774;  }
		/* 8217F768h case    3:*/		return 0x8217F76C;
		  /* 8217F76Ch */ case    4:  		/* cmplwi CR6, R9, 0 */
		/* 8217F76Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 8217F76Ch case    4:*/		return 0x8217F770;
		  /* 8217F770h */ case    5:  		/* bc 4, CR6_EQ, -204 */
		/* 8217F770h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217F6A4;  }
		/* 8217F770h case    5:*/		return 0x8217F774;
	}
	return 0x8217F774;
} // Block from 8217F75Ch-8217F774h (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217F774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F774);
		  /* 8217F774h */ case    0:  		/* b -2812 */
		/* 8217F774h case    0:*/		return 0x8217EC78;
		/* 8217F774h case    0:*/		return 0x8217F778;
		  /* 8217F778h */ case    1:  		/* bclr 20, CR0_LT */
		/* 8217F778h case    1:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 8217F778h case    1:*/		return 0x8217F77C;
	}
	return 0x8217F77C;
} // Block from 8217F774h-8217F77Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F77Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F77C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F77C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F77C);
		  /* 8217F77Ch */ case    0:  		/* nop */
		/* 8217F77Ch case    0:*/		cpu::op::nop();
		/* 8217F77Ch case    0:*/		return 0x8217F780;
	}
	return 0x8217F780;
} // Block from 8217F77Ch-8217F780h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F780);
		  /* 8217F780h */ case    0:  		/* mfspr R12, LR */
		/* 8217F780h case    0:*/		regs.R12 = regs.LR;
		/* 8217F780h case    0:*/		return 0x8217F784;
		  /* 8217F784h */ case    1:  		/* bl -976228 */
		/* 8217F784h case    1:*/		regs.LR = 0x8217F788; return 0x82091220;
		/* 8217F784h case    1:*/		return 0x8217F788;
		  /* 8217F788h */ case    2:  		/* stfd FR31, <#[R1 - 160]> */
		/* 8217F788h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF60) );
		/* 8217F788h case    2:*/		return 0x8217F78C;
		  /* 8217F78Ch */ case    3:  		/* stwu R1, <#[R1 - 304]> */
		/* 8217F78Ch case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFED0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFED0);
		/* 8217F78Ch case    3:*/		return 0x8217F790;
		  /* 8217F790h */ case    4:  		/* lwz R11, <#[R3 + 44]> */
		/* 8217F790h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000002C) );
		/* 8217F790h case    4:*/		return 0x8217F794;
		  /* 8217F794h */ case    5:  		/* mr R18, R3 */
		/* 8217F794h case    5:*/		regs.R18 = regs.R3;
		/* 8217F794h case    5:*/		return 0x8217F798;
		  /* 8217F798h */ case    6:  		/* rlwinm. R11, R11, 0, 23, 23 */
		/* 8217F798h case    6:*/		cpu::op::rlwinm<1,0,23,23>(regs,&regs.R11,regs.R11);
		/* 8217F798h case    6:*/		return 0x8217F79C;
		  /* 8217F79Ch */ case    7:  		/* bc 4, CR0_EQ, 16 */
		/* 8217F79Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8217F7AC;  }
		/* 8217F79Ch case    7:*/		return 0x8217F7A0;
		  /* 8217F7A0h */ case    8:  		/* lwz R11, <#[R3 + 40]> */
		/* 8217F7A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 8217F7A0h case    8:*/		return 0x8217F7A4;
		  /* 8217F7A4h */ case    9:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 8217F7A4h case    9:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 8217F7A4h case    9:*/		return 0x8217F7A8;
		  /* 8217F7A8h */ case   10:  		/* bc 12, CR0_EQ, 1160 */
		/* 8217F7A8h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217FC30;  }
		/* 8217F7A8h case   10:*/		return 0x8217F7AC;
	}
	return 0x8217F7AC;
} // Block from 8217F780h-8217F7ACh (11 instructions)

//////////////////////////////////////////////////////
// Block at 8217F7ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F7AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F7AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F7AC);
		  /* 8217F7ACh */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 8217F7ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 8217F7ACh case    0:*/		return 0x8217F7B0;
		  /* 8217F7B0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F7B0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F7B0h case    1:*/		return 0x8217F7B4;
		  /* 8217F7B4h */ case    2:  		/* bc 4, CR0_EQ, 1148 */
		/* 8217F7B4h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217FC30;  }
		/* 8217F7B4h case    2:*/		return 0x8217F7B8;
		  /* 8217F7B8h */ case    3:  		/* lwz R11, <#[R18]> */
		/* 8217F7B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 8217F7B8h case    3:*/		return 0x8217F7BC;
		  /* 8217F7BCh */ case    4:  		/* b 1128 */
		/* 8217F7BCh case    4:*/		return 0x8217FC24;
		/* 8217F7BCh case    4:*/		return 0x8217F7C0;
		  /* 8217F7C0h */ case    5:  		/* lwz R11, <#[R28 + 36]> */
		/* 8217F7C0h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000024) );
		/* 8217F7C0h case    5:*/		return 0x8217F7C4;
		  /* 8217F7C4h */ case    6:  		/* addi R27, R28, 32 */
		/* 8217F7C4h case    6:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0x20);
		/* 8217F7C4h case    6:*/		return 0x8217F7C8;
		  /* 8217F7C8h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F7C8h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F7C8h case    7:*/		return 0x8217F7CC;
		  /* 8217F7CCh */ case    8:  		/* bc 4, CR0_EQ, 1096 */
		/* 8217F7CCh case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217FC14;  }
		/* 8217F7CCh case    8:*/		return 0x8217F7D0;
		  /* 8217F7D0h */ case    9:  		/* lwz R11, <#[R27]> */
		/* 8217F7D0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8217F7D0h case    9:*/		return 0x8217F7D4;
		  /* 8217F7D4h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F7D4h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F7D4h case   10:*/		return 0x8217F7D8;
		  /* 8217F7D8h */ case   11:  		/* addic. R26, R11, -40 */
		/* 8217F7D8h case   11:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R11,0xFFFFFFD8);
		/* 8217F7D8h case   11:*/		return 0x8217F7DC;
		  /* 8217F7DCh */ case   12:  		/* bc 12, CR0_EQ, 1080 */
		/* 8217F7DCh case   12:*/		if ( regs.CR[0].eq ) { return 0x8217FC14;  }
		/* 8217F7DCh case   12:*/		return 0x8217F7E0;
		  /* 8217F7E0h */ case   13:  		/* lwz R11, <#[R26 + 8]> */
		/* 8217F7E0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 8217F7E0h case   13:*/		return 0x8217F7E4;
		  /* 8217F7E4h */ case   14:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 8217F7E4h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 8217F7E4h case   14:*/		return 0x8217F7E8;
		  /* 8217F7E8h */ case   15:  		/* cmplwi CR6, R10, 10624 */
		/* 8217F7E8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002980);
		/* 8217F7E8h case   15:*/		return 0x8217F7EC;
		  /* 8217F7ECh */ case   16:  		/* bc 4, CR6_EQ, 1064 */
		/* 8217F7ECh case   16:*/		if ( !regs.CR[6].eq ) { return 0x8217FC14;  }
		/* 8217F7ECh case   16:*/		return 0x8217F7F0;
		  /* 8217F7F0h */ case   17:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 8217F7F0h case   17:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F7F0h case   17:*/		return 0x8217F7F4;
		  /* 8217F7F4h */ case   18:  		/* li R29, 0 */
		/* 8217F7F4h case   18:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8217F7F4h case   18:*/		return 0x8217F7F8;
		  /* 8217F7F8h */ case   19:  		/* bc 12, CR0_EQ, 252 */
		/* 8217F7F8h case   19:*/		if ( regs.CR[0].eq ) { return 0x8217F8F4;  }
		/* 8217F7F8h case   19:*/		return 0x8217F7FC;
		  /* 8217F7FCh */ case   20:  		/* lwz R30, <#[R28 + 64]> */
		/* 8217F7FCh case   20:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000040) );
		/* 8217F7FCh case   20:*/		return 0x8217F800;
		  /* 8217F800h */ case   21:  		/* cmplwi CR6, R30, 0 */
		/* 8217F800h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217F800h case   21:*/		return 0x8217F804;
		  /* 8217F804h */ case   22:  		/* bc 12, CR6_EQ, 240 */
		/* 8217F804h case   22:*/		if ( regs.CR[6].eq ) { return 0x8217F8F4;  }
		/* 8217F804h case   22:*/		return 0x8217F808;
		  /* 8217F808h */ case   23:  		/* lwz R11, <#[R30 + 36]> */
		/* 8217F808h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8217F808h case   23:*/		return 0x8217F80C;
		  /* 8217F80Ch */ case   24:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F80Ch case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F80Ch case   24:*/		return 0x8217F810;
		  /* 8217F810h */ case   25:  		/* bc 12, CR0_EQ, 12 */
		/* 8217F810h case   25:*/		if ( regs.CR[0].eq ) { return 0x8217F81C;  }
		/* 8217F810h case   25:*/		return 0x8217F814;
		  /* 8217F814h */ case   26:  		/* li R31, 0 */
		/* 8217F814h case   26:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 8217F814h case   26:*/		return 0x8217F818;
		  /* 8217F818h */ case   27:  		/* b 16 */
		/* 8217F818h case   27:*/		return 0x8217F828;
		/* 8217F818h case   27:*/		return 0x8217F81C;
	}
	return 0x8217F81C;
} // Block from 8217F7ACh-8217F81Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217F81Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F81C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F81C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F81C);
		  /* 8217F81Ch */ case    0:  		/* lwz R11, <#[R30 + 32]> */
		/* 8217F81Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 8217F81Ch case    0:*/		return 0x8217F820;
		  /* 8217F820h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F820h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F820h case    1:*/		return 0x8217F824;
		  /* 8217F824h */ case    2:  		/* addi R31, R11, -40 */
		/* 8217F824h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R11,0xFFFFFFD8);
		/* 8217F824h case    2:*/		return 0x8217F828;
	}
	return 0x8217F828;
} // Block from 8217F81Ch-8217F828h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F828);
		  /* 8217F828h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 8217F828h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 8217F828h case    0:*/		return 0x8217F82C;
		  /* 8217F82Ch */ case    1:  		/* rlwinm. R10, R11, 5, 31, 31 */
		/* 8217F82Ch case    1:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R10,regs.R11);
		/* 8217F82Ch case    1:*/		return 0x8217F830;
		  /* 8217F830h */ case    2:  		/* bc 4, CR0_EQ, 172 */
		/* 8217F830h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217F8DC;  }
		/* 8217F830h case    2:*/		return 0x8217F834;
		  /* 8217F834h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217F834h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217F834h case    3:*/		return 0x8217F838;
		  /* 8217F838h */ case    4:  		/* cmplwi CR6, R11, 10752 */
		/* 8217F838h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A00);
		/* 8217F838h case    4:*/		return 0x8217F83C;
		  /* 8217F83Ch */ case    5:  		/* bc 4, CR6_EQ, 176 */
		/* 8217F83Ch case    5:*/		if ( !regs.CR[6].eq ) { return 0x8217F8EC;  }
		/* 8217F83Ch case    5:*/		return 0x8217F840;
		  /* 8217F840h */ case    6:  		/* li R6, 0 */
		/* 8217F840h case    6:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8217F840h case    6:*/		return 0x8217F844;
		  /* 8217F844h */ case    7:  		/* li R5, 0 */
		/* 8217F844h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217F844h case    7:*/		return 0x8217F848;
		  /* 8217F848h */ case    8:  		/* li R4, 84 */
		/* 8217F848h case    8:*/		cpu::op::li<0>(regs,&regs.R4,0x54);
		/* 8217F848h case    8:*/		return 0x8217F84C;
		  /* 8217F84Ch */ case    9:  		/* mr R3, R18 */
		/* 8217F84Ch case    9:*/		regs.R3 = regs.R18;
		/* 8217F84Ch case    9:*/		return 0x8217F850;
		  /* 8217F850h */ case   10:  		/* bl -111648 */
		/* 8217F850h case   10:*/		regs.LR = 0x8217F854; return 0x82164430;
		/* 8217F850h case   10:*/		return 0x8217F854;
		  /* 8217F854h */ case   11:  		/* addi R10, R31, -20 */
		/* 8217F854h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R31,0xFFFFFFEC);
		/* 8217F854h case   11:*/		return 0x8217F858;
		  /* 8217F858h */ case   12:  		/* lwz R11, <#[R18 + 616]> */
		/* 8217F858h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000268) );
		/* 8217F858h case   12:*/		return 0x8217F85C;
		  /* 8217F85Ch */ case   13:  		/* lwzx R10, <#[R3 + R10]> */
		/* 8217F85Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + regs.R10 + 0x00000000) );
		/* 8217F85Ch case   13:*/		return 0x8217F860;
		  /* 8217F860h */ case   14:  		/* rlwinm R10, R10, 27, 27, 31 */
		/* 8217F860h case   14:*/		cpu::op::rlwinm<0,27,27,31>(regs,&regs.R10,regs.R10);
		/* 8217F860h case   14:*/		return 0x8217F864;
		  /* 8217F864h */ case   15:  		/* mulli R10, R10, 68 */
		/* 8217F864h case   15:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x44);
		/* 8217F864h case   15:*/		return 0x8217F868;
		  /* 8217F868h */ case   16:  		/* add R11, R10, R11 */
		/* 8217F868h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217F868h case   16:*/		return 0x8217F86C;
		  /* 8217F86Ch */ case   17:  		/* b 40 */
		/* 8217F86Ch case   17:*/		return 0x8217F894;
		/* 8217F86Ch case   17:*/		return 0x8217F870;
		  /* 8217F870h */ case   18:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217F870h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F870h case   18:*/		return 0x8217F874;
		  /* 8217F874h */ case   19:  		/* b 16 */
		/* 8217F874h case   19:*/		return 0x8217F884;
		/* 8217F874h case   19:*/		return 0x8217F878;
		  /* 8217F878h */ case   20:  		/* lwz R9, <#[R10 + 48]> */
		/* 8217F878h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000030) );
		/* 8217F878h case   20:*/		return 0x8217F87C;
		  /* 8217F87Ch */ case   21:  		/* rlwinm. R9, R9, 0, 9, 9 */
		/* 8217F87Ch case   21:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R9,regs.R9);
		/* 8217F87Ch case   21:*/		return 0x8217F880;
		  /* 8217F880h */ case   22:  		/* bc 12, CR0_EQ, 16 */
		/* 8217F880h case   22:*/		if ( regs.CR[0].eq ) { return 0x8217F890;  }
		/* 8217F880h case   22:*/		return 0x8217F884;
	}
	return 0x8217F884;
} // Block from 8217F828h-8217F884h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8217F884h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F884( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F884) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F884);
		  /* 8217F884h */ case    0:  		/* lwz R10, <#[R10 + 80]> */
		/* 8217F884h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 8217F884h case    0:*/		return 0x8217F888;
		  /* 8217F888h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 8217F888h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 8217F888h case    1:*/		return 0x8217F88C;
		  /* 8217F88Ch */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 8217F88Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217F878;  }
		/* 8217F88Ch case    2:*/		return 0x8217F890;
	}
	return 0x8217F890;
} // Block from 8217F884h-8217F890h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F890h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F890( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F890) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F890);
		  /* 8217F890h */ case    0:  		/* stw R10, <#[R11 + 8]> */
		/* 8217F890h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F890h case    0:*/		return 0x8217F894;
	}
	return 0x8217F894;
} // Block from 8217F890h-8217F894h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F894);
		  /* 8217F894h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 8217F894h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F894h case    0:*/		return 0x8217F898;
		  /* 8217F898h */ case    1:  		/* lwz R10, <#[R10 + 48]> */
		/* 8217F898h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000030) );
		/* 8217F898h case    1:*/		return 0x8217F89C;
		  /* 8217F89Ch */ case    2:  		/* rlwinm. R10, R10, 10, 31, 31 */
		/* 8217F89Ch case    2:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R10);
		/* 8217F89Ch case    2:*/		return 0x8217F8A0;
		  /* 8217F8A0h */ case    3:  		/* bc 4, CR0_EQ, -48 */
		/* 8217F8A0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217F870;  }
		/* 8217F8A0h case    3:*/		return 0x8217F8A4;
		  /* 8217F8A4h */ case    4:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217F8A4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F8A4h case    4:*/		return 0x8217F8A8;
		  /* 8217F8A8h */ case    5:  		/* lwz R10, <#[R11 + 36]> */
		/* 8217F8A8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000024) );
		/* 8217F8A8h case    5:*/		return 0x8217F8AC;
		  /* 8217F8ACh */ case    6:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 8217F8ACh case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 8217F8ACh case    6:*/		return 0x8217F8B0;
		  /* 8217F8B0h */ case    7:  		/* bc 4, CR0_EQ, 1492 */
		/* 8217F8B0h case    7:*/		if ( !regs.CR[0].eq ) { return 0x8217FE84;  }
		/* 8217F8B0h case    7:*/		return 0x8217F8B4;
		  /* 8217F8B4h */ case    8:  		/* lwz R11, <#[R11 + 32]> */
		/* 8217F8B4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000020) );
		/* 8217F8B4h case    8:*/		return 0x8217F8B8;
		  /* 8217F8B8h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F8B8h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F8B8h case    9:*/		return 0x8217F8BC;
		  /* 8217F8BCh */ case   10:  		/* addic. R11, R11, -40 */
		/* 8217F8BCh case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217F8BCh case   10:*/		return 0x8217F8C0;
		  /* 8217F8C0h */ case   11:  		/* bc 12, CR0_EQ, 1476 */
		/* 8217F8C0h case   11:*/		if ( regs.CR[0].eq ) { return 0x8217FE84;  }
		/* 8217F8C0h case   11:*/		return 0x8217F8C4;
		  /* 8217F8C4h */ case   12:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217F8C4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F8C4h case   12:*/		return 0x8217F8C8;
		  /* 8217F8C8h */ case   13:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 8217F8C8h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 8217F8C8h case   13:*/		return 0x8217F8CC;
		  /* 8217F8CCh */ case   14:  		/* cmplwi CR6, R10, 10880 */
		/* 8217F8CCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00002A80);
		/* 8217F8CCh case   14:*/		return 0x8217F8D0;
		  /* 8217F8D0h */ case   15:  		/* bc 4, CR6_EQ, 1460 */
		/* 8217F8D0h case   15:*/		if ( !regs.CR[6].eq ) { return 0x8217FE84;  }
		/* 8217F8D0h case   15:*/		return 0x8217F8D4;
		  /* 8217F8D4h */ case   16:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 8217F8D4h case   16:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F8D4h case   16:*/		return 0x8217F8D8;
		  /* 8217F8D8h */ case   17:  		/* bc 12, CR0_EQ, 20 */
		/* 8217F8D8h case   17:*/		if ( regs.CR[0].eq ) { return 0x8217F8EC;  }
		/* 8217F8D8h case   17:*/		return 0x8217F8DC;
	}
	return 0x8217F8DC;
} // Block from 8217F894h-8217F8DCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 8217F8DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F8DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F8DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F8DC);
		  /* 8217F8DCh */ case    0:  		/* mr R29, R30 */
		/* 8217F8DCh case    0:*/		regs.R29 = regs.R30;
		/* 8217F8DCh case    0:*/		return 0x8217F8E0;
		  /* 8217F8E0h */ case    1:  		/* lwz R30, <#[R30 + 64]> */
		/* 8217F8E0h case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000040) );
		/* 8217F8E0h case    1:*/		return 0x8217F8E4;
		  /* 8217F8E4h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 8217F8E4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 8217F8E4h case    2:*/		return 0x8217F8E8;
		  /* 8217F8E8h */ case    3:  		/* bc 4, CR6_EQ, -224 */
		/* 8217F8E8h case    3:*/		if ( !regs.CR[6].eq ) { return 0x8217F808;  }
		/* 8217F8E8h case    3:*/		return 0x8217F8EC;
	}
	return 0x8217F8EC;
} // Block from 8217F8DCh-8217F8ECh (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217F8ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F8EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F8EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F8EC);
		  /* 8217F8ECh */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8217F8ECh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217F8ECh case    0:*/		return 0x8217F8F0;
		  /* 8217F8F0h */ case    1:  		/* bc 4, CR6_EQ, 92 */
		/* 8217F8F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217F94C;  }
		/* 8217F8F0h case    1:*/		return 0x8217F8F4;
	}
	return 0x8217F8F4;
} // Block from 8217F8ECh-8217F8F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F8F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F8F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F8F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F8F4);
		  /* 8217F8F4h */ case    0:  		/* lwz R31, <#[R28 + 64]> */
		/* 8217F8F4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000040) );
		/* 8217F8F4h case    0:*/		return 0x8217F8F8;
		  /* 8217F8F8h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 8217F8F8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217F8F8h case    1:*/		return 0x8217F8FC;
		  /* 8217F8FCh */ case    2:  		/* bc 12, CR6_EQ, 792 */
		/* 8217F8FCh case    2:*/		if ( regs.CR[6].eq ) { return 0x8217FC14;  }
		/* 8217F8FCh case    2:*/		return 0x8217F900;
		  /* 8217F900h */ case    3:  		/* lwz R11, <#[R31 + 36]> */
		/* 8217F900h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8217F900h case    3:*/		return 0x8217F904;
		  /* 8217F904h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F904h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F904h case    4:*/		return 0x8217F908;
		  /* 8217F908h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 8217F908h case    5:*/		if ( regs.CR[0].eq ) { return 0x8217F914;  }
		/* 8217F908h case    5:*/		return 0x8217F90C;
		  /* 8217F90Ch */ case    6:  		/* li R3, 0 */
		/* 8217F90Ch case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 8217F90Ch case    6:*/		return 0x8217F910;
		  /* 8217F910h */ case    7:  		/* b 16 */
		/* 8217F910h case    7:*/		return 0x8217F920;
		/* 8217F910h case    7:*/		return 0x8217F914;
	}
	return 0x8217F914;
} // Block from 8217F8F4h-8217F914h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217F914h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F914( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F914) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F914);
		  /* 8217F914h */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 8217F914h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8217F914h case    0:*/		return 0x8217F918;
		  /* 8217F918h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F918h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F918h case    1:*/		return 0x8217F91C;
		  /* 8217F91Ch */ case    2:  		/* addi R3, R11, -40 */
		/* 8217F91Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFFFD8);
		/* 8217F91Ch case    2:*/		return 0x8217F920;
	}
	return 0x8217F920;
} // Block from 8217F914h-8217F920h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217F920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F920);
		  /* 8217F920h */ case    0:  		/* mr R4, R18 */
		/* 8217F920h case    0:*/		regs.R4 = regs.R18;
		/* 8217F920h case    0:*/		return 0x8217F924;
		  /* 8217F924h */ case    1:  		/* bl -111004 */
		/* 8217F924h case    1:*/		regs.LR = 0x8217F928; return 0x82164788;
		/* 8217F924h case    1:*/		return 0x8217F928;
		  /* 8217F928h */ case    2:  		/* cmpwi CR6, R3, 2 */
		/* 8217F928h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000002);
		/* 8217F928h case    2:*/		return 0x8217F92C;
		  /* 8217F92Ch */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 8217F92Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x8217F940;  }
		/* 8217F92Ch case    3:*/		return 0x8217F930;
		  /* 8217F930h */ case    4:  		/* lwz R31, <#[R31 + 64]> */
		/* 8217F930h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000040) );
		/* 8217F930h case    4:*/		return 0x8217F934;
		  /* 8217F934h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 8217F934h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217F934h case    5:*/		return 0x8217F938;
		  /* 8217F938h */ case    6:  		/* bc 4, CR6_EQ, -56 */
		/* 8217F938h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217F900;  }
		/* 8217F938h case    6:*/		return 0x8217F93C;
		  /* 8217F93Ch */ case    7:  		/* b 8 */
		/* 8217F93Ch case    7:*/		return 0x8217F944;
		/* 8217F93Ch case    7:*/		return 0x8217F940;
	}
	return 0x8217F940;
} // Block from 8217F920h-8217F940h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217F940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F940);
		  /* 8217F940h */ case    0:  		/* mr R29, R31 */
		/* 8217F940h case    0:*/		regs.R29 = regs.R31;
		/* 8217F940h case    0:*/		return 0x8217F944;
	}
	return 0x8217F944;
} // Block from 8217F940h-8217F944h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217F944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F944);
		  /* 8217F944h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 8217F944h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8217F944h case    0:*/		return 0x8217F948;
		  /* 8217F948h */ case    1:  		/* bc 12, CR6_EQ, 716 */
		/* 8217F948h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217FC14;  }
		/* 8217F948h case    1:*/		return 0x8217F94C;
	}
	return 0x8217F94C;
} // Block from 8217F944h-8217F94Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217F94Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F94C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F94C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F94C);
		  /* 8217F94Ch */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 8217F94Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 8217F94Ch case    0:*/		return 0x8217F950;
		  /* 8217F950h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F950h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F950h case    1:*/		return 0x8217F954;
		  /* 8217F954h */ case    2:  		/* bc 4, CR0_EQ, 1340 */
		/* 8217F954h case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217FE90;  }
		/* 8217F954h case    2:*/		return 0x8217F958;
		  /* 8217F958h */ case    3:  		/* lwz R11, <#[R18]> */
		/* 8217F958h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000000) );
		/* 8217F958h case    3:*/		return 0x8217F95C;
		  /* 8217F95Ch */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F95Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F95Ch case    4:*/		return 0x8217F960;
		  /* 8217F960h */ case    5:  		/* addic. R31, R11, -4 */
		/* 8217F960h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFFC);
		/* 8217F960h case    5:*/		return 0x8217F964;
		  /* 8217F964h */ case    6:  		/* bc 12, CR0_EQ, 1324 */
		/* 8217F964h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217FE90;  }
		/* 8217F964h case    6:*/		return 0x8217F968;
		  /* 8217F968h */ case    7:  		/* lwz R11, <#[R29 + 48]> */
		/* 8217F968h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8217F968h case    7:*/		return 0x8217F96C;
		  /* 8217F96Ch */ case    8:  		/* li R9, 1 */
		/* 8217F96Ch case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 8217F96Ch case    8:*/		return 0x8217F970;
		  /* 8217F970h */ case    9:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 8217F970h case    9:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 8217F970h case    9:*/		return 0x8217F974;
		  /* 8217F974h */ case   10:  		/* rlwinm R8, R11, 0, 27, 31 */
		/* 8217F974h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R11);
		/* 8217F974h case   10:*/		return 0x8217F978;
		  /* 8217F978h */ case   11:  		/* rlwinm R10, R11, 29, 3, 29 */
		/* 8217F978h case   11:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R11);
		/* 8217F978h case   11:*/		return 0x8217F97C;
		  /* 8217F97Ch */ case   12:  		/* slw R9, R9, R8 */
		/* 8217F97Ch case   12:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 8217F97Ch case   12:*/		return 0x8217F980;
		  /* 8217F980h */ case   13:  		/* lwz R11, <#[R31 + 40]> */
		/* 8217F980h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000028) );
		/* 8217F980h case   13:*/		return 0x8217F984;
		  /* 8217F984h */ case   14:  		/* add R11, R11, R10 */
		/* 8217F984h case   14:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 8217F984h case   14:*/		return 0x8217F988;
		  /* 8217F988h */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217F988h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217F988h case   15:*/		return 0x8217F98C;
		  /* 8217F98Ch */ case   16:  		/* and. R11, R11, R9 */
		/* 8217F98Ch case   16:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217F98Ch case   16:*/		return 0x8217F990;
		  /* 8217F990h */ case   17:  		/* bc 12, CR0_EQ, 48 */
		/* 8217F990h case   17:*/		if ( regs.CR[0].eq ) { return 0x8217F9C0;  }
		/* 8217F990h case   17:*/		return 0x8217F994;
		  /* 8217F994h */ case   18:  		/* lwz R11, <#[R31 + 36]> */
		/* 8217F994h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000024) );
		/* 8217F994h case   18:*/		return 0x8217F998;
		  /* 8217F998h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217F998h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217F998h case   19:*/		return 0x8217F99C;
		  /* 8217F99Ch */ case   20:  		/* bc 4, CR0_EQ, 36 */
		/* 8217F99Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x8217F9C0;  }
		/* 8217F99Ch case   20:*/		return 0x8217F9A0;
		  /* 8217F9A0h */ case   21:  		/* lwz R11, <#[R31 + 32]> */
		/* 8217F9A0h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 8217F9A0h case   21:*/		return 0x8217F9A4;
		  /* 8217F9A4h */ case   22:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F9A4h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F9A4h case   22:*/		return 0x8217F9A8;
		  /* 8217F9A8h */ case   23:  		/* addic. R11, R11, -40 */
		/* 8217F9A8h case   23:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFD8);
		/* 8217F9A8h case   23:*/		return 0x8217F9AC;
		  /* 8217F9ACh */ case   24:  		/* bc 12, CR0_EQ, 20 */
		/* 8217F9ACh case   24:*/		if ( regs.CR[0].eq ) { return 0x8217F9C0;  }
		/* 8217F9ACh case   24:*/		return 0x8217F9B0;
		  /* 8217F9B0h */ case   25:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217F9B0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217F9B0h case   25:*/		return 0x8217F9B4;
		  /* 8217F9B4h */ case   26:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217F9B4h case   26:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217F9B4h case   26:*/		return 0x8217F9B8;
		  /* 8217F9B8h */ case   27:  		/* cmplwi CR6, R11, 10624 */
		/* 8217F9B8h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002980);
		/* 8217F9B8h case   27:*/		return 0x8217F9BC;
		  /* 8217F9BCh */ case   28:  		/* bc 12, CR6_EQ, 32 */
		/* 8217F9BCh case   28:*/		if ( regs.CR[6].eq ) { return 0x8217F9DC;  }
		/* 8217F9BCh case   28:*/		return 0x8217F9C0;
	}
	return 0x8217F9C0;
} // Block from 8217F94Ch-8217F9C0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 8217F9C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F9C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F9C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F9C0);
		  /* 8217F9C0h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217F9C0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217F9C0h case    0:*/		return 0x8217F9C4;
		  /* 8217F9C4h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 8217F9C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217F9C4h case    1:*/		return 0x8217F9C8;
		  /* 8217F9C8h */ case    2:  		/* rlwinm. R8, R11, 0, 31, 31 */
		/* 8217F9C8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R8,regs.R11);
		/* 8217F9C8h case    2:*/		return 0x8217F9CC;
		  /* 8217F9CCh */ case    3:  		/* bc 4, CR0_EQ, 1220 */
		/* 8217F9CCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217FE90;  }
		/* 8217F9CCh case    3:*/		return 0x8217F9D0;
		  /* 8217F9D0h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217F9D0h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217F9D0h case    4:*/		return 0x8217F9D4;
		  /* 8217F9D4h */ case    5:  		/* addic. R31, R11, -4 */
		/* 8217F9D4h case    5:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R11,0xFFFFFFFC);
		/* 8217F9D4h case    5:*/		return 0x8217F9D8;
		  /* 8217F9D8h */ case    6:  		/* bc 4, CR0_EQ, -88 */
		/* 8217F9D8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217F980;  }
		/* 8217F9D8h case    6:*/		return 0x8217F9DC;
	}
	return 0x8217F9DC;
} // Block from 8217F9C0h-8217F9DCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217F9DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217F9DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217F9DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217F9DC);
		  /* 8217F9DCh */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 8217F9DCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 8217F9DCh case    0:*/		return 0x8217F9E0;
		  /* 8217F9E0h */ case    1:  		/* bc 12, CR6_EQ, 1200 */
		/* 8217F9E0h case    1:*/		if ( regs.CR[6].eq ) { return 0x8217FE90;  }
		/* 8217F9E0h case    1:*/		return 0x8217F9E4;
		  /* 8217F9E4h */ case    2:  		/* lwz R11, <#[R31 + 48]> */
		/* 8217F9E4h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8217F9E4h case    2:*/		return 0x8217F9E8;
		  /* 8217F9E8h */ case    3:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8217F9E8h case    3:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8217F9E8h case    3:*/		return 0x8217F9EC;
		  /* 8217F9ECh */ case    4:  		/* bc 4, CR0_EQ, 312 */
		/* 8217F9ECh case    4:*/		if ( !regs.CR[0].eq ) { return 0x8217FB24;  }
		/* 8217F9ECh case    4:*/		return 0x8217F9F0;
		  /* 8217F9F0h */ case    5:  		/* mr R3, R18 */
		/* 8217F9F0h case    5:*/		regs.R3 = regs.R18;
		/* 8217F9F0h case    5:*/		return 0x8217F9F4;
		  /* 8217F9F4h */ case    6:  		/* mr R30, R31 */
		/* 8217F9F4h case    6:*/		regs.R30 = regs.R31;
		/* 8217F9F4h case    6:*/		return 0x8217F9F8;
		  /* 8217F9F8h */ case    7:  		/* bl -76480 */
		/* 8217F9F8h case    7:*/		regs.LR = 0x8217F9FC; return 0x8216CF38;
		/* 8217F9F8h case    7:*/		return 0x8217F9FC;
		  /* 8217F9FCh */ case    8:  		/* lwz R7, <#[R3 + 48]> */
		/* 8217F9FCh case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000030) );
		/* 8217F9FCh case    8:*/		return 0x8217FA00;
		  /* 8217FA00h */ case    9:  		/* mr R31, R3 */
		/* 8217FA00h case    9:*/		regs.R31 = regs.R3;
		/* 8217FA00h case    9:*/		return 0x8217FA04;
		  /* 8217FA04h */ case   10:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 8217FA04h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 8217FA04h case   10:*/		return 0x8217FA08;
		  /* 8217FA08h */ case   11:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 8217FA08h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 8217FA08h case   11:*/		return 0x8217FA0C;
		  /* 8217FA0Ch */ case   12:  		/* oris R7, R7, 32768 */
		/* 8217FA0Ch case   12:*/		cpu::op::oris<0>(regs,&regs.R7,regs.R7,0x8000);
		/* 8217FA0Ch case   12:*/		return 0x8217FA10;
		  /* 8217FA10h */ case   13:  		/* addi R8, R10, 4 */
		/* 8217FA10h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 8217FA10h case   13:*/		return 0x8217FA14;
		  /* 8217FA14h */ case   14:  		/* stw R7, <#[R31 + 48]> */
		/* 8217FA14h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R31 + 0x00000030) );
		/* 8217FA14h case   14:*/		return 0x8217FA18;
		  /* 8217FA18h */ case   15:  		/* addi R9, R11, 4 */
		/* 8217FA18h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 8217FA18h case   15:*/		return 0x8217FA1C;
		  /* 8217FA1Ch */ case   16:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217FA1Ch case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FA1Ch case   16:*/		return 0x8217FA20;
		  /* 8217FA20h */ case   17:  		/* mr R5, R18 */
		/* 8217FA20h case   17:*/		regs.R5 = regs.R18;
		/* 8217FA20h case   17:*/		return 0x8217FA24;
		  /* 8217FA24h */ case   18:  		/* stw R7, <#[R10 + 4]> */
		/* 8217FA24h case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 8217FA24h case   18:*/		return 0x8217FA28;
		  /* 8217FA28h */ case   19:  		/* mr R3, R30 */
		/* 8217FA28h case   19:*/		regs.R3 = regs.R30;
		/* 8217FA28h case   19:*/		return 0x8217FA2C;
		  /* 8217FA2Ch */ case   20:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217FA2Ch case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FA2Ch case   20:*/		return 0x8217FA30;
		  /* 8217FA30h */ case   21:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 8217FA30h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 8217FA30h case   21:*/		return 0x8217FA34;
		  /* 8217FA34h */ case   22:  		/* stw R8, <#[R7]> */
		/* 8217FA34h case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000000) );
		/* 8217FA34h case   22:*/		return 0x8217FA38;
		  /* 8217FA38h */ case   23:  		/* mr R4, R31 */
		/* 8217FA38h case   23:*/		regs.R4 = regs.R31;
		/* 8217FA38h case   23:*/		return 0x8217FA3C;
		  /* 8217FA3Ch */ case   24:  		/* stw R9, <#[R10]> */
		/* 8217FA3Ch case   24:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 8217FA3Ch case   24:*/		return 0x8217FA40;
		  /* 8217FA40h */ case   25:  		/* stw R10, <#[R11 + 4]> */
		/* 8217FA40h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FA40h case   25:*/		return 0x8217FA44;
		  /* 8217FA44h */ case   26:  		/* bl 721052 */
		/* 8217FA44h case   26:*/		regs.LR = 0x8217FA48; return 0x8222FAE0;
		/* 8217FA44h case   26:*/		return 0x8217FA48;
		  /* 8217FA48h */ case   27:  		/* addi R5, R31, 32 */
		/* 8217FA48h case   27:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R31,0x20);
		/* 8217FA48h case   27:*/		return 0x8217FA4C;
		  /* 8217FA4Ch */ case   28:  		/* li R8, 0 */
		/* 8217FA4Ch case   28:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217FA4Ch case   28:*/		return 0x8217FA50;
		  /* 8217FA50h */ case   29:  		/* li R7, 0 */
		/* 8217FA50h case   29:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217FA50h case   29:*/		return 0x8217FA54;
		  /* 8217FA54h */ case   30:  		/* li R6, 83 */
		/* 8217FA54h case   30:*/		cpu::op::li<0>(regs,&regs.R6,0x53);
		/* 8217FA54h case   30:*/		return 0x8217FA58;
		  /* 8217FA58h */ case   31:  		/* mr R4, R31 */
		/* 8217FA58h case   31:*/		regs.R4 = regs.R31;
		/* 8217FA58h case   31:*/		return 0x8217FA5C;
		  /* 8217FA5Ch */ case   32:  		/* mr R3, R18 */
		/* 8217FA5Ch case   32:*/		regs.R3 = regs.R18;
		/* 8217FA5Ch case   32:*/		return 0x8217FA60;
		  /* 8217FA60h */ case   33:  		/* bl 675640 */
		/* 8217FA60h case   33:*/		regs.LR = 0x8217FA64; return 0x82224998;
		/* 8217FA60h case   33:*/		return 0x8217FA64;
		  /* 8217FA64h */ case   34:  		/* lwz R11, <#[R30 + 36]> */
		/* 8217FA64h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8217FA64h case   34:*/		return 0x8217FA68;
		  /* 8217FA68h */ case   35:  		/* addi R5, R30, 32 */
		/* 8217FA68h case   35:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R30,0x20);
		/* 8217FA68h case   35:*/		return 0x8217FA6C;
		  /* 8217FA6Ch */ case   36:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217FA6Ch case   36:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217FA6Ch case   36:*/		return 0x8217FA70;
		  /* 8217FA70h */ case   37:  		/* bc 12, CR0_EQ, 12 */
		/* 8217FA70h case   37:*/		if ( regs.CR[0].eq ) { return 0x8217FA7C;  }
		/* 8217FA70h case   37:*/		return 0x8217FA74;
		  /* 8217FA74h */ case   38:  		/* li R29, 0 */
		/* 8217FA74h case   38:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 8217FA74h case   38:*/		return 0x8217FA78;
		  /* 8217FA78h */ case   39:  		/* b 16 */
		/* 8217FA78h case   39:*/		return 0x8217FA88;
		/* 8217FA78h case   39:*/		return 0x8217FA7C;
	}
	return 0x8217FA7C;
} // Block from 8217F9DCh-8217FA7Ch (40 instructions)

//////////////////////////////////////////////////////
// Block at 8217FA7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FA7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FA7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FA7C);
		  /* 8217FA7Ch */ case    0:  		/* lwz R11, <#[R5]> */
		/* 8217FA7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 8217FA7Ch case    0:*/		return 0x8217FA80;
		  /* 8217FA80h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217FA80h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217FA80h case    1:*/		return 0x8217FA84;
		  /* 8217FA84h */ case    2:  		/* addi R29, R11, -40 */
		/* 8217FA84h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFD8);
		/* 8217FA84h case    2:*/		return 0x8217FA88;
	}
	return 0x8217FA88;
} // Block from 8217FA7Ch-8217FA88h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217FA88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FA88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FA88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FA88);
		  /* 8217FA88h */ case    0:  		/* li R8, 0 */
		/* 8217FA88h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217FA88h case    0:*/		return 0x8217FA8C;
		  /* 8217FA8Ch */ case    1:  		/* li R7, 0 */
		/* 8217FA8Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217FA8Ch case    1:*/		return 0x8217FA90;
		  /* 8217FA90h */ case    2:  		/* li R6, 117 */
		/* 8217FA90h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 8217FA90h case    2:*/		return 0x8217FA94;
		  /* 8217FA94h */ case    3:  		/* mr R4, R30 */
		/* 8217FA94h case    3:*/		regs.R4 = regs.R30;
		/* 8217FA94h case    3:*/		return 0x8217FA98;
		  /* 8217FA98h */ case    4:  		/* mr R3, R18 */
		/* 8217FA98h case    4:*/		regs.R3 = regs.R18;
		/* 8217FA98h case    4:*/		return 0x8217FA9C;
		  /* 8217FA9Ch */ case    5:  		/* bl 675580 */
		/* 8217FA9Ch case    5:*/		regs.LR = 0x8217FAA0; return 0x82224998;
		/* 8217FA9Ch case    5:*/		return 0x8217FAA0;
		  /* 8217FAA0h */ case    6:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217FAA0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217FAA0h case    6:*/		return 0x8217FAA4;
		  /* 8217FAA4h */ case    7:  		/* mr R8, R29 */
		/* 8217FAA4h case    7:*/		regs.R8 = regs.R29;
		/* 8217FAA4h case    7:*/		return 0x8217FAA8;
		  /* 8217FAA8h */ case    8:  		/* oris R11, R11, 512 */
		/* 8217FAA8h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8217FAA8h case    8:*/		return 0x8217FAAC;
		  /* 8217FAACh */ case    9:  		/* stw R11, <#[R3 + 8]> */
		/* 8217FAACh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217FAACh case    9:*/		return 0x8217FAB0;
		  /* 8217FAB0h */ case   10:  		/* lwz R11, <#[R8]> */
		/* 8217FAB0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8217FAB0h case   10:*/		return 0x8217FAB4;
		  /* 8217FAB4h */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 8217FAB4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217FAB4h case   11:*/		return 0x8217FAB8;
		  /* 8217FAB8h */ case   12:  		/* bc 12, CR6_EQ, 80 */
		/* 8217FAB8h case   12:*/		if ( regs.CR[6].eq ) { return 0x8217FB08;  }
		/* 8217FAB8h case   12:*/		return 0x8217FABC;
		  /* 8217FABCh */ case   13:  		/* lwz R9, <#[R11 + 16]> */
		/* 8217FABCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 8217FABCh case   13:*/		return 0x8217FAC0;
		  /* 8217FAC0h */ case   14:  		/* lwz R10, <#[R9]> */
		/* 8217FAC0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8217FAC0h case   14:*/		return 0x8217FAC4;
		  /* 8217FAC4h */ case   15:  		/* b 12 */
		/* 8217FAC4h case   15:*/		return 0x8217FAD0;
		/* 8217FAC4h case   15:*/		return 0x8217FAC8;
		  /* 8217FAC8h */ case   16:  		/* addi R9, R10, 4 */
		/* 8217FAC8h case   16:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 8217FAC8h case   16:*/		return 0x8217FACC;
		  /* 8217FACCh */ case   17:  		/* lwz R10, <#[R10 + 4]> */
		/* 8217FACCh case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8217FACCh case   17:*/		return 0x8217FAD0;
	}
	return 0x8217FAD0;
} // Block from 8217FA88h-8217FAD0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 8217FAD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FAD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FAD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FAD0);
		  /* 8217FAD0h */ case    0:  		/* cmplw CR6, R10, R11 */
		/* 8217FAD0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8217FAD0h case    0:*/		return 0x8217FAD4;
		  /* 8217FAD4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8217FAD4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217FAC8;  }
		/* 8217FAD4h case    1:*/		return 0x8217FAD8;
		  /* 8217FAD8h */ case    2:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217FAD8h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FAD8h case    2:*/		return 0x8217FADC;
		  /* 8217FADCh */ case    3:  		/* addi R10, R11, 4 */
		/* 8217FADCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217FADCh case    3:*/		return 0x8217FAE0;
		  /* 8217FAE0h */ case    4:  		/* stw R7, <#[R9]> */
		/* 8217FAE0h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 8217FAE0h case    4:*/		return 0x8217FAE4;
		  /* 8217FAE4h */ case    5:  		/* lwz R9, <#[R3]> */
		/* 8217FAE4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8217FAE4h case    5:*/		return 0x8217FAE8;
		  /* 8217FAE8h */ case    6:  		/* stw R9, <#[R11 + 4]> */
		/* 8217FAE8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FAE8h case    6:*/		return 0x8217FAEC;
		  /* 8217FAECh */ case    7:  		/* stw R11, <#[R3]> */
		/* 8217FAECh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217FAECh case    7:*/		return 0x8217FAF0;
		  /* 8217FAF0h */ case    8:  		/* stw R3, <#[R11 + 16]> */
		/* 8217FAF0h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 8217FAF0h case    8:*/		return 0x8217FAF4;
		  /* 8217FAF4h */ case    9:  		/* lwz R9, <#[R8]> */
		/* 8217FAF4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 8217FAF4h case    9:*/		return 0x8217FAF8;
		  /* 8217FAF8h */ case   10:  		/* cmplw CR6, R9, R11 */
		/* 8217FAF8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8217FAF8h case   10:*/		return 0x8217FAFC;
		  /* 8217FAFCh */ case   11:  		/* bc 4, CR6_EQ, -76 */
		/* 8217FAFCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x8217FAB0;  }
		/* 8217FAFCh case   11:*/		return 0x8217FB00;
		  /* 8217FB00h */ case   12:  		/* mr R8, R10 */
		/* 8217FB00h case   12:*/		regs.R8 = regs.R10;
		/* 8217FB00h case   12:*/		return 0x8217FB04;
		  /* 8217FB04h */ case   13:  		/* b -84 */
		/* 8217FB04h case   13:*/		return 0x8217FAB0;
		/* 8217FB04h case   13:*/		return 0x8217FB08;
	}
	return 0x8217FB08;
} // Block from 8217FAD0h-8217FB08h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217FB08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FB08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FB08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FB08);
		  /* 8217FB08h */ case    0:  		/* li R6, 1 */
		/* 8217FB08h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217FB08h case    0:*/		return 0x8217FB0C;
		  /* 8217FB0Ch */ case    1:  		/* li R5, 0 */
		/* 8217FB0Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217FB0Ch case    1:*/		return 0x8217FB10;
		  /* 8217FB10h */ case    2:  		/* mr R4, R29 */
		/* 8217FB10h case    2:*/		regs.R4 = regs.R29;
		/* 8217FB10h case    2:*/		return 0x8217FB14;
		  /* 8217FB14h */ case    3:  		/* mr R3, R18 */
		/* 8217FB14h case    3:*/		regs.R3 = regs.R18;
		/* 8217FB14h case    3:*/		return 0x8217FB18;
		  /* 8217FB18h */ case    4:  		/* bl 702640 */
		/* 8217FB18h case    4:*/		regs.LR = 0x8217FB1C; return 0x8222B3C8;
		/* 8217FB18h case    4:*/		return 0x8217FB1C;
		  /* 8217FB1Ch */ case    5:  		/* mr R3, R18 */
		/* 8217FB1Ch case    5:*/		regs.R3 = regs.R18;
		/* 8217FB1Ch case    5:*/		return 0x8217FB20;
		  /* 8217FB20h */ case    6:  		/* bl 440320 */
		/* 8217FB20h case    6:*/		regs.LR = 0x8217FB24; return 0x821EB320;
		/* 8217FB20h case    6:*/		return 0x8217FB24;
	}
	return 0x8217FB24;
} // Block from 8217FB08h-8217FB24h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217FB24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FB24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FB24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FB24);
		  /* 8217FB24h */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 8217FB24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 8217FB24h case    0:*/		return 0x8217FB28;
		  /* 8217FB28h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 8217FB28h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217FB28h case    1:*/		return 0x8217FB2C;
		  /* 8217FB2Ch */ case    2:  		/* bc 12, CR6_EQ, 32 */
		/* 8217FB2Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x8217FB4C;  }
		/* 8217FB2Ch case    2:*/		return 0x8217FB30;
		  /* 8217FB30h */ case    3:  		/* lwz R10, <#[R11]> */
		/* 8217FB30h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 8217FB30h case    3:*/		return 0x8217FB34;
		  /* 8217FB34h */ case    4:  		/* cmplw CR6, R31, R10 */
		/* 8217FB34h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R10);
		/* 8217FB34h case    4:*/		return 0x8217FB38;
		  /* 8217FB38h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 8217FB38h case    5:*/		if ( regs.CR[6].eq ) { return 0x8217FB44;  }
		/* 8217FB38h case    5:*/		return 0x8217FB3C;
		  /* 8217FB3Ch */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 8217FB3Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 8217FB3Ch case    6:*/		return 0x8217FB40;
		  /* 8217FB40h */ case    7:  		/* b -24 */
		/* 8217FB40h case    7:*/		return 0x8217FB28;
		/* 8217FB40h case    7:*/		return 0x8217FB44;
	}
	return 0x8217FB44;
} // Block from 8217FB24h-8217FB44h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217FB44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FB44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FB44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FB44);
		  /* 8217FB44h */ case    0:  		/* li R11, 1 */
		/* 8217FB44h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8217FB44h case    0:*/		return 0x8217FB48;
		  /* 8217FB48h */ case    1:  		/* b 8 */
		/* 8217FB48h case    1:*/		return 0x8217FB50;
		/* 8217FB48h case    1:*/		return 0x8217FB4C;
	}
	return 0x8217FB4C;
} // Block from 8217FB44h-8217FB4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217FB4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FB4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FB4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FB4C);
		  /* 8217FB4Ch */ case    0:  		/* li R11, 0 */
		/* 8217FB4Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217FB4Ch case    0:*/		return 0x8217FB50;
	}
	return 0x8217FB50;
} // Block from 8217FB4Ch-8217FB50h (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217FB50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FB50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FB50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FB50);
		  /* 8217FB50h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217FB50h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217FB50h case    0:*/		return 0x8217FB54;
		  /* 8217FB54h */ case    1:  		/* bc 4, CR0_EQ, 192 */
		/* 8217FB54h case    1:*/		if ( !regs.CR[0].eq ) { return 0x8217FC14;  }
		/* 8217FB54h case    1:*/		return 0x8217FB58;
		  /* 8217FB58h */ case    2:  		/* mr R5, R18 */
		/* 8217FB58h case    2:*/		regs.R5 = regs.R18;
		/* 8217FB58h case    2:*/		return 0x8217FB5C;
		  /* 8217FB5Ch */ case    3:  		/* mr R4, R31 */
		/* 8217FB5Ch case    3:*/		regs.R4 = regs.R31;
		/* 8217FB5Ch case    3:*/		return 0x8217FB60;
		  /* 8217FB60h */ case    4:  		/* mr R3, R28 */
		/* 8217FB60h case    4:*/		regs.R3 = regs.R28;
		/* 8217FB60h case    4:*/		return 0x8217FB64;
		  /* 8217FB64h */ case    5:  		/* bl 720764 */
		/* 8217FB64h case    5:*/		regs.LR = 0x8217FB68; return 0x8222FAE0;
		/* 8217FB64h case    5:*/		return 0x8217FB68;
		  /* 8217FB68h */ case    6:  		/* lwz R11, <#[R26]> */
		/* 8217FB68h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 8217FB68h case    6:*/		return 0x8217FB6C;
		  /* 8217FB6Ch */ case    7:  		/* cmpwi CR6, R11, 0 */
		/* 8217FB6Ch case    7:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 8217FB6Ch case    7:*/		return 0x8217FB70;
		  /* 8217FB70h */ case    8:  		/* bc 12, CR6_EQ, 136 */
		/* 8217FB70h case    8:*/		if ( regs.CR[6].eq ) { return 0x8217FBF8;  }
		/* 8217FB70h case    8:*/		return 0x8217FB74;
		  /* 8217FB74h */ case    9:  		/* li R8, 0 */
		/* 8217FB74h case    9:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 8217FB74h case    9:*/		return 0x8217FB78;
		  /* 8217FB78h */ case   10:  		/* li R7, 0 */
		/* 8217FB78h case   10:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 8217FB78h case   10:*/		return 0x8217FB7C;
		  /* 8217FB7Ch */ case   11:  		/* li R6, 117 */
		/* 8217FB7Ch case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 8217FB7Ch case   11:*/		return 0x8217FB80;
		  /* 8217FB80h */ case   12:  		/* mr R5, R27 */
		/* 8217FB80h case   12:*/		regs.R5 = regs.R27;
		/* 8217FB80h case   12:*/		return 0x8217FB84;
		  /* 8217FB84h */ case   13:  		/* mr R4, R28 */
		/* 8217FB84h case   13:*/		regs.R4 = regs.R28;
		/* 8217FB84h case   13:*/		return 0x8217FB88;
		  /* 8217FB88h */ case   14:  		/* mr R3, R18 */
		/* 8217FB88h case   14:*/		regs.R3 = regs.R18;
		/* 8217FB88h case   14:*/		return 0x8217FB8C;
		  /* 8217FB8Ch */ case   15:  		/* bl 675340 */
		/* 8217FB8Ch case   15:*/		regs.LR = 0x8217FB90; return 0x82224998;
		/* 8217FB8Ch case   15:*/		return 0x8217FB90;
		  /* 8217FB90h */ case   16:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217FB90h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217FB90h case   16:*/		return 0x8217FB94;
		  /* 8217FB94h */ case   17:  		/* mr R8, R26 */
		/* 8217FB94h case   17:*/		regs.R8 = regs.R26;
		/* 8217FB94h case   17:*/		return 0x8217FB98;
		  /* 8217FB98h */ case   18:  		/* oris R11, R11, 512 */
		/* 8217FB98h case   18:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x200);
		/* 8217FB98h case   18:*/		return 0x8217FB9C;
		  /* 8217FB9Ch */ case   19:  		/* stw R11, <#[R3 + 8]> */
		/* 8217FB9Ch case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217FB9Ch case   19:*/		return 0x8217FBA0;
		  /* 8217FBA0h */ case   20:  		/* lwz R11, <#[R8]> */
		/* 8217FBA0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8217FBA0h case   20:*/		return 0x8217FBA4;
		  /* 8217FBA4h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 8217FBA4h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217FBA4h case   21:*/		return 0x8217FBA8;
		  /* 8217FBA8h */ case   22:  		/* bc 12, CR6_EQ, 80 */
		/* 8217FBA8h case   22:*/		if ( regs.CR[6].eq ) { return 0x8217FBF8;  }
		/* 8217FBA8h case   22:*/		return 0x8217FBAC;
		  /* 8217FBACh */ case   23:  		/* lwz R9, <#[R11 + 16]> */
		/* 8217FBACh case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 8217FBACh case   23:*/		return 0x8217FBB0;
		  /* 8217FBB0h */ case   24:  		/* lwz R10, <#[R9]> */
		/* 8217FBB0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 8217FBB0h case   24:*/		return 0x8217FBB4;
		  /* 8217FBB4h */ case   25:  		/* b 12 */
		/* 8217FBB4h case   25:*/		return 0x8217FBC0;
		/* 8217FBB4h case   25:*/		return 0x8217FBB8;
		  /* 8217FBB8h */ case   26:  		/* addi R9, R10, 4 */
		/* 8217FBB8h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 8217FBB8h case   26:*/		return 0x8217FBBC;
		  /* 8217FBBCh */ case   27:  		/* lwz R10, <#[R10 + 4]> */
		/* 8217FBBCh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 8217FBBCh case   27:*/		return 0x8217FBC0;
	}
	return 0x8217FBC0;
} // Block from 8217FB50h-8217FBC0h (28 instructions)

//////////////////////////////////////////////////////
// Block at 8217FBC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FBC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FBC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FBC0);
		  /* 8217FBC0h */ case    0:  		/* cmplw CR6, R10, R11 */
		/* 8217FBC0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 8217FBC0h case    0:*/		return 0x8217FBC4;
		  /* 8217FBC4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 8217FBC4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8217FBB8;  }
		/* 8217FBC4h case    1:*/		return 0x8217FBC8;
		  /* 8217FBC8h */ case    2:  		/* lwz R7, <#[R11 + 4]> */
		/* 8217FBC8h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FBC8h case    2:*/		return 0x8217FBCC;
		  /* 8217FBCCh */ case    3:  		/* addi R10, R11, 4 */
		/* 8217FBCCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 8217FBCCh case    3:*/		return 0x8217FBD0;
		  /* 8217FBD0h */ case    4:  		/* stw R7, <#[R9]> */
		/* 8217FBD0h case    4:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 8217FBD0h case    4:*/		return 0x8217FBD4;
		  /* 8217FBD4h */ case    5:  		/* lwz R9, <#[R3]> */
		/* 8217FBD4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 8217FBD4h case    5:*/		return 0x8217FBD8;
		  /* 8217FBD8h */ case    6:  		/* stw R9, <#[R11 + 4]> */
		/* 8217FBD8h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FBD8h case    6:*/		return 0x8217FBDC;
		  /* 8217FBDCh */ case    7:  		/* stw R11, <#[R3]> */
		/* 8217FBDCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 8217FBDCh case    7:*/		return 0x8217FBE0;
		  /* 8217FBE0h */ case    8:  		/* stw R3, <#[R11 + 16]> */
		/* 8217FBE0h case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + 0x00000010) );
		/* 8217FBE0h case    8:*/		return 0x8217FBE4;
		  /* 8217FBE4h */ case    9:  		/* lwz R9, <#[R8]> */
		/* 8217FBE4h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000000) );
		/* 8217FBE4h case    9:*/		return 0x8217FBE8;
		  /* 8217FBE8h */ case   10:  		/* cmplw CR6, R9, R11 */
		/* 8217FBE8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 8217FBE8h case   10:*/		return 0x8217FBEC;
		  /* 8217FBECh */ case   11:  		/* bc 4, CR6_EQ, -76 */
		/* 8217FBECh case   11:*/		if ( !regs.CR[6].eq ) { return 0x8217FBA0;  }
		/* 8217FBECh case   11:*/		return 0x8217FBF0;
		  /* 8217FBF0h */ case   12:  		/* mr R8, R10 */
		/* 8217FBF0h case   12:*/		regs.R8 = regs.R10;
		/* 8217FBF0h case   12:*/		return 0x8217FBF4;
		  /* 8217FBF4h */ case   13:  		/* b -84 */
		/* 8217FBF4h case   13:*/		return 0x8217FBA0;
		/* 8217FBF4h case   13:*/		return 0x8217FBF8;
	}
	return 0x8217FBF8;
} // Block from 8217FBC0h-8217FBF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 8217FBF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FBF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FBF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FBF8);
		  /* 8217FBF8h */ case    0:  		/* li R6, 1 */
		/* 8217FBF8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217FBF8h case    0:*/		return 0x8217FBFC;
		  /* 8217FBFCh */ case    1:  		/* li R5, 0 */
		/* 8217FBFCh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8217FBFCh case    1:*/		return 0x8217FC00;
		  /* 8217FC00h */ case    2:  		/* mr R4, R26 */
		/* 8217FC00h case    2:*/		regs.R4 = regs.R26;
		/* 8217FC00h case    2:*/		return 0x8217FC04;
		  /* 8217FC04h */ case    3:  		/* mr R3, R18 */
		/* 8217FC04h case    3:*/		regs.R3 = regs.R18;
		/* 8217FC04h case    3:*/		return 0x8217FC08;
		  /* 8217FC08h */ case    4:  		/* bl 702400 */
		/* 8217FC08h case    4:*/		regs.LR = 0x8217FC0C; return 0x8222B3C8;
		/* 8217FC08h case    4:*/		return 0x8217FC0C;
		  /* 8217FC0Ch */ case    5:  		/* mr R3, R18 */
		/* 8217FC0Ch case    5:*/		regs.R3 = regs.R18;
		/* 8217FC0Ch case    5:*/		return 0x8217FC10;
		  /* 8217FC10h */ case    6:  		/* bl 440080 */
		/* 8217FC10h case    6:*/		regs.LR = 0x8217FC14; return 0x821EB320;
		/* 8217FC10h case    6:*/		return 0x8217FC14;
	}
	return 0x8217FC14;
} // Block from 8217FBF8h-8217FC14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217FC14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FC14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FC14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FC14);
		  /* 8217FC14h */ case    0:  		/* rlwinm R11, R28, 0, 0, 30 */
		/* 8217FC14h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R28);
		/* 8217FC14h case    0:*/		return 0x8217FC18;
		  /* 8217FC18h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 8217FC18h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217FC18h case    1:*/		return 0x8217FC1C;
		  /* 8217FC1Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217FC1Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217FC1Ch case    2:*/		return 0x8217FC20;
		  /* 8217FC20h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217FC20h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217FC30;  }
		/* 8217FC20h case    3:*/		return 0x8217FC24;
	}
	return 0x8217FC24;
} // Block from 8217FC14h-8217FC24h (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217FC24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FC24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FC24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FC24);
		  /* 8217FC24h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217FC24h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217FC24h case    0:*/		return 0x8217FC28;
		  /* 8217FC28h */ case    1:  		/* addic. R28, R11, -4 */
		/* 8217FC28h case    1:*/		cpu::op::addic<1>(regs,&regs.R28,regs.R11,0xFFFFFFFC);
		/* 8217FC28h case    1:*/		return 0x8217FC2C;
		  /* 8217FC2Ch */ case    2:  		/* bc 4, CR0_EQ, -1132 */
		/* 8217FC2Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217F7C0;  }
		/* 8217FC2Ch case    2:*/		return 0x8217FC30;
	}
	return 0x8217FC30;
} // Block from 8217FC24h-8217FC30h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217FC30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FC30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FC30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FC30);
		  /* 8217FC30h */ case    0:  		/* lwz R11, <#[R18 + 40]> */
		/* 8217FC30h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000028) );
		/* 8217FC30h case    0:*/		return 0x8217FC34;
		  /* 8217FC34h */ case    1:  		/* andi. R11, R11, 260 */
		/* 8217FC34h case    1:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R11,0x104);
		/* 8217FC34h case    1:*/		return 0x8217FC38;
		  /* 8217FC38h */ case    2:  		/* cmplwi CR0, R11, 0 */
		/* 8217FC38h case    2:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217FC38h case    2:*/		return 0x8217FC3C;
		  /* 8217FC3Ch */ case    3:  		/* bc 12, CR0_EQ, 8340 */
		/* 8217FC3Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x82181CD0;  }
		/* 8217FC3Ch case    3:*/		return 0x8217FC40;
		  /* 8217FC40h */ case    4:  		/* lwz R11, <#[R18 + 4]> */
		/* 8217FC40h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 8217FC40h case    4:*/		return 0x8217FC44;
		  /* 8217FC44h */ case    5:  		/* li R14, 2 */
		/* 8217FC44h case    5:*/		cpu::op::li<0>(regs,&regs.R14,0x2);
		/* 8217FC44h case    5:*/		return 0x8217FC48;
		  /* 8217FC48h */ case    6:  		/* li R15, -1 */
		/* 8217FC48h case    6:*/		cpu::op::li<0>(regs,&regs.R15,0xFFFFFFFF);
		/* 8217FC48h case    6:*/		return 0x8217FC4C;
		  /* 8217FC4Ch */ case    7:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217FC4Ch case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217FC4Ch case    7:*/		return 0x8217FC50;
		  /* 8217FC50h */ case    8:  		/* bc 4, CR0_EQ, 648 */
		/* 8217FC50h case    8:*/		if ( !regs.CR[0].eq ) { return 0x8217FED8;  }
		/* 8217FC50h case    8:*/		return 0x8217FC54;
		  /* 8217FC54h */ case    9:  		/* mr R29, R11 */
		/* 8217FC54h case    9:*/		regs.R29 = regs.R11;
		/* 8217FC54h case    9:*/		return 0x8217FC58;
		  /* 8217FC58h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 8217FC58h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217FC58h case   10:*/		return 0x8217FC5C;
		  /* 8217FC5Ch */ case   11:  		/* bc 12, CR0_EQ, 636 */
		/* 8217FC5Ch case   11:*/		if ( regs.CR[0].eq ) { return 0x8217FED8;  }
		/* 8217FC5Ch case   11:*/		return 0x8217FC60;
		  /* 8217FC60h */ case   12:  		/* li R24, 1 */
		/* 8217FC60h case   12:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8217FC60h case   12:*/		return 0x8217FC64;
		  /* 8217FC64h */ case   13:  		/* lwz R11, <#[R29 + 40]> */
		/* 8217FC64h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000028) );
		/* 8217FC64h case   13:*/		return 0x8217FC68;
		  /* 8217FC68h */ case   14:  		/* lwz R11, <#[R11]> */
		/* 8217FC68h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217FC68h case   14:*/		return 0x8217FC6C;
		  /* 8217FC6Ch */ case   15:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 8217FC6Ch case   15:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 8217FC6Ch case   15:*/		return 0x8217FC70;
		  /* 8217FC70h */ case   16:  		/* bc 12, CR0_EQ, 584 */
		/* 8217FC70h case   16:*/		if ( regs.CR[0].eq ) { return 0x8217FEB8;  }
		/* 8217FC70h case   16:*/		return 0x8217FC74;
		  /* 8217FC74h */ case   17:  		/* mr R4, R29 */
		/* 8217FC74h case   17:*/		regs.R4 = regs.R29;
		/* 8217FC74h case   17:*/		return 0x8217FC78;
		  /* 8217FC78h */ case   18:  		/* mr R3, R18 */
		/* 8217FC78h case   18:*/		regs.R3 = regs.R18;
		/* 8217FC78h case   18:*/		return 0x8217FC7C;
		  /* 8217FC7Ch */ case   19:  		/* bl -20268 */
		/* 8217FC7Ch case   19:*/		regs.LR = 0x8217FC80; return 0x8217AD50;
		/* 8217FC7Ch case   19:*/		return 0x8217FC80;
		  /* 8217FC80h */ case   20:  		/* or. R26, R3, R3 */
		/* 8217FC80h case   20:*/		cpu::op::or<1>(regs,&regs.R26,regs.R3,regs.R3);
		/* 8217FC80h case   20:*/		return 0x8217FC84;
		  /* 8217FC84h */ case   21:  		/* bc 12, CR0_EQ, 564 */
		/* 8217FC84h case   21:*/		if ( regs.CR[0].eq ) { return 0x8217FEB8;  }
		/* 8217FC84h case   21:*/		return 0x8217FC88;
		  /* 8217FC88h */ case   22:  		/* lwz R8, <#[R26 + 40]> */
		/* 8217FC88h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R26 + 0x00000028) );
		/* 8217FC88h case   22:*/		return 0x8217FC8C;
		  /* 8217FC8Ch */ case   23:  		/* lwz R11, <#[R29 + 48]> */
		/* 8217FC8Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8217FC8Ch case   23:*/		return 0x8217FC90;
		  /* 8217FC90h */ case   24:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217FC90h case   24:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217FC90h case   24:*/		return 0x8217FC94;
		  /* 8217FC94h */ case   25:  		/* lwz R11, <#[R8]> */
		/* 8217FC94h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 8217FC94h case   25:*/		return 0x8217FC98;
		  /* 8217FC98h */ case   26:  		/* rlwinm R10, R9, 28, 5, 31 */
		/* 8217FC98h case   26:*/		cpu::op::rlwinm<0,28,5,31>(regs,&regs.R10,regs.R9);
		/* 8217FC98h case   26:*/		return 0x8217FC9C;
		  /* 8217FC9Ch */ case   27:  		/* rlwinm R7, R9, 1, 27, 30 */
		/* 8217FC9Ch case   27:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R7,regs.R9);
		/* 8217FC9Ch case   27:*/		return 0x8217FCA0;
		  /* 8217FCA0h */ case   28:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 8217FCA0h case   28:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 8217FCA0h case   28:*/		return 0x8217FCA4;
		  /* 8217FCA4h */ case   29:  		/* addi R10, R10, 1 */
		/* 8217FCA4h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 8217FCA4h case   29:*/		return 0x8217FCA8;
		  /* 8217FCA8h */ case   30:  		/* addi R6, R11, 31 */
		/* 8217FCA8h case   30:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0x1F);
		/* 8217FCA8h case   30:*/		return 0x8217FCAC;
		  /* 8217FCACh */ case   31:  		/* rlwinm R11, R9, 1, 0, 30 */
		/* 8217FCACh case   31:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R9);
		/* 8217FCACh case   31:*/		return 0x8217FCB0;
		  /* 8217FCB0h */ case   32:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 8217FCB0h case   32:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 8217FCB0h case   32:*/		return 0x8217FCB4;
		  /* 8217FCB4h */ case   33:  		/* rlwinm R9, R6, 29, 3, 29 */
		/* 8217FCB4h case   33:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R6);
		/* 8217FCB4h case   33:*/		return 0x8217FCB8;
		  /* 8217FCB8h */ case   34:  		/* addi R11, R11, 1 */
		/* 8217FCB8h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217FCB8h case   34:*/		return 0x8217FCBC;
		  /* 8217FCBCh */ case   35:  		/* add R10, R9, R10 */
		/* 8217FCBCh case   35:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 8217FCBCh case   35:*/		return 0x8217FCC0;
		  /* 8217FCC0h */ case   36:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 8217FCC0h case   36:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 8217FCC0h case   36:*/		return 0x8217FCC4;
		  /* 8217FCC4h */ case   37:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 8217FCC4h case   37:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 8217FCC4h case   37:*/		return 0x8217FCC8;
		  /* 8217FCC8h */ case   38:  		/* slw R11, R14, R11 */
		/* 8217FCC8h case   38:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R14,regs.R11);
		/* 8217FCC8h case   38:*/		return 0x8217FCCC;
		  /* 8217FCCCh */ case   39:  		/* lwzx R10, <#[R10 + R8]> */
		/* 8217FCCCh case   39:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R8 + 0x00000000) );
		/* 8217FCCCh case   39:*/		return 0x8217FCD0;
		  /* 8217FCD0h */ case   40:  		/* addi R11, R11, -1 */
		/* 8217FCD0h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 8217FCD0h case   40:*/		return 0x8217FCD4;
		  /* 8217FCD4h */ case   41:  		/* slw R9, R15, R7 */
		/* 8217FCD4h case   41:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R15,regs.R7);
		/* 8217FCD4h case   41:*/		return 0x8217FCD8;
		  /* 8217FCD8h */ case   42:  		/* and R11, R10, R11 */
		/* 8217FCD8h case   42:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217FCD8h case   42:*/		return 0x8217FCDC;
		  /* 8217FCDCh */ case   43:  		/* and R11, R11, R9 */
		/* 8217FCDCh case   43:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 8217FCDCh case   43:*/		return 0x8217FCE0;
		  /* 8217FCE0h */ case   44:  		/* srw. R11, R11, R7 */
		/* 8217FCE0h case   44:*/		cpu::op::srw<1>(regs,&regs.R11,regs.R11,regs.R7);
		/* 8217FCE0h case   44:*/		return 0x8217FCE4;
		  /* 8217FCE4h */ case   45:  		/* bc 12, CR0_EQ, 468 */
		/* 8217FCE4h case   45:*/		if ( regs.CR[0].eq ) { return 0x8217FEB8;  }
		/* 8217FCE4h case   45:*/		return 0x8217FCE8;
		  /* 8217FCE8h */ case   46:  		/* cmplwi CR6, R11, 3 */
		/* 8217FCE8h case   46:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 8217FCE8h case   46:*/		return 0x8217FCEC;
		  /* 8217FCECh */ case   47:  		/* bc 12, CR6_EQ, 460 */
		/* 8217FCECh case   47:*/		if ( regs.CR[6].eq ) { return 0x8217FEB8;  }
		/* 8217FCECh case   47:*/		return 0x8217FCF0;
		  /* 8217FCF0h */ case   48:  		/* lwz R11, <#[R18 + 44]> */
		/* 8217FCF0h case   48:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000002C) );
		/* 8217FCF0h case   48:*/		return 0x8217FCF4;
		  /* 8217FCF4h */ case   49:  		/* mr R31, R29 */
		/* 8217FCF4h case   49:*/		regs.R31 = regs.R29;
		/* 8217FCF4h case   49:*/		return 0x8217FCF8;
		  /* 8217FCF8h */ case   50:  		/* ori R11, R11, 32768 */
		/* 8217FCF8h case   50:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x8000);
		/* 8217FCF8h case   50:*/		return 0x8217FCFC;
		  /* 8217FCFCh */ case   51:  		/* stw R11, <#[R18 + 44]> */
		/* 8217FCFCh case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R18 + 0x0000002C) );
		/* 8217FCFCh case   51:*/		return 0x8217FD00;
		  /* 8217FD00h */ case   52:  		/* cmplw CR6, R31, R29 */
		/* 8217FD00h case   52:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8217FD00h case   52:*/		return 0x8217FD04;
		  /* 8217FD04h */ case   53:  		/* bc 12, CR6_EQ, 68 */
		/* 8217FD04h case   53:*/		if ( regs.CR[6].eq ) { return 0x8217FD48;  }
		/* 8217FD04h case   53:*/		return 0x8217FD08;
		  /* 8217FD08h */ case   54:  		/* lwz R9, <#[R31 + 40]> */
		/* 8217FD08h case   54:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000028) );
		/* 8217FD08h case   54:*/		return 0x8217FD0C;
		  /* 8217FD0Ch */ case   55:  		/* lwz R11, <#[R29 + 48]> */
		/* 8217FD0Ch case   55:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000030) );
		/* 8217FD0Ch case   55:*/		return 0x8217FD10;
		  /* 8217FD10h */ case   56:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 8217FD10h case   56:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 8217FD10h case   56:*/		return 0x8217FD14;
		  /* 8217FD14h */ case   57:  		/* lwz R8, <#[R9]> */
		/* 8217FD14h case   57:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 8217FD14h case   57:*/		return 0x8217FD18;
		  /* 8217FD18h */ case   58:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 8217FD18h case   58:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 8217FD18h case   58:*/		return 0x8217FD1C;
		  /* 8217FD1Ch */ case   59:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 8217FD1Ch case   59:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 8217FD1Ch case   59:*/		return 0x8217FD20;
		  /* 8217FD20h */ case   60:  		/* rlwinm R10, R8, 0, 13, 31 */
		/* 8217FD20h case   60:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R8);
		/* 8217FD20h case   60:*/		return 0x8217FD24;
		  /* 8217FD24h */ case   61:  		/* addi R11, R11, 1 */
		/* 8217FD24h case   61:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217FD24h case   61:*/		return 0x8217FD28;
		  /* 8217FD28h */ case   62:  		/* addi R10, R10, 31 */
		/* 8217FD28h case   62:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 8217FD28h case   62:*/		return 0x8217FD2C;
		  /* 8217FD2Ch */ case   63:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217FD2Ch case   63:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217FD2Ch case   63:*/		return 0x8217FD30;
		  /* 8217FD30h */ case   64:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 8217FD30h case   64:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 8217FD30h case   64:*/		return 0x8217FD34;
		  /* 8217FD34h */ case   65:  		/* slw R8, R24, R7 */
		/* 8217FD34h case   65:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R24,regs.R7);
		/* 8217FD34h case   65:*/		return 0x8217FD38;
		  /* 8217FD38h */ case   66:  		/* add R11, R10, R11 */
		/* 8217FD38h case   66:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217FD38h case   66:*/		return 0x8217FD3C;
		  /* 8217FD3Ch */ case   67:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8217FD3Ch case   67:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8217FD3Ch case   67:*/		return 0x8217FD40;
		  /* 8217FD40h */ case   68:  		/* and. R11, R11, R8 */
		/* 8217FD40h case   68:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 8217FD40h case   68:*/		return 0x8217FD44;
		  /* 8217FD44h */ case   69:  		/* bc 12, CR0_EQ, 372 */
		/* 8217FD44h case   69:*/		if ( regs.CR[0].eq ) { return 0x8217FEB8;  }
		/* 8217FD44h case   69:*/		return 0x8217FD48;
	}
	return 0x8217FD48;
} // Block from 8217FC30h-8217FD48h (70 instructions)

//////////////////////////////////////////////////////
// Block at 8217FD48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FD48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FD48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FD48);
		  /* 8217FD48h */ case    0:  		/* cmplw CR6, R31, R26 */
		/* 8217FD48h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R26);
		/* 8217FD48h case    0:*/		return 0x8217FD4C;
		  /* 8217FD4Ch */ case    1:  		/* bc 12, CR6_EQ, 336 */
		/* 8217FD4Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x8217FE9C;  }
		/* 8217FD4Ch case    1:*/		return 0x8217FD50;
		  /* 8217FD50h */ case    2:  		/* mr R4, R31 */
		/* 8217FD50h case    2:*/		regs.R4 = regs.R31;
		/* 8217FD50h case    2:*/		return 0x8217FD54;
		  /* 8217FD54h */ case    3:  		/* mr R3, R18 */
		/* 8217FD54h case    3:*/		regs.R3 = regs.R18;
		/* 8217FD54h case    3:*/		return 0x8217FD58;
		  /* 8217FD58h */ case    4:  		/* bl -29928 */
		/* 8217FD58h case    4:*/		regs.LR = 0x8217FD5C; return 0x82178870;
		/* 8217FD58h case    4:*/		return 0x8217FD5C;
		  /* 8217FD5Ch */ case    5:  		/* cmplwi CR0, R3, 0 */
		/* 8217FD5Ch case    5:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 8217FD5Ch case    5:*/		return 0x8217FD60;
		  /* 8217FD60h */ case    6:  		/* bc 12, CR0_EQ, 316 */
		/* 8217FD60h case    6:*/		if ( regs.CR[0].eq ) { return 0x8217FE9C;  }
		/* 8217FD60h case    6:*/		return 0x8217FD64;
		  /* 8217FD64h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 8217FD64h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 8217FD64h case    7:*/		return 0x8217FD68;
		  /* 8217FD68h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 8217FD68h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 8217FD68h case    8:*/		return 0x8217FD6C;
		  /* 8217FD6Ch */ case    9:  		/* cmplwi CR6, R11, 10880 */
		/* 8217FD6Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00002A80);
		/* 8217FD6Ch case    9:*/		return 0x8217FD70;
		  /* 8217FD70h */ case   10:  		/* bc 12, CR6_EQ, 300 */
		/* 8217FD70h case   10:*/		if ( regs.CR[6].eq ) { return 0x8217FE9C;  }
		/* 8217FD70h case   10:*/		return 0x8217FD74;
		  /* 8217FD74h */ case   11:  		/* lwz R28, <#[R31 + 12]> */
		/* 8217FD74h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 8217FD74h case   11:*/		return 0x8217FD78;
		  /* 8217FD78h */ case   12:  		/* addi R27, R31, 12 */
		/* 8217FD78h case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R31,0xC);
		/* 8217FD78h case   12:*/		return 0x8217FD7C;
		  /* 8217FD7Ch */ case   13:  		/* cmplwi CR6, R28, 0 */
		/* 8217FD7Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 8217FD7Ch case   13:*/		return 0x8217FD80;
		  /* 8217FD80h */ case   14:  		/* bc 12, CR6_EQ, 284 */
		/* 8217FD80h case   14:*/		if ( regs.CR[6].eq ) { return 0x8217FE9C;  }
		/* 8217FD80h case   14:*/		return 0x8217FD84;
		  /* 8217FD84h */ case   15:  		/* lwz R30, <#[R28]> */
		/* 8217FD84h case   15:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R28 + 0x00000000) );
		/* 8217FD84h case   15:*/		return 0x8217FD88;
		  /* 8217FD88h */ case   16:  		/* cmplw CR6, R30, R26 */
		/* 8217FD88h case   16:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R26);
		/* 8217FD88h case   16:*/		return 0x8217FD8C;
		  /* 8217FD8Ch */ case   17:  		/* bc 12, CR6_EQ, 224 */
		/* 8217FD8Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8217FE6C;  }
		/* 8217FD8Ch case   17:*/		return 0x8217FD90;
		  /* 8217FD90h */ case   18:  		/* lwz R11, <#[R30 + 48]> */
		/* 8217FD90h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000030) );
		/* 8217FD90h case   18:*/		return 0x8217FD94;
		  /* 8217FD94h */ case   19:  		/* lwz R10, <#[R29 + 40]> */
		/* 8217FD94h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000028) );
		/* 8217FD94h case   19:*/		return 0x8217FD98;
		  /* 8217FD98h */ case   20:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 8217FD98h case   20:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 8217FD98h case   20:*/		return 0x8217FD9C;
		  /* 8217FD9Ch */ case   21:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8217FD9Ch case   21:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8217FD9Ch case   21:*/		return 0x8217FDA0;
		  /* 8217FDA0h */ case   22:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 8217FDA0h case   22:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 8217FDA0h case   22:*/		return 0x8217FDA4;
		  /* 8217FDA4h */ case   23:  		/* addi R11, R11, 1 */
		/* 8217FDA4h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 8217FDA4h case   23:*/		return 0x8217FDA8;
		  /* 8217FDA8h */ case   24:  		/* slw R9, R24, R9 */
		/* 8217FDA8h case   24:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R24,regs.R9);
		/* 8217FDA8h case   24:*/		return 0x8217FDAC;
		  /* 8217FDACh */ case   25:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8217FDACh case   25:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8217FDACh case   25:*/		return 0x8217FDB0;
		  /* 8217FDB0h */ case   26:  		/* lwzx R11, <#[R11 + R10]> */
		/* 8217FDB0h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 8217FDB0h case   26:*/		return 0x8217FDB4;
		  /* 8217FDB4h */ case   27:  		/* and. R11, R9, R11 */
		/* 8217FDB4h case   27:*/		cpu::op::and<1>(regs,&regs.R11,regs.R9,regs.R11);
		/* 8217FDB4h case   27:*/		return 0x8217FDB8;
		  /* 8217FDB8h */ case   28:  		/* bc 4, CR0_EQ, 180 */
		/* 8217FDB8h case   28:*/		if ( !regs.CR[0].eq ) { return 0x8217FE6C;  }
		/* 8217FDB8h case   28:*/		return 0x8217FDBC;
		  /* 8217FDBCh */ case   29:  		/* lwz R11, <#[R30 + 8]> */
		/* 8217FDBCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 8217FDBCh case   29:*/		return 0x8217FDC0;
		  /* 8217FDC0h */ case   30:  		/* cmplwi CR6, R11, 0 */
		/* 8217FDC0h case   30:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217FDC0h case   30:*/		return 0x8217FDC4;
		  /* 8217FDC4h */ case   31:  		/* bc 12, CR6_EQ, 20 */
		/* 8217FDC4h case   31:*/		if ( regs.CR[6].eq ) { return 0x8217FDD8;  }
		/* 8217FDC4h case   31:*/		return 0x8217FDC8;
		  /* 8217FDC8h */ case   32:  		/* lwz R11, <#[R11 + 12]> */
		/* 8217FDC8h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 8217FDC8h case   32:*/		return 0x8217FDCC;
		  /* 8217FDCCh */ case   33:  		/* cmplwi CR6, R11, 0 */
		/* 8217FDCCh case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217FDCCh case   33:*/		return 0x8217FDD0;
		  /* 8217FDD0h */ case   34:  		/* mr R11, R24 */
		/* 8217FDD0h case   34:*/		regs.R11 = regs.R24;
		/* 8217FDD0h case   34:*/		return 0x8217FDD4;
		  /* 8217FDD4h */ case   35:  		/* bc 4, CR6_EQ, 8 */
		/* 8217FDD4h case   35:*/		if ( !regs.CR[6].eq ) { return 0x8217FDDC;  }
		/* 8217FDD4h case   35:*/		return 0x8217FDD8;
	}
	return 0x8217FDD8;
} // Block from 8217FD48h-8217FDD8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 8217FDD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FDD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FDD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FDD8);
		  /* 8217FDD8h */ case    0:  		/* li R11, 0 */
		/* 8217FDD8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 8217FDD8h case    0:*/		return 0x8217FDDC;
	}
	return 0x8217FDDC;
} // Block from 8217FDD8h-8217FDDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217FDDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FDDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FDDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FDDC);
		  /* 8217FDDCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217FDDCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217FDDCh case    0:*/		return 0x8217FDE0;
		  /* 8217FDE0h */ case    1:  		/* bc 12, CR0_EQ, 140 */
		/* 8217FDE0h case    1:*/		if ( regs.CR[0].eq ) { return 0x8217FE6C;  }
		/* 8217FDE0h case    1:*/		return 0x8217FDE4;
		  /* 8217FDE4h */ case    2:  		/* mr R4, R29 */
		/* 8217FDE4h case    2:*/		regs.R4 = regs.R29;
		/* 8217FDE4h case    2:*/		return 0x8217FDE8;
		  /* 8217FDE8h */ case    3:  		/* mr R3, R30 */
		/* 8217FDE8h case    3:*/		regs.R3 = regs.R30;
		/* 8217FDE8h case    3:*/		return 0x8217FDEC;
		  /* 8217FDECh */ case    4:  		/* bl 720868 */
		/* 8217FDECh case    4:*/		regs.LR = 0x8217FDF0; return 0x8222FDD0;
		/* 8217FDECh case    4:*/		return 0x8217FDF0;
		  /* 8217FDF0h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8217FDF0h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8217FDF0h case    5:*/		return 0x8217FDF4;
		  /* 8217FDF4h */ case    6:  		/* bc 4, CR0_EQ, 120 */
		/* 8217FDF4h case    6:*/		if ( !regs.CR[0].eq ) { return 0x8217FE6C;  }
		/* 8217FDF4h case    6:*/		return 0x8217FDF8;
		  /* 8217FDF8h */ case    7:  		/* lwz R11, <#[R31 + 68]> */
		/* 8217FDF8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000044) );
		/* 8217FDF8h case    7:*/		return 0x8217FDFC;
		  /* 8217FDFCh */ case    8:  		/* mr R7, R31 */
		/* 8217FDFCh case    8:*/		regs.R7 = regs.R31;
		/* 8217FDFCh case    8:*/		return 0x8217FE00;
		  /* 8217FE00h */ case    9:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 8217FE00h case    9:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 8217FE00h case    9:*/		return 0x8217FE04;
		  /* 8217FE04h */ case   10:  		/* bc 12, CR0_EQ, 80 */
		/* 8217FE04h case   10:*/		if ( regs.CR[0].eq ) { return 0x8217FE54;  }
		/* 8217FE04h case   10:*/		return 0x8217FE08;
		  /* 8217FE08h */ case   11:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217FE08h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217FE08h case   11:*/		return 0x8217FE0C;
		  /* 8217FE0Ch */ case   12:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217FE0Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FE0Ch case   12:*/		return 0x8217FE10;
		  /* 8217FE10h */ case   13:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217FE10h case   13:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217FE10h case   13:*/		return 0x8217FE14;
		  /* 8217FE14h */ case   14:  		/* addic R10, R10, -1 */
		/* 8217FE14h case   14:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217FE14h case   14:*/		return 0x8217FE18;
		  /* 8217FE18h */ case   15:  		/* subfe R10, R10, R10 */
		/* 8217FE18h case   15:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217FE18h case   15:*/		return 0x8217FE1C;
		  /* 8217FE1Ch */ case   16:  		/* and R10, R10, R11 */
		/* 8217FE1Ch case   16:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 8217FE1Ch case   16:*/		return 0x8217FE20;
		  /* 8217FE20h */ case   17:  		/* lwz R10, <#[R10 + 68]> */
		/* 8217FE20h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000044) );
		/* 8217FE20h case   17:*/		return 0x8217FE24;
		  /* 8217FE24h */ case   18:  		/* rlwinm. R10, R10, 0, 1, 1 */
		/* 8217FE24h case   18:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R10,regs.R10);
		/* 8217FE24h case   18:*/		return 0x8217FE28;
		  /* 8217FE28h */ case   19:  		/* bc 12, CR0_EQ, 44 */
		/* 8217FE28h case   19:*/		if ( regs.CR[0].eq ) { return 0x8217FE54;  }
		/* 8217FE28h case   19:*/		return 0x8217FE2C;
		  /* 8217FE2Ch */ case   20:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217FE2Ch case   20:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217FE2Ch case   20:*/		return 0x8217FE30;
		  /* 8217FE30h */ case   21:  		/* addic R10, R10, -1 */
		/* 8217FE30h case   21:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217FE30h case   21:*/		return 0x8217FE34;
		  /* 8217FE34h */ case   22:  		/* subfe R10, R10, R10 */
		/* 8217FE34h case   22:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217FE34h case   22:*/		return 0x8217FE38;
		  /* 8217FE38h */ case   23:  		/* and R11, R10, R11 */
		/* 8217FE38h case   23:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8217FE38h case   23:*/		return 0x8217FE3C;
		  /* 8217FE3Ch */ case   24:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217FE3Ch case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217FE3Ch case   24:*/		return 0x8217FE40;
		  /* 8217FE40h */ case   25:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217FE40h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FE40h case   25:*/		return 0x8217FE44;
		  /* 8217FE44h */ case   26:  		/* rlwinm R10, R11, 0, 31, 31 */
		/* 8217FE44h case   26:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217FE44h case   26:*/		return 0x8217FE48;
		  /* 8217FE48h */ case   27:  		/* addic R10, R10, -1 */
		/* 8217FE48h case   27:*/		cpu::op::addic<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 8217FE48h case   27:*/		return 0x8217FE4C;
		  /* 8217FE4Ch */ case   28:  		/* subfe R10, R10, R10 */
		/* 8217FE4Ch case   28:*/		cpu::op::subfe<0>(regs,&regs.R10,regs.R10,regs.R10);
		/* 8217FE4Ch case   28:*/		return 0x8217FE50;
		  /* 8217FE50h */ case   29:  		/* and R7, R10, R11 */
		/* 8217FE50h case   29:*/		cpu::op::and<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 8217FE50h case   29:*/		return 0x8217FE54;
	}
	return 0x8217FE54;
} // Block from 8217FDDCh-8217FE54h (30 instructions)

//////////////////////////////////////////////////////
// Block at 8217FE54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FE54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FE54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FE54);
		  /* 8217FE54h */ case    0:  		/* li R8, 1 */
		/* 8217FE54h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8217FE54h case    0:*/		return 0x8217FE58;
		  /* 8217FE58h */ case    1:  		/* li R6, 1 */
		/* 8217FE58h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 8217FE58h case    1:*/		return 0x8217FE5C;
		  /* 8217FE5Ch */ case    2:  		/* mr R5, R30 */
		/* 8217FE5Ch case    2:*/		regs.R5 = regs.R30;
		/* 8217FE5Ch case    2:*/		return 0x8217FE60;
		  /* 8217FE60h */ case    3:  		/* mr R4, R31 */
		/* 8217FE60h case    3:*/		regs.R4 = regs.R31;
		/* 8217FE60h case    3:*/		return 0x8217FE64;
		  /* 8217FE64h */ case    4:  		/* mr R3, R18 */
		/* 8217FE64h case    4:*/		regs.R3 = regs.R18;
		/* 8217FE64h case    4:*/		return 0x8217FE68;
		  /* 8217FE68h */ case    5:  		/* bl 431520 */
		/* 8217FE68h case    5:*/		regs.LR = 0x8217FE6C; return 0x821E9408;
		/* 8217FE68h case    5:*/		return 0x8217FE6C;
	}
	return 0x8217FE6C;
} // Block from 8217FE54h-8217FE6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8217FE6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FE6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FE6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FE6C);
		  /* 8217FE6Ch */ case    0:  		/* lwz R11, <#[R27]> */
		/* 8217FE6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 8217FE6Ch case    0:*/		return 0x8217FE70;
		  /* 8217FE70h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 8217FE70h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 8217FE70h case    1:*/		return 0x8217FE74;
		  /* 8217FE74h */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8217FE74h case    2:*/		if ( !regs.CR[6].eq ) { return 0x8217FE7C;  }
		/* 8217FE74h case    2:*/		return 0x8217FE78;
		  /* 8217FE78h */ case    3:  		/* addi R27, R28, 8 */
		/* 8217FE78h case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R28,0x8);
		/* 8217FE78h case    3:*/		return 0x8217FE7C;
	}
	return 0x8217FE7C;
} // Block from 8217FE6Ch-8217FE7Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 8217FE7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FE7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FE7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FE7C);
		  /* 8217FE7Ch */ case    0:  		/* lwz R28, <#[R27]> */
		/* 8217FE7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000000) );
		/* 8217FE7Ch case    0:*/		return 0x8217FE80;
		  /* 8217FE80h */ case    1:  		/* b -260 */
		/* 8217FE80h case    1:*/		return 0x8217FD7C;
		/* 8217FE80h case    1:*/		return 0x8217FE84;
	}
	return 0x8217FE84;
} // Block from 8217FE7Ch-8217FE84h (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217FE84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FE84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FE84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FE84);
		  /* 8217FE84h */ case    0:  		/* li R4, 4800 */
		/* 8217FE84h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8217FE84h case    0:*/		return 0x8217FE88;
		  /* 8217FE88h */ case    1:  		/* mr R3, R18 */
		/* 8217FE88h case    1:*/		regs.R3 = regs.R18;
		/* 8217FE88h case    1:*/		return 0x8217FE8C;
		  /* 8217FE8Ch */ case    2:  		/* bl -188452 */
		/* 8217FE8Ch case    2:*/		regs.LR = 0x8217FE90; return 0x82151E68;
		/* 8217FE8Ch case    2:*/		return 0x8217FE90;
	}
	return 0x8217FE90;
} // Block from 8217FE84h-8217FE90h (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217FE90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FE90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FE90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FE90);
		  /* 8217FE90h */ case    0:  		/* li R4, 3535 */
		/* 8217FE90h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0xDCF);
		/* 8217FE90h case    0:*/		return 0x8217FE94;
		  /* 8217FE94h */ case    1:  		/* mr R3, R18 */
		/* 8217FE94h case    1:*/		regs.R3 = regs.R18;
		/* 8217FE94h case    1:*/		return 0x8217FE98;
		  /* 8217FE98h */ case    2:  		/* bl -188464 */
		/* 8217FE98h case    2:*/		regs.LR = 0x8217FE9C; return 0x82151E68;
		/* 8217FE98h case    2:*/		return 0x8217FE9C;
	}
	return 0x8217FE9C;
} // Block from 8217FE90h-8217FE9Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 8217FE9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FE9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FE9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FE9C);
		  /* 8217FE9Ch */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 8217FE9Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 8217FE9Ch case    0:*/		return 0x8217FEA0;
		  /* 8217FEA0h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217FEA0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FEA0h case    1:*/		return 0x8217FEA4;
		  /* 8217FEA4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217FEA4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217FEA4h case    2:*/		return 0x8217FEA8;
		  /* 8217FEA8h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8217FEA8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217FEB8;  }
		/* 8217FEA8h case    3:*/		return 0x8217FEAC;
		  /* 8217FEACh */ case    4:  		/* mr R31, R11 */
		/* 8217FEACh case    4:*/		regs.R31 = regs.R11;
		/* 8217FEACh case    4:*/		return 0x8217FEB0;
		  /* 8217FEB0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217FEB0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217FEB0h case    5:*/		return 0x8217FEB4;
		  /* 8217FEB4h */ case    6:  		/* bc 4, CR6_EQ, -436 */
		/* 8217FEB4h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217FD00;  }
		/* 8217FEB4h case    6:*/		return 0x8217FEB8;
	}
	return 0x8217FEB8;
} // Block from 8217FE9Ch-8217FEB8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217FEB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FEB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FEB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FEB8);
		  /* 8217FEB8h */ case    0:  		/* rlwinm R11, R29, 0, 0, 30 */
		/* 8217FEB8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R29);
		/* 8217FEB8h case    0:*/		return 0x8217FEBC;
		  /* 8217FEBCh */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 8217FEBCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 8217FEBCh case    1:*/		return 0x8217FEC0;
		  /* 8217FEC0h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217FEC0h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217FEC0h case    2:*/		return 0x8217FEC4;
		  /* 8217FEC4h */ case    3:  		/* bc 4, CR0_EQ, 24 */
		/* 8217FEC4h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8217FEDC;  }
		/* 8217FEC4h case    3:*/		return 0x8217FEC8;
		  /* 8217FEC8h */ case    4:  		/* mr R29, R11 */
		/* 8217FEC8h case    4:*/		regs.R29 = regs.R11;
		/* 8217FEC8h case    4:*/		return 0x8217FECC;
		  /* 8217FECCh */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 8217FECCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8217FECCh case    5:*/		return 0x8217FED0;
		  /* 8217FED0h */ case    6:  		/* bc 4, CR6_EQ, -620 */
		/* 8217FED0h case    6:*/		if ( !regs.CR[6].eq ) { return 0x8217FC64;  }
		/* 8217FED0h case    6:*/		return 0x8217FED4;
		  /* 8217FED4h */ case    7:  		/* b 8 */
		/* 8217FED4h case    7:*/		return 0x8217FEDC;
		/* 8217FED4h case    7:*/		return 0x8217FED8;
	}
	return 0x8217FED8;
} // Block from 8217FEB8h-8217FED8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 8217FED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FED8);
		  /* 8217FED8h */ case    0:  		/* li R24, 1 */
		/* 8217FED8h case    0:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 8217FED8h case    0:*/		return 0x8217FEDC;
	}
	return 0x8217FEDC;
} // Block from 8217FED8h-8217FEDCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 8217FEDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FEDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FEDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FEDC);
		  /* 8217FEDCh */ case    0:  		/* lwz R11, <#[R18 + 4]> */
		/* 8217FEDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 8217FEDCh case    0:*/		return 0x8217FEE0;
		  /* 8217FEE0h */ case    1:  		/* lwz R16, <#[R18 + 92]> */
		/* 8217FEE0h case    1:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R18 + 0x0000005C) );
		/* 8217FEE0h case    1:*/		return 0x8217FEE4;
		  /* 8217FEE4h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8217FEE4h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8217FEE4h case    2:*/		return 0x8217FEE8;
		  /* 8217FEE8h */ case    3:  		/* bc 4, CR0_EQ, 6692 */
		/* 8217FEE8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218190C;  }
		/* 8217FEE8h case    3:*/		return 0x8217FEEC;
		  /* 8217FEECh */ case    4:  		/* mr R19, R11 */
		/* 8217FEECh case    4:*/		regs.R19 = regs.R11;
		/* 8217FEECh case    4:*/		return 0x8217FEF0;
		  /* 8217FEF0h */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 8217FEF0h case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8217FEF0h case    5:*/		return 0x8217FEF4;
		  /* 8217FEF4h */ case    6:  		/* bc 12, CR0_EQ, 6680 */
		/* 8217FEF4h case    6:*/		if ( regs.CR[0].eq ) { return 0x8218190C;  }
		/* 8217FEF4h case    6:*/		return 0x8217FEF8;
		  /* 8217FEF8h */ case    7:  		/* lis R11, -32256 */
		/* 8217FEF8h case    7:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 8217FEF8h case    7:*/		return 0x8217FEFC;
		  /* 8217FEFCh */ case    8:  		/* li R17, 68 */
		/* 8217FEFCh case    8:*/		cpu::op::li<0>(regs,&regs.R17,0x44);
		/* 8217FEFCh case    8:*/		return 0x8217FF00;
		  /* 8217FF00h */ case    9:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 8217FF00h case    9:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 8217FF00h case    9:*/		return 0x8217FF04;
		  /* 8217FF04h */ case   10:  		/* lwz R11, <#[R19 + 40]> */
		/* 8217FF04h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000028) );
		/* 8217FF04h case   10:*/		return 0x8217FF08;
		  /* 8217FF08h */ case   11:  		/* lwz R11, <#[R11]> */
		/* 8217FF08h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8217FF08h case   11:*/		return 0x8217FF0C;
		  /* 8217FF0Ch */ case   12:  		/* rlwinm. R11, R11, 13, 31, 31 */
		/* 8217FF0Ch case   12:*/		cpu::op::rlwinm<1,13,31,31>(regs,&regs.R11,regs.R11);
		/* 8217FF0Ch case   12:*/		return 0x8217FF10;
		  /* 8217FF10h */ case   13:  		/* bc 12, CR0_EQ, 6460 */
		/* 8217FF10h case   13:*/		if ( regs.CR[0].eq ) { return 0x8218184C;  }
		/* 8217FF10h case   13:*/		return 0x8217FF14;
		  /* 8217FF14h */ case   14:  		/* lwz R11, <#[R19 + 36]> */
		/* 8217FF14h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000024) );
		/* 8217FF14h case   14:*/		return 0x8217FF18;
	}
	return 0x8217FF18;
} // Block from 8217FEDCh-8217FF18h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217FF18h
// Function '?RemarkThreadDependentInstructions@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FF18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FF18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FF18);
		  /* 8217FF18h */ case    0:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 8217FF18h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 8217FF18h case    0:*/		return 0x8217FF1C;
		  /* 8217FF1Ch */ case    1:  		/* bc 4, CR0_EQ, 6484 */
		/* 8217FF1Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x82181870;  }
		/* 8217FF1Ch case    1:*/		return 0x8217FF20;
		  /* 8217FF20h */ case    2:  		/* lwz R11, <#[R19 + 32]> */
		/* 8217FF20h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000020) );
		/* 8217FF20h case    2:*/		return 0x8217FF24;
		  /* 8217FF24h */ case    3:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8217FF24h case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8217FF24h case    3:*/		return 0x8217FF28;
		  /* 8217FF28h */ case    4:  		/* addic. R23, R11, -40 */
		/* 8217FF28h case    4:*/		cpu::op::addic<1>(regs,&regs.R23,regs.R11,0xFFFFFFD8);
		/* 8217FF28h case    4:*/		return 0x8217FF2C;
		  /* 8217FF2Ch */ case    5:  		/* bc 12, CR0_EQ, 6468 */
		/* 8217FF2Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x82181870;  }
		/* 8217FF2Ch case    5:*/		return 0x8217FF30;
		  /* 8217FF30h */ case    6:  		/* lwz R31, <#[R23 + 8]> */
		/* 8217FF30h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R23 + 0x00000008) );
		/* 8217FF30h case    6:*/		return 0x8217FF34;
		  /* 8217FF34h */ case    7:  		/* rlwinm R4, R31, 25, 25, 31 */
		/* 8217FF34h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R31);
		/* 8217FF34h case    7:*/		return 0x8217FF38;
		  /* 8217FF38h */ case    8:  		/* cmplwi CR6, R4, 86 */
		/* 8217FF38h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000056);
		/* 8217FF38h case    8:*/		return 0x8217FF3C;
		  /* 8217FF3Ch */ case    9:  		/* bc 12, CR6_EQ, 56 */
		/* 8217FF3Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x8217FF74;  }
		/* 8217FF3Ch case    9:*/		return 0x8217FF40;
		  /* 8217FF40h */ case   10:  		/* cmplwi CR6, R4, 87 */
		/* 8217FF40h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000057);
		/* 8217FF40h case   10:*/		return 0x8217FF44;
		  /* 8217FF44h */ case   11:  		/* bc 12, CR6_EQ, 48 */
		/* 8217FF44h case   11:*/		if ( regs.CR[6].eq ) { return 0x8217FF74;  }
		/* 8217FF44h case   11:*/		return 0x8217FF48;
		  /* 8217FF48h */ case   12:  		/* cmplwi CR6, R4, 89 */
		/* 8217FF48h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000059);
		/* 8217FF48h case   12:*/		return 0x8217FF4C;
		  /* 8217FF4Ch */ case   13:  		/* bc 12, CR6_EQ, 40 */
		/* 8217FF4Ch case   13:*/		if ( regs.CR[6].eq ) { return 0x8217FF74;  }
		/* 8217FF4Ch case   13:*/		return 0x8217FF50;
		  /* 8217FF50h */ case   14:  		/* cmplwi CR6, R4, 90 */
		/* 8217FF50h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x0000005A);
		/* 8217FF50h case   14:*/		return 0x8217FF54;
		  /* 8217FF54h */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 8217FF54h case   15:*/		if ( regs.CR[6].eq ) { return 0x8217FF74;  }
		/* 8217FF54h case   15:*/		return 0x8217FF58;
		  /* 8217FF58h */ case   16:  		/* cmplwi CR6, R4, 84 */
		/* 8217FF58h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000054);
		/* 8217FF58h case   16:*/		return 0x8217FF5C;
		  /* 8217FF5Ch */ case   17:  		/* bc 12, CR6_EQ, 24 */
		/* 8217FF5Ch case   17:*/		if ( regs.CR[6].eq ) { return 0x8217FF74;  }
		/* 8217FF5Ch case   17:*/		return 0x8217FF60;
		  /* 8217FF60h */ case   18:  		/* cmplwi CR6, R4, 85 */
		/* 8217FF60h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000055);
		/* 8217FF60h case   18:*/		return 0x8217FF64;
		  /* 8217FF64h */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 8217FF64h case   19:*/		if ( regs.CR[6].eq ) { return 0x8217FF74;  }
		/* 8217FF64h case   19:*/		return 0x8217FF68;
		  /* 8217FF68h */ case   20:  		/* li R21, 0 */
		/* 8217FF68h case   20:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8217FF68h case   20:*/		return 0x8217FF6C;
		  /* 8217FF6Ch */ case   21:  		/* mr R11, R21 */
		/* 8217FF6Ch case   21:*/		regs.R11 = regs.R21;
		/* 8217FF6Ch case   21:*/		return 0x8217FF70;
		  /* 8217FF70h */ case   22:  		/* b 12 */
		/* 8217FF70h case   22:*/		return 0x8217FF7C;
		/* 8217FF70h case   22:*/		return 0x8217FF74;
	}
	return 0x8217FF74;
} // Block from 8217FF18h-8217FF74h (23 instructions)

//////////////////////////////////////////////////////
// Block at 8217FF74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FF74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FF74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FF74);
		  /* 8217FF74h */ case    0:  		/* mr R11, R24 */
		/* 8217FF74h case    0:*/		regs.R11 = regs.R24;
		/* 8217FF74h case    0:*/		return 0x8217FF78;
		  /* 8217FF78h */ case    1:  		/* li R21, 0 */
		/* 8217FF78h case    1:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 8217FF78h case    1:*/		return 0x8217FF7C;
	}
	return 0x8217FF7C;
} // Block from 8217FF74h-8217FF7Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8217FF7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FF7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FF7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FF7C);
		  /* 8217FF7Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8217FF7Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8217FF7Ch case    0:*/		return 0x8217FF80;
		  /* 8217FF80h */ case    1:  		/* bc 12, CR0_EQ, 6384 */
		/* 8217FF80h case    1:*/		if ( regs.CR[0].eq ) { return 0x82181870;  }
		/* 8217FF80h case    1:*/		return 0x8217FF84;
		  /* 8217FF84h */ case    2:  		/* cmplwi CR6, R4, 84 */
		/* 8217FF84h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000054);
		/* 8217FF84h case    2:*/		return 0x8217FF88;
		  /* 8217FF88h */ case    3:  		/* mr R3, R18 */
		/* 8217FF88h case    3:*/		regs.R3 = regs.R18;
		/* 8217FF88h case    3:*/		return 0x8217FF8C;
		  /* 8217FF8Ch */ case    4:  		/* bc 12, CR6_EQ, 4912 */
		/* 8217FF8Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821812BC;  }
		/* 8217FF8Ch case    4:*/		return 0x8217FF90;
		  /* 8217FF90h */ case    5:  		/* rlwinm R6, R31, 18, 29, 31 */
		/* 8217FF90h case    5:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R31);
		/* 8217FF90h case    5:*/		return 0x8217FF94;
		  /* 8217FF94h */ case    6:  		/* rlwinm R5, R31, 13, 29, 31 */
		/* 8217FF94h case    6:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R31);
		/* 8217FF94h case    6:*/		return 0x8217FF98;
		  /* 8217FF98h */ case    7:  		/* bl -113512 */
		/* 8217FF98h case    7:*/		regs.LR = 0x8217FF9C; return 0x82164430;
		/* 8217FF98h case    7:*/		return 0x8217FF9C;
		  /* 8217FF9Ch */ case    8:  		/* addi R11, R23, -16 */
		/* 8217FF9Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFF0);
		/* 8217FF9Ch case    8:*/		return 0x8217FFA0;
		  /* 8217FFA0h */ case    9:  		/* add R20, R3, R11 */
		/* 8217FFA0h case    9:*/		cpu::op::add<0>(regs,&regs.R20,regs.R3,regs.R11);
		/* 8217FFA0h case    9:*/		return 0x8217FFA4;
		  /* 8217FFA4h */ case   10:  		/* lwz R11, <#[R20 + 8]> */
		/* 8217FFA4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 8217FFA4h case   10:*/		return 0x8217FFA8;
		  /* 8217FFA8h */ case   11:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 8217FFA8h case   11:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 8217FFA8h case   11:*/		return 0x8217FFAC;
		  /* 8217FFACh */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 8217FFACh case   12:*/		if ( regs.CR[0].eq ) { return 0x8217FFB8;  }
		/* 8217FFACh case   12:*/		return 0x8217FFB0;
		  /* 8217FFB0h */ case   13:  		/* li R22, 7 */
		/* 8217FFB0h case   13:*/		cpu::op::li<0>(regs,&regs.R22,0x7);
		/* 8217FFB0h case   13:*/		return 0x8217FFB4;
		  /* 8217FFB4h */ case   14:  		/* b 32 */
		/* 8217FFB4h case   14:*/		return 0x8217FFD4;
		/* 8217FFB4h case   14:*/		return 0x8217FFB8;
	}
	return 0x8217FFB8;
} // Block from 8217FF7Ch-8217FFB8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 8217FFB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FFB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FFB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FFB8);
		  /* 8217FFB8h */ case    0:  		/* rlwinm R22, R11, 30, 28, 31 */
		/* 8217FFB8h case    0:*/		cpu::op::rlwinm<0,30,28,31>(regs,&regs.R22,regs.R11);
		/* 8217FFB8h case    0:*/		return 0x8217FFBC;
		  /* 8217FFBCh */ case    1:  		/* cmpwi CR6, R22, 2 */
		/* 8217FFBCh case    1:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000002);
		/* 8217FFBCh case    1:*/		return 0x8217FFC0;
		  /* 8217FFC0h */ case    2:  		/* bc 12, CR6_EQ, 40 */
		/* 8217FFC0h case    2:*/		if ( regs.CR[6].eq ) { return 0x8217FFE8;  }
		/* 8217FFC0h case    2:*/		return 0x8217FFC4;
		  /* 8217FFC4h */ case    3:  		/* cmpwi CR6, R22, 3 */
		/* 8217FFC4h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000003);
		/* 8217FFC4h case    3:*/		return 0x8217FFC8;
		  /* 8217FFC8h */ case    4:  		/* bc 12, CR6_EQ, 32 */
		/* 8217FFC8h case    4:*/		if ( regs.CR[6].eq ) { return 0x8217FFE8;  }
		/* 8217FFC8h case    4:*/		return 0x8217FFCC;
		  /* 8217FFCCh */ case    5:  		/* cmpwi CR6, R22, 4 */
		/* 8217FFCCh case    5:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000004);
		/* 8217FFCCh case    5:*/		return 0x8217FFD0;
		  /* 8217FFD0h */ case    6:  		/* bc 12, CR6_EQ, 24 */
		/* 8217FFD0h case    6:*/		if ( regs.CR[6].eq ) { return 0x8217FFE8;  }
		/* 8217FFD0h case    6:*/		return 0x8217FFD4;
	}
	return 0x8217FFD4;
} // Block from 8217FFB8h-8217FFD4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 8217FFD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FFD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FFD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FFD4);
		  /* 8217FFD4h */ case    0:  		/* lwz R11, <#[R19 + 76]> */
		/* 8217FFD4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000004C) );
		/* 8217FFD4h case    0:*/		return 0x8217FFD8;
		  /* 8217FFD8h */ case    1:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 8217FFD8h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 8217FFD8h case    1:*/		return 0x8217FFDC;
		  /* 8217FFDCh */ case    2:  		/* bc 4, CR0_EQ, 12 */
		/* 8217FFDCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x8217FFE8;  }
		/* 8217FFDCh case    2:*/		return 0x8217FFE0;
		  /* 8217FFE0h */ case    3:  		/* rlwinm. R11, R31, 5, 31, 31 */
		/* 8217FFE0h case    3:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R31);
		/* 8217FFE0h case    3:*/		return 0x8217FFE4;
		  /* 8217FFE4h */ case    4:  		/* bc 12, CR0_EQ, 6248 */
		/* 8217FFE4h case    4:*/		if ( regs.CR[0].eq ) { return 0x8218184C;  }
		/* 8217FFE4h case    4:*/		return 0x8217FFE8;
	}
	return 0x8217FFE8;
} // Block from 8217FFD4h-8217FFE8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 8217FFE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8217FFE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8217FFE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8217FFE8);
		  /* 8217FFE8h */ case    0:  		/* cmpwi CR6, R22, 8 */
		/* 8217FFE8h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000008);
		/* 8217FFE8h case    0:*/		return 0x8217FFEC;
		  /* 8217FFECh */ case    1:  		/* bc 12, CR6_EQ, 3452 */
		/* 8217FFECh case    1:*/		if ( regs.CR[6].eq ) { return 0x82180D68;  }
		/* 8217FFECh case    1:*/		return 0x8217FFF0;
		  /* 8217FFF0h */ case    2:  		/* cmpwi CR6, R22, 9 */
		/* 8217FFF0h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000009);
		/* 8217FFF0h case    2:*/		return 0x8217FFF4;
		  /* 8217FFF4h */ case    3:  		/* bc 12, CR6_EQ, 3444 */
		/* 8217FFF4h case    3:*/		if ( regs.CR[6].eq ) { return 0x82180D68;  }
		/* 8217FFF4h case    3:*/		return 0x8217FFF8;
		  /* 8217FFF8h */ case    4:  		/* lwz R11, <#[R19 + 48]> */
		/* 8217FFF8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 8217FFF8h case    4:*/		return 0x8217FFFC;
		  /* 8217FFFCh */ case    5:  		/* rlwinm R21, R19, 0, 0, 30 */
		/* 8217FFFCh case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R21,regs.R19);
		/* 8217FFFCh case    5:*/		return 0x82180000;
		  /* 82180000h */ case    6:  		/* rlwinm R25, R11, 0, 13, 31 */
		/* 82180000h case    6:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R25,regs.R11);
		/* 82180000h case    6:*/		return 0x82180004;
		  /* 82180004h */ case    7:  		/* lwz R8, <#[R21 + 4]> */
		/* 82180004h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R21 + 0x00000004) );
		/* 82180004h case    7:*/		return 0x82180008;
		  /* 82180008h */ case    8:  		/* li R24, 0 */
		/* 82180008h case    8:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 82180008h case    8:*/		return 0x8218000C;
		  /* 8218000Ch */ case    9:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 8218000Ch case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 8218000Ch case    9:*/		return 0x82180010;
		  /* 82180010h */ case   10:  		/* bc 4, CR0_EQ, 1216 */
		/* 82180010h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821804D0;  }
		/* 82180010h case   10:*/		return 0x82180014;
		  /* 82180014h */ case   11:  		/* cmplwi CR6, R8, 0 */
		/* 82180014h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 82180014h case   11:*/		return 0x82180018;
	}
	return 0x82180018;
} // Block from 8217FFE8h-82180018h (12 instructions)

//////////////////////////////////////////////////////
// Block at 82180018h
// Function '?Predication@Compiler@D3DXShader@@AAAXXZ'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180018);
		  /* 82180018h */ case    0:  		/* bc 12, CR6_EQ, 1208 */
		/* 82180018h case    0:*/		if ( regs.CR[6].eq ) { return 0x821804D0;  }
		/* 82180018h case    0:*/		return 0x8218001C;
		  /* 8218001Ch */ case    1:  		/* lwz R11, <#[R19 + 48]> */
		/* 8218001Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 8218001Ch case    1:*/		return 0x82180020;
		  /* 82180020h */ case    2:  		/* li R10, 1 */
		/* 82180020h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 82180020h case    2:*/		return 0x82180024;
		  /* 82180024h */ case    3:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 82180024h case    3:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 82180024h case    3:*/		return 0x82180028;
		  /* 82180028h */ case    4:  		/* rlwinm R9, R11, 0, 27, 31 */
		/* 82180028h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R11);
		/* 82180028h case    4:*/		return 0x8218002C;
		  /* 8218002Ch */ case    5:  		/* rlwinm R7, R11, 29, 3, 29 */
		/* 8218002Ch case    5:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R7,regs.R11);
		/* 8218002Ch case    5:*/		return 0x82180030;
		  /* 82180030h */ case    6:  		/* slw R6, R10, R9 */
		/* 82180030h case    6:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R10,regs.R9);
		/* 82180030h case    6:*/		return 0x82180034;
		  /* 82180034h */ case    7:  		/* lwz R11, <#[R8 + 40]> */
		/* 82180034h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000028) );
		/* 82180034h case    7:*/		return 0x82180038;
		  /* 82180038h */ case    8:  		/* lwz R10, <#[R11]> */
		/* 82180038h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82180038h case    8:*/		return 0x8218003C;
		  /* 8218003Ch */ case    9:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 8218003Ch case    9:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 8218003Ch case    9:*/		return 0x82180040;
		  /* 82180040h */ case   10:  		/* addi R10, R10, 31 */
		/* 82180040h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 82180040h case   10:*/		return 0x82180044;
		  /* 82180044h */ case   11:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 82180044h case   11:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 82180044h case   11:*/		return 0x82180048;
		  /* 82180048h */ case   12:  		/* add R10, R10, R7 */
		/* 82180048h case   12:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 82180048h case   12:*/		return 0x8218004C;
		  /* 8218004Ch */ case   13:  		/* add R11, R10, R11 */
		/* 8218004Ch case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 8218004Ch case   13:*/		return 0x82180050;
		  /* 82180050h */ case   14:  		/* lwz R11, <#[R11 + 4]> */
		/* 82180050h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82180050h case   14:*/		return 0x82180054;
		  /* 82180054h */ case   15:  		/* and. R11, R11, R6 */
		/* 82180054h case   15:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82180054h case   15:*/		return 0x82180058;
		  /* 82180058h */ case   16:  		/* bc 12, CR0_EQ, 104 */
		/* 82180058h case   16:*/		if ( regs.CR[0].eq ) { return 0x821800C0;  }
		/* 82180058h case   16:*/		return 0x8218005C;
		  /* 8218005Ch */ case   17:  		/* rlwinm R11, R25, 28, 5, 31 */
		/* 8218005Ch case   17:*/		cpu::op::rlwinm<0,28,5,31>(regs,&regs.R11,regs.R25);
		/* 8218005Ch case   17:*/		return 0x82180060;
		  /* 82180060h */ case   18:  		/* lwz R5, <#[R8 + 40]> */
		/* 82180060h case   18:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000028) );
		/* 82180060h case   18:*/		return 0x82180064;
		  /* 82180064h */ case   19:  		/* rlwinm R10, R25, 1, 0, 30 */
		/* 82180064h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R25);
		/* 82180064h case   19:*/		return 0x82180068;
		  /* 82180068h */ case   20:  		/* addi R11, R11, 1 */
		/* 82180068h case   20:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82180068h case   20:*/		return 0x8218006C;
		  /* 8218006Ch */ case   21:  		/* addi R9, R10, 1 */
		/* 8218006Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x1);
		/* 8218006Ch case   21:*/		return 0x82180070;
		  /* 82180070h */ case   22:  		/* rlwinm R10, R11, 1, 0, 30 */
		/* 82180070h case   22:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R11);
		/* 82180070h case   22:*/		return 0x82180074;
		  /* 82180074h */ case   23:  		/* lwz R11, <#[R5]> */
		/* 82180074h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 82180074h case   23:*/		return 0x82180078;
		  /* 82180078h */ case   24:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82180078h case   24:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82180078h case   24:*/		return 0x8218007C;
		  /* 8218007Ch */ case   25:  		/* rlwinm R4, R25, 1, 27, 30 */
		/* 8218007Ch case   25:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R4,regs.R25);
		/* 8218007Ch case   25:*/		return 0x82180080;
		  /* 82180080h */ case   26:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 82180080h case   26:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 82180080h case   26:*/		return 0x82180084;
		  /* 82180084h */ case   27:  		/* slw R9, R14, R9 */
		/* 82180084h case   27:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R14,regs.R9);
		/* 82180084h case   27:*/		return 0x82180088;
		  /* 82180088h */ case   28:  		/* addi R11, R11, 31 */
		/* 82180088h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 82180088h case   28:*/		return 0x8218008C;
		  /* 8218008Ch */ case   29:  		/* addi R9, R9, -1 */
		/* 8218008Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 8218008Ch case   29:*/		return 0x82180090;
		  /* 82180090h */ case   30:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 82180090h case   30:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 82180090h case   30:*/		return 0x82180094;
		  /* 82180094h */ case   31:  		/* slw R3, R15, R4 */
		/* 82180094h case   31:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R15,regs.R4);
		/* 82180094h case   31:*/		return 0x82180098;
		  /* 82180098h */ case   32:  		/* add R11, R11, R10 */
		/* 82180098h case   32:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82180098h case   32:*/		return 0x8218009C;
		  /* 8218009Ch */ case   33:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 8218009Ch case   33:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 8218009Ch case   33:*/		return 0x821800A0;
		  /* 821800A0h */ case   34:  		/* lwzx R11, <#[R11 + R5]> */
		/* 821800A0h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R5 + 0x00000000) );
		/* 821800A0h case   34:*/		return 0x821800A4;
		  /* 821800A4h */ case   35:  		/* and R11, R11, R9 */
		/* 821800A4h case   35:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821800A4h case   35:*/		return 0x821800A8;
		  /* 821800A8h */ case   36:  		/* and R11, R11, R3 */
		/* 821800A8h case   36:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R3);
		/* 821800A8h case   36:*/		return 0x821800AC;
		  /* 821800ACh */ case   37:  		/* srw. R11, R11, R4 */
		/* 821800ACh case   37:*/		cpu::op::srw<1>(regs,&regs.R11,regs.R11,regs.R4);
		/* 821800ACh case   37:*/		return 0x821800B0;
		  /* 821800B0h */ case   38:  		/* bc 12, CR0_EQ, 16 */
		/* 821800B0h case   38:*/		if ( regs.CR[0].eq ) { return 0x821800C0;  }
		/* 821800B0h case   38:*/		return 0x821800B4;
		  /* 821800B4h */ case   39:  		/* cmplwi CR6, R11, 3 */
		/* 821800B4h case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821800B4h case   39:*/		return 0x821800B8;
		  /* 821800B8h */ case   40:  		/* bc 12, CR6_EQ, 8 */
		/* 821800B8h case   40:*/		if ( regs.CR[6].eq ) { return 0x821800C0;  }
		/* 821800B8h case   40:*/		return 0x821800BC;
		  /* 821800BCh */ case   41:  		/* or R24, R11, R24 */
		/* 821800BCh case   41:*/		cpu::op::or<0>(regs,&regs.R24,regs.R11,regs.R24);
		/* 821800BCh case   41:*/		return 0x821800C0;
	}
	return 0x821800C0;
} // Block from 82180018h-821800C0h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821800C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821800C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821800C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821800C0);
		  /* 821800C0h */ case    0:  		/* rlwinm R11, R8, 0, 0, 30 */
		/* 821800C0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R8);
		/* 821800C0h case    0:*/		return 0x821800C4;
		  /* 821800C4h */ case    1:  		/* lwz R8, <#[R11 + 4]> */
		/* 821800C4h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000004) );
		/* 821800C4h case    1:*/		return 0x821800C8;
		  /* 821800C8h */ case    2:  		/* rlwinm. R11, R8, 0, 31, 31 */
		/* 821800C8h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R8);
		/* 821800C8h case    2:*/		return 0x821800CC;
		  /* 821800CCh */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821800CCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821800D8;  }
		/* 821800CCh case    3:*/		return 0x821800D0;
		  /* 821800D0h */ case    4:  		/* cmplwi CR6, R8, 0 */
		/* 821800D0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821800D0h case    4:*/		return 0x821800D4;
		  /* 821800D4h */ case    5:  		/* bc 4, CR6_EQ, -160 */
		/* 821800D4h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82180034;  }
		/* 821800D4h case    5:*/		return 0x821800D8;
	}
	return 0x821800D8;
} // Block from 821800C0h-821800D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821800D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821800D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821800D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821800D8);
		  /* 821800D8h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821800D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821800D8h case    0:*/		return 0x821800DC;
		  /* 821800DCh */ case    1:  		/* bc 12, CR6_EQ, 1012 */
		/* 821800DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821804D0;  }
		/* 821800DCh case    1:*/		return 0x821800E0;
		  /* 821800E0h */ case    2:  		/* lwz R11, <#[R23 + 8]> */
		/* 821800E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821800E0h case    2:*/		return 0x821800E4;
		  /* 821800E4h */ case    3:  		/* rlwinm. R11, R11, 15, 31, 31 */
		/* 821800E4h case    3:*/		cpu::op::rlwinm<1,15,31,31>(regs,&regs.R11,regs.R11);
		/* 821800E4h case    3:*/		return 0x821800E8;
		  /* 821800E8h */ case    4:  		/* bc 12, CR0_EQ, 6048 */
		/* 821800E8h case    4:*/		if ( regs.CR[0].eq ) { return 0x82181888;  }
		/* 821800E8h case    4:*/		return 0x821800EC;
		  /* 821800ECh */ case    5:  		/* mr R3, R23 */
		/* 821800ECh case    5:*/		regs.R3 = regs.R23;
		/* 821800ECh case    5:*/		return 0x821800F0;
		  /* 821800F0h */ case    6:  		/* bl -79032 */
		/* 821800F0h case    6:*/		regs.LR = 0x821800F4; return 0x8216CC38;
		/* 821800F0h case    6:*/		return 0x821800F4;
		  /* 821800F4h */ case    7:  		/* lwz R26, <#[R3 + 12]> */
		/* 821800F4h case    7:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R3 + 0x0000000C) );
		/* 821800F4h case    7:*/		return 0x821800F8;
		  /* 821800F8h */ case    8:  		/* lwz R11, <#[R26 + 8]> */
		/* 821800F8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821800F8h case    8:*/		return 0x821800FC;
		  /* 821800FCh */ case    9:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821800FCh case    9:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821800FCh case    9:*/		return 0x82180100;
		  /* 82180100h */ case   10:  		/* cmplwi CR6, R11, 15360 */
		/* 82180100h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003C00);
		/* 82180100h case   10:*/		return 0x82180104;
		  /* 82180104h */ case   11:  		/* bc 12, CR6_EQ, 5960 */
		/* 82180104h case   11:*/		if ( regs.CR[6].eq ) { return 0x8218184C;  }
		/* 82180104h case   11:*/		return 0x82180108;
		  /* 82180108h */ case   12:  		/* cmpwi CR6, R22, 2 */
		/* 82180108h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000002);
		/* 82180108h case   12:*/		return 0x8218010C;
		  /* 8218010Ch */ case   13:  		/* bc 4, CR6_EQ, 844 */
		/* 8218010Ch case   13:*/		if ( !regs.CR[6].eq ) { return 0x82180458;  }
		/* 8218010Ch case   13:*/		return 0x82180110;
		  /* 82180110h */ case   14:  		/* cmplwi CR6, R24, 3 */
		/* 82180110h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000003);
		/* 82180110h case   14:*/		return 0x82180114;
		  /* 82180114h */ case   15:  		/* mr R5, R23 */
		/* 82180114h case   15:*/		regs.R5 = regs.R23;
		/* 82180114h case   15:*/		return 0x82180118;
		  /* 82180118h */ case   16:  		/* mr R4, R19 */
		/* 82180118h case   16:*/		regs.R4 = regs.R19;
		/* 82180118h case   16:*/		return 0x8218011C;
		  /* 8218011Ch */ case   17:  		/* mr R3, R18 */
		/* 8218011Ch case   17:*/		regs.R3 = regs.R18;
		/* 8218011Ch case   17:*/		return 0x82180120;
		  /* 82180120h */ case   18:  		/* bc 12, CR6_EQ, 276 */
		/* 82180120h case   18:*/		if ( regs.CR[6].eq ) { return 0x82180234;  }
		/* 82180120h case   18:*/		return 0x82180124;
		  /* 82180124h */ case   19:  		/* addi R8, R1, 96 */
		/* 82180124h case   19:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x60);
		/* 82180124h case   19:*/		return 0x82180128;
		  /* 82180128h */ case   20:  		/* addi R7, R1, 92 */
		/* 82180128h case   20:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x5C);
		/* 82180128h case   20:*/		return 0x8218012C;
		  /* 8218012Ch */ case   21:  		/* addi R6, R1, 82 */
		/* 8218012Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x52);
		/* 8218012Ch case   21:*/		return 0x82180130;
		  /* 82180130h */ case   22:  		/* bl -23984 */
		/* 82180130h case   22:*/		regs.LR = 0x82180134; return 0x8217A380;
		/* 82180130h case   22:*/		return 0x82180134;
		  /* 82180134h */ case   23:  		/* cmpwi CR6, R3, 3 */
		/* 82180134h case   23:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000003);
		/* 82180134h case   23:*/		return 0x82180138;
		  /* 82180138h */ case   24:  		/* bc 4, CR6_EQ, 728 */
		/* 82180138h case   24:*/		if ( !regs.CR[6].eq ) { return 0x82180410;  }
		/* 82180138h case   24:*/		return 0x8218013C;
		  /* 8218013Ch */ case   25:  		/* lwz R29, <#[R1 + 92]> */
		/* 8218013Ch case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x0000005C) );
		/* 8218013Ch case   25:*/		return 0x82180140;
		  /* 82180140h */ case   26:  		/* addi R8, R1, 100 */
		/* 82180140h case   26:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x64);
		/* 82180140h case   26:*/		return 0x82180144;
		  /* 82180144h */ case   27:  		/* lwz R30, <#[R1 + 96]> */
		/* 82180144h case   27:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000060) );
		/* 82180144h case   27:*/		return 0x82180148;
		  /* 82180148h */ case   28:  		/* addi R7, R1, 81 */
		/* 82180148h case   28:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x51);
		/* 82180148h case   28:*/		return 0x8218014C;
		  /* 8218014Ch */ case   29:  		/* addi R6, R1, 80 */
		/* 8218014Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 8218014Ch case   29:*/		return 0x82180150;
		  /* 82180150h */ case   30:  		/* mr R5, R29 */
		/* 82180150h case   30:*/		regs.R5 = regs.R29;
		/* 82180150h case   30:*/		return 0x82180154;
		  /* 82180154h */ case   31:  		/* mr R4, R30 */
		/* 82180154h case   31:*/		regs.R4 = regs.R30;
		/* 82180154h case   31:*/		return 0x82180158;
		  /* 82180158h */ case   32:  		/* mr R3, R18 */
		/* 82180158h case   32:*/		regs.R3 = regs.R18;
		/* 82180158h case   32:*/		return 0x8218015C;
		  /* 8218015Ch */ case   33:  		/* bl -29948 */
		/* 8218015Ch case   33:*/		regs.LR = 0x82180160; return 0x82178C60;
		/* 8218015Ch case   33:*/		return 0x82180160;
		  /* 82180160h */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82180160h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82180160h case   34:*/		return 0x82180164;
		  /* 82180164h */ case   35:  		/* bc 12, CR0_EQ, 684 */
		/* 82180164h case   35:*/		if ( regs.CR[0].eq ) { return 0x82180410;  }
		/* 82180164h case   35:*/		return 0x82180168;
		  /* 82180168h */ case   36:  		/* lbz R11, <#[R1 + 80]> */
		/* 82180168h case   36:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 82180168h case   36:*/		return 0x8218016C;
		  /* 8218016Ch */ case   37:  		/* cmplwi CR0, R11, 0 */
		/* 8218016Ch case   37:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 8218016Ch case   37:*/		return 0x82180170;
		  /* 82180170h */ case   38:  		/* bc 4, CR0_EQ, 672 */
		/* 82180170h case   38:*/		if ( !regs.CR[0].eq ) { return 0x82180410;  }
		/* 82180170h case   38:*/		return 0x82180174;
		  /* 82180174h */ case   39:  		/* lbz R11, <#[R1 + 81]> */
		/* 82180174h case   39:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000051) );
		/* 82180174h case   39:*/		return 0x82180178;
		  /* 82180178h */ case   40:  		/* cmplwi CR0, R11, 0 */
		/* 82180178h case   40:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82180178h case   40:*/		return 0x8218017C;
		  /* 8218017Ch */ case   41:  		/* bc 4, CR0_EQ, 660 */
		/* 8218017Ch case   41:*/		if ( !regs.CR[0].eq ) { return 0x82180410;  }
		/* 8218017Ch case   41:*/		return 0x82180180;
		  /* 82180180h */ case   42:  		/* lwz R31, <#[R1 + 100]> */
		/* 82180180h case   42:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 82180180h case   42:*/		return 0x82180184;
		  /* 82180184h */ case   43:  		/* cmplwi CR6, R31, 0 */
		/* 82180184h case   43:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82180184h case   43:*/		return 0x82180188;
		  /* 82180188h */ case   44:  		/* bc 12, CR6_EQ, 648 */
		/* 82180188h case   44:*/		if ( regs.CR[6].eq ) { return 0x82180410;  }
		/* 82180188h case   44:*/		return 0x8218018C;
		  /* 8218018Ch */ case   45:  		/* cmplw CR6, R31, R29 */
		/* 8218018Ch case   45:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 8218018Ch case   45:*/		return 0x82180190;
		  /* 82180190h */ case   46:  		/* bc 4, CR6_EQ, 640 */
		/* 82180190h case   46:*/		if ( !regs.CR[6].eq ) { return 0x82180410;  }
		/* 82180190h case   46:*/		return 0x82180194;
		  /* 82180194h */ case   47:  		/* lwz R11, <#[R31 + 48]> */
		/* 82180194h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82180194h case   47:*/		return 0x82180198;
		  /* 82180198h */ case   48:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 82180198h case   48:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 82180198h case   48:*/		return 0x8218019C;
		  /* 8218019Ch */ case   49:  		/* bc 12, CR0_EQ, 16 */
		/* 8218019Ch case   49:*/		if ( regs.CR[0].eq ) { return 0x821801AC;  }
		/* 8218019Ch case   49:*/		return 0x821801A0;
		  /* 821801A0h */ case   50:  		/* mr R4, R31 */
		/* 821801A0h case   50:*/		regs.R4 = regs.R31;
		/* 821801A0h case   50:*/		return 0x821801A4;
		  /* 821801A4h */ case   51:  		/* mr R3, R18 */
		/* 821801A4h case   51:*/		regs.R3 = regs.R18;
		/* 821801A4h case   51:*/		return 0x821801A8;
		  /* 821801A8h */ case   52:  		/* bl -14536 */
		/* 821801A8h case   52:*/		regs.LR = 0x821801AC; return 0x8217C8E0;
		/* 821801A8h case   52:*/		return 0x821801AC;
	}
	return 0x821801AC;
} // Block from 821800D8h-821801ACh (53 instructions)

//////////////////////////////////////////////////////
// Block at 821801ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821801AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821801AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821801AC);
		  /* 821801ACh */ case    0:  		/* mr R5, R31 */
		/* 821801ACh case    0:*/		regs.R5 = regs.R31;
		/* 821801ACh case    0:*/		return 0x821801B0;
		  /* 821801B0h */ case    1:  		/* mr R4, R30 */
		/* 821801B0h case    1:*/		regs.R4 = regs.R30;
		/* 821801B0h case    1:*/		return 0x821801B4;
		  /* 821801B4h */ case    2:  		/* mr R3, R18 */
		/* 821801B4h case    2:*/		regs.R3 = regs.R18;
		/* 821801B4h case    2:*/		return 0x821801B8;
		  /* 821801B8h */ case    3:  		/* bl -32120 */
		/* 821801B8h case    3:*/		regs.LR = 0x821801BC; return 0x82178440;
		/* 821801B8h case    3:*/		return 0x821801BC;
		  /* 821801BCh */ case    4:  		/* cmplwi CR0, R3, 0 */
		/* 821801BCh case    4:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821801BCh case    4:*/		return 0x821801C0;
		  /* 821801C0h */ case    5:  		/* bc 4, CR0_EQ, 28 */
		/* 821801C0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821801DC;  }
		/* 821801C0h case    5:*/		return 0x821801C4;
		  /* 821801C4h */ case    6:  		/* li R8, 1 */
		/* 821801C4h case    6:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821801C4h case    6:*/		return 0x821801C8;
		  /* 821801C8h */ case    7:  		/* mr R7, R31 */
		/* 821801C8h case    7:*/		regs.R7 = regs.R31;
		/* 821801C8h case    7:*/		return 0x821801CC;
		  /* 821801CCh */ case    8:  		/* li R6, 0 */
		/* 821801CCh case    8:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821801CCh case    8:*/		return 0x821801D0;
		  /* 821801D0h */ case    9:  		/* mr R5, R31 */
		/* 821801D0h case    9:*/		regs.R5 = regs.R31;
		/* 821801D0h case    9:*/		return 0x821801D4;
		  /* 821801D4h */ case   10:  		/* mr R3, R18 */
		/* 821801D4h case   10:*/		regs.R3 = regs.R18;
		/* 821801D4h case   10:*/		return 0x821801D8;
		  /* 821801D8h */ case   11:  		/* bl 430640 */
		/* 821801D8h case   11:*/		regs.LR = 0x821801DC; return 0x821E9408;
		/* 821801D8h case   11:*/		return 0x821801DC;
	}
	return 0x821801DC;
} // Block from 821801ACh-821801DCh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821801DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821801DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821801DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821801DC);
		  /* 821801DCh */ case    0:  		/* mr R8, R3 */
		/* 821801DCh case    0:*/		regs.R8 = regs.R3;
		/* 821801DCh case    0:*/		return 0x821801E0;
		  /* 821801E0h */ case    1:  		/* lbz R6, <#[R1 + 82]> */
		/* 821801E0h case    1:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000052) );
		/* 821801E0h case    1:*/		return 0x821801E4;
		  /* 821801E4h */ case    2:  		/* mr R9, R31 */
		/* 821801E4h case    2:*/		regs.R9 = regs.R31;
		/* 821801E4h case    2:*/		return 0x821801E8;
		  /* 821801E8h */ case    3:  		/* mr R7, R19 */
		/* 821801E8h case    3:*/		regs.R7 = regs.R19;
		/* 821801E8h case    3:*/		return 0x821801EC;
		  /* 821801ECh */ case    4:  		/* mr R5, R26 */
		/* 821801ECh case    4:*/		regs.R5 = regs.R26;
		/* 821801ECh case    4:*/		return 0x821801F0;
		  /* 821801F0h */ case    5:  		/* mr R4, R23 */
		/* 821801F0h case    5:*/		regs.R4 = regs.R23;
		/* 821801F0h case    5:*/		return 0x821801F4;
		  /* 821801F4h */ case    6:  		/* mr R3, R18 */
		/* 821801F4h case    6:*/		regs.R3 = regs.R18;
		/* 821801F4h case    6:*/		return 0x821801F8;
		  /* 821801F8h */ case    7:  		/* bl -6072 */
		/* 821801F8h case    7:*/		regs.LR = 0x821801FC; return 0x8217EA40;
		/* 821801F8h case    7:*/		return 0x821801FC;
		  /* 821801FCh */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821801FCh case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821801FCh case    8:*/		return 0x82180200;
		  /* 82180200h */ case    9:  		/* bc 12, CR0_EQ, 528 */
		/* 82180200h case    9:*/		if ( regs.CR[0].eq ) { return 0x82180410;  }
		/* 82180200h case    9:*/		return 0x82180204;
		  /* 82180204h */ case   10:  		/* mr R5, R18 */
		/* 82180204h case   10:*/		regs.R5 = regs.R18;
		/* 82180204h case   10:*/		return 0x82180208;
		  /* 82180208h */ case   11:  		/* mr R4, R29 */
		/* 82180208h case   11:*/		regs.R4 = regs.R29;
		/* 82180208h case   11:*/		return 0x8218020C;
		  /* 8218020Ch */ case   12:  		/* mr R3, R19 */
		/* 8218020Ch case   12:*/		regs.R3 = regs.R19;
		/* 8218020Ch case   12:*/		return 0x82180210;
		  /* 82180210h */ case   13:  		/* bl 718680 */
		/* 82180210h case   13:*/		regs.LR = 0x82180214; return 0x8222F968;
		/* 82180210h case   13:*/		return 0x82180214;
		  /* 82180214h */ case   14:  		/* li R6, 1 */
		/* 82180214h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 82180214h case   14:*/		return 0x82180218;
		  /* 82180218h */ case   15:  		/* li R5, 0 */
		/* 82180218h case   15:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82180218h case   15:*/		return 0x8218021C;
		  /* 8218021Ch */ case   16:  		/* mr R4, R23 */
		/* 8218021Ch case   16:*/		regs.R4 = regs.R23;
		/* 8218021Ch case   16:*/		return 0x82180220;
		  /* 82180220h */ case   17:  		/* mr R3, R18 */
		/* 82180220h case   17:*/		regs.R3 = regs.R18;
		/* 82180220h case   17:*/		return 0x82180224;
		  /* 82180224h */ case   18:  		/* bl 700836 */
		/* 82180224h case   18:*/		regs.LR = 0x82180228; return 0x8222B3C8;
		/* 82180224h case   18:*/		return 0x82180228;
		  /* 82180228h */ case   19:  		/* mr R3, R18 */
		/* 82180228h case   19:*/		regs.R3 = regs.R18;
		/* 82180228h case   19:*/		return 0x8218022C;
		  /* 8218022Ch */ case   20:  		/* bl 438516 */
		/* 8218022Ch case   20:*/		regs.LR = 0x82180230; return 0x821EB320;
		/* 8218022Ch case   20:*/		return 0x82180230;
		  /* 82180230h */ case   21:  		/* b 5660 */
		/* 82180230h case   21:*/		return 0x8218184C;
		/* 82180230h case   21:*/		return 0x82180234;
	}
	return 0x82180234;
} // Block from 821801DCh-82180234h (22 instructions)

//////////////////////////////////////////////////////
// Block at 82180234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180234);
		  /* 82180234h */ case    0:  		/* addi R8, R1, 104 */
		/* 82180234h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x68);
		/* 82180234h case    0:*/		return 0x82180238;
		  /* 82180238h */ case    1:  		/* addi R7, R1, 108 */
		/* 82180238h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x6C);
		/* 82180238h case    1:*/		return 0x8218023C;
		  /* 8218023Ch */ case    2:  		/* addi R6, R1, 87 */
		/* 8218023Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x57);
		/* 8218023Ch case    2:*/		return 0x82180240;
		  /* 82180240h */ case    3:  		/* bl -24256 */
		/* 82180240h case    3:*/		regs.LR = 0x82180244; return 0x8217A380;
		/* 82180240h case    3:*/		return 0x82180244;
		  /* 82180244h */ case    4:  		/* cmpwi CR6, R3, 4 */
		/* 82180244h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 82180244h case    4:*/		return 0x82180248;
		  /* 82180248h */ case    5:  		/* bc 4, CR6_EQ, 456 */
		/* 82180248h case    5:*/		if ( !regs.CR[6].eq ) { return 0x82180410;  }
		/* 82180248h case    5:*/		return 0x8218024C;
		  /* 8218024Ch */ case    6:  		/* lwz R28, <#[R1 + 104]> */
		/* 8218024Ch case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000068) );
		/* 8218024Ch case    6:*/		return 0x82180250;
		  /* 82180250h */ case    7:  		/* addi R8, R1, 88 */
		/* 82180250h case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x58);
		/* 82180250h case    7:*/		return 0x82180254;
		  /* 82180254h */ case    8:  		/* addi R7, R1, 85 */
		/* 82180254h case    8:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x55);
		/* 82180254h case    8:*/		return 0x82180258;
		  /* 82180258h */ case    9:  		/* addi R6, R1, 83 */
		/* 82180258h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x53);
		/* 82180258h case    9:*/		return 0x8218025C;
		  /* 8218025Ch */ case   10:  		/* li R5, 0 */
		/* 8218025Ch case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 8218025Ch case   10:*/		return 0x82180260;
		  /* 82180260h */ case   11:  		/* mr R4, R28 */
		/* 82180260h case   11:*/		regs.R4 = regs.R28;
		/* 82180260h case   11:*/		return 0x82180264;
		  /* 82180264h */ case   12:  		/* mr R3, R18 */
		/* 82180264h case   12:*/		regs.R3 = regs.R18;
		/* 82180264h case   12:*/		return 0x82180268;
		  /* 82180268h */ case   13:  		/* bl -30216 */
		/* 82180268h case   13:*/		regs.LR = 0x8218026C; return 0x82178C60;
		/* 82180268h case   13:*/		return 0x8218026C;
		  /* 8218026Ch */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 8218026Ch case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 8218026Ch case   14:*/		return 0x82180270;
		  /* 82180270h */ case   15:  		/* bc 12, CR0_EQ, 416 */
		/* 82180270h case   15:*/		if ( regs.CR[0].eq ) { return 0x82180410;  }
		/* 82180270h case   15:*/		return 0x82180274;
		  /* 82180274h */ case   16:  		/* lwz R27, <#[R1 + 108]> */
		/* 82180274h case   16:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x0000006C) );
		/* 82180274h case   16:*/		return 0x82180278;
		  /* 82180278h */ case   17:  		/* addi R8, R1, 112 */
		/* 82180278h case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 82180278h case   17:*/		return 0x8218027C;
		  /* 8218027Ch */ case   18:  		/* addi R7, R1, 86 */
		/* 8218027Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x56);
		/* 8218027Ch case   18:*/		return 0x82180280;
		  /* 82180280h */ case   19:  		/* addi R6, R1, 84 */
		/* 82180280h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 82180280h case   19:*/		return 0x82180284;
		  /* 82180284h */ case   20:  		/* li R5, 0 */
		/* 82180284h case   20:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 82180284h case   20:*/		return 0x82180288;
		  /* 82180288h */ case   21:  		/* mr R4, R27 */
		/* 82180288h case   21:*/		regs.R4 = regs.R27;
		/* 82180288h case   21:*/		return 0x8218028C;
		  /* 8218028Ch */ case   22:  		/* mr R3, R18 */
		/* 8218028Ch case   22:*/		regs.R3 = regs.R18;
		/* 8218028Ch case   22:*/		return 0x82180290;
		  /* 82180290h */ case   23:  		/* bl -30256 */
		/* 82180290h case   23:*/		regs.LR = 0x82180294; return 0x82178C60;
		/* 82180290h case   23:*/		return 0x82180294;
		  /* 82180294h */ case   24:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82180294h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82180294h case   24:*/		return 0x82180298;
		  /* 82180298h */ case   25:  		/* bc 12, CR0_EQ, 376 */
		/* 82180298h case   25:*/		if ( regs.CR[0].eq ) { return 0x82180410;  }
		/* 82180298h case   25:*/		return 0x8218029C;
		  /* 8218029Ch */ case   26:  		/* lbz R11, <#[R1 + 83]> */
		/* 8218029Ch case   26:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000053) );
		/* 8218029Ch case   26:*/		return 0x821802A0;
		  /* 821802A0h */ case   27:  		/* cmplwi CR0, R11, 0 */
		/* 821802A0h case   27:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821802A0h case   27:*/		return 0x821802A4;
		  /* 821802A4h */ case   28:  		/* bc 4, CR0_EQ, 364 */
		/* 821802A4h case   28:*/		if ( !regs.CR[0].eq ) { return 0x82180410;  }
		/* 821802A4h case   28:*/		return 0x821802A8;
		  /* 821802A8h */ case   29:  		/* lbz R11, <#[R1 + 84]> */
		/* 821802A8h case   29:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821802A8h case   29:*/		return 0x821802AC;
		  /* 821802ACh */ case   30:  		/* cmplwi CR0, R11, 0 */
		/* 821802ACh case   30:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821802ACh case   30:*/		return 0x821802B0;
		  /* 821802B0h */ case   31:  		/* bc 4, CR0_EQ, 352 */
		/* 821802B0h case   31:*/		if ( !regs.CR[0].eq ) { return 0x82180410;  }
		/* 821802B0h case   31:*/		return 0x821802B4;
		  /* 821802B4h */ case   32:  		/* lbz R11, <#[R1 + 85]> */
		/* 821802B4h case   32:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000055) );
		/* 821802B4h case   32:*/		return 0x821802B8;
		  /* 821802B8h */ case   33:  		/* cmplwi CR0, R11, 0 */
		/* 821802B8h case   33:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821802B8h case   33:*/		return 0x821802BC;
		  /* 821802BCh */ case   34:  		/* bc 4, CR0_EQ, 340 */
		/* 821802BCh case   34:*/		if ( !regs.CR[0].eq ) { return 0x82180410;  }
		/* 821802BCh case   34:*/		return 0x821802C0;
		  /* 821802C0h */ case   35:  		/* lbz R11, <#[R1 + 86]> */
		/* 821802C0h case   35:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000056) );
		/* 821802C0h case   35:*/		return 0x821802C4;
		  /* 821802C4h */ case   36:  		/* cmplwi CR0, R11, 0 */
		/* 821802C4h case   36:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821802C4h case   36:*/		return 0x821802C8;
		  /* 821802C8h */ case   37:  		/* bc 4, CR0_EQ, 328 */
		/* 821802C8h case   37:*/		if ( !regs.CR[0].eq ) { return 0x82180410;  }
		/* 821802C8h case   37:*/		return 0x821802CC;
		  /* 821802CCh */ case   38:  		/* lwz R11, <#[R1 + 112]> */
		/* 821802CCh case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000070) );
		/* 821802CCh case   38:*/		return 0x821802D0;
		  /* 821802D0h */ case   39:  		/* lwz R31, <#[R1 + 88]> */
		/* 821802D0h case   39:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000058) );
		/* 821802D0h case   39:*/		return 0x821802D4;
		  /* 821802D4h */ case   40:  		/* cmplw CR6, R31, R11 */
		/* 821802D4h case   40:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821802D4h case   40:*/		return 0x821802D8;
		  /* 821802D8h */ case   41:  		/* bc 4, CR6_EQ, 312 */
		/* 821802D8h case   41:*/		if ( !regs.CR[6].eq ) { return 0x82180410;  }
		/* 821802D8h case   41:*/		return 0x821802DC;
		  /* 821802DCh */ case   42:  		/* lwz R11, <#[R31 + 48]> */
		/* 821802DCh case   42:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 821802DCh case   42:*/		return 0x821802E0;
		  /* 821802E0h */ case   43:  		/* rlwinm. R11, R11, 0, 0, 0 */
		/* 821802E0h case   43:*/		cpu::op::rlwinm<1,0,0,0>(regs,&regs.R11,regs.R11);
		/* 821802E0h case   43:*/		return 0x821802E4;
		  /* 821802E4h */ case   44:  		/* bc 12, CR0_EQ, 16 */
		/* 821802E4h case   44:*/		if ( regs.CR[0].eq ) { return 0x821802F4;  }
		/* 821802E4h case   44:*/		return 0x821802E8;
		  /* 821802E8h */ case   45:  		/* mr R4, R31 */
		/* 821802E8h case   45:*/		regs.R4 = regs.R31;
		/* 821802E8h case   45:*/		return 0x821802EC;
		  /* 821802ECh */ case   46:  		/* mr R3, R18 */
		/* 821802ECh case   46:*/		regs.R3 = regs.R18;
		/* 821802ECh case   46:*/		return 0x821802F0;
		  /* 821802F0h */ case   47:  		/* bl -14864 */
		/* 821802F0h case   47:*/		regs.LR = 0x821802F4; return 0x8217C8E0;
		/* 821802F0h case   47:*/		return 0x821802F4;
	}
	return 0x821802F4;
} // Block from 82180234h-821802F4h (48 instructions)

//////////////////////////////////////////////////////
// Block at 821802F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821802F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821802F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821802F4);
		  /* 821802F4h */ case    0:  		/* mr R5, R31 */
		/* 821802F4h case    0:*/		regs.R5 = regs.R31;
		/* 821802F4h case    0:*/		return 0x821802F8;
		  /* 821802F8h */ case    1:  		/* mr R4, R27 */
		/* 821802F8h case    1:*/		regs.R4 = regs.R27;
		/* 821802F8h case    1:*/		return 0x821802FC;
		  /* 821802FCh */ case    2:  		/* mr R3, R18 */
		/* 821802FCh case    2:*/		regs.R3 = regs.R18;
		/* 821802FCh case    2:*/		return 0x82180300;
		  /* 82180300h */ case    3:  		/* bl -32448 */
		/* 82180300h case    3:*/		regs.LR = 0x82180304; return 0x82178440;
		/* 82180300h case    3:*/		return 0x82180304;
		  /* 82180304h */ case    4:  		/* mr R29, R3 */
		/* 82180304h case    4:*/		regs.R29 = regs.R3;
		/* 82180304h case    4:*/		return 0x82180308;
		  /* 82180308h */ case    5:  		/* mr R5, R31 */
		/* 82180308h case    5:*/		regs.R5 = regs.R31;
		/* 82180308h case    5:*/		return 0x8218030C;
		  /* 8218030Ch */ case    6:  		/* mr R4, R28 */
		/* 8218030Ch case    6:*/		regs.R4 = regs.R28;
		/* 8218030Ch case    6:*/		return 0x82180310;
		  /* 82180310h */ case    7:  		/* mr R3, R18 */
		/* 82180310h case    7:*/		regs.R3 = regs.R18;
		/* 82180310h case    7:*/		return 0x82180314;
		  /* 82180314h */ case    8:  		/* bl -32468 */
		/* 82180314h case    8:*/		regs.LR = 0x82180318; return 0x82178440;
		/* 82180314h case    8:*/		return 0x82180318;
		  /* 82180318h */ case    9:  		/* mr R30, R3 */
		/* 82180318h case    9:*/		regs.R30 = regs.R3;
		/* 82180318h case    9:*/		return 0x8218031C;
		  /* 8218031Ch */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 8218031Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 8218031Ch case   10:*/		return 0x82180320;
		  /* 82180320h */ case   11:  		/* bc 4, CR6_EQ, 36 */
		/* 82180320h case   11:*/		if ( !regs.CR[6].eq ) { return 0x82180344;  }
		/* 82180320h case   11:*/		return 0x82180324;
		  /* 82180324h */ case   12:  		/* li R8, 1 */
		/* 82180324h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 82180324h case   12:*/		return 0x82180328;
		  /* 82180328h */ case   13:  		/* mr R7, R31 */
		/* 82180328h case   13:*/		regs.R7 = regs.R31;
		/* 82180328h case   13:*/		return 0x8218032C;
		  /* 8218032Ch */ case   14:  		/* li R6, 0 */
		/* 8218032Ch case   14:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 8218032Ch case   14:*/		return 0x82180330;
		  /* 82180330h */ case   15:  		/* mr R5, R31 */
		/* 82180330h case   15:*/		regs.R5 = regs.R31;
		/* 82180330h case   15:*/		return 0x82180334;
		  /* 82180334h */ case   16:  		/* mr R4, R27 */
		/* 82180334h case   16:*/		regs.R4 = regs.R27;
		/* 82180334h case   16:*/		return 0x82180338;
		  /* 82180338h */ case   17:  		/* mr R3, R18 */
		/* 82180338h case   17:*/		regs.R3 = regs.R18;
		/* 82180338h case   17:*/		return 0x8218033C;
		  /* 8218033Ch */ case   18:  		/* bl 430284 */
		/* 8218033Ch case   18:*/		regs.LR = 0x82180340; return 0x821E9408;
		/* 8218033Ch case   18:*/		return 0x82180340;
		  /* 82180340h */ case   19:  		/* mr R29, R3 */
		/* 82180340h case   19:*/		regs.R29 = regs.R3;
		/* 82180340h case   19:*/		return 0x82180344;
	}
	return 0x82180344;
} // Block from 821802F4h-82180344h (20 instructions)

//////////////////////////////////////////////////////
// Block at 82180344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180344);
		  /* 82180344h */ case    0:  		/* cmplwi CR6, R30, 0 */
		/* 82180344h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 82180344h case    0:*/		return 0x82180348;
		  /* 82180348h */ case    1:  		/* bc 4, CR6_EQ, 36 */
		/* 82180348h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218036C;  }
		/* 82180348h case    1:*/		return 0x8218034C;
		  /* 8218034Ch */ case    2:  		/* li R8, 1 */
		/* 8218034Ch case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 8218034Ch case    2:*/		return 0x82180350;
		  /* 82180350h */ case    3:  		/* mr R7, R31 */
		/* 82180350h case    3:*/		regs.R7 = regs.R31;
		/* 82180350h case    3:*/		return 0x82180354;
		  /* 82180354h */ case    4:  		/* li R6, 0 */
		/* 82180354h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82180354h case    4:*/		return 0x82180358;
		  /* 82180358h */ case    5:  		/* mr R5, R31 */
		/* 82180358h case    5:*/		regs.R5 = regs.R31;
		/* 82180358h case    5:*/		return 0x8218035C;
		  /* 8218035Ch */ case    6:  		/* mr R4, R28 */
		/* 8218035Ch case    6:*/		regs.R4 = regs.R28;
		/* 8218035Ch case    6:*/		return 0x82180360;
		  /* 82180360h */ case    7:  		/* mr R3, R18 */
		/* 82180360h case    7:*/		regs.R3 = regs.R18;
		/* 82180360h case    7:*/		return 0x82180364;
		  /* 82180364h */ case    8:  		/* bl 430244 */
		/* 82180364h case    8:*/		regs.LR = 0x82180368; return 0x821E9408;
		/* 82180364h case    8:*/		return 0x82180368;
		  /* 82180368h */ case    9:  		/* mr R30, R3 */
		/* 82180368h case    9:*/		regs.R30 = regs.R3;
		/* 82180368h case    9:*/		return 0x8218036C;
	}
	return 0x8218036C;
} // Block from 82180344h-8218036Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 8218036Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218036C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218036C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218036C);
		  /* 8218036Ch */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 8218036Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 8218036Ch case    0:*/		return 0x82180370;
		  /* 82180370h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 82180370h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 82180370h case    1:*/		return 0x82180374;
		  /* 82180374h */ case    2:  		/* bc 12, CR6_EQ, 116 */
		/* 82180374h case    2:*/		if ( regs.CR[6].eq ) { return 0x821803E8;  }
		/* 82180374h case    2:*/		return 0x82180378;
		  /* 82180378h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 82180378h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 82180378h case    3:*/		return 0x8218037C;
		  /* 8218037Ch */ case    4:  		/* cmplw CR6, R11, R29 */
		/* 8218037Ch case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 8218037Ch case    4:*/		return 0x82180380;
		  /* 82180380h */ case    5:  		/* bc 12, CR6_EQ, 12 */
		/* 82180380h case    5:*/		if ( regs.CR[6].eq ) { return 0x8218038C;  }
		/* 82180380h case    5:*/		return 0x82180384;
		  /* 82180384h */ case    6:  		/* cmplw CR6, R11, R30 */
		/* 82180384h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 82180384h case    6:*/		return 0x82180388;
		  /* 82180388h */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 82180388h case    7:*/		if ( !regs.CR[6].eq ) { return 0x82180394;  }
		/* 82180388h case    7:*/		return 0x8218038C;
	}
	return 0x8218038C;
} // Block from 8218036Ch-8218038Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 8218038Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218038C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218038C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218038C);
		  /* 8218038Ch */ case    0:  		/* lwz R10, <#[R10 + 12]> */
		/* 8218038Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 8218038Ch case    0:*/		return 0x82180390;
		  /* 82180390h */ case    1:  		/* b -32 */
		/* 82180390h case    1:*/		return 0x82180370;
		/* 82180390h case    1:*/		return 0x82180394;
	}
	return 0x82180394;
} // Block from 8218038Ch-82180394h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82180394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180394);
		  /* 82180394h */ case    0:  		/* lwz R10, <#[R19 + 48]> */
		/* 82180394h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000030) );
		/* 82180394h case    0:*/		return 0x82180398;
		  /* 82180398h */ case    1:  		/* li R9, 1 */
		/* 82180398h case    1:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 82180398h case    1:*/		return 0x8218039C;
		  /* 8218039Ch */ case    2:  		/* lwz R8, <#[R11 + 40]> */
		/* 8218039Ch case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x00000028) );
		/* 8218039Ch case    2:*/		return 0x821803A0;
		  /* 821803A0h */ case    3:  		/* mr R3, R18 */
		/* 821803A0h case    3:*/		regs.R3 = regs.R18;
		/* 821803A0h case    3:*/		return 0x821803A4;
		  /* 821803A4h */ case    4:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 821803A4h case    4:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 821803A4h case    4:*/		return 0x821803A8;
		  /* 821803A8h */ case    5:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821803A8h case    5:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821803A8h case    5:*/		return 0x821803AC;
		  /* 821803ACh */ case    6:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821803ACh case    6:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821803ACh case    6:*/		return 0x821803B0;
		  /* 821803B0h */ case    7:  		/* addi R11, R11, 1 */
		/* 821803B0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821803B0h case    7:*/		return 0x821803B4;
		  /* 821803B4h */ case    8:  		/* slw R10, R9, R10 */
		/* 821803B4h case    8:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821803B4h case    8:*/		return 0x821803B8;
		  /* 821803B8h */ case    9:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821803B8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821803B8h case    9:*/		return 0x821803BC;
		  /* 821803BCh */ case   10:  		/* lwzx R11, <#[R11 + R8]> */
		/* 821803BCh case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821803BCh case   10:*/		return 0x821803C0;
		  /* 821803C0h */ case   11:  		/* and. R11, R11, R10 */
		/* 821803C0h case   11:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821803C0h case   11:*/		return 0x821803C4;
		  /* 821803C4h */ case   12:  		/* bc 4, CR0_EQ, 5328 */
		/* 821803C4h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82181894;  }
		/* 821803C4h case   12:*/		return 0x821803C8;
		  /* 821803C8h */ case   13:  		/* li R8, 1 */
		/* 821803C8h case   13:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821803C8h case   13:*/		return 0x821803CC;
		  /* 821803CCh */ case   14:  		/* mr R7, R31 */
		/* 821803CCh case   14:*/		regs.R7 = regs.R31;
		/* 821803CCh case   14:*/		return 0x821803D0;
		  /* 821803D0h */ case   15:  		/* li R6, 0 */
		/* 821803D0h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821803D0h case   15:*/		return 0x821803D4;
		  /* 821803D4h */ case   16:  		/* mr R5, R31 */
		/* 821803D4h case   16:*/		regs.R5 = regs.R31;
		/* 821803D4h case   16:*/		return 0x821803D8;
		  /* 821803D8h */ case   17:  		/* mr R4, R19 */
		/* 821803D8h case   17:*/		regs.R4 = regs.R19;
		/* 821803D8h case   17:*/		return 0x821803DC;
		  /* 821803DCh */ case   18:  		/* bl 430124 */
		/* 821803DCh case   18:*/		regs.LR = 0x821803E0; return 0x821E9408;
		/* 821803DCh case   18:*/		return 0x821803E0;
		  /* 821803E0h */ case   19:  		/* mr R31, R3 */
		/* 821803E0h case   19:*/		regs.R31 = regs.R3;
		/* 821803E0h case   19:*/		return 0x821803E4;
		  /* 821803E4h */ case   20:  		/* stw R3, <#[R1 + 88]> */
		/* 821803E4h case   20:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000058) );
		/* 821803E4h case   20:*/		return 0x821803E8;
	}
	return 0x821803E8;
} // Block from 82180394h-821803E8h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821803E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821803E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821803E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821803E8);
		  /* 821803E8h */ case    0:  		/* mr R9, R31 */
		/* 821803E8h case    0:*/		regs.R9 = regs.R31;
		/* 821803E8h case    0:*/		return 0x821803EC;
		  /* 821803ECh */ case    1:  		/* lbz R6, <#[R1 + 87]> */
		/* 821803ECh case    1:*/		cpu::mem::load8z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000057) );
		/* 821803ECh case    1:*/		return 0x821803F0;
		  /* 821803F0h */ case    2:  		/* mr R8, R30 */
		/* 821803F0h case    2:*/		regs.R8 = regs.R30;
		/* 821803F0h case    2:*/		return 0x821803F4;
		  /* 821803F4h */ case    3:  		/* mr R7, R29 */
		/* 821803F4h case    3:*/		regs.R7 = regs.R29;
		/* 821803F4h case    3:*/		return 0x821803F8;
		  /* 821803F8h */ case    4:  		/* mr R5, R26 */
		/* 821803F8h case    4:*/		regs.R5 = regs.R26;
		/* 821803F8h case    4:*/		return 0x821803FC;
		  /* 821803FCh */ case    5:  		/* mr R4, R23 */
		/* 821803FCh case    5:*/		regs.R4 = regs.R23;
		/* 821803FCh case    5:*/		return 0x82180400;
		  /* 82180400h */ case    6:  		/* mr R3, R18 */
		/* 82180400h case    6:*/		regs.R3 = regs.R18;
		/* 82180400h case    6:*/		return 0x82180404;
		  /* 82180404h */ case    7:  		/* bl -6596 */
		/* 82180404h case    7:*/		regs.LR = 0x82180408; return 0x8217EA40;
		/* 82180404h case    7:*/		return 0x82180408;
		  /* 82180408h */ case    8:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 82180408h case    8:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 82180408h case    8:*/		return 0x8218040C;
		  /* 8218040Ch */ case    9:  		/* bc 4, CR0_EQ, 320 */
		/* 8218040Ch case    9:*/		if ( !regs.CR[0].eq ) { return 0x8218054C;  }
		/* 8218040Ch case    9:*/		return 0x82180410;
	}
	return 0x82180410;
} // Block from 821803E8h-82180410h (10 instructions)

//////////////////////////////////////////////////////
// Block at 82180410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180410);
		  /* 82180410h */ case    0:  		/* lwz R11, <#[R20 + 8]> */
		/* 82180410h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 82180410h case    0:*/		return 0x82180414;
		  /* 82180414h */ case    1:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 82180414h case    1:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 82180414h case    1:*/		return 0x82180418;
		  /* 82180418h */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 82180418h case    2:*/		if ( regs.CR[0].eq ) { return 0x82180424;  }
		/* 82180418h case    2:*/		return 0x8218041C;
		  /* 8218041Ch */ case    3:  		/* li R11, 1 */
		/* 8218041Ch case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 8218041Ch case    3:*/		return 0x82180420;
		  /* 82180420h */ case    4:  		/* b 12 */
		/* 82180420h case    4:*/		return 0x8218042C;
		/* 82180420h case    4:*/		return 0x82180424;
	}
	return 0x82180424;
} // Block from 82180410h-82180424h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82180424h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180424( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180424) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180424);
		  /* 82180424h */ case    0:  		/* nor R11, R11, R11 */
		/* 82180424h case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 82180424h case    0:*/		return 0x82180428;
		  /* 82180428h */ case    1:  		/* rlwinm R11, R11, 25, 31, 31 */
		/* 82180428h case    1:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R11,regs.R11);
		/* 82180428h case    1:*/		return 0x8218042C;
	}
	return 0x8218042C;
} // Block from 82180424h-8218042Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218042Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218042C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218042C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218042C);
		  /* 8218042Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 8218042Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 8218042Ch case    0:*/		return 0x82180430;
		  /* 82180430h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 82180430h case    1:*/		if ( regs.CR[0].eq ) { return 0x82180440;  }
		/* 82180430h case    1:*/		return 0x82180434;
		  /* 82180434h */ case    2:  		/* li R4, 3588 */
		/* 82180434h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xE04);
		/* 82180434h case    2:*/		return 0x82180438;
		  /* 82180438h */ case    3:  		/* mr R3, R18 */
		/* 82180438h case    3:*/		regs.R3 = regs.R18;
		/* 82180438h case    3:*/		return 0x8218043C;
		  /* 8218043Ch */ case    4:  		/* bl -190148 */
		/* 8218043Ch case    4:*/		regs.LR = 0x82180440; return 0x82151D78;
		/* 8218043Ch case    4:*/		return 0x82180440;
	}
	return 0x82180440;
} // Block from 8218042Ch-82180440h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82180440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180440);
		  /* 82180440h */ case    0:  		/* lwz R11, <#[R19 + 76]> */
		/* 82180440h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000004C) );
		/* 82180440h case    0:*/		return 0x82180444;
		  /* 82180444h */ case    1:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 82180444h case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 82180444h case    1:*/		return 0x82180448;
		  /* 82180448h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 82180448h case    2:*/		if ( !regs.CR[0].eq ) { return 0x82180458;  }
		/* 82180448h case    2:*/		return 0x8218044C;
		  /* 8218044Ch */ case    3:  		/* lwz R11, <#[R23 + 8]> */
		/* 8218044Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 8218044Ch case    3:*/		return 0x82180450;
		  /* 82180450h */ case    4:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 82180450h case    4:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 82180450h case    4:*/		return 0x82180454;
		  /* 82180454h */ case    5:  		/* bc 12, CR0_EQ, 5112 */
		/* 82180454h case    5:*/		if ( regs.CR[0].eq ) { return 0x8218184C;  }
		/* 82180454h case    5:*/		return 0x82180458;
	}
	return 0x82180458;
} // Block from 82180440h-82180458h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82180458h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180458);
		  /* 82180458h */ case    0:  		/* cmplwi CR6, R24, 3 */
		/* 82180458h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000003);
		/* 82180458h case    0:*/		return 0x8218045C;
		  /* 8218045Ch */ case    1:  		/* bc 12, CR6_EQ, 440 */
		/* 8218045Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x82180614;  }
		/* 8218045Ch case    1:*/		return 0x82180460;
		  /* 82180460h */ case    2:  		/* lwz R10, <#[R20 + 12]> */
		/* 82180460h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000000C) );
		/* 82180460h case    2:*/		return 0x82180464;
		  /* 82180464h */ case    3:  		/* li R11, 1 */
		/* 82180464h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82180464h case    3:*/		return 0x82180468;
		  /* 82180468h */ case    4:  		/* rlwinm R9, R10, 31, 31, 31 */
		/* 82180468h case    4:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R9,regs.R10);
		/* 82180468h case    4:*/		return 0x8218046C;
		  /* 8218046Ch */ case    5:  		/* subfic R9, R9, 1 */
		/* 8218046Ch case    5:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x1);
		/* 8218046Ch case    5:*/		return 0x82180470;
		  /* 82180470h */ case    6:  		/* slw R11, R11, R9 */
		/* 82180470h case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82180470h case    6:*/		return 0x82180474;
		  /* 82180474h */ case    7:  		/* cmplw CR6, R24, R11 */
		/* 82180474h case    7:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 82180474h case    7:*/		return 0x82180478;
		  /* 82180478h */ case    8:  		/* bc 12, CR6_EQ, 412 */
		/* 82180478h case    8:*/		if ( regs.CR[6].eq ) { return 0x82180614;  }
		/* 82180478h case    8:*/		return 0x8218047C;
		  /* 8218047Ch */ case    9:  		/* lwz R9, <#[R19 + 12]> */
		/* 8218047Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R19 + 0x0000000C) );
		/* 8218047Ch case    9:*/		return 0x82180480;
		  /* 82180480h */ case   10:  		/* cmplwi CR6, R9, 0 */
		/* 82180480h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82180480h case   10:*/		return 0x82180484;
		  /* 82180484h */ case   11:  		/* bc 12, CR6_EQ, 28 */
		/* 82180484h case   11:*/		if ( regs.CR[6].eq ) { return 0x821804A0;  }
		/* 82180484h case   11:*/		return 0x82180488;
		  /* 82180488h */ case   12:  		/* lwz R11, <#[R9]> */
		/* 82180488h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 82180488h case   12:*/		return 0x8218048C;
		  /* 8218048Ch */ case   13:  		/* lwz R8, <#[R20]> */
		/* 8218048Ch case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000000) );
		/* 8218048Ch case   13:*/		return 0x82180490;
		  /* 82180490h */ case   14:  		/* cmplw CR6, R11, R8 */
		/* 82180490h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 82180490h case   14:*/		return 0x82180494;
		  /* 82180494h */ case   15:  		/* bc 4, CR6_EQ, 16 */
		/* 82180494h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821804A4;  }
		/* 82180494h case   15:*/		return 0x82180498;
		  /* 82180498h */ case   16:  		/* lwz R9, <#[R9 + 8]> */
		/* 82180498h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 82180498h case   16:*/		return 0x8218049C;
		  /* 8218049Ch */ case   17:  		/* b -28 */
		/* 8218049Ch case   17:*/		return 0x82180480;
		/* 8218049Ch case   17:*/		return 0x821804A0;
	}
	return 0x821804A0;
} // Block from 82180458h-821804A0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821804A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821804A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821804A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821804A0);
		  /* 821804A0h */ case    0:  		/* li R11, 0 */
		/* 821804A0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821804A0h case    0:*/		return 0x821804A4;
	}
	return 0x821804A4;
} // Block from 821804A0h-821804A4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821804A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821804A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821804A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821804A4);
		  /* 821804A4h */ case    0:  		/* nor R9, R10, R10 */
		/* 821804A4h case    0:*/		cpu::op::nor<0>(regs,&regs.R9,regs.R10,regs.R10);
		/* 821804A4h case    0:*/		return 0x821804A8;
		  /* 821804A8h */ case    1:  		/* stw R11, <#[R20]> */
		/* 821804A8h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821804A8h case    1:*/		return 0x821804AC;
		  /* 821804ACh */ case    2:  		/* mr R3, R18 */
		/* 821804ACh case    2:*/		regs.R3 = regs.R18;
		/* 821804ACh case    2:*/		return 0x821804B0;
		  /* 821804B0h */ case    3:  		/* rlwimi R9, R10, 0, 31, 29 */
		/* 821804B0h case    3:*/		cpu::op::rlwimi<0,0,31,29>(regs,&regs.R9,regs.R10);
		/* 821804B0h case    3:*/		return 0x821804B4;
		  /* 821804B4h */ case    4:  		/* stw R9, <#[R20 + 12]> */
		/* 821804B4h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R20 + 0x0000000C) );
		/* 821804B4h case    4:*/		return 0x821804B8;
		  /* 821804B8h */ case    5:  		/* lwz R11, <#[R23 + 8]> */
		/* 821804B8h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821804B8h case    5:*/		return 0x821804BC;
		  /* 821804BCh */ case    6:  		/* nor R10, R11, R11 */
		/* 821804BCh case    6:*/		cpu::op::nor<0>(regs,&regs.R10,regs.R11,regs.R11);
		/* 821804BCh case    6:*/		return 0x821804C0;
		  /* 821804C0h */ case    7:  		/* rlwimi R10, R11, 0, 14, 12 */
		/* 821804C0h case    7:*/		cpu::op::rlwimi<0,0,14,12>(regs,&regs.R10,regs.R11);
		/* 821804C0h case    7:*/		return 0x821804C4;
		  /* 821804C4h */ case    8:  		/* stw R10, <#[R23 + 8]> */
		/* 821804C4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 821804C4h case    8:*/		return 0x821804C8;
		  /* 821804C8h */ case    9:  		/* bl 437848 */
		/* 821804C8h case    9:*/		regs.LR = 0x821804CC; return 0x821EB320;
		/* 821804C8h case    9:*/		return 0x821804CC;
		  /* 821804CCh */ case   10:  		/* b -1224 */
		/* 821804CCh case   10:*/		return 0x82180004;
		/* 821804CCh case   10:*/		return 0x821804D0;
	}
	return 0x821804D0;
} // Block from 821804A4h-821804D0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821804D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821804D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821804D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821804D0);
		  /* 821804D0h */ case    0:  		/* lwz R11, <#[R19 + 12]> */
		/* 821804D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000000C) );
		/* 821804D0h case    0:*/		return 0x821804D4;
		  /* 821804D4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821804D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821804D4h case    1:*/		return 0x821804D8;
		  /* 821804D8h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821804D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821804EC;  }
		/* 821804D8h case    2:*/		return 0x821804DC;
		  /* 821804DCh */ case    3:  		/* lwz R11, <#[R11 + 8]> */
		/* 821804DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821804DCh case    3:*/		return 0x821804E0;
		  /* 821804E0h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821804E0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821804E0h case    4:*/		return 0x821804E4;
		  /* 821804E4h */ case    5:  		/* li R11, 1 */
		/* 821804E4h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821804E4h case    5:*/		return 0x821804E8;
		  /* 821804E8h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821804E8h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821804F0;  }
		/* 821804E8h case    6:*/		return 0x821804EC;
	}
	return 0x821804EC;
} // Block from 821804D0h-821804ECh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821804ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821804EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821804EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821804EC);
		  /* 821804ECh */ case    0:  		/* li R11, 0 */
		/* 821804ECh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821804ECh case    0:*/		return 0x821804F0;
	}
	return 0x821804F0;
} // Block from 821804ECh-821804F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821804F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821804F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821804F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821804F0);
		  /* 821804F0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821804F0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821804F0h case    0:*/		return 0x821804F4;
		  /* 821804F4h */ case    1:  		/* bc 12, CR0_EQ, 28 */
		/* 821804F4h case    1:*/		if ( regs.CR[0].eq ) { return 0x82180510;  }
		/* 821804F4h case    1:*/		return 0x821804F8;
		  /* 821804F8h */ case    2:  		/* lwz R11, <#[R19 + 76]> */
		/* 821804F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000004C) );
		/* 821804F8h case    2:*/		return 0x821804FC;
		  /* 821804FCh */ case    3:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821804FCh case    3:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821804FCh case    3:*/		return 0x82180500;
		  /* 82180500h */ case    4:  		/* bc 4, CR0_EQ, 4988 */
		/* 82180500h case    4:*/		if ( !regs.CR[0].eq ) { return 0x8218187C;  }
		/* 82180500h case    4:*/		return 0x82180504;
		  /* 82180504h */ case    5:  		/* lwz R11, <#[R23 + 8]> */
		/* 82180504h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82180504h case    5:*/		return 0x82180508;
		  /* 82180508h */ case    6:  		/* rlwinm. R11, R11, 5, 31, 31 */
		/* 82180508h case    6:*/		cpu::op::rlwinm<1,5,31,31>(regs,&regs.R11,regs.R11);
		/* 82180508h case    6:*/		return 0x8218050C;
		  /* 8218050Ch */ case    7:  		/* bc 4, CR0_EQ, 4976 */
		/* 8218050Ch case    7:*/		if ( !regs.CR[0].eq ) { return 0x8218187C;  }
		/* 8218050Ch case    7:*/		return 0x82180510;
	}
	return 0x82180510;
} // Block from 821804F0h-82180510h (8 instructions)

//////////////////////////////////////////////////////
// Block at 82180510h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180510( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180510) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180510);
		  /* 82180510h */ case    0:  		/* cmpwi CR6, R22, 2 */
		/* 82180510h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000002);
		/* 82180510h case    0:*/		return 0x82180514;
		  /* 82180514h */ case    1:  		/* bc 4, CR6_EQ, 4920 */
		/* 82180514h case    1:*/		if ( !regs.CR[6].eq ) { return 0x8218184C;  }
		/* 82180514h case    1:*/		return 0x82180518;
		  /* 82180518h */ case    2:  		/* lwz R11, <#[R20 + 8]> */
		/* 82180518h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 82180518h case    2:*/		return 0x8218051C;
		  /* 8218051Ch */ case    3:  		/* rlwinm. R10, R11, 0, 30, 31 */
		/* 8218051Ch case    3:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R10,regs.R11);
		/* 8218051Ch case    3:*/		return 0x82180520;
		  /* 82180520h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 82180520h case    4:*/		if ( regs.CR[0].eq ) { return 0x8218052C;  }
		/* 82180520h case    4:*/		return 0x82180524;
		  /* 82180524h */ case    5:  		/* li R11, 1 */
		/* 82180524h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 82180524h case    5:*/		return 0x82180528;
		  /* 82180528h */ case    6:  		/* b 12 */
		/* 82180528h case    6:*/		return 0x82180534;
		/* 82180528h case    6:*/		return 0x8218052C;
	}
	return 0x8218052C;
} // Block from 82180510h-8218052Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 8218052Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218052C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218052C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218052C);
		  /* 8218052Ch */ case    0:  		/* nor R11, R11, R11 */
		/* 8218052Ch case    0:*/		cpu::op::nor<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 8218052Ch case    0:*/		return 0x82180530;
		  /* 82180530h */ case    1:  		/* rlwinm R11, R11, 25, 31, 31 */
		/* 82180530h case    1:*/		cpu::op::rlwinm<0,25,31,31>(regs,&regs.R11,regs.R11);
		/* 82180530h case    1:*/		return 0x82180534;
	}
	return 0x82180534;
} // Block from 8218052Ch-82180534h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82180534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180534);
		  /* 82180534h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 82180534h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 82180534h case    0:*/		return 0x82180538;
		  /* 82180538h */ case    1:  		/* bc 12, CR0_EQ, 4884 */
		/* 82180538h case    1:*/		if ( regs.CR[0].eq ) { return 0x8218184C;  }
		/* 82180538h case    1:*/		return 0x8218053C;
		  /* 8218053Ch */ case    2:  		/* li R4, 3588 */
		/* 8218053Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0xE04);
		/* 8218053Ch case    2:*/		return 0x82180540;
		  /* 82180540h */ case    3:  		/* mr R3, R18 */
		/* 82180540h case    3:*/		regs.R3 = regs.R18;
		/* 82180540h case    3:*/		return 0x82180544;
		  /* 82180544h */ case    4:  		/* bl -190412 */
		/* 82180544h case    4:*/		regs.LR = 0x82180548; return 0x82151D78;
		/* 82180544h case    4:*/		return 0x82180548;
		  /* 82180548h */ case    5:  		/* b 4868 */
		/* 82180548h case    5:*/		return 0x8218184C;
		/* 82180548h case    5:*/		return 0x8218054C;
	}
	return 0x8218054C;
} // Block from 82180534h-8218054Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 8218054Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218054C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218054C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218054C);
		  /* 8218054Ch */ case    0:  		/* mr R5, R18 */
		/* 8218054Ch case    0:*/		regs.R5 = regs.R18;
		/* 8218054Ch case    0:*/		return 0x82180550;
		  /* 82180550h */ case    1:  		/* mr R4, R27 */
		/* 82180550h case    1:*/		regs.R4 = regs.R27;
		/* 82180550h case    1:*/		return 0x82180554;
		  /* 82180554h */ case    2:  		/* mr R3, R19 */
		/* 82180554h case    2:*/		regs.R3 = regs.R19;
		/* 82180554h case    2:*/		return 0x82180558;
		  /* 82180558h */ case    3:  		/* bl 717840 */
		/* 82180558h case    3:*/		regs.LR = 0x8218055C; return 0x8222F968;
		/* 82180558h case    3:*/		return 0x8218055C;
		  /* 8218055Ch */ case    4:  		/* mr R5, R18 */
		/* 8218055Ch case    4:*/		regs.R5 = regs.R18;
		/* 8218055Ch case    4:*/		return 0x82180560;
		  /* 82180560h */ case    5:  		/* mr R4, R31 */
		/* 82180560h case    5:*/		regs.R4 = regs.R31;
		/* 82180560h case    5:*/		return 0x82180564;
		  /* 82180564h */ case    6:  		/* mr R3, R30 */
		/* 82180564h case    6:*/		regs.R3 = regs.R30;
		/* 82180564h case    6:*/		return 0x82180568;
		  /* 82180568h */ case    7:  		/* bl 717824 */
		/* 82180568h case    7:*/		regs.LR = 0x8218056C; return 0x8222F968;
		/* 82180568h case    7:*/		return 0x8218056C;
		  /* 8218056Ch */ case    8:  		/* mr R5, R18 */
		/* 8218056Ch case    8:*/		regs.R5 = regs.R18;
		/* 8218056Ch case    8:*/		return 0x82180570;
		  /* 82180570h */ case    9:  		/* mr R4, R27 */
		/* 82180570h case    9:*/		regs.R4 = regs.R27;
		/* 82180570h case    9:*/		return 0x82180574;
		  /* 82180574h */ case   10:  		/* mr R3, R30 */
		/* 82180574h case   10:*/		regs.R3 = regs.R30;
		/* 82180574h case   10:*/		return 0x82180578;
		  /* 82180578h */ case   11:  		/* bl 718184 */
		/* 82180578h case   11:*/		regs.LR = 0x8218057C; return 0x8222FAE0;
		/* 82180578h case   11:*/		return 0x8218057C;
		  /* 8218057Ch */ case   12:  		/* lwz R11, <#[R30 + 36]> */
		/* 8218057Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000024) );
		/* 8218057Ch case   12:*/		return 0x82180580;
		  /* 82180580h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 82180580h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 82180580h case   13:*/		return 0x82180584;
		  /* 82180584h */ case   14:  		/* bc 4, CR0_EQ, -880 */
		/* 82180584h case   14:*/		if ( !regs.CR[0].eq ) { return 0x82180214;  }
		/* 82180584h case   14:*/		return 0x82180588;
		  /* 82180588h */ case   15:  		/* lwz R11, <#[R30 + 32]> */
		/* 82180588h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000020) );
		/* 82180588h case   15:*/		return 0x8218058C;
		  /* 8218058Ch */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8218058Ch case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8218058Ch case   16:*/		return 0x82180590;
		  /* 82180590h */ case   17:  		/* addic. R30, R11, -40 */
		/* 82180590h case   17:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R11,0xFFFFFFD8);
		/* 82180590h case   17:*/		return 0x82180594;
		  /* 82180594h */ case   18:  		/* bc 12, CR0_EQ, -896 */
		/* 82180594h case   18:*/		if ( regs.CR[0].eq ) { return 0x82180214;  }
		/* 82180594h case   18:*/		return 0x82180598;
		  /* 82180598h */ case   19:  		/* lwz R11, <#[R30 + 8]> */
		/* 82180598h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 82180598h case   19:*/		return 0x8218059C;
		  /* 8218059Ch */ case   20:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 8218059Ch case   20:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 8218059Ch case   20:*/		return 0x821805A0;
		  /* 821805A0h */ case   21:  		/* cmplwi CR6, R11, 86 */
		/* 821805A0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000056);
		/* 821805A0h case   21:*/		return 0x821805A4;
		  /* 821805A4h */ case   22:  		/* bc 12, CR6_EQ, 48 */
		/* 821805A4h case   22:*/		if ( regs.CR[6].eq ) { return 0x821805D4;  }
		/* 821805A4h case   22:*/		return 0x821805A8;
		  /* 821805A8h */ case   23:  		/* cmplwi CR6, R11, 87 */
		/* 821805A8h case   23:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000057);
		/* 821805A8h case   23:*/		return 0x821805AC;
		  /* 821805ACh */ case   24:  		/* bc 12, CR6_EQ, 40 */
		/* 821805ACh case   24:*/		if ( regs.CR[6].eq ) { return 0x821805D4;  }
		/* 821805ACh case   24:*/		return 0x821805B0;
		  /* 821805B0h */ case   25:  		/* cmplwi CR6, R11, 89 */
		/* 821805B0h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000059);
		/* 821805B0h case   25:*/		return 0x821805B4;
		  /* 821805B4h */ case   26:  		/* bc 12, CR6_EQ, 32 */
		/* 821805B4h case   26:*/		if ( regs.CR[6].eq ) { return 0x821805D4;  }
		/* 821805B4h case   26:*/		return 0x821805B8;
		  /* 821805B8h */ case   27:  		/* cmplwi CR6, R11, 90 */
		/* 821805B8h case   27:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000005A);
		/* 821805B8h case   27:*/		return 0x821805BC;
		  /* 821805BCh */ case   28:  		/* bc 12, CR6_EQ, 24 */
		/* 821805BCh case   28:*/		if ( regs.CR[6].eq ) { return 0x821805D4;  }
		/* 821805BCh case   28:*/		return 0x821805C0;
		  /* 821805C0h */ case   29:  		/* cmplwi CR6, R11, 84 */
		/* 821805C0h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000054);
		/* 821805C0h case   29:*/		return 0x821805C4;
		  /* 821805C4h */ case   30:  		/* bc 12, CR6_EQ, 16 */
		/* 821805C4h case   30:*/		if ( regs.CR[6].eq ) { return 0x821805D4;  }
		/* 821805C4h case   30:*/		return 0x821805C8;
		  /* 821805C8h */ case   31:  		/* cmplwi CR6, R11, 85 */
		/* 821805C8h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000055);
		/* 821805C8h case   31:*/		return 0x821805CC;
		  /* 821805CCh */ case   32:  		/* li R11, 0 */
		/* 821805CCh case   32:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821805CCh case   32:*/		return 0x821805D0;
		  /* 821805D0h */ case   33:  		/* bc 4, CR6_EQ, 8 */
		/* 821805D0h case   33:*/		if ( !regs.CR[6].eq ) { return 0x821805D8;  }
		/* 821805D0h case   33:*/		return 0x821805D4;
	}
	return 0x821805D4;
} // Block from 8218054Ch-821805D4h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821805D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821805D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821805D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821805D4);
		  /* 821805D4h */ case    0:  		/* li R11, 1 */
		/* 821805D4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821805D4h case    0:*/		return 0x821805D8;
	}
	return 0x821805D8;
} // Block from 821805D4h-821805D8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821805D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821805D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821805D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821805D8);
		  /* 821805D8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821805D8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821805D8h case    0:*/		return 0x821805DC;
		  /* 821805DCh */ case    1:  		/* bc 12, CR0_EQ, -968 */
		/* 821805DCh case    1:*/		if ( regs.CR[0].eq ) { return 0x82180214;  }
		/* 821805DCh case    1:*/		return 0x821805E0;
		  /* 821805E0h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821805E0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821805E0h case    2:*/		return 0x821805E4;
		  /* 821805E4h */ case    3:  		/* mr R3, R18 */
		/* 821805E4h case    3:*/		regs.R3 = regs.R18;
		/* 821805E4h case    3:*/		return 0x821805E8;
		  /* 821805E8h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821805E8h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821805E8h case    4:*/		return 0x821805EC;
		  /* 821805ECh */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821805ECh case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821805ECh case    5:*/		return 0x821805F0;
		  /* 821805F0h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821805F0h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821805F0h case    6:*/		return 0x821805F4;
		  /* 821805F4h */ case    7:  		/* bl -115140 */
		/* 821805F4h case    7:*/		regs.LR = 0x821805F8; return 0x82164430;
		/* 821805F4h case    7:*/		return 0x821805F8;
		  /* 821805F8h */ case    8:  		/* addi R11, R30, -16 */
		/* 821805F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFF0);
		/* 821805F8h case    8:*/		return 0x821805FC;
		  /* 821805FCh */ case    9:  		/* add R11, R3, R11 */
		/* 821805FCh case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821805FCh case    9:*/		return 0x82180600;
		  /* 82180600h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 82180600h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 82180600h case   10:*/		return 0x82180604;
		  /* 82180604h */ case   11:  		/* cmplw CR6, R10, R31 */
		/* 82180604h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 82180604h case   11:*/		return 0x82180608;
		  /* 82180608h */ case   12:  		/* bc 4, CR6_EQ, -1012 */
		/* 82180608h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82180214;  }
		/* 82180608h case   12:*/		return 0x8218060C;
		  /* 8218060Ch */ case   13:  		/* stw R27, <#[R11]> */
		/* 8218060Ch case   13:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R11 + 0x00000000) );
		/* 8218060Ch case   13:*/		return 0x82180610;
		  /* 82180610h */ case   14:  		/* b -1020 */
		/* 82180610h case   14:*/		return 0x82180214;
		/* 82180610h case   14:*/		return 0x82180614;
	}
	return 0x82180614;
} // Block from 821805D8h-82180614h (15 instructions)

//////////////////////////////////////////////////////
// Block at 82180614h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180614( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180614) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180614);
		  /* 82180614h */ case    0:  		/* lwz R11, <#[R18 + 108]> */
		/* 82180614h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x0000006C) );
		/* 82180614h case    0:*/		return 0x82180618;
		  /* 82180618h */ case    1:  		/* li R22, 1 */
		/* 82180618h case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 82180618h case    1:*/		return 0x8218061C;
		  /* 8218061Ch */ case    2:  		/* addi R10, R1, 116 */
		/* 8218061Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x74);
		/* 8218061Ch case    2:*/		return 0x82180620;
		  /* 82180620h */ case    3:  		/* addi R29, R11, 1 */
		/* 82180620h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0x1);
		/* 82180620h case    3:*/		return 0x82180624;
		  /* 82180624h */ case    4:  		/* addi R9, R1, 124 */
		/* 82180624h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x7C);
		/* 82180624h case    4:*/		return 0x82180628;
		  /* 82180628h */ case    5:  		/* addi R28, R29, 1 */
		/* 82180628h case    5:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x1);
		/* 82180628h case    5:*/		return 0x8218062C;
		  /* 8218062Ch */ case    6:  		/* mr R8, R19 */
		/* 8218062Ch case    6:*/		regs.R8 = regs.R19;
		/* 8218062Ch case    6:*/		return 0x82180630;
		  /* 82180630h */ case    7:  		/* stw R28, <#[R18 + 108]> */
		/* 82180630h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R18 + 0x0000006C) );
		/* 82180630h case    7:*/		return 0x82180634;
		  /* 82180634h */ case    8:  		/* mr R7, R28 */
		/* 82180634h case    8:*/		regs.R7 = regs.R28;
		/* 82180634h case    8:*/		return 0x82180638;
		  /* 82180638h */ case    9:  		/* lwz R11, <#[R20 + 12]> */
		/* 82180638h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000000C) );
		/* 82180638h case    9:*/		return 0x8218063C;
		  /* 8218063Ch */ case   10:  		/* rlwinm R11, R11, 31, 31, 31 */
		/* 8218063Ch case   10:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R11,regs.R11);
		/* 8218063Ch case   10:*/		return 0x82180640;
		  /* 82180640h */ case   11:  		/* subfic R11, R11, 1 */
		/* 82180640h case   11:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82180640h case   11:*/		return 0x82180644;
		  /* 82180644h */ case   12:  		/* mr R6, R29 */
		/* 82180644h case   12:*/		regs.R6 = regs.R29;
		/* 82180644h case   12:*/		return 0x82180648;
		  /* 82180648h */ case   13:  		/* mr R4, R19 */
		/* 82180648h case   13:*/		regs.R4 = regs.R19;
		/* 82180648h case   13:*/		return 0x8218064C;
		  /* 8218064Ch */ case   14:  		/* mr R3, R18 */
		/* 8218064Ch case   14:*/		regs.R3 = regs.R18;
		/* 8218064Ch case   14:*/		return 0x82180650;
		  /* 82180650h */ case   15:  		/* slw R5, R22, R11 */
		/* 82180650h case   15:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R22,regs.R11);
		/* 82180650h case   15:*/		return 0x82180654;
		  /* 82180654h */ case   16:  		/* bl -21524 */
		/* 82180654h case   16:*/		regs.LR = 0x82180658; return 0x8217B240;
		/* 82180654h case   16:*/		return 0x82180658;
		  /* 82180658h */ case   17:  		/* lwz R11, <#[R1 + 116]> */
		/* 82180658h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000074) );
		/* 82180658h case   17:*/		return 0x8218065C;
		  /* 8218065Ch */ case   18:  		/* mr R31, R3 */
		/* 8218065Ch case   18:*/		regs.R31 = regs.R3;
		/* 8218065Ch case   18:*/		return 0x82180660;
		  /* 82180660h */ case   19:  		/* cmplw CR6, R11, R19 */
		/* 82180660h case   19:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R19);
		/* 82180660h case   19:*/		return 0x82180664;
		  /* 82180664h */ case   20:  		/* mr R3, R18 */
		/* 82180664h case   20:*/		regs.R3 = regs.R18;
		/* 82180664h case   20:*/		return 0x82180668;
		  /* 82180668h */ case   21:  		/* bc 12, CR6_EQ, 4660 */
		/* 82180668h case   21:*/		if ( regs.CR[6].eq ) { return 0x8218189C;  }
		/* 82180668h case   21:*/		return 0x8218066C;
		  /* 8218066Ch */ case   22:  		/* mr R4, R19 */
		/* 8218066Ch case   22:*/		regs.R4 = regs.R19;
		/* 8218066Ch case   22:*/		return 0x82180670;
		  /* 82180670h */ case   23:  		/* bl -22816 */
		/* 82180670h case   23:*/		regs.LR = 0x82180674; return 0x8217AD50;
		/* 82180670h case   23:*/		return 0x82180674;
		  /* 82180674h */ case   24:  		/* lwz R11, <#[R23 + 8]> */
		/* 82180674h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 82180674h case   24:*/		return 0x82180678;
		  /* 82180678h */ case   25:  		/* mr R30, R3 */
		/* 82180678h case   25:*/		regs.R30 = regs.R3;
		/* 82180678h case   25:*/		return 0x8218067C;
		  /* 8218067Ch */ case   26:  		/* rlwinm. R11, R11, 14, 31, 31 */
		/* 8218067Ch case   26:*/		cpu::op::rlwinm<1,14,31,31>(regs,&regs.R11,regs.R11);
		/* 8218067Ch case   26:*/		return 0x82180680;
		  /* 82180680h */ case   27:  		/* bc 12, CR0_EQ, 16 */
		/* 82180680h case   27:*/		if ( regs.CR[0].eq ) { return 0x82180690;  }
		/* 82180680h case   27:*/		return 0x82180684;
		  /* 82180684h */ case   28:  		/* mr R4, R23 */
		/* 82180684h case   28:*/		regs.R4 = regs.R23;
		/* 82180684h case   28:*/		return 0x82180688;
		  /* 82180688h */ case   29:  		/* mr R3, R18 */
		/* 82180688h case   29:*/		regs.R3 = regs.R18;
		/* 82180688h case   29:*/		return 0x8218068C;
		  /* 8218068Ch */ case   30:  		/* bl -31876 */
		/* 8218068Ch case   30:*/		regs.LR = 0x82180690; return 0x82178A08;
		/* 8218068Ch case   30:*/		return 0x82180690;
	}
	return 0x82180690;
} // Block from 82180614h-82180690h (31 instructions)

//////////////////////////////////////////////////////
// Block at 82180690h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180690( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180690) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180690);
		  /* 82180690h */ case    0:  		/* lwz R11, <#[R19 + 48]> */
		/* 82180690h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 82180690h case    0:*/		return 0x82180694;
		  /* 82180694h */ case    1:  		/* rlwinm. R10, R31, 0, 24, 31 */
		/* 82180694h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R31);
		/* 82180694h case    1:*/		return 0x82180698;
		  /* 82180698h */ case    2:  		/* oris R11, R11, 3072 */
		/* 82180698h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0xC00);
		/* 82180698h case    2:*/		return 0x8218069C;
		  /* 8218069Ch */ case    3:  		/* stw R11, <#[R19 + 48]> */
		/* 8218069Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 8218069Ch case    3:*/		return 0x821806A0;
		  /* 821806A0h */ case    4:  		/* bc 4, CR0_EQ, 16 */
		/* 821806A0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821806B0;  }
		/* 821806A0h case    4:*/		return 0x821806A4;
		  /* 821806A4h */ case    5:  		/* lwz R11, <#[R19 + 76]> */
		/* 821806A4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000004C) );
		/* 821806A4h case    5:*/		return 0x821806A8;
		  /* 821806A8h */ case    6:  		/* rlwinm. R11, R11, 10, 31, 31 */
		/* 821806A8h case    6:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R11,regs.R11);
		/* 821806A8h case    6:*/		return 0x821806AC;
		  /* 821806ACh */ case    7:  		/* bc 12, CR0_EQ, 1708 */
		/* 821806ACh case    7:*/		if ( regs.CR[0].eq ) { return 0x82180D58;  }
		/* 821806ACh case    7:*/		return 0x821806B0;
	}
	return 0x821806B0;
} // Block from 82180690h-821806B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821806B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821806B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821806B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821806B0);
		  /* 821806B0h */ case    0:  		/* mr R4, R19 */
		/* 821806B0h case    0:*/		regs.R4 = regs.R19;
		/* 821806B0h case    0:*/		return 0x821806B4;
		  /* 821806B4h */ case    1:  		/* mr R3, R18 */
		/* 821806B4h case    1:*/		regs.R3 = regs.R18;
		/* 821806B4h case    1:*/		return 0x821806B8;
		  /* 821806B8h */ case    2:  		/* bl -30176 */
		/* 821806B8h case    2:*/		regs.LR = 0x821806BC; return 0x821790D8;
		/* 821806B8h case    2:*/		return 0x821806BC;
		  /* 821806BCh */ case    3:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821806BCh case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821806BCh case    3:*/		return 0x821806C0;
		  /* 821806C0h */ case    4:  		/* mr R23, R3 */
		/* 821806C0h case    4:*/		regs.R23 = regs.R3;
		/* 821806C0h case    4:*/		return 0x821806C4;
		  /* 821806C4h */ case    5:  		/* lwz R9, <#[R11]> */
		/* 821806C4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821806C4h case    5:*/		return 0x821806C8;
		  /* 821806C8h */ case    6:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 821806C8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 821806C8h case    6:*/		return 0x821806CC;
		  /* 821806CCh */ case    7:  		/* bc 4, CR0_EQ, 160 */
		/* 821806CCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x8218076C;  }
		/* 821806CCh case    7:*/		return 0x821806D0;
		  /* 821806D0h */ case    8:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 821806D0h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 821806D0h case    8:*/		return 0x821806D4;
		  /* 821806D4h */ case    9:  		/* b 144 */
		/* 821806D4h case    9:*/		return 0x82180764;
		/* 821806D4h case    9:*/		return 0x821806D8;
		  /* 821806D8h */ case   10:  		/* cmplw CR6, R4, R19 */
		/* 821806D8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R19);
		/* 821806D8h case   10:*/		return 0x821806DC;
		  /* 821806DCh */ case   11:  		/* bc 12, CR6_EQ, 144 */
		/* 821806DCh case   11:*/		if ( regs.CR[6].eq ) { return 0x8218076C;  }
		/* 821806DCh case   11:*/		return 0x821806E0;
		  /* 821806E0h */ case   12:  		/* lwz R11, <#[R4 + 48]> */
		/* 821806E0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000030) );
		/* 821806E0h case   12:*/		return 0x821806E4;
		  /* 821806E4h */ case   13:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 821806E4h case   13:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 821806E4h case   13:*/		return 0x821806E8;
		  /* 821806E8h */ case   14:  		/* cmplw CR6, R11, R16 */
		/* 821806E8h case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 821806E8h case   14:*/		return 0x821806EC;
		  /* 821806ECh */ case   15:  		/* bc 4, CR6_LT, 100 */
		/* 821806ECh case   15:*/		if ( !regs.CR[6].lt ) { return 0x82180750;  }
		/* 821806ECh case   15:*/		return 0x821806F0;
		  /* 821806F0h */ case   16:  		/* lwz R10, <#[R4 + 12]> */
		/* 821806F0h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000000C) );
		/* 821806F0h case   16:*/		return 0x821806F4;
		  /* 821806F4h */ case   17:  		/* cmplwi CR6, R10, 0 */
		/* 821806F4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821806F4h case   17:*/		return 0x821806F8;
		  /* 821806F8h */ case   18:  		/* bc 12, CR6_EQ, 88 */
		/* 821806F8h case   18:*/		if ( regs.CR[6].eq ) { return 0x82180750;  }
		/* 821806F8h case   18:*/		return 0x821806FC;
		  /* 821806FCh */ case   19:  		/* lwz R31, <#[R10]> */
		/* 821806FCh case   19:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + 0x00000000) );
		/* 821806FCh case   19:*/		return 0x82180700;
		  /* 82180700h */ case   20:  		/* lwz R11, <#[R31 + 44]> */
		/* 82180700h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82180700h case   20:*/		return 0x82180704;
		  /* 82180704h */ case   21:  		/* cmplw CR6, R11, R29 */
		/* 82180704h case   21:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 82180704h case   21:*/		return 0x82180708;
		  /* 82180708h */ case   22:  		/* bc 12, CR6_EQ, 48 */
		/* 82180708h case   22:*/		if ( regs.CR[6].eq ) { return 0x82180738;  }
		/* 82180708h case   22:*/		return 0x8218070C;
		  /* 8218070Ch */ case   23:  		/* lwz R11, <#[R31 + 48]> */
		/* 8218070Ch case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 8218070Ch case   23:*/		return 0x82180710;
		  /* 82180710h */ case   24:  		/* lwz R8, <#[R4 + 40]> */
		/* 82180710h case   24:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000028) );
		/* 82180710h case   24:*/		return 0x82180714;
		  /* 82180714h */ case   25:  		/* rlwinm R7, R11, 0, 13, 31 */
		/* 82180714h case   25:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R11);
		/* 82180714h case   25:*/		return 0x82180718;
		  /* 82180718h */ case   26:  		/* rlwinm R11, R7, 27, 5, 31 */
		/* 82180718h case   26:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R7);
		/* 82180718h case   26:*/		return 0x8218071C;
		  /* 8218071Ch */ case   27:  		/* rlwinm R7, R7, 0, 27, 31 */
		/* 8218071Ch case   27:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R7);
		/* 8218071Ch case   27:*/		return 0x82180720;
		  /* 82180720h */ case   28:  		/* addi R11, R11, 1 */
		/* 82180720h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82180720h case   28:*/		return 0x82180724;
		  /* 82180724h */ case   29:  		/* slw R7, R22, R7 */
		/* 82180724h case   29:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R22,regs.R7);
		/* 82180724h case   29:*/		return 0x82180728;
		  /* 82180728h */ case   30:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 82180728h case   30:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 82180728h case   30:*/		return 0x8218072C;
		  /* 8218072Ch */ case   31:  		/* lwzx R11, <#[R11 + R8]> */
		/* 8218072Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 8218072Ch case   31:*/		return 0x82180730;
		  /* 82180730h */ case   32:  		/* and. R11, R11, R7 */
		/* 82180730h case   32:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R7);
		/* 82180730h case   32:*/		return 0x82180734;
		  /* 82180734h */ case   33:  		/* bc 12, CR0_EQ, 68 */
		/* 82180734h case   33:*/		if ( regs.CR[0].eq ) { return 0x82180778;  }
		/* 82180734h case   33:*/		return 0x82180738;
	}
	return 0x82180738;
} // Block from 821806B0h-82180738h (34 instructions)

//////////////////////////////////////////////////////
// Block at 82180738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180738);
		  /* 82180738h */ case    0:  		/* lwz R11, <#[R31 + 48]> */
		/* 82180738h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000030) );
		/* 82180738h case    0:*/		return 0x8218073C;
		  /* 8218073Ch */ case    1:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 8218073Ch case    1:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 8218073Ch case    1:*/		return 0x82180740;
		  /* 82180740h */ case    2:  		/* cmplw CR6, R11, R16 */
		/* 82180740h case    2:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 82180740h case    2:*/		return 0x82180744;
		  /* 82180744h */ case    3:  		/* bc 4, CR6_LT, 52 */
		/* 82180744h case    3:*/		if ( !regs.CR[6].lt ) { return 0x82180778;  }
		/* 82180744h case    3:*/		return 0x82180748;
		  /* 82180748h */ case    4:  		/* lwz R10, <#[R10 + 8]> */
		/* 82180748h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 82180748h case    4:*/		return 0x8218074C;
		  /* 8218074Ch */ case    5:  		/* b -88 */
		/* 8218074Ch case    5:*/		return 0x821806F4;
		/* 8218074Ch case    5:*/		return 0x82180750;
	}
	return 0x82180750;
} // Block from 82180738h-82180750h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82180750h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180750( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180750) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180750);
		  /* 82180750h */ case    0:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 82180750h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 82180750h case    0:*/		return 0x82180754;
		  /* 82180754h */ case    1:  		/* lwz R11, <#[R11]> */
		/* 82180754h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82180754h case    1:*/		return 0x82180758;
		  /* 82180758h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180758h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180758h case    2:*/		return 0x8218075C;
		  /* 8218075Ch */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 8218075Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x8218076C;  }
		/* 8218075Ch case    3:*/		return 0x82180760;
		  /* 82180760h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82180760h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82180760h case    4:*/		return 0x82180764;
	}
	return 0x82180764;
} // Block from 82180750h-82180764h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82180764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180764);
		  /* 82180764h */ case    0:  		/* addic. R4, R11, -4 */
		/* 82180764h case    0:*/		cpu::op::addic<1>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 82180764h case    0:*/		return 0x82180768;
		  /* 82180768h */ case    1:  		/* bc 4, CR0_EQ, -144 */
		/* 82180768h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821806D8;  }
		/* 82180768h case    1:*/		return 0x8218076C;
	}
	return 0x8218076C;
} // Block from 82180764h-8218076Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 8218076Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218076C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218076C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218076C);
		  /* 8218076Ch */ case    0:  		/* li R4, 4800 */
		/* 8218076Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 8218076Ch case    0:*/		return 0x82180770;
		  /* 82180770h */ case    1:  		/* mr R3, R18 */
		/* 82180770h case    1:*/		regs.R3 = regs.R18;
		/* 82180770h case    1:*/		return 0x82180774;
		  /* 82180774h */ case    2:  		/* bl -190732 */
		/* 82180774h case    2:*/		regs.LR = 0x82180778; return 0x82151E68;
		/* 82180774h case    2:*/		return 0x82180778;
	}
	return 0x82180778;
} // Block from 8218076Ch-82180778h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82180778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180778);
		  /* 82180778h */ case    0:  		/* rlwinm. R11, R9, 0, 31, 31 */
		/* 82180778h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R9);
		/* 82180778h case    0:*/		return 0x8218077C;
		  /* 8218077Ch */ case    1:  		/* bc 4, CR0_EQ, 44 */
		/* 8218077Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821807A8;  }
		/* 8218077Ch case    1:*/		return 0x82180780;
		  /* 82180780h */ case    2:  		/* rlwinm R11, R9, 0, 0, 30 */
		/* 82180780h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R9);
		/* 82180780h case    2:*/		return 0x82180784;
		  /* 82180784h */ case    3:  		/* b 48 */
		/* 82180784h case    3:*/		return 0x821807B4;
		/* 82180784h case    3:*/		return 0x82180788;
		  /* 82180788h */ case    4:  		/* lwz R11, <#[R6 + 48]> */
		/* 82180788h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R6 + 0x00000030) );
		/* 82180788h case    4:*/		return 0x8218078C;
		  /* 8218078Ch */ case    5:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 8218078Ch case    5:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 8218078Ch case    5:*/		return 0x82180790;
		  /* 82180790h */ case    6:  		/* cmplw CR6, R11, R16 */
		/* 82180790h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 82180790h case    6:*/		return 0x82180794;
		  /* 82180794h */ case    7:  		/* bc 12, CR6_LT, 44 */
		/* 82180794h case    7:*/		if ( regs.CR[6].lt ) { return 0x821807C0;  }
		/* 82180794h case    7:*/		return 0x82180798;
		  /* 82180798h */ case    8:  		/* rlwinm R11, R6, 0, 0, 30 */
		/* 82180798h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R6);
		/* 82180798h case    8:*/		return 0x8218079C;
		  /* 8218079Ch */ case    9:  		/* lwz R11, <#[R11]> */
		/* 8218079Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 8218079Ch case    9:*/		return 0x821807A0;
		  /* 821807A0h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821807A0h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821807A0h case   10:*/		return 0x821807A4;
		  /* 821807A4h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 821807A4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821807B0;  }
		/* 821807A4h case   11:*/		return 0x821807A8;
	}
	return 0x821807A8;
} // Block from 82180778h-821807A8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821807A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821807A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821807A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821807A8);
		  /* 821807A8h */ case    0:  		/* li R6, 0 */
		/* 821807A8h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821807A8h case    0:*/		return 0x821807AC;
		  /* 821807ACh */ case    1:  		/* b 12 */
		/* 821807ACh case    1:*/		return 0x821807B8;
		/* 821807ACh case    1:*/		return 0x821807B0;
	}
	return 0x821807B0;
} // Block from 821807A8h-821807B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821807B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821807B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821807B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821807B0);
		  /* 821807B0h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821807B0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821807B0h case    0:*/		return 0x821807B4;
	}
	return 0x821807B4;
} // Block from 821807B0h-821807B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821807B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821807B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821807B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821807B4);
		  /* 821807B4h */ case    0:  		/* addi R6, R11, -4 */
		/* 821807B4h case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFFC);
		/* 821807B4h case    0:*/		return 0x821807B8;
	}
	return 0x821807B8;
} // Block from 821807B4h-821807B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821807B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821807B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821807B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821807B8);
		  /* 821807B8h */ case    0:  		/* cmplw CR6, R6, R4 */
		/* 821807B8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R4);
		/* 821807B8h case    0:*/		return 0x821807BC;
		  /* 821807BCh */ case    1:  		/* bc 4, CR6_EQ, -52 */
		/* 821807BCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x82180788;  }
		/* 821807BCh case    1:*/		return 0x821807C0;
	}
	return 0x821807C0;
} // Block from 821807B8h-821807C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821807C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821807C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821807C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821807C0);
		  /* 821807C0h */ case    0:  		/* mr R8, R23 */
		/* 821807C0h case    0:*/		regs.R8 = regs.R23;
		/* 821807C0h case    0:*/		return 0x821807C4;
		  /* 821807C4h */ case    1:  		/* li R7, 64 */
		/* 821807C4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x40);
		/* 821807C4h case    1:*/		return 0x821807C8;
		  /* 821807C8h */ case    2:  		/* mr R5, R31 */
		/* 821807C8h case    2:*/		regs.R5 = regs.R31;
		/* 821807C8h case    2:*/		return 0x821807CC;
		  /* 821807CCh */ case    3:  		/* mr R3, R18 */
		/* 821807CCh case    3:*/		regs.R3 = regs.R18;
		/* 821807CCh case    3:*/		return 0x821807D0;
		  /* 821807D0h */ case    4:  		/* bl -20776 */
		/* 821807D0h case    4:*/		regs.LR = 0x821807D4; return 0x8217B6A8;
		/* 821807D0h case    4:*/		return 0x821807D4;
		  /* 821807D4h */ case    5:  		/* lwz R9, <#[R30 + 40]> */
		/* 821807D4h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000028) );
		/* 821807D4h case    5:*/		return 0x821807D8;
		  /* 821807D8h */ case    6:  		/* lwz R11, <#[R19 + 48]> */
		/* 821807D8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 821807D8h case    6:*/		return 0x821807DC;
		  /* 821807DCh */ case    7:  		/* mr R24, R3 */
		/* 821807DCh case    7:*/		regs.R24 = regs.R3;
		/* 821807DCh case    7:*/		return 0x821807E0;
		  /* 821807E0h */ case    8:  		/* rlwinm R10, R11, 0, 13, 31 */
		/* 821807E0h case    8:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R11);
		/* 821807E0h case    8:*/		return 0x821807E4;
		  /* 821807E4h */ case    9:  		/* lwz R8, <#[R9]> */
		/* 821807E4h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000000) );
		/* 821807E4h case    9:*/		return 0x821807E8;
		  /* 821807E8h */ case   10:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 821807E8h case   10:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 821807E8h case   10:*/		return 0x821807EC;
		  /* 821807ECh */ case   11:  		/* rlwinm R7, R10, 0, 27, 31 */
		/* 821807ECh case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R10);
		/* 821807ECh case   11:*/		return 0x821807F0;
		  /* 821807F0h */ case   12:  		/* rlwinm R10, R8, 0, 13, 31 */
		/* 821807F0h case   12:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R8);
		/* 821807F0h case   12:*/		return 0x821807F4;
		  /* 821807F4h */ case   13:  		/* addi R11, R11, 1 */
		/* 821807F4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821807F4h case   13:*/		return 0x821807F8;
		  /* 821807F8h */ case   14:  		/* addi R10, R10, 31 */
		/* 821807F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821807F8h case   14:*/		return 0x821807FC;
		  /* 821807FCh */ case   15:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821807FCh case   15:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821807FCh case   15:*/		return 0x82180800;
		  /* 82180800h */ case   16:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 82180800h case   16:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 82180800h case   16:*/		return 0x82180804;
		  /* 82180804h */ case   17:  		/* slw R8, R22, R7 */
		/* 82180804h case   17:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R22,regs.R7);
		/* 82180804h case   17:*/		return 0x82180808;
		  /* 82180808h */ case   18:  		/* add R11, R10, R11 */
		/* 82180808h case   18:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82180808h case   18:*/		return 0x8218080C;
		  /* 8218080Ch */ case   19:  		/* lwzx R11, <#[R11 + R9]> */
		/* 8218080Ch case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 8218080Ch case   19:*/		return 0x82180810;
		  /* 82180810h */ case   20:  		/* and. R11, R11, R8 */
		/* 82180810h case   20:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82180810h case   20:*/		return 0x82180814;
		  /* 82180814h */ case   21:  		/* bc 12, CR0_EQ, 348 */
		/* 82180814h case   21:*/		if ( regs.CR[0].eq ) { return 0x82180970;  }
		/* 82180814h case   21:*/		return 0x82180818;
		  /* 82180818h */ case   22:  		/* lwz R11, <#[R18 + 4]> */
		/* 82180818h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + 0x00000004) );
		/* 82180818h case   22:*/		return 0x8218081C;
		  /* 8218081Ch */ case   23:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 8218081Ch case   23:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 8218081Ch case   23:*/		return 0x82180820;
		  /* 82180820h */ case   24:  		/* bc 4, CR0_EQ, 52 */
		/* 82180820h case   24:*/		if ( !regs.CR[0].eq ) { return 0x82180854;  }
		/* 82180820h case   24:*/		return 0x82180824;
		  /* 82180824h */ case   25:  		/* cmplwi CR0, R11, 0 */
		/* 82180824h case   25:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82180824h case   25:*/		return 0x82180828;
		  /* 82180828h */ case   26:  		/* bc 12, CR0_EQ, 44 */
		/* 82180828h case   26:*/		if ( regs.CR[0].eq ) { return 0x82180854;  }
		/* 82180828h case   26:*/		return 0x8218082C;
		  /* 8218082Ch */ case   27:  		/* lwz R10, <#[R11 + 44]> */
		/* 8218082Ch case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000002C) );
		/* 8218082Ch case   27:*/		return 0x82180830;
		  /* 82180830h */ case   28:  		/* cmplw CR6, R10, R29 */
		/* 82180830h case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 82180830h case   28:*/		return 0x82180834;
		  /* 82180834h */ case   29:  		/* bc 4, CR6_EQ, 8 */
		/* 82180834h case   29:*/		if ( !regs.CR[6].eq ) { return 0x8218083C;  }
		/* 82180834h case   29:*/		return 0x82180838;
		  /* 82180838h */ case   30:  		/* stw R28, <#[R11 + 44]> */
		/* 82180838h case   30:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + 0x0000002C) );
		/* 82180838h case   30:*/		return 0x8218083C;
	}
	return 0x8218083C;
} // Block from 821807C0h-8218083Ch (31 instructions)

//////////////////////////////////////////////////////
// Block at 8218083Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218083C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218083C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218083C);
		  /* 8218083Ch */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 8218083Ch case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 8218083Ch case    0:*/		return 0x82180840;
		  /* 82180840h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82180840h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82180840h case    1:*/		return 0x82180844;
		  /* 82180844h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180844h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180844h case    2:*/		return 0x82180848;
		  /* 82180848h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 82180848h case    3:*/		if ( !regs.CR[0].eq ) { return 0x82180854;  }
		/* 82180848h case    3:*/		return 0x8218084C;
		  /* 8218084Ch */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 8218084Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 8218084Ch case    4:*/		return 0x82180850;
		  /* 82180850h */ case    5:  		/* bc 4, CR6_EQ, -36 */
		/* 82180850h case    5:*/		if ( !regs.CR[6].eq ) { return 0x8218082C;  }
		/* 82180850h case    5:*/		return 0x82180854;
	}
	return 0x82180854;
} // Block from 8218083Ch-82180854h (6 instructions)

//////////////////////////////////////////////////////
// Block at 82180854h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180854( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180854) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180854);
		  /* 82180854h */ case    0:  		/* lwz R11, <#[R30 + 44]> */
		/* 82180854h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x0000002C) );
		/* 82180854h case    0:*/		return 0x82180858;
		  /* 82180858h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 82180858h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82180858h case    1:*/		return 0x8218085C;
		  /* 8218085Ch */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 8218085Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x82180864;  }
		/* 8218085Ch case    2:*/		return 0x82180860;
		  /* 82180860h */ case    3:  		/* stw R28, <#[R30 + 44]> */
		/* 82180860h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x0000002C) );
		/* 82180860h case    3:*/		return 0x82180864;
	}
	return 0x82180864;
} // Block from 82180854h-82180864h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82180864h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180864( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180864) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180864);
		  /* 82180864h */ case    0:  		/* lwz R11, <#[R31 + 44]> */
		/* 82180864h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 82180864h case    0:*/		return 0x82180868;
		  /* 82180868h */ case    1:  		/* cmplw CR6, R11, R28 */
		/* 82180868h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 82180868h case    1:*/		return 0x8218086C;
		  /* 8218086Ch */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 8218086Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x82180874;  }
		/* 8218086Ch case    2:*/		return 0x82180870;
		  /* 82180870h */ case    3:  		/* stw R28, <#[R24 + 44]> */
		/* 82180870h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R24 + 0x0000002C) );
		/* 82180870h case    3:*/		return 0x82180874;
	}
	return 0x82180874;
} // Block from 82180864h-82180874h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82180874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180874);
		  /* 82180874h */ case    0:  		/* lwz R10, <#[R30 + 84]> */
		/* 82180874h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000054) );
		/* 82180874h case    0:*/		return 0x82180878;
		  /* 82180878h */ case    1:  		/* mr R11, R24 */
		/* 82180878h case    1:*/		regs.R11 = regs.R24;
		/* 82180878h case    1:*/		return 0x8218087C;
		  /* 8218087Ch */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 8218087Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 8218087Ch case    2:*/		return 0x82180880;
		  /* 82180880h */ case    3:  		/* stw R10, <#[R24 + 84]> */
		/* 82180880h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000054) );
		/* 82180880h case    3:*/		return 0x82180884;
		  /* 82180884h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 82180884h case    4:*/		if ( regs.CR[6].eq ) { return 0x821808C4;  }
		/* 82180884h case    4:*/		return 0x82180888;
		  /* 82180888h */ case    5:  		/* lwz R10, <#[R11 + 48]> */
		/* 82180888h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 82180888h case    5:*/		return 0x8218088C;
		  /* 8218088Ch */ case    6:  		/* cmplw CR6, R11, R30 */
		/* 8218088Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 8218088Ch case    6:*/		return 0x82180890;
		  /* 82180890h */ case    7:  		/* lwz R9, <#[R11 + 76]> */
		/* 82180890h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000004C) );
		/* 82180890h case    7:*/		return 0x82180894;
		  /* 82180894h */ case    8:  		/* oris R10, R10, 128 */
		/* 82180894h case    8:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x80);
		/* 82180894h case    8:*/		return 0x82180898;
		  /* 82180898h */ case    9:  		/* stw R19, <#[R11 + 112]> */
		/* 82180898h case    9:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000070) );
		/* 82180898h case    9:*/		return 0x8218089C;
		  /* 8218089Ch */ case   10:  		/* oris R9, R9, 192 */
		/* 8218089Ch case   10:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0xC0);
		/* 8218089Ch case   10:*/		return 0x821808A0;
		  /* 821808A0h */ case   11:  		/* stw R10, <#[R11 + 48]> */
		/* 821808A0h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821808A0h case   11:*/		return 0x821808A4;
		  /* 821808A4h */ case   12:  		/* stw R9, <#[R11 + 76]> */
		/* 821808A4h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000004C) );
		/* 821808A4h case   12:*/		return 0x821808A8;
		  /* 821808A8h */ case   13:  		/* bc 12, CR6_EQ, 28 */
		/* 821808A8h case   13:*/		if ( regs.CR[6].eq ) { return 0x821808C4;  }
		/* 821808A8h case   13:*/		return 0x821808AC;
		  /* 821808ACh */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821808ACh case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821808ACh case   14:*/		return 0x821808B0;
		  /* 821808B0h */ case   15:  		/* lwz R11, <#[R11 + 4]> */
		/* 821808B0h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821808B0h case   15:*/		return 0x821808B4;
		  /* 821808B4h */ case   16:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821808B4h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821808B4h case   16:*/		return 0x821808B8;
		  /* 821808B8h */ case   17:  		/* bc 4, CR0_EQ, 12 */
		/* 821808B8h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821808C4;  }
		/* 821808B8h case   17:*/		return 0x821808BC;
		  /* 821808BCh */ case   18:  		/* cmplwi CR6, R11, 0 */
		/* 821808BCh case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821808BCh case   18:*/		return 0x821808C0;
		  /* 821808C0h */ case   19:  		/* bc 4, CR6_EQ, -56 */
		/* 821808C0h case   19:*/		if ( !regs.CR[6].eq ) { return 0x82180888;  }
		/* 821808C0h case   19:*/		return 0x821808C4;
	}
	return 0x821808C4;
} // Block from 82180874h-821808C4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821808C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821808C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821808C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821808C4);
		  /* 821808C4h */ case    0:  		/* lwz R31, <#[R21 + 4]> */
		/* 821808C4h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000004) );
		/* 821808C4h case    0:*/		return 0x821808C8;
		  /* 821808C8h */ case    1:  		/* b 152 */
		/* 821808C8h case    1:*/		return 0x82180960;
		/* 821808C8h case    1:*/		return 0x821808CC;
		  /* 821808CCh */ case    2:  		/* cmplw CR6, R31, R24 */
		/* 821808CCh case    2:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R24);
		/* 821808CCh case    2:*/		return 0x821808D0;
		  /* 821808D0h */ case    3:  		/* bc 12, CR6_EQ, 160 */
		/* 821808D0h case    3:*/		if ( regs.CR[6].eq ) { return 0x82180970;  }
		/* 821808D0h case    3:*/		return 0x821808D4;
		  /* 821808D4h */ case    4:  		/* lwz R30, <#[R31 + 12]> */
		/* 821808D4h case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821808D4h case    4:*/		return 0x821808D8;
		  /* 821808D8h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821808D8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821808D8h case    5:*/		return 0x821808DC;
		  /* 821808DCh */ case    6:  		/* bc 12, CR6_EQ, 124 */
		/* 821808DCh case    6:*/		if ( regs.CR[6].eq ) { return 0x82180958;  }
		/* 821808DCh case    6:*/		return 0x821808E0;
		  /* 821808E0h */ case    7:  		/* lwz R7, <#[R30]> */
		/* 821808E0h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R30 + 0x00000000) );
		/* 821808E0h case    7:*/		return 0x821808E4;
		  /* 821808E4h */ case    8:  		/* lwz R11, <#[R7 + 44]> */
		/* 821808E4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x0000002C) );
		/* 821808E4h case    8:*/		return 0x821808E8;
		  /* 821808E8h */ case    9:  		/* cmplw CR6, R11, R28 */
		/* 821808E8h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821808E8h case    9:*/		return 0x821808EC;
		  /* 821808ECh */ case   10:  		/* bc 12, CR6_EQ, 100 */
		/* 821808ECh case   10:*/		if ( regs.CR[6].eq ) { return 0x82180950;  }
		/* 821808ECh case   10:*/		return 0x821808F0;
		  /* 821808F0h */ case   11:  		/* cmplw CR6, R7, R24 */
		/* 821808F0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R24);
		/* 821808F0h case   11:*/		return 0x821808F4;
		  /* 821808F4h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 821808F4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x82180910;  }
		/* 821808F4h case   12:*/		return 0x821808F8;
		  /* 821808F8h */ case   13:  		/* lwz R11, <#[R24 + 12]> */
		/* 821808F8h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x0000000C) );
		/* 821808F8h case   13:*/		return 0x821808FC;
		  /* 821808FCh */ case   14:  		/* li R7, 0 */
		/* 821808FCh case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821808FCh case   14:*/		return 0x82180900;
		  /* 82180900h */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 82180900h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180900h case   15:*/		return 0x82180904;
		  /* 82180904h */ case   16:  		/* bc 12, CR6_EQ, 56 */
		/* 82180904h case   16:*/		if ( regs.CR[6].eq ) { return 0x8218093C;  }
		/* 82180904h case   16:*/		return 0x82180908;
		  /* 82180908h */ case   17:  		/* lwz R7, <#[R11]> */
		/* 82180908h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 82180908h case   17:*/		return 0x8218090C;
		  /* 8218090Ch */ case   18:  		/* b 48 */
		/* 8218090Ch case   18:*/		return 0x8218093C;
		/* 8218090Ch case   18:*/		return 0x82180910;
	}
	return 0x82180910;
} // Block from 821808C4h-82180910h (19 instructions)

//////////////////////////////////////////////////////
// Block at 82180910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180910);
		  /* 82180910h */ case    0:  		/* lwz R11, <#[R7 + 48]> */
		/* 82180910h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000030) );
		/* 82180910h case    0:*/		return 0x82180914;
		  /* 82180914h */ case    1:  		/* lwz R10, <#[R31 + 40]> */
		/* 82180914h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000028) );
		/* 82180914h case    1:*/		return 0x82180918;
		  /* 82180918h */ case    2:  		/* rlwinm R9, R11, 0, 13, 31 */
		/* 82180918h case    2:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R9,regs.R11);
		/* 82180918h case    2:*/		return 0x8218091C;
		  /* 8218091Ch */ case    3:  		/* rlwinm R11, R9, 27, 5, 31 */
		/* 8218091Ch case    3:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R9);
		/* 8218091Ch case    3:*/		return 0x82180920;
		  /* 82180920h */ case    4:  		/* rlwinm R9, R9, 0, 27, 31 */
		/* 82180920h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R9);
		/* 82180920h case    4:*/		return 0x82180924;
		  /* 82180924h */ case    5:  		/* addi R11, R11, 1 */
		/* 82180924h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82180924h case    5:*/		return 0x82180928;
		  /* 82180928h */ case    6:  		/* slw R9, R22, R9 */
		/* 82180928h case    6:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R22,regs.R9);
		/* 82180928h case    6:*/		return 0x8218092C;
		  /* 8218092Ch */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 8218092Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 8218092Ch case    7:*/		return 0x82180930;
		  /* 82180930h */ case    8:  		/* lwzx R11, <#[R11 + R10]> */
		/* 82180930h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 82180930h case    8:*/		return 0x82180934;
		  /* 82180934h */ case    9:  		/* and. R11, R11, R9 */
		/* 82180934h case    9:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82180934h case    9:*/		return 0x82180938;
		  /* 82180938h */ case   10:  		/* bc 4, CR0_EQ, 24 */
		/* 82180938h case   10:*/		if ( !regs.CR[0].eq ) { return 0x82180950;  }
		/* 82180938h case   10:*/		return 0x8218093C;
	}
	return 0x8218093C;
} // Block from 82180910h-8218093Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 8218093Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block8218093C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x8218093C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x8218093C);
		  /* 8218093Ch */ case    0:  		/* mr R6, R31 */
		/* 8218093Ch case    0:*/		regs.R6 = regs.R31;
		/* 8218093Ch case    0:*/		return 0x82180940;
		  /* 82180940h */ case    1:  		/* mr R5, R23 */
		/* 82180940h case    1:*/		regs.R5 = regs.R23;
		/* 82180940h case    1:*/		return 0x82180944;
		  /* 82180944h */ case    2:  		/* mr R4, R19 */
		/* 82180944h case    2:*/		regs.R4 = regs.R19;
		/* 82180944h case    2:*/		return 0x82180948;
		  /* 82180948h */ case    3:  		/* mr R3, R18 */
		/* 82180948h case    3:*/		regs.R3 = regs.R18;
		/* 82180948h case    3:*/		return 0x8218094C;
		  /* 8218094Ch */ case    4:  		/* bl -19812 */
		/* 8218094Ch case    4:*/		regs.LR = 0x82180950; return 0x8217BBE8;
		/* 8218094Ch case    4:*/		return 0x82180950;
	}
	return 0x82180950;
} // Block from 8218093Ch-82180950h (5 instructions)

//////////////////////////////////////////////////////
// Block at 82180950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180950);
		  /* 82180950h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 82180950h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 82180950h case    0:*/		return 0x82180954;
		  /* 82180954h */ case    1:  		/* b -124 */
		/* 82180954h case    1:*/		return 0x821808D8;
		/* 82180954h case    1:*/		return 0x82180958;
	}
	return 0x82180958;
} // Block from 82180950h-82180958h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82180958h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180958( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180958) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180958);
		  /* 82180958h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 82180958h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 82180958h case    0:*/		return 0x8218095C;
		  /* 8218095Ch */ case    1:  		/* lwz R31, <#[R11 + 4]> */
		/* 8218095Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000004) );
		/* 8218095Ch case    1:*/		return 0x82180960;
	}
	return 0x82180960;
} // Block from 82180958h-82180960h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82180960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180960);
		  /* 82180960h */ case    0:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 82180960h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 82180960h case    0:*/		return 0x82180964;
		  /* 82180964h */ case    1:  		/* bc 4, CR0_EQ, 12 */
		/* 82180964h case    1:*/		if ( !regs.CR[0].eq ) { return 0x82180970;  }
		/* 82180964h case    1:*/		return 0x82180968;
		  /* 82180968h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 82180968h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 82180968h case    2:*/		return 0x8218096C;
		  /* 8218096Ch */ case    3:  		/* bc 4, CR6_EQ, -160 */
		/* 8218096Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821808CC;  }
		/* 8218096Ch case    3:*/		return 0x82180970;
	}
	return 0x82180970;
} // Block from 82180960h-82180970h (4 instructions)

//////////////////////////////////////////////////////
// Block at 82180970h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180970( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180970) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180970);
		  /* 82180970h */ case    0:  		/* lwz R10, <#[R20 + 12]> */
		/* 82180970h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000000C) );
		/* 82180970h case    0:*/		return 0x82180974;
		  /* 82180974h */ case    1:  		/* li R26, 0 */
		/* 82180974h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 82180974h case    1:*/		return 0x82180978;
		  /* 82180978h */ case    2:  		/* lwz R11, <#[R21 + 4]> */
		/* 82180978h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 82180978h case    2:*/		return 0x8218097C;
		  /* 8218097Ch */ case    3:  		/* rlwinm R10, R10, 31, 31, 31 */
		/* 8218097Ch case    3:*/		cpu::op::rlwinm<0,31,31,31>(regs,&regs.R10,regs.R10);
		/* 8218097Ch case    3:*/		return 0x82180980;
		  /* 82180980h */ case    4:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 82180980h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 82180980h case    4:*/		return 0x82180984;
		  /* 82180984h */ case    5:  		/* subfic R10, R10, 1 */
		/* 82180984h case    5:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1);
		/* 82180984h case    5:*/		return 0x82180988;
		  /* 82180988h */ case    6:  		/* slw R25, R22, R10 */
		/* 82180988h case    6:*/		cpu::op::slw<0>(regs,&regs.R25,regs.R22,regs.R10);
		/* 82180988h case    6:*/		return 0x8218098C;
		  /* 8218098Ch */ case    7:  		/* b 124 */
		/* 8218098Ch case    7:*/		return 0x82180A08;
		/* 8218098Ch case    7:*/		return 0x82180990;
		  /* 82180990h */ case    8:  		/* lwz R9, <#[R11 + 76]> */
		/* 82180990h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000004C) );
		/* 82180990h case    8:*/		return 0x82180994;
		  /* 82180994h */ case    9:  		/* rlwinm. R10, R9, 10, 31, 31 */
		/* 82180994h case    9:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R10,regs.R9);
		/* 82180994h case    9:*/		return 0x82180998;
		  /* 82180998h */ case   10:  		/* bc 12, CR0_EQ, 100 */
		/* 82180998h case   10:*/		if ( regs.CR[0].eq ) { return 0x821809FC;  }
		/* 82180998h case   10:*/		return 0x8218099C;
		  /* 8218099Ch */ case   11:  		/* lwz R10, <#[R11 + 112]> */
		/* 8218099Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000070) );
		/* 8218099Ch case   11:*/		return 0x821809A0;
		  /* 821809A0h */ case   12:  		/* lwz R8, <#[R10 + 48]> */
		/* 821809A0h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000030) );
		/* 821809A0h case   12:*/		return 0x821809A4;
		  /* 821809A4h */ case   13:  		/* rlwinm. R8, R8, 10, 31, 31 */
		/* 821809A4h case   13:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R8,regs.R8);
		/* 821809A4h case   13:*/		return 0x821809A8;
		  /* 821809A8h */ case   14:  		/* bc 12, CR0_EQ, 48 */
		/* 821809A8h case   14:*/		if ( regs.CR[0].eq ) { return 0x821809D8;  }
		/* 821809A8h case   14:*/		return 0x821809AC;
		  /* 821809ACh */ case   15:  		/* b 16 */
		/* 821809ACh case   15:*/		return 0x821809BC;
		/* 821809ACh case   15:*/		return 0x821809B0;
		  /* 821809B0h */ case   16:  		/* lwz R8, <#[R10 + 48]> */
		/* 821809B0h case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000030) );
		/* 821809B0h case   16:*/		return 0x821809B4;
		  /* 821809B4h */ case   17:  		/* rlwinm. R8, R8, 0, 9, 9 */
		/* 821809B4h case   17:*/		cpu::op::rlwinm<1,0,9,9>(regs,&regs.R8,regs.R8);
		/* 821809B4h case   17:*/		return 0x821809B8;
		  /* 821809B8h */ case   18:  		/* bc 12, CR0_EQ, 16 */
		/* 821809B8h case   18:*/		if ( regs.CR[0].eq ) { return 0x821809C8;  }
		/* 821809B8h case   18:*/		return 0x821809BC;
	}
	return 0x821809BC;
} // Block from 82180970h-821809BCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821809BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821809BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821809BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821809BC);
		  /* 821809BCh */ case    0:  		/* lwz R10, <#[R10 + 80]> */
		/* 821809BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000050) );
		/* 821809BCh case    0:*/		return 0x821809C0;
		  /* 821809C0h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821809C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821809C0h case    1:*/		return 0x821809C4;
		  /* 821809C4h */ case    2:  		/* bc 4, CR6_EQ, -20 */
		/* 821809C4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821809B0;  }
		/* 821809C4h case    2:*/		return 0x821809C8;
	}
	return 0x821809C8;
} // Block from 821809BCh-821809C8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821809C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821809C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821809C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821809C8);
		  /* 821809C8h */ case    0:  		/* lwz R8, <#[R10 + 48]> */
		/* 821809C8h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000030) );
		/* 821809C8h case    0:*/		return 0x821809CC;
		  /* 821809CCh */ case    1:  		/* rlwinm. R8, R8, 10, 31, 31 */
		/* 821809CCh case    1:*/		cpu::op::rlwinm<1,10,31,31>(regs,&regs.R8,regs.R8);
		/* 821809CCh case    1:*/		return 0x821809D0;
		  /* 821809D0h */ case    2:  		/* bc 4, CR0_EQ, -20 */
		/* 821809D0h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821809BC;  }
		/* 821809D0h case    2:*/		return 0x821809D4;
		  /* 821809D4h */ case    3:  		/* stw R10, <#[R11 + 112]> */
		/* 821809D4h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000070) );
		/* 821809D4h case    3:*/		return 0x821809D8;
	}
	return 0x821809D8;
} // Block from 821809C8h-821809D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821809D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821809D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821809D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821809D8);
		  /* 821809D8h */ case    0:  		/* lwz R10, <#[R11 + 112]> */
		/* 821809D8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000070) );
		/* 821809D8h case    0:*/		return 0x821809DC;
		  /* 821809DCh */ case    1:  		/* cmplw CR6, R10, R19 */
		/* 821809DCh case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R19);
		/* 821809DCh case    1:*/		return 0x821809E0;
		  /* 821809E0h */ case    2:  		/* bc 4, CR6_EQ, 28 */
		/* 821809E0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821809FC;  }
		/* 821809E0h case    2:*/		return 0x821809E4;
		  /* 821809E4h */ case    3:  		/* lwz R10, <#[R11 + 48]> */
		/* 821809E4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821809E4h case    3:*/		return 0x821809E8;
		  /* 821809E8h */ case    4:  		/* oris R9, R9, 192 */
		/* 821809E8h case    4:*/		cpu::op::oris<0>(regs,&regs.R9,regs.R9,0xC0);
		/* 821809E8h case    4:*/		return 0x821809EC;
		  /* 821809ECh */ case    5:  		/* stw R19, <#[R11 + 112]> */
		/* 821809ECh case    5:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R11 + 0x00000070) );
		/* 821809ECh case    5:*/		return 0x821809F0;
		  /* 821809F0h */ case    6:  		/* oris R10, R10, 128 */
		/* 821809F0h case    6:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x80);
		/* 821809F0h case    6:*/		return 0x821809F4;
		  /* 821809F4h */ case    7:  		/* stw R9, <#[R11 + 76]> */
		/* 821809F4h case    7:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x0000004C) );
		/* 821809F4h case    7:*/		return 0x821809F8;
		  /* 821809F8h */ case    8:  		/* stw R10, <#[R11 + 48]> */
		/* 821809F8h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000030) );
		/* 821809F8h case    8:*/		return 0x821809FC;
	}
	return 0x821809FC;
} // Block from 821809D8h-821809FCh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821809FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821809FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821809FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821809FC);
		  /* 821809FCh */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821809FCh case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821809FCh case    0:*/		return 0x82180A00;
		  /* 82180A00h */ case    1:  		/* lwz R11, <#[R11 + 4]> */
		/* 82180A00h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 82180A00h case    1:*/		return 0x82180A04;
		  /* 82180A04h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180A04h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180A04h case    2:*/		return 0x82180A08;
	}
	return 0x82180A08;
} // Block from 821809FCh-82180A08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82180A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180A08);
		  /* 82180A08h */ case    0:  		/* bc 4, CR0_EQ, 12 */
		/* 82180A08h case    0:*/		if ( !regs.CR[0].eq ) { return 0x82180A14;  }
		/* 82180A08h case    0:*/		return 0x82180A0C;
		  /* 82180A0Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 82180A0Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180A0Ch case    1:*/		return 0x82180A10;
		  /* 82180A10h */ case    2:  		/* bc 4, CR6_EQ, -128 */
		/* 82180A10h case    2:*/		if ( !regs.CR[6].eq ) { return 0x82180990;  }
		/* 82180A10h case    2:*/		return 0x82180A14;
	}
	return 0x82180A14;
} // Block from 82180A08h-82180A14h (3 instructions)

//////////////////////////////////////////////////////
// Block at 82180A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180A14);
		  /* 82180A14h */ case    0:  		/* lwz R11, <#[R21 + 4]> */
		/* 82180A14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 82180A14h case    0:*/		return 0x82180A18;
		  /* 82180A18h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180A18h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180A18h case    1:*/		return 0x82180A1C;
		  /* 82180A1Ch */ case    2:  		/* bc 4, CR0_EQ, 828 */
		/* 82180A1Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x82180D58;  }
		/* 82180A1Ch case    2:*/		return 0x82180A20;
		  /* 82180A20h */ case    3:  		/* mr R27, R11 */
		/* 82180A20h case    3:*/		regs.R27 = regs.R11;
		/* 82180A20h case    3:*/		return 0x82180A24;
		  /* 82180A24h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 82180A24h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 82180A24h case    4:*/		return 0x82180A28;
		  /* 82180A28h */ case    5:  		/* bc 12, CR6_EQ, 816 */
		/* 82180A28h case    5:*/		if ( regs.CR[6].eq ) { return 0x82180D58;  }
		/* 82180A28h case    5:*/		return 0x82180A2C;
		  /* 82180A2Ch */ case    6:  		/* cmplw CR6, R27, R24 */
		/* 82180A2Ch case    6:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R24);
		/* 82180A2Ch case    6:*/		return 0x82180A30;
		  /* 82180A30h */ case    7:  		/* bc 12, CR6_EQ, 788 */
		/* 82180A30h case    7:*/		if ( regs.CR[6].eq ) { return 0x82180D44;  }
		/* 82180A30h case    7:*/		return 0x82180A34;
		  /* 82180A34h */ case    8:  		/* lwz R8, <#[R27 + 40]> */
		/* 82180A34h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000028) );
		/* 82180A34h case    8:*/		return 0x82180A38;
		  /* 82180A38h */ case    9:  		/* lwz R11, <#[R19 + 48]> */
		/* 82180A38h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000030) );
		/* 82180A38h case    9:*/		return 0x82180A3C;
		  /* 82180A3Ch */ case   10:  		/* rlwinm R7, R11, 0, 13, 31 */
		/* 82180A3Ch case   10:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R7,regs.R11);
		/* 82180A3Ch case   10:*/		return 0x82180A40;
		  /* 82180A40h */ case   11:  		/* lwz R10, <#[R8]> */
		/* 82180A40h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 82180A40h case   11:*/		return 0x82180A44;
		  /* 82180A44h */ case   12:  		/* rlwinm R11, R7, 28, 5, 31 */
		/* 82180A44h case   12:*/		cpu::op::rlwinm<0,28,5,31>(regs,&regs.R11,regs.R7);
		/* 82180A44h case   12:*/		return 0x82180A48;
		  /* 82180A48h */ case   13:  		/* rlwinm R9, R7, 1, 0, 30 */
		/* 82180A48h case   13:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R7);
		/* 82180A48h case   13:*/		return 0x82180A4C;
		  /* 82180A4Ch */ case   14:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 82180A4Ch case   14:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 82180A4Ch case   14:*/		return 0x82180A50;
		  /* 82180A50h */ case   15:  		/* addi R11, R11, 1 */
		/* 82180A50h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82180A50h case   15:*/		return 0x82180A54;
		  /* 82180A54h */ case   16:  		/* addi R10, R10, 31 */
		/* 82180A54h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 82180A54h case   16:*/		return 0x82180A58;
		  /* 82180A58h */ case   17:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 82180A58h case   17:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 82180A58h case   17:*/		return 0x82180A5C;
		  /* 82180A5Ch */ case   18:  		/* rlwinm R10, R10, 29, 3, 29 */
		/* 82180A5Ch case   18:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R10);
		/* 82180A5Ch case   18:*/		return 0x82180A60;
		  /* 82180A60h */ case   19:  		/* addi R9, R9, 1 */
		/* 82180A60h case   19:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 82180A60h case   19:*/		return 0x82180A64;
		  /* 82180A64h */ case   20:  		/* add R11, R10, R11 */
		/* 82180A64h case   20:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82180A64h case   20:*/		return 0x82180A68;
		  /* 82180A68h */ case   21:  		/* rlwinm R10, R9, 0, 27, 31 */
		/* 82180A68h case   21:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R9);
		/* 82180A68h case   21:*/		return 0x82180A6C;
		  /* 82180A6Ch */ case   22:  		/* rlwinm R9, R11, 1, 0, 30 */
		/* 82180A6Ch case   22:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R11);
		/* 82180A6Ch case   22:*/		return 0x82180A70;
		  /* 82180A70h */ case   23:  		/* slw R11, R14, R10 */
		/* 82180A70h case   23:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R14,regs.R10);
		/* 82180A70h case   23:*/		return 0x82180A74;
		  /* 82180A74h */ case   24:  		/* lwzx R10, <#[R9 + R8]> */
		/* 82180A74h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 82180A74h case   24:*/		return 0x82180A78;
		  /* 82180A78h */ case   25:  		/* addi R11, R11, -1 */
		/* 82180A78h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 82180A78h case   25:*/		return 0x82180A7C;
		  /* 82180A7Ch */ case   26:  		/* rlwinm R9, R7, 1, 27, 30 */
		/* 82180A7Ch case   26:*/		cpu::op::rlwinm<0,1,27,30>(regs,&regs.R9,regs.R7);
		/* 82180A7Ch case   26:*/		return 0x82180A80;
		  /* 82180A80h */ case   27:  		/* and R11, R10, R11 */
		/* 82180A80h case   27:*/		cpu::op::and<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 82180A80h case   27:*/		return 0x82180A84;
		  /* 82180A84h */ case   28:  		/* slw R8, R15, R9 */
		/* 82180A84h case   28:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R15,regs.R9);
		/* 82180A84h case   28:*/		return 0x82180A88;
		  /* 82180A88h */ case   29:  		/* and R11, R11, R8 */
		/* 82180A88h case   29:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 82180A88h case   29:*/		return 0x82180A8C;
		  /* 82180A8Ch */ case   30:  		/* srw R11, R11, R9 */
		/* 82180A8Ch case   30:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 82180A8Ch case   30:*/		return 0x82180A90;
		  /* 82180A90h */ case   31:  		/* cmplw CR6, R25, R11 */
		/* 82180A90h case   31:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 82180A90h case   31:*/		return 0x82180A94;
		  /* 82180A94h */ case   32:  		/* bc 12, CR6_EQ, 660 */
		/* 82180A94h case   32:*/		if ( regs.CR[6].eq ) { return 0x82180D28;  }
		/* 82180A94h case   32:*/		return 0x82180A98;
		  /* 82180A98h */ case   33:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 82180A98h case   33:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 82180A98h case   33:*/		return 0x82180A9C;
		  /* 82180A9Ch */ case   34:  		/* lwz R11, <#[R11]> */
		/* 82180A9Ch case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 82180A9Ch case   34:*/		return 0x82180AA0;
		  /* 82180AA0h */ case   35:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180AA0h case   35:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180AA0h case   35:*/		return 0x82180AA4;
		  /* 82180AA4h */ case   36:  		/* bc 12, CR0_EQ, 12 */
		/* 82180AA4h case   36:*/		if ( regs.CR[0].eq ) { return 0x82180AB0;  }
		/* 82180AA4h case   36:*/		return 0x82180AA8;
		  /* 82180AA8h */ case   37:  		/* li R6, 0 */
		/* 82180AA8h case   37:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 82180AA8h case   37:*/		return 0x82180AAC;
		  /* 82180AACh */ case   38:  		/* b 12 */
		/* 82180AACh case   38:*/		return 0x82180AB8;
		/* 82180AACh case   38:*/		return 0x82180AB0;
	}
	return 0x82180AB0;
} // Block from 82180A14h-82180AB0h (39 instructions)

//////////////////////////////////////////////////////
// Block at 82180AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180AB0);
		  /* 82180AB0h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 82180AB0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 82180AB0h case    0:*/		return 0x82180AB4;
		  /* 82180AB4h */ case    1:  		/* addi R6, R11, -4 */
		/* 82180AB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R11,0xFFFFFFFC);
		/* 82180AB4h case    1:*/		return 0x82180AB8;
	}
	return 0x82180AB8;
} // Block from 82180AB0h-82180AB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 82180AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block82180AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x82180AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x82180AB8);
		  /* 82180AB8h */ case    0:  		/* mr R8, R23 */
		/* 82180AB8h case    0:*/		regs.R8 = regs.R23;
		/* 82180AB8h case    0:*/		return 0x82180ABC;
		  /* 82180ABCh */ case    1:  		/* li R7, 63 */
		/* 82180ABCh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x3F);
		/* 82180ABCh case    1:*/		return 0x82180AC0;
		  /* 82180AC0h */ case    2:  		/* mr R5, R27 */
		/* 82180AC0h case    2:*/		regs.R5 = regs.R27;
		/* 82180AC0h case    2:*/		return 0x82180AC4;
		  /* 82180AC4h */ case    3:  		/* mr R4, R19 */
		/* 82180AC4h case    3:*/		regs.R4 = regs.R19;
		/* 82180AC4h case    3:*/		return 0x82180AC8;
		  /* 82180AC8h */ case    4:  		/* mr R3, R18 */
		/* 82180AC8h case    4:*/		regs.R3 = regs.R18;
		/* 82180AC8h case    4:*/		return 0x82180ACC;
		  /* 82180ACCh */ case    5:  		/* bl -21540 */
		/* 82180ACCh case    5:*/		regs.LR = 0x82180AD0; return 0x8217B6A8;
		/* 82180ACCh case    5:*/		return 0x82180AD0;
		  /* 82180AD0h */ case    6:  		/* lwz R11, <#[R3 + 20]> */
		/* 82180AD0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000014) );
		/* 82180AD0h case    6:*/		return 0x82180AD4;
		  /* 82180AD4h */ case    7:  		/* mr R30, R3 */
		/* 82180AD4h case    7:*/		regs.R30 = regs.R3;
		/* 82180AD4h case    7:*/		return 0x82180AD8;
		  /* 82180AD8h */ case    8:  		/* addi R26, R26, 1 */
		/* 82180AD8h case    8:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 82180AD8h case    8:*/		return 0x82180ADC;
		  /* 82180ADCh */ case    9:  		/* addi R28, R3, 16 */
		/* 82180ADCh case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R3,0x10);
		/* 82180ADCh case    9:*/		return 0x82180AE0;
		  /* 82180AE0h */ case   10:  		/* li R29, 0 */
		/* 82180AE0h case   10:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 82180AE0h case   10:*/		return 0x82180AE4;
		  /* 82180AE4h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 82180AE4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 82180AE4h case   11:*/		return 0x82180AE8;
		  /* 82180AE8h */ case   12:  		/* bc 4, CR0_EQ, 544 */
		/* 82180AE8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x82180D08;  }
		/* 82180AE8h case   12:*/		return 0x82180AEC;
		  /* 82180AECh */ case   13:  		/* mr R31, R11 */
		/* 82180AECh case   13:*/		regs.R31 = regs.R11;
		/* 82180AECh case   13:*/		return 0x82180AF0;
		  /* 82180AF0h */ case   14:  		/* cmplwi CR0, R11, 0 */
		/* 82180AF0h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 82180AF0h case   14:*/		return 0x82180AF4;
		  /* 82180AF4h */ case   15:  		/* bc 12, CR0_EQ, 532 */
		/* 82180AF4h case   15:*/		if ( regs.CR[0].eq ) { return 0x82180D08;  }
		/* 82180AF4h case   15:*/		return 0x82180AF8;
		  /* 82180AF8h */ case   16:  		/* lwz R7, <#[R31]> */
		/* 82180AF8h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 82180AF8h case   16:*/		return 0x82180AFC;
		  /* 82180AFCh */ case   17:  		/* mr R9, R7 */
		/* 82180AFCh case   17:*/		regs.R9 = regs.R7;
		/* 82180AFCh case   17:*/		return 0x82180B00;
		  /* 82180B00h */ case   18:  		/* cmplwi CR6, R9, 0 */
		/* 82180B00h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 82180B00h case   18:*/		return 0x82180B04;
		  /* 82180B04h */ case   19:  		/* bc 12, CR6_EQ, 84 */
		/* 82180B04h case   19:*/		if ( regs.CR[6].eq ) { return 0x82180B58;  }
		/* 82180B04h case   19:*/		return 0x82180B08;
		  /* 82180B08h */ case   20:  		/* lwz R11, <#[R9 + 12]> */
		/* 82180B08h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 82180B08h case   20:*/		return 0x82180B0C;
		  /* 82180B0Ch */ case   21:  		/* lwz R10, <#[R19 + 48]> */
		/* 82180B0Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000030) );
		/* 82180B0Ch case   21:*/		return 0x82180B10;
		  /* 82180B10h */ case   22:  		/* rlwinm R10, R10, 0, 13, 31 */
		/* 82180B10h case   22:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R10,regs.R10);
		/* 82180B10h case   22:*/		return 0x82180B14;
		  /* 82180B14h */ case   23:  		/* lwz R8, <#[R11 + 28]> */
		/* 82180B14h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000001C) );
		/* 82180B14h case   23:*/		return 0x82180B18;
		  /* 82180B18h */ case   24:  		/* rlwinm R11, R10, 27, 5, 31 */
		/* 82180B18h case   24:*/		cpu::op::rlwinm<0,27,5,31>(regs,&regs.R11,regs.R10);
		/* 82180B18h case   24:*/		return 0x82180B1C;
		  /* 82180B1Ch */ case   25:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 82180B1Ch case   25:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 82180B1Ch case   25:*/		return 0x82180B20;
		  /* 82180B20h */ case   26:  		/* addi R11, R11, 1 */
		/* 82180B20h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 82180B20h case   26:*/		return 0x82180B24;
		  /* 82180B24h */ case   27:  		/* slw R6, R22, R10 */
		/* 82180B24h case   27:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R22,regs.R10);
		/* 82180B24h case   27:*/		return 0x82180B28;
		  /* 82180B28h */ case   28:  		/* lwz R8, <#[R8 + 40]> */
		/* 82180B28h case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000028) );
		/* 82180B28h case   28:*/		return 0x82180B2C;
		  /* 82180B2Ch */ case   29:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 82180B2Ch case   29:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 82180B2Ch case   29:*/		return 0x82180B30;
		  /* 82180B30h */ case   30:  		/* lwz R11, <#[R8]> */
		/* 82180B30h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 82180B30h case   30:*/		return 0x82180B34;
		  /* 82180B34h */ case   31:  		/* rlwinm R11, R11, 0, 13, 31 */
		/* 82180B34h case   31:*/		cpu::op::rlwinm<0,0,13,31>(regs,&regs.R11,regs.R11);
		/* 82180B34h case   31:*/		return 0x82180B38;
		  /* 82180B38h */ case   32:  		/* addi R11, R11, 31 */
		/* 82180B38h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 82180B38h case   32:*/		return 0x82180B3C;
		  /* 82180B3Ch */ case   33:  		/* rlwinm R11, R11, 29, 3, 29 */
		/* 82180B3Ch case   33:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R11,regs.R11);
		/* 82180B3Ch case   33:*/		return 0x82180B40;
		  /* 82180B40h */ case   34:  		/* add R11, R11, R10 */
		/* 82180B40h case   34:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 82180B40h case   34:*/		return 0x82180B44;
		  /* 82180B44h */ case   35:  		/* lwzx R11, <#[R11 + R8]> */
		/* 82180B44h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 82180B44h case   35:*/		return 0x82180B48;
		  /* 82180B48h */ case   36:  		/* and. R11, R11, R6 */
		/* 82180B48h case   36:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R6);
		/* 82180B48h case   36:*/		return 0x82180B4C;
		  /* 82180B4Ch */ case   37:  		/* bc 4, CR0_EQ, 332 */
		/* 82180B4Ch case   37:*/		if ( !regs.CR[0].eq ) { return 0x82180C98;  }
		/* 82180B4Ch case   37:*/		return 0x82180B50;
		  /* 82180B50h */ case   38:  		/* lwz R9, <#[R9 + 4]> */
		/* 82180B50h case   38:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 82180B50h case   38:*/		return 0x82180B54;
		  /* 82180B54h */ case   39:  		/* b -84 */
		/* 82180B54h case   39:*/		return 0x82180B00;
		/* 82180B54h case   39:*/		return 0x82180B58;
	}
	return 0x82180B58;
} // Block from 82180AB8h-82180B58h (40 instructions)

