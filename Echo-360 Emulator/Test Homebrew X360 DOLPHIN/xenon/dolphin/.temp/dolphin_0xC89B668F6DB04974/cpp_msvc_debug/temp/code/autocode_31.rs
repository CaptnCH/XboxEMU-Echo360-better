#include "C:\Users\xdfah\Downloads\recompiler\Echo-360\Echo-360 0.0.1\../../dev/src/xenon_launcher/xenonCPU.h"

//////////////////////////////////////////////////////
// Block at 821A0B94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0B94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0B94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0B94);
		  /* 821A0B94h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821A0B94h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821A0B94h case    0:*/		return 0x821A0B98;
		  /* 821A0B98h */ case    1:  		/* b -44 */
		/* 821A0B98h case    1:*/		return 0x821A0B6C;
		/* 821A0B98h case    1:*/		return 0x821A0B9C;
	}
	return 0x821A0B9C;
} // Block from 821A0B94h-821A0B9Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A0B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0B9C);
		  /* 821A0B9Ch */ case    0:  		/* addi R1, R1, 112 */
		/* 821A0B9Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821A0B9Ch case    0:*/		return 0x821A0BA0;
		  /* 821A0BA0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821A0BA0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821A0BA0h case    1:*/		return 0x821A0BA4;
		  /* 821A0BA4h */ case    2:  		/* mtspr LR, R12 */
		/* 821A0BA4h case    2:*/		regs.LR = regs.R12;
		/* 821A0BA4h case    2:*/		return 0x821A0BA8;
		  /* 821A0BA8h */ case    3:  		/* ld R30, <#[R1 - 24]> */
		/* 821A0BA8h case    3:*/		cpu::mem::load64( regs, &regs.R30, (uint32)(regs.R1 + 0xFFFFFFE8) );
		/* 821A0BA8h case    3:*/		return 0x821A0BAC;
		  /* 821A0BACh */ case    4:  		/* ld R31, <#[R1 - 16]> */
		/* 821A0BACh case    4:*/		cpu::mem::load64( regs, &regs.R31, (uint32)(regs.R1 + 0xFFFFFFF0) );
		/* 821A0BACh case    4:*/		return 0x821A0BB0;
		  /* 821A0BB0h */ case    5:  		/* bclr 20, CR0_LT */
		/* 821A0BB0h case    5:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821A0BB0h case    5:*/		return 0x821A0BB4;
	}
	return 0x821A0BB4;
} // Block from 821A0B9Ch-821A0BB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A0BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0BB4);
		  /* 821A0BB4h */ case    0:  		/* nop */
		/* 821A0BB4h case    0:*/		cpu::op::nop();
		/* 821A0BB4h case    0:*/		return 0x821A0BB8;
	}
	return 0x821A0BB8;
} // Block from 821A0BB4h-821A0BB8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A0BB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0BB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0BB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0BB8);
		  /* 821A0BB8h */ case    0:  		/* mfspr R12, LR */
		/* 821A0BB8h case    0:*/		regs.R12 = regs.LR;
		/* 821A0BB8h case    0:*/		return 0x821A0BBC;
		  /* 821A0BBCh */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821A0BBCh case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821A0BBCh case    1:*/		return 0x821A0BC0;
		  /* 821A0BC0h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821A0BC0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821A0BC0h case    2:*/		return 0x821A0BC4;
		  /* 821A0BC4h */ case    3:  		/* cmplwi CR6, R5, 10 */
		/* 821A0BC4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x0000000A);
		/* 821A0BC4h case    3:*/		return 0x821A0BC8;
		  /* 821A0BC8h */ case    4:  		/* bc 12, CR6_GT, 136 */
		/* 821A0BC8h case    4:*/		if ( regs.CR[6].gt ) { return 0x821A0C50;  }
		/* 821A0BC8h case    4:*/		return 0x821A0BCC;
		  /* 821A0BCCh */ case    5:  		/* lwz R11, <#[R3 + 40]> */
		/* 821A0BCCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 821A0BCCh case    5:*/		return 0x821A0BD0;
		  /* 821A0BD0h */ case    6:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821A0BD0h case    6:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821A0BD0h case    6:*/		return 0x821A0BD4;
		  /* 821A0BD4h */ case    7:  		/* bc 12, CR0_EQ, 124 */
		/* 821A0BD4h case    7:*/		if ( regs.CR[0].eq ) { return 0x821A0C50;  }
		/* 821A0BD4h case    7:*/		return 0x821A0BD8;
		  /* 821A0BD8h */ case    8:  		/* lwz R11, <#[R4 + 20]> */
		/* 821A0BD8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 821A0BD8h case    8:*/		return 0x821A0BDC;
		  /* 821A0BDCh */ case    9:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A0BDCh case    9:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A0BDCh case    9:*/		return 0x821A0BE0;
		  /* 821A0BE0h */ case   10:  		/* bc 4, CR0_EQ, 112 */
		/* 821A0BE0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821A0C50;  }
		/* 821A0BE0h case   10:*/		return 0x821A0BE4;
		  /* 821A0BE4h */ case   11:  		/* ori R11, R11, 1 */
		/* 821A0BE4h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A0BE4h case   11:*/		return 0x821A0BE8;
		  /* 821A0BE8h */ case   12:  		/* stw R4, <#[R1 + 80]> */
		/* 821A0BE8h case   12:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821A0BE8h case   12:*/		return 0x821A0BEC;
		  /* 821A0BECh */ case   13:  		/* stw R5, <#[R1 + 84]> */
		/* 821A0BECh case   13:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A0BECh case   13:*/		return 0x821A0BF0;
		  /* 821A0BF0h */ case   14:  		/* stw R11, <#[R4 + 20]> */
		/* 821A0BF0h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000014) );
		/* 821A0BF0h case   14:*/		return 0x821A0BF4;
		  /* 821A0BF4h */ case   15:  		/* lwz R3, <#[R3 + 656]> */
		/* 821A0BF4h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R3 + 0x00000290) );
		/* 821A0BF4h case   15:*/		return 0x821A0BF8;
		  /* 821A0BF8h */ case   16:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A0BF8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A0BF8h case   16:*/		return 0x821A0BFC;
		  /* 821A0BFCh */ case   17:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A0BFCh case   17:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A0BFCh case   17:*/		return 0x821A0C00;
		  /* 821A0C00h */ case   18:  		/* bc 4, CR0_EQ, 40 */
		/* 821A0C00h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821A0C28;  }
		/* 821A0C00h case   18:*/		return 0x821A0C04;
		  /* 821A0C04h */ case   19:  		/* lwz R11, <#[R3]> */
		/* 821A0C04h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A0C04h case   19:*/		return 0x821A0C08;
		  /* 821A0C08h */ case   20:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A0C08h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A0C08h case   20:*/		return 0x821A0C0C;
		  /* 821A0C0Ch */ case   21:  		/* addic. R11, R11, -4 */
		/* 821A0C0Ch case   21:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A0C0Ch case   21:*/		return 0x821A0C10;
		  /* 821A0C10h */ case   22:  		/* bc 12, CR0_EQ, 24 */
		/* 821A0C10h case   22:*/		if ( regs.CR[0].eq ) { return 0x821A0C28;  }
		/* 821A0C10h case   22:*/		return 0x821A0C14;
		  /* 821A0C14h */ case   23:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A0C14h case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A0C14h case   23:*/		return 0x821A0C18;
		  /* 821A0C18h */ case   24:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A0C18h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A0C18h case   24:*/		return 0x821A0C1C;
		  /* 821A0C1Ch */ case   25:  		/* addi R10, R10, 1 */
		/* 821A0C1Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A0C1Ch case   25:*/		return 0x821A0C20;
		  /* 821A0C20h */ case   26:  		/* cmplw CR6, R10, R9 */
		/* 821A0C20h case   26:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A0C20h case   26:*/		return 0x821A0C24;
		  /* 821A0C24h */ case   27:  		/* bc 4, CR6_GT, 16 */
		/* 821A0C24h case   27:*/		if ( !regs.CR[6].gt ) { return 0x821A0C34;  }
		/* 821A0C24h case   27:*/		return 0x821A0C28;
	}
	return 0x821A0C28;
} // Block from 821A0BB8h-821A0C28h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821A0C28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0C28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0C28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0C28);
		  /* 821A0C28h */ case    0:  		/* li R4, 1 */
		/* 821A0C28h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A0C28h case    0:*/		return 0x821A0C2C;
		  /* 821A0C2Ch */ case    1:  		/* bl -7540 */
		/* 821A0C2Ch case    1:*/		regs.LR = 0x821A0C30; return 0x8219EEB8;
		/* 821A0C2Ch case    1:*/		return 0x821A0C30;
		  /* 821A0C30h */ case    2:  		/* mr R11, R3 */
		/* 821A0C30h case    2:*/		regs.R11 = regs.R3;
		/* 821A0C30h case    2:*/		return 0x821A0C34;
	}
	return 0x821A0C34;
} // Block from 821A0C28h-821A0C34h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A0C34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0C34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0C34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0C34);
		  /* 821A0C34h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A0C34h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A0C34h case    0:*/		return 0x821A0C38;
		  /* 821A0C38h */ case    1:  		/* ld R9, <#[R1 + 80]> */
		/* 821A0C38h case    1:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821A0C38h case    1:*/		return 0x821A0C3C;
		  /* 821A0C3Ch */ case    2:  		/* addi R8, R10, 2 */
		/* 821A0C3Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 821A0C3Ch case    2:*/		return 0x821A0C40;
		  /* 821A0C40h */ case    3:  		/* addi R7, R10, 1 */
		/* 821A0C40h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821A0C40h case    3:*/		return 0x821A0C44;
		  /* 821A0C44h */ case    4:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 821A0C44h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 821A0C44h case    4:*/		return 0x821A0C48;
		  /* 821A0C48h */ case    5:  		/* stw R7, <#[R11 + 8]> */
		/* 821A0C48h case    5:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821A0C48h case    5:*/		return 0x821A0C4C;
		  /* 821A0C4Ch */ case    6:  		/* stdx R9, <#[R10 + R11]> */
		/* 821A0C4Ch case    6:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A0C4Ch case    6:*/		return 0x821A0C50;
	}
	return 0x821A0C50;
} // Block from 821A0C34h-821A0C50h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A0C50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0C50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0C50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0C50);
		  /* 821A0C50h */ case    0:  		/* addi R1, R1, 96 */
		/* 821A0C50h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821A0C50h case    0:*/		return 0x821A0C54;
		  /* 821A0C54h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821A0C54h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821A0C54h case    1:*/		return 0x821A0C58;
		  /* 821A0C58h */ case    2:  		/* mtspr LR, R12 */
		/* 821A0C58h case    2:*/		regs.LR = regs.R12;
		/* 821A0C58h case    2:*/		return 0x821A0C5C;
		  /* 821A0C5Ch */ case    3:  		/* bclr 20, CR0_LT */
		/* 821A0C5Ch case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821A0C5Ch case    3:*/		return 0x821A0C60;
	}
	return 0x821A0C60;
} // Block from 821A0C50h-821A0C60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A0C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0C60);
		  /* 821A0C60h */ case    0:  		/* mfspr R12, LR */
		/* 821A0C60h case    0:*/		regs.R12 = regs.LR;
		/* 821A0C60h case    0:*/		return 0x821A0C64;
		  /* 821A0C64h */ case    1:  		/* bl -1112644 */
		/* 821A0C64h case    1:*/		regs.LR = 0x821A0C68; return 0x82091220;
		/* 821A0C64h case    1:*/		return 0x821A0C68;
		  /* 821A0C68h */ case    2:  		/* stwu R1, <#[R1 - 352]> */
		/* 821A0C68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 821A0C68h case    2:*/		return 0x821A0C6C;
		  /* 821A0C6Ch */ case    3:  		/* addi R11, R1, 116 */
		/* 821A0C6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x74);
		/* 821A0C6Ch case    3:*/		return 0x821A0C70;
		  /* 821A0C70h */ case    4:  		/* stw R4, <#[R1 + 380]> */
		/* 821A0C70h case    4:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000017C) );
		/* 821A0C70h case    4:*/		return 0x821A0C74;
		  /* 821A0C74h */ case    5:  		/* li R22, 0 */
		/* 821A0C74h case    5:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821A0C74h case    5:*/		return 0x821A0C78;
		  /* 821A0C78h */ case    6:  		/* stw R5, <#[R1 + 388]> */
		/* 821A0C78h case    6:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000184) );
		/* 821A0C78h case    6:*/		return 0x821A0C7C;
		  /* 821A0C7Ch */ case    7:  		/* mr R14, R3 */
		/* 821A0C7Ch case    7:*/		regs.R14 = regs.R3;
		/* 821A0C7Ch case    7:*/		return 0x821A0C80;
		  /* 821A0C80h */ case    8:  		/* stb R8, <#[R1 + 415]> */
		/* 821A0C80h case    8:*/		cpu::mem::store8( regs, regs.R8, (uint32)(regs.R1 + 0x0000019F) );
		/* 821A0C80h case    8:*/		return 0x821A0C84;
		  /* 821A0C84h */ case    9:  		/* stw R22, <#[R1 + 112]> */
		/* 821A0C84h case    9:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000070) );
		/* 821A0C84h case    9:*/		return 0x821A0C88;
		  /* 821A0C88h */ case   10:  		/* mr R20, R4 */
		/* 821A0C88h case   10:*/		regs.R20 = regs.R4;
		/* 821A0C88h case   10:*/		return 0x821A0C8C;
		  /* 821A0C8Ch */ case   11:  		/* mr R23, R5 */
		/* 821A0C8Ch case   11:*/		regs.R23 = regs.R5;
		/* 821A0C8Ch case   11:*/		return 0x821A0C90;
		  /* 821A0C90h */ case   12:  		/* stw R22, <#[R11]> */
		/* 821A0C90h case   12:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 821A0C90h case   12:*/		return 0x821A0C94;
		  /* 821A0C94h */ case   13:  		/* li R5, 64 */
		/* 821A0C94h case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x40);
		/* 821A0C94h case   13:*/		return 0x821A0C98;
		  /* 821A0C98h */ case   14:  		/* stw R22, <#[R11 + 4]> */
		/* 821A0C98h case   14:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000004) );
		/* 821A0C98h case   14:*/		return 0x821A0C9C;
		  /* 821A0C9Ch */ case   15:  		/* li R4, 0 */
		/* 821A0C9Ch case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A0C9Ch case   15:*/		return 0x821A0CA0;
		  /* 821A0CA0h */ case   16:  		/* addi R3, R1, 128 */
		/* 821A0CA0h case   16:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x80);
		/* 821A0CA0h case   16:*/		return 0x821A0CA4;
		  /* 821A0CA4h */ case   17:  		/* stw R22, <#[R11 + 8]> */
		/* 821A0CA4h case   17:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000008) );
		/* 821A0CA4h case   17:*/		return 0x821A0CA8;
		  /* 821A0CA8h */ case   18:  		/* mr R15, R6 */
		/* 821A0CA8h case   18:*/		regs.R15 = regs.R6;
		/* 821A0CA8h case   18:*/		return 0x821A0CAC;
		  /* 821A0CACh */ case   19:  		/* mr R31, R7 */
		/* 821A0CACh case   19:*/		regs.R31 = regs.R7;
		/* 821A0CACh case   19:*/		return 0x821A0CB0;
		  /* 821A0CB0h */ case   20:  		/* mr R30, R9 */
		/* 821A0CB0h case   20:*/		regs.R30 = regs.R9;
		/* 821A0CB0h case   20:*/		return 0x821A0CB4;
		  /* 821A0CB4h */ case   21:  		/* bl -1112436 */
		/* 821A0CB4h case   21:*/		regs.LR = 0x821A0CB8; return 0x82091340;
		/* 821A0CB4h case   21:*/		return 0x821A0CB8;
		  /* 821A0CB8h */ case   22:  		/* rlwinm. R16, R30, 0, 24, 31 */
		/* 821A0CB8h case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R16,regs.R30);
		/* 821A0CB8h case   22:*/		return 0x821A0CBC;
		  /* 821A0CBCh */ case   23:  		/* stw R22, <#[R1 + 80]> */
		/* 821A0CBCh case   23:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000050) );
		/* 821A0CBCh case   23:*/		return 0x821A0CC0;
		  /* 821A0CC0h */ case   24:  		/* mr R24, R22 */
		/* 821A0CC0h case   24:*/		regs.R24 = regs.R22;
		/* 821A0CC0h case   24:*/		return 0x821A0CC4;
		  /* 821A0CC4h */ case   25:  		/* bc 4, CR0_EQ, 76 */
		/* 821A0CC4h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821A0D10;  }
		/* 821A0CC4h case   25:*/		return 0x821A0CC8;
		  /* 821A0CC8h */ case   26:  		/* li R6, 0 */
		/* 821A0CC8h case   26:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A0CC8h case   26:*/		return 0x821A0CCC;
		  /* 821A0CCCh */ case   27:  		/* mr R5, R20 */
		/* 821A0CCCh case   27:*/		regs.R5 = regs.R20;
		/* 821A0CCCh case   27:*/		return 0x821A0CD0;
		  /* 821A0CD0h */ case   28:  		/* addi R4, R1, 112 */
		/* 821A0CD0h case   28:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 821A0CD0h case   28:*/		return 0x821A0CD4;
		  /* 821A0CD4h */ case   29:  		/* mr R3, R14 */
		/* 821A0CD4h case   29:*/		regs.R3 = regs.R14;
		/* 821A0CD4h case   29:*/		return 0x821A0CD8;
		  /* 821A0CD8h */ case   30:  		/* bl -20304 */
		/* 821A0CD8h case   30:*/		regs.LR = 0x821A0CDC; return 0x8219BD88;
		/* 821A0CD8h case   30:*/		return 0x821A0CDC;
		  /* 821A0CDCh */ case   31:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A0CDCh case   31:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A0CDCh case   31:*/		return 0x821A0CE0;
		  /* 821A0CE0h */ case   32:  		/* bc 4, CR0_EQ, 12 */
		/* 821A0CE0h case   32:*/		if ( !regs.CR[0].eq ) { return 0x821A0CEC;  }
		/* 821A0CE0h case   32:*/		return 0x821A0CE4;
		  /* 821A0CE4h */ case   33:  		/* li R3, -1 */
		/* 821A0CE4h case   33:*/		cpu::op::li<0>(regs,&regs.R3,0xFFFFFFFF);
		/* 821A0CE4h case   33:*/		return 0x821A0CE8;
		  /* 821A0CE8h */ case   34:  		/* b 3436 */
		/* 821A0CE8h case   34:*/		return 0x821A1A54;
		/* 821A0CE8h case   34:*/		return 0x821A0CEC;
	}
	return 0x821A0CEC;
} // Block from 821A0C60h-821A0CECh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821A0CECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0CEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0CEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0CEC);
		  /* 821A0CECh */ case    0:  		/* mr R6, R31 */
		/* 821A0CECh case    0:*/		regs.R6 = regs.R31;
		/* 821A0CECh case    0:*/		return 0x821A0CF0;
		  /* 821A0CF0h */ case    1:  		/* mr R5, R23 */
		/* 821A0CF0h case    1:*/		regs.R5 = regs.R23;
		/* 821A0CF0h case    1:*/		return 0x821A0CF4;
		  /* 821A0CF4h */ case    2:  		/* addi R4, R1, 112 */
		/* 821A0CF4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x70);
		/* 821A0CF4h case    2:*/		return 0x821A0CF8;
		  /* 821A0CF8h */ case    3:  		/* mr R3, R14 */
		/* 821A0CF8h case    3:*/		regs.R3 = regs.R14;
		/* 821A0CF8h case    3:*/		return 0x821A0CFC;
		  /* 821A0CFCh */ case    4:  		/* bl -20340 */
		/* 821A0CFCh case    4:*/		regs.LR = 0x821A0D00; return 0x8219BD88;
		/* 821A0CFCh case    4:*/		return 0x821A0D00;
		  /* 821A0D00h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A0D00h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A0D00h case    5:*/		return 0x821A0D04;
		  /* 821A0D04h */ case    6:  		/* bc 12, CR0_EQ, -32 */
		/* 821A0D04h case    6:*/		if ( regs.CR[0].eq ) { return 0x821A0CE4;  }
		/* 821A0D04h case    6:*/		return 0x821A0D08;
		  /* 821A0D08h */ case    7:  		/* li R24, 1 */
		/* 821A0D08h case    7:*/		cpu::op::li<0>(regs,&regs.R24,0x1);
		/* 821A0D08h case    7:*/		return 0x821A0D0C;
		  /* 821A0D0Ch */ case    8:  		/* stw R24, <#[R1 + 80]> */
		/* 821A0D0Ch case    8:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821A0D0Ch case    8:*/		return 0x821A0D10;
	}
	return 0x821A0D10;
} // Block from 821A0CECh-821A0D10h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A0D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0D10);
		  /* 821A0D10h */ case    0:  		/* mulli R10, R24, 20 */
		/* 821A0D10h case    0:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R24,0x14);
		/* 821A0D10h case    0:*/		return 0x821A0D14;
		  /* 821A0D14h */ case    1:  		/* addi R11, R1, 112 */
		/* 821A0D14h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821A0D14h case    1:*/		return 0x821A0D18;
		  /* 821A0D18h */ case    2:  		/* addi R21, R23, 44 */
		/* 821A0D18h case    2:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R23,0x2C);
		/* 821A0D18h case    2:*/		return 0x821A0D1C;
		  /* 821A0D1Ch */ case    3:  		/* mr R17, R22 */
		/* 821A0D1Ch case    3:*/		regs.R17 = regs.R22;
		/* 821A0D1Ch case    3:*/		return 0x821A0D20;
		  /* 821A0D20h */ case    4:  		/* mr R26, R22 */
		/* 821A0D20h case    4:*/		regs.R26 = regs.R22;
		/* 821A0D20h case    4:*/		return 0x821A0D24;
		  /* 821A0D24h */ case    5:  		/* add R25, R10, R11 */
		/* 821A0D24h case    5:*/		cpu::op::add<0>(regs,&regs.R25,regs.R10,regs.R11);
		/* 821A0D24h case    5:*/		return 0x821A0D28;
		  /* 821A0D28h */ case    6:  		/* mr R27, R21 */
		/* 821A0D28h case    6:*/		regs.R27 = regs.R21;
		/* 821A0D28h case    6:*/		return 0x821A0D2C;
		  /* 821A0D2Ch */ case    7:  		/* subf R18, R23, R20 */
		/* 821A0D2Ch case    7:*/		cpu::op::subf<0>(regs,&regs.R18,regs.R23,regs.R20);
		/* 821A0D2Ch case    7:*/		return 0x821A0D30;
		  /* 821A0D30h */ case    8:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A0D30h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A0D30h case    8:*/		return 0x821A0D34;
		  /* 821A0D34h */ case    9:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A0D34h case    9:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A0D34h case    9:*/		return 0x821A0D38;
		  /* 821A0D38h */ case   10:  		/* cmplw CR6, R26, R11 */
		/* 821A0D38h case   10:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821A0D38h case   10:*/		return 0x821A0D3C;
		  /* 821A0D3Ch */ case   11:  		/* bc 4, CR6_LT, 400 */
		/* 821A0D3Ch case   11:*/		if ( !regs.CR[6].lt ) { return 0x821A0ECC;  }
		/* 821A0D3Ch case   11:*/		return 0x821A0D40;
		  /* 821A0D40h */ case   12:  		/* lwzx R29, <#[R18 + R27]> */
		/* 821A0D40h case   12:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R18 + regs.R27 + 0x00000000) );
		/* 821A0D40h case   12:*/		return 0x821A0D44;
		  /* 821A0D44h */ case   13:  		/* lwz R5, <#[R27]> */
		/* 821A0D44h case   13:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000000) );
		/* 821A0D44h case   13:*/		return 0x821A0D48;
		  /* 821A0D48h */ case   14:  		/* lwz R30, <#[R29 + 12]> */
		/* 821A0D48h case   14:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A0D48h case   14:*/		return 0x821A0D4C;
		  /* 821A0D4Ch */ case   15:  		/* lwz R28, <#[R5 + 12]> */
		/* 821A0D4Ch case   15:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R5 + 0x0000000C) );
		/* 821A0D4Ch case   15:*/		return 0x821A0D50;
		  /* 821A0D50h */ case   16:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A0D50h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A0D50h case   16:*/		return 0x821A0D54;
		  /* 821A0D54h */ case   17:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821A0D54h case   17:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821A0D54h case   17:*/		return 0x821A0D58;
		  /* 821A0D58h */ case   18:  		/* cmplwi CR6, R10, 125 */
		/* 821A0D58h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007D);
		/* 821A0D58h case   18:*/		return 0x821A0D5C;
		  /* 821A0D5Ch */ case   19:  		/* bc 12, CR6_EQ, 16 */
		/* 821A0D5Ch case   19:*/		if ( regs.CR[6].eq ) { return 0x821A0D6C;  }
		/* 821A0D5Ch case   19:*/		return 0x821A0D60;
		  /* 821A0D60h */ case   20:  		/* cmplwi CR6, R10, 124 */
		/* 821A0D60h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007C);
		/* 821A0D60h case   20:*/		return 0x821A0D64;
		  /* 821A0D64h */ case   21:  		/* mr R11, R22 */
		/* 821A0D64h case   21:*/		regs.R11 = regs.R22;
		/* 821A0D64h case   21:*/		return 0x821A0D68;
		  /* 821A0D68h */ case   22:  		/* bc 4, CR6_EQ, 8 */
		/* 821A0D68h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821A0D70;  }
		/* 821A0D68h case   22:*/		return 0x821A0D6C;
	}
	return 0x821A0D6C;
} // Block from 821A0D10h-821A0D6Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A0D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0D6C);
		  /* 821A0D6Ch */ case    0:  		/* li R11, 1 */
		/* 821A0D6Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A0D6Ch case    0:*/		return 0x821A0D70;
	}
	return 0x821A0D70;
} // Block from 821A0D6Ch-821A0D70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A0D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0D70);
		  /* 821A0D70h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A0D70h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A0D70h case    0:*/		return 0x821A0D74;
		  /* 821A0D74h */ case    1:  		/* bc 4, CR0_EQ, 332 */
		/* 821A0D74h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821A0EC0;  }
		/* 821A0D74h case    1:*/		return 0x821A0D78;
	}
	return 0x821A0D78;
} // Block from 821A0D70h-821A0D78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A0D78h
// Function '?CanCombineDependencies@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PAVDependency@2@010PAUCombineDependenciesState@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0D78);
		  /* 821A0D78h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A0D78h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A0D78h case    0:*/		return 0x821A0D7C;
		  /* 821A0D7Ch */ case    1:  		/* rlwinm R9, R11, 25, 25, 31 */
		/* 821A0D7Ch case    1:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R9,regs.R11);
		/* 821A0D7Ch case    1:*/		return 0x821A0D80;
		  /* 821A0D80h */ case    2:  		/* cmplwi CR6, R9, 125 */
		/* 821A0D80h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000007D);
		/* 821A0D80h case    2:*/		return 0x821A0D84;
		  /* 821A0D84h */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821A0D84h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A0D94;  }
		/* 821A0D84h case    3:*/		return 0x821A0D88;
		  /* 821A0D88h */ case    4:  		/* cmplwi CR6, R9, 124 */
		/* 821A0D88h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x0000007C);
		/* 821A0D88h case    4:*/		return 0x821A0D8C;
		  /* 821A0D8Ch */ case    5:  		/* mr R11, R22 */
		/* 821A0D8Ch case    5:*/		regs.R11 = regs.R22;
		/* 821A0D8Ch case    5:*/		return 0x821A0D90;
		  /* 821A0D90h */ case    6:  		/* bc 4, CR6_EQ, 8 */
		/* 821A0D90h case    6:*/		if ( !regs.CR[6].eq ) { return 0x821A0D98;  }
		/* 821A0D90h case    6:*/		return 0x821A0D94;
	}
	return 0x821A0D94;
} // Block from 821A0D78h-821A0D94h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A0D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0D94);
		  /* 821A0D94h */ case    0:  		/* li R11, 1 */
		/* 821A0D94h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A0D94h case    0:*/		return 0x821A0D98;
	}
	return 0x821A0D98;
} // Block from 821A0D94h-821A0D98h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A0D98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0D98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0D98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0D98);
		  /* 821A0D98h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A0D98h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A0D98h case    0:*/		return 0x821A0D9C;
		  /* 821A0D9Ch */ case    1:  		/* bc 4, CR0_EQ, 292 */
		/* 821A0D9Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821A0EC0;  }
		/* 821A0D9Ch case    1:*/		return 0x821A0DA0;
		  /* 821A0DA0h */ case    2:  		/* cmplwi CR6, R10, 120 */
		/* 821A0DA0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000078);
		/* 821A0DA0h case    2:*/		return 0x821A0DA4;
		  /* 821A0DA4h */ case    3:  		/* bc 12, CR6_EQ, 284 */
		/* 821A0DA4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A0EC0;  }
		/* 821A0DA4h case    3:*/		return 0x821A0DA8;
		  /* 821A0DA8h */ case    4:  		/* cmplwi CR6, R9, 120 */
		/* 821A0DA8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000078);
		/* 821A0DA8h case    4:*/		return 0x821A0DAC;
		  /* 821A0DACh */ case    5:  		/* bc 12, CR6_EQ, 276 */
		/* 821A0DACh case    5:*/		if ( regs.CR[6].eq ) { return 0x821A0EC0;  }
		/* 821A0DACh case    5:*/		return 0x821A0DB0;
		  /* 821A0DB0h */ case    6:  		/* lwz R11, <#[R29]> */
		/* 821A0DB0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A0DB0h case    6:*/		return 0x821A0DB4;
		  /* 821A0DB4h */ case    7:  		/* addi R24, R24, 1 */
		/* 821A0DB4h case    7:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821A0DB4h case    7:*/		return 0x821A0DB8;
		  /* 821A0DB8h */ case    8:  		/* mr R31, R25 */
		/* 821A0DB8h case    8:*/		regs.R31 = regs.R25;
		/* 821A0DB8h case    8:*/		return 0x821A0DBC;
		  /* 821A0DBCh */ case    9:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 821A0DBCh case    9:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 821A0DBCh case    9:*/		return 0x821A0DC0;
		  /* 821A0DC0h */ case   10:  		/* stw R24, <#[R1 + 80]> */
		/* 821A0DC0h case   10:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821A0DC0h case   10:*/		return 0x821A0DC4;
		  /* 821A0DC4h */ case   11:  		/* addi R25, R25, 20 */
		/* 821A0DC4h case   11:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x14);
		/* 821A0DC4h case   11:*/		return 0x821A0DC8;
		  /* 821A0DC8h */ case   12:  		/* bc 4, CR0_EQ, 172 */
		/* 821A0DC8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A0E74;  }
		/* 821A0DC8h case   12:*/		return 0x821A0DCC;
		  /* 821A0DCCh */ case   13:  		/* addi R11, R1, 92 */
		/* 821A0DCCh case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x5C);
		/* 821A0DCCh case   13:*/		return 0x821A0DD0;
		  /* 821A0DD0h */ case   14:  		/* stw R22, <#[R1 + 88]> */
		/* 821A0DD0h case   14:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000058) );
		/* 821A0DD0h case   14:*/		return 0x821A0DD4;
		  /* 821A0DD4h */ case   15:  		/* li R8, 0 */
		/* 821A0DD4h case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A0DD4h case   15:*/		return 0x821A0DD8;
		  /* 821A0DD8h */ case   16:  		/* li R7, 0 */
		/* 821A0DD8h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A0DD8h case   16:*/		return 0x821A0DDC;
		  /* 821A0DDCh */ case   17:  		/* addi R6, R1, 88 */
		/* 821A0DDCh case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 821A0DDCh case   17:*/		return 0x821A0DE0;
		  /* 821A0DE0h */ case   18:  		/* mr R4, R30 */
		/* 821A0DE0h case   18:*/		regs.R4 = regs.R30;
		/* 821A0DE0h case   18:*/		return 0x821A0DE4;
		  /* 821A0DE4h */ case   19:  		/* stw R22, <#[R11]> */
		/* 821A0DE4h case   19:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000000) );
		/* 821A0DE4h case   19:*/		return 0x821A0DE8;
		  /* 821A0DE8h */ case   20:  		/* mr R3, R14 */
		/* 821A0DE8h case   20:*/		regs.R3 = regs.R14;
		/* 821A0DE8h case   20:*/		return 0x821A0DEC;
		  /* 821A0DECh */ case   21:  		/* stw R22, <#[R11 + 4]> */
		/* 821A0DECh case   21:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x00000004) );
		/* 821A0DECh case   21:*/		return 0x821A0DF0;
		  /* 821A0DF0h */ case   22:  		/* bl -6008 */
		/* 821A0DF0h case   22:*/		regs.LR = 0x821A0DF4; return 0x8219F678;
		/* 821A0DF0h case   22:*/		return 0x821A0DF4;
		  /* 821A0DF4h */ case   23:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A0DF4h case   23:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A0DF4h case   23:*/		return 0x821A0DF8;
		  /* 821A0DF8h */ case   24:  		/* mr R3, R14 */
		/* 821A0DF8h case   24:*/		regs.R3 = regs.R14;
		/* 821A0DF8h case   24:*/		return 0x821A0DFC;
		  /* 821A0DFCh */ case   25:  		/* bc 12, CR0_EQ, 76 */
		/* 821A0DFCh case   25:*/		if ( regs.CR[0].eq ) { return 0x821A0E48;  }
		/* 821A0DFCh case   25:*/		return 0x821A0E00;
		  /* 821A0E00h */ case   26:  		/* mr R5, R30 */
		/* 821A0E00h case   26:*/		regs.R5 = regs.R30;
		/* 821A0E00h case   26:*/		return 0x821A0E04;
		  /* 821A0E04h */ case   27:  		/* li R6, 0 */
		/* 821A0E04h case   27:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A0E04h case   27:*/		return 0x821A0E08;
		  /* 821A0E08h */ case   28:  		/* mr R4, R31 */
		/* 821A0E08h case   28:*/		regs.R4 = regs.R31;
		/* 821A0E08h case   28:*/		return 0x821A0E0C;
		  /* 821A0E0Ch */ case   29:  		/* bl -20612 */
		/* 821A0E0Ch case   29:*/		regs.LR = 0x821A0E10; return 0x8219BD88;
		/* 821A0E0Ch case   29:*/		return 0x821A0E10;
		  /* 821A0E10h */ case   30:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A0E10h case   30:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A0E10h case   30:*/		return 0x821A0E14;
		  /* 821A0E14h */ case   31:  		/* bc 12, CR0_EQ, -304 */
		/* 821A0E14h case   31:*/		if ( regs.CR[0].eq ) { return 0x821A0CE4;  }
		/* 821A0E14h case   31:*/		return 0x821A0E18;
		  /* 821A0E18h */ case   32:  		/* lwz R8, <#[R1 + 88]> */
		/* 821A0E18h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000058) );
		/* 821A0E18h case   32:*/		return 0x821A0E1C;
		  /* 821A0E1Ch */ case   33:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A0E1Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A0E1Ch case   33:*/		return 0x821A0E20;
		  /* 821A0E20h */ case   34:  		/* rlwinm R10, R8, 11, 30, 31 */
		/* 821A0E20h case   34:*/		cpu::op::rlwinm<0,11,30,31>(regs,&regs.R10,regs.R8);
		/* 821A0E20h case   34:*/		return 0x821A0E24;
		  /* 821A0E24h */ case   35:  		/* rlwinm R9, R11, 29, 29, 31 */
		/* 821A0E24h case   35:*/		cpu::op::rlwinm<0,29,29,31>(regs,&regs.R9,regs.R11);
		/* 821A0E24h case   35:*/		return 0x821A0E28;
		  /* 821A0E28h */ case   36:  		/* add R10, R9, R10 */
		/* 821A0E28h case   36:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A0E28h case   36:*/		return 0x821A0E2C;
		  /* 821A0E2Ch */ case   37:  		/* cmplwi CR6, R10, 4 */
		/* 821A0E2Ch case   37:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821A0E2Ch case   37:*/		return 0x821A0E30;
		  /* 821A0E30h */ case   38:  		/* bc 12, CR6_GT, -332 */
		/* 821A0E30h case   38:*/		if ( regs.CR[6].gt ) { return 0x821A0CE4;  }
		/* 821A0E30h case   38:*/		return 0x821A0E34;
		  /* 821A0E34h */ case   39:  		/* rlwinm R10, R8, 14, 27, 28 */
		/* 821A0E34h case   39:*/		cpu::op::rlwinm<0,14,27,28>(regs,&regs.R10,regs.R8);
		/* 821A0E34h case   39:*/		return 0x821A0E38;
		  /* 821A0E38h */ case   40:  		/* add R10, R10, R11 */
		/* 821A0E38h case   40:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A0E38h case   40:*/		return 0x821A0E3C;
		  /* 821A0E3Ch */ case   41:  		/* rlwimi R10, R11, 0, 29, 25 */
		/* 821A0E3Ch case   41:*/		cpu::op::rlwimi<0,0,29,25>(regs,&regs.R10,regs.R11);
		/* 821A0E3Ch case   41:*/		return 0x821A0E40;
		  /* 821A0E40h */ case   42:  		/* stw R10, <#[R31 + 16]> */
		/* 821A0E40h case   42:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 821A0E40h case   42:*/		return 0x821A0E44;
		  /* 821A0E44h */ case   43:  		/* b 124 */
		/* 821A0E44h case   43:*/		return 0x821A0EC0;
		/* 821A0E44h case   43:*/		return 0x821A0E48;
	}
	return 0x821A0E48;
} // Block from 821A0D98h-821A0E48h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821A0E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0E48);
		  /* 821A0E48h */ case    0:  		/* li R8, 0 */
		/* 821A0E48h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A0E48h case    0:*/		return 0x821A0E4C;
		  /* 821A0E4Ch */ case    1:  		/* li R7, 0 */
		/* 821A0E4Ch case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A0E4Ch case    1:*/		return 0x821A0E50;
		  /* 821A0E50h */ case    2:  		/* addi R6, R1, 88 */
		/* 821A0E50h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x58);
		/* 821A0E50h case    2:*/		return 0x821A0E54;
		  /* 821A0E54h */ case    3:  		/* mr R5, R29 */
		/* 821A0E54h case    3:*/		regs.R5 = regs.R29;
		/* 821A0E54h case    3:*/		return 0x821A0E58;
		  /* 821A0E58h */ case    4:  		/* mr R4, R28 */
		/* 821A0E58h case    4:*/		regs.R4 = regs.R28;
		/* 821A0E58h case    4:*/		return 0x821A0E5C;
		  /* 821A0E5Ch */ case    5:  		/* bl -6116 */
		/* 821A0E5Ch case    5:*/		regs.LR = 0x821A0E60; return 0x8219F678;
		/* 821A0E5Ch case    5:*/		return 0x821A0E60;
		  /* 821A0E60h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A0E60h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A0E60h case    6:*/		return 0x821A0E64;
		  /* 821A0E64h */ case    7:  		/* bc 12, CR0_EQ, 16 */
		/* 821A0E64h case    7:*/		if ( regs.CR[0].eq ) { return 0x821A0E74;  }
		/* 821A0E64h case    7:*/		return 0x821A0E68;
		  /* 821A0E68h */ case    8:  		/* mr R5, R28 */
		/* 821A0E68h case    8:*/		regs.R5 = regs.R28;
		/* 821A0E68h case    8:*/		return 0x821A0E6C;
		  /* 821A0E6Ch */ case    9:  		/* mr R3, R14 */
		/* 821A0E6Ch case    9:*/		regs.R3 = regs.R14;
		/* 821A0E6Ch case    9:*/		return 0x821A0E70;
		  /* 821A0E70h */ case   10:  		/* b -108 */
		/* 821A0E70h case   10:*/		return 0x821A0E04;
		/* 821A0E70h case   10:*/		return 0x821A0E74;
	}
	return 0x821A0E74;
} // Block from 821A0E48h-821A0E74h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A0E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0E74);
		  /* 821A0E74h */ case    0:  		/* li R6, 0 */
		/* 821A0E74h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A0E74h case    0:*/		return 0x821A0E78;
		  /* 821A0E78h */ case    1:  		/* mr R5, R30 */
		/* 821A0E78h case    1:*/		regs.R5 = regs.R30;
		/* 821A0E78h case    1:*/		return 0x821A0E7C;
		  /* 821A0E7Ch */ case    2:  		/* mr R4, R31 */
		/* 821A0E7Ch case    2:*/		regs.R4 = regs.R31;
		/* 821A0E7Ch case    2:*/		return 0x821A0E80;
		  /* 821A0E80h */ case    3:  		/* mr R3, R14 */
		/* 821A0E80h case    3:*/		regs.R3 = regs.R14;
		/* 821A0E80h case    3:*/		return 0x821A0E84;
		  /* 821A0E84h */ case    4:  		/* bl -20732 */
		/* 821A0E84h case    4:*/		regs.LR = 0x821A0E88; return 0x8219BD88;
		/* 821A0E84h case    4:*/		return 0x821A0E88;
		  /* 821A0E88h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A0E88h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A0E88h case    5:*/		return 0x821A0E8C;
		  /* 821A0E8Ch */ case    6:  		/* bc 12, CR0_EQ, -424 */
		/* 821A0E8Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821A0CE4;  }
		/* 821A0E8Ch case    6:*/		return 0x821A0E90;
		  /* 821A0E90h */ case    7:  		/* cmplw CR6, R30, R28 */
		/* 821A0E90h case    7:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 821A0E90h case    7:*/		return 0x821A0E94;
		  /* 821A0E94h */ case    8:  		/* bc 12, CR6_EQ, 44 */
		/* 821A0E94h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A0EC0;  }
		/* 821A0E94h case    8:*/		return 0x821A0E98;
		  /* 821A0E98h */ case    9:  		/* li R6, 0 */
		/* 821A0E98h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A0E98h case    9:*/		return 0x821A0E9C;
		  /* 821A0E9Ch */ case   10:  		/* mr R5, R28 */
		/* 821A0E9Ch case   10:*/		regs.R5 = regs.R28;
		/* 821A0E9Ch case   10:*/		return 0x821A0EA0;
		  /* 821A0EA0h */ case   11:  		/* mr R4, R31 */
		/* 821A0EA0h case   11:*/		regs.R4 = regs.R31;
		/* 821A0EA0h case   11:*/		return 0x821A0EA4;
		  /* 821A0EA4h */ case   12:  		/* mr R3, R14 */
		/* 821A0EA4h case   12:*/		regs.R3 = regs.R14;
		/* 821A0EA4h case   12:*/		return 0x821A0EA8;
		  /* 821A0EA8h */ case   13:  		/* bl -20768 */
		/* 821A0EA8h case   13:*/		regs.LR = 0x821A0EAC; return 0x8219BD88;
		/* 821A0EA8h case   13:*/		return 0x821A0EAC;
		  /* 821A0EACh */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A0EACh case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A0EACh case   14:*/		return 0x821A0EB0;
		  /* 821A0EB0h */ case   15:  		/* bc 12, CR0_EQ, -460 */
		/* 821A0EB0h case   15:*/		if ( regs.CR[0].eq ) { return 0x821A0CE4;  }
		/* 821A0EB0h case   15:*/		return 0x821A0EB4;
		  /* 821A0EB4h */ case   16:  		/* li R11, 1 */
		/* 821A0EB4h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A0EB4h case   16:*/		return 0x821A0EB8;
		  /* 821A0EB8h */ case   17:  		/* slw R11, R11, R26 */
		/* 821A0EB8h case   17:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821A0EB8h case   17:*/		return 0x821A0EBC;
		  /* 821A0EBCh */ case   18:  		/* or R17, R11, R17 */
		/* 821A0EBCh case   18:*/		cpu::op::or<0>(regs,&regs.R17,regs.R11,regs.R17);
		/* 821A0EBCh case   18:*/		return 0x821A0EC0;
	}
	return 0x821A0EC0;
} // Block from 821A0E74h-821A0EC0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A0EC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0EC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0EC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0EC0);
		  /* 821A0EC0h */ case    0:  		/* addi R26, R26, 1 */
		/* 821A0EC0h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821A0EC0h case    0:*/		return 0x821A0EC4;
		  /* 821A0EC4h */ case    1:  		/* addi R27, R27, 4 */
		/* 821A0EC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821A0EC4h case    1:*/		return 0x821A0EC8;
		  /* 821A0EC8h */ case    2:  		/* b -408 */
		/* 821A0EC8h case    2:*/		return 0x821A0D30;
		/* 821A0EC8h case    2:*/		return 0x821A0ECC;
	}
	return 0x821A0ECC;
} // Block from 821A0EC0h-821A0ECCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A0ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0ECC);
		  /* 821A0ECCh */ case    0:  		/* mr R11, R22 */
		/* 821A0ECCh case    0:*/		regs.R11 = regs.R22;
		/* 821A0ECCh case    0:*/		return 0x821A0ED0;
		  /* 821A0ED0h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 821A0ED0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821A0ED0h case    1:*/		return 0x821A0ED4;
		  /* 821A0ED4h */ case    2:  		/* bc 12, CR6_EQ, 300 */
		/* 821A0ED4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A1000;  }
		/* 821A0ED4h case    2:*/		return 0x821A0ED8;
		  /* 821A0ED8h */ case    3:  		/* addi R28, R1, 112 */
		/* 821A0ED8h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x70);
		/* 821A0ED8h case    3:*/		return 0x821A0EDC;
		  /* 821A0EDCh */ case    4:  		/* addi R26, R11, 1 */
		/* 821A0EDCh case    4:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0x1);
		/* 821A0EDCh case    4:*/		return 0x821A0EE0;
		  /* 821A0EE0h */ case    5:  		/* mulli R10, R26, 20 */
		/* 821A0EE0h case    5:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R26,0x14);
		/* 821A0EE0h case    5:*/		return 0x821A0EE4;
		  /* 821A0EE4h */ case    6:  		/* addi R11, R1, 112 */
		/* 821A0EE4h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821A0EE4h case    6:*/		return 0x821A0EE8;
		  /* 821A0EE8h */ case    7:  		/* mr R27, R26 */
		/* 821A0EE8h case    7:*/		regs.R27 = regs.R26;
		/* 821A0EE8h case    7:*/		return 0x821A0EEC;
		  /* 821A0EECh */ case    8:  		/* add R29, R10, R11 */
		/* 821A0EECh case    8:*/		cpu::op::add<0>(regs,&regs.R29,regs.R10,regs.R11);
		/* 821A0EECh case    8:*/		return 0x821A0EF0;
		  /* 821A0EF0h */ case    9:  		/* cmplw CR6, R27, R24 */
		/* 821A0EF0h case    9:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R24);
		/* 821A0EF0h case    9:*/		return 0x821A0EF4;
		  /* 821A0EF4h */ case   10:  		/* bc 4, CR6_LT, 252 */
		/* 821A0EF4h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821A0FF0;  }
		/* 821A0EF4h case   10:*/		return 0x821A0EF8;
		  /* 821A0EF8h */ case   11:  		/* lwz R11, <#[R28 + 16]> */
		/* 821A0EF8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821A0EF8h case   11:*/		return 0x821A0EFC;
		  /* 821A0EFCh */ case   12:  		/* mr R6, R22 */
		/* 821A0EFCh case   12:*/		regs.R6 = regs.R22;
		/* 821A0EFCh case   12:*/		return 0x821A0F00;
		  /* 821A0F00h */ case   13:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821A0F00h case   13:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A0F00h case   13:*/		return 0x821A0F04;
		  /* 821A0F04h */ case   14:  		/* bc 12, CR0_EQ, 88 */
		/* 821A0F04h case   14:*/		if ( regs.CR[0].eq ) { return 0x821A0F5C;  }
		/* 821A0F04h case   14:*/		return 0x821A0F08;
		  /* 821A0F08h */ case   15:  		/* lwz R11, <#[R29 + 16]> */
		/* 821A0F08h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821A0F08h case   15:*/		return 0x821A0F0C;
		  /* 821A0F0Ch */ case   16:  		/* mr R9, R28 */
		/* 821A0F0Ch case   16:*/		regs.R9 = regs.R28;
		/* 821A0F0Ch case   16:*/		return 0x821A0F10;
		  /* 821A0F10h */ case   17:  		/* rlwinm R8, R11, 0, 29, 31 */
		/* 821A0F10h case   17:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R8,regs.R11);
		/* 821A0F10h case   17:*/		return 0x821A0F14;
		  /* 821A0F14h */ case   18:  		/* lwz R7, <#[R9]> */
		/* 821A0F14h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000000) );
		/* 821A0F14h case   18:*/		return 0x821A0F18;
		  /* 821A0F18h */ case   19:  		/* mr R11, R22 */
		/* 821A0F18h case   19:*/		regs.R11 = regs.R22;
		/* 821A0F18h case   19:*/		return 0x821A0F1C;
		  /* 821A0F1Ch */ case   20:  		/* cmplwi CR6, R8, 0 */
		/* 821A0F1Ch case   20:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821A0F1Ch case   20:*/		return 0x821A0F20;
		  /* 821A0F20h */ case   21:  		/* bc 12, CR6_EQ, 36 */
		/* 821A0F20h case   21:*/		if ( regs.CR[6].eq ) { return 0x821A0F44;  }
		/* 821A0F20h case   21:*/		return 0x821A0F24;
		  /* 821A0F24h */ case   22:  		/* mr R10, R29 */
		/* 821A0F24h case   22:*/		regs.R10 = regs.R29;
		/* 821A0F24h case   22:*/		return 0x821A0F28;
		  /* 821A0F28h */ case   23:  		/* lwz R5, <#[R10]> */
		/* 821A0F28h case   23:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x00000000) );
		/* 821A0F28h case   23:*/		return 0x821A0F2C;
		  /* 821A0F2Ch */ case   24:  		/* cmplw CR6, R7, R5 */
		/* 821A0F2Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R5);
		/* 821A0F2Ch case   24:*/		return 0x821A0F30;
		  /* 821A0F30h */ case   25:  		/* bc 12, CR6_EQ, 56 */
		/* 821A0F30h case   25:*/		if ( regs.CR[6].eq ) { return 0x821A0F68;  }
		/* 821A0F30h case   25:*/		return 0x821A0F34;
		  /* 821A0F34h */ case   26:  		/* addi R11, R11, 1 */
		/* 821A0F34h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A0F34h case   26:*/		return 0x821A0F38;
		  /* 821A0F38h */ case   27:  		/* addi R10, R10, 4 */
		/* 821A0F38h case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A0F38h case   27:*/		return 0x821A0F3C;
		  /* 821A0F3Ch */ case   28:  		/* cmplw CR6, R11, R8 */
		/* 821A0F3Ch case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821A0F3Ch case   28:*/		return 0x821A0F40;
		  /* 821A0F40h */ case   29:  		/* bc 12, CR6_LT, -24 */
		/* 821A0F40h case   29:*/		if ( regs.CR[6].lt ) { return 0x821A0F28;  }
		/* 821A0F40h case   29:*/		return 0x821A0F44;
	}
	return 0x821A0F44;
} // Block from 821A0ECCh-821A0F44h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821A0F44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0F44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0F44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0F44);
		  /* 821A0F44h */ case    0:  		/* lwz R11, <#[R28 + 16]> */
		/* 821A0F44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821A0F44h case    0:*/		return 0x821A0F48;
		  /* 821A0F48h */ case    1:  		/* addi R6, R6, 1 */
		/* 821A0F48h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821A0F48h case    1:*/		return 0x821A0F4C;
		  /* 821A0F4Ch */ case    2:  		/* addi R9, R9, 4 */
		/* 821A0F4Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821A0F4Ch case    2:*/		return 0x821A0F50;
		  /* 821A0F50h */ case    3:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A0F50h case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A0F50h case    3:*/		return 0x821A0F54;
		  /* 821A0F54h */ case    4:  		/* cmplw CR6, R6, R11 */
		/* 821A0F54h case    4:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821A0F54h case    4:*/		return 0x821A0F58;
		  /* 821A0F58h */ case    5:  		/* bc 12, CR6_LT, -68 */
		/* 821A0F58h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A0F14;  }
		/* 821A0F58h case    5:*/		return 0x821A0F5C;
	}
	return 0x821A0F5C;
} // Block from 821A0F44h-821A0F5Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A0F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0F5C);
		  /* 821A0F5Ch */ case    0:  		/* addi R27, R27, 1 */
		/* 821A0F5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A0F5Ch case    0:*/		return 0x821A0F60;
		  /* 821A0F60h */ case    1:  		/* addi R29, R29, 20 */
		/* 821A0F60h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x14);
		/* 821A0F60h case    1:*/		return 0x821A0F64;
		  /* 821A0F64h */ case    2:  		/* b -116 */
		/* 821A0F64h case    2:*/		return 0x821A0EF0;
		/* 821A0F64h case    2:*/		return 0x821A0F68;
	}
	return 0x821A0F68;
} // Block from 821A0F5Ch-821A0F68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A0F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0F68);
		  /* 821A0F68h */ case    0:  		/* mr R30, R22 */
		/* 821A0F68h case    0:*/		regs.R30 = regs.R22;
		/* 821A0F68h case    0:*/		return 0x821A0F6C;
		  /* 821A0F6Ch */ case    1:  		/* mr R31, R29 */
		/* 821A0F6Ch case    1:*/		regs.R31 = regs.R29;
		/* 821A0F6Ch case    1:*/		return 0x821A0F70;
		  /* 821A0F70h */ case    2:  		/* li R6, 0 */
		/* 821A0F70h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A0F70h case    2:*/		return 0x821A0F74;
		  /* 821A0F74h */ case    3:  		/* lwz R5, <#[R31]> */
		/* 821A0F74h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000000) );
		/* 821A0F74h case    3:*/		return 0x821A0F78;
		  /* 821A0F78h */ case    4:  		/* mr R4, R28 */
		/* 821A0F78h case    4:*/		regs.R4 = regs.R28;
		/* 821A0F78h case    4:*/		return 0x821A0F7C;
		  /* 821A0F7Ch */ case    5:  		/* mr R3, R14 */
		/* 821A0F7Ch case    5:*/		regs.R3 = regs.R14;
		/* 821A0F7Ch case    5:*/		return 0x821A0F80;
		  /* 821A0F80h */ case    6:  		/* bl -24008 */
		/* 821A0F80h case    6:*/		regs.LR = 0x821A0F84; return 0x8219B1B8;
		/* 821A0F80h case    6:*/		return 0x821A0F84;
		  /* 821A0F84h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A0F84h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A0F84h case    7:*/		return 0x821A0F88;
		  /* 821A0F88h */ case    8:  		/* bc 12, CR0_EQ, -676 */
		/* 821A0F88h case    8:*/		if ( regs.CR[0].eq ) { return 0x821A0CE4;  }
		/* 821A0F88h case    8:*/		return 0x821A0F8C;
		  /* 821A0F8Ch */ case    9:  		/* lwz R10, <#[R29 + 16]> */
		/* 821A0F8Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000010) );
		/* 821A0F8Ch case    9:*/		return 0x821A0F90;
		  /* 821A0F90h */ case   10:  		/* addi R30, R30, 1 */
		/* 821A0F90h case   10:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A0F90h case   10:*/		return 0x821A0F94;
		  /* 821A0F94h */ case   11:  		/* addi R31, R31, 4 */
		/* 821A0F94h case   11:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821A0F94h case   11:*/		return 0x821A0F98;
		  /* 821A0F98h */ case   12:  		/* rlwinm R11, R10, 0, 29, 31 */
		/* 821A0F98h case   12:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R10);
		/* 821A0F98h case   12:*/		return 0x821A0F9C;
		  /* 821A0F9Ch */ case   13:  		/* cmplw CR6, R30, R11 */
		/* 821A0F9Ch case   13:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821A0F9Ch case   13:*/		return 0x821A0FA0;
		  /* 821A0FA0h */ case   14:  		/* bc 12, CR6_LT, -48 */
		/* 821A0FA0h case   14:*/		if ( regs.CR[6].lt ) { return 0x821A0F70;  }
		/* 821A0FA0h case   14:*/		return 0x821A0FA4;
		  /* 821A0FA4h */ case   15:  		/* lwz R11, <#[R28 + 16]> */
		/* 821A0FA4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821A0FA4h case   15:*/		return 0x821A0FA8;
	}
	return 0x821A0FA8;
} // Block from 821A0F68h-821A0FA8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A0FA8h
// Function '?CanCombineOperandPair@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PAVDependency@2@10110PAPAV42@2PAUCombineDependenciesState@2@3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0FA8);
		  /* 821A0FA8h */ case    0:  		/* rlwinm R9, R10, 29, 29, 31 */
		/* 821A0FA8h case    0:*/		cpu::op::rlwinm<0,29,29,31>(regs,&regs.R9,regs.R10);
		/* 821A0FA8h case    0:*/		return 0x821A0FAC;
		  /* 821A0FACh */ case    1:  		/* rlwinm R8, R11, 29, 29, 31 */
		/* 821A0FACh case    1:*/		cpu::op::rlwinm<0,29,29,31>(regs,&regs.R8,regs.R11);
		/* 821A0FACh case    1:*/		return 0x821A0FB0;
		  /* 821A0FB0h */ case    2:  		/* add R9, R8, R9 */
		/* 821A0FB0h case    2:*/		cpu::op::add<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821A0FB0h case    2:*/		return 0x821A0FB4;
		  /* 821A0FB4h */ case    3:  		/* cmplwi CR6, R9, 4 */
		/* 821A0FB4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000004);
		/* 821A0FB4h case    3:*/		return 0x821A0FB8;
		  /* 821A0FB8h */ case    4:  		/* bc 12, CR6_GT, -724 */
		/* 821A0FB8h case    4:*/		if ( regs.CR[6].gt ) { return 0x821A0CE4;  }
		/* 821A0FB8h case    4:*/		return 0x821A0FBC;
		  /* 821A0FBCh */ case    5:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 821A0FBCh case    5:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 821A0FBCh case    5:*/		return 0x821A0FC0;
		  /* 821A0FC0h */ case    6:  		/* subf R9, R27, R24 */
		/* 821A0FC0h case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R27,regs.R24);
		/* 821A0FC0h case    6:*/		return 0x821A0FC4;
		  /* 821A0FC4h */ case    7:  		/* add R8, R10, R11 */
		/* 821A0FC4h case    7:*/		cpu::op::add<0>(regs,&regs.R8,regs.R10,regs.R11);
		/* 821A0FC4h case    7:*/		return 0x821A0FC8;
		  /* 821A0FC8h */ case    8:  		/* mulli R10, R9, 20 */
		/* 821A0FC8h case    8:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R9,0x14);
		/* 821A0FC8h case    8:*/		return 0x821A0FCC;
		  /* 821A0FCCh */ case    9:  		/* rlwimi R8, R11, 0, 29, 25 */
		/* 821A0FCCh case    9:*/		cpu::op::rlwimi<0,0,29,25>(regs,&regs.R8,regs.R11);
		/* 821A0FCCh case    9:*/		return 0x821A0FD0;
		  /* 821A0FD0h */ case   10:  		/* addi R5, R10, -20 */
		/* 821A0FD0h case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R10,0xFFFFFFEC);
		/* 821A0FD0h case   10:*/		return 0x821A0FD4;
		  /* 821A0FD4h */ case   11:  		/* stw R8, <#[R28 + 16]> */
		/* 821A0FD4h case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R28 + 0x00000010) );
		/* 821A0FD4h case   11:*/		return 0x821A0FD8;
		  /* 821A0FD8h */ case   12:  		/* addi R4, R29, 20 */
		/* 821A0FD8h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R29,0x14);
		/* 821A0FD8h case   12:*/		return 0x821A0FDC;
		  /* 821A0FDCh */ case   13:  		/* mr R3, R29 */
		/* 821A0FDCh case   13:*/		regs.R3 = regs.R29;
		/* 821A0FDCh case   13:*/		return 0x821A0FE0;
		  /* 821A0FE0h */ case   14:  		/* bl -1110208 */
		/* 821A0FE0h case   14:*/		regs.LR = 0x821A0FE4; return 0x82091F20;
		/* 821A0FE0h case   14:*/		return 0x821A0FE4;
		  /* 821A0FE4h */ case   15:  		/* addi R24, R24, -1 */
		/* 821A0FE4h case   15:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0xFFFFFFFF);
		/* 821A0FE4h case   15:*/		return 0x821A0FE8;
		  /* 821A0FE8h */ case   16:  		/* stw R24, <#[R1 + 80]> */
		/* 821A0FE8h case   16:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821A0FE8h case   16:*/		return 0x821A0FEC;
		  /* 821A0FECh */ case   17:  		/* b -268 */
		/* 821A0FECh case   17:*/		return 0x821A0EE0;
		/* 821A0FECh case   17:*/		return 0x821A0FF0;
	}
	return 0x821A0FF0;
} // Block from 821A0FA8h-821A0FF0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A0FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A0FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A0FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A0FF0);
		  /* 821A0FF0h */ case    0:  		/* mr R11, R26 */
		/* 821A0FF0h case    0:*/		regs.R11 = regs.R26;
		/* 821A0FF0h case    0:*/		return 0x821A0FF4;
		  /* 821A0FF4h */ case    1:  		/* addi R28, R28, 20 */
		/* 821A0FF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x14);
		/* 821A0FF4h case    1:*/		return 0x821A0FF8;
		  /* 821A0FF8h */ case    2:  		/* cmplw CR6, R26, R24 */
		/* 821A0FF8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R24);
		/* 821A0FF8h case    2:*/		return 0x821A0FFC;
		  /* 821A0FFCh */ case    3:  		/* bc 12, CR6_LT, -288 */
		/* 821A0FFCh case    3:*/		if ( regs.CR[6].lt ) { return 0x821A0EDC;  }
		/* 821A0FFCh case    3:*/		return 0x821A1000;
	}
	return 0x821A1000;
} // Block from 821A0FF0h-821A1000h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A1000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1000);
		  /* 821A1000h */ case    0:  		/* mr R19, R22 */
		/* 821A1000h case    0:*/		regs.R19 = regs.R22;
		/* 821A1000h case    0:*/		return 0x821A1004;
		  /* 821A1004h */ case    1:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A1004h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A1004h case    1:*/		return 0x821A1008;
		  /* 821A1008h */ case    2:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A1008h case    2:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A1008h case    2:*/		return 0x821A100C;
		  /* 821A100Ch */ case    3:  		/* cmplw CR6, R19, R11 */
		/* 821A100Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R11);
		/* 821A100Ch case    3:*/		return 0x821A1010;
		  /* 821A1010h */ case    4:  		/* bc 4, CR6_LT, 468 */
		/* 821A1010h case    4:*/		if ( !regs.CR[6].lt ) { return 0x821A11E4;  }
		/* 821A1010h case    4:*/		return 0x821A1014;
		  /* 821A1014h */ case    5:  		/* li R10, 1 */
		/* 821A1014h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821A1014h case    5:*/		return 0x821A1018;
		  /* 821A1018h */ case    6:  		/* lwzx R11, <#[R18 + R21]> */
		/* 821A1018h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R18 + regs.R21 + 0x00000000) );
		/* 821A1018h case    6:*/		return 0x821A101C;
		  /* 821A101Ch */ case    7:  		/* slw R10, R10, R19 */
		/* 821A101Ch case    7:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R19);
		/* 821A101Ch case    7:*/		return 0x821A1020;
		  /* 821A1020h */ case    8:  		/* and. R10, R10, R17 */
		/* 821A1020h case    8:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R17);
		/* 821A1020h case    8:*/		return 0x821A1024;
		  /* 821A1024h */ case    9:  		/* bc 12, CR0_EQ, 420 */
		/* 821A1024h case    9:*/		if ( regs.CR[0].eq ) { return 0x821A11C8;  }
		/* 821A1024h case    9:*/		return 0x821A1028;
		  /* 821A1028h */ case   10:  		/* lwz R10, <#[R21]> */
		/* 821A1028h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 821A1028h case   10:*/		return 0x821A102C;
		  /* 821A102Ch */ case   11:  		/* cmplwi CR6, R16, 0 */
		/* 821A102Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821A102Ch case   11:*/		return 0x821A1030;
		  /* 821A1030h */ case   12:  		/* lwz R22, <#[R11 + 12]> */
		/* 821A1030h case   12:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A1030h case   12:*/		return 0x821A1034;
		  /* 821A1034h */ case   13:  		/* lwz R20, <#[R10 + 12]> */
		/* 821A1034h case   13:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R10 + 0x0000000C) );
		/* 821A1034h case   13:*/		return 0x821A1038;
		  /* 821A1038h */ case   14:  		/* bc 4, CR6_EQ, 60 */
		/* 821A1038h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821A1074;  }
		/* 821A1038h case   14:*/		return 0x821A103C;
		  /* 821A103Ch */ case   15:  		/* lwz R11, <#[R1 + 128]> */
		/* 821A103Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821A103Ch case   15:*/		return 0x821A1040;
		  /* 821A1040h */ case   16:  		/* li R9, 0 */
		/* 821A1040h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A1040h case   16:*/		return 0x821A1044;
		  /* 821A1044h */ case   17:  		/* rlwinm. R8, R11, 0, 29, 31 */
		/* 821A1044h case   17:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R8,regs.R11);
		/* 821A1044h case   17:*/		return 0x821A1048;
		  /* 821A1048h */ case   18:  		/* bc 12, CR0_EQ, 44 */
		/* 821A1048h case   18:*/		if ( regs.CR[0].eq ) { return 0x821A1074;  }
		/* 821A1048h case   18:*/		return 0x821A104C;
		  /* 821A104Ch */ case   19:  		/* addi R11, R1, 112 */
		/* 821A104Ch case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821A104Ch case   19:*/		return 0x821A1050;
		  /* 821A1050h */ case   20:  		/* lwz R10, <#[R11]> */
		/* 821A1050h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A1050h case   20:*/		return 0x821A1054;
		  /* 821A1054h */ case   21:  		/* cmplw CR6, R10, R22 */
		/* 821A1054h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R22);
		/* 821A1054h case   21:*/		return 0x821A1058;
		  /* 821A1058h */ case   22:  		/* bc 12, CR6_EQ, -884 */
		/* 821A1058h case   22:*/		if ( regs.CR[6].eq ) { return 0x821A0CE4;  }
		/* 821A1058h case   22:*/		return 0x821A105C;
		  /* 821A105Ch */ case   23:  		/* cmplw CR6, R10, R20 */
		/* 821A105Ch case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R20);
		/* 821A105Ch case   23:*/		return 0x821A1060;
		  /* 821A1060h */ case   24:  		/* bc 12, CR6_EQ, -892 */
		/* 821A1060h case   24:*/		if ( regs.CR[6].eq ) { return 0x821A0CE4;  }
		/* 821A1060h case   24:*/		return 0x821A1064;
		  /* 821A1064h */ case   25:  		/* addi R9, R9, 1 */
		/* 821A1064h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821A1064h case   25:*/		return 0x821A1068;
		  /* 821A1068h */ case   26:  		/* addi R11, R11, 4 */
		/* 821A1068h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A1068h case   26:*/		return 0x821A106C;
		  /* 821A106Ch */ case   27:  		/* cmplw CR6, R9, R8 */
		/* 821A106Ch case   27:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821A106Ch case   27:*/		return 0x821A1070;
		  /* 821A1070h */ case   28:  		/* bc 12, CR6_LT, -32 */
		/* 821A1070h case   28:*/		if ( regs.CR[6].lt ) { return 0x821A1050;  }
		/* 821A1070h case   28:*/		return 0x821A1074;
	}
	return 0x821A1074;
} // Block from 821A1000h-821A1074h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A1074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1074);
		  /* 821A1074h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A1074h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A1074h case    0:*/		return 0x821A1078;
		  /* 821A1078h */ case    1:  		/* li R23, 1 */
		/* 821A1078h case    1:*/		cpu::op::li<0>(regs,&regs.R23,0x1);
		/* 821A1078h case    1:*/		return 0x821A107C;
		  /* 821A107Ch */ case    2:  		/* cmplwi CR6, R11, 1 */
		/* 821A107Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821A107Ch case    2:*/		return 0x821A1080;
		  /* 821A1080h */ case    3:  		/* bc 4, CR6_GT, 328 */
		/* 821A1080h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821A11C8;  }
		/* 821A1080h case    3:*/		return 0x821A1084;
		  /* 821A1084h */ case    4:  		/* li R24, 5 */
		/* 821A1084h case    4:*/		cpu::op::li<0>(regs,&regs.R24,0x5);
		/* 821A1084h case    4:*/		return 0x821A1088;
		  /* 821A1088h */ case    5:  		/* addi R25, R1, 148 */
		/* 821A1088h case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R1,0x94);
		/* 821A1088h case    5:*/		return 0x821A108C;
		  /* 821A108Ch */ case    6:  		/* lwz R11, <#[R25]> */
		/* 821A108Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A108Ch case    6:*/		return 0x821A1090;
		  /* 821A1090h */ case    7:  		/* li R27, 0 */
		/* 821A1090h case    7:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A1090h case    7:*/		return 0x821A1094;
		  /* 821A1094h */ case    8:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821A1094h case    8:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A1094h case    8:*/		return 0x821A1098;
		  /* 821A1098h */ case    9:  		/* bc 12, CR0_EQ, 280 */
		/* 821A1098h case    9:*/		if ( regs.CR[0].eq ) { return 0x821A11B0;  }
		/* 821A1098h case    9:*/		return 0x821A109C;
		  /* 821A109Ch */ case   10:  		/* add R11, R27, R24 */
		/* 821A109Ch case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R27,regs.R24);
		/* 821A109Ch case   10:*/		return 0x821A10A0;
		  /* 821A10A0h */ case   11:  		/* addi R10, R1, 112 */
		/* 821A10A0h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821A10A0h case   11:*/		return 0x821A10A4;
		  /* 821A10A4h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A10A4h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A10A4h case   12:*/		return 0x821A10A8;
		  /* 821A10A8h */ case   13:  		/* lwzx R26, <#[R11 + R10]> */
		/* 821A10A8h case   13:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821A10A8h case   13:*/		return 0x821A10AC;
		  /* 821A10ACh */ case   14:  		/* cmplw CR6, R26, R22 */
		/* 821A10ACh case   14:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R22);
		/* 821A10ACh case   14:*/		return 0x821A10B0;
		  /* 821A10B0h */ case   15:  		/* bc 12, CR6_EQ, 12 */
		/* 821A10B0h case   15:*/		if ( regs.CR[6].eq ) { return 0x821A10BC;  }
		/* 821A10B0h case   15:*/		return 0x821A10B4;
		  /* 821A10B4h */ case   16:  		/* cmplw CR6, R26, R20 */
		/* 821A10B4h case   16:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R20);
		/* 821A10B4h case   16:*/		return 0x821A10B8;
		  /* 821A10B8h */ case   17:  		/* bc 4, CR6_EQ, 84 */
		/* 821A10B8h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821A110C;  }
		/* 821A10B8h case   17:*/		return 0x821A10BC;
	}
	return 0x821A10BC;
} // Block from 821A1074h-821A10BCh (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A10BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A10BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A10BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A10BC);
		  /* 821A10BCh */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821A10BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A10BCh case    0:*/		return 0x821A10C0;
		  /* 821A10C0h */ case    1:  		/* li R27, 0 */
		/* 821A10C0h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A10C0h case    1:*/		return 0x821A10C4;
		  /* 821A10C4h */ case    2:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821A10C4h case    2:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A10C4h case    2:*/		return 0x821A10C8;
		  /* 821A10C8h */ case    3:  		/* bc 12, CR0_EQ, 68 */
		/* 821A10C8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821A110C;  }
		/* 821A10C8h case    3:*/		return 0x821A10CC;
		  /* 821A10CCh */ case    4:  		/* add R11, R27, R24 */
		/* 821A10CCh case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R27,regs.R24);
		/* 821A10CCh case    4:*/		return 0x821A10D0;
		  /* 821A10D0h */ case    5:  		/* addi R10, R1, 112 */
		/* 821A10D0h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821A10D0h case    5:*/		return 0x821A10D4;
		  /* 821A10D4h */ case    6:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A10D4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A10D4h case    6:*/		return 0x821A10D8;
		  /* 821A10D8h */ case    7:  		/* li R6, 1 */
		/* 821A10D8h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A10D8h case    7:*/		return 0x821A10DC;
		  /* 821A10DCh */ case    8:  		/* mr R5, R15 */
		/* 821A10DCh case    8:*/		regs.R5 = regs.R15;
		/* 821A10DCh case    8:*/		return 0x821A10E0;
		  /* 821A10E0h */ case    9:  		/* mr R3, R14 */
		/* 821A10E0h case    9:*/		regs.R3 = regs.R14;
		/* 821A10E0h case    9:*/		return 0x821A10E4;
		  /* 821A10E4h */ case   10:  		/* lwzx R26, <#[R11 + R10]> */
		/* 821A10E4h case   10:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821A10E4h case   10:*/		return 0x821A10E8;
		  /* 821A10E8h */ case   11:  		/* mr R4, R26 */
		/* 821A10E8h case   11:*/		regs.R4 = regs.R26;
		/* 821A10E8h case   11:*/		return 0x821A10EC;
		  /* 821A10ECh */ case   12:  		/* bl 570236 */
		/* 821A10ECh case   12:*/		regs.LR = 0x821A10F0; return 0x8222C468;
		/* 821A10ECh case   12:*/		return 0x821A10F0;
		  /* 821A10F0h */ case   13:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A10F0h case   13:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A10F0h case   13:*/		return 0x821A10F4;
		  /* 821A10F4h */ case   14:  		/* bc 12, CR0_EQ, -1040 */
		/* 821A10F4h case   14:*/		if ( regs.CR[0].eq ) { return 0x821A0CE4;  }
		/* 821A10F4h case   14:*/		return 0x821A10F8;
		  /* 821A10F8h */ case   15:  		/* lwz R11, <#[R25]> */
		/* 821A10F8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A10F8h case   15:*/		return 0x821A10FC;
		  /* 821A10FCh */ case   16:  		/* addi R27, R27, 1 */
		/* 821A10FCh case   16:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A10FCh case   16:*/		return 0x821A1100;
		  /* 821A1100h */ case   17:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A1100h case   17:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A1100h case   17:*/		return 0x821A1104;
		  /* 821A1104h */ case   18:  		/* cmplw CR6, R27, R11 */
		/* 821A1104h case   18:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821A1104h case   18:*/		return 0x821A1108;
		  /* 821A1108h */ case   19:  		/* bc 12, CR6_LT, -60 */
		/* 821A1108h case   19:*/		if ( regs.CR[6].lt ) { return 0x821A10CC;  }
		/* 821A1108h case   19:*/		return 0x821A110C;
	}
	return 0x821A110C;
} // Block from 821A10BCh-821A110Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821A110Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A110C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A110C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A110C);
		  /* 821A110Ch */ case    0:  		/* li R31, 1 */
		/* 821A110Ch case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x1);
		/* 821A110Ch case    0:*/		return 0x821A1110;
		  /* 821A1110h */ case    1:  		/* li R28, 5 */
		/* 821A1110h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x5);
		/* 821A1110h case    1:*/		return 0x821A1114;
		  /* 821A1114h */ case    2:  		/* addi R29, R1, 148 */
		/* 821A1114h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R1,0x94);
		/* 821A1114h case    2:*/		return 0x821A1118;
		  /* 821A1118h */ case    3:  		/* cmplw CR6, R31, R23 */
		/* 821A1118h case    3:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R23);
		/* 821A1118h case    3:*/		return 0x821A111C;
		  /* 821A111Ch */ case    4:  		/* bc 12, CR6_EQ, 104 */
		/* 821A111Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821A1184;  }
		/* 821A111Ch case    4:*/		return 0x821A1120;
		  /* 821A1120h */ case    5:  		/* lwz R11, <#[R29]> */
		/* 821A1120h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A1120h case    5:*/		return 0x821A1124;
		  /* 821A1124h */ case    6:  		/* li R30, 0 */
		/* 821A1124h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A1124h case    6:*/		return 0x821A1128;
		  /* 821A1128h */ case    7:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821A1128h case    7:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A1128h case    7:*/		return 0x821A112C;
		  /* 821A112Ch */ case    8:  		/* bc 12, CR0_EQ, 88 */
		/* 821A112Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821A1184;  }
		/* 821A112Ch case    8:*/		return 0x821A1130;
		  /* 821A1130h */ case    9:  		/* add R11, R30, R28 */
		/* 821A1130h case    9:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R28);
		/* 821A1130h case    9:*/		return 0x821A1134;
		  /* 821A1134h */ case   10:  		/* addi R10, R1, 112 */
		/* 821A1134h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821A1134h case   10:*/		return 0x821A1138;
		  /* 821A1138h */ case   11:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A1138h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A1138h case   11:*/		return 0x821A113C;
		  /* 821A113Ch */ case   12:  		/* mr R5, R14 */
		/* 821A113Ch case   12:*/		regs.R5 = regs.R14;
		/* 821A113Ch case   12:*/		return 0x821A1140;
		  /* 821A1140h */ case   13:  		/* mr R3, R26 */
		/* 821A1140h case   13:*/		regs.R3 = regs.R26;
		/* 821A1140h case   13:*/		return 0x821A1144;
		  /* 821A1144h */ case   14:  		/* lwzx R4, <#[R11 + R10]> */
		/* 821A1144h case   14:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821A1144h case   14:*/		return 0x821A1148;
		  /* 821A1148h */ case   15:  		/* bl 576408 */
		/* 821A1148h case   15:*/		regs.LR = 0x821A114C; return 0x8222DCE0;
		/* 821A1148h case   15:*/		return 0x821A114C;
		  /* 821A114Ch */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A114Ch case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A114Ch case   16:*/		return 0x821A1150;
		  /* 821A1150h */ case   17:  		/* bc 4, CR0_EQ, 28 */
		/* 821A1150h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821A116C;  }
		/* 821A1150h case   17:*/		return 0x821A1154;
		  /* 821A1154h */ case   18:  		/* lwz R11, <#[R29]> */
		/* 821A1154h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A1154h case   18:*/		return 0x821A1158;
		  /* 821A1158h */ case   19:  		/* addi R30, R30, 1 */
		/* 821A1158h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A1158h case   19:*/		return 0x821A115C;
		  /* 821A115Ch */ case   20:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A115Ch case   20:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A115Ch case   20:*/		return 0x821A1160;
		  /* 821A1160h */ case   21:  		/* cmplw CR6, R30, R11 */
		/* 821A1160h case   21:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821A1160h case   21:*/		return 0x821A1164;
		  /* 821A1164h */ case   22:  		/* bc 12, CR6_LT, -52 */
		/* 821A1164h case   22:*/		if ( regs.CR[6].lt ) { return 0x821A1130;  }
		/* 821A1164h case   22:*/		return 0x821A1168;
		  /* 821A1168h */ case   23:  		/* b 28 */
		/* 821A1168h case   23:*/		return 0x821A1184;
		/* 821A1168h case   23:*/		return 0x821A116C;
	}
	return 0x821A116C;
} // Block from 821A110Ch-821A116Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 821A116Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A116C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A116C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A116C);
		  /* 821A116Ch */ case    0:  		/* li R11, 1 */
		/* 821A116Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A116Ch case    0:*/		return 0x821A1170;
		  /* 821A1170h */ case    1:  		/* lwz R10, <#[R25]> */
		/* 821A1170h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 821A1170h case    1:*/		return 0x821A1174;
		  /* 821A1174h */ case    2:  		/* slw R11, R11, R31 */
		/* 821A1174h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821A1174h case    2:*/		return 0x821A1178;
		  /* 821A1178h */ case    3:  		/* rlwinm R11, R11, 6, 22, 25 */
		/* 821A1178h case    3:*/		cpu::op::rlwinm<0,6,22,25>(regs,&regs.R11,regs.R11);
		/* 821A1178h case    3:*/		return 0x821A117C;
		  /* 821A117Ch */ case    4:  		/* or R11, R11, R10 */
		/* 821A117Ch case    4:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A117Ch case    4:*/		return 0x821A1180;
		  /* 821A1180h */ case    5:  		/* stw R11, <#[R25]> */
		/* 821A1180h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A1180h case    5:*/		return 0x821A1184;
	}
	return 0x821A1184;
} // Block from 821A116Ch-821A1184h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A1184h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1184( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1184) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1184);
		  /* 821A1184h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A1184h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A1184h case    0:*/		return 0x821A1188;
		  /* 821A1188h */ case    1:  		/* addi R31, R31, 1 */
		/* 821A1188h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A1188h case    1:*/		return 0x821A118C;
		  /* 821A118Ch */ case    2:  		/* addi R28, R28, 5 */
		/* 821A118Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x5);
		/* 821A118Ch case    2:*/		return 0x821A1190;
		  /* 821A1190h */ case    3:  		/* addi R29, R29, 20 */
		/* 821A1190h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x14);
		/* 821A1190h case    3:*/		return 0x821A1194;
		  /* 821A1194h */ case    4:  		/* cmplw CR6, R31, R11 */
		/* 821A1194h case    4:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821A1194h case    4:*/		return 0x821A1198;
		  /* 821A1198h */ case    5:  		/* bc 12, CR6_LT, -128 */
		/* 821A1198h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A1118;  }
		/* 821A1198h case    5:*/		return 0x821A119C;
		  /* 821A119Ch */ case    6:  		/* lwz R11, <#[R25]> */
		/* 821A119Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A119Ch case    6:*/		return 0x821A11A0;
		  /* 821A11A0h */ case    7:  		/* addi R27, R27, 1 */
		/* 821A11A0h case    7:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A11A0h case    7:*/		return 0x821A11A4;
		  /* 821A11A4h */ case    8:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A11A4h case    8:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A11A4h case    8:*/		return 0x821A11A8;
		  /* 821A11A8h */ case    9:  		/* cmplw CR6, R27, R11 */
		/* 821A11A8h case    9:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821A11A8h case    9:*/		return 0x821A11AC;
		  /* 821A11ACh */ case   10:  		/* bc 12, CR6_LT, -272 */
		/* 821A11ACh case   10:*/		if ( regs.CR[6].lt ) { return 0x821A109C;  }
		/* 821A11ACh case   10:*/		return 0x821A11B0;
	}
	return 0x821A11B0;
} // Block from 821A1184h-821A11B0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A11B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A11B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A11B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A11B0);
		  /* 821A11B0h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A11B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A11B0h case    0:*/		return 0x821A11B4;
		  /* 821A11B4h */ case    1:  		/* addi R23, R23, 1 */
		/* 821A11B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821A11B4h case    1:*/		return 0x821A11B8;
		  /* 821A11B8h */ case    2:  		/* addi R24, R24, 5 */
		/* 821A11B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x5);
		/* 821A11B8h case    2:*/		return 0x821A11BC;
		  /* 821A11BCh */ case    3:  		/* addi R25, R25, 20 */
		/* 821A11BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x14);
		/* 821A11BCh case    3:*/		return 0x821A11C0;
		  /* 821A11C0h */ case    4:  		/* cmplw CR6, R23, R11 */
		/* 821A11C0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821A11C0h case    4:*/		return 0x821A11C4;
		  /* 821A11C4h */ case    5:  		/* bc 12, CR6_LT, -312 */
		/* 821A11C4h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A108C;  }
		/* 821A11C4h case    5:*/		return 0x821A11C8;
	}
	return 0x821A11C8;
} // Block from 821A11B0h-821A11C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A11C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A11C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A11C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A11C8);
		  /* 821A11C8h */ case    0:  		/* lwz R24, <#[R1 + 80]> */
		/* 821A11C8h case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821A11C8h case    0:*/		return 0x821A11CC;
		  /* 821A11CCh */ case    1:  		/* addi R19, R19, 1 */
		/* 821A11CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x1);
		/* 821A11CCh case    1:*/		return 0x821A11D0;
		  /* 821A11D0h */ case    2:  		/* lwz R20, <#[R1 + 380]> */
		/* 821A11D0h case    2:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x0000017C) );
		/* 821A11D0h case    2:*/		return 0x821A11D4;
		  /* 821A11D4h */ case    3:  		/* addi R21, R21, 4 */
		/* 821A11D4h case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x4);
		/* 821A11D4h case    3:*/		return 0x821A11D8;
		  /* 821A11D8h */ case    4:  		/* lwz R23, <#[R1 + 388]> */
		/* 821A11D8h case    4:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000184) );
		/* 821A11D8h case    4:*/		return 0x821A11DC;
		  /* 821A11DCh */ case    5:  		/* li R22, 0 */
		/* 821A11DCh case    5:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821A11DCh case    5:*/		return 0x821A11E0;
		  /* 821A11E0h */ case    6:  		/* b -476 */
		/* 821A11E0h case    6:*/		return 0x821A1004;
		/* 821A11E0h case    6:*/		return 0x821A11E4;
	}
	return 0x821A11E4;
} // Block from 821A11C8h-821A11E4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A11E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A11E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A11E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A11E4);
		  /* 821A11E4h */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821A11E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821A11E4h case    0:*/		return 0x821A11E8;
		  /* 821A11E8h */ case    1:  		/* bc 12, CR6_EQ, 404 */
		/* 821A11E8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A137C;  }
		/* 821A11E8h case    1:*/		return 0x821A11EC;
		  /* 821A11ECh */ case    2:  		/* addi R28, R1, 128 */
		/* 821A11ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x80);
		/* 821A11ECh case    2:*/		return 0x821A11F0;
		  /* 821A11F0h */ case    3:  		/* lwz R10, <#[R28]> */
		/* 821A11F0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821A11F0h case    3:*/		return 0x821A11F4;
		  /* 821A11F4h */ case    4:  		/* addi R24, R28, -16 */
		/* 821A11F4h case    4:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R28,0xFFFFFFF0);
		/* 821A11F4h case    4:*/		return 0x821A11F8;
		  /* 821A11F8h */ case    5:  		/* li R23, 0 */
		/* 821A11F8h case    5:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821A11F8h case    5:*/		return 0x821A11FC;
		  /* 821A11FCh */ case    6:  		/* rlwinm R11, R10, 0, 29, 31 */
		/* 821A11FCh case    6:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R10);
		/* 821A11FCh case    6:*/		return 0x821A1200;
		  /* 821A1200h */ case    7:  		/* rlwinm R10, R10, 29, 29, 31 */
		/* 821A1200h case    7:*/		cpu::op::rlwinm<0,29,29,31>(regs,&regs.R10,regs.R10);
		/* 821A1200h case    7:*/		return 0x821A1204;
		  /* 821A1204h */ case    8:  		/* add R10, R10, R11 */
		/* 821A1204h case    8:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A1204h case    8:*/		return 0x821A1208;
		  /* 821A1208h */ case    9:  		/* cmplwi CR6, R10, 4 */
		/* 821A1208h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821A1208h case    9:*/		return 0x821A120C;
		  /* 821A120Ch */ case   10:  		/* bc 12, CR6_GT, -1320 */
		/* 821A120Ch case   10:*/		if ( regs.CR[6].gt ) { return 0x821A0CE4;  }
		/* 821A120Ch case   10:*/		return 0x821A1210;
		  /* 821A1210h */ case   11:  		/* li R25, 0 */
		/* 821A1210h case   11:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821A1210h case   11:*/		return 0x821A1214;
		  /* 821A1214h */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821A1214h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A1214h case   12:*/		return 0x821A1218;
		  /* 821A1218h */ case   13:  		/* bc 12, CR6_EQ, 240 */
		/* 821A1218h case   13:*/		if ( regs.CR[6].eq ) { return 0x821A1308;  }
		/* 821A1218h case   13:*/		return 0x821A121C;
		  /* 821A121Ch */ case   14:  		/* mr R26, R24 */
		/* 821A121Ch case   14:*/		regs.R26 = regs.R24;
		/* 821A121Ch case   14:*/		return 0x821A1220;
		  /* 821A1220h */ case   15:  		/* lwz R27, <#[R26]> */
		/* 821A1220h case   15:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R26 + 0x00000000) );
		/* 821A1220h case   15:*/		return 0x821A1224;
		  /* 821A1224h */ case   16:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A1224h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A1224h case   16:*/		return 0x821A1228;
		  /* 821A1228h */ case   17:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A1228h case   17:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A1228h case   17:*/		return 0x821A122C;
		  /* 821A122Ch */ case   18:  		/* bc 12, CR0_EQ, 8 */
		/* 821A122Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x821A1234;  }
		/* 821A122Ch case   18:*/		return 0x821A1230;
		  /* 821A1230h */ case   19:  		/* addi R23, R23, 1 */
		/* 821A1230h case   19:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821A1230h case   19:*/		return 0x821A1234;
	}
	return 0x821A1234;
} // Block from 821A11E4h-821A1234h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821A1234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1234);
		  /* 821A1234h */ case    0:  		/* lwz R11, <#[R27 + 4]> */
		/* 821A1234h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000004) );
		/* 821A1234h case    0:*/		return 0x821A1238;
		  /* 821A1238h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A1238h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A1238h case    1:*/		return 0x821A123C;
		  /* 821A123Ch */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 821A123Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821A1278;  }
		/* 821A123Ch case    2:*/		return 0x821A1240;
		  /* 821A1240h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A1240h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A1240h case    3:*/		return 0x821A1244;
		  /* 821A1244h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821A1244h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A1244h case    4:*/		return 0x821A1248;
		  /* 821A1248h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821A1248h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A1268;  }
		/* 821A1248h case    5:*/		return 0x821A124C;
		  /* 821A124Ch */ case    6:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A124Ch case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A124Ch case    6:*/		return 0x821A1250;
		  /* 821A1250h */ case    7:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A1250h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A1250h case    7:*/		return 0x821A1254;
		  /* 821A1254h */ case    8:  		/* cmplwi CR6, R9, 14080 */
		/* 821A1254h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A1254h case    8:*/		return 0x821A1258;
		  /* 821A1258h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821A1258h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821A1268;  }
		/* 821A1258h case    9:*/		return 0x821A125C;
		  /* 821A125Ch */ case   10:  		/* lwz R9, <#[R11]> */
		/* 821A125Ch case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A125Ch case   10:*/		return 0x821A1260;
		  /* 821A1260h */ case   11:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A1260h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A1260h case   11:*/		return 0x821A1264;
		  /* 821A1264h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 821A1264h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A1270;  }
		/* 821A1264h case   12:*/		return 0x821A1268;
	}
	return 0x821A1268;
} // Block from 821A1234h-821A1268h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A1268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1268);
		  /* 821A1268h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A1268h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1268h case    0:*/		return 0x821A126C;
		  /* 821A126Ch */ case    1:  		/* b -52 */
		/* 821A126Ch case    1:*/		return 0x821A1238;
		/* 821A126Ch case    1:*/		return 0x821A1270;
	}
	return 0x821A1270;
} // Block from 821A1268h-821A1270h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A1270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1270);
		  /* 821A1270h */ case    0:  		/* mr R29, R10 */
		/* 821A1270h case    0:*/		regs.R29 = regs.R10;
		/* 821A1270h case    0:*/		return 0x821A1274;
		  /* 821A1274h */ case    1:  		/* b 8 */
		/* 821A1274h case    1:*/		return 0x821A127C;
		/* 821A1274h case    1:*/		return 0x821A1278;
	}
	return 0x821A1278;
} // Block from 821A1270h-821A1278h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A1278h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1278( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1278) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1278);
		  /* 821A1278h */ case    0:  		/* li R29, 0 */
		/* 821A1278h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A1278h case    0:*/		return 0x821A127C;
	}
	return 0x821A127C;
} // Block from 821A1278h-821A127Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A127Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A127C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A127C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A127C);
		  /* 821A127Ch */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821A127Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A127Ch case    0:*/		return 0x821A1280;
		  /* 821A1280h */ case    1:  		/* bc 12, CR6_EQ, 96 */
		/* 821A1280h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A12E0;  }
		/* 821A1280h case    1:*/		return 0x821A1284;
		  /* 821A1284h */ case    2:  		/* lwz R11, <#[R28]> */
		/* 821A1284h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A1284h case    2:*/		return 0x821A1288;
		  /* 821A1288h */ case    3:  		/* li R30, 0 */
		/* 821A1288h case    3:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A1288h case    3:*/		return 0x821A128C;
		  /* 821A128Ch */ case    4:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821A128Ch case    4:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A128Ch case    4:*/		return 0x821A1290;
		  /* 821A1290h */ case    5:  		/* bc 12, CR0_EQ, 80 */
		/* 821A1290h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A12E0;  }
		/* 821A1290h case    5:*/		return 0x821A1294;
		  /* 821A1294h */ case    6:  		/* mr R31, R24 */
		/* 821A1294h case    6:*/		regs.R31 = regs.R24;
		/* 821A1294h case    6:*/		return 0x821A1298;
		  /* 821A1298h */ case    7:  		/* lwz R3, <#[R31]> */
		/* 821A1298h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821A1298h case    7:*/		return 0x821A129C;
		  /* 821A129Ch */ case    8:  		/* cmplw CR6, R3, R27 */
		/* 821A129Ch case    8:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R27);
		/* 821A129Ch case    8:*/		return 0x821A12A0;
		  /* 821A12A0h */ case    9:  		/* bc 12, CR6_EQ, 40 */
		/* 821A12A0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A12C8;  }
		/* 821A12A0h case    9:*/		return 0x821A12A4;
		  /* 821A12A4h */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A12A4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A12A4h case   10:*/		return 0x821A12A8;
		  /* 821A12A8h */ case   11:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A12A8h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A12A8h case   11:*/		return 0x821A12AC;
		  /* 821A12ACh */ case   12:  		/* cmplwi CR6, R11, 14336 */
		/* 821A12ACh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821A12ACh case   12:*/		return 0x821A12B0;
		  /* 821A12B0h */ case   13:  		/* bc 12, CR6_EQ, 24 */
		/* 821A12B0h case   13:*/		if ( regs.CR[6].eq ) { return 0x821A12C8;  }
		/* 821A12B0h case   13:*/		return 0x821A12B4;
		  /* 821A12B4h */ case   14:  		/* mr R5, R14 */
		/* 821A12B4h case   14:*/		regs.R5 = regs.R14;
		/* 821A12B4h case   14:*/		return 0x821A12B8;
		  /* 821A12B8h */ case   15:  		/* mr R4, R29 */
		/* 821A12B8h case   15:*/		regs.R4 = regs.R29;
		/* 821A12B8h case   15:*/		return 0x821A12BC;
		  /* 821A12BCh */ case   16:  		/* bl 576036 */
		/* 821A12BCh case   16:*/		regs.LR = 0x821A12C0; return 0x8222DCE0;
		/* 821A12BCh case   16:*/		return 0x821A12C0;
		  /* 821A12C0h */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A12C0h case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A12C0h case   17:*/		return 0x821A12C4;
		  /* 821A12C4h */ case   18:  		/* bc 4, CR0_EQ, -1504 */
		/* 821A12C4h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821A0CE4;  }
		/* 821A12C4h case   18:*/		return 0x821A12C8;
	}
	return 0x821A12C8;
} // Block from 821A127Ch-821A12C8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A12C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A12C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A12C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A12C8);
		  /* 821A12C8h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821A12C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A12C8h case    0:*/		return 0x821A12CC;
		  /* 821A12CCh */ case    1:  		/* addi R30, R30, 1 */
		/* 821A12CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A12CCh case    1:*/		return 0x821A12D0;
		  /* 821A12D0h */ case    2:  		/* addi R31, R31, 4 */
		/* 821A12D0h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821A12D0h case    2:*/		return 0x821A12D4;
		  /* 821A12D4h */ case    3:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A12D4h case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A12D4h case    3:*/		return 0x821A12D8;
		  /* 821A12D8h */ case    4:  		/* cmplw CR6, R30, R11 */
		/* 821A12D8h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821A12D8h case    4:*/		return 0x821A12DC;
		  /* 821A12DCh */ case    5:  		/* bc 12, CR6_LT, -68 */
		/* 821A12DCh case    5:*/		if ( regs.CR[6].lt ) { return 0x821A1298;  }
		/* 821A12DCh case    5:*/		return 0x821A12E0;
	}
	return 0x821A12E0;
} // Block from 821A12C8h-821A12E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A12E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A12E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A12E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A12E0);
		  /* 821A12E0h */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821A12E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A12E0h case    0:*/		return 0x821A12E4;
		  /* 821A12E4h */ case    1:  		/* addi R25, R25, 1 */
		/* 821A12E4h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821A12E4h case    1:*/		return 0x821A12E8;
		  /* 821A12E8h */ case    2:  		/* addi R26, R26, 4 */
		/* 821A12E8h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x4);
		/* 821A12E8h case    2:*/		return 0x821A12EC;
		  /* 821A12ECh */ case    3:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A12ECh case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A12ECh case    3:*/		return 0x821A12F0;
		  /* 821A12F0h */ case    4:  		/* cmplw CR6, R25, R11 */
		/* 821A12F0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R11);
		/* 821A12F0h case    4:*/		return 0x821A12F4;
		  /* 821A12F4h */ case    5:  		/* bc 12, CR6_LT, -212 */
		/* 821A12F4h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A1220;  }
		/* 821A12F4h case    5:*/		return 0x821A12F8;
		  /* 821A12F8h */ case    6:  		/* cmplwi CR6, R23, 0 */
		/* 821A12F8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821A12F8h case    6:*/		return 0x821A12FC;
		  /* 821A12FCh */ case    7:  		/* bc 12, CR6_EQ, 12 */
		/* 821A12FCh case    7:*/		if ( regs.CR[6].eq ) { return 0x821A1308;  }
		/* 821A12FCh case    7:*/		return 0x821A1300;
		  /* 821A1300h */ case    8:  		/* cmplw CR6, R23, R11 */
		/* 821A1300h case    8:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821A1300h case    8:*/		return 0x821A1304;
		  /* 821A1304h */ case    9:  		/* bc 4, CR6_EQ, -1568 */
		/* 821A1304h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821A0CE4;  }
		/* 821A1304h case    9:*/		return 0x821A1308;
	}
	return 0x821A1308;
} // Block from 821A12E0h-821A1308h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A1308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1308);
		  /* 821A1308h */ case    0:  		/* lwz R11, <#[R24 + 16]> */
		/* 821A1308h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000010) );
		/* 821A1308h case    0:*/		return 0x821A130C;
		  /* 821A130Ch */ case    1:  		/* rlwinm R11, R11, 26, 28, 31 */
		/* 821A130Ch case    1:*/		cpu::op::rlwinm<0,26,28,31>(regs,&regs.R11,regs.R11);
		/* 821A130Ch case    1:*/		return 0x821A1310;
		  /* 821A1310h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A1310h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A1310h case    2:*/		return 0x821A1314;
		  /* 821A1314h */ case    3:  		/* bc 12, CR6_EQ, 72 */
		/* 821A1314h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A135C;  }
		/* 821A1314h case    3:*/		return 0x821A1318;
		  /* 821A1318h */ case    4:  		/* addi R10, R11, -1 */
		/* 821A1318h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821A1318h case    4:*/		return 0x821A131C;
		  /* 821A131Ch */ case    5:  		/* addi R9, R1, 128 */
		/* 821A131Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 821A131Ch case    5:*/		return 0x821A1320;
		  /* 821A1320h */ case    6:  		/* andc R10, R11, R10 */
		/* 821A1320h case    6:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821A1320h case    6:*/		return 0x821A1324;
		  /* 821A1324h */ case    7:  		/* li R8, 1 */
		/* 821A1324h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821A1324h case    7:*/		return 0x821A1328;
	}
	return 0x821A1328;
} // Block from 821A1308h-821A1328h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A1328h
// Function '?MarkForVectorize@Compiler@D3DXShader@@AAAXPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1328);
		  /* 821A1328h */ case    0:  		/* cntlzw R10, R10 */
		/* 821A1328h case    0:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821A1328h case    0:*/		return 0x821A132C;
		  /* 821A132Ch */ case    1:  		/* slw R8, R8, R22 */
		/* 821A132Ch case    1:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R22);
		/* 821A132Ch case    1:*/		return 0x821A1330;
		  /* 821A1330h */ case    2:  		/* subfic R10, R10, 31 */
		/* 821A1330h case    2:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821A1330h case    2:*/		return 0x821A1334;
		  /* 821A1334h */ case    3:  		/* mulli R10, R10, 20 */
		/* 821A1334h case    3:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R10,0x14);
		/* 821A1334h case    3:*/		return 0x821A1338;
		  /* 821A1338h */ case    4:  		/* lwzx R10, <#[R10 + R9]> */
		/* 821A1338h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821A1338h case    4:*/		return 0x821A133C;
		  /* 821A133Ch */ case    5:  		/* rlwinm R10, R10, 26, 6, 31 */
		/* 821A133Ch case    5:*/		cpu::op::rlwinm<0,26,6,31>(regs,&regs.R10,regs.R10);
		/* 821A133Ch case    5:*/		return 0x821A1340;
		  /* 821A1340h */ case    6:  		/* and R10, R10, R8 */
		/* 821A1340h case    6:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821A1340h case    6:*/		return 0x821A1344;
		  /* 821A1344h */ case    7:  		/* rlwinm. R10, R10, 0, 28, 31 */
		/* 821A1344h case    7:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R10,regs.R10);
		/* 821A1344h case    7:*/		return 0x821A1348;
		  /* 821A1348h */ case    8:  		/* bc 4, CR0_EQ, -1636 */
		/* 821A1348h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821A0CE4;  }
		/* 821A1348h case    8:*/		return 0x821A134C;
		  /* 821A134Ch */ case    9:  		/* addi R10, R11, -1 */
		/* 821A134Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821A134Ch case    9:*/		return 0x821A1350;
		  /* 821A1350h */ case   10:  		/* andc R10, R11, R10 */
		/* 821A1350h case   10:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821A1350h case   10:*/		return 0x821A1354;
		  /* 821A1354h */ case   11:  		/* subf R11, R10, R11 */
		/* 821A1354h case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A1354h case   11:*/		return 0x821A1358;
		  /* 821A1358h */ case   12:  		/* b -72 */
		/* 821A1358h case   12:*/		return 0x821A1310;
		/* 821A1358h case   12:*/		return 0x821A135C;
	}
	return 0x821A135C;
} // Block from 821A1328h-821A135Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A135Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A135C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A135C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A135C);
		  /* 821A135Ch */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A135Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A135Ch case    0:*/		return 0x821A1360;
		  /* 821A1360h */ case    1:  		/* addi R22, R22, 1 */
		/* 821A1360h case    1:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821A1360h case    1:*/		return 0x821A1364;
		  /* 821A1364h */ case    2:  		/* addi R28, R28, 20 */
		/* 821A1364h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x14);
		/* 821A1364h case    2:*/		return 0x821A1368;
		  /* 821A1368h */ case    3:  		/* cmplw CR6, R22, R11 */
		/* 821A1368h case    3:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R11);
		/* 821A1368h case    3:*/		return 0x821A136C;
		  /* 821A136Ch */ case    4:  		/* bc 12, CR6_LT, -380 */
		/* 821A136Ch case    4:*/		if ( regs.CR[6].lt ) { return 0x821A11F0;  }
		/* 821A136Ch case    4:*/		return 0x821A1370;
		  /* 821A1370h */ case    5:  		/* lwz R23, <#[R1 + 388]> */
		/* 821A1370h case    5:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000184) );
		/* 821A1370h case    5:*/		return 0x821A1374;
		  /* 821A1374h */ case    6:  		/* rlwinm R24, R11, 0, 0, 31 */
		/* 821A1374h case    6:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R24,regs.R11);
		/* 821A1374h case    6:*/		return 0x821A1378;
		  /* 821A1378h */ case    7:  		/* li R22, 0 */
		/* 821A1378h case    7:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821A1378h case    7:*/		return 0x821A137C;
	}
	return 0x821A137C;
} // Block from 821A135Ch-821A137Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A137Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A137C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A137C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A137C);
		  /* 821A137Ch */ case    0:  		/* mr R19, R22 */
		/* 821A137Ch case    0:*/		regs.R19 = regs.R22;
		/* 821A137Ch case    0:*/		return 0x821A1380;
		  /* 821A1380h */ case    1:  		/* mr R20, R22 */
		/* 821A1380h case    1:*/		regs.R20 = regs.R22;
		/* 821A1380h case    1:*/		return 0x821A1384;
		  /* 821A1384h */ case    2:  		/* cmplwi CR6, R24, 0 */
		/* 821A1384h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821A1384h case    2:*/		return 0x821A1388;
		  /* 821A1388h */ case    3:  		/* bc 12, CR6_EQ, 1700 */
		/* 821A1388h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A1A2C;  }
		/* 821A1388h case    3:*/		return 0x821A138C;
		  /* 821A138Ch */ case    4:  		/* addi R11, R1, 112 */
		/* 821A138Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821A138Ch case    4:*/		return 0x821A1390;
		  /* 821A1390h */ case    5:  		/* mulli R10, R20, 20 */
		/* 821A1390h case    5:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R20,0x14);
		/* 821A1390h case    5:*/		return 0x821A1394;
		  /* 821A1394h */ case    6:  		/* add R21, R10, R11 */
		/* 821A1394h case    6:*/		cpu::op::add<0>(regs,&regs.R21,regs.R10,regs.R11);
		/* 821A1394h case    6:*/		return 0x821A1398;
		  /* 821A1398h */ case    7:  		/* li R3, 1 */
		/* 821A1398h case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821A1398h case    7:*/		return 0x821A139C;
		  /* 821A139Ch */ case    8:  		/* mr R4, R22 */
		/* 821A139Ch case    8:*/		regs.R4 = regs.R22;
		/* 821A139Ch case    8:*/		return 0x821A13A0;
		  /* 821A13A0h */ case    9:  		/* mr R5, R22 */
		/* 821A13A0h case    9:*/		regs.R5 = regs.R22;
		/* 821A13A0h case    9:*/		return 0x821A13A4;
		  /* 821A13A4h */ case   10:  		/* mr R8, R22 */
		/* 821A13A4h case   10:*/		regs.R8 = regs.R22;
		/* 821A13A4h case   10:*/		return 0x821A13A8;
		  /* 821A13A8h */ case   11:  		/* lwz R11, <#[R21 + 16]> */
		/* 821A13A8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821A13A8h case   11:*/		return 0x821A13AC;
		  /* 821A13ACh */ case   12:  		/* mr R9, R22 */
		/* 821A13ACh case   12:*/		regs.R9 = regs.R22;
		/* 821A13ACh case   12:*/		return 0x821A13B0;
		  /* 821A13B0h */ case   13:  		/* rlwinm. R6, R11, 0, 29, 31 */
		/* 821A13B0h case   13:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R6,regs.R11);
		/* 821A13B0h case   13:*/		return 0x821A13B4;
		  /* 821A13B4h */ case   14:  		/* bc 12, CR0_EQ, 1644 */
		/* 821A13B4h case   14:*/		if ( regs.CR[0].eq ) { return 0x821A1A20;  }
		/* 821A13B4h case   14:*/		return 0x821A13B8;
		  /* 821A13B8h */ case   15:  		/* lwz R31, <#[R21]> */
		/* 821A13B8h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R21 + 0x00000000) );
		/* 821A13B8h case   15:*/		return 0x821A13BC;
		  /* 821A13BCh */ case   16:  		/* mr R7, R21 */
		/* 821A13BCh case   16:*/		regs.R7 = regs.R21;
		/* 821A13BCh case   16:*/		return 0x821A13C0;
	}
	return 0x821A13C0;
} // Block from 821A137Ch-821A13C0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A13C0h
// Function '?MarkDependentsForVectorize@Compiler@D3DXShader@@AAAXPAVInstruction@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A13C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A13C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A13C0);
		  /* 821A13C0h */ case    0:  		/* lwz R10, <#[R7]> */
		/* 821A13C0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 821A13C0h case    0:*/		return 0x821A13C4;
		  /* 821A13C4h */ case    1:  		/* lwz R11, <#[R10 + 8]> */
		/* 821A13C4h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000008) );
		/* 821A13C4h case    1:*/		return 0x821A13C8;
		  /* 821A13C8h */ case    2:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A13C8h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A13C8h case    2:*/		return 0x821A13CC;
		  /* 821A13CCh */ case    3:  		/* cmplwi CR6, R11, 112 */
		/* 821A13CCh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000070);
		/* 821A13CCh case    3:*/		return 0x821A13D0;
		  /* 821A13D0h */ case    4:  		/* bc 12, CR6_EQ, 40 */
		/* 821A13D0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A13F8;  }
		/* 821A13D0h case    4:*/		return 0x821A13D4;
		  /* 821A13D4h */ case    5:  		/* cmplwi CR6, R11, 32 */
		/* 821A13D4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 821A13D4h case    5:*/		return 0x821A13D8;
		  /* 821A13D8h */ case    6:  		/* bc 12, CR6_LT, 16 */
		/* 821A13D8h case    6:*/		if ( regs.CR[6].lt ) { return 0x821A13E8;  }
		/* 821A13D8h case    6:*/		return 0x821A13DC;
		  /* 821A13DCh */ case    7:  		/* cmplwi CR6, R11, 82 */
		/* 821A13DCh case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 821A13DCh case    7:*/		return 0x821A13E0;
		  /* 821A13E0h */ case    8:  		/* li R11, 1 */
		/* 821A13E0h case    8:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A13E0h case    8:*/		return 0x821A13E4;
		  /* 821A13E4h */ case    9:  		/* bc 4, CR6_GT, 8 */
		/* 821A13E4h case    9:*/		if ( !regs.CR[6].gt ) { return 0x821A13EC;  }
		/* 821A13E4h case    9:*/		return 0x821A13E8;
	}
	return 0x821A13E8;
} // Block from 821A13C0h-821A13E8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A13E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A13E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A13E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A13E8);
		  /* 821A13E8h */ case    0:  		/* mr R11, R22 */
		/* 821A13E8h case    0:*/		regs.R11 = regs.R22;
		/* 821A13E8h case    0:*/		return 0x821A13EC;
	}
	return 0x821A13EC;
} // Block from 821A13E8h-821A13ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A13ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A13EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A13EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A13EC);
		  /* 821A13ECh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A13ECh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A13ECh case    0:*/		return 0x821A13F0;
		  /* 821A13F0h */ case    1:  		/* bc 4, CR0_EQ, 8 */
		/* 821A13F0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821A13F8;  }
		/* 821A13F0h case    1:*/		return 0x821A13F4;
		  /* 821A13F4h */ case    2:  		/* li R3, 3 */
		/* 821A13F4h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x3);
		/* 821A13F4h case    2:*/		return 0x821A13F8;
	}
	return 0x821A13F8;
} // Block from 821A13ECh-821A13F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A13F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A13F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A13F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A13F8);
		  /* 821A13F8h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A13F8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A13F8h case    0:*/		return 0x821A13FC;
		  /* 821A13FCh */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821A13FCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821A1404;  }
		/* 821A13FCh case    1:*/		return 0x821A1400;
		  /* 821A1400h */ case    2:  		/* addi R4, R4, 1 */
		/* 821A1400h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821A1400h case    2:*/		return 0x821A1404;
	}
	return 0x821A1404;
} // Block from 821A13F8h-821A1404h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A1404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1404);
		  /* 821A1404h */ case    0:  		/* lwz R10, <#[R10 + 4]> */
		/* 821A1404h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821A1404h case    0:*/		return 0x821A1408;
		  /* 821A1408h */ case    1:  		/* cmplwi CR6, R10, 0 */
		/* 821A1408h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A1408h case    1:*/		return 0x821A140C;
		  /* 821A140Ch */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821A140Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821A1440;  }
		/* 821A140Ch case    2:*/		return 0x821A1410;
		  /* 821A1410h */ case    3:  		/* lwz R11, <#[R10 + 16]> */
		/* 821A1410h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821A1410h case    3:*/		return 0x821A1414;
		  /* 821A1414h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821A1414h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A1414h case    4:*/		return 0x821A1418;
		  /* 821A1418h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821A1418h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A1438;  }
		/* 821A1418h case    5:*/		return 0x821A141C;
		  /* 821A141Ch */ case    6:  		/* lwz R30, <#[R11 + 8]> */
		/* 821A141Ch case    6:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000008) );
		/* 821A141Ch case    6:*/		return 0x821A1420;
		  /* 821A1420h */ case    7:  		/* rlwinm R30, R30, 0, 18, 24 */
		/* 821A1420h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R30,regs.R30);
		/* 821A1420h case    7:*/		return 0x821A1424;
		  /* 821A1424h */ case    8:  		/* cmplwi CR6, R30, 14080 */
		/* 821A1424h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00003700);
		/* 821A1424h case    8:*/		return 0x821A1428;
	}
	return 0x821A1428;
} // Block from 821A1404h-821A1428h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A1428h
// Function '?MarkForLowCostVectorize@Compiler@D3DXShader@@AAAXPAVInstruction@2@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1428);
		  /* 821A1428h */ case    0:  		/* bc 4, CR6_EQ, 16 */
		/* 821A1428h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821A1438;  }
		/* 821A1428h case    0:*/		return 0x821A142C;
		  /* 821A142Ch */ case    1:  		/* lwz R30, <#[R10]> */
		/* 821A142Ch case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R10 + 0x00000000) );
		/* 821A142Ch case    1:*/		return 0x821A1430;
		  /* 821A1430h */ case    2:  		/* rlwinm. R30, R30, 0, 4, 6 */
		/* 821A1430h case    2:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R30,regs.R30);
		/* 821A1430h case    2:*/		return 0x821A1434;
		  /* 821A1434h */ case    3:  		/* bc 4, CR0_EQ, 16 */
		/* 821A1434h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A1444;  }
		/* 821A1434h case    3:*/		return 0x821A1438;
	}
	return 0x821A1438;
} // Block from 821A1428h-821A1438h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A1438h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1438( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1438) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1438);
		  /* 821A1438h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A1438h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A1438h case    0:*/		return 0x821A143C;
		  /* 821A143Ch */ case    1:  		/* b -52 */
		/* 821A143Ch case    1:*/		return 0x821A1408;
		/* 821A143Ch case    1:*/		return 0x821A1440;
	}
	return 0x821A1440;
} // Block from 821A1438h-821A1440h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A1440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1440);
		  /* 821A1440h */ case    0:  		/* mr R11, R22 */
		/* 821A1440h case    0:*/		regs.R11 = regs.R22;
		/* 821A1440h case    0:*/		return 0x821A1444;
	}
	return 0x821A1444;
} // Block from 821A1440h-821A1444h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A1444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1444);
		  /* 821A1444h */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821A1444h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A1444h case    0:*/		return 0x821A1448;
		  /* 821A1448h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 821A1448h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A1470;  }
		/* 821A1448h case    1:*/		return 0x821A144C;
		  /* 821A144Ch */ case    2:  		/* cmplwi CR6, R5, 0 */
		/* 821A144Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821A144Ch case    2:*/		return 0x821A1450;
		  /* 821A1450h */ case    3:  		/* bc 4, CR6_EQ, 12 */
		/* 821A1450h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821A145C;  }
		/* 821A1450h case    3:*/		return 0x821A1454;
		  /* 821A1454h */ case    4:  		/* mr R8, R11 */
		/* 821A1454h case    4:*/		regs.R8 = regs.R11;
		/* 821A1454h case    4:*/		return 0x821A1458;
		  /* 821A1458h */ case    5:  		/* b 20 */
		/* 821A1458h case    5:*/		return 0x821A146C;
		/* 821A1458h case    5:*/		return 0x821A145C;
	}
	return 0x821A145C;
} // Block from 821A1444h-821A145Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A145Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A145C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A145C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A145C);
		  /* 821A145Ch */ case    0:  		/* subf R11, R8, R11 */
		/* 821A145Ch case    0:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821A145Ch case    0:*/		return 0x821A1460;
		  /* 821A1460h */ case    1:  		/* addic R11, R11, -1 */
		/* 821A1460h case    1:*/		cpu::op::addic<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A1460h case    1:*/		return 0x821A1464;
		  /* 821A1464h */ case    2:  		/* subfe R11, R11, R11 */
		/* 821A1464h case    2:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821A1464h case    2:*/		return 0x821A1468;
		  /* 821A1468h */ case    3:  		/* and R8, R11, R8 */
		/* 821A1468h case    3:*/		cpu::op::and<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 821A1468h case    3:*/		return 0x821A146C;
	}
	return 0x821A146C;
} // Block from 821A145Ch-821A146Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A146Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A146C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A146C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A146C);
		  /* 821A146Ch */ case    0:  		/* addi R5, R5, 1 */
		/* 821A146Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R5,0x1);
		/* 821A146Ch case    0:*/		return 0x821A1470;
	}
	return 0x821A1470;
} // Block from 821A146Ch-821A1470h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A1470h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1470( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1470) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1470);
		  /* 821A1470h */ case    0:  		/* addi R9, R9, 1 */
		/* 821A1470h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821A1470h case    0:*/		return 0x821A1474;
		  /* 821A1474h */ case    1:  		/* addi R7, R7, 4 */
		/* 821A1474h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821A1474h case    1:*/		return 0x821A1478;
		  /* 821A1478h */ case    2:  		/* cmplw CR6, R9, R6 */
		/* 821A1478h case    2:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 821A1478h case    2:*/		return 0x821A147C;
		  /* 821A147Ch */ case    3:  		/* bc 12, CR6_LT, -188 */
		/* 821A147Ch case    3:*/		if ( regs.CR[6].lt ) { return 0x821A13C0;  }
		/* 821A147Ch case    3:*/		return 0x821A1480;
		  /* 821A1480h */ case    4:  		/* cmplwi CR6, R4, 0 */
		/* 821A1480h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A1480h case    4:*/		return 0x821A1484;
		  /* 821A1484h */ case    5:  		/* bc 12, CR6_EQ, 1436 */
		/* 821A1484h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A1A20;  }
		/* 821A1484h case    5:*/		return 0x821A1488;
		  /* 821A1488h */ case    6:  		/* lbz R11, <#[R1 + 415]> */
		/* 821A1488h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000019F) );
		/* 821A1488h case    6:*/		return 0x821A148C;
		  /* 821A148Ch */ case    7:  		/* cmplwi CR0, R11, 0 */
		/* 821A148Ch case    7:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A148Ch case    7:*/		return 0x821A1490;
		  /* 821A1490h */ case    8:  		/* bc 12, CR0_EQ, 28 */
		/* 821A1490h case    8:*/		if ( regs.CR[0].eq ) { return 0x821A14AC;  }
		/* 821A1490h case    8:*/		return 0x821A1494;
		  /* 821A1494h */ case    9:  		/* cmplwi CR6, R20, 0 */
		/* 821A1494h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821A1494h case    9:*/		return 0x821A1498;
		  /* 821A1498h */ case   10:  		/* bc 12, CR6_EQ, 1416 */
		/* 821A1498h case   10:*/		if ( regs.CR[6].eq ) { return 0x821A1A20;  }
		/* 821A1498h case   10:*/		return 0x821A149C;
		  /* 821A149Ch */ case   11:  		/* cmplwi CR6, R5, 0 */
		/* 821A149Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R5,0x00000000);
		/* 821A149Ch case   11:*/		return 0x821A14A0;
		  /* 821A14A0h */ case   12:  		/* bc 4, CR6_EQ, 1408 */
		/* 821A14A0h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821A1A20;  }
		/* 821A14A0h case   12:*/		return 0x821A14A4;
		  /* 821A14A4h */ case   13:  		/* add R19, R3, R19 */
		/* 821A14A4h case   13:*/		cpu::op::add<0>(regs,&regs.R19,regs.R3,regs.R19);
		/* 821A14A4h case   13:*/		return 0x821A14A8;
		  /* 821A14A8h */ case   14:  		/* b 1400 */
		/* 821A14A8h case   14:*/		return 0x821A1A20;
		/* 821A14A8h case   14:*/		return 0x821A14AC;
	}
	return 0x821A14AC;
} // Block from 821A1470h-821A14ACh (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A14ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A14AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A14AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A14AC);
		  /* 821A14ACh */ case    0:  		/* cmplwi CR6, R8, 0 */
		/* 821A14ACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R8,0x00000000);
		/* 821A14ACh case    0:*/		return 0x821A14B0;
		  /* 821A14B0h */ case    1:  		/* bc 12, CR6_EQ, 12 */
		/* 821A14B0h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A14BC;  }
		/* 821A14B0h case    1:*/		return 0x821A14B4;
		  /* 821A14B4h */ case    2:  		/* cmplw CR6, R5, R6 */
		/* 821A14B4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R6);
		/* 821A14B4h case    2:*/		return 0x821A14B8;
		  /* 821A14B8h */ case    3:  		/* bc 12, CR6_EQ, 1384 */
		/* 821A14B8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A1A20;  }
		/* 821A14B8h case    3:*/		return 0x821A14BC;
	}
	return 0x821A14BC;
} // Block from 821A14ACh-821A14BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A14BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A14BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A14BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A14BC);
		  /* 821A14BCh */ case    0:  		/* cmplwi CR6, R20, 0 */
		/* 821A14BCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821A14BCh case    0:*/		return 0x821A14C0;
		  /* 821A14C0h */ case    1:  		/* bc 4, CR6_EQ, 60 */
		/* 821A14C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A14FC;  }
		/* 821A14C0h case    1:*/		return 0x821A14C4;
		  /* 821A14C4h */ case    2:  		/* mr R10, R22 */
		/* 821A14C4h case    2:*/		regs.R10 = regs.R22;
		/* 821A14C4h case    2:*/		return 0x821A14C8;
		  /* 821A14C8h */ case    3:  		/* mr R11, R21 */
		/* 821A14C8h case    3:*/		regs.R11 = regs.R21;
		/* 821A14C8h case    3:*/		return 0x821A14CC;
		  /* 821A14CCh */ case    4:  		/* lwz R9, <#[R11]> */
		/* 821A14CCh case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A14CCh case    4:*/		return 0x821A14D0;
	}
	return 0x821A14D0;
} // Block from 821A14BCh-821A14D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A14D0h
// Function '?MergeOperandsAndOutputs@Compiler@D3DXShader@@AAAIPAVInstruction@2@00I_N1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A14D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A14D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A14D0);
		  /* 821A14D0h */ case    0:  		/* lwz R8, <#[R1 + 380]> */
		/* 821A14D0h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000017C) );
		/* 821A14D0h case    0:*/		return 0x821A14D4;
		  /* 821A14D4h */ case    1:  		/* cmplw CR6, R9, R8 */
		/* 821A14D4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R8);
		/* 821A14D4h case    1:*/		return 0x821A14D8;
		  /* 821A14D8h */ case    2:  		/* bc 12, CR6_EQ, 12 */
		/* 821A14D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A14E4;  }
		/* 821A14D8h case    2:*/		return 0x821A14DC;
		  /* 821A14DCh */ case    3:  		/* cmplw CR6, R9, R23 */
		/* 821A14DCh case    3:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R23);
		/* 821A14DCh case    3:*/		return 0x821A14E0;
		  /* 821A14E0h */ case    4:  		/* bc 4, CR6_EQ, 20 */
		/* 821A14E0h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821A14F4;  }
		/* 821A14E0h case    4:*/		return 0x821A14E4;
	}
	return 0x821A14E4;
} // Block from 821A14D0h-821A14E4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A14E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A14E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A14E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A14E4);
		  /* 821A14E4h */ case    0:  		/* addi R10, R10, 1 */
		/* 821A14E4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A14E4h case    0:*/		return 0x821A14E8;
		  /* 821A14E8h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A14E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A14E8h case    1:*/		return 0x821A14EC;
		  /* 821A14ECh */ case    2:  		/* cmplw CR6, R10, R6 */
		/* 821A14ECh case    2:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 821A14ECh case    2:*/		return 0x821A14F0;
		  /* 821A14F0h */ case    3:  		/* bc 12, CR6_LT, -36 */
		/* 821A14F0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821A14CC;  }
		/* 821A14F0h case    3:*/		return 0x821A14F4;
	}
	return 0x821A14F4;
} // Block from 821A14E4h-821A14F4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A14F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A14F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A14F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A14F4);
		  /* 821A14F4h */ case    0:  		/* cmplw CR6, R10, R6 */
		/* 821A14F4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R6);
		/* 821A14F4h case    0:*/		return 0x821A14F8;
		  /* 821A14F8h */ case    1:  		/* bc 12, CR6_EQ, 1320 */
		/* 821A14F8h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A1A20;  }
		/* 821A14F8h case    1:*/		return 0x821A14FC;
	}
	return 0x821A14FC;
} // Block from 821A14F4h-821A14FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A14FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A14FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A14FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A14FC);
		  /* 821A14FCh */ case    0:  		/* lwz R31, <#[R1 + 380]> */
		/* 821A14FCh case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x0000017C) );
		/* 821A14FCh case    0:*/		return 0x821A1500;
		  /* 821A1500h */ case    1:  		/* li R5, 0 */
		/* 821A1500h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A1500h case    1:*/		return 0x821A1504;
		  /* 821A1504h */ case    2:  		/* mr R3, R14 */
		/* 821A1504h case    2:*/		regs.R3 = regs.R14;
		/* 821A1504h case    2:*/		return 0x821A1508;
		  /* 821A1508h */ case    3:  		/* lwz R4, <#[R31 + 28]> */
		/* 821A1508h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x0000001C) );
		/* 821A1508h case    3:*/		return 0x821A150C;
		  /* 821A150Ch */ case    4:  		/* bl 538100 */
		/* 821A150Ch case    4:*/		regs.LR = 0x821A1510; return 0x82224B00;
		/* 821A150Ch case    4:*/		return 0x821A1510;
		  /* 821A1510h */ case    5:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821A1510h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821A1510h case    5:*/		return 0x821A1514;
		  /* 821A1514h */ case    6:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A1514h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A1514h case    6:*/		return 0x821A1518;
		  /* 821A1518h */ case    7:  		/* addi R11, R11, 36 */
		/* 821A1518h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A1518h case    7:*/		return 0x821A151C;
		  /* 821A151Ch */ case    8:  		/* addi R10, R10, 36 */
		/* 821A151Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A151Ch case    8:*/		return 0x821A1520;
		  /* 821A1520h */ case    9:  		/* addi R8, R11, -36 */
		/* 821A1520h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A1520h case    9:*/		return 0x821A1524;
		  /* 821A1524h */ case   10:  		/* addi R6, R10, -36 */
		/* 821A1524h case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A1524h case   10:*/		return 0x821A1528;
		  /* 821A1528h */ case   11:  		/* addi R9, R10, 4 */
		/* 821A1528h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A1528h case   11:*/		return 0x821A152C;
		  /* 821A152Ch */ case   12:  		/* lwz R7, <#[R11]> */
		/* 821A152Ch case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A152Ch case   12:*/		return 0x821A1530;
		  /* 821A1530h */ case   13:  		/* mr R30, R3 */
		/* 821A1530h case   13:*/		regs.R30 = regs.R3;
		/* 821A1530h case   13:*/		return 0x821A1534;
		  /* 821A1534h */ case   14:  		/* li R24, 0 */
		/* 821A1534h case   14:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821A1534h case   14:*/		return 0x821A1538;
		  /* 821A1538h */ case   15:  		/* li R23, 0 */
		/* 821A1538h case   15:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821A1538h case   15:*/		return 0x821A153C;
		  /* 821A153Ch */ case   16:  		/* stw R7, <#[R10]> */
		/* 821A153Ch case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A153Ch case   16:*/		return 0x821A1540;
		  /* 821A1540h */ case   17:  		/* lwz R7, <#[R11]> */
		/* 821A1540h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A1540h case   17:*/		return 0x821A1544;
		  /* 821A1544h */ case   18:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A1544h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A1544h case   18:*/		return 0x821A1548;
		  /* 821A1548h */ case   19:  		/* stw R6, <#[R7]> */
		/* 821A1548h case   19:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821A1548h case   19:*/		return 0x821A154C;
		  /* 821A154Ch */ case   20:  		/* stw R8, <#[R10 + 4]> */
		/* 821A154Ch case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A154Ch case   20:*/		return 0x821A1550;
		  /* 821A1550h */ case   21:  		/* lwz R10, <#[R21 + 16]> */
		/* 821A1550h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000010) );
		/* 821A1550h case   21:*/		return 0x821A1554;
		  /* 821A1554h */ case   22:  		/* rlwinm. R10, R10, 0, 29, 31 */
		/* 821A1554h case   22:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R10,regs.R10);
		/* 821A1554h case   22:*/		return 0x821A1558;
		  /* 821A1558h */ case   23:  		/* stw R9, <#[R11]> */
		/* 821A1558h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A1558h case   23:*/		return 0x821A155C;
		  /* 821A155Ch */ case   24:  		/* bc 12, CR0_EQ, 620 */
		/* 821A155Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x821A17C8;  }
		/* 821A155Ch case   24:*/		return 0x821A1560;
		  /* 821A1560h */ case   25:  		/* mr R22, R21 */
		/* 821A1560h case   25:*/		regs.R22 = regs.R21;
		/* 821A1560h case   25:*/		return 0x821A1564;
		  /* 821A1564h */ case   26:  		/* lwz R11, <#[R22]> */
		/* 821A1564h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000000) );
		/* 821A1564h case   26:*/		return 0x821A1568;
		  /* 821A1568h */ case   27:  		/* lwz R11, <#[R11 + 4]> */
		/* 821A1568h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821A1568h case   27:*/		return 0x821A156C;
		  /* 821A156Ch */ case   28:  		/* cmplwi CR6, R11, 0 */
		/* 821A156Ch case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A156Ch case   28:*/		return 0x821A1570;
		  /* 821A1570h */ case   29:  		/* bc 12, CR6_EQ, 60 */
		/* 821A1570h case   29:*/		if ( regs.CR[6].eq ) { return 0x821A15AC;  }
		/* 821A1570h case   29:*/		return 0x821A1574;
		  /* 821A1574h */ case   30:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A1574h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A1574h case   30:*/		return 0x821A1578;
		  /* 821A1578h */ case   31:  		/* cmplwi CR6, R10, 0 */
		/* 821A1578h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A1578h case   31:*/		return 0x821A157C;
		  /* 821A157Ch */ case   32:  		/* bc 12, CR6_EQ, 32 */
		/* 821A157Ch case   32:*/		if ( regs.CR[6].eq ) { return 0x821A159C;  }
		/* 821A157Ch case   32:*/		return 0x821A1580;
		  /* 821A1580h */ case   33:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A1580h case   33:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A1580h case   33:*/		return 0x821A1584;
		  /* 821A1584h */ case   34:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A1584h case   34:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A1584h case   34:*/		return 0x821A1588;
		  /* 821A1588h */ case   35:  		/* cmplwi CR6, R9, 14080 */
		/* 821A1588h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A1588h case   35:*/		return 0x821A158C;
		  /* 821A158Ch */ case   36:  		/* bc 4, CR6_EQ, 16 */
		/* 821A158Ch case   36:*/		if ( !regs.CR[6].eq ) { return 0x821A159C;  }
		/* 821A158Ch case   36:*/		return 0x821A1590;
		  /* 821A1590h */ case   37:  		/* lwz R9, <#[R11]> */
		/* 821A1590h case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A1590h case   37:*/		return 0x821A1594;
		  /* 821A1594h */ case   38:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A1594h case   38:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A1594h case   38:*/		return 0x821A1598;
		  /* 821A1598h */ case   39:  		/* bc 4, CR0_EQ, 12 */
		/* 821A1598h case   39:*/		if ( !regs.CR[0].eq ) { return 0x821A15A4;  }
		/* 821A1598h case   39:*/		return 0x821A159C;
	}
	return 0x821A159C;
} // Block from 821A14FCh-821A159Ch (40 instructions)

//////////////////////////////////////////////////////
// Block at 821A159Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A159C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A159C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A159C);
		  /* 821A159Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A159Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A159Ch case    0:*/		return 0x821A15A0;
		  /* 821A15A0h */ case    1:  		/* b -52 */
		/* 821A15A0h case    1:*/		return 0x821A156C;
		/* 821A15A0h case    1:*/		return 0x821A15A4;
	}
	return 0x821A15A4;
} // Block from 821A159Ch-821A15A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A15A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A15A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A15A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A15A4);
		  /* 821A15A4h */ case    0:  		/* mr R25, R10 */
		/* 821A15A4h case    0:*/		regs.R25 = regs.R10;
		/* 821A15A4h case    0:*/		return 0x821A15A8;
		  /* 821A15A8h */ case    1:  		/* b 8 */
		/* 821A15A8h case    1:*/		return 0x821A15B0;
		/* 821A15A8h case    1:*/		return 0x821A15AC;
	}
	return 0x821A15AC;
} // Block from 821A15A4h-821A15ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A15ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A15AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A15AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A15AC);
		  /* 821A15ACh */ case    0:  		/* li R25, 0 */
		/* 821A15ACh case    0:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821A15ACh case    0:*/		return 0x821A15B0;
	}
	return 0x821A15B0;
} // Block from 821A15ACh-821A15B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A15B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A15B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A15B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A15B0);
		  /* 821A15B0h */ case    0:  		/* cmplwi CR6, R25, 0 */
		/* 821A15B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821A15B0h case    0:*/		return 0x821A15B4;
		  /* 821A15B4h */ case    1:  		/* bc 12, CR6_EQ, 508 */
		/* 821A15B4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A17B0;  }
		/* 821A15B4h case    1:*/		return 0x821A15B8;
		  /* 821A15B8h */ case    2:  		/* cmplw CR6, R25, R30 */
		/* 821A15B8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R30);
		/* 821A15B8h case    2:*/		return 0x821A15BC;
		  /* 821A15BCh */ case    3:  		/* bc 12, CR6_EQ, 500 */
		/* 821A15BCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821A17B0;  }
		/* 821A15BCh case    3:*/		return 0x821A15C0;
		  /* 821A15C0h */ case    4:  		/* li R7, 0 */
		/* 821A15C0h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A15C0h case    4:*/		return 0x821A15C4;
		  /* 821A15C4h */ case    5:  		/* li R6, 1 */
		/* 821A15C4h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A15C4h case    5:*/		return 0x821A15C8;
		  /* 821A15C8h */ case    6:  		/* mr R5, R30 */
		/* 821A15C8h case    6:*/		regs.R5 = regs.R30;
		/* 821A15C8h case    6:*/		return 0x821A15CC;
		  /* 821A15CCh */ case    7:  		/* mr R4, R25 */
		/* 821A15CCh case    7:*/		regs.R4 = regs.R25;
		/* 821A15CCh case    7:*/		return 0x821A15D0;
		  /* 821A15D0h */ case    8:  		/* mr R3, R14 */
		/* 821A15D0h case    8:*/		regs.R3 = regs.R14;
		/* 821A15D0h case    8:*/		return 0x821A15D4;
		  /* 821A15D4h */ case    9:  		/* bl 574900 */
		/* 821A15D4h case    9:*/		regs.LR = 0x821A15D8; return 0x8222DB88;
		/* 821A15D4h case    9:*/		return 0x821A15D8;
		  /* 821A15D8h */ case   10:  		/* addi R11, R24, 10 */
		/* 821A15D8h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xA);
		/* 821A15D8h case   10:*/		return 0x821A15DC;
		  /* 821A15DCh */ case   11:  		/* li R26, 0 */
		/* 821A15DCh case   11:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821A15DCh case   11:*/		return 0x821A15E0;
		  /* 821A15E0h */ case   12:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A15E0h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A15E0h case   12:*/		return 0x821A15E4;
		  /* 821A15E4h */ case   13:  		/* li R27, 0 */
		/* 821A15E4h case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A15E4h case   13:*/		return 0x821A15E8;
		  /* 821A15E8h */ case   14:  		/* li R31, 0 */
		/* 821A15E8h case   14:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A15E8h case   14:*/		return 0x821A15EC;
		  /* 821A15ECh */ case   15:  		/* add R29, R11, R30 */
		/* 821A15ECh case   15:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R30);
		/* 821A15ECh case   15:*/		return 0x821A15F0;
		  /* 821A15F0h */ case   16:  		/* addi R28, R25, 44 */
		/* 821A15F0h case   16:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R25,0x2C);
		/* 821A15F0h case   16:*/		return 0x821A15F4;
		  /* 821A15F4h */ case   17:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A15F4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A15F4h case   17:*/		return 0x821A15F8;
		  /* 821A15F8h */ case   18:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A15F8h case   18:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A15F8h case   18:*/		return 0x821A15FC;
		  /* 821A15FCh */ case   19:  		/* cmplw CR6, R27, R11 */
		/* 821A15FCh case   19:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821A15FCh case   19:*/		return 0x821A1600;
		  /* 821A1600h */ case   20:  		/* bc 4, CR6_LT, 100 */
		/* 821A1600h case   20:*/		if ( !regs.CR[6].lt ) { return 0x821A1664;  }
		/* 821A1600h case   20:*/		return 0x821A1604;
		  /* 821A1604h */ case   21:  		/* lwz R4, <#[R28]> */
		/* 821A1604h case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + 0x00000000) );
		/* 821A1604h case   21:*/		return 0x821A1608;
		  /* 821A1608h */ case   22:  		/* li R11, 1 */
		/* 821A1608h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A1608h case   22:*/		return 0x821A160C;
		  /* 821A160Ch */ case   23:  		/* lwz R10, <#[R4 + 12]> */
		/* 821A160Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x0000000C) );
		/* 821A160Ch case   23:*/		return 0x821A1610;
		  /* 821A1610h */ case   24:  		/* lwz R9, <#[R4]> */
		/* 821A1610h case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000000) );
		/* 821A1610h case   24:*/		return 0x821A1614;
		  /* 821A1614h */ case   25:  		/* rlwinm R9, R9, 27, 30, 31 */
		/* 821A1614h case   25:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R9,regs.R9);
		/* 821A1614h case   25:*/		return 0x821A1618;
		  /* 821A1618h */ case   26:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A1618h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A1618h case   26:*/		return 0x821A161C;
		  /* 821A161Ch */ case   27:  		/* slw R11, R11, R9 */
		/* 821A161Ch case   27:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A161Ch case   27:*/		return 0x821A1620;
		  /* 821A1620h */ case   28:  		/* rlwinm R10, R10, 31, 1, 31 */
		/* 821A1620h case   28:*/		cpu::op::rlwinm<0,31,1,31>(regs,&regs.R10,regs.R10);
		/* 821A1620h case   28:*/		return 0x821A1624;
		  /* 821A1624h */ case   29:  		/* and R11, R11, R10 */
		/* 821A1624h case   29:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A1624h case   29:*/		return 0x821A1628;
		  /* 821A1628h */ case   30:  		/* rlwinm. R11, R11, 0, 28, 31 */
		/* 821A1628h case   30:*/		cpu::op::rlwinm<1,0,28,31>(regs,&regs.R11,regs.R11);
		/* 821A1628h case   30:*/		return 0x821A162C;
		  /* 821A162Ch */ case   31:  		/* bc 12, CR0_EQ, 40 */
		/* 821A162Ch case   31:*/		if ( regs.CR[0].eq ) { return 0x821A1654;  }
		/* 821A162Ch case   31:*/		return 0x821A1630;
		  /* 821A1630h */ case   32:  		/* mr R3, R30 */
		/* 821A1630h case   32:*/		regs.R3 = regs.R30;
		/* 821A1630h case   32:*/		return 0x821A1634;
		  /* 821A1634h */ case   33:  		/* bl -169068 */
		/* 821A1634h case   33:*/		regs.LR = 0x821A1638; return 0x821781C8;
		/* 821A1634h case   33:*/		return 0x821A1638;
		  /* 821A1638h */ case   34:  		/* li R11, 3 */
		/* 821A1638h case   34:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821A1638h case   34:*/		return 0x821A163C;
		  /* 821A163Ch */ case   35:  		/* slw R10, R24, R31 */
		/* 821A163Ch case   35:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R31);
		/* 821A163Ch case   35:*/		return 0x821A1640;
		  /* 821A1640h */ case   36:  		/* stwu R3, <#[R29 + 4]> */
		/* 821A1640h case   36:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A1640h case   36:*/		return 0x821A1644;
		  /* 821A1644h */ case   37:  		/* slw R11, R11, R31 */
		/* 821A1644h case   37:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821A1644h case   37:*/		return 0x821A1648;
		  /* 821A1648h */ case   38:  		/* andc R11, R26, R11 */
		/* 821A1648h case   38:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 821A1648h case   38:*/		return 0x821A164C;
		  /* 821A164Ch */ case   39:  		/* addi R24, R24, 1 */
		/* 821A164Ch case   39:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821A164Ch case   39:*/		return 0x821A1650;
		  /* 821A1650h */ case   40:  		/* or R26, R11, R10 */
		/* 821A1650h case   40:*/		cpu::op::or<0>(regs,&regs.R26,regs.R11,regs.R10);
		/* 821A1650h case   40:*/		return 0x821A1654;
	}
	return 0x821A1654;
} // Block from 821A15B0h-821A1654h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821A1654h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1654( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1654) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1654);
		  /* 821A1654h */ case    0:  		/* addi R27, R27, 1 */
		/* 821A1654h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A1654h case    0:*/		return 0x821A1658;
		  /* 821A1658h */ case    1:  		/* addi R28, R28, 4 */
		/* 821A1658h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821A1658h case    1:*/		return 0x821A165C;
		  /* 821A165Ch */ case    2:  		/* addi R31, R31, 2 */
		/* 821A165Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 821A165Ch case    2:*/		return 0x821A1660;
		  /* 821A1660h */ case    3:  		/* b -108 */
		/* 821A1660h case    3:*/		return 0x821A15F4;
		/* 821A1660h case    3:*/		return 0x821A1664;
	}
	return 0x821A1664;
} // Block from 821A1654h-821A1664h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A1664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1664);
		  /* 821A1664h */ case    0:  		/* addi R8, R25, 4 */
		/* 821A1664h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R25,0x4);
		/* 821A1664h case    0:*/		return 0x821A1668;
		  /* 821A1668h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821A1668h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A1668h case    1:*/		return 0x821A166C;
		  /* 821A166Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A166Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A166Ch case    2:*/		return 0x821A1670;
		  /* 821A1670h */ case    3:  		/* bc 12, CR6_EQ, 168 */
		/* 821A1670h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A1718;  }
		/* 821A1670h case    3:*/		return 0x821A1674;
		  /* 821A1674h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A1674h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A1674h case    4:*/		return 0x821A1678;
		  /* 821A1678h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821A1678h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A1678h case    5:*/		return 0x821A167C;
		  /* 821A167Ch */ case    6:  		/* bc 12, CR6_EQ, 136 */
		/* 821A167Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821A1704;  }
		/* 821A167Ch case    6:*/		return 0x821A1680;
		  /* 821A1680h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A1680h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A1680h case    7:*/		return 0x821A1684;
		  /* 821A1684h */ case    8:  		/* addi R10, R10, 4 */
		/* 821A1684h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A1684h case    8:*/		return 0x821A1688;
		  /* 821A1688h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821A1688h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A1688h case    9:*/		return 0x821A168C;
		  /* 821A168Ch */ case   10:  		/* b 12 */
		/* 821A168Ch case   10:*/		return 0x821A1698;
		/* 821A168Ch case   10:*/		return 0x821A1690;
		  /* 821A1690h */ case   11:  		/* addi R10, R9, 8 */
		/* 821A1690h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A1690h case   11:*/		return 0x821A1694;
		  /* 821A1694h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A1694h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A1694h case   12:*/		return 0x821A1698;
	}
	return 0x821A1698;
} // Block from 821A1664h-821A1698h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A1698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1698);
		  /* 821A1698h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A1698h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A1698h case    0:*/		return 0x821A169C;
		  /* 821A169Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A169Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A1690;  }
		/* 821A169Ch case    1:*/		return 0x821A16A0;
		  /* 821A16A0h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A16A0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A16A0h case    2:*/		return 0x821A16A4;
		  /* 821A16A4h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A16A4h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A16A4h case    3:*/		return 0x821A16A8;
		  /* 821A16A8h */ case    4:  		/* lwz R10, <#[R30 + 4]> */
		/* 821A16A8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000004) );
		/* 821A16A8h case    4:*/		return 0x821A16AC;
		  /* 821A16ACh */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A16ACh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A16ACh case    5:*/		return 0x821A16B0;
		  /* 821A16B0h */ case    6:  		/* stw R11, <#[R30 + 4]> */
		/* 821A16B0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821A16B0h case    6:*/		return 0x821A16B4;
		  /* 821A16B4h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821A16B4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A16B4h case    7:*/		return 0x821A16B8;
		  /* 821A16B8h */ case    8:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821A16B8h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821A16B8h case    8:*/		return 0x821A16BC;
		  /* 821A16BCh */ case    9:  		/* stw R30, <#[R11 + 12]> */
		/* 821A16BCh case    9:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A16BCh case    9:*/		return 0x821A16C0;
		  /* 821A16C0h */ case   10:  		/* bc 12, CR0_EQ, 68 */
		/* 821A16C0h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A1704;  }
		/* 821A16C0h case   10:*/		return 0x821A16C4;
		  /* 821A16C4h */ case   11:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821A16C4h case   11:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821A16C4h case   11:*/		return 0x821A16C8;
		  /* 821A16C8h */ case   12:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821A16C8h case   12:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821A16C8h case   12:*/		return 0x821A16CC;
		  /* 821A16CCh */ case   13:  		/* srw R9, R26, R9 */
		/* 821A16CCh case   13:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R26,regs.R9);
		/* 821A16CCh case   13:*/		return 0x821A16D0;
		  /* 821A16D0h */ case   14:  		/* srw R7, R26, R7 */
		/* 821A16D0h case   14:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R26,regs.R7);
		/* 821A16D0h case   14:*/		return 0x821A16D4;
		  /* 821A16D4h */ case   15:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821A16D4h case   15:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821A16D4h case   15:*/		return 0x821A16D8;
		  /* 821A16D8h */ case   16:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821A16D8h case   16:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821A16D8h case   16:*/		return 0x821A16DC;
		  /* 821A16DCh */ case   17:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821A16DCh case   17:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821A16DCh case   17:*/		return 0x821A16E0;
		  /* 821A16E0h */ case   18:  		/* srw R9, R26, R9 */
		/* 821A16E0h case   18:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R26,regs.R9);
		/* 821A16E0h case   18:*/		return 0x821A16E4;
		  /* 821A16E4h */ case   19:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821A16E4h case   19:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821A16E4h case   19:*/		return 0x821A16E8;
		  /* 821A16E8h */ case   20:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821A16E8h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821A16E8h case   20:*/		return 0x821A16EC;
		  /* 821A16ECh */ case   21:  		/* srw R7, R26, R6 */
		/* 821A16ECh case   21:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R26,regs.R6);
		/* 821A16ECh case   21:*/		return 0x821A16F0;
		  /* 821A16F0h */ case   22:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821A16F0h case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821A16F0h case   22:*/		return 0x821A16F4;
		  /* 821A16F4h */ case   23:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A16F4h case   23:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A16F4h case   23:*/		return 0x821A16F8;
		  /* 821A16F8h */ case   24:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821A16F8h case   24:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821A16F8h case   24:*/		return 0x821A16FC;
		  /* 821A16FCh */ case   25:  		/* or R10, R9, R10 */
		/* 821A16FCh case   25:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A16FCh case   25:*/		return 0x821A1700;
		  /* 821A1700h */ case   26:  		/* stw R10, <#[R11]> */
		/* 821A1700h case   26:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A1700h case   26:*/		return 0x821A1704;
	}
	return 0x821A1704;
} // Block from 821A1698h-821A1704h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A1704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1704);
		  /* 821A1704h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A1704h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A1704h case    0:*/		return 0x821A1708;
		  /* 821A1708h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A1708h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A1708h case    1:*/		return 0x821A170C;
		  /* 821A170Ch */ case    2:  		/* bc 4, CR6_EQ, -164 */
		/* 821A170Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A1668;  }
		/* 821A170Ch case    2:*/		return 0x821A1710;
		  /* 821A1710h */ case    3:  		/* addi R8, R11, 8 */
		/* 821A1710h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821A1710h case    3:*/		return 0x821A1714;
		  /* 821A1714h */ case    4:  		/* b -172 */
		/* 821A1714h case    4:*/		return 0x821A1668;
		/* 821A1714h case    4:*/		return 0x821A1718;
	}
	return 0x821A1718;
} // Block from 821A1704h-821A1718h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A1718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1718);
		  /* 821A1718h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A1718h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A1718h case    0:*/		return 0x821A171C;
		  /* 821A171Ch */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A171Ch case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A171Ch case    1:*/		return 0x821A1720;
		  /* 821A1720h */ case    2:  		/* bc 12, CR0_EQ, 124 */
		/* 821A1720h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A179C;  }
		/* 821A1720h case    2:*/		return 0x821A1724;
		  /* 821A1724h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A1724h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A1724h case    3:*/		return 0x821A1728;
		  /* 821A1728h */ case    4:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A1728h case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A1728h case    4:*/		return 0x821A172C;
		  /* 821A172Ch */ case    5:  		/* bc 4, CR0_EQ, 112 */
		/* 821A172Ch case    5:*/		if ( !regs.CR[0].eq ) { return 0x821A179C;  }
		/* 821A172Ch case    5:*/		return 0x821A1730;
		  /* 821A1730h */ case    6:  		/* oris R11, R11, 128 */
		/* 821A1730h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A1730h case    6:*/		return 0x821A1734;
		  /* 821A1734h */ case    7:  		/* mr R3, R25 */
		/* 821A1734h case    7:*/		regs.R3 = regs.R25;
		/* 821A1734h case    7:*/		return 0x821A1738;
		  /* 821A1738h */ case    8:  		/* stw R11, <#[R30 + 8]> */
		/* 821A1738h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A1738h case    8:*/		return 0x821A173C;
		  /* 821A173Ch */ case    9:  		/* bl -122452 */
		/* 821A173Ch case    9:*/		regs.LR = 0x821A1740; return 0x821838E8;
		/* 821A173Ch case    9:*/		return 0x821A1740;
		  /* 821A1740h */ case   10:  		/* sth R3, <#[R30 + 18]> */
		/* 821A1740h case   10:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R30 + 0x00000012) );
		/* 821A1740h case   10:*/		return 0x821A1744;
		  /* 821A1744h */ case   11:  		/* lwz R3, <#[R14 + 660]> */
		/* 821A1744h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 821A1744h case   11:*/		return 0x821A1748;
		  /* 821A1748h */ case   12:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A1748h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A1748h case   12:*/		return 0x821A174C;
		  /* 821A174Ch */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A174Ch case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A174Ch case   13:*/		return 0x821A1750;
		  /* 821A1750h */ case   14:  		/* bc 4, CR0_EQ, 40 */
		/* 821A1750h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821A1778;  }
		/* 821A1750h case   14:*/		return 0x821A1754;
		  /* 821A1754h */ case   15:  		/* lwz R11, <#[R3]> */
		/* 821A1754h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A1754h case   15:*/		return 0x821A1758;
		  /* 821A1758h */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A1758h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A1758h case   16:*/		return 0x821A175C;
		  /* 821A175Ch */ case   17:  		/* addic. R11, R11, -4 */
		/* 821A175Ch case   17:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A175Ch case   17:*/		return 0x821A1760;
		  /* 821A1760h */ case   18:  		/* bc 12, CR0_EQ, 24 */
		/* 821A1760h case   18:*/		if ( regs.CR[0].eq ) { return 0x821A1778;  }
		/* 821A1760h case   18:*/		return 0x821A1764;
		  /* 821A1764h */ case   19:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A1764h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1764h case   19:*/		return 0x821A1768;
		  /* 821A1768h */ case   20:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A1768h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A1768h case   20:*/		return 0x821A176C;
		  /* 821A176Ch */ case   21:  		/* addi R10, R10, 1 */
		/* 821A176Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A176Ch case   21:*/		return 0x821A1770;
		  /* 821A1770h */ case   22:  		/* cmplw CR6, R10, R9 */
		/* 821A1770h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A1770h case   22:*/		return 0x821A1774;
		  /* 821A1774h */ case   23:  		/* bc 4, CR6_GT, 16 */
		/* 821A1774h case   23:*/		if ( !regs.CR[6].gt ) { return 0x821A1784;  }
		/* 821A1774h case   23:*/		return 0x821A1778;
	}
	return 0x821A1778;
} // Block from 821A1718h-821A1778h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821A1778h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1778( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1778) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1778);
		  /* 821A1778h */ case    0:  		/* li R4, 1 */
		/* 821A1778h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A1778h case    0:*/		return 0x821A177C;
		  /* 821A177Ch */ case    1:  		/* bl -83636 */
		/* 821A177Ch case    1:*/		regs.LR = 0x821A1780; return 0x8218D0C8;
		/* 821A177Ch case    1:*/		return 0x821A1780;
		  /* 821A1780h */ case    2:  		/* mr R11, R3 */
		/* 821A1780h case    2:*/		regs.R11 = regs.R3;
		/* 821A1780h case    2:*/		return 0x821A1784;
	}
	return 0x821A1784;
} // Block from 821A1778h-821A1784h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A1784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1784);
		  /* 821A1784h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A1784h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1784h case    0:*/		return 0x821A1788;
		  /* 821A1788h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A1788h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A1788h case    1:*/		return 0x821A178C;
		  /* 821A178Ch */ case    2:  		/* addi R8, R10, 1 */
		/* 821A178Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A178Ch case    2:*/		return 0x821A1790;
		  /* 821A1790h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A1790h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A1790h case    3:*/		return 0x821A1794;
		  /* 821A1794h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A1794h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1794h case    4:*/		return 0x821A1798;
		  /* 821A1798h */ case    5:  		/* stwx R30, <#[R10 + R11]> */
		/* 821A1798h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A1798h case    5:*/		return 0x821A179C;
	}
	return 0x821A179C;
} // Block from 821A1784h-821A179Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A179Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A179C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A179C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A179C);
		  /* 821A179Ch */ case    0:  		/* li R6, 1 */
		/* 821A179Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A179Ch case    0:*/		return 0x821A17A0;
		  /* 821A17A0h */ case    1:  		/* lwz R5, <#[R14 + 652]> */
		/* 821A17A0h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R14 + 0x0000028C) );
		/* 821A17A0h case    1:*/		return 0x821A17A4;
		  /* 821A17A4h */ case    2:  		/* mr R4, R25 */
		/* 821A17A4h case    2:*/		regs.R4 = regs.R25;
		/* 821A17A4h case    2:*/		return 0x821A17A8;
		  /* 821A17A8h */ case    3:  		/* mr R3, R14 */
		/* 821A17A8h case    3:*/		regs.R3 = regs.R14;
		/* 821A17A8h case    3:*/		return 0x821A17AC;
		  /* 821A17ACh */ case    4:  		/* bl 564252 */
		/* 821A17ACh case    4:*/		regs.LR = 0x821A17B0; return 0x8222B3C8;
		/* 821A17ACh case    4:*/		return 0x821A17B0;
	}
	return 0x821A17B0;
} // Block from 821A179Ch-821A17B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A17B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A17B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A17B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A17B0);
		  /* 821A17B0h */ case    0:  		/* lwz R11, <#[R21 + 16]> */
		/* 821A17B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821A17B0h case    0:*/		return 0x821A17B4;
		  /* 821A17B4h */ case    1:  		/* addi R23, R23, 1 */
		/* 821A17B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821A17B4h case    1:*/		return 0x821A17B8;
		  /* 821A17B8h */ case    2:  		/* addi R22, R22, 4 */
		/* 821A17B8h case    2:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x4);
		/* 821A17B8h case    2:*/		return 0x821A17BC;
		  /* 821A17BCh */ case    3:  		/* rlwinm R10, R11, 0, 29, 31 */
		/* 821A17BCh case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R10,regs.R11);
		/* 821A17BCh case    3:*/		return 0x821A17C0;
		  /* 821A17C0h */ case    4:  		/* cmplw CR6, R23, R10 */
		/* 821A17C0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R10);
		/* 821A17C0h case    4:*/		return 0x821A17C4;
		  /* 821A17C4h */ case    5:  		/* bc 12, CR6_LT, -608 */
		/* 821A17C4h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A1564;  }
		/* 821A17C4h case    5:*/		return 0x821A17C8;
	}
	return 0x821A17C8;
} // Block from 821A17B0h-821A17C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A17C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A17C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A17C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A17C8);
		  /* 821A17C8h */ case    0:  		/* cmplw CR6, R24, R10 */
		/* 821A17C8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R10);
		/* 821A17C8h case    0:*/		return 0x821A17CC;
		  /* 821A17CCh */ case    1:  		/* bc 4, CR6_LT, 364 */
		/* 821A17CCh case    1:*/		if ( !regs.CR[6].lt ) { return 0x821A1938;  }
		/* 821A17CCh case    1:*/		return 0x821A17D0;
		  /* 821A17D0h */ case    2:  		/* li R26, 0 */
		/* 821A17D0h case    2:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821A17D0h case    2:*/		return 0x821A17D4;
		  /* 821A17D4h */ case    3:  		/* cmplwi CR6, R10, 0 */
		/* 821A17D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A17D4h case    3:*/		return 0x821A17D8;
		  /* 821A17D8h */ case    4:  		/* bc 12, CR6_EQ, 352 */
		/* 821A17D8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A1938;  }
		/* 821A17D8h case    4:*/		return 0x821A17DC;
		  /* 821A17DCh */ case    5:  		/* mr R27, R21 */
		/* 821A17DCh case    5:*/		regs.R27 = regs.R21;
		/* 821A17DCh case    5:*/		return 0x821A17E0;
		  /* 821A17E0h */ case    6:  		/* lwz R28, <#[R27]> */
		/* 821A17E0h case    6:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R27 + 0x00000000) );
		/* 821A17E0h case    6:*/		return 0x821A17E4;
		  /* 821A17E4h */ case    7:  		/* lwz R11, <#[R28 + 4]> */
		/* 821A17E4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821A17E4h case    7:*/		return 0x821A17E8;
		  /* 821A17E8h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821A17E8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A17E8h case    8:*/		return 0x821A17EC;
		  /* 821A17ECh */ case    9:  		/* bc 12, CR6_EQ, 52 */
		/* 821A17ECh case    9:*/		if ( regs.CR[6].eq ) { return 0x821A1820;  }
		/* 821A17ECh case    9:*/		return 0x821A17F0;
		  /* 821A17F0h */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A17F0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A17F0h case   10:*/		return 0x821A17F4;
		  /* 821A17F4h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821A17F4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A17F4h case   11:*/		return 0x821A17F8;
		  /* 821A17F8h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 821A17F8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821A1818;  }
		/* 821A17F8h case   12:*/		return 0x821A17FC;
		  /* 821A17FCh */ case   13:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A17FCh case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A17FCh case   13:*/		return 0x821A1800;
		  /* 821A1800h */ case   14:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A1800h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A1800h case   14:*/		return 0x821A1804;
		  /* 821A1804h */ case   15:  		/* cmplwi CR6, R9, 14080 */
		/* 821A1804h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A1804h case   15:*/		return 0x821A1808;
		  /* 821A1808h */ case   16:  		/* bc 4, CR6_EQ, 16 */
		/* 821A1808h case   16:*/		if ( !regs.CR[6].eq ) { return 0x821A1818;  }
		/* 821A1808h case   16:*/		return 0x821A180C;
		  /* 821A180Ch */ case   17:  		/* lwz R9, <#[R11]> */
		/* 821A180Ch case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A180Ch case   17:*/		return 0x821A1810;
		  /* 821A1810h */ case   18:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A1810h case   18:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A1810h case   18:*/		return 0x821A1814;
		  /* 821A1814h */ case   19:  		/* bc 4, CR0_EQ, 16 */
		/* 821A1814h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821A1824;  }
		/* 821A1814h case   19:*/		return 0x821A1818;
	}
	return 0x821A1818;
} // Block from 821A17C8h-821A1818h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821A1818h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1818( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1818) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1818);
		  /* 821A1818h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A1818h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1818h case    0:*/		return 0x821A181C;
		  /* 821A181Ch */ case    1:  		/* b -52 */
		/* 821A181Ch case    1:*/		return 0x821A17E8;
		/* 821A181Ch case    1:*/		return 0x821A1820;
	}
	return 0x821A1820;
} // Block from 821A1818h-821A1820h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A1820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1820);
		  /* 821A1820h */ case    0:  		/* li R10, 0 */
		/* 821A1820h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A1820h case    0:*/		return 0x821A1824;
	}
	return 0x821A1824;
} // Block from 821A1820h-821A1824h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A1824h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1824( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1824) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1824);
		  /* 821A1824h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821A1824h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A1824h case    0:*/		return 0x821A1828;
		  /* 821A1828h */ case    1:  		/* bc 4, CR6_EQ, 248 */
		/* 821A1828h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A1920;  }
		/* 821A1828h case    1:*/		return 0x821A182C;
		  /* 821A182Ch */ case    2:  		/* li R6, 0 */
		/* 821A182Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A182Ch case    2:*/		return 0x821A1830;
		  /* 821A1830h */ case    3:  		/* mr R5, R30 */
		/* 821A1830h case    3:*/		regs.R5 = regs.R30;
		/* 821A1830h case    3:*/		return 0x821A1834;
		  /* 821A1834h */ case    4:  		/* mr R4, R28 */
		/* 821A1834h case    4:*/		regs.R4 = regs.R28;
		/* 821A1834h case    4:*/		return 0x821A1838;
		  /* 821A1838h */ case    5:  		/* mr R3, R14 */
		/* 821A1838h case    5:*/		regs.R3 = regs.R14;
		/* 821A1838h case    5:*/		return 0x821A183C;
		  /* 821A183Ch */ case    6:  		/* bl 574468 */
		/* 821A183Ch case    6:*/		regs.LR = 0x821A1840; return 0x8222DC40;
		/* 821A183Ch case    6:*/		return 0x821A1840;
		  /* 821A1840h */ case    7:  		/* addi R11, R24, 10 */
		/* 821A1840h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xA);
		/* 821A1840h case    7:*/		return 0x821A1844;
		  /* 821A1844h */ case    8:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A1844h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A1844h case    8:*/		return 0x821A1848;
		  /* 821A1848h */ case    9:  		/* add R29, R11, R30 */
		/* 821A1848h case    9:*/		cpu::op::add<0>(regs,&regs.R29,regs.R11,regs.R30);
		/* 821A1848h case    9:*/		return 0x821A184C;
		  /* 821A184Ch */ case   10:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A184Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A184Ch case   10:*/		return 0x821A1850;
		  /* 821A1850h */ case   11:  		/* rlwinm R31, R11, 31, 28, 31 */
		/* 821A1850h case   11:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R31,regs.R11);
		/* 821A1850h case   11:*/		return 0x821A1854;
		  /* 821A1854h */ case   12:  		/* cmplwi CR6, R31, 0 */
		/* 821A1854h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A1854h case   12:*/		return 0x821A1858;
		  /* 821A1858h */ case   13:  		/* bc 12, CR6_EQ, 68 */
		/* 821A1858h case   13:*/		if ( regs.CR[6].eq ) { return 0x821A189C;  }
		/* 821A1858h case   13:*/		return 0x821A185C;
		  /* 821A185Ch */ case   14:  		/* addi R11, R31, -1 */
		/* 821A185Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821A185Ch case   14:*/		return 0x821A1860;
		  /* 821A1860h */ case   15:  		/* mr R4, R28 */
		/* 821A1860h case   15:*/		regs.R4 = regs.R28;
		/* 821A1860h case   15:*/		return 0x821A1864;
		  /* 821A1864h */ case   16:  		/* andc R11, R31, R11 */
		/* 821A1864h case   16:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821A1864h case   16:*/		return 0x821A1868;
		  /* 821A1868h */ case   17:  		/* mr R3, R14 */
		/* 821A1868h case   17:*/		regs.R3 = regs.R14;
		/* 821A1868h case   17:*/		return 0x821A186C;
		  /* 821A186Ch */ case   18:  		/* cntlzw R11, R11 */
		/* 821A186Ch case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A186Ch case   18:*/		return 0x821A1870;
		  /* 821A1870h */ case   19:  		/* subfic R5, R11, 31 */
		/* 821A1870h case   19:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x1F);
		/* 821A1870h case   19:*/		return 0x821A1874;
		  /* 821A1874h */ case   20:  		/* bl -169828 */
		/* 821A1874h case   20:*/		regs.LR = 0x821A1878; return 0x82178110;
		/* 821A1874h case   20:*/		return 0x821A1878;
		  /* 821A1878h */ case   21:  		/* mr R4, R3 */
		/* 821A1878h case   21:*/		regs.R4 = regs.R3;
		/* 821A1878h case   21:*/		return 0x821A187C;
		  /* 821A187Ch */ case   22:  		/* mr R3, R30 */
		/* 821A187Ch case   22:*/		regs.R3 = regs.R30;
		/* 821A187Ch case   22:*/		return 0x821A1880;
		  /* 821A1880h */ case   23:  		/* bl -169656 */
		/* 821A1880h case   23:*/		regs.LR = 0x821A1884; return 0x821781C8;
		/* 821A1880h case   23:*/		return 0x821A1884;
		  /* 821A1884h */ case   24:  		/* addi R11, R31, -1 */
		/* 821A1884h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821A1884h case   24:*/		return 0x821A1888;
		  /* 821A1888h */ case   25:  		/* stwu R3, <#[R29 + 4]> */
		/* 821A1888h case   25:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A1888h case   25:*/		return 0x821A188C;
		  /* 821A188Ch */ case   26:  		/* addi R24, R24, 1 */
		/* 821A188Ch case   26:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821A188Ch case   26:*/		return 0x821A1890;
		  /* 821A1890h */ case   27:  		/* andc R11, R31, R11 */
		/* 821A1890h case   27:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821A1890h case   27:*/		return 0x821A1894;
		  /* 821A1894h */ case   28:  		/* subf R31, R11, R31 */
		/* 821A1894h case   28:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821A1894h case   28:*/		return 0x821A1898;
		  /* 821A1898h */ case   29:  		/* b -68 */
		/* 821A1898h case   29:*/		return 0x821A1854;
		/* 821A1898h case   29:*/		return 0x821A189C;
	}
	return 0x821A189C;
} // Block from 821A1824h-821A189Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 821A189Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A189C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A189C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A189C);
		  /* 821A189Ch */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A189Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A189Ch case    0:*/		return 0x821A18A0;
		  /* 821A18A0h */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A18A0h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A18A0h case    1:*/		return 0x821A18A4;
		  /* 821A18A4h */ case    2:  		/* bc 12, CR0_EQ, 124 */
		/* 821A18A4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A1920;  }
		/* 821A18A4h case    2:*/		return 0x821A18A8;
		  /* 821A18A8h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A18A8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A18A8h case    3:*/		return 0x821A18AC;
		  /* 821A18ACh */ case    4:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A18ACh case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A18ACh case    4:*/		return 0x821A18B0;
		  /* 821A18B0h */ case    5:  		/* bc 4, CR0_EQ, 112 */
		/* 821A18B0h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821A1920;  }
		/* 821A18B0h case    5:*/		return 0x821A18B4;
		  /* 821A18B4h */ case    6:  		/* oris R11, R11, 128 */
		/* 821A18B4h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A18B4h case    6:*/		return 0x821A18B8;
		  /* 821A18B8h */ case    7:  		/* mr R3, R28 */
		/* 821A18B8h case    7:*/		regs.R3 = regs.R28;
		/* 821A18B8h case    7:*/		return 0x821A18BC;
		  /* 821A18BCh */ case    8:  		/* stw R11, <#[R30 + 8]> */
		/* 821A18BCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A18BCh case    8:*/		return 0x821A18C0;
		  /* 821A18C0h */ case    9:  		/* bl -122840 */
		/* 821A18C0h case    9:*/		regs.LR = 0x821A18C4; return 0x821838E8;
		/* 821A18C0h case    9:*/		return 0x821A18C4;
		  /* 821A18C4h */ case   10:  		/* sth R3, <#[R30 + 18]> */
		/* 821A18C4h case   10:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R30 + 0x00000012) );
		/* 821A18C4h case   10:*/		return 0x821A18C8;
		  /* 821A18C8h */ case   11:  		/* lwz R3, <#[R14 + 660]> */
		/* 821A18C8h case   11:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 821A18C8h case   11:*/		return 0x821A18CC;
		  /* 821A18CCh */ case   12:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A18CCh case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A18CCh case   12:*/		return 0x821A18D0;
		  /* 821A18D0h */ case   13:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A18D0h case   13:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A18D0h case   13:*/		return 0x821A18D4;
		  /* 821A18D4h */ case   14:  		/* bc 4, CR0_EQ, 40 */
		/* 821A18D4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821A18FC;  }
		/* 821A18D4h case   14:*/		return 0x821A18D8;
		  /* 821A18D8h */ case   15:  		/* lwz R11, <#[R3]> */
		/* 821A18D8h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A18D8h case   15:*/		return 0x821A18DC;
		  /* 821A18DCh */ case   16:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A18DCh case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A18DCh case   16:*/		return 0x821A18E0;
		  /* 821A18E0h */ case   17:  		/* addic. R11, R11, -4 */
		/* 821A18E0h case   17:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A18E0h case   17:*/		return 0x821A18E4;
		  /* 821A18E4h */ case   18:  		/* bc 12, CR0_EQ, 24 */
		/* 821A18E4h case   18:*/		if ( regs.CR[0].eq ) { return 0x821A18FC;  }
		/* 821A18E4h case   18:*/		return 0x821A18E8;
		  /* 821A18E8h */ case   19:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A18E8h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A18E8h case   19:*/		return 0x821A18EC;
		  /* 821A18ECh */ case   20:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A18ECh case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A18ECh case   20:*/		return 0x821A18F0;
		  /* 821A18F0h */ case   21:  		/* addi R10, R10, 1 */
		/* 821A18F0h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A18F0h case   21:*/		return 0x821A18F4;
		  /* 821A18F4h */ case   22:  		/* cmplw CR6, R10, R9 */
		/* 821A18F4h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A18F4h case   22:*/		return 0x821A18F8;
		  /* 821A18F8h */ case   23:  		/* bc 4, CR6_GT, 16 */
		/* 821A18F8h case   23:*/		if ( !regs.CR[6].gt ) { return 0x821A1908;  }
		/* 821A18F8h case   23:*/		return 0x821A18FC;
	}
	return 0x821A18FC;
} // Block from 821A189Ch-821A18FCh (24 instructions)

//////////////////////////////////////////////////////
// Block at 821A18FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A18FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A18FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A18FC);
		  /* 821A18FCh */ case    0:  		/* li R4, 1 */
		/* 821A18FCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A18FCh case    0:*/		return 0x821A1900;
		  /* 821A1900h */ case    1:  		/* bl -84024 */
		/* 821A1900h case    1:*/		regs.LR = 0x821A1904; return 0x8218D0C8;
		/* 821A1900h case    1:*/		return 0x821A1904;
		  /* 821A1904h */ case    2:  		/* mr R11, R3 */
		/* 821A1904h case    2:*/		regs.R11 = regs.R3;
		/* 821A1904h case    2:*/		return 0x821A1908;
	}
	return 0x821A1908;
} // Block from 821A18FCh-821A1908h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A1908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1908);
		  /* 821A1908h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A1908h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1908h case    0:*/		return 0x821A190C;
		  /* 821A190Ch */ case    1:  		/* addi R9, R10, 4 */
		/* 821A190Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A190Ch case    1:*/		return 0x821A1910;
		  /* 821A1910h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A1910h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A1910h case    2:*/		return 0x821A1914;
		  /* 821A1914h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A1914h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A1914h case    3:*/		return 0x821A1918;
		  /* 821A1918h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A1918h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1918h case    4:*/		return 0x821A191C;
		  /* 821A191Ch */ case    5:  		/* stwx R30, <#[R10 + R11]> */
		/* 821A191Ch case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A191Ch case    5:*/		return 0x821A1920;
	}
	return 0x821A1920;
} // Block from 821A1908h-821A1920h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A1920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1920);
		  /* 821A1920h */ case    0:  		/* lwz R11, <#[R21 + 16]> */
		/* 821A1920h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000010) );
		/* 821A1920h case    0:*/		return 0x821A1924;
		  /* 821A1924h */ case    1:  		/* addi R26, R26, 1 */
		/* 821A1924h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821A1924h case    1:*/		return 0x821A1928;
		  /* 821A1928h */ case    2:  		/* addi R27, R27, 4 */
		/* 821A1928h case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821A1928h case    2:*/		return 0x821A192C;
		  /* 821A192Ch */ case    3:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A192Ch case    3:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A192Ch case    3:*/		return 0x821A1930;
		  /* 821A1930h */ case    4:  		/* cmplw CR6, R26, R11 */
		/* 821A1930h case    4:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R11);
		/* 821A1930h case    4:*/		return 0x821A1934;
		  /* 821A1934h */ case    5:  		/* bc 12, CR6_LT, -340 */
		/* 821A1934h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A17E0;  }
		/* 821A1934h case    5:*/		return 0x821A1938;
	}
	return 0x821A1938;
} // Block from 821A1920h-821A1938h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A1938h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1938( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1938) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1938);
		  /* 821A1938h */ case    0:  		/* mr R4, R30 */
		/* 821A1938h case    0:*/		regs.R4 = regs.R30;
		/* 821A1938h case    0:*/		return 0x821A193C;
		  /* 821A193Ch */ case    1:  		/* mr R3, R14 */
		/* 821A193Ch case    1:*/		regs.R3 = regs.R14;
		/* 821A193Ch case    1:*/		return 0x821A1940;
		  /* 821A1940h */ case    2:  		/* bl 84648 */
		/* 821A1940h case    2:*/		regs.LR = 0x821A1944; return 0x821B63E8;
		/* 821A1940h case    2:*/		return 0x821A1944;
		  /* 821A1944h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A1944h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A1944h case    3:*/		return 0x821A1948;
		  /* 821A1948h */ case    4:  		/* oris R11, R11, 256 */
		/* 821A1948h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A1948h case    4:*/		return 0x821A194C;
		  /* 821A194Ch */ case    5:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A194Ch case    5:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A194Ch case    5:*/		return 0x821A1950;
		  /* 821A1950h */ case    6:  		/* stw R11, <#[R30 + 8]> */
		/* 821A1950h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A1950h case    6:*/		return 0x821A1954;
		  /* 821A1954h */ case    7:  		/* bc 12, CR0_EQ, 180 */
		/* 821A1954h case    7:*/		if ( regs.CR[0].eq ) { return 0x821A1A08;  }
		/* 821A1954h case    7:*/		return 0x821A1958;
		  /* 821A1958h */ case    8:  		/* li R28, 0 */
		/* 821A1958h case    8:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A1958h case    8:*/		return 0x821A195C;
		  /* 821A195Ch */ case    9:  		/* addi R29, R30, 44 */
		/* 821A195Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R30,0x2C);
		/* 821A195Ch case    9:*/		return 0x821A1960;
		  /* 821A1960h */ case   10:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A1960h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A1960h case   10:*/		return 0x821A1964;
		  /* 821A1964h */ case   11:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A1964h case   11:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A1964h case   11:*/		return 0x821A1968;
		  /* 821A1968h */ case   12:  		/* cmplw CR6, R28, R11 */
		/* 821A1968h case   12:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821A1968h case   12:*/		return 0x821A196C;
		  /* 821A196Ch */ case   13:  		/* bc 4, CR6_LT, 156 */
		/* 821A196Ch case   13:*/		if ( !regs.CR[6].lt ) { return 0x821A1A08;  }
		/* 821A196Ch case   13:*/		return 0x821A1970;
		  /* 821A1970h */ case   14:  		/* lwz R11, <#[R29]> */
		/* 821A1970h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A1970h case   14:*/		return 0x821A1974;
		  /* 821A1974h */ case   15:  		/* lwz R31, <#[R11 + 12]> */
		/* 821A1974h case   15:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A1974h case   15:*/		return 0x821A1978;
		  /* 821A1978h */ case   16:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A1978h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A1978h case   16:*/		return 0x821A197C;
		  /* 821A197Ch */ case   17:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A197Ch case   17:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A197Ch case   17:*/		return 0x821A1980;
		  /* 821A1980h */ case   18:  		/* bc 4, CR0_EQ, 124 */
		/* 821A1980h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821A19FC;  }
		/* 821A1980h case   18:*/		return 0x821A1984;
		  /* 821A1984h */ case   19:  		/* oris R11, R11, 128 */
		/* 821A1984h case   19:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A1984h case   19:*/		return 0x821A1988;
		  /* 821A1988h */ case   20:  		/* mr R3, R30 */
		/* 821A1988h case   20:*/		regs.R3 = regs.R30;
		/* 821A1988h case   20:*/		return 0x821A198C;
		  /* 821A198Ch */ case   21:  		/* stw R11, <#[R31 + 8]> */
		/* 821A198Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A198Ch case   21:*/		return 0x821A1990;
		  /* 821A1990h */ case   22:  		/* bl -123048 */
		/* 821A1990h case   22:*/		regs.LR = 0x821A1994; return 0x821838E8;
		/* 821A1990h case   22:*/		return 0x821A1994;
		  /* 821A1994h */ case   23:  		/* sth R3, <#[R31 + 18]> */
		/* 821A1994h case   23:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 821A1994h case   23:*/		return 0x821A1998;
		  /* 821A1998h */ case   24:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A1998h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A1998h case   24:*/		return 0x821A199C;
		  /* 821A199Ch */ case   25:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 821A199Ch case   25:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 821A199Ch case   25:*/		return 0x821A19A0;
		  /* 821A19A0h */ case   26:  		/* stw R11, <#[R31 + 16]> */
		/* 821A19A0h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A19A0h case   26:*/		return 0x821A19A4;
		  /* 821A19A4h */ case   27:  		/* lwz R3, <#[R14 + 660]> */
		/* 821A19A4h case   27:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R14 + 0x00000294) );
		/* 821A19A4h case   27:*/		return 0x821A19A8;
		  /* 821A19A8h */ case   28:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A19A8h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A19A8h case   28:*/		return 0x821A19AC;
		  /* 821A19ACh */ case   29:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A19ACh case   29:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A19ACh case   29:*/		return 0x821A19B0;
		  /* 821A19B0h */ case   30:  		/* bc 4, CR0_EQ, 40 */
		/* 821A19B0h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821A19D8;  }
		/* 821A19B0h case   30:*/		return 0x821A19B4;
		  /* 821A19B4h */ case   31:  		/* lwz R11, <#[R3]> */
		/* 821A19B4h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A19B4h case   31:*/		return 0x821A19B8;
		  /* 821A19B8h */ case   32:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A19B8h case   32:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A19B8h case   32:*/		return 0x821A19BC;
		  /* 821A19BCh */ case   33:  		/* addic. R11, R11, -4 */
		/* 821A19BCh case   33:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A19BCh case   33:*/		return 0x821A19C0;
		  /* 821A19C0h */ case   34:  		/* bc 12, CR0_EQ, 24 */
		/* 821A19C0h case   34:*/		if ( regs.CR[0].eq ) { return 0x821A19D8;  }
		/* 821A19C0h case   34:*/		return 0x821A19C4;
		  /* 821A19C4h */ case   35:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A19C4h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A19C4h case   35:*/		return 0x821A19C8;
		  /* 821A19C8h */ case   36:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A19C8h case   36:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A19C8h case   36:*/		return 0x821A19CC;
		  /* 821A19CCh */ case   37:  		/* addi R10, R10, 1 */
		/* 821A19CCh case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A19CCh case   37:*/		return 0x821A19D0;
		  /* 821A19D0h */ case   38:  		/* cmplw CR6, R10, R9 */
		/* 821A19D0h case   38:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A19D0h case   38:*/		return 0x821A19D4;
		  /* 821A19D4h */ case   39:  		/* bc 4, CR6_GT, 16 */
		/* 821A19D4h case   39:*/		if ( !regs.CR[6].gt ) { return 0x821A19E4;  }
		/* 821A19D4h case   39:*/		return 0x821A19D8;
	}
	return 0x821A19D8;
} // Block from 821A1938h-821A19D8h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821A19D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A19D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A19D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A19D8);
		  /* 821A19D8h */ case    0:  		/* li R4, 1 */
		/* 821A19D8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A19D8h case    0:*/		return 0x821A19DC;
		  /* 821A19DCh */ case    1:  		/* bl -84244 */
		/* 821A19DCh case    1:*/		regs.LR = 0x821A19E0; return 0x8218D0C8;
		/* 821A19DCh case    1:*/		return 0x821A19E0;
		  /* 821A19E0h */ case    2:  		/* mr R11, R3 */
		/* 821A19E0h case    2:*/		regs.R11 = regs.R3;
		/* 821A19E0h case    2:*/		return 0x821A19E4;
	}
	return 0x821A19E4;
} // Block from 821A19D8h-821A19E4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A19E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A19E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A19E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A19E4);
		  /* 821A19E4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A19E4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A19E4h case    0:*/		return 0x821A19E8;
		  /* 821A19E8h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A19E8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A19E8h case    1:*/		return 0x821A19EC;
		  /* 821A19ECh */ case    2:  		/* addi R8, R10, 1 */
		/* 821A19ECh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A19ECh case    2:*/		return 0x821A19F0;
		  /* 821A19F0h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A19F0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A19F0h case    3:*/		return 0x821A19F4;
		  /* 821A19F4h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A19F4h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A19F4h case    4:*/		return 0x821A19F8;
		  /* 821A19F8h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A19F8h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A19F8h case    5:*/		return 0x821A19FC;
	}
	return 0x821A19FC;
} // Block from 821A19E4h-821A19FCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A19FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A19FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A19FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A19FC);
		  /* 821A19FCh */ case    0:  		/* addi R28, R28, 1 */
		/* 821A19FCh case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821A19FCh case    0:*/		return 0x821A1A00;
		  /* 821A1A00h */ case    1:  		/* addi R29, R29, 4 */
		/* 821A1A00h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821A1A00h case    1:*/		return 0x821A1A04;
		  /* 821A1A04h */ case    2:  		/* b -164 */
		/* 821A1A04h case    2:*/		return 0x821A1960;
		/* 821A1A04h case    2:*/		return 0x821A1A08;
	}
	return 0x821A1A08;
} // Block from 821A19FCh-821A1A08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A1A08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1A08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1A08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1A08);
		  /* 821A1A08h */ case    0:  		/* mr R4, R30 */
		/* 821A1A08h case    0:*/		regs.R4 = regs.R30;
		/* 821A1A08h case    0:*/		return 0x821A1A0C;
		  /* 821A1A0Ch */ case    1:  		/* mr R3, R14 */
		/* 821A1A0Ch case    1:*/		regs.R3 = regs.R14;
		/* 821A1A0Ch case    1:*/		return 0x821A1A10;
		  /* 821A1A10h */ case    2:  		/* bl -3928 */
		/* 821A1A10h case    2:*/		regs.LR = 0x821A1A14; return 0x821A0AB8;
		/* 821A1A10h case    2:*/		return 0x821A1A14;
		  /* 821A1A14h */ case    3:  		/* lwz R24, <#[R1 + 80]> */
		/* 821A1A14h case    3:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000050) );
		/* 821A1A14h case    3:*/		return 0x821A1A18;
		  /* 821A1A18h */ case    4:  		/* lwz R23, <#[R1 + 388]> */
		/* 821A1A18h case    4:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000184) );
		/* 821A1A18h case    4:*/		return 0x821A1A1C;
		  /* 821A1A1Ch */ case    5:  		/* li R22, 0 */
		/* 821A1A1Ch case    5:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821A1A1Ch case    5:*/		return 0x821A1A20;
	}
	return 0x821A1A20;
} // Block from 821A1A08h-821A1A20h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A1A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1A20);
		  /* 821A1A20h */ case    0:  		/* addi R20, R20, 1 */
		/* 821A1A20h case    0:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821A1A20h case    0:*/		return 0x821A1A24;
		  /* 821A1A24h */ case    1:  		/* cmplw CR6, R20, R24 */
		/* 821A1A24h case    1:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R24);
		/* 821A1A24h case    1:*/		return 0x821A1A28;
		  /* 821A1A28h */ case    2:  		/* bc 12, CR6_LT, -1692 */
		/* 821A1A28h case    2:*/		if ( regs.CR[6].lt ) { return 0x821A138C;  }
		/* 821A1A28h case    2:*/		return 0x821A1A2C;
	}
	return 0x821A1A2C;
} // Block from 821A1A20h-821A1A2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A1A2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1A2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1A2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1A2C);
		  /* 821A1A2Ch */ case    0:  		/* lbz R11, <#[R1 + 415]> */
		/* 821A1A2Ch case    0:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000019F) );
		/* 821A1A2Ch case    0:*/		return 0x821A1A30;
		  /* 821A1A30h */ case    1:  		/* cmplwi CR0, R11, 0 */
		/* 821A1A30h case    1:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A1A30h case    1:*/		return 0x821A1A34;
		  /* 821A1A34h */ case    2:  		/* bc 4, CR0_EQ, 28 */
		/* 821A1A34h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A1A50;  }
		/* 821A1A34h case    2:*/		return 0x821A1A38;
		  /* 821A1A38h */ case    3:  		/* li R7, 0 */
		/* 821A1A38h case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A1A38h case    3:*/		return 0x821A1A3C;
		  /* 821A1A3Ch */ case    4:  		/* lwz R4, <#[R1 + 380]> */
		/* 821A1A3Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000017C) );
		/* 821A1A3Ch case    4:*/		return 0x821A1A40;
		  /* 821A1A40h */ case    5:  		/* li R6, 1 */
		/* 821A1A40h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A1A40h case    5:*/		return 0x821A1A44;
		  /* 821A1A44h */ case    6:  		/* mr R5, R23 */
		/* 821A1A44h case    6:*/		regs.R5 = regs.R23;
		/* 821A1A44h case    6:*/		return 0x821A1A48;
		  /* 821A1A48h */ case    7:  		/* mr R3, R14 */
		/* 821A1A48h case    7:*/		regs.R3 = regs.R14;
		/* 821A1A48h case    7:*/		return 0x821A1A4C;
		  /* 821A1A4Ch */ case    8:  		/* bl 573756 */
		/* 821A1A4Ch case    8:*/		regs.LR = 0x821A1A50; return 0x8222DB88;
		/* 821A1A4Ch case    8:*/		return 0x821A1A50;
	}
	return 0x821A1A50;
} // Block from 821A1A2Ch-821A1A50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A1A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1A50);
		  /* 821A1A50h */ case    0:  		/* mr R3, R19 */
		/* 821A1A50h case    0:*/		regs.R3 = regs.R19;
		/* 821A1A50h case    0:*/		return 0x821A1A54;
	}
	return 0x821A1A54;
} // Block from 821A1A50h-821A1A54h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A1A54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1A54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1A54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1A54);
		  /* 821A1A54h */ case    0:  		/* addi R1, R1, 352 */
		/* 821A1A54h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 821A1A54h case    0:*/		return 0x821A1A58;
		  /* 821A1A58h */ case    1:  		/* b -1116136 */
		/* 821A1A58h case    1:*/		return 0x82091270;
		/* 821A1A58h case    1:*/		return 0x821A1A5C;
		  /* 821A1A5Ch */ case    2:  		/* nop */
		/* 821A1A5Ch case    2:*/		cpu::op::nop();
		/* 821A1A5Ch case    2:*/		return 0x821A1A60;
	}
	return 0x821A1A60;
} // Block from 821A1A54h-821A1A60h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A1A60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1A60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1A60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1A60);
		  /* 821A1A60h */ case    0:  		/* mfspr R12, LR */
		/* 821A1A60h case    0:*/		regs.R12 = regs.LR;
		/* 821A1A60h case    0:*/		return 0x821A1A64;
		  /* 821A1A64h */ case    1:  		/* bl -1116184 */
		/* 821A1A64h case    1:*/		regs.LR = 0x821A1A68; return 0x8209124C;
		/* 821A1A64h case    1:*/		return 0x821A1A68;
		  /* 821A1A68h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821A1A68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821A1A68h case    2:*/		return 0x821A1A6C;
		  /* 821A1A6Ch */ case    3:  		/* mr R26, R3 */
		/* 821A1A6Ch case    3:*/		regs.R26 = regs.R3;
		/* 821A1A6Ch case    3:*/		return 0x821A1A70;
		  /* 821A1A70h */ case    4:  		/* mr R27, R4 */
		/* 821A1A70h case    4:*/		regs.R27 = regs.R4;
		/* 821A1A70h case    4:*/		return 0x821A1A74;
		  /* 821A1A74h */ case    5:  		/* addi R25, R4, 4 */
		/* 821A1A74h case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R4,0x4);
		/* 821A1A74h case    5:*/		return 0x821A1A78;
		  /* 821A1A78h */ case    6:  		/* lwz R31, <#[R25]> */
		/* 821A1A78h case    6:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 821A1A78h case    6:*/		return 0x821A1A7C;
		  /* 821A1A7Ch */ case    7:  		/* cmplwi CR6, R31, 0 */
		/* 821A1A7Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A1A7Ch case    7:*/		return 0x821A1A80;
		  /* 821A1A80h */ case    8:  		/* bc 12, CR6_EQ, 556 */
		/* 821A1A80h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A1CAC;  }
		/* 821A1A80h case    8:*/		return 0x821A1A84;
		  /* 821A1A84h */ case    9:  		/* lwz R3, <#[R31 + 16]> */
		/* 821A1A84h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 821A1A84h case    9:*/		return 0x821A1A88;
		  /* 821A1A88h */ case   10:  		/* cmplwi CR6, R3, 0 */
		/* 821A1A88h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821A1A88h case   10:*/		return 0x821A1A8C;
		  /* 821A1A8Ch */ case   11:  		/* bc 12, CR6_EQ, 524 */
		/* 821A1A8Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821A1C98;  }
		/* 821A1A8Ch case   11:*/		return 0x821A1A90;
		  /* 821A1A90h */ case   12:  		/* lwz R8, <#[R31]> */
		/* 821A1A90h case   12:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x00000000) );
		/* 821A1A90h case   12:*/		return 0x821A1A94;
		  /* 821A1A94h */ case   13:  		/* rlwinm. R10, R8, 7, 29, 31 */
		/* 821A1A94h case   13:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R10,regs.R8);
		/* 821A1A94h case   13:*/		return 0x821A1A98;
		  /* 821A1A98h */ case   14:  		/* bc 12, CR0_EQ, 512 */
		/* 821A1A98h case   14:*/		if ( regs.CR[0].eq ) { return 0x821A1C98;  }
		/* 821A1A98h case   14:*/		return 0x821A1A9C;
		  /* 821A1A9Ch */ case   15:  		/* li R11, 0 */
		/* 821A1A9Ch case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A1A9Ch case   15:*/		return 0x821A1AA0;
		  /* 821A1AA0h */ case   16:  		/* li R9, 0 */
		/* 821A1AA0h case   16:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A1AA0h case   16:*/		return 0x821A1AA4;
		  /* 821A1AA4h */ case   17:  		/* cmplwi CR6, R10, 0 */
		/* 821A1AA4h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A1AA4h case   17:*/		return 0x821A1AA8;
		  /* 821A1AA8h */ case   18:  		/* bc 12, CR6_EQ, 56 */
		/* 821A1AA8h case   18:*/		if ( regs.CR[6].eq ) { return 0x821A1AE0;  }
		/* 821A1AA8h case   18:*/		return 0x821A1AAC;
		  /* 821A1AACh */ case   19:  		/* rlwinm R7, R8, 0, 0, 31 */
		/* 821A1AACh case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R8);
		/* 821A1AACh case   19:*/		return 0x821A1AB0;
		  /* 821A1AB0h */ case   20:  		/* rlwinm R8, R8, 27, 24, 31 */
		/* 821A1AB0h case   20:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R8);
		/* 821A1AB0h case   20:*/		return 0x821A1AB4;
		  /* 821A1AB4h */ case   21:  		/* li R10, 0 */
		/* 821A1AB4h case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A1AB4h case   21:*/		return 0x821A1AB8;
		  /* 821A1AB8h */ case   22:  		/* rlwinm R7, R7, 7, 29, 31 */
		/* 821A1AB8h case   22:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R7,regs.R7);
		/* 821A1AB8h case   22:*/		return 0x821A1ABC;
		  /* 821A1ABCh */ case   23:  		/* srw R6, R8, R10 */
		/* 821A1ABCh case   23:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R8,regs.R10);
		/* 821A1ABCh case   23:*/		return 0x821A1AC0;
		  /* 821A1AC0h */ case   24:  		/* rlwinm R6, R6, 0, 30, 31 */
		/* 821A1AC0h case   24:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R6,regs.R6);
		/* 821A1AC0h case   24:*/		return 0x821A1AC4;
		  /* 821A1AC4h */ case   25:  		/* li R5, 1 */
		/* 821A1AC4h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821A1AC4h case   25:*/		return 0x821A1AC8;
		  /* 821A1AC8h */ case   26:  		/* addi R9, R9, 1 */
		/* 821A1AC8h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821A1AC8h case   26:*/		return 0x821A1ACC;
		  /* 821A1ACCh */ case   27:  		/* slw R6, R5, R6 */
		/* 821A1ACCh case   27:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R5,regs.R6);
		/* 821A1ACCh case   27:*/		return 0x821A1AD0;
		  /* 821A1AD0h */ case   28:  		/* or R11, R6, R11 */
		/* 821A1AD0h case   28:*/		cpu::op::or<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 821A1AD0h case   28:*/		return 0x821A1AD4;
		  /* 821A1AD4h */ case   29:  		/* addi R10, R10, 2 */
		/* 821A1AD4h case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821A1AD4h case   29:*/		return 0x821A1AD8;
		  /* 821A1AD8h */ case   30:  		/* cmplw CR6, R9, R7 */
		/* 821A1AD8h case   30:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R7);
		/* 821A1AD8h case   30:*/		return 0x821A1ADC;
		  /* 821A1ADCh */ case   31:  		/* bc 12, CR6_LT, -32 */
		/* 821A1ADCh case   31:*/		if ( regs.CR[6].lt ) { return 0x821A1ABC;  }
		/* 821A1ADCh case   31:*/		return 0x821A1AE0;
	}
	return 0x821A1AE0;
} // Block from 821A1A60h-821A1AE0h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821A1AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1AE0);
		  /* 821A1AE0h */ case    0:  		/* li R29, 0 */
		/* 821A1AE0h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A1AE0h case    0:*/		return 0x821A1AE4;
		  /* 821A1AE4h */ case    1:  		/* li R28, 0 */
		/* 821A1AE4h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A1AE4h case    1:*/		return 0x821A1AE8;
		  /* 821A1AE8h */ case    2:  		/* li R10, 0 */
		/* 821A1AE8h case    2:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A1AE8h case    2:*/		return 0x821A1AEC;
		  /* 821A1AECh */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821A1AECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A1AECh case    3:*/		return 0x821A1AF0;
		  /* 821A1AF0h */ case    4:  		/* bc 12, CR6_EQ, 112 */
		/* 821A1AF0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A1B60;  }
		/* 821A1AF0h case    4:*/		return 0x821A1AF4;
		  /* 821A1AF4h */ case    5:  		/* addi R10, R11, -1 */
		/* 821A1AF4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821A1AF4h case    5:*/		return 0x821A1AF8;
		  /* 821A1AF8h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 821A1AF8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A1AF8h case    6:*/		return 0x821A1AFC;
		  /* 821A1AFCh */ case    7:  		/* andc R10, R11, R10 */
		/* 821A1AFCh case    7:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821A1AFCh case    7:*/		return 0x821A1B00;
		  /* 821A1B00h */ case    8:  		/* cntlzw R10, R10 */
		/* 821A1B00h case    8:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821A1B00h case    8:*/		return 0x821A1B04;
		  /* 821A1B04h */ case    9:  		/* subfic R10, R10, 31 */
		/* 821A1B04h case    9:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821A1B04h case    9:*/		return 0x821A1B08;
		  /* 821A1B08h */ case   10:  		/* addi R9, R10, 11 */
		/* 821A1B08h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xB);
		/* 821A1B08h case   10:*/		return 0x821A1B0C;
		  /* 821A1B0Ch */ case   11:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821A1B0Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821A1B0Ch case   11:*/		return 0x821A1B10;
		  /* 821A1B10h */ case   12:  		/* lwzx R9, <#[R9 + R27]> */
		/* 821A1B10h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R27 + 0x00000000) );
		/* 821A1B10h case   12:*/		return 0x821A1B14;
		  /* 821A1B14h */ case   13:  		/* lwz R8, <#[R9 + 12]> */
		/* 821A1B14h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A1B14h case   13:*/		return 0x821A1B18;
		  /* 821A1B18h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 821A1B18h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821A1B24;  }
		/* 821A1B18h case   14:*/		return 0x821A1B1C;
		  /* 821A1B1Ch */ case   15:  		/* mr R29, R8 */
		/* 821A1B1Ch case   15:*/		regs.R29 = regs.R8;
		/* 821A1B1Ch case   15:*/		return 0x821A1B20;
		  /* 821A1B20h */ case   16:  		/* b 12 */
		/* 821A1B20h case   16:*/		return 0x821A1B2C;
		/* 821A1B20h case   16:*/		return 0x821A1B24;
	}
	return 0x821A1B24;
} // Block from 821A1AE0h-821A1B24h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A1B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1B24);
		  /* 821A1B24h */ case    0:  		/* cmplw CR6, R29, R8 */
		/* 821A1B24h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R8);
		/* 821A1B24h case    0:*/		return 0x821A1B28;
		  /* 821A1B28h */ case    1:  		/* bc 4, CR6_EQ, 368 */
		/* 821A1B28h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A1C98;  }
		/* 821A1B28h case    1:*/		return 0x821A1B2C;
	}
	return 0x821A1B2C;
} // Block from 821A1B24h-821A1B2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A1B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1B2C);
		  /* 821A1B2Ch */ case    0:  		/* lwz R9, <#[R9]> */
		/* 821A1B2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821A1B2Ch case    0:*/		return 0x821A1B30;
		  /* 821A1B30h */ case    1:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821A1B30h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821A1B30h case    1:*/		return 0x821A1B34;
		  /* 821A1B34h */ case    2:  		/* li R8, 3 */
		/* 821A1B34h case    2:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 821A1B34h case    2:*/		return 0x821A1B38;
		  /* 821A1B38h */ case    3:  		/* rlwinm R6, R9, 27, 30, 31 */
		/* 821A1B38h case    3:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R6,regs.R9);
		/* 821A1B38h case    3:*/		return 0x821A1B3C;
		  /* 821A1B3Ch */ case    4:  		/* slw R8, R8, R10 */
		/* 821A1B3Ch case    4:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R10);
		/* 821A1B3Ch case    4:*/		return 0x821A1B40;
		  /* 821A1B40h */ case    5:  		/* addi R7, R11, -1 */
		/* 821A1B40h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 821A1B40h case    5:*/		return 0x821A1B44;
		  /* 821A1B44h */ case    6:  		/* slw R10, R6, R10 */
		/* 821A1B44h case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 821A1B44h case    6:*/		return 0x821A1B48;
		  /* 821A1B48h */ case    7:  		/* andc R8, R28, R8 */
		/* 821A1B48h case    7:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R28,regs.R8);
		/* 821A1B48h case    7:*/		return 0x821A1B4C;
		  /* 821A1B4Ch */ case    8:  		/* andc R7, R11, R7 */
		/* 821A1B4Ch case    8:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821A1B4Ch case    8:*/		return 0x821A1B50;
		  /* 821A1B50h */ case    9:  		/* or R28, R10, R8 */
		/* 821A1B50h case    9:*/		cpu::op::or<0>(regs,&regs.R28,regs.R10,regs.R8);
		/* 821A1B50h case    9:*/		return 0x821A1B54;
		  /* 821A1B54h */ case   10:  		/* rlwinm R10, R9, 0, 27, 31 */
		/* 821A1B54h case   10:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R9);
		/* 821A1B54h case   10:*/		return 0x821A1B58;
		  /* 821A1B58h */ case   11:  		/* subf R11, R7, R11 */
		/* 821A1B58h case   11:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 821A1B58h case   11:*/		return 0x821A1B5C;
		  /* 821A1B5Ch */ case   12:  		/* b -112 */
		/* 821A1B5Ch case   12:*/		return 0x821A1AEC;
		/* 821A1B5Ch case   12:*/		return 0x821A1B60;
	}
	return 0x821A1B60;
} // Block from 821A1B2Ch-821A1B60h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A1B60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1B60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1B60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1B60);
		  /* 821A1B60h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821A1B60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A1B60h case    0:*/		return 0x821A1B64;
		  /* 821A1B64h */ case    1:  		/* rlwinm. R9, R10, 0, 27, 28 */
		/* 821A1B64h case    1:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R9,regs.R10);
		/* 821A1B64h case    1:*/		return 0x821A1B68;
		  /* 821A1B68h */ case    2:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821A1B68h case    2:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821A1B68h case    2:*/		return 0x821A1B6C;
		  /* 821A1B6Ch */ case    3:  		/* bc 12, CR0_EQ, 20 */
		/* 821A1B6Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821A1B80;  }
		/* 821A1B6Ch case    3:*/		return 0x821A1B70;
		  /* 821A1B70h */ case    4:  		/* rlwinm. R9, R11, 0, 27, 28 */
		/* 821A1B70h case    4:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R9,regs.R11);
		/* 821A1B70h case    4:*/		return 0x821A1B74;
		  /* 821A1B74h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821A1B74h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A1B80;  }
		/* 821A1B74h case    5:*/		return 0x821A1B78;
		  /* 821A1B78h */ case    6:  		/* li R9, 0 */
		/* 821A1B78h case    6:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A1B78h case    6:*/		return 0x821A1B7C;
		  /* 821A1B7Ch */ case    7:  		/* b 44 */
		/* 821A1B7Ch case    7:*/		return 0x821A1BA8;
		/* 821A1B7Ch case    7:*/		return 0x821A1B80;
	}
	return 0x821A1B80;
} // Block from 821A1B60h-821A1B80h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A1B80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1B80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1B80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1B80);
		  /* 821A1B80h */ case    0:  		/* rlwinm. R9, R10, 0, 30, 30 */
		/* 821A1B80h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R10);
		/* 821A1B80h case    0:*/		return 0x821A1B84;
		  /* 821A1B84h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821A1B84h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A1B90;  }
		/* 821A1B84h case    1:*/		return 0x821A1B88;
		  /* 821A1B88h */ case    2:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821A1B88h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821A1B88h case    2:*/		return 0x821A1B8C;
		  /* 821A1B8Ch */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 821A1B8Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A1B78;  }
		/* 821A1B8Ch case    3:*/		return 0x821A1B90;
	}
	return 0x821A1B90;
} // Block from 821A1B80h-821A1B90h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A1B90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1B90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1B90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1B90);
		  /* 821A1B90h */ case    0:  		/* rlwinm. R9, R10, 0, 29, 29 */
		/* 821A1B90h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R10);
		/* 821A1B90h case    0:*/		return 0x821A1B94;
		  /* 821A1B94h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821A1B94h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A1BA4;  }
		/* 821A1B94h case    1:*/		return 0x821A1B98;
		  /* 821A1B98h */ case    2:  		/* rlwinm. R9, R11, 0, 31, 31 */
		/* 821A1B98h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R11);
		/* 821A1B98h case    2:*/		return 0x821A1B9C;
		  /* 821A1B9Ch */ case    3:  		/* li R9, 0 */
		/* 821A1B9Ch case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A1B9Ch case    3:*/		return 0x821A1BA0;
		  /* 821A1BA0h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821A1BA0h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A1BA8;  }
		/* 821A1BA0h case    4:*/		return 0x821A1BA4;
	}
	return 0x821A1BA4;
} // Block from 821A1B90h-821A1BA4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A1BA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1BA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1BA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1BA4);
		  /* 821A1BA4h */ case    0:  		/* li R9, 1 */
		/* 821A1BA4h case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x1);
		/* 821A1BA4h case    0:*/		return 0x821A1BA8;
	}
	return 0x821A1BA8;
} // Block from 821A1BA4h-821A1BA8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A1BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1BA8);
		  /* 821A1BA8h */ case    0:  		/* rlwinm. R9, R9, 0, 24, 31 */
		/* 821A1BA8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R9);
		/* 821A1BA8h case    0:*/		return 0x821A1BAC;
		  /* 821A1BACh */ case    1:  		/* bc 12, CR0_EQ, 236 */
		/* 821A1BACh case    1:*/		if ( regs.CR[0].eq ) { return 0x821A1C98;  }
		/* 821A1BACh case    1:*/		return 0x821A1BB0;
		  /* 821A1BB0h */ case    2:  		/* rlwinm. R9, R10, 0, 29, 29 */
		/* 821A1BB0h case    2:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R10);
		/* 821A1BB0h case    2:*/		return 0x821A1BB4;
		  /* 821A1BB4h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821A1BB4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821A1BC4;  }
		/* 821A1BB4h case    3:*/		return 0x821A1BB8;
		  /* 821A1BB8h */ case    4:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 821A1BB8h case    4:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 821A1BB8h case    4:*/		return 0x821A1BBC;
		  /* 821A1BBCh */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 821A1BBCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821A1BC4;  }
		/* 821A1BBCh case    5:*/		return 0x821A1BC0;
		  /* 821A1BC0h */ case    6:  		/* addi R10, R10, -4 */
		/* 821A1BC0h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821A1BC0h case    6:*/		return 0x821A1BC4;
	}
	return 0x821A1BC4;
} // Block from 821A1BA8h-821A1BC4h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A1BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1BC4);
		  /* 821A1BC4h */ case    0:  		/* and R9, R10, R11 */
		/* 821A1BC4h case    0:*/		cpu::op::and<0>(regs,&regs.R9,regs.R10,regs.R11);
		/* 821A1BC4h case    0:*/		return 0x821A1BC8;
		  /* 821A1BC8h */ case    1:  		/* rlwinm. R9, R9, 0, 29, 29 */
		/* 821A1BC8h case    1:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R9,regs.R9);
		/* 821A1BC8h case    1:*/		return 0x821A1BCC;
		  /* 821A1BCCh */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821A1BCCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821A1BD8;  }
		/* 821A1BCCh case    2:*/		return 0x821A1BD0;
		  /* 821A1BD0h */ case    3:  		/* addi R10, R10, -4 */
		/* 821A1BD0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFC);
		/* 821A1BD0h case    3:*/		return 0x821A1BD4;
		  /* 821A1BD4h */ case    4:  		/* addi R11, R11, -4 */
		/* 821A1BD4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A1BD4h case    4:*/		return 0x821A1BD8;
	}
	return 0x821A1BD8;
} // Block from 821A1BC4h-821A1BD8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A1BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1BD8);
		  /* 821A1BD8h */ case    0:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821A1BD8h case    0:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821A1BD8h case    0:*/		return 0x821A1BDC;
		  /* 821A1BDCh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821A1BDCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821A1BEC;  }
		/* 821A1BDCh case    1:*/		return 0x821A1BE0;
		  /* 821A1BE0h */ case    2:  		/* rlwinm. R9, R11, 0, 30, 30 */
		/* 821A1BE0h case    2:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R9,regs.R11);
		/* 821A1BE0h case    2:*/		return 0x821A1BE4;
		  /* 821A1BE4h */ case    3:  		/* bc 12, CR0_EQ, 8 */
		/* 821A1BE4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821A1BEC;  }
		/* 821A1BE4h case    3:*/		return 0x821A1BE8;
		  /* 821A1BE8h */ case    4:  		/* addi R11, R11, -2 */
		/* 821A1BE8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFE);
		/* 821A1BE8h case    4:*/		return 0x821A1BEC;
	}
	return 0x821A1BEC;
} // Block from 821A1BD8h-821A1BECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A1BECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1BEC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1BEC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1BEC);
		  /* 821A1BECh */ case    0:  		/* or R30, R10, R11 */
		/* 821A1BECh case    0:*/		cpu::op::or<0>(regs,&regs.R30,regs.R10,regs.R11);
		/* 821A1BECh case    0:*/		return 0x821A1BF0;
		  /* 821A1BF0h */ case    1:  		/* mr R4, R30 */
		/* 821A1BF0h case    1:*/		regs.R4 = regs.R30;
		/* 821A1BF0h case    1:*/		return 0x821A1BF4;
		  /* 821A1BF4h */ case    2:  		/* bl -47460 */
		/* 821A1BF4h case    2:*/		regs.LR = 0x821A1BF8; return 0x82196290;
		/* 821A1BF4h case    2:*/		return 0x821A1BF8;
		  /* 821A1BF8h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A1BF8h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A1BF8h case    3:*/		return 0x821A1BFC;
		  /* 821A1BFCh */ case    4:  		/* bc 12, CR0_EQ, 156 */
		/* 821A1BFCh case    4:*/		if ( regs.CR[0].eq ) { return 0x821A1C98;  }
		/* 821A1BFCh case    4:*/		return 0x821A1C00;
		  /* 821A1C00h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A1C00h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A1C00h case    5:*/		return 0x821A1C04;
		  /* 821A1C04h */ case    6:  		/* addi R11, R11, 4 */
		/* 821A1C04h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A1C04h case    6:*/		return 0x821A1C08;
		  /* 821A1C08h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821A1C08h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A1C08h case    7:*/		return 0x821A1C0C;
		  /* 821A1C0Ch */ case    8:  		/* b 12 */
		/* 821A1C0Ch case    8:*/		return 0x821A1C18;
		/* 821A1C0Ch case    8:*/		return 0x821A1C10;
		  /* 821A1C10h */ case    9:  		/* addi R11, R10, 8 */
		/* 821A1C10h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A1C10h case    9:*/		return 0x821A1C14;
		  /* 821A1C14h */ case   10:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A1C14h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A1C14h case   10:*/		return 0x821A1C18;
	}
	return 0x821A1C18;
} // Block from 821A1BECh-821A1C18h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A1C18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1C18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1C18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1C18);
		  /* 821A1C18h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A1C18h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A1C18h case    0:*/		return 0x821A1C1C;
		  /* 821A1C1Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A1C1Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A1C10;  }
		/* 821A1C1Ch case    1:*/		return 0x821A1C20;
		  /* 821A1C20h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A1C20h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A1C20h case    2:*/		return 0x821A1C24;
		  /* 821A1C24h */ case    3:  		/* rlwinm R9, R30, 0, 27, 31 */
		/* 821A1C24h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R30);
		/* 821A1C24h case    3:*/		return 0x821A1C28;
		  /* 821A1C28h */ case    4:  		/* mr R4, R29 */
		/* 821A1C28h case    4:*/		regs.R4 = regs.R29;
		/* 821A1C28h case    4:*/		return 0x821A1C2C;
		  /* 821A1C2Ch */ case    5:  		/* mr R3, R26 */
		/* 821A1C2Ch case    5:*/		regs.R3 = regs.R26;
		/* 821A1C2Ch case    5:*/		return 0x821A1C30;
		  /* 821A1C30h */ case    6:  		/* stw R10, <#[R11]> */
		/* 821A1C30h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A1C30h case    6:*/		return 0x821A1C34;
		  /* 821A1C34h */ case    7:  		/* lwz R11, <#[R29 + 4]> */
		/* 821A1C34h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821A1C34h case    7:*/		return 0x821A1C38;
		  /* 821A1C38h */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 821A1C38h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A1C38h case    8:*/		return 0x821A1C3C;
		  /* 821A1C3Ch */ case    9:  		/* stw R31, <#[R29 + 4]> */
		/* 821A1C3Ch case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821A1C3Ch case    9:*/		return 0x821A1C40;
		  /* 821A1C40h */ case   10:  		/* lwz R11, <#[R31]> */
		/* 821A1C40h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A1C40h case   10:*/		return 0x821A1C44;
		  /* 821A1C44h */ case   11:  		/* mr R10, R11 */
		/* 821A1C44h case   11:*/		regs.R10 = regs.R11;
		/* 821A1C44h case   11:*/		return 0x821A1C48;
		  /* 821A1C48h */ case   12:  		/* rlwinm R10, R10, 27, 24, 31 */
		/* 821A1C48h case   12:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R10);
		/* 821A1C48h case   12:*/		return 0x821A1C4C;
		  /* 821A1C4Ch */ case   13:  		/* stw R29, <#[R31 + 12]> */
		/* 821A1C4Ch case   13:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A1C4Ch case   13:*/		return 0x821A1C50;
		  /* 821A1C50h */ case   14:  		/* rlwinm R11, R11, 0, 0, 18 */
		/* 821A1C50h case   14:*/		cpu::op::rlwinm<0,0,0,18>(regs,&regs.R11,regs.R11);
		/* 821A1C50h case   14:*/		return 0x821A1C54;
		  /* 821A1C54h */ case   15:  		/* rlwinm R8, R10, 27, 29, 30 */
		/* 821A1C54h case   15:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R8,regs.R10);
		/* 821A1C54h case   15:*/		return 0x821A1C58;
		  /* 821A1C58h */ case   16:  		/* rlwinm R7, R10, 29, 29, 30 */
		/* 821A1C58h case   16:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R7,regs.R10);
		/* 821A1C58h case   16:*/		return 0x821A1C5C;
		  /* 821A1C5Ch */ case   17:  		/* srw R8, R28, R8 */
		/* 821A1C5Ch case   17:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R28,regs.R8);
		/* 821A1C5Ch case   17:*/		return 0x821A1C60;
		  /* 821A1C60h */ case   18:  		/* srw R7, R28, R7 */
		/* 821A1C60h case   18:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R28,regs.R7);
		/* 821A1C60h case   18:*/		return 0x821A1C64;
		  /* 821A1C64h */ case   19:  		/* rlwimi R7, R8, 2, 28, 29 */
		/* 821A1C64h case   19:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R8);
		/* 821A1C64h case   19:*/		return 0x821A1C68;
		  /* 821A1C68h */ case   20:  		/* rlwinm R8, R10, 31, 29, 30 */
		/* 821A1C68h case   20:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R8,regs.R10);
		/* 821A1C68h case   20:*/		return 0x821A1C6C;
		  /* 821A1C6Ch */ case   21:  		/* rlwinm R10, R10, 1, 29, 30 */
		/* 821A1C6Ch case   21:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R10,regs.R10);
		/* 821A1C6Ch case   21:*/		return 0x821A1C70;
		  /* 821A1C70h */ case   22:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821A1C70h case   22:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821A1C70h case   22:*/		return 0x821A1C74;
		  /* 821A1C74h */ case   23:  		/* srw R8, R28, R8 */
		/* 821A1C74h case   23:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R28,regs.R8);
		/* 821A1C74h case   23:*/		return 0x821A1C78;
		  /* 821A1C78h */ case   24:  		/* srw R10, R28, R10 */
		/* 821A1C78h case   24:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R28,regs.R10);
		/* 821A1C78h case   24:*/		return 0x821A1C7C;
		  /* 821A1C7Ch */ case   25:  		/* rlwimi R8, R7, 2, 0, 29 */
		/* 821A1C7Ch case   25:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R7);
		/* 821A1C7Ch case   25:*/		return 0x821A1C80;
		  /* 821A1C80h */ case   26:  		/* rlwimi R10, R8, 2, 0, 29 */
		/* 821A1C80h case   26:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 821A1C80h case   26:*/		return 0x821A1C84;
		  /* 821A1C84h */ case   27:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821A1C84h case   27:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821A1C84h case   27:*/		return 0x821A1C88;
		  /* 821A1C88h */ case   28:  		/* or R11, R10, R11 */
		/* 821A1C88h case   28:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A1C88h case   28:*/		return 0x821A1C8C;
		  /* 821A1C8Ch */ case   29:  		/* or R11, R11, R9 */
		/* 821A1C8Ch case   29:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A1C8Ch case   29:*/		return 0x821A1C90;
		  /* 821A1C90h */ case   30:  		/* stw R11, <#[R31]> */
		/* 821A1C90h case   30:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A1C90h case   30:*/		return 0x821A1C94;
		  /* 821A1C94h */ case   31:  		/* bl -4572 */
		/* 821A1C94h case   31:*/		regs.LR = 0x821A1C98; return 0x821A0AB8;
		/* 821A1C94h case   31:*/		return 0x821A1C98;
	}
	return 0x821A1C98;
} // Block from 821A1C18h-821A1C98h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821A1C98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1C98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1C98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1C98);
		  /* 821A1C98h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821A1C98h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A1C98h case    0:*/		return 0x821A1C9C;
		  /* 821A1C9Ch */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A1C9Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A1C9Ch case    1:*/		return 0x821A1CA0;
		  /* 821A1CA0h */ case    2:  		/* bc 4, CR6_EQ, -552 */
		/* 821A1CA0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A1A78;  }
		/* 821A1CA0h case    2:*/		return 0x821A1CA4;
		  /* 821A1CA4h */ case    3:  		/* addi R25, R31, 8 */
		/* 821A1CA4h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R31,0x8);
		/* 821A1CA4h case    3:*/		return 0x821A1CA8;
		  /* 821A1CA8h */ case    4:  		/* b -560 */
		/* 821A1CA8h case    4:*/		return 0x821A1A78;
		/* 821A1CA8h case    4:*/		return 0x821A1CAC;
	}
	return 0x821A1CAC;
} // Block from 821A1C98h-821A1CACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A1CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1CAC);
		  /* 821A1CACh */ case    0:  		/* mr R3, R27 */
		/* 821A1CACh case    0:*/		regs.R3 = regs.R27;
		/* 821A1CACh case    0:*/		return 0x821A1CB0;
		  /* 821A1CB0h */ case    1:  		/* bl -250672 */
		/* 821A1CB0h case    1:*/		regs.LR = 0x821A1CB4; return 0x82164980;
		/* 821A1CB0h case    1:*/		return 0x821A1CB4;
		  /* 821A1CB4h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A1CB4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A1CB4h case    2:*/		return 0x821A1CB8;
		  /* 821A1CB8h */ case    3:  		/* lwz R5, <#[R26 + 652]> */
		/* 821A1CB8h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000028C) );
		/* 821A1CB8h case    3:*/		return 0x821A1CBC;
		  /* 821A1CBCh */ case    4:  		/* mr R4, R27 */
		/* 821A1CBCh case    4:*/		regs.R4 = regs.R27;
		/* 821A1CBCh case    4:*/		return 0x821A1CC0;
		  /* 821A1CC0h */ case    5:  		/* mr R3, R26 */
		/* 821A1CC0h case    5:*/		regs.R3 = regs.R26;
		/* 821A1CC0h case    5:*/		return 0x821A1CC4;
		  /* 821A1CC4h */ case    6:  		/* bc 12, CR0_EQ, 20 */
		/* 821A1CC4h case    6:*/		if ( regs.CR[0].eq ) { return 0x821A1CD8;  }
		/* 821A1CC4h case    6:*/		return 0x821A1CC8;
		  /* 821A1CC8h */ case    7:  		/* li R6, 1 */
		/* 821A1CC8h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A1CC8h case    7:*/		return 0x821A1CCC;
		  /* 821A1CCCh */ case    8:  		/* bl 562940 */
		/* 821A1CCCh case    8:*/		regs.LR = 0x821A1CD0; return 0x8222B3C8;
		/* 821A1CCCh case    8:*/		return 0x821A1CD0;
		  /* 821A1CD0h */ case    9:  		/* mr R3, R27 */
		/* 821A1CD0h case    9:*/		regs.R3 = regs.R27;
		/* 821A1CD0h case    9:*/		return 0x821A1CD4;
		  /* 821A1CD4h */ case   10:  		/* b 252 */
		/* 821A1CD4h case   10:*/		return 0x821A1DD0;
		/* 821A1CD4h case   10:*/		return 0x821A1CD8;
	}
	return 0x821A1CD8;
} // Block from 821A1CACh-821A1CD8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A1CD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1CD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1CD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1CD8);
		  /* 821A1CD8h */ case    0:  		/* bl 172120 */
		/* 821A1CD8h case    0:*/		regs.LR = 0x821A1CDC; return 0x821CBD30;
		/* 821A1CD8h case    0:*/		return 0x821A1CDC;
		  /* 821A1CDCh */ case    1:  		/* or. R29, R3, R3 */
		/* 821A1CDCh case    1:*/		cpu::op::or<1>(regs,&regs.R29,regs.R3,regs.R3);
		/* 821A1CDCh case    1:*/		return 0x821A1CE0;
		  /* 821A1CE0h */ case    2:  		/* bc 12, CR0_EQ, 236 */
		/* 821A1CE0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A1DCC;  }
		/* 821A1CE0h case    2:*/		return 0x821A1CE4;
		  /* 821A1CE4h */ case    3:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A1CE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A1CE4h case    3:*/		return 0x821A1CE8;
		  /* 821A1CE8h */ case    4:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A1CE8h case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A1CE8h case    4:*/		return 0x821A1CEC;
		  /* 821A1CECh */ case    5:  		/* bc 12, CR0_EQ, 116 */
		/* 821A1CECh case    5:*/		if ( regs.CR[0].eq ) { return 0x821A1D60;  }
		/* 821A1CECh case    5:*/		return 0x821A1CF0;
		  /* 821A1CF0h */ case    6:  		/* lwz R11, <#[R29 + 8]> */
		/* 821A1CF0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A1CF0h case    6:*/		return 0x821A1CF4;
		  /* 821A1CF4h */ case    7:  		/* mr R3, R27 */
		/* 821A1CF4h case    7:*/		regs.R3 = regs.R27;
		/* 821A1CF4h case    7:*/		return 0x821A1CF8;
		  /* 821A1CF8h */ case    8:  		/* oris R11, R11, 128 */
		/* 821A1CF8h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A1CF8h case    8:*/		return 0x821A1CFC;
		  /* 821A1CFCh */ case    9:  		/* stw R11, <#[R29 + 8]> */
		/* 821A1CFCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A1CFCh case    9:*/		return 0x821A1D00;
		  /* 821A1D00h */ case   10:  		/* bl -123928 */
		/* 821A1D00h case   10:*/		regs.LR = 0x821A1D04; return 0x821838E8;
		/* 821A1D00h case   10:*/		return 0x821A1D04;
		  /* 821A1D04h */ case   11:  		/* sth R3, <#[R29 + 18]> */
		/* 821A1D04h case   11:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R29 + 0x00000012) );
		/* 821A1D04h case   11:*/		return 0x821A1D08;
		  /* 821A1D08h */ case   12:  		/* lwz R3, <#[R26 + 660]> */
		/* 821A1D08h case   12:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000294) );
		/* 821A1D08h case   12:*/		return 0x821A1D0C;
		  /* 821A1D0Ch */ case   13:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A1D0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A1D0Ch case   13:*/		return 0x821A1D10;
		  /* 821A1D10h */ case   14:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A1D10h case   14:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A1D10h case   14:*/		return 0x821A1D14;
		  /* 821A1D14h */ case   15:  		/* bc 4, CR0_EQ, 40 */
		/* 821A1D14h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821A1D3C;  }
		/* 821A1D14h case   15:*/		return 0x821A1D18;
		  /* 821A1D18h */ case   16:  		/* lwz R11, <#[R3]> */
		/* 821A1D18h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A1D18h case   16:*/		return 0x821A1D1C;
		  /* 821A1D1Ch */ case   17:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A1D1Ch case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A1D1Ch case   17:*/		return 0x821A1D20;
		  /* 821A1D20h */ case   18:  		/* addic. R11, R11, -4 */
		/* 821A1D20h case   18:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A1D20h case   18:*/		return 0x821A1D24;
		  /* 821A1D24h */ case   19:  		/* bc 12, CR0_EQ, 24 */
		/* 821A1D24h case   19:*/		if ( regs.CR[0].eq ) { return 0x821A1D3C;  }
		/* 821A1D24h case   19:*/		return 0x821A1D28;
		  /* 821A1D28h */ case   20:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A1D28h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1D28h case   20:*/		return 0x821A1D2C;
		  /* 821A1D2Ch */ case   21:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A1D2Ch case   21:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A1D2Ch case   21:*/		return 0x821A1D30;
		  /* 821A1D30h */ case   22:  		/* addi R10, R10, 1 */
		/* 821A1D30h case   22:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A1D30h case   22:*/		return 0x821A1D34;
		  /* 821A1D34h */ case   23:  		/* cmplw CR6, R10, R9 */
		/* 821A1D34h case   23:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A1D34h case   23:*/		return 0x821A1D38;
		  /* 821A1D38h */ case   24:  		/* bc 4, CR6_GT, 16 */
		/* 821A1D38h case   24:*/		if ( !regs.CR[6].gt ) { return 0x821A1D48;  }
		/* 821A1D38h case   24:*/		return 0x821A1D3C;
	}
	return 0x821A1D3C;
} // Block from 821A1CD8h-821A1D3Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821A1D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1D3C);
		  /* 821A1D3Ch */ case    0:  		/* li R4, 1 */
		/* 821A1D3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A1D3Ch case    0:*/		return 0x821A1D40;
		  /* 821A1D40h */ case    1:  		/* bl -85112 */
		/* 821A1D40h case    1:*/		regs.LR = 0x821A1D44; return 0x8218D0C8;
		/* 821A1D40h case    1:*/		return 0x821A1D44;
		  /* 821A1D44h */ case    2:  		/* mr R11, R3 */
		/* 821A1D44h case    2:*/		regs.R11 = regs.R3;
		/* 821A1D44h case    2:*/		return 0x821A1D48;
	}
	return 0x821A1D48;
} // Block from 821A1D3Ch-821A1D48h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A1D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1D48);
		  /* 821A1D48h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A1D48h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1D48h case    0:*/		return 0x821A1D4C;
		  /* 821A1D4Ch */ case    1:  		/* addi R9, R10, 4 */
		/* 821A1D4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A1D4Ch case    1:*/		return 0x821A1D50;
		  /* 821A1D50h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A1D50h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A1D50h case    2:*/		return 0x821A1D54;
		  /* 821A1D54h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A1D54h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A1D54h case    3:*/		return 0x821A1D58;
		  /* 821A1D58h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A1D58h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A1D58h case    4:*/		return 0x821A1D5C;
		  /* 821A1D5Ch */ case    5:  		/* stwx R29, <#[R10 + R11]> */
		/* 821A1D5Ch case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A1D5Ch case    5:*/		return 0x821A1D60;
	}
	return 0x821A1D60;
} // Block from 821A1D48h-821A1D60h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A1D60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1D60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1D60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1D60);
		  /* 821A1D60h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A1D60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A1D60h case    0:*/		return 0x821A1D64;
		  /* 821A1D64h */ case    1:  		/* rlwinm. R31, R11, 13, 29, 31 */
		/* 821A1D64h case    1:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R31,regs.R11);
		/* 821A1D64h case    1:*/		return 0x821A1D68;
		  /* 821A1D68h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 821A1D68h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A1D88;  }
		/* 821A1D68h case    2:*/		return 0x821A1D6C;
		  /* 821A1D6Ch */ case    3:  		/* addi R10, R1, 76 */
		/* 821A1D6Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x4C);
		/* 821A1D6Ch case    3:*/		return 0x821A1D70;
		  /* 821A1D70h */ case    4:  		/* mtspr CTR, R31 */
		/* 821A1D70h case    4:*/		regs.CTR = regs.R31;
		/* 821A1D70h case    4:*/		return 0x821A1D74;
		  /* 821A1D74h */ case    5:  		/* addi R11, R27, 40 */
		/* 821A1D74h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x28);
		/* 821A1D74h case    5:*/		return 0x821A1D78;
		  /* 821A1D78h */ case    6:  		/* lwzu R9, <#[R11 + 4]> */
		/* 821A1D78h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821A1D78h case    6:*/		return 0x821A1D7C;
		  /* 821A1D7Ch */ case    7:  		/* lwz R9, <#[R9 + 12]> */
		/* 821A1D7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A1D7Ch case    7:*/		return 0x821A1D80;
		  /* 821A1D80h */ case    8:  		/* stwu R9, <#[R10 + 4]> */
		/* 821A1D80h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821A1D80h case    8:*/		return 0x821A1D84;
		  /* 821A1D84h */ case    9:  		/* bc 16, CR0_LT, -12 */
		/* 821A1D84h case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A1D78;  }
		/* 821A1D84h case    9:*/		return 0x821A1D88;
	}
	return 0x821A1D88;
} // Block from 821A1D60h-821A1D88h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A1D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1D88);
		  /* 821A1D88h */ case    0:  		/* li R6, 1 */
		/* 821A1D88h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A1D88h case    0:*/		return 0x821A1D8C;
		  /* 821A1D8Ch */ case    1:  		/* lwz R5, <#[R26 + 652]> */
		/* 821A1D8Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000028C) );
		/* 821A1D8Ch case    1:*/		return 0x821A1D90;
		  /* 821A1D90h */ case    2:  		/* mr R4, R27 */
		/* 821A1D90h case    2:*/		regs.R4 = regs.R27;
		/* 821A1D90h case    2:*/		return 0x821A1D94;
		  /* 821A1D94h */ case    3:  		/* mr R3, R26 */
		/* 821A1D94h case    3:*/		regs.R3 = regs.R26;
		/* 821A1D94h case    3:*/		return 0x821A1D98;
		  /* 821A1D98h */ case    4:  		/* bl 562736 */
		/* 821A1D98h case    4:*/		regs.LR = 0x821A1D9C; return 0x8222B3C8;
		/* 821A1D98h case    4:*/		return 0x821A1D9C;
		  /* 821A1D9Ch */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821A1D9Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A1D9Ch case    5:*/		return 0x821A1DA0;
		  /* 821A1DA0h */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821A1DA0h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A1DC4;  }
		/* 821A1DA0h case    6:*/		return 0x821A1DA4;
		  /* 821A1DA4h */ case    7:  		/* addi R11, R1, 80 */
		/* 821A1DA4h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821A1DA4h case    7:*/		return 0x821A1DA8;
		  /* 821A1DA8h */ case    8:  		/* addi R30, R11, -4 */
		/* 821A1DA8h case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R11,0xFFFFFFFC);
		/* 821A1DA8h case    8:*/		return 0x821A1DAC;
		  /* 821A1DACh */ case    9:  		/* mr R3, R26 */
		/* 821A1DACh case    9:*/		regs.R3 = regs.R26;
		/* 821A1DACh case    9:*/		return 0x821A1DB0;
		  /* 821A1DB0h */ case   10:  		/* lwzu R4, <#[R30 + 4]> */
		/* 821A1DB0h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821A1DB0h case   10:*/		return 0x821A1DB4;
		  /* 821A1DB4h */ case   11:  		/* lwz R5, <#[R26 + 660]> */
		/* 821A1DB4h case   11:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x00000294) );
		/* 821A1DB4h case   11:*/		return 0x821A1DB8;
		  /* 821A1DB8h */ case   12:  		/* bl 110672 */
		/* 821A1DB8h case   12:*/		regs.LR = 0x821A1DBC; return 0x821BCE08;
		/* 821A1DB8h case   12:*/		return 0x821A1DBC;
		  /* 821A1DBCh */ case   13:  		/* addic. R31, R31, -1 */
		/* 821A1DBCh case   13:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821A1DBCh case   13:*/		return 0x821A1DC0;
		  /* 821A1DC0h */ case   14:  		/* bc 4, CR0_EQ, -20 */
		/* 821A1DC0h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821A1DAC;  }
		/* 821A1DC0h case   14:*/		return 0x821A1DC4;
	}
	return 0x821A1DC4;
} // Block from 821A1D88h-821A1DC4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A1DC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1DC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1DC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1DC4);
		  /* 821A1DC4h */ case    0:  		/* mr R3, R29 */
		/* 821A1DC4h case    0:*/		regs.R3 = regs.R29;
		/* 821A1DC4h case    0:*/		return 0x821A1DC8;
		  /* 821A1DC8h */ case    1:  		/* b 8 */
		/* 821A1DC8h case    1:*/		return 0x821A1DD0;
		/* 821A1DC8h case    1:*/		return 0x821A1DCC;
	}
	return 0x821A1DCC;
} // Block from 821A1DC4h-821A1DCCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A1DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1DCC);
		  /* 821A1DCCh */ case    0:  		/* li R3, 0 */
		/* 821A1DCCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A1DCCh case    0:*/		return 0x821A1DD0;
	}
	return 0x821A1DD0;
} // Block from 821A1DCCh-821A1DD0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A1DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1DD0);
		  /* 821A1DD0h */ case    0:  		/* addi R1, R1, 160 */
		/* 821A1DD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821A1DD0h case    0:*/		return 0x821A1DD4;
		  /* 821A1DD4h */ case    1:  		/* b -1116984 */
		/* 821A1DD4h case    1:*/		return 0x8209129C;
		/* 821A1DD4h case    1:*/		return 0x821A1DD8;
	}
	return 0x821A1DD8;
} // Block from 821A1DD0h-821A1DD8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A1DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1DD8);
		  /* 821A1DD8h */ case    0:  		/* mfspr R12, LR */
		/* 821A1DD8h case    0:*/		regs.R12 = regs.LR;
		/* 821A1DD8h case    0:*/		return 0x821A1DDC;
		  /* 821A1DDCh */ case    1:  		/* bl -1117108 */
		/* 821A1DDCh case    1:*/		regs.LR = 0x821A1DE0; return 0x82091228;
		/* 821A1DDCh case    1:*/		return 0x821A1DE0;
		  /* 821A1DE0h */ case    2:  		/* stfd FR31, <#[R1 - 144]> */
		/* 821A1DE0h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 821A1DE0h case    2:*/		return 0x821A1DE4;
		  /* 821A1DE4h */ case    3:  		/* stwu R1, <#[R1 - 272]> */
		/* 821A1DE4h case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 821A1DE4h case    3:*/		return 0x821A1DE8;
		  /* 821A1DE8h */ case    4:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A1DE8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A1DE8h case    4:*/		return 0x821A1DEC;
		  /* 821A1DECh */ case    5:  		/* mr R24, R3 */
		/* 821A1DECh case    5:*/		regs.R24 = regs.R3;
		/* 821A1DECh case    5:*/		return 0x821A1DF0;
		  /* 821A1DF0h */ case    6:  		/* mr R23, R4 */
		/* 821A1DF0h case    6:*/		regs.R23 = regs.R4;
		/* 821A1DF0h case    6:*/		return 0x821A1DF4;
		  /* 821A1DF4h */ case    7:  		/* mr R20, R5 */
		/* 821A1DF4h case    7:*/		regs.R20 = regs.R5;
		/* 821A1DF4h case    7:*/		return 0x821A1DF8;
		  /* 821A1DF8h */ case    8:  		/* mr R18, R6 */
		/* 821A1DF8h case    8:*/		regs.R18 = regs.R6;
		/* 821A1DF8h case    8:*/		return 0x821A1DFC;
		  /* 821A1DFCh */ case    9:  		/* mr R25, R7 */
		/* 821A1DFCh case    9:*/		regs.R25 = regs.R7;
		/* 821A1DFCh case    9:*/		return 0x821A1E00;
		  /* 821A1E00h */ case   10:  		/* rlwinm. R11, R11, 25, 25, 31 */
		/* 821A1E00h case   10:*/		cpu::op::rlwinm<1,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A1E00h case   10:*/		return 0x821A1E04;
		  /* 821A1E04h */ case   11:  		/* bc 4, CR0_GT, 1596 */
		/* 821A1E04h case   11:*/		if ( !regs.CR[0].gt ) { return 0x821A2440;  }
		/* 821A1E04h case   11:*/		return 0x821A1E08;
		  /* 821A1E08h */ case   12:  		/* cmpwi CR6, R11, 2 */
		/* 821A1E08h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000002);
		/* 821A1E08h case   12:*/		return 0x821A1E0C;
		  /* 821A1E0Ch */ case   13:  		/* bc 12, CR6_GT, 1588 */
		/* 821A1E0Ch case   13:*/		if ( regs.CR[6].gt ) { return 0x821A2440;  }
		/* 821A1E0Ch case   13:*/		return 0x821A1E10;
		  /* 821A1E10h */ case   14:  		/* lis R10, -32256 */
		/* 821A1E10h case   14:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821A1E10h case   14:*/		return 0x821A1E14;
		  /* 821A1E14h */ case   15:  		/* li R21, 1 */
		/* 821A1E14h case   15:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821A1E14h case   15:*/		return 0x821A1E18;
		  /* 821A1E18h */ case   16:  		/* cmplwi CR6, R11, 2 */
		/* 821A1E18h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821A1E18h case   16:*/		return 0x821A1E1C;
		  /* 821A1E1Ch */ case   17:  		/* mr R17, R21 */
		/* 821A1E1Ch case   17:*/		regs.R17 = regs.R21;
		/* 821A1E1Ch case   17:*/		return 0x821A1E20;
		  /* 821A1E20h */ case   18:  		/* lfs FR31, <#[R10 + 1816]> */
		/* 821A1E20h case   18:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R10 + 0x00000718) );
		/* 821A1E20h case   18:*/		return 0x821A1E24;
		  /* 821A1E24h */ case   19:  		/* bc 4, CR6_EQ, 44 */
		/* 821A1E24h case   19:*/		if ( !regs.CR[6].eq ) { return 0x821A1E50;  }
		/* 821A1E24h case   19:*/		return 0x821A1E28;
		  /* 821A1E28h */ case   20:  		/* lis R11, -32256 */
		/* 821A1E28h case   20:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821A1E28h case   20:*/		return 0x821A1E2C;
		  /* 821A1E2Ch */ case   21:  		/* mr R3, R5 */
		/* 821A1E2Ch case   21:*/		regs.R3 = regs.R5;
		/* 821A1E2Ch case   21:*/		return 0x821A1E30;
		  /* 821A1E30h */ case   22:  		/* lfd FR1, <#[R11 + 1808]> */
		/* 821A1E30h case   22:*/		cpu::mem::load64f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000710) );
		/* 821A1E30h case   22:*/		return 0x821A1E34;
		  /* 821A1E34h */ case   23:  		/* bl -245892 */
		/* 821A1E34h case   23:*/		regs.LR = 0x821A1E38; return 0x82165DB0;
		/* 821A1E34h case   23:*/		return 0x821A1E38;
		  /* 821A1E38h */ case   24:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A1E38h case   24:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A1E38h case   24:*/		return 0x821A1E3C;
		  /* 821A1E3Ch */ case   25:  		/* bc 12, CR0_EQ, 12 */
		/* 821A1E3Ch case   25:*/		if ( regs.CR[0].eq ) { return 0x821A1E48;  }
		/* 821A1E3Ch case   25:*/		return 0x821A1E40;
		  /* 821A1E40h */ case   26:  		/* li R17, 0 */
		/* 821A1E40h case   26:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 821A1E40h case   26:*/		return 0x821A1E44;
		  /* 821A1E44h */ case   27:  		/* b 12 */
		/* 821A1E44h case   27:*/		return 0x821A1E50;
		/* 821A1E44h case   27:*/		return 0x821A1E48;
	}
	return 0x821A1E48;
} // Block from 821A1DD8h-821A1E48h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821A1E48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1E48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1E48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1E48);
		  /* 821A1E48h */ case    0:  		/* lis R11, -32256 */
		/* 821A1E48h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821A1E48h case    0:*/		return 0x821A1E4C;
		  /* 821A1E4Ch */ case    1:  		/* lfs FR31, <#[R11 + 1792]> */
		/* 821A1E4Ch case    1:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000700) );
		/* 821A1E4Ch case    1:*/		return 0x821A1E50;
	}
	return 0x821A1E50;
} // Block from 821A1E48h-821A1E50h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A1E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1E50);
		  /* 821A1E50h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821A1E50h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A1E50h case    0:*/		return 0x821A1E54;
		  /* 821A1E54h */ case    1:  		/* addi R5, R1, 80 */
		/* 821A1E54h case    1:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821A1E54h case    1:*/		return 0x821A1E58;
		  /* 821A1E58h */ case    2:  		/* addi R4, R1, 96 */
		/* 821A1E58h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821A1E58h case    2:*/		return 0x821A1E5C;
		  /* 821A1E5Ch */ case    3:  		/* rlwinm R11, R11, 12, 31, 31 */
		/* 821A1E5Ch case    3:*/		cpu::op::rlwinm<0,12,31,31>(regs,&regs.R11,regs.R11);
		/* 821A1E5Ch case    3:*/		return 0x821A1E60;
		  /* 821A1E60h */ case    4:  		/* subfic R10, R11, 12 */
		/* 821A1E60h case    4:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R11,0xC);
		/* 821A1E60h case    4:*/		return 0x821A1E64;
		  /* 821A1E64h */ case    5:  		/* addi R11, R11, 11 */
		/* 821A1E64h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821A1E64h case    5:*/		return 0x821A1E68;
		  /* 821A1E68h */ case    6:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821A1E68h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821A1E68h case    6:*/		return 0x821A1E6C;
		  /* 821A1E6Ch */ case    7:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A1E6Ch case    7:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A1E6Ch case    7:*/		return 0x821A1E70;
		  /* 821A1E70h */ case    8:  		/* lwzx R29, <#[R10 + R23]> */
		/* 821A1E70h case    8:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R10 + regs.R23 + 0x00000000) );
		/* 821A1E70h case    8:*/		return 0x821A1E74;
		  /* 821A1E74h */ case    9:  		/* lwzx R27, <#[R11 + R23]> */
		/* 821A1E74h case    9:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 821A1E74h case    9:*/		return 0x821A1E78;
		  /* 821A1E78h */ case   10:  		/* lwz R28, <#[R29 + 12]> */
		/* 821A1E78h case   10:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A1E78h case   10:*/		return 0x821A1E7C;
		  /* 821A1E7Ch */ case   11:  		/* mr R3, R28 */
		/* 821A1E7Ch case   11:*/		regs.R3 = regs.R28;
		/* 821A1E7Ch case   11:*/		return 0x821A1E80;
		  /* 821A1E80h */ case   12:  		/* bl 546240 */
		/* 821A1E80h case   12:*/		regs.LR = 0x821A1E84; return 0x82227440;
		/* 821A1E80h case   12:*/		return 0x821A1E84;
		  /* 821A1E84h */ case   13:  		/* or. R19, R3, R3 */
		/* 821A1E84h case   13:*/		cpu::op::or<1>(regs,&regs.R19,regs.R3,regs.R3);
		/* 821A1E84h case   13:*/		return 0x821A1E88;
		  /* 821A1E88h */ case   14:  		/* li R4, 0 */
		/* 821A1E88h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A1E88h case   14:*/		return 0x821A1E8C;
		  /* 821A1E8Ch */ case   15:  		/* bc 12, CR0_EQ, 116 */
		/* 821A1E8Ch case   15:*/		if ( regs.CR[0].eq ) { return 0x821A1F00;  }
		/* 821A1E8Ch case   15:*/		return 0x821A1E90;
		  /* 821A1E90h */ case   16:  		/* lwz R6, <#[R27]> */
		/* 821A1E90h case   16:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000000) );
		/* 821A1E90h case   16:*/		return 0x821A1E94;
		  /* 821A1E94h */ case   17:  		/* li R7, 0 */
		/* 821A1E94h case   17:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A1E94h case   17:*/		return 0x821A1E98;
		  /* 821A1E98h */ case   18:  		/* rlwinm. R11, R6, 0, 4, 6 */
		/* 821A1E98h case   18:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R6);
		/* 821A1E98h case   18:*/		return 0x821A1E9C;
		  /* 821A1E9Ch */ case   19:  		/* bc 12, CR0_EQ, 100 */
		/* 821A1E9Ch case   19:*/		if ( regs.CR[0].eq ) { return 0x821A1F00;  }
		/* 821A1E9Ch case   19:*/		return 0x821A1EA0;
		  /* 821A1EA0h */ case   20:  		/* lwz R10, <#[R29]> */
		/* 821A1EA0h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821A1EA0h case   20:*/		return 0x821A1EA4;
		  /* 821A1EA4h */ case   21:  		/* rlwinm R8, R6, 0, 0, 31 */
		/* 821A1EA4h case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R6);
		/* 821A1EA4h case   21:*/		return 0x821A1EA8;
		  /* 821A1EA8h */ case   22:  		/* li R11, 0 */
		/* 821A1EA8h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A1EA8h case   22:*/		return 0x821A1EAC;
		  /* 821A1EACh */ case   23:  		/* rlwinm R9, R10, 27, 24, 31 */
		/* 821A1EACh case   23:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R10);
		/* 821A1EACh case   23:*/		return 0x821A1EB0;
		  /* 821A1EB0h */ case   24:  		/* rlwinm R8, R8, 7, 29, 31 */
		/* 821A1EB0h case   24:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R8,regs.R8);
		/* 821A1EB0h case   24:*/		return 0x821A1EB4;
		  /* 821A1EB4h */ case   25:  		/* srw R10, R9, R11 */
		/* 821A1EB4h case   25:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 821A1EB4h case   25:*/		return 0x821A1EB8;
		  /* 821A1EB8h */ case   26:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821A1EB8h case   26:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821A1EB8h case   26:*/		return 0x821A1EBC;
		  /* 821A1EBCh */ case   27:  		/* slw R5, R21, R10 */
		/* 821A1EBCh case   27:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R21,regs.R10);
		/* 821A1EBCh case   27:*/		return 0x821A1EC0;
		  /* 821A1EC0h */ case   28:  		/* and. R5, R5, R19 */
		/* 821A1EC0h case   28:*/		cpu::op::and<1>(regs,&regs.R5,regs.R5,regs.R19);
		/* 821A1EC0h case   28:*/		return 0x821A1EC4;
		  /* 821A1EC4h */ case   29:  		/* bc 12, CR0_EQ, 44 */
		/* 821A1EC4h case   29:*/		if ( regs.CR[0].eq ) { return 0x821A1EF0;  }
		/* 821A1EC4h case   29:*/		return 0x821A1EC8;
		  /* 821A1EC8h */ case   30:  		/* rlwinm R10, R10, 3, 0, 28 */
		/* 821A1EC8h case   30:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R10);
		/* 821A1EC8h case   30:*/		return 0x821A1ECC;
		  /* 821A1ECCh */ case   31:  		/* addi R5, R1, 96 */
		/* 821A1ECCh case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821A1ECCh case   31:*/		return 0x821A1ED0;
		  /* 821A1ED0h */ case   32:  		/* lfdx FR0, <#[R10 + R5]> */
		/* 821A1ED0h case   32:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R10 + regs.R5 + 0x00000000) );
		/* 821A1ED0h case   32:*/		return 0x821A1ED4;
		  /* 821A1ED4h */ case   33:  		/* fcmpu CR6, FR31, FR0 */
		/* 821A1ED4h case   33:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 821A1ED4h case   33:*/		return 0x821A1ED8;
		  /* 821A1ED8h */ case   34:  		/* bc 4, CR6_EQ, 24 */
		/* 821A1ED8h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821A1EF0;  }
		/* 821A1ED8h case   34:*/		return 0x821A1EDC;
		  /* 821A1EDCh */ case   35:  		/* rlwinm R10, R6, 27, 24, 31 */
		/* 821A1EDCh case   35:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R6);
		/* 821A1EDCh case   35:*/		return 0x821A1EE0;
		  /* 821A1EE0h */ case   36:  		/* srw R10, R10, R11 */
		/* 821A1EE0h case   36:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A1EE0h case   36:*/		return 0x821A1EE4;
		  /* 821A1EE4h */ case   37:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821A1EE4h case   37:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821A1EE4h case   37:*/		return 0x821A1EE8;
		  /* 821A1EE8h */ case   38:  		/* slw R10, R21, R10 */
		/* 821A1EE8h case   38:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R21,regs.R10);
		/* 821A1EE8h case   38:*/		return 0x821A1EEC;
		  /* 821A1EECh */ case   39:  		/* or R4, R10, R4 */
		/* 821A1EECh case   39:*/		cpu::op::or<0>(regs,&regs.R4,regs.R10,regs.R4);
		/* 821A1EECh case   39:*/		return 0x821A1EF0;
	}
	return 0x821A1EF0;
} // Block from 821A1E50h-821A1EF0h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821A1EF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1EF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1EF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1EF0);
		  /* 821A1EF0h */ case    0:  		/* addi R7, R7, 1 */
		/* 821A1EF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821A1EF0h case    0:*/		return 0x821A1EF4;
		  /* 821A1EF4h */ case    1:  		/* addi R11, R11, 2 */
		/* 821A1EF4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A1EF4h case    1:*/		return 0x821A1EF8;
		  /* 821A1EF8h */ case    2:  		/* cmplw CR6, R7, R8 */
		/* 821A1EF8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R8);
		/* 821A1EF8h case    2:*/		return 0x821A1EFC;
		  /* 821A1EFCh */ case    3:  		/* bc 12, CR6_LT, -72 */
		/* 821A1EFCh case    3:*/		if ( regs.CR[6].lt ) { return 0x821A1EB4;  }
		/* 821A1EFCh case    3:*/		return 0x821A1F00;
	}
	return 0x821A1F00;
} // Block from 821A1EF0h-821A1F00h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A1F00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1F00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1F00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1F00);
		  /* 821A1F00h */ case    0:  		/* lwz R5, <#[R27]> */
		/* 821A1F00h case    0:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000000) );
		/* 821A1F00h case    0:*/		return 0x821A1F04;
		  /* 821A1F04h */ case    1:  		/* li R22, 3 */
		/* 821A1F04h case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x3);
		/* 821A1F04h case    1:*/		return 0x821A1F08;
		  /* 821A1F08h */ case    2:  		/* lwz R11, <#[R27 + 12]> */
		/* 821A1F08h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000000C) );
		/* 821A1F08h case    2:*/		return 0x821A1F0C;
		  /* 821A1F0Ch */ case    3:  		/* lwz R10, <#[R20 + 12]> */
		/* 821A1F0Ch case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x0000000C) );
		/* 821A1F0Ch case    3:*/		return 0x821A1F10;
		  /* 821A1F10h */ case    4:  		/* rlwinm R30, R5, 7, 29, 31 */
		/* 821A1F10h case    4:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R30,regs.R5);
		/* 821A1F10h case    4:*/		return 0x821A1F14;
		  /* 821A1F14h */ case    5:  		/* rlwinm R6, R5, 27, 24, 31 */
		/* 821A1F14h case    5:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R5);
		/* 821A1F14h case    5:*/		return 0x821A1F18;
		  /* 821A1F18h */ case    6:  		/* cmpw CR6, R11, R10 */
		/* 821A1F18h case    6:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821A1F18h case    6:*/		return 0x821A1F1C;
		  /* 821A1F1Ch */ case    7:  		/* bc 4, CR6_EQ, 172 */
		/* 821A1F1Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821A1FC8;  }
		/* 821A1F1Ch case    7:*/		return 0x821A1F20;
		  /* 821A1F20h */ case    8:  		/* lwz R8, <#[R20]> */
		/* 821A1F20h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000000) );
		/* 821A1F20h case    8:*/		return 0x821A1F24;
		  /* 821A1F24h */ case    9:  		/* li R11, 0 */
		/* 821A1F24h case    9:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A1F24h case    9:*/		return 0x821A1F28;
		  /* 821A1F28h */ case   10:  		/* li R10, 0 */
		/* 821A1F28h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A1F28h case   10:*/		return 0x821A1F2C;
		  /* 821A1F2Ch */ case   11:  		/* rlwinm. R7, R8, 7, 29, 31 */
		/* 821A1F2Ch case   11:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R7,regs.R8);
		/* 821A1F2Ch case   11:*/		return 0x821A1F30;
		  /* 821A1F30h */ case   12:  		/* bc 12, CR0_EQ, 44 */
		/* 821A1F30h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A1F5C;  }
		/* 821A1F30h case   12:*/		return 0x821A1F34;
		  /* 821A1F34h */ case   13:  		/* li R9, 0 */
		/* 821A1F34h case   13:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A1F34h case   13:*/		return 0x821A1F38;
		  /* 821A1F38h */ case   14:  		/* rlwinm R3, R8, 27, 24, 31 */
		/* 821A1F38h case   14:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R3,regs.R8);
		/* 821A1F38h case   14:*/		return 0x821A1F3C;
		  /* 821A1F3Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 821A1F3Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A1F3Ch case   15:*/		return 0x821A1F40;
		  /* 821A1F40h */ case   16:  		/* srw R3, R3, R9 */
		/* 821A1F40h case   16:*/		cpu::op::srw<0>(regs,&regs.R3,regs.R3,regs.R9);
		/* 821A1F40h case   16:*/		return 0x821A1F44;
		  /* 821A1F44h */ case   17:  		/* rlwinm R3, R3, 0, 30, 31 */
		/* 821A1F44h case   17:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R3,regs.R3);
		/* 821A1F44h case   17:*/		return 0x821A1F48;
		  /* 821A1F48h */ case   18:  		/* addi R9, R9, 2 */
		/* 821A1F48h case   18:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x2);
		/* 821A1F48h case   18:*/		return 0x821A1F4C;
		  /* 821A1F4Ch */ case   19:  		/* slw R3, R21, R3 */
		/* 821A1F4Ch case   19:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R21,regs.R3);
		/* 821A1F4Ch case   19:*/		return 0x821A1F50;
		  /* 821A1F50h */ case   20:  		/* or R11, R3, R11 */
		/* 821A1F50h case   20:*/		cpu::op::or<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821A1F50h case   20:*/		return 0x821A1F54;
		  /* 821A1F54h */ case   21:  		/* cmplw CR6, R10, R7 */
		/* 821A1F54h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821A1F54h case   21:*/		return 0x821A1F58;
		  /* 821A1F58h */ case   22:  		/* bc 12, CR6_LT, -32 */
		/* 821A1F58h case   22:*/		if ( regs.CR[6].lt ) { return 0x821A1F38;  }
		/* 821A1F58h case   22:*/		return 0x821A1F5C;
	}
	return 0x821A1F5C;
} // Block from 821A1F00h-821A1F5Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A1F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1F5C);
		  /* 821A1F5Ch */ case    0:  		/* lis R10, -28311 */
		/* 821A1F5Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF9169);
		/* 821A1F5Ch case    0:*/		return 0x821A1F60;
		  /* 821A1F60h */ case    1:  		/* lis R9, 0 */
		/* 821A1F60h case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x0);
		/* 821A1F60h case    1:*/		return 0x821A1F64;
		  /* 821A1F64h */ case    2:  		/* ori R10, R10, 5192 */
		/* 821A1F64h case    2:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1448);
		/* 821A1F64h case    2:*/		return 0x821A1F68;
		  /* 821A1F68h */ case    3:  		/* ori R9, R9, 36262 */
		/* 821A1F68h case    3:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x8DA6);
		/* 821A1F68h case    3:*/		return 0x821A1F6C;
		  /* 821A1F6Ch */ case    4:  		/* andc R11, R11, R4 */
		/* 821A1F6Ch case    4:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R11,regs.R4);
		/* 821A1F6Ch case    4:*/		return 0x821A1F70;
		  /* 821A1F70h */ case    5:  		/* rldimi R10, R9, 32, 0 */
		/* 821A1F70h case    5:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R10,regs.R9);
		/* 821A1F70h case    5:*/		return 0x821A1F74;
		  /* 821A1F74h */ case    6:  		/* rldicl R9, R11, 0, 32 */
		/* 821A1F74h case    6:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R11);
		/* 821A1F74h case    6:*/		return 0x821A1F78;
		  /* 821A1F78h */ case    7:  		/* srd R10, R10, R9 */
		/* 821A1F78h case    7:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821A1F78h case    7:*/		return 0x821A1F7C;
		  /* 821A1F7Ch */ case    8:  		/* srd R10, R10, R9 */
		/* 821A1F7Ch case    8:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821A1F7Ch case    8:*/		return 0x821A1F80;
		  /* 821A1F80h */ case    9:  		/* srd R10, R10, R9 */
		/* 821A1F80h case    9:*/		cpu::op::srd<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821A1F80h case    9:*/		return 0x821A1F84;
		  /* 821A1F84h */ case   10:  		/* rlwinm R31, R10, 0, 29, 31 */
		/* 821A1F84h case   10:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R31,regs.R10);
		/* 821A1F84h case   10:*/		return 0x821A1F88;
		  /* 821A1F88h */ case   11:  		/* rlwinm R10, R30, 1, 0, 30 */
		/* 821A1F88h case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R30);
		/* 821A1F88h case   11:*/		return 0x821A1F8C;
		  /* 821A1F8Ch */ case   12:  		/* cmplwi CR6, R11, 0 */
		/* 821A1F8Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A1F8Ch case   12:*/		return 0x821A1F90;
		  /* 821A1F90h */ case   13:  		/* bc 12, CR6_EQ, 104 */
		/* 821A1F90h case   13:*/		if ( regs.CR[6].eq ) { return 0x821A1FF8;  }
		/* 821A1F90h case   13:*/		return 0x821A1F94;
		  /* 821A1F94h */ case   14:  		/* addi R9, R11, -1 */
		/* 821A1F94h case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821A1F94h case   14:*/		return 0x821A1F98;
		  /* 821A1F98h */ case   15:  		/* slw R8, R22, R10 */
		/* 821A1F98h case   15:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R22,regs.R10);
		/* 821A1F98h case   15:*/		return 0x821A1F9C;
		  /* 821A1F9Ch */ case   16:  		/* andc R9, R11, R9 */
		/* 821A1F9Ch case   16:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821A1F9Ch case   16:*/		return 0x821A1FA0;
		  /* 821A1FA0h */ case   17:  		/* addi R7, R11, -1 */
		/* 821A1FA0h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0xFFFFFFFF);
		/* 821A1FA0h case   17:*/		return 0x821A1FA4;
		  /* 821A1FA4h */ case   18:  		/* cntlzw R9, R9 */
		/* 821A1FA4h case   18:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 821A1FA4h case   18:*/		return 0x821A1FA8;
		  /* 821A1FA8h */ case   19:  		/* andc R8, R6, R8 */
		/* 821A1FA8h case   19:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 821A1FA8h case   19:*/		return 0x821A1FAC;
		  /* 821A1FACh */ case   20:  		/* subfic R9, R9, 31 */
		/* 821A1FACh case   20:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x1F);
		/* 821A1FACh case   20:*/		return 0x821A1FB0;
		  /* 821A1FB0h */ case   21:  		/* andc R7, R11, R7 */
		/* 821A1FB0h case   21:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821A1FB0h case   21:*/		return 0x821A1FB4;
		  /* 821A1FB4h */ case   22:  		/* slw R9, R9, R10 */
		/* 821A1FB4h case   22:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 821A1FB4h case   22:*/		return 0x821A1FB8;
		  /* 821A1FB8h */ case   23:  		/* or R6, R8, R9 */
		/* 821A1FB8h case   23:*/		cpu::op::or<0>(regs,&regs.R6,regs.R8,regs.R9);
		/* 821A1FB8h case   23:*/		return 0x821A1FBC;
		  /* 821A1FBCh */ case   24:  		/* addi R10, R10, 2 */
		/* 821A1FBCh case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821A1FBCh case   24:*/		return 0x821A1FC0;
		  /* 821A1FC0h */ case   25:  		/* subf R11, R7, R11 */
		/* 821A1FC0h case   25:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R7,regs.R11);
		/* 821A1FC0h case   25:*/		return 0x821A1FC4;
		  /* 821A1FC4h */ case   26:  		/* b -56 */
		/* 821A1FC4h case   26:*/		return 0x821A1F8C;
		/* 821A1FC4h case   26:*/		return 0x821A1FC8;
	}
	return 0x821A1FC8;
} // Block from 821A1F5Ch-821A1FC8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A1FC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1FC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1FC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1FC8);
		  /* 821A1FC8h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 821A1FC8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A1FC8h case    0:*/		return 0x821A1FCC;
		  /* 821A1FCCh */ case    1:  		/* rlwinm. R31, R11, 7, 29, 31 */
		/* 821A1FCCh case    1:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R31,regs.R11);
		/* 821A1FCCh case    1:*/		return 0x821A1FD0;
		  /* 821A1FD0h */ case    2:  		/* bc 12, CR0_EQ, 40 */
		/* 821A1FD0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A1FF8;  }
		/* 821A1FD0h case    2:*/		return 0x821A1FD4;
		  /* 821A1FD4h */ case    3:  		/* rlwinm R11, R30, 1, 0, 30 */
		/* 821A1FD4h case    3:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R30);
		/* 821A1FD4h case    3:*/		return 0x821A1FD8;
		  /* 821A1FD8h */ case    4:  		/* mtspr CTR, R31 */
		/* 821A1FD8h case    4:*/		regs.CTR = regs.R31;
		/* 821A1FD8h case    4:*/		return 0x821A1FDC;
		  /* 821A1FDCh */ case    5:  		/* rlwinm R10, R6, 0, 30, 31 */
		/* 821A1FDCh case    5:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R6);
		/* 821A1FDCh case    5:*/		return 0x821A1FE0;
		  /* 821A1FE0h */ case    6:  		/* slw R9, R22, R11 */
		/* 821A1FE0h case    6:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R22,regs.R11);
		/* 821A1FE0h case    6:*/		return 0x821A1FE4;
		  /* 821A1FE4h */ case    7:  		/* slw R10, R10, R11 */
		/* 821A1FE4h case    7:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A1FE4h case    7:*/		return 0x821A1FE8;
		  /* 821A1FE8h */ case    8:  		/* andc R9, R6, R9 */
		/* 821A1FE8h case    8:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821A1FE8h case    8:*/		return 0x821A1FEC;
		  /* 821A1FECh */ case    9:  		/* addi R11, R11, 2 */
		/* 821A1FECh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A1FECh case    9:*/		return 0x821A1FF0;
		  /* 821A1FF0h */ case   10:  		/* or R6, R9, R10 */
		/* 821A1FF0h case   10:*/		cpu::op::or<0>(regs,&regs.R6,regs.R9,regs.R10);
		/* 821A1FF0h case   10:*/		return 0x821A1FF4;
		  /* 821A1FF4h */ case   11:  		/* bc 16, CR0_LT, -24 */
		/* 821A1FF4h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A1FDC;  }
		/* 821A1FF4h case   11:*/		return 0x821A1FF8;
	}
	return 0x821A1FF8;
} // Block from 821A1FC8h-821A1FF8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A1FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A1FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A1FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A1FF8);
		  /* 821A1FF8h */ case    0:  		/* rlwimi R5, R6, 5, 19, 26 */
		/* 821A1FF8h case    0:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R5,regs.R6);
		/* 821A1FF8h case    0:*/		return 0x821A1FFC;
		  /* 821A1FFCh */ case    1:  		/* fmr FR1, FR31 */
		/* 821A1FFCh case    1:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821A1FFCh case    1:*/		return 0x821A2000;
		  /* 821A2000h */ case    2:  		/* mr R4, R28 */
		/* 821A2000h case    2:*/		regs.R4 = regs.R28;
		/* 821A2000h case    2:*/		return 0x821A2004;
		  /* 821A2004h */ case    3:  		/* stw R5, <#[R27]> */
		/* 821A2004h case    3:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R27 + 0x00000000) );
		/* 821A2004h case    3:*/		return 0x821A2008;
		  /* 821A2008h */ case    4:  		/* li R7, 0 */
		/* 821A2008h case    4:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A2008h case    4:*/		return 0x821A200C;
		  /* 821A200Ch */ case    5:  		/* li R6, 0 */
		/* 821A200Ch case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A200Ch case    5:*/		return 0x821A2010;
		  /* 821A2010h */ case    6:  		/* mr R3, R24 */
		/* 821A2010h case    6:*/		regs.R3 = regs.R24;
		/* 821A2010h case    6:*/		return 0x821A2014;
		  /* 821A2014h */ case    7:  		/* add R28, R31, R30 */
		/* 821A2014h case    7:*/		cpu::op::add<0>(regs,&regs.R28,regs.R31,regs.R30);
		/* 821A2014h case    7:*/		return 0x821A2018;
		  /* 821A2018h */ case    8:  		/* li R26, 0 */
		/* 821A2018h case    8:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821A2018h case    8:*/		return 0x821A201C;
		  /* 821A201Ch */ case    9:  		/* bl 567284 */
		/* 821A201Ch case    9:*/		regs.LR = 0x821A2020; return 0x8222C810;
		/* 821A201Ch case    9:*/		return 0x821A2020;
		  /* 821A2020h */ case   10:  		/* cmpwi CR6, R3, 4 */
		/* 821A2020h case   10:*/		cpu::op::cmpwi<6>(regs,regs.R3,0x00000004);
		/* 821A2020h case   10:*/		return 0x821A2024;
		  /* 821A2024h */ case   11:  		/* bc 4, CR6_EQ, 200 */
		/* 821A2024h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821A20EC;  }
		/* 821A2024h case   11:*/		return 0x821A2028;
		  /* 821A2028h */ case   12:  		/* addi R4, R1, 96 */
		/* 821A2028h case   12:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x60);
		/* 821A2028h case   12:*/		return 0x821A202C;
		  /* 821A202Ch */ case   13:  		/* mr R3, R29 */
		/* 821A202Ch case   13:*/		regs.R3 = regs.R29;
		/* 821A202Ch case   13:*/		return 0x821A2030;
		  /* 821A2030h */ case   14:  		/* bl -12456 */
		/* 821A2030h case   14:*/		regs.LR = 0x821A2034; return 0x8219EF88;
		/* 821A2030h case   14:*/		return 0x821A2034;
		  /* 821A2034h */ case   15:  		/* rlwinm R11, R30, 3, 0, 28 */
		/* 821A2034h case   15:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R30);
		/* 821A2034h case   15:*/		return 0x821A2038;
		  /* 821A2038h */ case   16:  		/* addi R10, R1, 96 */
		/* 821A2038h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 821A2038h case   16:*/		return 0x821A203C;
		  /* 821A203Ch */ case   17:  		/* addi R4, R30, 1 */
		/* 821A203Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R30,0x1);
		/* 821A203Ch case   17:*/		return 0x821A2040;
		  /* 821A2040h */ case   18:  		/* mr R3, R24 */
		/* 821A2040h case   18:*/		regs.R3 = regs.R24;
		/* 821A2040h case   18:*/		return 0x821A2044;
		  /* 821A2044h */ case   19:  		/* stfdx FR31, <#[R11 + R10]> */
		/* 821A2044h case   19:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821A2044h case   19:*/		return 0x821A2048;
		  /* 821A2048h */ case   20:  		/* slw R11, R21, R4 */
		/* 821A2048h case   20:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R4);
		/* 821A2048h case   20:*/		return 0x821A204C;
		  /* 821A204Ch */ case   21:  		/* addi R19, R11, -1 */
		/* 821A204Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R11,0xFFFFFFFF);
		/* 821A204Ch case   21:*/		return 0x821A2050;
		  /* 821A2050h */ case   22:  		/* lfd FR0, <#[R1 + 120]> */
		/* 821A2050h case   22:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000078) );
		/* 821A2050h case   22:*/		return 0x821A2054;
		  /* 821A2054h */ case   23:  		/* lfd FR13, <#[R1 + 112]> */
		/* 821A2054h case   23:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000070) );
		/* 821A2054h case   23:*/		return 0x821A2058;
		  /* 821A2058h */ case   24:  		/* frsp FR4, FR0 */
		/* 821A2058h case   24:*/		cpu::op::frsp<0>(regs,&regs.FR4,regs.FR0);
		/* 821A2058h case   24:*/		return 0x821A205C;
		  /* 821A205Ch */ case   25:  		/* frsp FR3, FR13 */
		/* 821A205Ch case   25:*/		cpu::op::frsp<0>(regs,&regs.FR3,regs.FR13);
		/* 821A205Ch case   25:*/		return 0x821A2060;
		  /* 821A2060h */ case   26:  		/* lfd FR0, <#[R1 + 104]> */
		/* 821A2060h case   26:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R1 + 0x00000068) );
		/* 821A2060h case   26:*/		return 0x821A2064;
		  /* 821A2064h */ case   27:  		/* lfd FR13, <#[R1 + 96]> */
		/* 821A2064h case   27:*/		cpu::mem::load64f( regs, &regs.FR13, (uint32)(regs.R1 + 0x00000060) );
		/* 821A2064h case   27:*/		return 0x821A2068;
		  /* 821A2068h */ case   28:  		/* frsp FR2, FR0 */
		/* 821A2068h case   28:*/		cpu::op::frsp<0>(regs,&regs.FR2,regs.FR0);
		/* 821A2068h case   28:*/		return 0x821A206C;
		  /* 821A206Ch */ case   29:  		/* frsp FR1, FR13 */
		/* 821A206Ch case   29:*/		cpu::op::frsp<0>(regs,&regs.FR1,regs.FR13);
		/* 821A206Ch case   29:*/		return 0x821A2070;
		  /* 821A2070h */ case   30:  		/* bl 559848 */
		/* 821A2070h case   30:*/		regs.LR = 0x821A2074; return 0x8222AB58;
		/* 821A2070h case   30:*/		return 0x821A2074;
		  /* 821A2074h */ case   31:  		/* mr R26, R3 */
		/* 821A2074h case   31:*/		regs.R26 = regs.R3;
		/* 821A2074h case   31:*/		return 0x821A2078;
		  /* 821A2078h */ case   32:  		/* li R9, 228 */
		/* 821A2078h case   32:*/		cpu::op::li<0>(regs,&regs.R9,0xE4);
		/* 821A2078h case   32:*/		return 0x821A207C;
		  /* 821A207Ch */ case   33:  		/* cmplwi CR6, R31, 0 */
		/* 821A207Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A207Ch case   33:*/		return 0x821A2080;
		  /* 821A2080h */ case   34:  		/* bc 12, CR6_EQ, 36 */
		/* 821A2080h case   34:*/		if ( regs.CR[6].eq ) { return 0x821A20A4;  }
		/* 821A2080h case   34:*/		return 0x821A2084;
		  /* 821A2084h */ case   35:  		/* rlwinm R11, R30, 1, 0, 30 */
		/* 821A2084h case   35:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R30);
		/* 821A2084h case   35:*/		return 0x821A2088;
		  /* 821A2088h */ case   36:  		/* mtspr CTR, R31 */
		/* 821A2088h case   36:*/		regs.CTR = regs.R31;
		/* 821A2088h case   36:*/		return 0x821A208C;
		  /* 821A208Ch */ case   37:  		/* slw R10, R22, R11 */
		/* 821A208Ch case   37:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R22,regs.R11);
		/* 821A208Ch case   37:*/		return 0x821A2090;
		  /* 821A2090h */ case   38:  		/* slw R8, R30, R11 */
		/* 821A2090h case   38:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R30,regs.R11);
		/* 821A2090h case   38:*/		return 0x821A2094;
		  /* 821A2094h */ case   39:  		/* andc R10, R9, R10 */
		/* 821A2094h case   39:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A2094h case   39:*/		return 0x821A2098;
		  /* 821A2098h */ case   40:  		/* addi R11, R11, 2 */
		/* 821A2098h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A2098h case   40:*/		return 0x821A209C;
		  /* 821A209Ch */ case   41:  		/* or R9, R10, R8 */
		/* 821A209Ch case   41:*/		cpu::op::or<0>(regs,&regs.R9,regs.R10,regs.R8);
		/* 821A209Ch case   41:*/		return 0x821A20A0;
		  /* 821A20A0h */ case   42:  		/* bc 16, CR0_LT, -20 */
		/* 821A20A0h case   42:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A208C;  }
		/* 821A20A0h case   42:*/		return 0x821A20A4;
	}
	return 0x821A20A4;
} // Block from 821A1FF8h-821A20A4h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821A20A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A20A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A20A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A20A4);
		  /* 821A20A4h */ case    0:  		/* lwz R11, <#[R29 + 12]> */
		/* 821A20A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A20A4h case    0:*/		return 0x821A20A8;
		  /* 821A20A8h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A20A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A20A8h case    1:*/		return 0x821A20AC;
		  /* 821A20ACh */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A20ACh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A20ACh case    2:*/		return 0x821A20B0;
		  /* 821A20B0h */ case    3:  		/* b 12 */
		/* 821A20B0h case    3:*/		return 0x821A20BC;
		/* 821A20B0h case    3:*/		return 0x821A20B4;
		  /* 821A20B4h */ case    4:  		/* addi R11, R10, 8 */
		/* 821A20B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A20B4h case    4:*/		return 0x821A20B8;
		  /* 821A20B8h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A20B8h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A20B8h case    5:*/		return 0x821A20BC;
	}
	return 0x821A20BC;
} // Block from 821A20A4h-821A20BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A20BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A20BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A20BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A20BC);
		  /* 821A20BCh */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821A20BCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821A20BCh case    0:*/		return 0x821A20C0;
		  /* 821A20C0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A20C0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A20B4;  }
		/* 821A20C0h case    1:*/		return 0x821A20C4;
		  /* 821A20C4h */ case    2:  		/* lwz R10, <#[R29 + 8]> */
		/* 821A20C4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821A20C4h case    2:*/		return 0x821A20C8;
		  /* 821A20C8h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A20C8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A20C8h case    3:*/		return 0x821A20CC;
		  /* 821A20CCh */ case    4:  		/* lwz R11, <#[R26 + 4]> */
		/* 821A20CCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821A20CCh case    4:*/		return 0x821A20D0;
		  /* 821A20D0h */ case    5:  		/* stw R11, <#[R29 + 8]> */
		/* 821A20D0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A20D0h case    5:*/		return 0x821A20D4;
		  /* 821A20D4h */ case    6:  		/* stw R29, <#[R26 + 4]> */
		/* 821A20D4h case    6:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R26 + 0x00000004) );
		/* 821A20D4h case    6:*/		return 0x821A20D8;
		  /* 821A20D8h */ case    7:  		/* lwz R11, <#[R29]> */
		/* 821A20D8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A20D8h case    7:*/		return 0x821A20DC;
		  /* 821A20DCh */ case    8:  		/* rlwimi R11, R9, 5, 19, 26 */
		/* 821A20DCh case    8:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R9);
		/* 821A20DCh case    8:*/		return 0x821A20E0;
		  /* 821A20E0h */ case    9:  		/* stw R26, <#[R29 + 12]> */
		/* 821A20E0h case    9:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A20E0h case    9:*/		return 0x821A20E4;
		  /* 821A20E4h */ case   10:  		/* stw R11, <#[R29]> */
		/* 821A20E4h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A20E4h case   10:*/		return 0x821A20E8;
		  /* 821A20E8h */ case   11:  		/* b 60 */
		/* 821A20E8h case   11:*/		return 0x821A2124;
		/* 821A20E8h case   11:*/		return 0x821A20EC;
	}
	return 0x821A20EC;
} // Block from 821A20BCh-821A20ECh (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A20ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A20EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A20EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A20EC);
		  /* 821A20ECh */ case    0:  		/* lwz R9, <#[R29]> */
		/* 821A20ECh case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821A20ECh case    0:*/		return 0x821A20F0;
		  /* 821A20F0h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821A20F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A20F0h case    1:*/		return 0x821A20F4;
		  /* 821A20F4h */ case    2:  		/* rlwinm R10, R9, 27, 24, 31 */
		/* 821A20F4h case    2:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R9);
		/* 821A20F4h case    2:*/		return 0x821A20F8;
		  /* 821A20F8h */ case    3:  		/* bc 12, CR6_EQ, 36 */
		/* 821A20F8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A211C;  }
		/* 821A20F8h case    3:*/		return 0x821A20FC;
		  /* 821A20FCh */ case    4:  		/* rlwinm R11, R30, 1, 0, 30 */
		/* 821A20FCh case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R30);
		/* 821A20FCh case    4:*/		return 0x821A2100;
		  /* 821A2100h */ case    5:  		/* mtspr CTR, R31 */
		/* 821A2100h case    5:*/		regs.CTR = regs.R31;
		/* 821A2100h case    5:*/		return 0x821A2104;
		  /* 821A2104h */ case    6:  		/* slw R8, R22, R11 */
		/* 821A2104h case    6:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R22,regs.R11);
		/* 821A2104h case    6:*/		return 0x821A2108;
		  /* 821A2108h */ case    7:  		/* slw R7, R3, R11 */
		/* 821A2108h case    7:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R3,regs.R11);
		/* 821A2108h case    7:*/		return 0x821A210C;
		  /* 821A210Ch */ case    8:  		/* andc R10, R10, R8 */
		/* 821A210Ch case    8:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821A210Ch case    8:*/		return 0x821A2110;
		  /* 821A2110h */ case    9:  		/* addi R11, R11, 2 */
		/* 821A2110h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A2110h case    9:*/		return 0x821A2114;
		  /* 821A2114h */ case   10:  		/* or R10, R10, R7 */
		/* 821A2114h case   10:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R7);
		/* 821A2114h case   10:*/		return 0x821A2118;
		  /* 821A2118h */ case   11:  		/* bc 16, CR0_LT, -20 */
		/* 821A2118h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A2104;  }
		/* 821A2118h case   11:*/		return 0x821A211C;
	}
	return 0x821A211C;
} // Block from 821A20ECh-821A211Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A211Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A211C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A211C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A211C);
		  /* 821A211Ch */ case    0:  		/* rlwimi R9, R10, 5, 19, 26 */
		/* 821A211Ch case    0:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R9,regs.R10);
		/* 821A211Ch case    0:*/		return 0x821A2120;
		  /* 821A2120h */ case    1:  		/* stw R9, <#[R29]> */
		/* 821A2120h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000000) );
		/* 821A2120h case    1:*/		return 0x821A2124;
	}
	return 0x821A2124;
} // Block from 821A211Ch-821A2124h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A2124h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2124( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2124) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2124);
		  /* 821A2124h */ case    0:  		/* mr R4, R23 */
		/* 821A2124h case    0:*/		regs.R4 = regs.R23;
		/* 821A2124h case    0:*/		return 0x821A2128;
		  /* 821A2128h */ case    1:  		/* mr R3, R24 */
		/* 821A2128h case    1:*/		regs.R3 = regs.R24;
		/* 821A2128h case    1:*/		return 0x821A212C;
		  /* 821A212Ch */ case    2:  		/* bl 535156 */
		/* 821A212Ch case    2:*/		regs.LR = 0x821A2130; return 0x82224BA0;
		/* 821A212Ch case    2:*/		return 0x821A2130;
		  /* 821A2130h */ case    3:  		/* lwz R10, <#[R3 + 8]> */
		/* 821A2130h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821A2130h case    3:*/		return 0x821A2134;
		  /* 821A2134h */ case    4:  		/* slw R11, R21, R28 */
		/* 821A2134h case    4:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R21,regs.R28);
		/* 821A2134h case    4:*/		return 0x821A2138;
		  /* 821A2138h */ case    5:  		/* addi R11, R11, -1 */
		/* 821A2138h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A2138h case    5:*/		return 0x821A213C;
		  /* 821A213Ch */ case    6:  		/* rlwimi R10, R28, 14, 15, 17 */
		/* 821A213Ch case    6:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R10,regs.R28);
		/* 821A213Ch case    6:*/		return 0x821A2140;
		  /* 821A2140h */ case    7:  		/* mr R31, R3 */
		/* 821A2140h case    7:*/		regs.R31 = regs.R3;
		/* 821A2140h case    7:*/		return 0x821A2144;
		  /* 821A2144h */ case    8:  		/* rlwimi R10, R11, 1, 27, 30 */
		/* 821A2144h case    8:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R10,regs.R11);
		/* 821A2144h case    8:*/		return 0x821A2148;
		  /* 821A2148h */ case    9:  		/* mr R4, R27 */
		/* 821A2148h case    9:*/		regs.R4 = regs.R27;
		/* 821A2148h case    9:*/		return 0x821A214C;
		  /* 821A214Ch */ case   10:  		/* rlwinm R11, R10, 0, 6, 4 */
		/* 821A214Ch case   10:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R10);
		/* 821A214Ch case   10:*/		return 0x821A2150;
		  /* 821A2150h */ case   11:  		/* mr R3, R24 */
		/* 821A2150h case   11:*/		regs.R3 = regs.R24;
		/* 821A2150h case   11:*/		return 0x821A2154;
		  /* 821A2154h */ case   12:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 821A2154h case   12:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 821A2154h case   12:*/		return 0x821A2158;
		  /* 821A2158h */ case   13:  		/* stw R11, <#[R31 + 8]> */
		/* 821A2158h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A2158h case   13:*/		return 0x821A215C;
		  /* 821A215Ch */ case   14:  		/* lwz R11, <#[R23 + 12]> */
		/* 821A215Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x0000000C) );
		/* 821A215Ch case   14:*/		return 0x821A2160;
		  /* 821A2160h */ case   15:  		/* sth R11, <#[R31 + 14]> */
		/* 821A2160h case   15:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x0000000E) );
		/* 821A2160h case   15:*/		return 0x821A2164;
		  /* 821A2164h */ case   16:  		/* lwz R5, <#[R27 + 12]> */
		/* 821A2164h case   16:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000000C) );
		/* 821A2164h case   16:*/		return 0x821A2168;
		  /* 821A2168h */ case   17:  		/* bl -200824 */
		/* 821A2168h case   17:*/		regs.LR = 0x821A216C; return 0x821710F0;
		/* 821A2168h case   17:*/		return 0x821A216C;
		  /* 821A216Ch */ case   18:  		/* lwz R11, <#[R3]> */
		/* 821A216Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A216Ch case   18:*/		return 0x821A2170;
		  /* 821A2170h */ case   19:  		/* mr R27, R3 */
		/* 821A2170h case   19:*/		regs.R27 = regs.R3;
		/* 821A2170h case   19:*/		return 0x821A2174;
		  /* 821A2174h */ case   20:  		/* rlwinm R16, R28, 25, 4, 6 */
		/* 821A2174h case   20:*/		cpu::op::rlwinm<0,25,4,6>(regs,&regs.R16,regs.R28);
		/* 821A2174h case   20:*/		return 0x821A2178;
		  /* 821A2178h */ case   21:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 821A2178h case   21:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 821A2178h case   21:*/		return 0x821A217C;
		  /* 821A217Ch */ case   22:  		/* mr R3, R31 */
		/* 821A217Ch case   22:*/		regs.R3 = regs.R31;
		/* 821A217Ch case   22:*/		return 0x821A2180;
		  /* 821A2180h */ case   23:  		/* or R11, R11, R16 */
		/* 821A2180h case   23:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R16);
		/* 821A2180h case   23:*/		return 0x821A2184;
		  /* 821A2184h */ case   24:  		/* mr R4, R27 */
		/* 821A2184h case   24:*/		regs.R4 = regs.R27;
		/* 821A2184h case   24:*/		return 0x821A2188;
		  /* 821A2188h */ case   25:  		/* stw R11, <#[R27]> */
		/* 821A2188h case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A2188h case   25:*/		return 0x821A218C;
		  /* 821A218Ch */ case   26:  		/* lwz R11, <#[R25]> */
		/* 821A218Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A218Ch case   26:*/		return 0x821A2190;
		  /* 821A2190h */ case   27:  		/* rlwinm R30, R11, 12, 31, 31 */
		/* 821A2190h case   27:*/		cpu::op::rlwinm<0,12,31,31>(regs,&regs.R30,regs.R11);
		/* 821A2190h case   27:*/		return 0x821A2194;
		  /* 821A2194h */ case   28:  		/* bl -171980 */
		/* 821A2194h case   28:*/		regs.LR = 0x821A2198; return 0x821781C8;
		/* 821A2194h case   28:*/		return 0x821A2198;
		  /* 821A2198h */ case   29:  		/* addi R11, R30, 11 */
		/* 821A2198h case   29:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xB);
		/* 821A2198h case   29:*/		return 0x821A219C;
		  /* 821A219Ch */ case   30:  		/* mr R4, R29 */
		/* 821A219Ch case   30:*/		regs.R4 = regs.R29;
		/* 821A219Ch case   30:*/		return 0x821A21A0;
		  /* 821A21A0h */ case   31:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A21A0h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A21A0h case   31:*/		return 0x821A21A4;
		  /* 821A21A4h */ case   32:  		/* stwx R3, <#[R11 + R31]> */
		/* 821A21A4h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821A21A4h case   32:*/		return 0x821A21A8;
		  /* 821A21A8h */ case   33:  		/* mr R3, R24 */
		/* 821A21A8h case   33:*/		regs.R3 = regs.R24;
		/* 821A21A8h case   33:*/		return 0x821A21AC;
		  /* 821A21ACh */ case   34:  		/* lwz R5, <#[R29 + 12]> */
		/* 821A21ACh case   34:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A21ACh case   34:*/		return 0x821A21B0;
		  /* 821A21B0h */ case   35:  		/* bl -200896 */
		/* 821A21B0h case   35:*/		regs.LR = 0x821A21B4; return 0x821710F0;
		/* 821A21B0h case   35:*/		return 0x821A21B4;
		  /* 821A21B4h */ case   36:  		/* lwz R11, <#[R3]> */
		/* 821A21B4h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A21B4h case   36:*/		return 0x821A21B8;
		  /* 821A21B8h */ case   37:  		/* mr R28, R3 */
		/* 821A21B8h case   37:*/		regs.R28 = regs.R3;
		/* 821A21B8h case   37:*/		return 0x821A21BC;
		  /* 821A21BCh */ case   38:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 821A21BCh case   38:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 821A21BCh case   38:*/		return 0x821A21C0;
		  /* 821A21C0h */ case   39:  		/* mr R3, R31 */
		/* 821A21C0h case   39:*/		regs.R3 = regs.R31;
		/* 821A21C0h case   39:*/		return 0x821A21C4;
		  /* 821A21C4h */ case   40:  		/* or R11, R11, R16 */
		/* 821A21C4h case   40:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R16);
		/* 821A21C4h case   40:*/		return 0x821A21C8;
		  /* 821A21C8h */ case   41:  		/* mr R4, R28 */
		/* 821A21C8h case   41:*/		regs.R4 = regs.R28;
		/* 821A21C8h case   41:*/		return 0x821A21CC;
		  /* 821A21CCh */ case   42:  		/* stw R11, <#[R28]> */
		/* 821A21CCh case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A21CCh case   42:*/		return 0x821A21D0;
		  /* 821A21D0h */ case   43:  		/* lwz R11, <#[R25]> */
		/* 821A21D0h case   43:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A21D0h case   43:*/		return 0x821A21D4;
		  /* 821A21D4h */ case   44:  		/* rlwinm R11, R11, 12, 31, 31 */
		/* 821A21D4h case   44:*/		cpu::op::rlwinm<0,12,31,31>(regs,&regs.R11,regs.R11);
		/* 821A21D4h case   44:*/		return 0x821A21D8;
		  /* 821A21D8h */ case   45:  		/* subfic R30, R11, 1 */
		/* 821A21D8h case   45:*/		cpu::op::subfic<0>(regs,&regs.R30,regs.R11,0x1);
		/* 821A21D8h case   45:*/		return 0x821A21DC;
		  /* 821A21DCh */ case   46:  		/* bl -172052 */
		/* 821A21DCh case   46:*/		regs.LR = 0x821A21E0; return 0x821781C8;
		/* 821A21DCh case   46:*/		return 0x821A21E0;
		  /* 821A21E0h */ case   47:  		/* addi R11, R30, 11 */
		/* 821A21E0h case   47:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xB);
		/* 821A21E0h case   47:*/		return 0x821A21E4;
		  /* 821A21E4h */ case   48:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A21E4h case   48:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A21E4h case   48:*/		return 0x821A21E8;
		  /* 821A21E8h */ case   49:  		/* stwx R3, <#[R11 + R31]> */
		/* 821A21E8h case   49:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821A21E8h case   49:*/		return 0x821A21EC;
		  /* 821A21ECh */ case   50:  		/* lwz R30, <#[R23]> */
		/* 821A21ECh case   50:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x00000000) );
		/* 821A21ECh case   50:*/		return 0x821A21F0;
		  /* 821A21F0h */ case   51:  		/* cmplwi CR6, R30, 0 */
		/* 821A21F0h case   51:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A21F0h case   51:*/		return 0x821A21F4;
		  /* 821A21F4h */ case   52:  		/* bc 12, CR6_EQ, 36 */
		/* 821A21F4h case   52:*/		if ( regs.CR[6].eq ) { return 0x821A2218;  }
		/* 821A21F4h case   52:*/		return 0x821A21F8;
		  /* 821A21F8h */ case   53:  		/* lwz R11, <#[R30]> */
		/* 821A21F8h case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A21F8h case   53:*/		return 0x821A21FC;
		  /* 821A21FCh */ case   54:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821A21FCh case   54:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821A21FCh case   54:*/		return 0x821A2200;
		  /* 821A2200h */ case   55:  		/* bc 4, CR0_EQ, 16 */
		/* 821A2200h case   55:*/		if ( !regs.CR[0].eq ) { return 0x821A2210;  }
		/* 821A2200h case   55:*/		return 0x821A2204;
		  /* 821A2204h */ case   56:  		/* mr R4, R30 */
		/* 821A2204h case   56:*/		regs.R4 = regs.R30;
		/* 821A2204h case   56:*/		return 0x821A2208;
		  /* 821A2208h */ case   57:  		/* mr R3, R31 */
		/* 821A2208h case   57:*/		regs.R3 = regs.R31;
		/* 821A2208h case   57:*/		return 0x821A220C;
		  /* 821A220Ch */ case   58:  		/* bl -172100 */
		/* 821A220Ch case   58:*/		regs.LR = 0x821A2210; return 0x821781C8;
		/* 821A220Ch case   58:*/		return 0x821A2210;
	}
	return 0x821A2210;
} // Block from 821A2124h-821A2210h (59 instructions)

//////////////////////////////////////////////////////
// Block at 821A2210h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2210( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2210) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2210);
		  /* 821A2210h */ case    0:  		/* lwz R30, <#[R30 + 4]> */
		/* 821A2210h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000004) );
		/* 821A2210h case    0:*/		return 0x821A2214;
		  /* 821A2214h */ case    1:  		/* b -36 */
		/* 821A2214h case    1:*/		return 0x821A21F0;
		/* 821A2214h case    1:*/		return 0x821A2218;
	}
	return 0x821A2218;
} // Block from 821A2210h-821A2218h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A2218h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2218( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2218) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2218);
		  /* 821A2218h */ case    0:  		/* cmplwi CR6, R26, 0 */
		/* 821A2218h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821A2218h case    0:*/		return 0x821A221C;
		  /* 821A221Ch */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821A221Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821A2234;  }
		/* 821A221Ch case    1:*/		return 0x821A2220;
		  /* 821A2220h */ case    2:  		/* mr R3, R26 */
		/* 821A2220h case    2:*/		regs.R3 = regs.R26;
		/* 821A2220h case    2:*/		return 0x821A2224;
		  /* 821A2224h */ case    3:  		/* bl -48756 */
		/* 821A2224h case    3:*/		regs.LR = 0x821A2228; return 0x821963B0;
		/* 821A2224h case    3:*/		return 0x821A2228;
		  /* 821A2228h */ case    4:  		/* lwz R11, <#[R26 + 8]> */
		/* 821A2228h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821A2228h case    4:*/		return 0x821A222C;
		  /* 821A222Ch */ case    5:  		/* oris R11, R11, 256 */
		/* 821A222Ch case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A222Ch case    5:*/		return 0x821A2230;
		  /* 821A2230h */ case    6:  		/* stw R11, <#[R26 + 8]> */
		/* 821A2230h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821A2230h case    6:*/		return 0x821A2234;
	}
	return 0x821A2234;
} // Block from 821A2218h-821A2234h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A2234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2234);
		  /* 821A2234h */ case    0:  		/* rlwinm R11, R18, 0, 0, 30 */
		/* 821A2234h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R18);
		/* 821A2234h case    0:*/		return 0x821A2238;
		  /* 821A2238h */ case    1:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821A2238h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821A2238h case    1:*/		return 0x821A223C;
		  /* 821A223Ch */ case    2:  		/* addi R11, R11, 36 */
		/* 821A223Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A223Ch case    2:*/		return 0x821A2240;
		  /* 821A2240h */ case    3:  		/* addi R10, R10, 36 */
		/* 821A2240h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A2240h case    3:*/		return 0x821A2244;
		  /* 821A2244h */ case    4:  		/* addi R8, R11, -36 */
		/* 821A2244h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A2244h case    4:*/		return 0x821A2248;
		  /* 821A2248h */ case    5:  		/* addi R7, R10, -36 */
		/* 821A2248h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821A2248h case    5:*/		return 0x821A224C;
		  /* 821A224Ch */ case    6:  		/* addi R9, R10, 4 */
		/* 821A224Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A224Ch case    6:*/		return 0x821A2250;
		  /* 821A2250h */ case    7:  		/* lwz R6, <#[R11]> */
		/* 821A2250h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2250h case    7:*/		return 0x821A2254;
		  /* 821A2254h */ case    8:  		/* li R26, 0 */
		/* 821A2254h case    8:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821A2254h case    8:*/		return 0x821A2258;
		  /* 821A2258h */ case    9:  		/* li R25, 0 */
		/* 821A2258h case    9:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821A2258h case    9:*/		return 0x821A225C;
		  /* 821A225Ch */ case   10:  		/* stw R6, <#[R10]> */
		/* 821A225Ch case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821A225Ch case   10:*/		return 0x821A2260;
		  /* 821A2260h */ case   11:  		/* lwz R6, <#[R11]> */
		/* 821A2260h case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2260h case   11:*/		return 0x821A2264;
		  /* 821A2264h */ case   12:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821A2264h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821A2264h case   12:*/		return 0x821A2268;
		  /* 821A2268h */ case   13:  		/* stw R7, <#[R6]> */
		/* 821A2268h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821A2268h case   13:*/		return 0x821A226C;
		  /* 821A226Ch */ case   14:  		/* stw R8, <#[R10 + 4]> */
		/* 821A226Ch case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A226Ch case   14:*/		return 0x821A2270;
		  /* 821A2270h */ case   15:  		/* stw R9, <#[R11]> */
		/* 821A2270h case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2270h case   15:*/		return 0x821A2274;
		  /* 821A2274h */ case   16:  		/* lwz R11, <#[R20]> */
		/* 821A2274h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A2274h case   16:*/		return 0x821A2278;
		  /* 821A2278h */ case   17:  		/* rlwinm. R30, R11, 7, 29, 31 */
		/* 821A2278h case   17:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R30,regs.R11);
		/* 821A2278h case   17:*/		return 0x821A227C;
		  /* 821A227Ch */ case   18:  		/* bc 12, CR0_EQ, 224 */
		/* 821A227Ch case   18:*/		if ( regs.CR[0].eq ) { return 0x821A235C;  }
		/* 821A227Ch case   18:*/		return 0x821A2280;
		  /* 821A2280h */ case   19:  		/* li R29, 0 */
		/* 821A2280h case   19:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A2280h case   19:*/		return 0x821A2284;
		  /* 821A2284h */ case   20:  		/* lwz R10, <#[R28]> */
		/* 821A2284h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821A2284h case   20:*/		return 0x821A2288;
		  /* 821A2288h */ case   21:  		/* li R30, 0 */
		/* 821A2288h case   21:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A2288h case   21:*/		return 0x821A228C;
		  /* 821A228Ch */ case   22:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821A228Ch case   22:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821A228Ch case   22:*/		return 0x821A2290;
		  /* 821A2290h */ case   23:  		/* bc 12, CR0_EQ, 180 */
		/* 821A2290h case   23:*/		if ( regs.CR[0].eq ) { return 0x821A2344;  }
		/* 821A2290h case   23:*/		return 0x821A2294;
		  /* 821A2294h */ case   24:  		/* rlwinm R8, R10, 27, 24, 31 */
		/* 821A2294h case   24:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R10);
		/* 821A2294h case   24:*/		return 0x821A2298;
		  /* 821A2298h */ case   25:  		/* rlwinm R7, R17, 0, 24, 31 */
		/* 821A2298h case   25:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R7,regs.R17);
		/* 821A2298h case   25:*/		return 0x821A229C;
		  /* 821A229Ch */ case   26:  		/* li R10, 0 */
		/* 821A229Ch case   26:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A229Ch case   26:*/		return 0x821A22A0;
		  /* 821A22A0h */ case   27:  		/* srw R9, R8, R10 */
		/* 821A22A0h case   27:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R8,regs.R10);
		/* 821A22A0h case   27:*/		return 0x821A22A4;
		  /* 821A22A4h */ case   28:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821A22A4h case   28:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821A22A4h case   28:*/		return 0x821A22A8;
		  /* 821A22A8h */ case   29:  		/* cmplwi CR6, R7, 0 */
		/* 821A22A8h case   29:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821A22A8h case   29:*/		return 0x821A22AC;
		  /* 821A22ACh */ case   30:  		/* bc 12, CR6_EQ, 36 */
		/* 821A22ACh case   30:*/		if ( regs.CR[6].eq ) { return 0x821A22D0;  }
		/* 821A22ACh case   30:*/		return 0x821A22B0;
		  /* 821A22B0h */ case   31:  		/* lwz R6, <#[R27]> */
		/* 821A22B0h case   31:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000000) );
		/* 821A22B0h case   31:*/		return 0x821A22B4;
		  /* 821A22B4h */ case   32:  		/* rlwinm R5, R11, 27, 24, 31 */
		/* 821A22B4h case   32:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R5,regs.R11);
		/* 821A22B4h case   32:*/		return 0x821A22B8;
		  /* 821A22B8h */ case   33:  		/* rlwinm R6, R6, 27, 24, 31 */
		/* 821A22B8h case   33:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R6);
		/* 821A22B8h case   33:*/		return 0x821A22BC;
		  /* 821A22BCh */ case   34:  		/* srw R5, R5, R29 */
		/* 821A22BCh case   34:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R5,regs.R29);
		/* 821A22BCh case   34:*/		return 0x821A22C0;
		  /* 821A22C0h */ case   35:  		/* srw R6, R6, R10 */
		/* 821A22C0h case   35:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R6,regs.R10);
		/* 821A22C0h case   35:*/		return 0x821A22C4;
		  /* 821A22C4h */ case   36:  		/* xor R6, R6, R5 */
		/* 821A22C4h case   36:*/		cpu::op::xor<0>(regs,&regs.R6,regs.R6,regs.R5);
		/* 821A22C4h case   36:*/		return 0x821A22C8;
		  /* 821A22C8h */ case   37:  		/* rlwinm. R6, R6, 0, 30, 31 */
		/* 821A22C8h case   37:*/		cpu::op::rlwinm<1,0,30,31>(regs,&regs.R6,regs.R6);
		/* 821A22C8h case   37:*/		return 0x821A22CC;
		  /* 821A22CCh */ case   38:  		/* bc 4, CR0_EQ, 36 */
		/* 821A22CCh case   38:*/		if ( !regs.CR[0].eq ) { return 0x821A22F0;  }
		/* 821A22CCh case   38:*/		return 0x821A22D0;
	}
	return 0x821A22D0;
} // Block from 821A2234h-821A22D0h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821A22D0h
// Function '?RemoveUnnecessaryMergeDependencies@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A22D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A22D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A22D0);
		  /* 821A22D0h */ case    0:  		/* slw R6, R21, R9 */
		/* 821A22D0h case    0:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R21,regs.R9);
		/* 821A22D0h case    0:*/		return 0x821A22D4;
		  /* 821A22D4h */ case    1:  		/* and. R6, R6, R19 */
		/* 821A22D4h case    1:*/		cpu::op::and<1>(regs,&regs.R6,regs.R6,regs.R19);
		/* 821A22D4h case    1:*/		return 0x821A22D8;
		  /* 821A22D8h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 821A22D8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A22F0;  }
		/* 821A22D8h case    2:*/		return 0x821A22DC;
		  /* 821A22DCh */ case    3:  		/* rlwinm R9, R9, 3, 0, 28 */
		/* 821A22DCh case    3:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R9,regs.R9);
		/* 821A22DCh case    3:*/		return 0x821A22E0;
		  /* 821A22E0h */ case    4:  		/* addi R6, R1, 96 */
		/* 821A22E0h case    4:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821A22E0h case    4:*/		return 0x821A22E4;
		  /* 821A22E4h */ case    5:  		/* lfdx FR0, <#[R9 + R6]> */
		/* 821A22E4h case    5:*/		cpu::mem::load64f( regs, &regs.FR0, (uint32)(regs.R9 + regs.R6 + 0x00000000) );
		/* 821A22E4h case    5:*/		return 0x821A22E8;
		  /* 821A22E8h */ case    6:  		/* fcmpu CR6, FR31, FR0 */
		/* 821A22E8h case    6:*/		cpu::op::fcmpu<6>(regs,regs.FR31,regs.FR0);
		/* 821A22E8h case    6:*/		return 0x821A22EC;
		  /* 821A22ECh */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 821A22ECh case    7:*/		if ( regs.CR[6].eq ) { return 0x821A230C;  }
		/* 821A22ECh case    7:*/		return 0x821A22F0;
	}
	return 0x821A22F0;
} // Block from 821A22D0h-821A22F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A22F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A22F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A22F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A22F0);
		  /* 821A22F0h */ case    0:  		/* lwz R9, <#[R28]> */
		/* 821A22F0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + 0x00000000) );
		/* 821A22F0h case    0:*/		return 0x821A22F4;
		  /* 821A22F4h */ case    1:  		/* addi R30, R30, 1 */
		/* 821A22F4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A22F4h case    1:*/		return 0x821A22F8;
		  /* 821A22F8h */ case    2:  		/* addi R10, R10, 2 */
		/* 821A22F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821A22F8h case    2:*/		return 0x821A22FC;
		  /* 821A22FCh */ case    3:  		/* rlwinm R9, R9, 7, 29, 31 */
		/* 821A22FCh case    3:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R9,regs.R9);
		/* 821A22FCh case    3:*/		return 0x821A2300;
		  /* 821A2300h */ case    4:  		/* cmplw CR6, R30, R9 */
		/* 821A2300h case    4:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R9);
		/* 821A2300h case    4:*/		return 0x821A2304;
		  /* 821A2304h */ case    5:  		/* bc 12, CR6_LT, -100 */
		/* 821A2304h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A22A0;  }
		/* 821A2304h case    5:*/		return 0x821A2308;
		  /* 821A2308h */ case    6:  		/* b 60 */
		/* 821A2308h case    6:*/		return 0x821A2344;
		/* 821A2308h case    6:*/		return 0x821A230C;
	}
	return 0x821A230C;
} // Block from 821A22F0h-821A230Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A230Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A230C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A230C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A230C);
		  /* 821A230Ch */ case    0:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821A230Ch case    0:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821A230Ch case    0:*/		return 0x821A2310;
		  /* 821A2310h */ case    1:  		/* lwz R3, <#[R20 + 12]> */
		/* 821A2310h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R20 + 0x0000000C) );
		/* 821A2310h case    1:*/		return 0x821A2314;
		  /* 821A2314h */ case    2:  		/* srw R11, R11, R29 */
		/* 821A2314h case    2:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R29);
		/* 821A2314h case    2:*/		return 0x821A2318;
		  /* 821A2318h */ case    3:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 821A2318h case    3:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 821A2318h case    3:*/		return 0x821A231C;
		  /* 821A231Ch */ case    4:  		/* bl 109900 */
		/* 821A231Ch case    4:*/		regs.LR = 0x821A2320; return 0x821BD068;
		/* 821A231Ch case    4:*/		return 0x821A2320;
		  /* 821A2320h */ case    5:  		/* mr R6, R3 */
		/* 821A2320h case    5:*/		regs.R6 = regs.R3;
		/* 821A2320h case    5:*/		return 0x821A2324;
		  /* 821A2324h */ case    6:  		/* li R5, 15 */
		/* 821A2324h case    6:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 821A2324h case    6:*/		return 0x821A2328;
		  /* 821A2328h */ case    7:  		/* mr R4, R30 */
		/* 821A2328h case    7:*/		regs.R4 = regs.R30;
		/* 821A2328h case    7:*/		return 0x821A232C;
		  /* 821A232Ch */ case    8:  		/* mr R3, R31 */
		/* 821A232Ch case    8:*/		regs.R3 = regs.R31;
		/* 821A232Ch case    8:*/		return 0x821A2330;
		  /* 821A2330h */ case    9:  		/* bl 109904 */
		/* 821A2330h case    9:*/		regs.LR = 0x821A2334; return 0x821BD080;
		/* 821A2330h case    9:*/		return 0x821A2334;
		  /* 821A2334h */ case   10:  		/* slw R11, R22, R29 */
		/* 821A2334h case   10:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R22,regs.R29);
		/* 821A2334h case   10:*/		return 0x821A2338;
		  /* 821A2338h */ case   11:  		/* slw R10, R30, R29 */
		/* 821A2338h case   11:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R30,regs.R29);
		/* 821A2338h case   11:*/		return 0x821A233C;
		  /* 821A233Ch */ case   12:  		/* andc R11, R26, R11 */
		/* 821A233Ch case   12:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 821A233Ch case   12:*/		return 0x821A2340;
		  /* 821A2340h */ case   13:  		/* or R26, R11, R10 */
		/* 821A2340h case   13:*/		cpu::op::or<0>(regs,&regs.R26,regs.R11,regs.R10);
		/* 821A2340h case   13:*/		return 0x821A2344;
	}
	return 0x821A2344;
} // Block from 821A230Ch-821A2344h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A2344h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2344( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2344) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2344);
		  /* 821A2344h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 821A2344h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A2344h case    0:*/		return 0x821A2348;
		  /* 821A2348h */ case    1:  		/* addi R25, R25, 1 */
		/* 821A2348h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821A2348h case    1:*/		return 0x821A234C;
		  /* 821A234Ch */ case    2:  		/* addi R29, R29, 2 */
		/* 821A234Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x2);
		/* 821A234Ch case    2:*/		return 0x821A2350;
		  /* 821A2350h */ case    3:  		/* rlwinm R30, R11, 7, 29, 31 */
		/* 821A2350h case    3:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R30,regs.R11);
		/* 821A2350h case    3:*/		return 0x821A2354;
		  /* 821A2354h */ case    4:  		/* cmplw CR6, R25, R30 */
		/* 821A2354h case    4:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R30);
		/* 821A2354h case    4:*/		return 0x821A2358;
		  /* 821A2358h */ case    5:  		/* bc 12, CR6_LT, -212 */
		/* 821A2358h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A2284;  }
		/* 821A2358h case    5:*/		return 0x821A235C;
	}
	return 0x821A235C;
} // Block from 821A2344h-821A235Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A235Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A235C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A235C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A235C);
		  /* 821A235Ch */ case    0:  		/* mr R4, R31 */
		/* 821A235Ch case    0:*/		regs.R4 = regs.R31;
		/* 821A235Ch case    0:*/		return 0x821A2360;
		  /* 821A2360h */ case    1:  		/* mr R3, R24 */
		/* 821A2360h case    1:*/		regs.R3 = regs.R24;
		/* 821A2360h case    1:*/		return 0x821A2364;
		  /* 821A2364h */ case    2:  		/* bl -172900 */
		/* 821A2364h case    2:*/		regs.LR = 0x821A2368; return 0x82178000;
		/* 821A2364h case    2:*/		return 0x821A2368;
		  /* 821A2368h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 821A2368h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A2368h case    3:*/		return 0x821A236C;
		  /* 821A236Ch */ case    4:  		/* li R4, 0 */
		/* 821A236Ch case    4:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A236Ch case    4:*/		return 0x821A2370;
		  /* 821A2370h */ case    5:  		/* rlwimi R11, R30, 25, 4, 6 */
		/* 821A2370h case    5:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R30);
		/* 821A2370h case    5:*/		return 0x821A2374;
		  /* 821A2374h */ case    6:  		/* mr R29, R3 */
		/* 821A2374h case    6:*/		regs.R29 = regs.R3;
		/* 821A2374h case    6:*/		return 0x821A2378;
		  /* 821A2378h */ case    7:  		/* stw R11, <#[R3]> */
		/* 821A2378h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A2378h case    7:*/		return 0x821A237C;
		  /* 821A237Ch */ case    8:  		/* bl -174268 */
		/* 821A237Ch case    8:*/		regs.LR = 0x821A2380; return 0x82177AC0;
		/* 821A237Ch case    8:*/		return 0x821A2380;
		  /* 821A2380h */ case    9:  		/* lwz R11, <#[R29]> */
		/* 821A2380h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A2380h case    9:*/		return 0x821A2384;
		  /* 821A2384h */ case   10:  		/* mr R4, R23 */
		/* 821A2384h case   10:*/		regs.R4 = regs.R23;
		/* 821A2384h case   10:*/		return 0x821A2388;
		  /* 821A2388h */ case   11:  		/* rlwimi R11, R26, 5, 19, 26 */
		/* 821A2388h case   11:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R26);
		/* 821A2388h case   11:*/		return 0x821A238C;
		  /* 821A238Ch */ case   12:  		/* mr R3, R24 */
		/* 821A238Ch case   12:*/		regs.R3 = regs.R24;
		/* 821A238Ch case   12:*/		return 0x821A2390;
		  /* 821A2390h */ case   13:  		/* stw R11, <#[R29]> */
		/* 821A2390h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A2390h case   13:*/		return 0x821A2394;
		  /* 821A2394h */ case   14:  		/* bl -6364 */
		/* 821A2394h case   14:*/		regs.LR = 0x821A2398; return 0x821A0AB8;
		/* 821A2394h case   14:*/		return 0x821A2398;
		  /* 821A2398h */ case   15:  		/* mr R4, R31 */
		/* 821A2398h case   15:*/		regs.R4 = regs.R31;
		/* 821A2398h case   15:*/		return 0x821A239C;
		  /* 821A239Ch */ case   16:  		/* mr R3, R24 */
		/* 821A239Ch case   16:*/		regs.R3 = regs.R24;
		/* 821A239Ch case   16:*/		return 0x821A23A0;
		  /* 821A23A0h */ case   17:  		/* bl -6376 */
		/* 821A23A0h case   17:*/		regs.LR = 0x821A23A4; return 0x821A0AB8;
		/* 821A23A0h case   17:*/		return 0x821A23A4;
		  /* 821A23A4h */ case   18:  		/* lwz R11, <#[R24 + 40]> */
		/* 821A23A4h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000028) );
		/* 821A23A4h case   18:*/		return 0x821A23A8;
		  /* 821A23A8h */ case   19:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821A23A8h case   19:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821A23A8h case   19:*/		return 0x821A23AC;
		  /* 821A23ACh */ case   20:  		/* bc 12, CR0_EQ, 20 */
		/* 821A23ACh case   20:*/		if ( regs.CR[0].eq ) { return 0x821A23C0;  }
		/* 821A23ACh case   20:*/		return 0x821A23B0;
		  /* 821A23B0h */ case   21:  		/* li R5, 0 */
		/* 821A23B0h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A23B0h case   21:*/		return 0x821A23B4;
		  /* 821A23B4h */ case   22:  		/* mr R4, R31 */
		/* 821A23B4h case   22:*/		regs.R4 = regs.R31;
		/* 821A23B4h case   22:*/		return 0x821A23B8;
		  /* 821A23B8h */ case   23:  		/* mr R3, R24 */
		/* 821A23B8h case   23:*/		regs.R3 = regs.R24;
		/* 821A23B8h case   23:*/		return 0x821A23BC;
		  /* 821A23BCh */ case   24:  		/* bl -6148 */
		/* 821A23BCh case   24:*/		regs.LR = 0x821A23C0; return 0x821A0BB8;
		/* 821A23BCh case   24:*/		return 0x821A23C0;
	}
	return 0x821A23C0;
} // Block from 821A235Ch-821A23C0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821A23C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A23C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A23C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A23C0);
		  /* 821A23C0h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A23C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A23C0h case    0:*/		return 0x821A23C4;
		  /* 821A23C4h */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A23C4h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A23C4h case    1:*/		return 0x821A23C8;
		  /* 821A23C8h */ case    2:  		/* bc 12, CR0_EQ, 104 */
		/* 821A23C8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A2430;  }
		/* 821A23C8h case    2:*/		return 0x821A23CC;
		  /* 821A23CCh */ case    3:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A23CCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A23CCh case    3:*/		return 0x821A23D0;
		  /* 821A23D0h */ case    4:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 821A23D0h case    4:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 821A23D0h case    4:*/		return 0x821A23D4;
		  /* 821A23D4h */ case    5:  		/* stw R11, <#[R31 + 16]> */
		/* 821A23D4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A23D4h case    5:*/		return 0x821A23D8;
		  /* 821A23D8h */ case    6:  		/* lwz R3, <#[R24 + 660]> */
		/* 821A23D8h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R24 + 0x00000294) );
		/* 821A23D8h case    6:*/		return 0x821A23DC;
		  /* 821A23DCh */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A23DCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A23DCh case    7:*/		return 0x821A23E0;
		  /* 821A23E0h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A23E0h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A23E0h case    8:*/		return 0x821A23E4;
		  /* 821A23E4h */ case    9:  		/* bc 4, CR0_EQ, 40 */
		/* 821A23E4h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821A240C;  }
		/* 821A23E4h case    9:*/		return 0x821A23E8;
		  /* 821A23E8h */ case   10:  		/* lwz R11, <#[R3]> */
		/* 821A23E8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A23E8h case   10:*/		return 0x821A23EC;
		  /* 821A23ECh */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A23ECh case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A23ECh case   11:*/		return 0x821A23F0;
		  /* 821A23F0h */ case   12:  		/* addic. R11, R11, -4 */
		/* 821A23F0h case   12:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A23F0h case   12:*/		return 0x821A23F4;
		  /* 821A23F4h */ case   13:  		/* bc 12, CR0_EQ, 24 */
		/* 821A23F4h case   13:*/		if ( regs.CR[0].eq ) { return 0x821A240C;  }
		/* 821A23F4h case   13:*/		return 0x821A23F8;
		  /* 821A23F8h */ case   14:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A23F8h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A23F8h case   14:*/		return 0x821A23FC;
		  /* 821A23FCh */ case   15:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A23FCh case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A23FCh case   15:*/		return 0x821A2400;
		  /* 821A2400h */ case   16:  		/* addi R10, R10, 1 */
		/* 821A2400h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A2400h case   16:*/		return 0x821A2404;
		  /* 821A2404h */ case   17:  		/* cmplw CR6, R10, R9 */
		/* 821A2404h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A2404h case   17:*/		return 0x821A2408;
		  /* 821A2408h */ case   18:  		/* bc 4, CR6_GT, 16 */
		/* 821A2408h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821A2418;  }
		/* 821A2408h case   18:*/		return 0x821A240C;
	}
	return 0x821A240C;
} // Block from 821A23C0h-821A240Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A240Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A240C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A240C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A240C);
		  /* 821A240Ch */ case    0:  		/* li R4, 1 */
		/* 821A240Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A240Ch case    0:*/		return 0x821A2410;
		  /* 821A2410h */ case    1:  		/* bl -86856 */
		/* 821A2410h case    1:*/		regs.LR = 0x821A2414; return 0x8218D0C8;
		/* 821A2410h case    1:*/		return 0x821A2414;
		  /* 821A2414h */ case    2:  		/* mr R11, R3 */
		/* 821A2414h case    2:*/		regs.R11 = regs.R3;
		/* 821A2414h case    2:*/		return 0x821A2418;
	}
	return 0x821A2418;
} // Block from 821A240Ch-821A2418h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A2418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2418);
		  /* 821A2418h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A2418h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2418h case    0:*/		return 0x821A241C;
		  /* 821A241Ch */ case    1:  		/* addi R9, R10, 4 */
		/* 821A241Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A241Ch case    1:*/		return 0x821A2420;
		  /* 821A2420h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A2420h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A2420h case    2:*/		return 0x821A2424;
		  /* 821A2424h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A2424h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A2424h case    3:*/		return 0x821A2428;
		  /* 821A2428h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A2428h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2428h case    4:*/		return 0x821A242C;
		  /* 821A242Ch */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A242Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A242Ch case    5:*/		return 0x821A2430;
	}
	return 0x821A2430;
} // Block from 821A2418h-821A2430h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A2430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2430);
		  /* 821A2430h */ case    0:  		/* mr R3, R29 */
		/* 821A2430h case    0:*/		regs.R3 = regs.R29;
		/* 821A2430h case    0:*/		return 0x821A2434;
		  /* 821A2434h */ case    1:  		/* addi R1, R1, 272 */
		/* 821A2434h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 821A2434h case    1:*/		return 0x821A2438;
		  /* 821A2438h */ case    2:  		/* lfd FR31, <#[R1 - 144]> */
		/* 821A2438h case    2:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF70) );
		/* 821A2438h case    2:*/		return 0x821A243C;
		  /* 821A243Ch */ case    3:  		/* b -1118660 */
		/* 821A243Ch case    3:*/		return 0x82091278;
		/* 821A243Ch case    3:*/		return 0x821A2440;
	}
	return 0x821A2440;
} // Block from 821A2430h-821A2440h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A2440h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2440( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2440) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2440);
		  /* 821A2440h */ case    0:  		/* li R4, 4800 */
		/* 821A2440h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821A2440h case    0:*/		return 0x821A2444;
		  /* 821A2444h */ case    1:  		/* mr R3, R24 */
		/* 821A2444h case    1:*/		regs.R3 = regs.R24;
		/* 821A2444h case    1:*/		return 0x821A2448;
		  /* 821A2448h */ case    2:  		/* bl -329184 */
		/* 821A2448h case    2:*/		regs.LR = 0x821A244C; return 0x82151E68;
		/* 821A2448h case    2:*/		return 0x821A244C;
		  /* 821A244Ch */ case    3:  		/* nop */
		/* 821A244Ch case    3:*/		cpu::op::nop();
		/* 821A244Ch case    3:*/		return 0x821A2450;
	}
	return 0x821A2450;
} // Block from 821A2440h-821A2450h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A2450h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2450( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2450) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2450);
		  /* 821A2450h */ case    0:  		/* mfspr R12, LR */
		/* 821A2450h case    0:*/		regs.R12 = regs.LR;
		/* 821A2450h case    0:*/		return 0x821A2454;
		  /* 821A2454h */ case    1:  		/* bl -1118772 */
		/* 821A2454h case    1:*/		regs.LR = 0x821A2458; return 0x82091220;
		/* 821A2454h case    1:*/		return 0x821A2458;
		  /* 821A2458h */ case    2:  		/* stwu R1, <#[R1 - 240]> */
		/* 821A2458h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF10) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF10);
		/* 821A2458h case    2:*/		return 0x821A245C;
		  /* 821A245Ch */ case    3:  		/* mr R31, R3 */
		/* 821A245Ch case    3:*/		regs.R31 = regs.R3;
		/* 821A245Ch case    3:*/		return 0x821A2460;
		  /* 821A2460h */ case    4:  		/* stw R3, <#[R1 + 260]> */
		/* 821A2460h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000104) );
		/* 821A2460h case    4:*/		return 0x821A2464;
		  /* 821A2464h */ case    5:  		/* mr R26, R4 */
		/* 821A2464h case    5:*/		regs.R26 = regs.R4;
		/* 821A2464h case    5:*/		return 0x821A2468;
		  /* 821A2468h */ case    6:  		/* stw R8, <#[R1 + 300]> */
		/* 821A2468h case    6:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x0000012C) );
		/* 821A2468h case    6:*/		return 0x821A246C;
		  /* 821A246Ch */ case    7:  		/* mr R14, R5 */
		/* 821A246Ch case    7:*/		regs.R14 = regs.R5;
		/* 821A246Ch case    7:*/		return 0x821A2470;
		  /* 821A2470h */ case    8:  		/* mr R17, R6 */
		/* 821A2470h case    8:*/		regs.R17 = regs.R6;
		/* 821A2470h case    8:*/		return 0x821A2474;
		  /* 821A2474h */ case    9:  		/* mr R22, R7 */
		/* 821A2474h case    9:*/		regs.R22 = regs.R7;
		/* 821A2474h case    9:*/		return 0x821A2478;
		  /* 821A2478h */ case   10:  		/* mr R21, R8 */
		/* 821A2478h case   10:*/		regs.R21 = regs.R8;
		/* 821A2478h case   10:*/		return 0x821A247C;
		  /* 821A247Ch */ case   11:  		/* mr R18, R9 */
		/* 821A247Ch case   11:*/		regs.R18 = regs.R9;
		/* 821A247Ch case   11:*/		return 0x821A2480;
		  /* 821A2480h */ case   12:  		/* mr R19, R10 */
		/* 821A2480h case   12:*/		regs.R19 = regs.R10;
		/* 821A2480h case   12:*/		return 0x821A2484;
		  /* 821A2484h */ case   13:  		/* cmplwi CR6, R4, 0 */
		/* 821A2484h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A2484h case   13:*/		return 0x821A2488;
		  /* 821A2488h */ case   14:  		/* bc 12, CR6_EQ, 48 */
		/* 821A2488h case   14:*/		if ( regs.CR[6].eq ) { return 0x821A24B8;  }
		/* 821A2488h case   14:*/		return 0x821A248C;
		  /* 821A248Ch */ case   15:  		/* cmplwi CR6, R7, 0 */
		/* 821A248Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821A248Ch case   15:*/		return 0x821A2490;
		  /* 821A2490h */ case   16:  		/* bc 12, CR6_EQ, 40 */
		/* 821A2490h case   16:*/		if ( regs.CR[6].eq ) { return 0x821A24B8;  }
		/* 821A2490h case   16:*/		return 0x821A2494;
		  /* 821A2494h */ case   17:  		/* cmplw CR6, R4, R7 */
		/* 821A2494h case   17:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R7);
		/* 821A2494h case   17:*/		return 0x821A2498;
		  /* 821A2498h */ case   18:  		/* bc 12, CR6_EQ, 24 */
		/* 821A2498h case   18:*/		if ( regs.CR[6].eq ) { return 0x821A24B0;  }
		/* 821A2498h case   18:*/		return 0x821A249C;
		  /* 821A249Ch */ case   19:  		/* li R7, 0 */
		/* 821A249Ch case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A249Ch case   19:*/		return 0x821A24A0;
		  /* 821A24A0h */ case   20:  		/* li R6, 1 */
		/* 821A24A0h case   20:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A24A0h case   20:*/		return 0x821A24A4;
		  /* 821A24A4h */ case   21:  		/* mr R5, R22 */
		/* 821A24A4h case   21:*/		regs.R5 = regs.R22;
		/* 821A24A4h case   21:*/		return 0x821A24A8;
		  /* 821A24A8h */ case   22:  		/* bl 571104 */
		/* 821A24A8h case   22:*/		regs.LR = 0x821A24AC; return 0x8222DB88;
		/* 821A24A8h case   22:*/		return 0x821A24AC;
		  /* 821A24ACh */ case   23:  		/* b 12 */
		/* 821A24ACh case   23:*/		return 0x821A24B8;
		/* 821A24ACh case   23:*/		return 0x821A24B0;
	}
	return 0x821A24B0;
} // Block from 821A2450h-821A24B0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821A24B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A24B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A24B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A24B0);
		  /* 821A24B0h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 821A24B0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821A24B0h case    0:*/		return 0x821A24B4;
		  /* 821A24B4h */ case    1:  		/* bc 4, CR6_EQ, 1596 */
		/* 821A24B4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A2AF0;  }
		/* 821A24B4h case    1:*/		return 0x821A24B8;
	}
	return 0x821A24B8;
} // Block from 821A24B0h-821A24B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A24B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A24B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A24B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A24B8);
		  /* 821A24B8h */ case    0:  		/* mr R7, R21 */
		/* 821A24B8h case    0:*/		regs.R7 = regs.R21;
		/* 821A24B8h case    0:*/		return 0x821A24BC;
		  /* 821A24BCh */ case    1:  		/* mr R6, R22 */
		/* 821A24BCh case    1:*/		regs.R6 = regs.R22;
		/* 821A24BCh case    1:*/		return 0x821A24C0;
		  /* 821A24C0h */ case    2:  		/* mr R5, R14 */
		/* 821A24C0h case    2:*/		regs.R5 = regs.R14;
		/* 821A24C0h case    2:*/		return 0x821A24C4;
		  /* 821A24C4h */ case    3:  		/* mr R4, R26 */
		/* 821A24C4h case    3:*/		regs.R4 = regs.R26;
		/* 821A24C4h case    3:*/		return 0x821A24C8;
		  /* 821A24C8h */ case    4:  		/* mr R3, R31 */
		/* 821A24C8h case    4:*/		regs.R3 = regs.R31;
		/* 821A24C8h case    4:*/		return 0x821A24CC;
		  /* 821A24CCh */ case    5:  		/* bl -28532 */
		/* 821A24CCh case    5:*/		regs.LR = 0x821A24D0; return 0x8219B558;
		/* 821A24CCh case    5:*/		return 0x821A24D0;
		  /* 821A24D0h */ case    6:  		/* mr R6, R3 */
		/* 821A24D0h case    6:*/		regs.R6 = regs.R3;
		/* 821A24D0h case    6:*/		return 0x821A24D4;
		  /* 821A24D4h */ case    7:  		/* stw R3, <#[R1 + 80]> */
		/* 821A24D4h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000050) );
		/* 821A24D4h case    7:*/		return 0x821A24D8;
		  /* 821A24D8h */ case    8:  		/* li R5, 0 */
		/* 821A24D8h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A24D8h case    8:*/		return 0x821A24DC;
		  /* 821A24DCh */ case    9:  		/* mr R3, R31 */
		/* 821A24DCh case    9:*/		regs.R3 = regs.R31;
		/* 821A24DCh case    9:*/		return 0x821A24E0;
		  /* 821A24E0h */ case   10:  		/* lwz R4, <#[R14 + 28]> */
		/* 821A24E0h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R14 + 0x0000001C) );
		/* 821A24E0h case   10:*/		return 0x821A24E4;
		  /* 821A24E4h */ case   11:  		/* bl 534044 */
		/* 821A24E4h case   11:*/		regs.LR = 0x821A24E8; return 0x82224B00;
		/* 821A24E4h case   11:*/		return 0x821A24E8;
		  /* 821A24E8h */ case   12:  		/* mr R23, R3 */
		/* 821A24E8h case   12:*/		regs.R23 = regs.R3;
		/* 821A24E8h case   12:*/		return 0x821A24EC;
		  /* 821A24ECh */ case   13:  		/* cmplwi CR6, R22, 0 */
		/* 821A24ECh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821A24ECh case   13:*/		return 0x821A24F0;
		  /* 821A24F0h */ case   14:  		/* bc 4, CR6_EQ, 12 */
		/* 821A24F0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821A24FC;  }
		/* 821A24F0h case   14:*/		return 0x821A24F4;
		  /* 821A24F4h */ case   15:  		/* mr R15, R26 */
		/* 821A24F4h case   15:*/		regs.R15 = regs.R26;
		/* 821A24F4h case   15:*/		return 0x821A24F8;
		  /* 821A24F8h */ case   16:  		/* b 12 */
		/* 821A24F8h case   16:*/		return 0x821A2504;
		/* 821A24F8h case   16:*/		return 0x821A24FC;
	}
	return 0x821A24FC;
} // Block from 821A24B8h-821A24FCh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A24FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A24FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A24FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A24FC);
		  /* 821A24FCh */ case    0:  		/* mr R15, R22 */
		/* 821A24FCh case    0:*/		regs.R15 = regs.R22;
		/* 821A24FCh case    0:*/		return 0x821A2500;
		  /* 821A2500h */ case    1:  		/* mr R21, R14 */
		/* 821A2500h case    1:*/		regs.R21 = regs.R14;
		/* 821A2500h case    1:*/		return 0x821A2504;
	}
	return 0x821A2504;
} // Block from 821A24FCh-821A2504h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A2504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2504);
		  /* 821A2504h */ case    0:  		/* rlwinm R11, R15, 0, 0, 30 */
		/* 821A2504h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R15);
		/* 821A2504h case    0:*/		return 0x821A2508;
		  /* 821A2508h */ case    1:  		/* rlwinm R10, R23, 0, 0, 30 */
		/* 821A2508h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R23);
		/* 821A2508h case    1:*/		return 0x821A250C;
		  /* 821A250Ch */ case    2:  		/* addi R11, R11, 36 */
		/* 821A250Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A250Ch case    2:*/		return 0x821A2510;
		  /* 821A2510h */ case    3:  		/* addi R10, R10, 36 */
		/* 821A2510h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A2510h case    3:*/		return 0x821A2514;
		  /* 821A2514h */ case    4:  		/* addi R8, R11, -36 */
		/* 821A2514h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A2514h case    4:*/		return 0x821A2518;
		  /* 821A2518h */ case    5:  		/* addi R7, R10, -36 */
		/* 821A2518h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821A2518h case    5:*/		return 0x821A251C;
		  /* 821A251Ch */ case    6:  		/* addi R9, R10, 4 */
		/* 821A251Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A251Ch case    6:*/		return 0x821A2520;
		  /* 821A2520h */ case    7:  		/* lwz R6, <#[R11]> */
		/* 821A2520h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2520h case    7:*/		return 0x821A2524;
		  /* 821A2524h */ case    8:  		/* li R16, 0 */
		/* 821A2524h case    8:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 821A2524h case    8:*/		return 0x821A2528;
		  /* 821A2528h */ case    9:  		/* li R24, 0 */
		/* 821A2528h case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821A2528h case    9:*/		return 0x821A252C;
		  /* 821A252Ch */ case   10:  		/* cmplwi CR6, R26, 0 */
		/* 821A252Ch case   10:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821A252Ch case   10:*/		return 0x821A2530;
		  /* 821A2530h */ case   11:  		/* stw R6, <#[R10]> */
		/* 821A2530h case   11:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821A2530h case   11:*/		return 0x821A2534;
		  /* 821A2534h */ case   12:  		/* lwz R6, <#[R11]> */
		/* 821A2534h case   12:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2534h case   12:*/		return 0x821A2538;
		  /* 821A2538h */ case   13:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821A2538h case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821A2538h case   13:*/		return 0x821A253C;
		  /* 821A253Ch */ case   14:  		/* stw R7, <#[R6]> */
		/* 821A253Ch case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821A253Ch case   14:*/		return 0x821A2540;
		  /* 821A2540h */ case   15:  		/* stw R8, <#[R10 + 4]> */
		/* 821A2540h case   15:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A2540h case   15:*/		return 0x821A2544;
		  /* 821A2544h */ case   16:  		/* stw R9, <#[R11]> */
		/* 821A2544h case   16:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2544h case   16:*/		return 0x821A2548;
		  /* 821A2548h */ case   17:  		/* bc 12, CR6_EQ, 464 */
		/* 821A2548h case   17:*/		if ( regs.CR[6].eq ) { return 0x821A2718;  }
		/* 821A2548h case   17:*/		return 0x821A254C;
		  /* 821A254Ch */ case   18:  		/* cmplwi CR6, R22, 0 */
		/* 821A254Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R22,0x00000000);
		/* 821A254Ch case   18:*/		return 0x821A2550;
		  /* 821A2550h */ case   19:  		/* bc 12, CR6_EQ, 456 */
		/* 821A2550h case   19:*/		if ( regs.CR[6].eq ) { return 0x821A2718;  }
		/* 821A2550h case   19:*/		return 0x821A2554;
		  /* 821A2554h */ case   20:  		/* cmplw CR6, R26, R22 */
		/* 821A2554h case   20:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R22);
		/* 821A2554h case   20:*/		return 0x821A2558;
		  /* 821A2558h */ case   21:  		/* bc 12, CR6_EQ, 64 */
		/* 821A2558h case   21:*/		if ( regs.CR[6].eq ) { return 0x821A2598;  }
		/* 821A2558h case   21:*/		return 0x821A255C;
		  /* 821A255Ch */ case   22:  		/* li R30, 0 */
		/* 821A255Ch case   22:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A255Ch case   22:*/		return 0x821A2560;
		  /* 821A2560h */ case   23:  		/* addi R31, R23, 44 */
		/* 821A2560h case   23:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R23,0x2C);
		/* 821A2560h case   23:*/		return 0x821A2564;
		  /* 821A2564h */ case   24:  		/* subf R29, R23, R26 */
		/* 821A2564h case   24:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R23,regs.R26);
		/* 821A2564h case   24:*/		return 0x821A2568;
		  /* 821A2568h */ case   25:  		/* lwz R11, <#[R26 + 8]> */
		/* 821A2568h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821A2568h case   25:*/		return 0x821A256C;
		  /* 821A256Ch */ case   26:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A256Ch case   26:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A256Ch case   26:*/		return 0x821A2570;
		  /* 821A2570h */ case   27:  		/* cmplw CR6, R30, R11 */
		/* 821A2570h case   27:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821A2570h case   27:*/		return 0x821A2574;
		  /* 821A2574h */ case   28:  		/* bc 4, CR6_LT, 32 */
		/* 821A2574h case   28:*/		if ( !regs.CR[6].lt ) { return 0x821A2594;  }
		/* 821A2574h case   28:*/		return 0x821A2578;
		  /* 821A2578h */ case   29:  		/* mr R3, R23 */
		/* 821A2578h case   29:*/		regs.R3 = regs.R23;
		/* 821A2578h case   29:*/		return 0x821A257C;
		  /* 821A257Ch */ case   30:  		/* lwzx R4, <#[R29 + R31]> */
		/* 821A257Ch case   30:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 821A257Ch case   30:*/		return 0x821A2580;
		  /* 821A2580h */ case   31:  		/* bl -172984 */
		/* 821A2580h case   31:*/		regs.LR = 0x821A2584; return 0x821781C8;
		/* 821A2580h case   31:*/		return 0x821A2584;
		  /* 821A2584h */ case   32:  		/* stw R3, <#[R31]> */
		/* 821A2584h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821A2584h case   32:*/		return 0x821A2588;
		  /* 821A2588h */ case   33:  		/* addi R30, R30, 1 */
		/* 821A2588h case   33:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A2588h case   33:*/		return 0x821A258C;
		  /* 821A258Ch */ case   34:  		/* addi R31, R31, 4 */
		/* 821A258Ch case   34:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821A258Ch case   34:*/		return 0x821A2590;
		  /* 821A2590h */ case   35:  		/* b -40 */
		/* 821A2590h case   35:*/		return 0x821A2568;
		/* 821A2590h case   35:*/		return 0x821A2594;
	}
	return 0x821A2594;
} // Block from 821A2504h-821A2594h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821A2594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2594);
		  /* 821A2594h */ case    0:  		/* mr R24, R11 */
		/* 821A2594h case    0:*/		regs.R24 = regs.R11;
		/* 821A2594h case    0:*/		return 0x821A2598;
	}
	return 0x821A2598;
} // Block from 821A2594h-821A2598h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A2598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2598);
		  /* 821A2598h */ case    0:  		/* addi R11, R24, 10 */
		/* 821A2598h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xA);
		/* 821A2598h case    0:*/		return 0x821A259C;
		  /* 821A259Ch */ case    1:  		/* li R21, 0 */
		/* 821A259Ch case    1:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821A259Ch case    1:*/		return 0x821A25A0;
		  /* 821A25A0h */ case    2:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A25A0h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A25A0h case    2:*/		return 0x821A25A4;
		  /* 821A25A4h */ case    3:  		/* li R31, 0 */
		/* 821A25A4h case    3:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A25A4h case    3:*/		return 0x821A25A8;
		  /* 821A25A8h */ case    4:  		/* add R27, R11, R23 */
		/* 821A25A8h case    4:*/		cpu::op::add<0>(regs,&regs.R27,regs.R11,regs.R23);
		/* 821A25A8h case    4:*/		return 0x821A25AC;
		  /* 821A25ACh */ case    5:  		/* addi R25, R22, 44 */
		/* 821A25ACh case    5:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R22,0x2C);
		/* 821A25ACh case    5:*/		return 0x821A25B0;
		  /* 821A25B0h */ case    6:  		/* li R20, 3 */
		/* 821A25B0h case    6:*/		cpu::op::li<0>(regs,&regs.R20,0x3);
		/* 821A25B0h case    6:*/		return 0x821A25B4;
		  /* 821A25B4h */ case    7:  		/* lwz R11, <#[R22 + 8]> */
		/* 821A25B4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A25B4h case    7:*/		return 0x821A25B8;
		  /* 821A25B8h */ case    8:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A25B8h case    8:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A25B8h case    8:*/		return 0x821A25BC;
		  /* 821A25BCh */ case    9:  		/* cmplw CR6, R21, R11 */
		/* 821A25BCh case    9:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 821A25BCh case    9:*/		return 0x821A25C0;
		  /* 821A25C0h */ case   10:  		/* bc 4, CR6_LT, 160 */
		/* 821A25C0h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821A2660;  }
		/* 821A25C0h case   10:*/		return 0x821A25C4;
		  /* 821A25C4h */ case   11:  		/* lwz R28, <#[R25]> */
		/* 821A25C4h case   11:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R25 + 0x00000000) );
		/* 821A25C4h case   11:*/		return 0x821A25C8;
		  /* 821A25C8h */ case   12:  		/* lwz R11, <#[R28 + 12]> */
		/* 821A25C8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A25C8h case   12:*/		return 0x821A25CC;
		  /* 821A25CCh */ case   13:  		/* cmplw CR6, R11, R14 */
		/* 821A25CCh case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R14);
		/* 821A25CCh case   13:*/		return 0x821A25D0;
		  /* 821A25D0h */ case   14:  		/* bc 4, CR6_EQ, 92 */
		/* 821A25D0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821A262C;  }
		/* 821A25D0h case   14:*/		return 0x821A25D4;
		  /* 821A25D4h */ case   15:  		/* li R30, 0 */
		/* 821A25D4h case   15:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A25D4h case   15:*/		return 0x821A25D8;
		  /* 821A25D8h */ case   16:  		/* cmplwi CR6, R24, 0 */
		/* 821A25D8h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821A25D8h case   16:*/		return 0x821A25DC;
		  /* 821A25DCh */ case   17:  		/* bc 12, CR6_EQ, 64 */
		/* 821A25DCh case   17:*/		if ( regs.CR[6].eq ) { return 0x821A261C;  }
		/* 821A25DCh case   17:*/		return 0x821A25E0;
		  /* 821A25E0h */ case   18:  		/* addi R29, R23, 44 */
		/* 821A25E0h case   18:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R23,0x2C);
		/* 821A25E0h case   18:*/		return 0x821A25E4;
		  /* 821A25E4h */ case   19:  		/* mr R4, R28 */
		/* 821A25E4h case   19:*/		regs.R4 = regs.R28;
		/* 821A25E4h case   19:*/		return 0x821A25E8;
		  /* 821A25E8h */ case   20:  		/* lwz R3, <#[R29]> */
		/* 821A25E8h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 821A25E8h case   20:*/		return 0x821A25EC;
		  /* 821A25ECh */ case   21:  		/* bl -254820 */
		/* 821A25ECh case   21:*/		regs.LR = 0x821A25F0; return 0x82164288;
		/* 821A25ECh case   21:*/		return 0x821A25F0;
		  /* 821A25F0h */ case   22:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A25F0h case   22:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A25F0h case   22:*/		return 0x821A25F4;
		  /* 821A25F4h */ case   23:  		/* bc 4, CR0_EQ, 24 */
		/* 821A25F4h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821A260C;  }
		/* 821A25F4h case   23:*/		return 0x821A25F8;
		  /* 821A25F8h */ case   24:  		/* addi R30, R30, 1 */
		/* 821A25F8h case   24:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A25F8h case   24:*/		return 0x821A25FC;
		  /* 821A25FCh */ case   25:  		/* addi R29, R29, 4 */
		/* 821A25FCh case   25:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821A25FCh case   25:*/		return 0x821A2600;
		  /* 821A2600h */ case   26:  		/* cmplw CR6, R30, R24 */
		/* 821A2600h case   26:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 821A2600h case   26:*/		return 0x821A2604;
		  /* 821A2604h */ case   27:  		/* bc 12, CR6_LT, -32 */
		/* 821A2604h case   27:*/		if ( regs.CR[6].lt ) { return 0x821A25E4;  }
		/* 821A2604h case   27:*/		return 0x821A2608;
		  /* 821A2608h */ case   28:  		/* b 20 */
		/* 821A2608h case   28:*/		return 0x821A261C;
		/* 821A2608h case   28:*/		return 0x821A260C;
	}
	return 0x821A260C;
} // Block from 821A2598h-821A260Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A260Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A260C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A260C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A260C);
		  /* 821A260Ch */ case    0:  		/* slw R11, R20, R31 */
		/* 821A260Ch case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R31);
		/* 821A260Ch case    0:*/		return 0x821A2610;
		  /* 821A2610h */ case    1:  		/* slw R10, R30, R31 */
		/* 821A2610h case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R30,regs.R31);
		/* 821A2610h case    1:*/		return 0x821A2614;
		  /* 821A2614h */ case    2:  		/* andc R11, R16, R11 */
		/* 821A2614h case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R16,regs.R11);
		/* 821A2614h case    2:*/		return 0x821A2618;
		  /* 821A2618h */ case    3:  		/* or R16, R11, R10 */
		/* 821A2618h case    3:*/		cpu::op::or<0>(regs,&regs.R16,regs.R11,regs.R10);
		/* 821A2618h case    3:*/		return 0x821A261C;
	}
	return 0x821A261C;
} // Block from 821A260Ch-821A261Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A261Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A261C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A261C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A261C);
		  /* 821A261Ch */ case    0:  		/* cmplw CR6, R26, R22 */
		/* 821A261Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R22);
		/* 821A261Ch case    0:*/		return 0x821A2620;
		  /* 821A2620h */ case    1:  		/* bc 4, CR6_EQ, 48 */
		/* 821A2620h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A2650;  }
		/* 821A2620h case    1:*/		return 0x821A2624;
		  /* 821A2624h */ case    2:  		/* cmplw CR6, R30, R24 */
		/* 821A2624h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R24);
		/* 821A2624h case    2:*/		return 0x821A2628;
		  /* 821A2628h */ case    3:  		/* bc 12, CR6_LT, 40 */
		/* 821A2628h case    3:*/		if ( regs.CR[6].lt ) { return 0x821A2650;  }
		/* 821A2628h case    3:*/		return 0x821A262C;
	}
	return 0x821A262C;
} // Block from 821A261Ch-821A262Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A262Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A262C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A262C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A262C);
		  /* 821A262Ch */ case    0:  		/* mr R4, R28 */
		/* 821A262Ch case    0:*/		regs.R4 = regs.R28;
		/* 821A262Ch case    0:*/		return 0x821A2630;
		  /* 821A2630h */ case    1:  		/* mr R3, R23 */
		/* 821A2630h case    1:*/		regs.R3 = regs.R23;
		/* 821A2630h case    1:*/		return 0x821A2634;
		  /* 821A2634h */ case    2:  		/* bl -173164 */
		/* 821A2634h case    2:*/		regs.LR = 0x821A2638; return 0x821781C8;
		/* 821A2634h case    2:*/		return 0x821A2638;
		  /* 821A2638h */ case    3:  		/* slw R11, R20, R31 */
		/* 821A2638h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R31);
		/* 821A2638h case    3:*/		return 0x821A263C;
		  /* 821A263Ch */ case    4:  		/* slw R10, R24, R31 */
		/* 821A263Ch case    4:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R24,regs.R31);
		/* 821A263Ch case    4:*/		return 0x821A2640;
		  /* 821A2640h */ case    5:  		/* stwu R3, <#[R27 + 4]> */
		/* 821A2640h case    5:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R27 + 0x00000004) );
		regs.R27 = (uint32)(regs.R27 + 0x00000004);
		/* 821A2640h case    5:*/		return 0x821A2644;
		  /* 821A2644h */ case    6:  		/* andc R11, R16, R11 */
		/* 821A2644h case    6:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R16,regs.R11);
		/* 821A2644h case    6:*/		return 0x821A2648;
	}
	return 0x821A2648;
} // Block from 821A262Ch-821A2648h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A2648h
// Function '?FindComputedValue@Compiler@D3DXShader@@AAAPAVDependency@2@PAVInstruction@2@PAV32@0PAUCombineDependenciesState@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2648( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2648) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2648);
		  /* 821A2648h */ case    0:  		/* addi R24, R24, 1 */
		/* 821A2648h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821A2648h case    0:*/		return 0x821A264C;
		  /* 821A264Ch */ case    1:  		/* or R16, R11, R10 */
		/* 821A264Ch case    1:*/		cpu::op::or<0>(regs,&regs.R16,regs.R11,regs.R10);
		/* 821A264Ch case    1:*/		return 0x821A2650;
	}
	return 0x821A2650;
} // Block from 821A2648h-821A2650h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A2650h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2650( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2650) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2650);
		  /* 821A2650h */ case    0:  		/* addi R21, R21, 1 */
		/* 821A2650h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 821A2650h case    0:*/		return 0x821A2654;
		  /* 821A2654h */ case    1:  		/* addi R25, R25, 4 */
		/* 821A2654h case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x4);
		/* 821A2654h case    1:*/		return 0x821A2658;
		  /* 821A2658h */ case    2:  		/* addi R31, R31, 2 */
		/* 821A2658h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 821A2658h case    2:*/		return 0x821A265C;
		  /* 821A265Ch */ case    3:  		/* b -168 */
		/* 821A265Ch case    3:*/		return 0x821A25B4;
		/* 821A265Ch case    3:*/		return 0x821A2660;
	}
	return 0x821A2660;
} // Block from 821A2650h-821A2660h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A2660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2660);
		  /* 821A2660h */ case    0:  		/* cmplw CR6, R26, R22 */
		/* 821A2660h case    0:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R22);
		/* 821A2660h case    0:*/		return 0x821A2664;
		  /* 821A2664h */ case    1:  		/* bc 12, CR6_EQ, 536 */
		/* 821A2664h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A287C;  }
		/* 821A2664h case    1:*/		return 0x821A2668;
		  /* 821A2668h */ case    2:  		/* addi R8, R26, 4 */
		/* 821A2668h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R26,0x4);
		/* 821A2668h case    2:*/		return 0x821A266C;
		  /* 821A266Ch */ case    3:  		/* lwz R11, <#[R8]> */
		/* 821A266Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A266Ch case    3:*/		return 0x821A2670;
		  /* 821A2670h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821A2670h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A2670h case    4:*/		return 0x821A2674;
		  /* 821A2674h */ case    5:  		/* bc 12, CR6_EQ, 92 */
		/* 821A2674h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A26D0;  }
		/* 821A2674h case    5:*/		return 0x821A2678;
		  /* 821A2678h */ case    6:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A2678h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A2678h case    6:*/		return 0x821A267C;
		  /* 821A267Ch */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821A267Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A267Ch case    7:*/		return 0x821A2680;
		  /* 821A2680h */ case    8:  		/* bc 12, CR6_EQ, 60 */
		/* 821A2680h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A26BC;  }
		/* 821A2680h case    8:*/		return 0x821A2684;
		  /* 821A2684h */ case    9:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A2684h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A2684h case    9:*/		return 0x821A2688;
		  /* 821A2688h */ case   10:  		/* addi R10, R10, 4 */
		/* 821A2688h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A2688h case   10:*/		return 0x821A268C;
		  /* 821A268Ch */ case   11:  		/* lwz R9, <#[R10]> */
		/* 821A268Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A268Ch case   11:*/		return 0x821A2690;
		  /* 821A2690h */ case   12:  		/* b 12 */
		/* 821A2690h case   12:*/		return 0x821A269C;
		/* 821A2690h case   12:*/		return 0x821A2694;
		  /* 821A2694h */ case   13:  		/* addi R10, R9, 8 */
		/* 821A2694h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A2694h case   13:*/		return 0x821A2698;
		  /* 821A2698h */ case   14:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A2698h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A2698h case   14:*/		return 0x821A269C;
	}
	return 0x821A269C;
} // Block from 821A2660h-821A269Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A269Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A269C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A269C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A269C);
		  /* 821A269Ch */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A269Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A269Ch case    0:*/		return 0x821A26A0;
		  /* 821A26A0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A26A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A2694;  }
		/* 821A26A0h case    1:*/		return 0x821A26A4;
		  /* 821A26A4h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A26A4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A26A4h case    2:*/		return 0x821A26A8;
		  /* 821A26A8h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A26A8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A26A8h case    3:*/		return 0x821A26AC;
		  /* 821A26ACh */ case    4:  		/* lwz R10, <#[R23 + 4]> */
		/* 821A26ACh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 821A26ACh case    4:*/		return 0x821A26B0;
		  /* 821A26B0h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A26B0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A26B0h case    5:*/		return 0x821A26B4;
		  /* 821A26B4h */ case    6:  		/* stw R11, <#[R23 + 4]> */
		/* 821A26B4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821A26B4h case    6:*/		return 0x821A26B8;
		  /* 821A26B8h */ case    7:  		/* stw R23, <#[R11 + 12]> */
		/* 821A26B8h case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A26B8h case    7:*/		return 0x821A26BC;
	}
	return 0x821A26BC;
} // Block from 821A269Ch-821A26BCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A26BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A26BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A26BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A26BC);
		  /* 821A26BCh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A26BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A26BCh case    0:*/		return 0x821A26C0;
		  /* 821A26C0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A26C0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A26C0h case    1:*/		return 0x821A26C4;
		  /* 821A26C4h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821A26C4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A266C;  }
		/* 821A26C4h case    2:*/		return 0x821A26C8;
		  /* 821A26C8h */ case    3:  		/* addi R8, R11, 8 */
		/* 821A26C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821A26C8h case    3:*/		return 0x821A26CC;
		  /* 821A26CCh */ case    4:  		/* b -96 */
		/* 821A26CCh case    4:*/		return 0x821A266C;
		/* 821A26CCh case    4:*/		return 0x821A26D0;
	}
	return 0x821A26D0;
} // Block from 821A26BCh-821A26D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A26D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A26D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A26D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A26D0);
		  /* 821A26D0h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A26D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A26D0h case    0:*/		return 0x821A26D4;
		  /* 821A26D4h */ case    1:  		/* lwz R31, <#[R1 + 260]> */
		/* 821A26D4h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000104) );
		/* 821A26D4h case    1:*/		return 0x821A26D8;
		  /* 821A26D8h */ case    2:  		/* cmplw CR6, R24, R11 */
		/* 821A26D8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821A26D8h case    2:*/		return 0x821A26DC;
		  /* 821A26DCh */ case    3:  		/* bc 4, CR6_LT, 36 */
		/* 821A26DCh case    3:*/		if ( !regs.CR[6].lt ) { return 0x821A2700;  }
		/* 821A26DCh case    3:*/		return 0x821A26E0;
		  /* 821A26E0h */ case    4:  		/* mr R7, R14 */
		/* 821A26E0h case    4:*/		regs.R7 = regs.R14;
		/* 821A26E0h case    4:*/		return 0x821A26E4;
		  /* 821A26E4h */ case    5:  		/* lwz R8, <#[R1 + 300]> */
		/* 821A26E4h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000012C) );
		/* 821A26E4h case    5:*/		return 0x821A26E8;
		  /* 821A26E8h */ case    6:  		/* mr R6, R24 */
		/* 821A26E8h case    6:*/		regs.R6 = regs.R24;
		/* 821A26E8h case    6:*/		return 0x821A26EC;
		  /* 821A26ECh */ case    7:  		/* mr R5, R23 */
		/* 821A26ECh case    7:*/		regs.R5 = regs.R23;
		/* 821A26ECh case    7:*/		return 0x821A26F0;
		  /* 821A26F0h */ case    8:  		/* mr R4, R26 */
		/* 821A26F0h case    8:*/		regs.R4 = regs.R26;
		/* 821A26F0h case    8:*/		return 0x821A26F4;
		  /* 821A26F4h */ case    9:  		/* mr R3, R31 */
		/* 821A26F4h case    9:*/		regs.R3 = regs.R31;
		/* 821A26F4h case    9:*/		return 0x821A26F8;
		  /* 821A26F8h */ case   10:  		/* bl -21592 */
		/* 821A26F8h case   10:*/		regs.LR = 0x821A26FC; return 0x8219D2A0;
		/* 821A26F8h case   10:*/		return 0x821A26FC;
		  /* 821A26FCh */ case   11:  		/* mr R24, R3 */
		/* 821A26FCh case   11:*/		regs.R24 = regs.R3;
		/* 821A26FCh case   11:*/		return 0x821A2700;
	}
	return 0x821A2700;
} // Block from 821A26D0h-821A2700h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A2700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2700);
		  /* 821A2700h */ case    0:  		/* li R6, 1 */
		/* 821A2700h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A2700h case    0:*/		return 0x821A2704;
		  /* 821A2704h */ case    1:  		/* lwz R5, <#[R31 + 652]> */
		/* 821A2704h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821A2704h case    1:*/		return 0x821A2708;
		  /* 821A2708h */ case    2:  		/* mr R4, R26 */
		/* 821A2708h case    2:*/		regs.R4 = regs.R26;
		/* 821A2708h case    2:*/		return 0x821A270C;
		  /* 821A270Ch */ case    3:  		/* mr R3, R31 */
		/* 821A270Ch case    3:*/		regs.R3 = regs.R31;
		/* 821A270Ch case    3:*/		return 0x821A2710;
		  /* 821A2710h */ case    4:  		/* bl 560312 */
		/* 821A2710h case    4:*/		regs.LR = 0x821A2714; return 0x8222B3C8;
		/* 821A2710h case    4:*/		return 0x821A2714;
		  /* 821A2714h */ case    5:  		/* b 360 */
		/* 821A2714h case    5:*/		return 0x821A287C;
		/* 821A2714h case    5:*/		return 0x821A2718;
	}
	return 0x821A2718;
} // Block from 821A2700h-821A2718h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A2718h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2718( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2718) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2718);
		  /* 821A2718h */ case    0:  		/* lwz R11, <#[R15 + 8]> */
		/* 821A2718h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 821A2718h case    0:*/		return 0x821A271C;
		  /* 821A271Ch */ case    1:  		/* rlwinm. R11, R11, 13, 29, 31 */
		/* 821A271Ch case    1:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A271Ch case    1:*/		return 0x821A2720;
		  /* 821A2720h */ case    2:  		/* bc 12, CR0_EQ, 144 */
		/* 821A2720h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A27B0;  }
		/* 821A2720h case    2:*/		return 0x821A2724;
		  /* 821A2724h */ case    3:  		/* addi R25, R23, 44 */
		/* 821A2724h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R23,0x2C);
		/* 821A2724h case    3:*/		return 0x821A2728;
		  /* 821A2728h */ case    4:  		/* li R30, 0 */
		/* 821A2728h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A2728h case    4:*/		return 0x821A272C;
		  /* 821A272Ch */ case    5:  		/* addi R22, R25, -4 */
		/* 821A272Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R25,0xFFFFFFFC);
		/* 821A272Ch case    5:*/		return 0x821A2730;
		  /* 821A2730h */ case    6:  		/* addi R31, R15, 44 */
		/* 821A2730h case    6:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R15,0x2C);
		/* 821A2730h case    6:*/		return 0x821A2734;
		  /* 821A2734h */ case    7:  		/* mr R27, R11 */
		/* 821A2734h case    7:*/		regs.R27 = regs.R11;
		/* 821A2734h case    7:*/		return 0x821A2738;
		  /* 821A2738h */ case    8:  		/* li R20, 3 */
		/* 821A2738h case    8:*/		cpu::op::li<0>(regs,&regs.R20,0x3);
		/* 821A2738h case    8:*/		return 0x821A273C;
		  /* 821A273Ch */ case    9:  		/* li R28, 0 */
		/* 821A273Ch case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A273Ch case    9:*/		return 0x821A2740;
		  /* 821A2740h */ case   10:  		/* cmplwi CR6, R24, 0 */
		/* 821A2740h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821A2740h case   10:*/		return 0x821A2744;
		  /* 821A2744h */ case   11:  		/* bc 12, CR6_EQ, 48 */
		/* 821A2744h case   11:*/		if ( regs.CR[6].eq ) { return 0x821A2774;  }
		/* 821A2744h case   11:*/		return 0x821A2748;
		  /* 821A2748h */ case   12:  		/* lwz R26, <#[R31]> */
		/* 821A2748h case   12:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R31 + 0x00000000) );
		/* 821A2748h case   12:*/		return 0x821A274C;
		  /* 821A274Ch */ case   13:  		/* mr R29, R25 */
		/* 821A274Ch case   13:*/		regs.R29 = regs.R25;
		/* 821A274Ch case   13:*/		return 0x821A2750;
		  /* 821A2750h */ case   14:  		/* mr R3, R26 */
		/* 821A2750h case   14:*/		regs.R3 = regs.R26;
		/* 821A2750h case   14:*/		return 0x821A2754;
		  /* 821A2754h */ case   15:  		/* lwz R4, <#[R29]> */
		/* 821A2754h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000000) );
		/* 821A2754h case   15:*/		return 0x821A2758;
		  /* 821A2758h */ case   16:  		/* bl -255184 */
		/* 821A2758h case   16:*/		regs.LR = 0x821A275C; return 0x82164288;
		/* 821A2758h case   16:*/		return 0x821A275C;
		  /* 821A275Ch */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A275Ch case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A275Ch case   17:*/		return 0x821A2760;
		  /* 821A2760h */ case   18:  		/* bc 4, CR0_EQ, 20 */
		/* 821A2760h case   18:*/		if ( !regs.CR[0].eq ) { return 0x821A2774;  }
		/* 821A2760h case   18:*/		return 0x821A2764;
		  /* 821A2764h */ case   19:  		/* addi R28, R28, 1 */
		/* 821A2764h case   19:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821A2764h case   19:*/		return 0x821A2768;
		  /* 821A2768h */ case   20:  		/* addi R29, R29, 4 */
		/* 821A2768h case   20:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821A2768h case   20:*/		return 0x821A276C;
		  /* 821A276Ch */ case   21:  		/* cmplw CR6, R28, R24 */
		/* 821A276Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R24);
		/* 821A276Ch case   21:*/		return 0x821A2770;
		  /* 821A2770h */ case   22:  		/* bc 12, CR6_LT, -32 */
		/* 821A2770h case   22:*/		if ( regs.CR[6].lt ) { return 0x821A2750;  }
		/* 821A2770h case   22:*/		return 0x821A2774;
	}
	return 0x821A2774;
} // Block from 821A2718h-821A2774h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A2774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2774);
		  /* 821A2774h */ case    0:  		/* cmplw CR6, R28, R24 */
		/* 821A2774h case    0:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R24);
		/* 821A2774h case    0:*/		return 0x821A2778;
		  /* 821A2778h */ case    1:  		/* bc 4, CR6_EQ, 24 */
		/* 821A2778h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A2790;  }
		/* 821A2778h case    1:*/		return 0x821A277C;
		  /* 821A277Ch */ case    2:  		/* mr R3, R23 */
		/* 821A277Ch case    2:*/		regs.R3 = regs.R23;
		/* 821A277Ch case    2:*/		return 0x821A2780;
		  /* 821A2780h */ case    3:  		/* lwz R4, <#[R31]> */
		/* 821A2780h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821A2780h case    3:*/		return 0x821A2784;
		  /* 821A2784h */ case    4:  		/* bl -173500 */
		/* 821A2784h case    4:*/		regs.LR = 0x821A2788; return 0x821781C8;
		/* 821A2784h case    4:*/		return 0x821A2788;
		  /* 821A2788h */ case    5:  		/* addi R24, R24, 1 */
		/* 821A2788h case    5:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821A2788h case    5:*/		return 0x821A278C;
		  /* 821A278Ch */ case    6:  		/* stwu R3, <#[R22 + 4]> */
		/* 821A278Ch case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R22 + 0x00000004) );
		regs.R22 = (uint32)(regs.R22 + 0x00000004);
		/* 821A278Ch case    6:*/		return 0x821A2790;
	}
	return 0x821A2790;
} // Block from 821A2774h-821A2790h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A2790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2790);
		  /* 821A2790h */ case    0:  		/* slw R11, R20, R30 */
		/* 821A2790h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R30);
		/* 821A2790h case    0:*/		return 0x821A2794;
		  /* 821A2794h */ case    1:  		/* slw R10, R28, R30 */
		/* 821A2794h case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R28,regs.R30);
		/* 821A2794h case    1:*/		return 0x821A2798;
		  /* 821A2798h */ case    2:  		/* andc R11, R16, R11 */
		/* 821A2798h case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R16,regs.R11);
		/* 821A2798h case    2:*/		return 0x821A279C;
		  /* 821A279Ch */ case    3:  		/* addic. R27, R27, -1 */
		/* 821A279Ch case    3:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821A279Ch case    3:*/		return 0x821A27A0;
		  /* 821A27A0h */ case    4:  		/* or R16, R11, R10 */
		/* 821A27A0h case    4:*/		cpu::op::or<0>(regs,&regs.R16,regs.R11,regs.R10);
		/* 821A27A0h case    4:*/		return 0x821A27A4;
		  /* 821A27A4h */ case    5:  		/* addi R31, R31, 4 */
		/* 821A27A4h case    5:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821A27A4h case    5:*/		return 0x821A27A8;
		  /* 821A27A8h */ case    6:  		/* addi R30, R30, 2 */
		/* 821A27A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821A27A8h case    6:*/		return 0x821A27AC;
		  /* 821A27ACh */ case    7:  		/* bc 4, CR0_EQ, -112 */
		/* 821A27ACh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821A273C;  }
		/* 821A27ACh case    7:*/		return 0x821A27B0;
	}
	return 0x821A27B0;
} // Block from 821A2790h-821A27B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A27B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A27B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A27B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A27B0);
		  /* 821A27B0h */ case    0:  		/* lwz R11, <#[R21 + 8]> */
		/* 821A27B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821A27B0h case    0:*/		return 0x821A27B4;
		  /* 821A27B4h */ case    1:  		/* li R31, 0 */
		/* 821A27B4h case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A27B4h case    1:*/		return 0x821A27B8;
		  /* 821A27B8h */ case    2:  		/* rlwinm. R29, R11, 18, 29, 31 */
		/* 821A27B8h case    2:*/		cpu::op::rlwinm<1,18,29,31>(regs,&regs.R29,regs.R11);
		/* 821A27B8h case    2:*/		return 0x821A27BC;
		  /* 821A27BCh */ case    3:  		/* bc 12, CR0_EQ, 192 */
		/* 821A27BCh case    3:*/		if ( regs.CR[0].eq ) { return 0x821A287C;  }
		/* 821A27BCh case    3:*/		return 0x821A27C0;
		  /* 821A27C0h */ case    4:  		/* addi R11, R24, 10 */
		/* 821A27C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R24,0xA);
		/* 821A27C0h case    4:*/		return 0x821A27C4;
		  /* 821A27C4h */ case    5:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A27C4h case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A27C4h case    5:*/		return 0x821A27C8;
		  /* 821A27C8h */ case    6:  		/* add R30, R11, R23 */
		/* 821A27C8h case    6:*/		cpu::op::add<0>(regs,&regs.R30,regs.R11,regs.R23);
		/* 821A27C8h case    6:*/		return 0x821A27CC;
		  /* 821A27CCh */ case    7:  		/* lwz R11, <#[R1 + 300]> */
		/* 821A27CCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000012C) );
		/* 821A27CCh case    7:*/		return 0x821A27D0;
		  /* 821A27D0h */ case    8:  		/* mr R5, R31 */
		/* 821A27D0h case    8:*/		regs.R5 = regs.R31;
		/* 821A27D0h case    8:*/		return 0x821A27D4;
		  /* 821A27D4h */ case    9:  		/* li R10, 0 */
		/* 821A27D4h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A27D4h case    9:*/		return 0x821A27D8;
		  /* 821A27D8h */ case   10:  		/* cmplw CR6, R21, R11 */
		/* 821A27D8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 821A27D8h case   10:*/		return 0x821A27DC;
		  /* 821A27DCh */ case   11:  		/* bc 4, CR6_EQ, 64 */
		/* 821A27DCh case   11:*/		if ( !regs.CR[6].eq ) { return 0x821A281C;  }
		/* 821A27DCh case   11:*/		return 0x821A27E0;
		  /* 821A27E0h */ case   12:  		/* cmplwi CR6, R19, 0 */
		/* 821A27E0h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821A27E0h case   12:*/		return 0x821A27E4;
		  /* 821A27E4h */ case   13:  		/* bc 12, CR6_EQ, 108 */
		/* 821A27E4h case   13:*/		if ( regs.CR[6].eq ) { return 0x821A2850;  }
		/* 821A27E4h case   13:*/		return 0x821A27E8;
		  /* 821A27E8h */ case   14:  		/* add R9, R31, R17 */
		/* 821A27E8h case   14:*/		cpu::op::add<0>(regs,&regs.R9,regs.R31,regs.R17);
		/* 821A27E8h case   14:*/		return 0x821A27EC;
		  /* 821A27ECh */ case   15:  		/* li R11, 0 */
		/* 821A27ECh case   15:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A27ECh case   15:*/		return 0x821A27F0;
		  /* 821A27F0h */ case   16:  		/* srw R8, R18, R11 */
		/* 821A27F0h case   16:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R18,regs.R11);
		/* 821A27F0h case   16:*/		return 0x821A27F4;
		  /* 821A27F4h */ case   17:  		/* rlwinm R8, R8, 0, 30, 31 */
		/* 821A27F4h case   17:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R8);
		/* 821A27F4h case   17:*/		return 0x821A27F8;
		  /* 821A27F8h */ case   18:  		/* cmpw CR6, R9, R8 */
		/* 821A27F8h case   18:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R8);
		/* 821A27F8h case   18:*/		return 0x821A27FC;
		  /* 821A27FCh */ case   19:  		/* bc 12, CR6_EQ, 24 */
		/* 821A27FCh case   19:*/		if ( regs.CR[6].eq ) { return 0x821A2814;  }
		/* 821A27FCh case   19:*/		return 0x821A2800;
		  /* 821A2800h */ case   20:  		/* addi R10, R10, 1 */
		/* 821A2800h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A2800h case   20:*/		return 0x821A2804;
		  /* 821A2804h */ case   21:  		/* addi R11, R11, 2 */
		/* 821A2804h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A2804h case   21:*/		return 0x821A2808;
		  /* 821A2808h */ case   22:  		/* cmplw CR6, R10, R19 */
		/* 821A2808h case   22:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R19);
		/* 821A2808h case   22:*/		return 0x821A280C;
		  /* 821A280Ch */ case   23:  		/* bc 12, CR6_LT, -28 */
		/* 821A280Ch case   23:*/		if ( regs.CR[6].lt ) { return 0x821A27F0;  }
		/* 821A280Ch case   23:*/		return 0x821A2810;
		  /* 821A2810h */ case   24:  		/* b 64 */
		/* 821A2810h case   24:*/		return 0x821A2850;
		/* 821A2810h case   24:*/		return 0x821A2814;
	}
	return 0x821A2814;
} // Block from 821A27B0h-821A2814h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821A2814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2814);
		  /* 821A2814h */ case    0:  		/* mr R5, R10 */
		/* 821A2814h case    0:*/		regs.R5 = regs.R10;
		/* 821A2814h case    0:*/		return 0x821A2818;
		  /* 821A2818h */ case    1:  		/* b 56 */
		/* 821A2818h case    1:*/		return 0x821A2850;
		/* 821A2818h case    1:*/		return 0x821A281C;
	}
	return 0x821A281C;
} // Block from 821A2814h-821A281Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A281Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A281C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A281C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A281C);
		  /* 821A281Ch */ case    0:  		/* cmplwi CR6, R19, 0 */
		/* 821A281Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821A281Ch case    0:*/		return 0x821A2820;
		  /* 821A2820h */ case    1:  		/* bc 12, CR6_EQ, 48 */
		/* 821A2820h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A2850;  }
		/* 821A2820h case    1:*/		return 0x821A2824;
		  /* 821A2824h */ case    2:  		/* li R11, 0 */
		/* 821A2824h case    2:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A2824h case    2:*/		return 0x821A2828;
		  /* 821A2828h */ case    3:  		/* srw R9, R18, R11 */
		/* 821A2828h case    3:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R18,regs.R11);
		/* 821A2828h case    3:*/		return 0x821A282C;
		  /* 821A282Ch */ case    4:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821A282Ch case    4:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821A282Ch case    4:*/		return 0x821A2830;
		  /* 821A2830h */ case    5:  		/* cmplw CR6, R9, R31 */
		/* 821A2830h case    5:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R31);
		/* 821A2830h case    5:*/		return 0x821A2834;
		  /* 821A2834h */ case    6:  		/* bc 12, CR6_EQ, 20 */
		/* 821A2834h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A2848;  }
		/* 821A2834h case    6:*/		return 0x821A2838;
		  /* 821A2838h */ case    7:  		/* addi R10, R10, 1 */
		/* 821A2838h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A2838h case    7:*/		return 0x821A283C;
		  /* 821A283Ch */ case    8:  		/* addi R11, R11, 2 */
		/* 821A283Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A283Ch case    8:*/		return 0x821A2840;
		  /* 821A2840h */ case    9:  		/* cmplw CR6, R10, R19 */
		/* 821A2840h case    9:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R19);
		/* 821A2840h case    9:*/		return 0x821A2844;
		  /* 821A2844h */ case   10:  		/* bc 12, CR6_LT, -28 */
		/* 821A2844h case   10:*/		if ( regs.CR[6].lt ) { return 0x821A2828;  }
		/* 821A2844h case   10:*/		return 0x821A2848;
	}
	return 0x821A2848;
} // Block from 821A281Ch-821A2848h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A2848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2848);
		  /* 821A2848h */ case    0:  		/* cmplw CR6, R10, R19 */
		/* 821A2848h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R19);
		/* 821A2848h case    0:*/		return 0x821A284C;
		  /* 821A284Ch */ case    1:  		/* bc 12, CR6_LT, 36 */
		/* 821A284Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x821A2870;  }
		/* 821A284Ch case    1:*/		return 0x821A2850;
	}
	return 0x821A2850;
} // Block from 821A2848h-821A2850h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A2850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2850);
		  /* 821A2850h */ case    0:  		/* mr R4, R21 */
		/* 821A2850h case    0:*/		regs.R4 = regs.R21;
		/* 821A2850h case    0:*/		return 0x821A2854;
		  /* 821A2854h */ case    1:  		/* lwz R3, <#[R1 + 260]> */
		/* 821A2854h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000104) );
		/* 821A2854h case    1:*/		return 0x821A2858;
		  /* 821A2858h */ case    2:  		/* bl -173896 */
		/* 821A2858h case    2:*/		regs.LR = 0x821A285C; return 0x82178110;
		/* 821A2858h case    2:*/		return 0x821A285C;
		  /* 821A285Ch */ case    3:  		/* mr R4, R3 */
		/* 821A285Ch case    3:*/		regs.R4 = regs.R3;
		/* 821A285Ch case    3:*/		return 0x821A2860;
		  /* 821A2860h */ case    4:  		/* mr R3, R23 */
		/* 821A2860h case    4:*/		regs.R3 = regs.R23;
		/* 821A2860h case    4:*/		return 0x821A2864;
		  /* 821A2864h */ case    5:  		/* bl -173724 */
		/* 821A2864h case    5:*/		regs.LR = 0x821A2868; return 0x821781C8;
		/* 821A2864h case    5:*/		return 0x821A2868;
		  /* 821A2868h */ case    6:  		/* addi R24, R24, 1 */
		/* 821A2868h case    6:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821A2868h case    6:*/		return 0x821A286C;
		  /* 821A286Ch */ case    7:  		/* stwu R3, <#[R30 + 4]> */
		/* 821A286Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821A286Ch case    7:*/		return 0x821A2870;
	}
	return 0x821A2870;
} // Block from 821A2850h-821A2870h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A2870h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2870( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2870) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2870);
		  /* 821A2870h */ case    0:  		/* addi R31, R31, 1 */
		/* 821A2870h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A2870h case    0:*/		return 0x821A2874;
		  /* 821A2874h */ case    1:  		/* cmplw CR6, R31, R29 */
		/* 821A2874h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 821A2874h case    1:*/		return 0x821A2878;
		  /* 821A2878h */ case    2:  		/* bc 12, CR6_LT, -172 */
		/* 821A2878h case    2:*/		if ( regs.CR[6].lt ) { return 0x821A27CC;  }
		/* 821A2878h case    2:*/		return 0x821A287C;
	}
	return 0x821A287C;
} // Block from 821A2870h-821A287Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A287Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A287C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A287C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A287C);
		  /* 821A287Ch */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A287Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A287Ch case    0:*/		return 0x821A2880;
		  /* 821A2880h */ case    1:  		/* cmplw CR6, R24, R11 */
		/* 821A2880h case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821A2880h case    1:*/		return 0x821A2884;
		  /* 821A2884h */ case    2:  		/* bc 4, CR6_LT, 32 */
		/* 821A2884h case    2:*/		if ( !regs.CR[6].lt ) { return 0x821A28A4;  }
		/* 821A2884h case    2:*/		return 0x821A2888;
		  /* 821A2888h */ case    3:  		/* mr R7, R14 */
		/* 821A2888h case    3:*/		regs.R7 = regs.R14;
		/* 821A2888h case    3:*/		return 0x821A288C;
		  /* 821A288Ch */ case    4:  		/* lwz R8, <#[R1 + 300]> */
		/* 821A288Ch case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x0000012C) );
		/* 821A288Ch case    4:*/		return 0x821A2890;
		  /* 821A2890h */ case    5:  		/* mr R6, R24 */
		/* 821A2890h case    5:*/		regs.R6 = regs.R24;
		/* 821A2890h case    5:*/		return 0x821A2894;
		  /* 821A2894h */ case    6:  		/* lwz R3, <#[R1 + 260]> */
		/* 821A2894h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000104) );
		/* 821A2894h case    6:*/		return 0x821A2898;
		  /* 821A2898h */ case    7:  		/* mr R5, R23 */
		/* 821A2898h case    7:*/		regs.R5 = regs.R23;
		/* 821A2898h case    7:*/		return 0x821A289C;
		  /* 821A289Ch */ case    8:  		/* mr R4, R15 */
		/* 821A289Ch case    8:*/		regs.R4 = regs.R15;
		/* 821A289Ch case    8:*/		return 0x821A28A0;
		  /* 821A28A0h */ case    9:  		/* bl -22016 */
		/* 821A28A0h case    9:*/		regs.LR = 0x821A28A4; return 0x8219D2A0;
		/* 821A28A0h case    9:*/		return 0x821A28A4;
	}
	return 0x821A28A4;
} // Block from 821A287Ch-821A28A4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A28A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A28A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A28A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A28A4);
		  /* 821A28A4h */ case    0:  		/* addi R8, R15, 4 */
		/* 821A28A4h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R15,0x4);
		/* 821A28A4h case    0:*/		return 0x821A28A8;
		  /* 821A28A8h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821A28A8h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A28A8h case    1:*/		return 0x821A28AC;
		  /* 821A28ACh */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A28ACh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A28ACh case    2:*/		return 0x821A28B0;
		  /* 821A28B0h */ case    3:  		/* bc 12, CR6_EQ, 160 */
		/* 821A28B0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A2950;  }
		/* 821A28B0h case    3:*/		return 0x821A28B4;
		  /* 821A28B4h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A28B4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A28B4h case    4:*/		return 0x821A28B8;
		  /* 821A28B8h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821A28B8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A28B8h case    5:*/		return 0x821A28BC;
		  /* 821A28BCh */ case    6:  		/* bc 12, CR6_EQ, 128 */
		/* 821A28BCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821A293C;  }
		/* 821A28BCh case    6:*/		return 0x821A28C0;
		  /* 821A28C0h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A28C0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A28C0h case    7:*/		return 0x821A28C4;
		  /* 821A28C4h */ case    8:  		/* addi R10, R10, 4 */
		/* 821A28C4h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A28C4h case    8:*/		return 0x821A28C8;
		  /* 821A28C8h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821A28C8h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A28C8h case    9:*/		return 0x821A28CC;
		  /* 821A28CCh */ case   10:  		/* b 12 */
		/* 821A28CCh case   10:*/		return 0x821A28D8;
		/* 821A28CCh case   10:*/		return 0x821A28D0;
		  /* 821A28D0h */ case   11:  		/* addi R10, R9, 8 */
		/* 821A28D0h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A28D0h case   11:*/		return 0x821A28D4;
		  /* 821A28D4h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A28D4h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A28D4h case   12:*/		return 0x821A28D8;
	}
	return 0x821A28D8;
} // Block from 821A28A4h-821A28D8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A28D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A28D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A28D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A28D8);
		  /* 821A28D8h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A28D8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A28D8h case    0:*/		return 0x821A28DC;
		  /* 821A28DCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A28DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A28D0;  }
		/* 821A28DCh case    1:*/		return 0x821A28E0;
		  /* 821A28E0h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A28E0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A28E0h case    2:*/		return 0x821A28E4;
		  /* 821A28E4h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A28E4h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A28E4h case    3:*/		return 0x821A28E8;
		  /* 821A28E8h */ case    4:  		/* lwz R10, <#[R23 + 4]> */
		/* 821A28E8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 821A28E8h case    4:*/		return 0x821A28EC;
		  /* 821A28ECh */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A28ECh case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A28ECh case    5:*/		return 0x821A28F0;
		  /* 821A28F0h */ case    6:  		/* stw R11, <#[R23 + 4]> */
		/* 821A28F0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821A28F0h case    6:*/		return 0x821A28F4;
		  /* 821A28F4h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821A28F4h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A28F4h case    7:*/		return 0x821A28F8;
		  /* 821A28F8h */ case    8:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821A28F8h case    8:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821A28F8h case    8:*/		return 0x821A28FC;
		  /* 821A28FCh */ case    9:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821A28FCh case    9:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821A28FCh case    9:*/		return 0x821A2900;
		  /* 821A2900h */ case   10:  		/* stw R23, <#[R11 + 12]> */
		/* 821A2900h case   10:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A2900h case   10:*/		return 0x821A2904;
		  /* 821A2904h */ case   11:  		/* srw R9, R16, R9 */
		/* 821A2904h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R16,regs.R9);
		/* 821A2904h case   11:*/		return 0x821A2908;
		  /* 821A2908h */ case   12:  		/* srw R7, R16, R7 */
		/* 821A2908h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R16,regs.R7);
		/* 821A2908h case   12:*/		return 0x821A290C;
		  /* 821A290Ch */ case   13:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821A290Ch case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821A290Ch case   13:*/		return 0x821A2910;
		  /* 821A2910h */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821A2910h case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821A2910h case   14:*/		return 0x821A2914;
		  /* 821A2914h */ case   15:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821A2914h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821A2914h case   15:*/		return 0x821A2918;
		  /* 821A2918h */ case   16:  		/* srw R9, R16, R9 */
		/* 821A2918h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R16,regs.R9);
		/* 821A2918h case   16:*/		return 0x821A291C;
		  /* 821A291Ch */ case   17:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821A291Ch case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821A291Ch case   17:*/		return 0x821A2920;
		  /* 821A2920h */ case   18:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821A2920h case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821A2920h case   18:*/		return 0x821A2924;
		  /* 821A2924h */ case   19:  		/* srw R7, R16, R6 */
		/* 821A2924h case   19:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R16,regs.R6);
		/* 821A2924h case   19:*/		return 0x821A2928;
		  /* 821A2928h */ case   20:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821A2928h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821A2928h case   20:*/		return 0x821A292C;
		  /* 821A292Ch */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A292Ch case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A292Ch case   21:*/		return 0x821A2930;
		  /* 821A2930h */ case   22:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821A2930h case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821A2930h case   22:*/		return 0x821A2934;
		  /* 821A2934h */ case   23:  		/* or R10, R9, R10 */
		/* 821A2934h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A2934h case   23:*/		return 0x821A2938;
		  /* 821A2938h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821A2938h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2938h case   24:*/		return 0x821A293C;
	}
	return 0x821A293C;
} // Block from 821A28D8h-821A293Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821A293Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A293C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A293C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A293C);
		  /* 821A293Ch */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A293Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A293Ch case    0:*/		return 0x821A2940;
		  /* 821A2940h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A2940h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A2940h case    1:*/		return 0x821A2944;
		  /* 821A2944h */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821A2944h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A28A8;  }
		/* 821A2944h case    2:*/		return 0x821A2948;
		  /* 821A2948h */ case    3:  		/* addi R8, R11, 8 */
		/* 821A2948h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821A2948h case    3:*/		return 0x821A294C;
		  /* 821A294Ch */ case    4:  		/* b -164 */
		/* 821A294Ch case    4:*/		return 0x821A28A8;
		/* 821A294Ch case    4:*/		return 0x821A2950;
	}
	return 0x821A2950;
} // Block from 821A293Ch-821A2950h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A2950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2950);
		  /* 821A2950h */ case    0:  		/* lwz R28, <#[R1 + 260]> */
		/* 821A2950h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000104) );
		/* 821A2950h case    0:*/		return 0x821A2954;
		  /* 821A2954h */ case    1:  		/* li R6, 1 */
		/* 821A2954h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A2954h case    1:*/		return 0x821A2958;
		  /* 821A2958h */ case    2:  		/* mr R4, R15 */
		/* 821A2958h case    2:*/		regs.R4 = regs.R15;
		/* 821A2958h case    2:*/		return 0x821A295C;
		  /* 821A295Ch */ case    3:  		/* mr R3, R28 */
		/* 821A295Ch case    3:*/		regs.R3 = regs.R28;
		/* 821A295Ch case    3:*/		return 0x821A2960;
		  /* 821A2960h */ case    4:  		/* lwz R5, <#[R28 + 652]> */
		/* 821A2960h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R28 + 0x0000028C) );
		/* 821A2960h case    4:*/		return 0x821A2964;
		  /* 821A2964h */ case    5:  		/* bl 559716 */
		/* 821A2964h case    5:*/		regs.LR = 0x821A2968; return 0x8222B3C8;
		/* 821A2964h case    5:*/		return 0x821A2968;
		  /* 821A2968h */ case    6:  		/* mr R4, R23 */
		/* 821A2968h case    6:*/		regs.R4 = regs.R23;
		/* 821A2968h case    6:*/		return 0x821A296C;
		  /* 821A296Ch */ case    7:  		/* mr R3, R28 */
		/* 821A296Ch case    7:*/		regs.R3 = regs.R28;
		/* 821A296Ch case    7:*/		return 0x821A2970;
		  /* 821A2970h */ case    8:  		/* bl 80504 */
		/* 821A2970h case    8:*/		regs.LR = 0x821A2974; return 0x821B63E8;
		/* 821A2970h case    8:*/		return 0x821A2974;
		  /* 821A2974h */ case    9:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A2974h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A2974h case    9:*/		return 0x821A2978;
		  /* 821A2978h */ case   10:  		/* oris R11, R11, 256 */
		/* 821A2978h case   10:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A2978h case   10:*/		return 0x821A297C;
		  /* 821A297Ch */ case   11:  		/* stw R11, <#[R23 + 8]> */
		/* 821A297Ch case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A297Ch case   11:*/		return 0x821A2980;
		  /* 821A2980h */ case   12:  		/* lwz R10, <#[R15 + 8]> */
		/* 821A2980h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 821A2980h case   12:*/		return 0x821A2984;
		  /* 821A2984h */ case   13:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A2984h case   13:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A2984h case   13:*/		return 0x821A2988;
		  /* 821A2988h */ case   14:  		/* bc 12, CR0_EQ, 12 */
		/* 821A2988h case   14:*/		if ( regs.CR[0].eq ) { return 0x821A2994;  }
		/* 821A2988h case   14:*/		return 0x821A298C;
		  /* 821A298Ch */ case   15:  		/* mr R3, R15 */
		/* 821A298Ch case   15:*/		regs.R3 = regs.R15;
		/* 821A298Ch case   15:*/		return 0x821A2990;
		  /* 821A2990h */ case   16:  		/* b 48 */
		/* 821A2990h case   16:*/		return 0x821A29C0;
		/* 821A2990h case   16:*/		return 0x821A2994;
	}
	return 0x821A2994;
} // Block from 821A2950h-821A2994h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A2994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2994);
		  /* 821A2994h */ case    0:  		/* lwz R10, <#[R14 + 8]> */
		/* 821A2994h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R14 + 0x00000008) );
		/* 821A2994h case    0:*/		return 0x821A2998;
		  /* 821A2998h */ case    1:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A2998h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A2998h case    1:*/		return 0x821A299C;
		  /* 821A299Ch */ case    2:  		/* bc 12, CR0_EQ, 12 */
		/* 821A299Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821A29A8;  }
		/* 821A299Ch case    2:*/		return 0x821A29A0;
		  /* 821A29A0h */ case    3:  		/* mr R3, R14 */
		/* 821A29A0h case    3:*/		regs.R3 = regs.R14;
		/* 821A29A0h case    3:*/		return 0x821A29A4;
		  /* 821A29A4h */ case    4:  		/* b 28 */
		/* 821A29A4h case    4:*/		return 0x821A29C0;
		/* 821A29A4h case    4:*/		return 0x821A29A8;
	}
	return 0x821A29A8;
} // Block from 821A2994h-821A29A8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A29A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A29A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A29A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A29A8);
		  /* 821A29A8h */ case    0:  		/* lwz R3, <#[R1 + 300]> */
		/* 821A29A8h case    0:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000012C) );
		/* 821A29A8h case    0:*/		return 0x821A29AC;
		  /* 821A29ACh */ case    1:  		/* cmplwi CR6, R3, 0 */
		/* 821A29ACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821A29ACh case    1:*/		return 0x821A29B0;
		  /* 821A29B0h */ case    2:  		/* bc 12, CR6_EQ, 120 */
		/* 821A29B0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A2A28;  }
		/* 821A29B0h case    2:*/		return 0x821A29B4;
		  /* 821A29B4h */ case    3:  		/* lwz R10, <#[R3 + 8]> */
		/* 821A29B4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821A29B4h case    3:*/		return 0x821A29B8;
		  /* 821A29B8h */ case    4:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A29B8h case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A29B8h case    4:*/		return 0x821A29BC;
		  /* 821A29BCh */ case    5:  		/* bc 12, CR0_EQ, 108 */
		/* 821A29BCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821A2A28;  }
		/* 821A29BCh case    5:*/		return 0x821A29C0;
	}
	return 0x821A29C0;
} // Block from 821A29A8h-821A29C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A29C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A29C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A29C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A29C0);
		  /* 821A29C0h */ case    0:  		/* oris R11, R11, 128 */
		/* 821A29C0h case    0:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A29C0h case    0:*/		return 0x821A29C4;
		  /* 821A29C4h */ case    1:  		/* stw R11, <#[R23 + 8]> */
		/* 821A29C4h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A29C4h case    1:*/		return 0x821A29C8;
		  /* 821A29C8h */ case    2:  		/* bl -127200 */
		/* 821A29C8h case    2:*/		regs.LR = 0x821A29CC; return 0x821838E8;
		/* 821A29C8h case    2:*/		return 0x821A29CC;
		  /* 821A29CCh */ case    3:  		/* sth R3, <#[R23 + 18]> */
		/* 821A29CCh case    3:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R23 + 0x00000012) );
		/* 821A29CCh case    3:*/		return 0x821A29D0;
		  /* 821A29D0h */ case    4:  		/* lwz R3, <#[R28 + 660]> */
		/* 821A29D0h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000294) );
		/* 821A29D0h case    4:*/		return 0x821A29D4;
		  /* 821A29D4h */ case    5:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A29D4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A29D4h case    5:*/		return 0x821A29D8;
		  /* 821A29D8h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A29D8h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A29D8h case    6:*/		return 0x821A29DC;
		  /* 821A29DCh */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 821A29DCh case    7:*/		if ( !regs.CR[0].eq ) { return 0x821A2A04;  }
		/* 821A29DCh case    7:*/		return 0x821A29E0;
		  /* 821A29E0h */ case    8:  		/* lwz R11, <#[R3]> */
		/* 821A29E0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A29E0h case    8:*/		return 0x821A29E4;
		  /* 821A29E4h */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A29E4h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A29E4h case    9:*/		return 0x821A29E8;
		  /* 821A29E8h */ case   10:  		/* addic. R11, R11, -4 */
		/* 821A29E8h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A29E8h case   10:*/		return 0x821A29EC;
		  /* 821A29ECh */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 821A29ECh case   11:*/		if ( regs.CR[0].eq ) { return 0x821A2A04;  }
		/* 821A29ECh case   11:*/		return 0x821A29F0;
		  /* 821A29F0h */ case   12:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A29F0h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A29F0h case   12:*/		return 0x821A29F4;
		  /* 821A29F4h */ case   13:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A29F4h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A29F4h case   13:*/		return 0x821A29F8;
		  /* 821A29F8h */ case   14:  		/* addi R10, R10, 1 */
		/* 821A29F8h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A29F8h case   14:*/		return 0x821A29FC;
		  /* 821A29FCh */ case   15:  		/* cmplw CR6, R10, R9 */
		/* 821A29FCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A29FCh case   15:*/		return 0x821A2A00;
		  /* 821A2A00h */ case   16:  		/* bc 4, CR6_GT, 16 */
		/* 821A2A00h case   16:*/		if ( !regs.CR[6].gt ) { return 0x821A2A10;  }
		/* 821A2A00h case   16:*/		return 0x821A2A04;
	}
	return 0x821A2A04;
} // Block from 821A29C0h-821A2A04h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A2A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2A04);
		  /* 821A2A04h */ case    0:  		/* li R4, 1 */
		/* 821A2A04h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A2A04h case    0:*/		return 0x821A2A08;
		  /* 821A2A08h */ case    1:  		/* bl -88384 */
		/* 821A2A08h case    1:*/		regs.LR = 0x821A2A0C; return 0x8218D0C8;
		/* 821A2A08h case    1:*/		return 0x821A2A0C;
		  /* 821A2A0Ch */ case    2:  		/* mr R11, R3 */
		/* 821A2A0Ch case    2:*/		regs.R11 = regs.R3;
		/* 821A2A0Ch case    2:*/		return 0x821A2A10;
	}
	return 0x821A2A10;
} // Block from 821A2A04h-821A2A10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A2A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2A10);
		  /* 821A2A10h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A2A10h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2A10h case    0:*/		return 0x821A2A14;
		  /* 821A2A14h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A2A14h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A2A14h case    1:*/		return 0x821A2A18;
		  /* 821A2A18h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A2A18h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A2A18h case    2:*/		return 0x821A2A1C;
		  /* 821A2A1Ch */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A2A1Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A2A1Ch case    3:*/		return 0x821A2A20;
		  /* 821A2A20h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A2A20h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2A20h case    4:*/		return 0x821A2A24;
		  /* 821A2A24h */ case    5:  		/* stwx R23, <#[R10 + R11]> */
		/* 821A2A24h case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A2A24h case    5:*/		return 0x821A2A28;
	}
	return 0x821A2A28;
} // Block from 821A2A10h-821A2A28h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A2A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2A28);
		  /* 821A2A28h */ case    0:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A2A28h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A2A28h case    0:*/		return 0x821A2A2C;
		  /* 821A2A2Ch */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A2A2Ch case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A2A2Ch case    1:*/		return 0x821A2A30;
		  /* 821A2A30h */ case    2:  		/* bc 12, CR0_EQ, 180 */
		/* 821A2A30h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A2AE4;  }
		/* 821A2A30h case    2:*/		return 0x821A2A34;
		  /* 821A2A34h */ case    3:  		/* li R29, 0 */
		/* 821A2A34h case    3:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A2A34h case    3:*/		return 0x821A2A38;
		  /* 821A2A38h */ case    4:  		/* addi R30, R23, 44 */
		/* 821A2A38h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R23,0x2C);
		/* 821A2A38h case    4:*/		return 0x821A2A3C;
		  /* 821A2A3Ch */ case    5:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A2A3Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A2A3Ch case    5:*/		return 0x821A2A40;
		  /* 821A2A40h */ case    6:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A2A40h case    6:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A2A40h case    6:*/		return 0x821A2A44;
		  /* 821A2A44h */ case    7:  		/* cmplw CR6, R29, R11 */
		/* 821A2A44h case    7:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821A2A44h case    7:*/		return 0x821A2A48;
		  /* 821A2A48h */ case    8:  		/* bc 4, CR6_LT, 156 */
		/* 821A2A48h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821A2AE4;  }
		/* 821A2A48h case    8:*/		return 0x821A2A4C;
		  /* 821A2A4Ch */ case    9:  		/* lwz R11, <#[R30]> */
		/* 821A2A4Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A2A4Ch case    9:*/		return 0x821A2A50;
		  /* 821A2A50h */ case   10:  		/* lwz R31, <#[R11 + 12]> */
		/* 821A2A50h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A2A50h case   10:*/		return 0x821A2A54;
		  /* 821A2A54h */ case   11:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A2A54h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A2A54h case   11:*/		return 0x821A2A58;
		  /* 821A2A58h */ case   12:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A2A58h case   12:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A2A58h case   12:*/		return 0x821A2A5C;
		  /* 821A2A5Ch */ case   13:  		/* bc 4, CR0_EQ, 124 */
		/* 821A2A5Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x821A2AD8;  }
		/* 821A2A5Ch case   13:*/		return 0x821A2A60;
		  /* 821A2A60h */ case   14:  		/* oris R11, R11, 128 */
		/* 821A2A60h case   14:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A2A60h case   14:*/		return 0x821A2A64;
		  /* 821A2A64h */ case   15:  		/* mr R3, R23 */
		/* 821A2A64h case   15:*/		regs.R3 = regs.R23;
		/* 821A2A64h case   15:*/		return 0x821A2A68;
		  /* 821A2A68h */ case   16:  		/* stw R11, <#[R31 + 8]> */
		/* 821A2A68h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A2A68h case   16:*/		return 0x821A2A6C;
		  /* 821A2A6Ch */ case   17:  		/* bl -127364 */
		/* 821A2A6Ch case   17:*/		regs.LR = 0x821A2A70; return 0x821838E8;
		/* 821A2A6Ch case   17:*/		return 0x821A2A70;
		  /* 821A2A70h */ case   18:  		/* sth R3, <#[R31 + 18]> */
		/* 821A2A70h case   18:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 821A2A70h case   18:*/		return 0x821A2A74;
		  /* 821A2A74h */ case   19:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A2A74h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A2A74h case   19:*/		return 0x821A2A78;
		  /* 821A2A78h */ case   20:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 821A2A78h case   20:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 821A2A78h case   20:*/		return 0x821A2A7C;
		  /* 821A2A7Ch */ case   21:  		/* stw R11, <#[R31 + 16]> */
		/* 821A2A7Ch case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A2A7Ch case   21:*/		return 0x821A2A80;
		  /* 821A2A80h */ case   22:  		/* lwz R3, <#[R28 + 660]> */
		/* 821A2A80h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000294) );
		/* 821A2A80h case   22:*/		return 0x821A2A84;
		  /* 821A2A84h */ case   23:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A2A84h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A2A84h case   23:*/		return 0x821A2A88;
		  /* 821A2A88h */ case   24:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A2A88h case   24:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A2A88h case   24:*/		return 0x821A2A8C;
		  /* 821A2A8Ch */ case   25:  		/* bc 4, CR0_EQ, 40 */
		/* 821A2A8Ch case   25:*/		if ( !regs.CR[0].eq ) { return 0x821A2AB4;  }
		/* 821A2A8Ch case   25:*/		return 0x821A2A90;
		  /* 821A2A90h */ case   26:  		/* lwz R11, <#[R3]> */
		/* 821A2A90h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A2A90h case   26:*/		return 0x821A2A94;
		  /* 821A2A94h */ case   27:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A2A94h case   27:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A2A94h case   27:*/		return 0x821A2A98;
		  /* 821A2A98h */ case   28:  		/* addic. R11, R11, -4 */
		/* 821A2A98h case   28:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A2A98h case   28:*/		return 0x821A2A9C;
		  /* 821A2A9Ch */ case   29:  		/* bc 12, CR0_EQ, 24 */
		/* 821A2A9Ch case   29:*/		if ( regs.CR[0].eq ) { return 0x821A2AB4;  }
		/* 821A2A9Ch case   29:*/		return 0x821A2AA0;
		  /* 821A2AA0h */ case   30:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A2AA0h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2AA0h case   30:*/		return 0x821A2AA4;
		  /* 821A2AA4h */ case   31:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A2AA4h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A2AA4h case   31:*/		return 0x821A2AA8;
		  /* 821A2AA8h */ case   32:  		/* addi R10, R10, 1 */
		/* 821A2AA8h case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A2AA8h case   32:*/		return 0x821A2AAC;
		  /* 821A2AACh */ case   33:  		/* cmplw CR6, R10, R9 */
		/* 821A2AACh case   33:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A2AACh case   33:*/		return 0x821A2AB0;
		  /* 821A2AB0h */ case   34:  		/* bc 4, CR6_GT, 16 */
		/* 821A2AB0h case   34:*/		if ( !regs.CR[6].gt ) { return 0x821A2AC0;  }
		/* 821A2AB0h case   34:*/		return 0x821A2AB4;
	}
	return 0x821A2AB4;
} // Block from 821A2A28h-821A2AB4h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821A2AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2AB4);
		  /* 821A2AB4h */ case    0:  		/* li R4, 1 */
		/* 821A2AB4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A2AB4h case    0:*/		return 0x821A2AB8;
		  /* 821A2AB8h */ case    1:  		/* bl -88560 */
		/* 821A2AB8h case    1:*/		regs.LR = 0x821A2ABC; return 0x8218D0C8;
		/* 821A2AB8h case    1:*/		return 0x821A2ABC;
		  /* 821A2ABCh */ case    2:  		/* mr R11, R3 */
		/* 821A2ABCh case    2:*/		regs.R11 = regs.R3;
		/* 821A2ABCh case    2:*/		return 0x821A2AC0;
	}
	return 0x821A2AC0;
} // Block from 821A2AB4h-821A2AC0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A2AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2AC0);
		  /* 821A2AC0h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A2AC0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2AC0h case    0:*/		return 0x821A2AC4;
		  /* 821A2AC4h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A2AC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A2AC4h case    1:*/		return 0x821A2AC8;
		  /* 821A2AC8h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A2AC8h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A2AC8h case    2:*/		return 0x821A2ACC;
		  /* 821A2ACCh */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A2ACCh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A2ACCh case    3:*/		return 0x821A2AD0;
		  /* 821A2AD0h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A2AD0h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2AD0h case    4:*/		return 0x821A2AD4;
		  /* 821A2AD4h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A2AD4h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A2AD4h case    5:*/		return 0x821A2AD8;
	}
	return 0x821A2AD8;
} // Block from 821A2AC0h-821A2AD8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A2AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2AD8);
		  /* 821A2AD8h */ case    0:  		/* addi R29, R29, 1 */
		/* 821A2AD8h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821A2AD8h case    0:*/		return 0x821A2ADC;
		  /* 821A2ADCh */ case    1:  		/* addi R30, R30, 4 */
		/* 821A2ADCh case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A2ADCh case    1:*/		return 0x821A2AE0;
		  /* 821A2AE0h */ case    2:  		/* b -164 */
		/* 821A2AE0h case    2:*/		return 0x821A2A3C;
		/* 821A2AE0h case    2:*/		return 0x821A2AE4;
	}
	return 0x821A2AE4;
} // Block from 821A2AD8h-821A2AE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A2AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2AE4);
		  /* 821A2AE4h */ case    0:  		/* mr R4, R23 */
		/* 821A2AE4h case    0:*/		regs.R4 = regs.R23;
		/* 821A2AE4h case    0:*/		return 0x821A2AE8;
		  /* 821A2AE8h */ case    1:  		/* mr R3, R28 */
		/* 821A2AE8h case    1:*/		regs.R3 = regs.R28;
		/* 821A2AE8h case    1:*/		return 0x821A2AEC;
		  /* 821A2AECh */ case    2:  		/* bl -8244 */
		/* 821A2AECh case    2:*/		regs.LR = 0x821A2AF0; return 0x821A0AB8;
		/* 821A2AECh case    2:*/		return 0x821A2AF0;
	}
	return 0x821A2AF0;
} // Block from 821A2AE4h-821A2AF0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A2AF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2AF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2AF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2AF0);
		  /* 821A2AF0h */ case    0:  		/* addi R1, R1, 240 */
		/* 821A2AF0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xF0);
		/* 821A2AF0h case    0:*/		return 0x821A2AF4;
		  /* 821A2AF4h */ case    1:  		/* b -1120388 */
		/* 821A2AF4h case    1:*/		return 0x82091270;
		/* 821A2AF4h case    1:*/		return 0x821A2AF8;
	}
	return 0x821A2AF8;
} // Block from 821A2AF0h-821A2AF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A2AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2AF8);
		  /* 821A2AF8h */ case    0:  		/* mfspr R12, LR */
		/* 821A2AF8h case    0:*/		regs.R12 = regs.LR;
		/* 821A2AF8h case    0:*/		return 0x821A2AFC;
		  /* 821A2AFCh */ case    1:  		/* bl -1120476 */
		/* 821A2AFCh case    1:*/		regs.LR = 0x821A2B00; return 0x82091220;
		/* 821A2AFCh case    1:*/		return 0x821A2B00;
		  /* 821A2B00h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 821A2B00h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 821A2B00h case    2:*/		return 0x821A2B04;
		  /* 821A2B04h */ case    3:  		/* lwz R11, <#[R5]> */
		/* 821A2B04h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821A2B04h case    3:*/		return 0x821A2B08;
		  /* 821A2B08h */ case    4:  		/* mr R21, R9 */
		/* 821A2B08h case    4:*/		regs.R21 = regs.R9;
		/* 821A2B08h case    4:*/		return 0x821A2B0C;
		  /* 821A2B0Ch */ case    5:  		/* mr R24, R10 */
		/* 821A2B0Ch case    5:*/		regs.R24 = regs.R10;
		/* 821A2B0Ch case    5:*/		return 0x821A2B10;
		  /* 821A2B10h */ case    6:  		/* lwz R10, <#[R7]> */
		/* 821A2B10h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 821A2B10h case    6:*/		return 0x821A2B14;
		  /* 821A2B14h */ case    7:  		/* lwz R9, <#[R4 + 8]> */
		/* 821A2B14h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000008) );
		/* 821A2B14h case    7:*/		return 0x821A2B18;
		  /* 821A2B18h */ case    8:  		/* rlwinm R18, R11, 7, 29, 31 */
		/* 821A2B18h case    8:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R18,regs.R11);
		/* 821A2B18h case    8:*/		return 0x821A2B1C;
		  /* 821A2B1Ch */ case    9:  		/* rlwinm R23, R10, 7, 29, 31 */
		/* 821A2B1Ch case    9:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R23,regs.R10);
		/* 821A2B1Ch case    9:*/		return 0x821A2B20;
		  /* 821A2B20h */ case   10:  		/* lwz R20, <#[R5 + 12]> */
		/* 821A2B20h case   10:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R5 + 0x0000000C) );
		/* 821A2B20h case   10:*/		return 0x821A2B24;
		  /* 821A2B24h */ case   11:  		/* rlwinm R11, R9, 0, 18, 24 */
		/* 821A2B24h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R9);
		/* 821A2B24h case   11:*/		return 0x821A2B28;
		  /* 821A2B28h */ case   12:  		/* lwz R17, <#[R7 + 12]> */
		/* 821A2B28h case   12:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R7 + 0x0000000C) );
		/* 821A2B28h case   12:*/		return 0x821A2B2C;
		  /* 821A2B2Ch */ case   13:  		/* mr R22, R3 */
		/* 821A2B2Ch case   13:*/		regs.R22 = regs.R3;
		/* 821A2B2Ch case   13:*/		return 0x821A2B30;
		  /* 821A2B30h */ case   14:  		/* mr R31, R4 */
		/* 821A2B30h case   14:*/		regs.R31 = regs.R4;
		/* 821A2B30h case   14:*/		return 0x821A2B34;
		  /* 821A2B34h */ case   15:  		/* mr R19, R5 */
		/* 821A2B34h case   15:*/		regs.R19 = regs.R5;
		/* 821A2B34h case   15:*/		return 0x821A2B38;
		  /* 821A2B38h */ case   16:  		/* mr R30, R6 */
		/* 821A2B38h case   16:*/		regs.R30 = regs.R6;
		/* 821A2B38h case   16:*/		return 0x821A2B3C;
		  /* 821A2B3Ch */ case   17:  		/* mr R16, R7 */
		/* 821A2B3Ch case   17:*/		regs.R16 = regs.R7;
		/* 821A2B3Ch case   17:*/		return 0x821A2B40;
		  /* 821A2B40h */ case   18:  		/* mr R29, R8 */
		/* 821A2B40h case   18:*/		regs.R29 = regs.R8;
		/* 821A2B40h case   18:*/		return 0x821A2B44;
		  /* 821A2B44h */ case   19:  		/* li R14, 1 */
		/* 821A2B44h case   19:*/		cpu::op::li<0>(regs,&regs.R14,0x1);
		/* 821A2B44h case   19:*/		return 0x821A2B48;
		  /* 821A2B48h */ case   20:  		/* add R15, R23, R18 */
		/* 821A2B48h case   20:*/		cpu::op::add<0>(regs,&regs.R15,regs.R23,regs.R18);
		/* 821A2B48h case   20:*/		return 0x821A2B4C;
		  /* 821A2B4Ch */ case   21:  		/* cmplwi CR6, R11, 12800 */
		/* 821A2B4Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003200);
		/* 821A2B4Ch case   21:*/		return 0x821A2B50;
		  /* 821A2B50h */ case   22:  		/* bc 4, CR6_EQ, 20 */
		/* 821A2B50h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821A2B64;  }
		/* 821A2B50h case   22:*/		return 0x821A2B54;
		  /* 821A2B54h */ case   23:  		/* lwz R11, <#[R4 + 44]> */
		/* 821A2B54h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000002C) );
		/* 821A2B54h case   23:*/		return 0x821A2B58;
		  /* 821A2B58h */ case   24:  		/* cmplw CR6, R5, R11 */
		/* 821A2B58h case   24:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R11);
		/* 821A2B58h case   24:*/		return 0x821A2B5C;
		  /* 821A2B5Ch */ case   25:  		/* bc 4, CR6_EQ, 8 */
		/* 821A2B5Ch case   25:*/		if ( !regs.CR[6].eq ) { return 0x821A2B64;  }
		/* 821A2B5Ch case   25:*/		return 0x821A2B60;
		  /* 821A2B60h */ case   26:  		/* mr R15, R14 */
		/* 821A2B60h case   26:*/		regs.R15 = regs.R14;
		/* 821A2B60h case   26:*/		return 0x821A2B64;
	}
	return 0x821A2B64;
} // Block from 821A2AF8h-821A2B64h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A2B64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2B64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2B64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2B64);
		  /* 821A2B64h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821A2B64h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A2B64h case    0:*/		return 0x821A2B68;
		  /* 821A2B68h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A2B68h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A2B68h case    1:*/		return 0x821A2B6C;
		  /* 821A2B6Ch */ case    2:  		/* bc 12, CR0_EQ, 3608 */
		/* 821A2B6Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821A3984;  }
		/* 821A2B6Ch case    2:*/		return 0x821A2B70;
		  /* 821A2B70h */ case    3:  		/* rlwinm. R10, R11, 0, 13, 13 */
		/* 821A2B70h case    3:*/		cpu::op::rlwinm<1,0,13,13>(regs,&regs.R10,regs.R11);
		/* 821A2B70h case    3:*/		return 0x821A2B74;
		  /* 821A2B74h */ case    4:  		/* bc 12, CR0_EQ, 100 */
		/* 821A2B74h case    4:*/		if ( regs.CR[0].eq ) { return 0x821A2BD8;  }
		/* 821A2B74h case    4:*/		return 0x821A2B78;
		  /* 821A2B78h */ case    5:  		/* mr R7, R24 */
		/* 821A2B78h case    5:*/		regs.R7 = regs.R24;
		/* 821A2B78h case    5:*/		return 0x821A2B7C;
		  /* 821A2B7Ch */ case    6:  		/* mr R6, R21 */
		/* 821A2B7Ch case    6:*/		regs.R6 = regs.R21;
		/* 821A2B7Ch case    6:*/		return 0x821A2B80;
		  /* 821A2B80h */ case    7:  		/* mr R5, R16 */
		/* 821A2B80h case    7:*/		regs.R5 = regs.R16;
		/* 821A2B80h case    7:*/		return 0x821A2B84;
		  /* 821A2B84h */ case    8:  		/* mr R4, R20 */
		/* 821A2B84h case    8:*/		regs.R4 = regs.R20;
		/* 821A2B84h case    8:*/		return 0x821A2B88;
		  /* 821A2B88h */ case    9:  		/* mr R3, R22 */
		/* 821A2B88h case    9:*/		regs.R3 = regs.R22;
		/* 821A2B88h case    9:*/		return 0x821A2B8C;
		  /* 821A2B8Ch */ case   10:  		/* bl -3508 */
		/* 821A2B8Ch case   10:*/		regs.LR = 0x821A2B90; return 0x821A1DD8;
		/* 821A2B8Ch case   10:*/		return 0x821A2B90;
		  /* 821A2B90h */ case   11:  		/* lwz R11, <#[R19 + 12]> */
		/* 821A2B90h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000000C) );
		/* 821A2B90h case   11:*/		return 0x821A2B94;
		  /* 821A2B94h */ case   12:  		/* lwz R17, <#[R3 + 12]> */
		/* 821A2B94h case   12:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A2B94h case   12:*/		return 0x821A2B98;
		  /* 821A2B98h */ case   13:  		/* mr R16, R3 */
		/* 821A2B98h case   13:*/		regs.R16 = regs.R3;
		/* 821A2B98h case   13:*/		return 0x821A2B9C;
		  /* 821A2B9Ch */ case   14:  		/* addi R11, R11, 4 */
		/* 821A2B9Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A2B9Ch case   14:*/		return 0x821A2BA0;
		  /* 821A2BA0h */ case   15:  		/* mr R20, R17 */
		/* 821A2BA0h case   15:*/		regs.R20 = regs.R17;
		/* 821A2BA0h case   15:*/		return 0x821A2BA4;
		  /* 821A2BA4h */ case   16:  		/* lwz R10, <#[R11]> */
		/* 821A2BA4h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2BA4h case   16:*/		return 0x821A2BA8;
		  /* 821A2BA8h */ case   17:  		/* b 12 */
		/* 821A2BA8h case   17:*/		return 0x821A2BB4;
		/* 821A2BA8h case   17:*/		return 0x821A2BAC;
		  /* 821A2BACh */ case   18:  		/* addi R11, R10, 8 */
		/* 821A2BACh case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A2BACh case   18:*/		return 0x821A2BB0;
		  /* 821A2BB0h */ case   19:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A2BB0h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A2BB0h case   19:*/		return 0x821A2BB4;
	}
	return 0x821A2BB4;
} // Block from 821A2B64h-821A2BB4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821A2BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2BB4);
		  /* 821A2BB4h */ case    0:  		/* cmplw CR6, R10, R19 */
		/* 821A2BB4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R19);
		/* 821A2BB4h case    0:*/		return 0x821A2BB8;
		  /* 821A2BB8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A2BB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A2BAC;  }
		/* 821A2BB8h case    1:*/		return 0x821A2BBC;
		  /* 821A2BBCh */ case    2:  		/* lwz R10, <#[R19 + 8]> */
		/* 821A2BBCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000008) );
		/* 821A2BBCh case    2:*/		return 0x821A2BC0;
		  /* 821A2BC0h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A2BC0h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2BC0h case    3:*/		return 0x821A2BC4;
		  /* 821A2BC4h */ case    4:  		/* lwz R11, <#[R17 + 4]> */
		/* 821A2BC4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000004) );
		/* 821A2BC4h case    4:*/		return 0x821A2BC8;
		  /* 821A2BC8h */ case    5:  		/* stw R11, <#[R19 + 8]> */
		/* 821A2BC8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821A2BC8h case    5:*/		return 0x821A2BCC;
		  /* 821A2BCCh */ case    6:  		/* stw R19, <#[R17 + 4]> */
		/* 821A2BCCh case    6:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R17 + 0x00000004) );
		/* 821A2BCCh case    6:*/		return 0x821A2BD0;
		  /* 821A2BD0h */ case    7:  		/* stw R17, <#[R19 + 12]> */
		/* 821A2BD0h case    7:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R19 + 0x0000000C) );
		/* 821A2BD0h case    7:*/		return 0x821A2BD4;
		  /* 821A2BD4h */ case    8:  		/* b 104 */
		/* 821A2BD4h case    8:*/		return 0x821A2C3C;
		/* 821A2BD4h case    8:*/		return 0x821A2BD8;
	}
	return 0x821A2BD8;
} // Block from 821A2BB4h-821A2BD8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A2BD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2BD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2BD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2BD8);
		  /* 821A2BD8h */ case    0:  		/* rlwinm. R11, R11, 0, 12, 12 */
		/* 821A2BD8h case    0:*/		cpu::op::rlwinm<1,0,12,12>(regs,&regs.R11,regs.R11);
		/* 821A2BD8h case    0:*/		return 0x821A2BDC;
		  /* 821A2BDCh */ case    1:  		/* bc 12, CR0_EQ, 96 */
		/* 821A2BDCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821A2C3C;  }
		/* 821A2BDCh case    1:*/		return 0x821A2BE0;
		  /* 821A2BE0h */ case    2:  		/* mr R4, R17 */
		/* 821A2BE0h case    2:*/		regs.R4 = regs.R17;
		/* 821A2BE0h case    2:*/		return 0x821A2BE4;
		  /* 821A2BE4h */ case    3:  		/* mr R7, R24 */
		/* 821A2BE4h case    3:*/		regs.R7 = regs.R24;
		/* 821A2BE4h case    3:*/		return 0x821A2BE8;
		  /* 821A2BE8h */ case    4:  		/* mr R6, R21 */
		/* 821A2BE8h case    4:*/		regs.R6 = regs.R21;
		/* 821A2BE8h case    4:*/		return 0x821A2BEC;
		  /* 821A2BECh */ case    5:  		/* mr R5, R19 */
		/* 821A2BECh case    5:*/		regs.R5 = regs.R19;
		/* 821A2BECh case    5:*/		return 0x821A2BF0;
		  /* 821A2BF0h */ case    6:  		/* mr R3, R22 */
		/* 821A2BF0h case    6:*/		regs.R3 = regs.R22;
		/* 821A2BF0h case    6:*/		return 0x821A2BF4;
		  /* 821A2BF4h */ case    7:  		/* bl -3612 */
		/* 821A2BF4h case    7:*/		regs.LR = 0x821A2BF8; return 0x821A1DD8;
		/* 821A2BF4h case    7:*/		return 0x821A2BF8;
		  /* 821A2BF8h */ case    8:  		/* lwz R11, <#[R16 + 12]> */
		/* 821A2BF8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000000C) );
		/* 821A2BF8h case    8:*/		return 0x821A2BFC;
		  /* 821A2BFCh */ case    9:  		/* lwz R17, <#[R3 + 12]> */
		/* 821A2BFCh case    9:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A2BFCh case    9:*/		return 0x821A2C00;
		  /* 821A2C00h */ case   10:  		/* mr R19, R3 */
		/* 821A2C00h case   10:*/		regs.R19 = regs.R3;
		/* 821A2C00h case   10:*/		return 0x821A2C04;
		  /* 821A2C04h */ case   11:  		/* addi R11, R11, 4 */
		/* 821A2C04h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A2C04h case   11:*/		return 0x821A2C08;
		  /* 821A2C08h */ case   12:  		/* mr R20, R17 */
		/* 821A2C08h case   12:*/		regs.R20 = regs.R17;
		/* 821A2C08h case   12:*/		return 0x821A2C0C;
		  /* 821A2C0Ch */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821A2C0Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2C0Ch case   13:*/		return 0x821A2C10;
		  /* 821A2C10h */ case   14:  		/* b 12 */
		/* 821A2C10h case   14:*/		return 0x821A2C1C;
		/* 821A2C10h case   14:*/		return 0x821A2C14;
		  /* 821A2C14h */ case   15:  		/* addi R11, R10, 8 */
		/* 821A2C14h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A2C14h case   15:*/		return 0x821A2C18;
		  /* 821A2C18h */ case   16:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A2C18h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A2C18h case   16:*/		return 0x821A2C1C;
	}
	return 0x821A2C1C;
} // Block from 821A2BD8h-821A2C1Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A2C1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2C1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2C1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2C1C);
		  /* 821A2C1Ch */ case    0:  		/* cmplw CR6, R10, R16 */
		/* 821A2C1Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R16);
		/* 821A2C1Ch case    0:*/		return 0x821A2C20;
		  /* 821A2C20h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A2C20h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A2C14;  }
		/* 821A2C20h case    1:*/		return 0x821A2C24;
		  /* 821A2C24h */ case    2:  		/* lwz R10, <#[R16 + 8]> */
		/* 821A2C24h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821A2C24h case    2:*/		return 0x821A2C28;
		  /* 821A2C28h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A2C28h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2C28h case    3:*/		return 0x821A2C2C;
		  /* 821A2C2Ch */ case    4:  		/* lwz R11, <#[R17 + 4]> */
		/* 821A2C2Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000004) );
		/* 821A2C2Ch case    4:*/		return 0x821A2C30;
		  /* 821A2C30h */ case    5:  		/* stw R11, <#[R16 + 8]> */
		/* 821A2C30h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821A2C30h case    5:*/		return 0x821A2C34;
		  /* 821A2C34h */ case    6:  		/* stw R16, <#[R17 + 4]> */
		/* 821A2C34h case    6:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R17 + 0x00000004) );
		/* 821A2C34h case    6:*/		return 0x821A2C38;
		  /* 821A2C38h */ case    7:  		/* stw R17, <#[R16 + 12]> */
		/* 821A2C38h case    7:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R16 + 0x0000000C) );
		/* 821A2C38h case    7:*/		return 0x821A2C3C;
	}
	return 0x821A2C3C;
} // Block from 821A2C1Ch-821A2C3Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A2C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2C3C);
		  /* 821A2C3Ch */ case    0:  		/* lwz R31, <#[R20 + 8]> */
		/* 821A2C3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R20 + 0x00000008) );
		/* 821A2C3Ch case    0:*/		return 0x821A2C40;
		  /* 821A2C40h */ case    1:  		/* rlwinm R11, R31, 0, 18, 24 */
		/* 821A2C40h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R31);
		/* 821A2C40h case    1:*/		return 0x821A2C44;
		  /* 821A2C44h */ case    2:  		/* cmplwi CR6, R11, 16000 */
		/* 821A2C44h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821A2C44h case    2:*/		return 0x821A2C48;
		  /* 821A2C48h */ case    3:  		/* bc 4, CR6_EQ, 236 */
		/* 821A2C48h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821A2D34;  }
		/* 821A2C48h case    3:*/		return 0x821A2C4C;
		  /* 821A2C4Ch */ case    4:  		/* cmplwi CR6, R18, 0 */
		/* 821A2C4Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821A2C4Ch case    4:*/		return 0x821A2C50;
		  /* 821A2C50h */ case    5:  		/* bc 12, CR6_EQ, 64 */
		/* 821A2C50h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A2C90;  }
		/* 821A2C50h case    5:*/		return 0x821A2C54;
		  /* 821A2C54h */ case    6:  		/* addi R11, R1, 96 */
		/* 821A2C54h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A2C54h case    6:*/		return 0x821A2C58;
		  /* 821A2C58h */ case    7:  		/* li R30, 0 */
		/* 821A2C58h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A2C58h case    7:*/		return 0x821A2C5C;
		  /* 821A2C5Ch */ case    8:  		/* addi R29, R11, -4 */
		/* 821A2C5Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 821A2C5Ch case    8:*/		return 0x821A2C60;
		  /* 821A2C60h */ case    9:  		/* mr R31, R18 */
		/* 821A2C60h case    9:*/		regs.R31 = regs.R18;
		/* 821A2C60h case    9:*/		return 0x821A2C64;
		  /* 821A2C64h */ case   10:  		/* lwz R11, <#[R19]> */
		/* 821A2C64h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821A2C64h case   10:*/		return 0x821A2C68;
		  /* 821A2C68h */ case   11:  		/* mr R3, R20 */
		/* 821A2C68h case   11:*/		regs.R3 = regs.R20;
		/* 821A2C68h case   11:*/		return 0x821A2C6C;
		  /* 821A2C6Ch */ case   12:  		/* rlwinm R10, R11, 27, 24, 31 */
		/* 821A2C6Ch case   12:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R11);
		/* 821A2C6Ch case   12:*/		return 0x821A2C70;
		  /* 821A2C70h */ case   13:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821A2C70h case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821A2C70h case   13:*/		return 0x821A2C74;
		  /* 821A2C74h */ case   14:  		/* srw R11, R10, R30 */
		/* 821A2C74h case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R30);
		/* 821A2C74h case   14:*/		return 0x821A2C78;
		  /* 821A2C78h */ case   15:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 821A2C78h case   15:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 821A2C78h case   15:*/		return 0x821A2C7C;
		  /* 821A2C7Ch */ case   16:  		/* bl 518668 */
		/* 821A2C7Ch case   16:*/		regs.LR = 0x821A2C80; return 0x82221688;
		/* 821A2C7Ch case   16:*/		return 0x821A2C80;
		  /* 821A2C80h */ case   17:  		/* stfsu FR1, <#[R29 + 4]> */
		/* 821A2C80h case   17:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A2C80h case   17:*/		return 0x821A2C84;
		  /* 821A2C84h */ case   18:  		/* addic. R31, R31, -1 */
		/* 821A2C84h case   18:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821A2C84h case   18:*/		return 0x821A2C88;
		  /* 821A2C88h */ case   19:  		/* addi R30, R30, 2 */
		/* 821A2C88h case   19:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821A2C88h case   19:*/		return 0x821A2C8C;
		  /* 821A2C8Ch */ case   20:  		/* bc 4, CR0_EQ, -40 */
		/* 821A2C8Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x821A2C64;  }
		/* 821A2C8Ch case   20:*/		return 0x821A2C90;
	}
	return 0x821A2C90;
} // Block from 821A2C3Ch-821A2C90h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821A2C90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2C90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2C90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2C90);
		  /* 821A2C90h */ case    0:  		/* cmplwi CR6, R23, 0 */
		/* 821A2C90h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821A2C90h case    0:*/		return 0x821A2C94;
		  /* 821A2C94h */ case    1:  		/* bc 12, CR6_EQ, 72 */
		/* 821A2C94h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A2CDC;  }
		/* 821A2C94h case    1:*/		return 0x821A2C98;
		  /* 821A2C98h */ case    2:  		/* rlwinm R10, R18, 2, 0, 29 */
		/* 821A2C98h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R18);
		/* 821A2C98h case    2:*/		return 0x821A2C9C;
		  /* 821A2C9Ch */ case    3:  		/* addi R11, R1, 96 */
		/* 821A2C9Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A2C9Ch case    3:*/		return 0x821A2CA0;
		  /* 821A2CA0h */ case    4:  		/* li R30, 0 */
		/* 821A2CA0h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A2CA0h case    4:*/		return 0x821A2CA4;
		  /* 821A2CA4h */ case    5:  		/* add R11, R10, R11 */
		/* 821A2CA4h case    5:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A2CA4h case    5:*/		return 0x821A2CA8;
		  /* 821A2CA8h */ case    6:  		/* mr R31, R23 */
		/* 821A2CA8h case    6:*/		regs.R31 = regs.R23;
		/* 821A2CA8h case    6:*/		return 0x821A2CAC;
		  /* 821A2CACh */ case    7:  		/* addi R29, R11, -4 */
		/* 821A2CACh case    7:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 821A2CACh case    7:*/		return 0x821A2CB0;
		  /* 821A2CB0h */ case    8:  		/* lwz R11, <#[R16]> */
		/* 821A2CB0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821A2CB0h case    8:*/		return 0x821A2CB4;
		  /* 821A2CB4h */ case    9:  		/* mr R3, R17 */
		/* 821A2CB4h case    9:*/		regs.R3 = regs.R17;
		/* 821A2CB4h case    9:*/		return 0x821A2CB8;
		  /* 821A2CB8h */ case   10:  		/* rlwinm R10, R11, 27, 24, 31 */
		/* 821A2CB8h case   10:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R11);
		/* 821A2CB8h case   10:*/		return 0x821A2CBC;
		  /* 821A2CBCh */ case   11:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821A2CBCh case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821A2CBCh case   11:*/		return 0x821A2CC0;
	}
	return 0x821A2CC0;
} // Block from 821A2C90h-821A2CC0h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A2CC0h
// Function '?CombineMERGEDependents@Compiler@D3DXShader@@AAAXPAVInstruction@2@0I00II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2CC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2CC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2CC0);
		  /* 821A2CC0h */ case    0:  		/* srw R11, R10, R30 */
		/* 821A2CC0h case    0:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R30);
		/* 821A2CC0h case    0:*/		return 0x821A2CC4;
		  /* 821A2CC4h */ case    1:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 821A2CC4h case    1:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 821A2CC4h case    1:*/		return 0x821A2CC8;
		  /* 821A2CC8h */ case    2:  		/* bl 518592 */
		/* 821A2CC8h case    2:*/		regs.LR = 0x821A2CCC; return 0x82221688;
		/* 821A2CC8h case    2:*/		return 0x821A2CCC;
		  /* 821A2CCCh */ case    3:  		/* stfsu FR1, <#[R29 + 4]> */
		/* 821A2CCCh case    3:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A2CCCh case    3:*/		return 0x821A2CD0;
		  /* 821A2CD0h */ case    4:  		/* addic. R31, R31, -1 */
		/* 821A2CD0h case    4:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821A2CD0h case    4:*/		return 0x821A2CD4;
		  /* 821A2CD4h */ case    5:  		/* addi R30, R30, 2 */
		/* 821A2CD4h case    5:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821A2CD4h case    5:*/		return 0x821A2CD8;
		  /* 821A2CD8h */ case    6:  		/* bc 4, CR0_EQ, -40 */
		/* 821A2CD8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A2CB0;  }
		/* 821A2CD8h case    6:*/		return 0x821A2CDC;
	}
	return 0x821A2CDC;
} // Block from 821A2CC0h-821A2CDCh (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A2CDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2CDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2CDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2CDC);
		  /* 821A2CDCh */ case    0:  		/* addi R11, R1, 80 */
		/* 821A2CDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821A2CDCh case    0:*/		return 0x821A2CE0;
		  /* 821A2CE0h */ case    1:  		/* li R10, 0 */
		/* 821A2CE0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A2CE0h case    1:*/		return 0x821A2CE4;
		  /* 821A2CE4h */ case    2:  		/* addi R5, R1, 96 */
		/* 821A2CE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x60);
		/* 821A2CE4h case    2:*/		return 0x821A2CE8;
		  /* 821A2CE8h */ case    3:  		/* mr R4, R15 */
		/* 821A2CE8h case    3:*/		regs.R4 = regs.R15;
		/* 821A2CE8h case    3:*/		return 0x821A2CEC;
		  /* 821A2CECh */ case    4:  		/* mr R3, R22 */
		/* 821A2CECh case    4:*/		regs.R3 = regs.R22;
		/* 821A2CECh case    4:*/		return 0x821A2CF0;
		  /* 821A2CF0h */ case    5:  		/* stw R10, <#[R11]> */
		/* 821A2CF0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2CF0h case    5:*/		return 0x821A2CF4;
		  /* 821A2CF4h */ case    6:  		/* lwz R6, <#[R1 + 80]> */
		/* 821A2CF4h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821A2CF4h case    6:*/		return 0x821A2CF8;
		  /* 821A2CF8h */ case    7:  		/* bl 541504 */
		/* 821A2CF8h case    7:*/		regs.LR = 0x821A2CFC; return 0x82227038;
		/* 821A2CF8h case    7:*/		return 0x821A2CFC;
		  /* 821A2CFCh */ case    8:  		/* mr R30, R3 */
		/* 821A2CFCh case    8:*/		regs.R30 = regs.R3;
		/* 821A2CFCh case    8:*/		return 0x821A2D00;
		  /* 821A2D00h */ case    9:  		/* mr R3, R22 */
		/* 821A2D00h case    9:*/		regs.R3 = regs.R22;
		/* 821A2D00h case    9:*/		return 0x821A2D04;
		  /* 821A2D04h */ case   10:  		/* mr R4, R30 */
		/* 821A2D04h case   10:*/		regs.R4 = regs.R30;
		/* 821A2D04h case   10:*/		return 0x821A2D08;
		  /* 821A2D08h */ case   11:  		/* bl -175368 */
		/* 821A2D08h case   11:*/		regs.LR = 0x821A2D0C; return 0x82178000;
		/* 821A2D08h case   11:*/		return 0x821A2D0C;
		  /* 821A2D0Ch */ case   12:  		/* mr R31, R3 */
		/* 821A2D0Ch case   12:*/		regs.R31 = regs.R3;
		/* 821A2D0Ch case   12:*/		return 0x821A2D10;
		  /* 821A2D10h */ case   13:  		/* mr R3, R30 */
		/* 821A2D10h case   13:*/		regs.R3 = regs.R30;
		/* 821A2D10h case   13:*/		return 0x821A2D14;
		  /* 821A2D14h */ case   14:  		/* lwz R11, <#[R31]> */
		/* 821A2D14h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A2D14h case   14:*/		return 0x821A2D18;
		  /* 821A2D18h */ case   15:  		/* rlwimi R11, R15, 25, 4, 6 */
		/* 821A2D18h case   15:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R15);
		/* 821A2D18h case   15:*/		return 0x821A2D1C;
		  /* 821A2D1Ch */ case   16:  		/* stw R11, <#[R31]> */
		/* 821A2D1Ch case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A2D1Ch case   16:*/		return 0x821A2D20;
		  /* 821A2D20h */ case   17:  		/* bl -51568 */
		/* 821A2D20h case   17:*/		regs.LR = 0x821A2D24; return 0x821963B0;
		/* 821A2D20h case   17:*/		return 0x821A2D24;
		  /* 821A2D24h */ case   18:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A2D24h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A2D24h case   18:*/		return 0x821A2D28;
		  /* 821A2D28h */ case   19:  		/* oris R11, R11, 256 */
		/* 821A2D28h case   19:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A2D28h case   19:*/		return 0x821A2D2C;
		  /* 821A2D2Ch */ case   20:  		/* stw R11, <#[R30 + 8]> */
		/* 821A2D2Ch case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A2D2Ch case   20:*/		return 0x821A2D30;
		  /* 821A2D30h */ case   21:  		/* b 4420 */
		/* 821A2D30h case   21:*/		return 0x821A3E74;
		/* 821A2D30h case   21:*/		return 0x821A2D34;
	}
	return 0x821A2D34;
} // Block from 821A2CDCh-821A2D34h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821A2D34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2D34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2D34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2D34);
		  /* 821A2D34h */ case    0:  		/* lwz R30, <#[R24 + 4]> */
		/* 821A2D34h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R24 + 0x00000004) );
		/* 821A2D34h case    0:*/		return 0x821A2D38;
		  /* 821A2D38h */ case    1:  		/* cmplwi CR6, R30, 0 */
		/* 821A2D38h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A2D38h case    1:*/		return 0x821A2D3C;
		  /* 821A2D3Ch */ case    2:  		/* bc 12, CR6_EQ, 1216 */
		/* 821A2D3Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821A31FC;  }
		/* 821A2D3Ch case    2:*/		return 0x821A2D40;
		  /* 821A2D40h */ case    3:  		/* lwz R11, <#[R24]> */
		/* 821A2D40h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A2D40h case    3:*/		return 0x821A2D44;
		  /* 821A2D44h */ case    4:  		/* rlwinm. R11, R11, 0, 20, 20 */
		/* 821A2D44h case    4:*/		cpu::op::rlwinm<1,0,20,20>(regs,&regs.R11,regs.R11);
		/* 821A2D44h case    4:*/		return 0x821A2D48;
		  /* 821A2D48h */ case    5:  		/* bc 4, CR0_EQ, 824 */
		/* 821A2D48h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821A3080;  }
		/* 821A2D48h case    5:*/		return 0x821A2D4C;
		  /* 821A2D4Ch */ case    6:  		/* rlwinm. R11, R31, 9, 31, 31 */
		/* 821A2D4Ch case    6:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R31);
		/* 821A2D4Ch case    6:*/		return 0x821A2D50;
		  /* 821A2D50h */ case    7:  		/* bc 12, CR0_EQ, 84 */
		/* 821A2D50h case    7:*/		if ( regs.CR[0].eq ) { return 0x821A2DA4;  }
		/* 821A2D50h case    7:*/		return 0x821A2D54;
		  /* 821A2D54h */ case    8:  		/* mr R4, R20 */
		/* 821A2D54h case    8:*/		regs.R4 = regs.R20;
		/* 821A2D54h case    8:*/		return 0x821A2D58;
		  /* 821A2D58h */ case    9:  		/* mr R3, R22 */
		/* 821A2D58h case    9:*/		regs.R3 = regs.R22;
		/* 821A2D58h case    9:*/		return 0x821A2D5C;
		  /* 821A2D5Ch */ case   10:  		/* bl -126340 */
		/* 821A2D5Ch case   10:*/		regs.LR = 0x821A2D60; return 0x82183FD8;
		/* 821A2D5Ch case   10:*/		return 0x821A2D60;
		  /* 821A2D60h */ case   11:  		/* mr R31, R3 */
		/* 821A2D60h case   11:*/		regs.R31 = regs.R3;
		/* 821A2D60h case   11:*/		return 0x821A2D64;
		  /* 821A2D64h */ case   12:  		/* mr R4, R17 */
		/* 821A2D64h case   12:*/		regs.R4 = regs.R17;
		/* 821A2D64h case   12:*/		return 0x821A2D68;
		  /* 821A2D68h */ case   13:  		/* mr R3, R22 */
		/* 821A2D68h case   13:*/		regs.R3 = regs.R22;
		/* 821A2D68h case   13:*/		return 0x821A2D6C;
		  /* 821A2D6Ch */ case   14:  		/* bl -126356 */
		/* 821A2D6Ch case   14:*/		regs.LR = 0x821A2D70; return 0x82183FD8;
		/* 821A2D6Ch case   14:*/		return 0x821A2D70;
		  /* 821A2D70h */ case   15:  		/* mr R5, R3 */
		/* 821A2D70h case   15:*/		regs.R5 = regs.R3;
		/* 821A2D70h case   15:*/		return 0x821A2D74;
		  /* 821A2D74h */ case   16:  		/* cmplw CR6, R31, R3 */
		/* 821A2D74h case   16:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821A2D74h case   16:*/		return 0x821A2D78;
		  /* 821A2D78h */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 821A2D78h case   17:*/		if ( regs.CR[6].eq ) { return 0x821A2DA4;  }
		/* 821A2D78h case   17:*/		return 0x821A2D7C;
		  /* 821A2D7Ch */ case   18:  		/* addi R11, R1, 80 */
		/* 821A2D7Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821A2D7Ch case   18:*/		return 0x821A2D80;
		  /* 821A2D80h */ case   19:  		/* li R7, 0 */
		/* 821A2D80h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A2D80h case   19:*/		return 0x821A2D84;
		  /* 821A2D84h */ case   20:  		/* li R10, 0 */
		/* 821A2D84h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A2D84h case   20:*/		return 0x821A2D88;
		  /* 821A2D88h */ case   21:  		/* li R9, 0 */
		/* 821A2D88h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A2D88h case   21:*/		return 0x821A2D8C;
		  /* 821A2D8Ch */ case   22:  		/* li R8, 0 */
		/* 821A2D8Ch case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A2D8Ch case   22:*/		return 0x821A2D90;
		  /* 821A2D90h */ case   23:  		/* stw R7, <#[R11]> */
		/* 821A2D90h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2D90h case   23:*/		return 0x821A2D94;
		  /* 821A2D94h */ case   24:  		/* mr R4, R31 */
		/* 821A2D94h case   24:*/		regs.R4 = regs.R31;
		/* 821A2D94h case   24:*/		return 0x821A2D98;
		  /* 821A2D98h */ case   25:  		/* mr R3, R22 */
		/* 821A2D98h case   25:*/		regs.R3 = regs.R22;
		/* 821A2D98h case   25:*/		return 0x821A2D9C;
		  /* 821A2D9Ch */ case   26:  		/* lwz R6, <#[R1 + 80]> */
		/* 821A2D9Ch case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821A2D9Ch case   26:*/		return 0x821A2DA0;
		  /* 821A2DA0h */ case   27:  		/* bl -116008 */
		/* 821A2DA0h case   27:*/		regs.LR = 0x821A2DA4; return 0x82186878;
		/* 821A2DA0h case   27:*/		return 0x821A2DA4;
	}
	return 0x821A2DA4;
} // Block from 821A2D34h-821A2DA4h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821A2DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2DA4);
		  /* 821A2DA4h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821A2DA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821A2DA4h case    0:*/		return 0x821A2DA8;
		  /* 821A2DA8h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A2DA8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A2DA8h case    1:*/		return 0x821A2DAC;
		  /* 821A2DACh */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821A2DACh case    2:*/		if ( regs.CR[6].eq ) { return 0x821A2DE0;  }
		/* 821A2DACh case    2:*/		return 0x821A2DB0;
		  /* 821A2DB0h */ case    3:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A2DB0h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A2DB0h case    3:*/		return 0x821A2DB4;
		  /* 821A2DB4h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821A2DB4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A2DB4h case    4:*/		return 0x821A2DB8;
		  /* 821A2DB8h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821A2DB8h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A2DD8;  }
		/* 821A2DB8h case    5:*/		return 0x821A2DBC;
		  /* 821A2DBCh */ case    6:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A2DBCh case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A2DBCh case    6:*/		return 0x821A2DC0;
		  /* 821A2DC0h */ case    7:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A2DC0h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A2DC0h case    7:*/		return 0x821A2DC4;
		  /* 821A2DC4h */ case    8:  		/* cmplwi CR6, R9, 14080 */
		/* 821A2DC4h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A2DC4h case    8:*/		return 0x821A2DC8;
		  /* 821A2DC8h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821A2DC8h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821A2DD8;  }
		/* 821A2DC8h case    9:*/		return 0x821A2DCC;
		  /* 821A2DCCh */ case   10:  		/* lwz R9, <#[R11]> */
		/* 821A2DCCh case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2DCCh case   10:*/		return 0x821A2DD0;
		  /* 821A2DD0h */ case   11:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A2DD0h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A2DD0h case   11:*/		return 0x821A2DD4;
		  /* 821A2DD4h */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821A2DD4h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A2DE4;  }
		/* 821A2DD4h case   12:*/		return 0x821A2DD8;
	}
	return 0x821A2DD8;
} // Block from 821A2DA4h-821A2DD8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A2DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2DD8);
		  /* 821A2DD8h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A2DD8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2DD8h case    0:*/		return 0x821A2DDC;
		  /* 821A2DDCh */ case    1:  		/* b -52 */
		/* 821A2DDCh case    1:*/		return 0x821A2DA8;
		/* 821A2DDCh case    1:*/		return 0x821A2DE0;
	}
	return 0x821A2DE0;
} // Block from 821A2DD8h-821A2DE0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A2DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2DE0);
		  /* 821A2DE0h */ case    0:  		/* li R10, 0 */
		/* 821A2DE0h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A2DE0h case    0:*/		return 0x821A2DE4;
	}
	return 0x821A2DE4;
} // Block from 821A2DE0h-821A2DE4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A2DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2DE4);
		  /* 821A2DE4h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821A2DE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A2DE4h case    0:*/		return 0x821A2DE8;
		  /* 821A2DE8h */ case    1:  		/* mr R28, R17 */
		/* 821A2DE8h case    1:*/		regs.R28 = regs.R17;
		/* 821A2DE8h case    1:*/		return 0x821A2DEC;
		  /* 821A2DECh */ case    2:  		/* bc 4, CR6_EQ, 8 */
		/* 821A2DECh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A2DF4;  }
		/* 821A2DECh case    2:*/		return 0x821A2DF0;
		  /* 821A2DF0h */ case    3:  		/* mr R28, R20 */
		/* 821A2DF0h case    3:*/		regs.R28 = regs.R20;
		/* 821A2DF0h case    3:*/		return 0x821A2DF4;
	}
	return 0x821A2DF4;
} // Block from 821A2DE4h-821A2DF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A2DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2DF4);
		  /* 821A2DF4h */ case    0:  		/* mr R4, R30 */
		/* 821A2DF4h case    0:*/		regs.R4 = regs.R30;
		/* 821A2DF4h case    0:*/		return 0x821A2DF8;
		  /* 821A2DF8h */ case    1:  		/* mr R3, R28 */
		/* 821A2DF8h case    1:*/		regs.R3 = regs.R28;
		/* 821A2DF8h case    1:*/		return 0x821A2DFC;
		  /* 821A2DFCh */ case    2:  		/* bl 537284 */
		/* 821A2DFCh case    2:*/		regs.LR = 0x821A2E00; return 0x822260C0;
		/* 821A2DFCh case    2:*/		return 0x821A2E00;
		  /* 821A2E00h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A2E00h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A2E00h case    3:*/		return 0x821A2E04;
		  /* 821A2E04h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 821A2E04h case    4:*/		if ( regs.CR[0].eq ) { return 0x821A2E1C;  }
		/* 821A2E04h case    4:*/		return 0x821A2E08;
		  /* 821A2E08h */ case    5:  		/* li R6, 0 */
		/* 821A2E08h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A2E08h case    5:*/		return 0x821A2E0C;
		  /* 821A2E0Ch */ case    6:  		/* mr R5, R30 */
		/* 821A2E0Ch case    6:*/		regs.R5 = regs.R30;
		/* 821A2E0Ch case    6:*/		return 0x821A2E10;
		  /* 821A2E10h */ case    7:  		/* mr R4, R28 */
		/* 821A2E10h case    7:*/		regs.R4 = regs.R28;
		/* 821A2E10h case    7:*/		return 0x821A2E14;
		  /* 821A2E14h */ case    8:  		/* mr R3, R22 */
		/* 821A2E14h case    8:*/		regs.R3 = regs.R22;
		/* 821A2E14h case    8:*/		return 0x821A2E18;
		  /* 821A2E18h */ case    9:  		/* bl 568872 */
		/* 821A2E18h case    9:*/		regs.LR = 0x821A2E1C; return 0x8222DC40;
		/* 821A2E18h case    9:*/		return 0x821A2E1C;
	}
	return 0x821A2E1C;
} // Block from 821A2DF4h-821A2E1Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A2E1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2E1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2E1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2E1C);
		  /* 821A2E1Ch */ case    0:  		/* mr R4, R21 */
		/* 821A2E1Ch case    0:*/		regs.R4 = regs.R21;
		/* 821A2E1Ch case    0:*/		return 0x821A2E20;
		  /* 821A2E20h */ case    1:  		/* mr R3, R30 */
		/* 821A2E20h case    1:*/		regs.R3 = regs.R30;
		/* 821A2E20h case    1:*/		return 0x821A2E24;
		  /* 821A2E24h */ case    2:  		/* bl 537244 */
		/* 821A2E24h case    2:*/		regs.LR = 0x821A2E28; return 0x822260C0;
		/* 821A2E24h case    2:*/		return 0x821A2E28;
		  /* 821A2E28h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A2E28h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A2E28h case    3:*/		return 0x821A2E2C;
		  /* 821A2E2Ch */ case    4:  		/* bc 12, CR0_EQ, 48 */
		/* 821A2E2Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821A2E5C;  }
		/* 821A2E2Ch case    4:*/		return 0x821A2E30;
		  /* 821A2E30h */ case    5:  		/* mr R4, R28 */
		/* 821A2E30h case    5:*/		regs.R4 = regs.R28;
		/* 821A2E30h case    5:*/		return 0x821A2E34;
		  /* 821A2E34h */ case    6:  		/* mr R3, R22 */
		/* 821A2E34h case    6:*/		regs.R3 = regs.R22;
		/* 821A2E34h case    6:*/		return 0x821A2E38;
		  /* 821A2E38h */ case    7:  		/* bl -175672 */
		/* 821A2E38h case    7:*/		regs.LR = 0x821A2E3C; return 0x82178000;
		/* 821A2E38h case    7:*/		return 0x821A2E3C;
		  /* 821A2E3Ch */ case    8:  		/* mr R4, R3 */
		/* 821A2E3Ch case    8:*/		regs.R4 = regs.R3;
		/* 821A2E3Ch case    8:*/		return 0x821A2E40;
		  /* 821A2E40h */ case    9:  		/* mr R3, R30 */
		/* 821A2E40h case    9:*/		regs.R3 = regs.R30;
		/* 821A2E40h case    9:*/		return 0x821A2E44;
		  /* 821A2E44h */ case   10:  		/* bl -175228 */
		/* 821A2E44h case   10:*/		regs.LR = 0x821A2E48; return 0x821781C8;
		/* 821A2E44h case   10:*/		return 0x821A2E48;
		  /* 821A2E48h */ case   11:  		/* li R6, 0 */
		/* 821A2E48h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A2E48h case   11:*/		return 0x821A2E4C;
		  /* 821A2E4Ch */ case   12:  		/* mr R5, R21 */
		/* 821A2E4Ch case   12:*/		regs.R5 = regs.R21;
		/* 821A2E4Ch case   12:*/		return 0x821A2E50;
		  /* 821A2E50h */ case   13:  		/* mr R4, R30 */
		/* 821A2E50h case   13:*/		regs.R4 = regs.R30;
		/* 821A2E50h case   13:*/		return 0x821A2E54;
		  /* 821A2E54h */ case   14:  		/* mr R3, R22 */
		/* 821A2E54h case   14:*/		regs.R3 = regs.R22;
		/* 821A2E54h case   14:*/		return 0x821A2E58;
		  /* 821A2E58h */ case   15:  		/* bl 568808 */
		/* 821A2E58h case   15:*/		regs.LR = 0x821A2E5C; return 0x8222DC40;
		/* 821A2E58h case   15:*/		return 0x821A2E5C;
	}
	return 0x821A2E5C;
} // Block from 821A2E1Ch-821A2E5Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A2E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2E5C);
		  /* 821A2E5Ch */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A2E5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A2E5Ch case    0:*/		return 0x821A2E60;
		  /* 821A2E60h */ case    1:  		/* li R5, 0 */
		/* 821A2E60h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A2E60h case    1:*/		return 0x821A2E64;
		  /* 821A2E64h */ case    2:  		/* lwz R10, <#[R30 + 8]> */
		/* 821A2E64h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821A2E64h case    2:*/		return 0x821A2E68;
		  /* 821A2E68h */ case    3:  		/* mr R4, R29 */
		/* 821A2E68h case    3:*/		regs.R4 = regs.R29;
		/* 821A2E68h case    3:*/		return 0x821A2E6C;
		  /* 821A2E6Ch */ case    4:  		/* rlwinm R11, R11, 18, 29, 31 */
		/* 821A2E6Ch case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R11);
		/* 821A2E6Ch case    4:*/		return 0x821A2E70;
		  /* 821A2E70h */ case    5:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 821A2E70h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 821A2E70h case    5:*/		return 0x821A2E74;
		  /* 821A2E74h */ case    6:  		/* mr R3, R22 */
		/* 821A2E74h case    6:*/		regs.R3 = regs.R22;
		/* 821A2E74h case    6:*/		return 0x821A2E78;
		  /* 821A2E78h */ case    7:  		/* add R6, R10, R11 */
		/* 821A2E78h case    7:*/		cpu::op::add<0>(regs,&regs.R6,regs.R10,regs.R11);
		/* 821A2E78h case    7:*/		return 0x821A2E7C;
		  /* 821A2E7Ch */ case    8:  		/* bl 531588 */
		/* 821A2E7Ch case    8:*/		regs.LR = 0x821A2E80; return 0x82224B00;
		/* 821A2E7Ch case    8:*/		return 0x821A2E80;
		  /* 821A2E80h */ case    9:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821A2E80h case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821A2E80h case    9:*/		return 0x821A2E84;
		  /* 821A2E84h */ case   10:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A2E84h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A2E84h case   10:*/		return 0x821A2E88;
		  /* 821A2E88h */ case   11:  		/* addi R11, R11, 36 */
		/* 821A2E88h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A2E88h case   11:*/		return 0x821A2E8C;
		  /* 821A2E8Ch */ case   12:  		/* addi R10, R10, 36 */
		/* 821A2E8Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A2E8Ch case   12:*/		return 0x821A2E90;
		  /* 821A2E90h */ case   13:  		/* addi R8, R11, -36 */
		/* 821A2E90h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A2E90h case   13:*/		return 0x821A2E94;
		  /* 821A2E94h */ case   14:  		/* addi R6, R10, -36 */
		/* 821A2E94h case   14:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A2E94h case   14:*/		return 0x821A2E98;
		  /* 821A2E98h */ case   15:  		/* addi R9, R10, 4 */
		/* 821A2E98h case   15:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A2E98h case   15:*/		return 0x821A2E9C;
		  /* 821A2E9Ch */ case   16:  		/* lwz R7, <#[R11]> */
		/* 821A2E9Ch case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2E9Ch case   16:*/		return 0x821A2EA0;
		  /* 821A2EA0h */ case   17:  		/* mr R31, R3 */
		/* 821A2EA0h case   17:*/		regs.R31 = regs.R3;
		/* 821A2EA0h case   17:*/		return 0x821A2EA4;
		  /* 821A2EA4h */ case   18:  		/* li R27, 0 */
		/* 821A2EA4h case   18:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A2EA4h case   18:*/		return 0x821A2EA8;
		  /* 821A2EA8h */ case   19:  		/* addi R29, R3, 44 */
		/* 821A2EA8h case   19:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x2C);
		/* 821A2EA8h case   19:*/		return 0x821A2EAC;
		  /* 821A2EACh */ case   20:  		/* subf R26, R3, R30 */
		/* 821A2EACh case   20:*/		cpu::op::subf<0>(regs,&regs.R26,regs.R3,regs.R30);
		/* 821A2EACh case   20:*/		return 0x821A2EB0;
		  /* 821A2EB0h */ case   21:  		/* stw R7, <#[R10]> */
		/* 821A2EB0h case   21:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A2EB0h case   21:*/		return 0x821A2EB4;
		  /* 821A2EB4h */ case   22:  		/* lwz R7, <#[R11]> */
		/* 821A2EB4h case   22:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2EB4h case   22:*/		return 0x821A2EB8;
		  /* 821A2EB8h */ case   23:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A2EB8h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A2EB8h case   23:*/		return 0x821A2EBC;
		  /* 821A2EBCh */ case   24:  		/* stw R6, <#[R7]> */
		/* 821A2EBCh case   24:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821A2EBCh case   24:*/		return 0x821A2EC0;
		  /* 821A2EC0h */ case   25:  		/* stw R8, <#[R10 + 4]> */
		/* 821A2EC0h case   25:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A2EC0h case   25:*/		return 0x821A2EC4;
		  /* 821A2EC4h */ case   26:  		/* stw R9, <#[R11]> */
		/* 821A2EC4h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A2EC4h case   26:*/		return 0x821A2EC8;
		  /* 821A2EC8h */ case   27:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A2EC8h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A2EC8h case   27:*/		return 0x821A2ECC;
		  /* 821A2ECCh */ case   28:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A2ECCh case   28:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A2ECCh case   28:*/		return 0x821A2ED0;
		  /* 821A2ED0h */ case   29:  		/* cmplw CR6, R27, R11 */
		/* 821A2ED0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821A2ED0h case   29:*/		return 0x821A2ED4;
		  /* 821A2ED4h */ case   30:  		/* bc 4, CR6_LT, 32 */
		/* 821A2ED4h case   30:*/		if ( !regs.CR[6].lt ) { return 0x821A2EF4;  }
		/* 821A2ED4h case   30:*/		return 0x821A2ED8;
		  /* 821A2ED8h */ case   31:  		/* mr R3, R31 */
		/* 821A2ED8h case   31:*/		regs.R3 = regs.R31;
		/* 821A2ED8h case   31:*/		return 0x821A2EDC;
		  /* 821A2EDCh */ case   32:  		/* lwzx R4, <#[R26 + R29]> */
		/* 821A2EDCh case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + regs.R29 + 0x00000000) );
		/* 821A2EDCh case   32:*/		return 0x821A2EE0;
		  /* 821A2EE0h */ case   33:  		/* bl -175384 */
		/* 821A2EE0h case   33:*/		regs.LR = 0x821A2EE4; return 0x821781C8;
		/* 821A2EE0h case   33:*/		return 0x821A2EE4;
		  /* 821A2EE4h */ case   34:  		/* stw R3, <#[R29]> */
		/* 821A2EE4h case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000000) );
		/* 821A2EE4h case   34:*/		return 0x821A2EE8;
		  /* 821A2EE8h */ case   35:  		/* addi R27, R27, 1 */
		/* 821A2EE8h case   35:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A2EE8h case   35:*/		return 0x821A2EEC;
		  /* 821A2EECh */ case   36:  		/* addi R29, R29, 4 */
		/* 821A2EECh case   36:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x4);
		/* 821A2EECh case   36:*/		return 0x821A2EF0;
		  /* 821A2EF0h */ case   37:  		/* b -40 */
		/* 821A2EF0h case   37:*/		return 0x821A2EC8;
		/* 821A2EF0h case   37:*/		return 0x821A2EF4;
	}
	return 0x821A2EF4;
} // Block from 821A2E5Ch-821A2EF4h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821A2EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2EF4);
		  /* 821A2EF4h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A2EF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A2EF4h case    0:*/		return 0x821A2EF8;
		  /* 821A2EF8h */ case    1:  		/* li R27, 0 */
		/* 821A2EF8h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A2EF8h case    1:*/		return 0x821A2EFC;
		  /* 821A2EFCh */ case    2:  		/* rlwinm. R29, R11, 31, 28, 31 */
		/* 821A2EFCh case    2:*/		cpu::op::rlwinm<1,31,28,31>(regs,&regs.R29,regs.R11);
		/* 821A2EFCh case    2:*/		return 0x821A2F00;
		  /* 821A2F00h */ case    3:  		/* bc 12, CR0_EQ, 84 */
		/* 821A2F00h case    3:*/		if ( regs.CR[0].eq ) { return 0x821A2F54;  }
		/* 821A2F00h case    3:*/		return 0x821A2F04;
		  /* 821A2F04h */ case    4:  		/* addi R11, R29, -1 */
		/* 821A2F04h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821A2F04h case    4:*/		return 0x821A2F08;
		  /* 821A2F08h */ case    5:  		/* lwz R10, <#[R30 + 8]> */
		/* 821A2F08h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821A2F08h case    5:*/		return 0x821A2F0C;
		  /* 821A2F0Ch */ case    6:  		/* mr R4, R28 */
		/* 821A2F0Ch case    6:*/		regs.R4 = regs.R28;
		/* 821A2F0Ch case    6:*/		return 0x821A2F10;
		  /* 821A2F10h */ case    7:  		/* andc R11, R29, R11 */
		/* 821A2F10h case    7:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821A2F10h case    7:*/		return 0x821A2F14;
		  /* 821A2F14h */ case    8:  		/* mr R3, R22 */
		/* 821A2F14h case    8:*/		regs.R3 = regs.R22;
		/* 821A2F14h case    8:*/		return 0x821A2F18;
		  /* 821A2F18h */ case    9:  		/* cntlzw R9, R11 */
		/* 821A2F18h case    9:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R11);
		/* 821A2F18h case    9:*/		return 0x821A2F1C;
		  /* 821A2F1Ch */ case   10:  		/* subf R29, R11, R29 */
		/* 821A2F1Ch case   10:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 821A2F1Ch case   10:*/		return 0x821A2F20;
		  /* 821A2F20h */ case   11:  		/* subfic R5, R9, 31 */
		/* 821A2F20h case   11:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R9,0x1F);
		/* 821A2F20h case   11:*/		return 0x821A2F24;
		  /* 821A2F24h */ case   12:  		/* rlwinm R26, R10, 13, 29, 31 */
		/* 821A2F24h case   12:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R26,regs.R10);
		/* 821A2F24h case   12:*/		return 0x821A2F28;
		  /* 821A2F28h */ case   13:  		/* bl -175640 */
		/* 821A2F28h case   13:*/		regs.LR = 0x821A2F2C; return 0x82178110;
		/* 821A2F28h case   13:*/		return 0x821A2F2C;
		  /* 821A2F2Ch */ case   14:  		/* mr R4, R3 */
		/* 821A2F2Ch case   14:*/		regs.R4 = regs.R3;
		/* 821A2F2Ch case   14:*/		return 0x821A2F30;
		  /* 821A2F30h */ case   15:  		/* mr R3, R31 */
		/* 821A2F30h case   15:*/		regs.R3 = regs.R31;
		/* 821A2F30h case   15:*/		return 0x821A2F34;
		  /* 821A2F34h */ case   16:  		/* bl -175468 */
		/* 821A2F34h case   16:*/		regs.LR = 0x821A2F38; return 0x821781C8;
		/* 821A2F34h case   16:*/		return 0x821A2F38;
		  /* 821A2F38h */ case   17:  		/* add R11, R26, R27 */
		/* 821A2F38h case   17:*/		cpu::op::add<0>(regs,&regs.R11,regs.R26,regs.R27);
		/* 821A2F38h case   17:*/		return 0x821A2F3C;
		  /* 821A2F3Ch */ case   18:  		/* addi R27, R27, 1 */
		/* 821A2F3Ch case   18:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A2F3Ch case   18:*/		return 0x821A2F40;
		  /* 821A2F40h */ case   19:  		/* addi R11, R11, 11 */
		/* 821A2F40h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821A2F40h case   19:*/		return 0x821A2F44;
		  /* 821A2F44h */ case   20:  		/* cmplwi CR6, R29, 0 */
		/* 821A2F44h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A2F44h case   20:*/		return 0x821A2F48;
		  /* 821A2F48h */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A2F48h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A2F48h case   21:*/		return 0x821A2F4C;
		  /* 821A2F4Ch */ case   22:  		/* stwx R3, <#[R11 + R31]> */
		/* 821A2F4Ch case   22:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821A2F4Ch case   22:*/		return 0x821A2F50;
		  /* 821A2F50h */ case   23:  		/* bc 4, CR6_EQ, -76 */
		/* 821A2F50h case   23:*/		if ( !regs.CR[6].eq ) { return 0x821A2F04;  }
		/* 821A2F50h case   23:*/		return 0x821A2F54;
	}
	return 0x821A2F54;
} // Block from 821A2EF4h-821A2F54h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821A2F54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2F54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2F54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2F54);
		  /* 821A2F54h */ case    0:  		/* addi R8, R30, 4 */
		/* 821A2F54h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x4);
		/* 821A2F54h case    0:*/		return 0x821A2F58;
		  /* 821A2F58h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821A2F58h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A2F58h case    1:*/		return 0x821A2F5C;
		  /* 821A2F5Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A2F5Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A2F5Ch case    2:*/		return 0x821A2F60;
		  /* 821A2F60h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821A2F60h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A2FBC;  }
		/* 821A2F60h case    3:*/		return 0x821A2F64;
		  /* 821A2F64h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A2F64h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A2F64h case    4:*/		return 0x821A2F68;
		  /* 821A2F68h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821A2F68h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A2F68h case    5:*/		return 0x821A2F6C;
		  /* 821A2F6Ch */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821A2F6Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821A2FA8;  }
		/* 821A2F6Ch case    6:*/		return 0x821A2F70;
		  /* 821A2F70h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A2F70h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A2F70h case    7:*/		return 0x821A2F74;
		  /* 821A2F74h */ case    8:  		/* addi R10, R10, 4 */
		/* 821A2F74h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A2F74h case    8:*/		return 0x821A2F78;
		  /* 821A2F78h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821A2F78h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A2F78h case    9:*/		return 0x821A2F7C;
		  /* 821A2F7Ch */ case   10:  		/* b 12 */
		/* 821A2F7Ch case   10:*/		return 0x821A2F88;
		/* 821A2F7Ch case   10:*/		return 0x821A2F80;
		  /* 821A2F80h */ case   11:  		/* addi R10, R9, 8 */
		/* 821A2F80h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A2F80h case   11:*/		return 0x821A2F84;
		  /* 821A2F84h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A2F84h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A2F84h case   12:*/		return 0x821A2F88;
	}
	return 0x821A2F88;
} // Block from 821A2F54h-821A2F88h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A2F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2F88);
		  /* 821A2F88h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A2F88h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A2F88h case    0:*/		return 0x821A2F8C;
		  /* 821A2F8Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A2F8Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A2F80;  }
		/* 821A2F8Ch case    1:*/		return 0x821A2F90;
		  /* 821A2F90h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A2F90h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2F90h case    2:*/		return 0x821A2F94;
		  /* 821A2F94h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A2F94h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A2F94h case    3:*/		return 0x821A2F98;
		  /* 821A2F98h */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 821A2F98h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821A2F98h case    4:*/		return 0x821A2F9C;
		  /* 821A2F9Ch */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A2F9Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A2F9Ch case    5:*/		return 0x821A2FA0;
		  /* 821A2FA0h */ case    6:  		/* stw R11, <#[R31 + 4]> */
		/* 821A2FA0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821A2FA0h case    6:*/		return 0x821A2FA4;
		  /* 821A2FA4h */ case    7:  		/* stw R31, <#[R11 + 12]> */
		/* 821A2FA4h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A2FA4h case    7:*/		return 0x821A2FA8;
	}
	return 0x821A2FA8;
} // Block from 821A2F88h-821A2FA8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A2FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2FA8);
		  /* 821A2FA8h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A2FA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A2FA8h case    0:*/		return 0x821A2FAC;
		  /* 821A2FACh */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A2FACh case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A2FACh case    1:*/		return 0x821A2FB0;
		  /* 821A2FB0h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821A2FB0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A2F58;  }
		/* 821A2FB0h case    2:*/		return 0x821A2FB4;
		  /* 821A2FB4h */ case    3:  		/* addi R8, R11, 8 */
		/* 821A2FB4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821A2FB4h case    3:*/		return 0x821A2FB8;
		  /* 821A2FB8h */ case    4:  		/* b -96 */
		/* 821A2FB8h case    4:*/		return 0x821A2F58;
		/* 821A2FB8h case    4:*/		return 0x821A2FBC;
	}
	return 0x821A2FBC;
} // Block from 821A2FA8h-821A2FBCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A2FBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A2FBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A2FBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A2FBC);
		  /* 821A2FBCh */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A2FBCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A2FBCh case    0:*/		return 0x821A2FC0;
		  /* 821A2FC0h */ case    1:  		/* lis R10, 256 */
		/* 821A2FC0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0x100);
		/* 821A2FC0h case    1:*/		return 0x821A2FC4;
		  /* 821A2FC4h */ case    2:  		/* rlwinm R9, R11, 13, 29, 31 */
		/* 821A2FC4h case    2:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R9,regs.R11);
		/* 821A2FC4h case    2:*/		return 0x821A2FC8;
		  /* 821A2FC8h */ case    3:  		/* rlwinm R8, R11, 0, 31, 26 */
		/* 821A2FC8h case    3:*/		cpu::op::rlwinm<0,0,31,26>(regs,&regs.R8,regs.R11);
		/* 821A2FC8h case    3:*/		return 0x821A2FCC;
		  /* 821A2FCCh */ case    4:  		/* slw R11, R14, R9 */
		/* 821A2FCCh case    4:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R14,regs.R9);
		/* 821A2FCCh case    4:*/		return 0x821A2FD0;
		  /* 821A2FD0h */ case    5:  		/* addi R11, R11, -1 */
		/* 821A2FD0h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A2FD0h case    5:*/		return 0x821A2FD4;
		  /* 821A2FD4h */ case    6:  		/* rlwimi R10, R11, 1, 27, 30 */
		/* 821A2FD4h case    6:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R10,regs.R11);
		/* 821A2FD4h case    6:*/		return 0x821A2FD8;
		  /* 821A2FD8h */ case    7:  		/* or R11, R10, R8 */
		/* 821A2FD8h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R8);
		/* 821A2FD8h case    7:*/		return 0x821A2FDC;
		  /* 821A2FDCh */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 821A2FDCh case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A2FDCh case    8:*/		return 0x821A2FE0;
		  /* 821A2FE0h */ case    9:  		/* lwz R10, <#[R30 + 8]> */
		/* 821A2FE0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821A2FE0h case    9:*/		return 0x821A2FE4;
		  /* 821A2FE4h */ case   10:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A2FE4h case   10:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A2FE4h case   10:*/		return 0x821A2FE8;
		  /* 821A2FE8h */ case   11:  		/* bc 12, CR0_EQ, 112 */
		/* 821A2FE8h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A3058;  }
		/* 821A2FE8h case   11:*/		return 0x821A2FEC;
		  /* 821A2FECh */ case   12:  		/* oris R11, R11, 128 */
		/* 821A2FECh case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A2FECh case   12:*/		return 0x821A2FF0;
		  /* 821A2FF0h */ case   13:  		/* mr R3, R30 */
		/* 821A2FF0h case   13:*/		regs.R3 = regs.R30;
		/* 821A2FF0h case   13:*/		return 0x821A2FF4;
		  /* 821A2FF4h */ case   14:  		/* stw R11, <#[R31 + 8]> */
		/* 821A2FF4h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A2FF4h case   14:*/		return 0x821A2FF8;
		  /* 821A2FF8h */ case   15:  		/* bl -128784 */
		/* 821A2FF8h case   15:*/		regs.LR = 0x821A2FFC; return 0x821838E8;
		/* 821A2FF8h case   15:*/		return 0x821A2FFC;
		  /* 821A2FFCh */ case   16:  		/* sth R3, <#[R31 + 18]> */
		/* 821A2FFCh case   16:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 821A2FFCh case   16:*/		return 0x821A3000;
		  /* 821A3000h */ case   17:  		/* lwz R3, <#[R22 + 660]> */
		/* 821A3000h case   17:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R22 + 0x00000294) );
		/* 821A3000h case   17:*/		return 0x821A3004;
		  /* 821A3004h */ case   18:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A3004h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A3004h case   18:*/		return 0x821A3008;
		  /* 821A3008h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A3008h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A3008h case   19:*/		return 0x821A300C;
		  /* 821A300Ch */ case   20:  		/* bc 4, CR0_EQ, 40 */
		/* 821A300Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x821A3034;  }
		/* 821A300Ch case   20:*/		return 0x821A3010;
		  /* 821A3010h */ case   21:  		/* lwz R11, <#[R3]> */
		/* 821A3010h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3010h case   21:*/		return 0x821A3014;
		  /* 821A3014h */ case   22:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A3014h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A3014h case   22:*/		return 0x821A3018;
		  /* 821A3018h */ case   23:  		/* addic. R11, R11, -4 */
		/* 821A3018h case   23:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A3018h case   23:*/		return 0x821A301C;
		  /* 821A301Ch */ case   24:  		/* bc 12, CR0_EQ, 24 */
		/* 821A301Ch case   24:*/		if ( regs.CR[0].eq ) { return 0x821A3034;  }
		/* 821A301Ch case   24:*/		return 0x821A3020;
		  /* 821A3020h */ case   25:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A3020h case   25:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A3020h case   25:*/		return 0x821A3024;
		  /* 821A3024h */ case   26:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A3024h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A3024h case   26:*/		return 0x821A3028;
		  /* 821A3028h */ case   27:  		/* addi R10, R10, 1 */
		/* 821A3028h case   27:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A3028h case   27:*/		return 0x821A302C;
		  /* 821A302Ch */ case   28:  		/* cmplw CR6, R10, R9 */
		/* 821A302Ch case   28:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A302Ch case   28:*/		return 0x821A3030;
		  /* 821A3030h */ case   29:  		/* bc 4, CR6_GT, 16 */
		/* 821A3030h case   29:*/		if ( !regs.CR[6].gt ) { return 0x821A3040;  }
		/* 821A3030h case   29:*/		return 0x821A3034;
	}
	return 0x821A3034;
} // Block from 821A2FBCh-821A3034h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821A3034h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3034( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3034) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3034);
		  /* 821A3034h */ case    0:  		/* li R4, 1 */
		/* 821A3034h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A3034h case    0:*/		return 0x821A3038;
		  /* 821A3038h */ case    1:  		/* bl -89968 */
		/* 821A3038h case    1:*/		regs.LR = 0x821A303C; return 0x8218D0C8;
		/* 821A3038h case    1:*/		return 0x821A303C;
		  /* 821A303Ch */ case    2:  		/* mr R11, R3 */
		/* 821A303Ch case    2:*/		regs.R11 = regs.R3;
		/* 821A303Ch case    2:*/		return 0x821A3040;
	}
	return 0x821A3040;
} // Block from 821A3034h-821A3040h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A3040h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3040( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3040) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3040);
		  /* 821A3040h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A3040h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A3040h case    0:*/		return 0x821A3044;
		  /* 821A3044h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A3044h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A3044h case    1:*/		return 0x821A3048;
		  /* 821A3048h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A3048h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A3048h case    2:*/		return 0x821A304C;
		  /* 821A304Ch */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A304Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A304Ch case    3:*/		return 0x821A3050;
		  /* 821A3050h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A3050h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A3050h case    4:*/		return 0x821A3054;
		  /* 821A3054h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A3054h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A3054h case    5:*/		return 0x821A3058;
	}
	return 0x821A3058;
} // Block from 821A3040h-821A3058h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A3058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3058);
		  /* 821A3058h */ case    0:  		/* li R6, 1 */
		/* 821A3058h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A3058h case    0:*/		return 0x821A305C;
		  /* 821A305Ch */ case    1:  		/* li R5, 0 */
		/* 821A305Ch case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A305Ch case    1:*/		return 0x821A3060;
		  /* 821A3060h */ case    2:  		/* mr R4, R30 */
		/* 821A3060h case    2:*/		regs.R4 = regs.R30;
		/* 821A3060h case    2:*/		return 0x821A3064;
		  /* 821A3064h */ case    3:  		/* mr R3, R22 */
		/* 821A3064h case    3:*/		regs.R3 = regs.R22;
		/* 821A3064h case    3:*/		return 0x821A3068;
		  /* 821A3068h */ case    4:  		/* bl 557920 */
		/* 821A3068h case    4:*/		regs.LR = 0x821A306C; return 0x8222B3C8;
		/* 821A3068h case    4:*/		return 0x821A306C;
		  /* 821A306Ch */ case    5:  		/* mr R4, R31 */
		/* 821A306Ch case    5:*/		regs.R4 = regs.R31;
		/* 821A306Ch case    5:*/		return 0x821A3070;
		  /* 821A3070h */ case    6:  		/* mr R3, R22 */
		/* 821A3070h case    6:*/		regs.R3 = regs.R22;
		/* 821A3070h case    6:*/		return 0x821A3074;
		  /* 821A3074h */ case    7:  		/* bl -9660 */
		/* 821A3074h case    7:*/		regs.LR = 0x821A3078; return 0x821A0AB8;
		/* 821A3074h case    7:*/		return 0x821A3078;
		  /* 821A3078h */ case    8:  		/* mr R30, R31 */
		/* 821A3078h case    8:*/		regs.R30 = regs.R31;
		/* 821A3078h case    8:*/		return 0x821A307C;
		  /* 821A307Ch */ case    9:  		/* b 44 */
		/* 821A307Ch case    9:*/		return 0x821A30A8;
		/* 821A307Ch case    9:*/		return 0x821A3080;
	}
	return 0x821A3080;
} // Block from 821A3058h-821A3080h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A3080h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3080( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3080) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3080);
		  /* 821A3080h */ case    0:  		/* mr R4, R21 */
		/* 821A3080h case    0:*/		regs.R4 = regs.R21;
		/* 821A3080h case    0:*/		return 0x821A3084;
		  /* 821A3084h */ case    1:  		/* mr R3, R30 */
		/* 821A3084h case    1:*/		regs.R3 = regs.R30;
		/* 821A3084h case    1:*/		return 0x821A3088;
		  /* 821A3088h */ case    2:  		/* bl 536632 */
		/* 821A3088h case    2:*/		regs.LR = 0x821A308C; return 0x822260C0;
		/* 821A3088h case    2:*/		return 0x821A308C;
		  /* 821A308Ch */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A308Ch case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A308Ch case    3:*/		return 0x821A3090;
		  /* 821A3090h */ case    4:  		/* bc 12, CR0_EQ, 24 */
		/* 821A3090h case    4:*/		if ( regs.CR[0].eq ) { return 0x821A30A8;  }
		/* 821A3090h case    4:*/		return 0x821A3094;
		  /* 821A3094h */ case    5:  		/* li R6, 0 */
		/* 821A3094h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A3094h case    5:*/		return 0x821A3098;
		  /* 821A3098h */ case    6:  		/* mr R5, R21 */
		/* 821A3098h case    6:*/		regs.R5 = regs.R21;
		/* 821A3098h case    6:*/		return 0x821A309C;
		  /* 821A309Ch */ case    7:  		/* mr R4, R30 */
		/* 821A309Ch case    7:*/		regs.R4 = regs.R30;
		/* 821A309Ch case    7:*/		return 0x821A30A0;
		  /* 821A30A0h */ case    8:  		/* mr R3, R22 */
		/* 821A30A0h case    8:*/		regs.R3 = regs.R22;
		/* 821A30A0h case    8:*/		return 0x821A30A4;
		  /* 821A30A4h */ case    9:  		/* bl 568220 */
		/* 821A30A4h case    9:*/		regs.LR = 0x821A30A8; return 0x8222DC40;
		/* 821A30A4h case    9:*/		return 0x821A30A8;
	}
	return 0x821A30A8;
} // Block from 821A3080h-821A30A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A30A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A30A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A30A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A30A8);
		  /* 821A30A8h */ case    0:  		/* lwz R10, <#[R30 + 8]> */
		/* 821A30A8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821A30A8h case    0:*/		return 0x821A30AC;
		  /* 821A30ACh */ case    1:  		/* li R7, 0 */
		/* 821A30ACh case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A30ACh case    1:*/		return 0x821A30B0;
		  /* 821A30B0h */ case    2:  		/* li R6, 0 */
		/* 821A30B0h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A30B0h case    2:*/		return 0x821A30B4;
		  /* 821A30B4h */ case    3:  		/* li R11, 0 */
		/* 821A30B4h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A30B4h case    3:*/		return 0x821A30B8;
		  /* 821A30B8h */ case    4:  		/* rlwinm R5, R10, 13, 29, 31 */
		/* 821A30B8h case    4:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R10);
		/* 821A30B8h case    4:*/		return 0x821A30BC;
		  /* 821A30BCh */ case    5:  		/* addi R8, R30, 44 */
		/* 821A30BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x2C);
		/* 821A30BCh case    5:*/		return 0x821A30C0;
		  /* 821A30C0h */ case    6:  		/* li R26, 3 */
		/* 821A30C0h case    6:*/		cpu::op::li<0>(regs,&regs.R26,0x3);
		/* 821A30C0h case    6:*/		return 0x821A30C4;
		  /* 821A30C4h */ case    7:  		/* cmplw CR6, R11, R5 */
		/* 821A30C4h case    7:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R5);
		/* 821A30C4h case    7:*/		return 0x821A30C8;
		  /* 821A30C8h */ case    8:  		/* bc 4, CR6_LT, 88 */
		/* 821A30C8h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821A3120;  }
		/* 821A30C8h case    8:*/		return 0x821A30CC;
		  /* 821A30CCh */ case    9:  		/* lwz R10, <#[R8]> */
		/* 821A30CCh case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A30CCh case    9:*/		return 0x821A30D0;
		  /* 821A30D0h */ case   10:  		/* lwz R9, <#[R10 + 12]> */
		/* 821A30D0h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 821A30D0h case   10:*/		return 0x821A30D4;
		  /* 821A30D4h */ case   11:  		/* cmplw CR6, R9, R20 */
		/* 821A30D4h case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R20);
		/* 821A30D4h case   11:*/		return 0x821A30D8;
		  /* 821A30D8h */ case   12:  		/* bc 4, CR6_EQ, 28 */
		/* 821A30D8h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821A30F4;  }
		/* 821A30D8h case   12:*/		return 0x821A30DC;
		  /* 821A30DCh */ case   13:  		/* lwz R4, <#[R10]> */
		/* 821A30DCh case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R10 + 0x00000000) );
		/* 821A30DCh case   13:*/		return 0x821A30E0;
		  /* 821A30E0h */ case   14:  		/* rlwinm R4, R4, 28, 29, 30 */
		/* 821A30E0h case   14:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R4,regs.R4);
		/* 821A30E0h case   14:*/		return 0x821A30E4;
		  /* 821A30E4h */ case   15:  		/* slw R3, R26, R4 */
		/* 821A30E4h case   15:*/		cpu::op::slw<0>(regs,&regs.R3,regs.R26,regs.R4);
		/* 821A30E4h case   15:*/		return 0x821A30E8;
		  /* 821A30E8h */ case   16:  		/* andc R7, R7, R3 */
		/* 821A30E8h case   16:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R7,regs.R3);
		/* 821A30E8h case   16:*/		return 0x821A30EC;
		  /* 821A30ECh */ case   17:  		/* slw R4, R11, R4 */
		/* 821A30ECh case   17:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R11,regs.R4);
		/* 821A30ECh case   17:*/		return 0x821A30F0;
		  /* 821A30F0h */ case   18:  		/* or R7, R7, R4 */
		/* 821A30F0h case   18:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R4);
		/* 821A30F0h case   18:*/		return 0x821A30F4;
	}
	return 0x821A30F4;
} // Block from 821A30A8h-821A30F4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A30F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A30F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A30F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A30F4);
		  /* 821A30F4h */ case    0:  		/* cmplw CR6, R9, R17 */
		/* 821A30F4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R17);
		/* 821A30F4h case    0:*/		return 0x821A30F8;
		  /* 821A30F8h */ case    1:  		/* bc 4, CR6_EQ, 28 */
		/* 821A30F8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A3114;  }
		/* 821A30F8h case    1:*/		return 0x821A30FC;
		  /* 821A30FCh */ case    2:  		/* lwz R10, <#[R10]> */
		/* 821A30FCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821A30FCh case    2:*/		return 0x821A3100;
		  /* 821A3100h */ case    3:  		/* rlwinm R10, R10, 28, 29, 30 */
		/* 821A3100h case    3:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R10,regs.R10);
		/* 821A3100h case    3:*/		return 0x821A3104;
		  /* 821A3104h */ case    4:  		/* slw R9, R26, R10 */
		/* 821A3104h case    4:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R26,regs.R10);
		/* 821A3104h case    4:*/		return 0x821A3108;
		  /* 821A3108h */ case    5:  		/* andc R9, R6, R9 */
		/* 821A3108h case    5:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821A3108h case    5:*/		return 0x821A310C;
		  /* 821A310Ch */ case    6:  		/* slw R10, R11, R10 */
		/* 821A310Ch case    6:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821A310Ch case    6:*/		return 0x821A3110;
		  /* 821A3110h */ case    7:  		/* or R6, R9, R10 */
		/* 821A3110h case    7:*/		cpu::op::or<0>(regs,&regs.R6,regs.R9,regs.R10);
		/* 821A3110h case    7:*/		return 0x821A3114;
	}
	return 0x821A3114;
} // Block from 821A30F4h-821A3114h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A3114h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3114( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3114) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3114);
		  /* 821A3114h */ case    0:  		/* addi R11, R11, 1 */
		/* 821A3114h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A3114h case    0:*/		return 0x821A3118;
		  /* 821A3118h */ case    1:  		/* addi R8, R8, 4 */
		/* 821A3118h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821A3118h case    1:*/		return 0x821A311C;
		  /* 821A311Ch */ case    2:  		/* b -88 */
		/* 821A311Ch case    2:*/		return 0x821A30C4;
		/* 821A311Ch case    2:*/		return 0x821A3120;
	}
	return 0x821A3120;
} // Block from 821A3114h-821A3120h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A3120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3120);
		  /* 821A3120h */ case    0:  		/* lwz R11, <#[R19]> */
		/* 821A3120h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821A3120h case    0:*/		return 0x821A3124;
		  /* 821A3124h */ case    1:  		/* cmplw CR6, R20, R30 */
		/* 821A3124h case    1:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R30);
		/* 821A3124h case    1:*/		return 0x821A3128;
		  /* 821A3128h */ case    2:  		/* lwz R10, <#[R16]> */
		/* 821A3128h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000000) );
		/* 821A3128h case    2:*/		return 0x821A312C;
		  /* 821A312Ch */ case    3:  		/* rlwinm R28, R11, 27, 24, 31 */
		/* 821A312Ch case    3:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R28,regs.R11);
		/* 821A312Ch case    3:*/		return 0x821A3130;
		  /* 821A3130h */ case    4:  		/* rlwinm R29, R10, 27, 24, 31 */
		/* 821A3130h case    4:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R29,regs.R10);
		/* 821A3130h case    4:*/		return 0x821A3134;
		  /* 821A3134h */ case    5:  		/* bc 12, CR6_EQ, 52 */
		/* 821A3134h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A3168;  }
		/* 821A3134h case    5:*/		return 0x821A3138;
		  /* 821A3138h */ case    6:  		/* rlwinm R10, R28, 27, 29, 30 */
		/* 821A3138h case    6:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R10,regs.R28);
		/* 821A3138h case    6:*/		return 0x821A313C;
		  /* 821A313Ch */ case    7:  		/* rlwinm R9, R28, 29, 29, 30 */
		/* 821A313Ch case    7:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R9,regs.R28);
		/* 821A313Ch case    7:*/		return 0x821A3140;
		  /* 821A3140h */ case    8:  		/* srw R10, R7, R10 */
		/* 821A3140h case    8:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821A3140h case    8:*/		return 0x821A3144;
		  /* 821A3144h */ case    9:  		/* srw R9, R7, R9 */
		/* 821A3144h case    9:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821A3144h case    9:*/		return 0x821A3148;
		  /* 821A3148h */ case   10:  		/* rlwinm R8, R28, 31, 29, 30 */
		/* 821A3148h case   10:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R8,regs.R28);
		/* 821A3148h case   10:*/		return 0x821A314C;
		  /* 821A314Ch */ case   11:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821A314Ch case   11:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821A314Ch case   11:*/		return 0x821A3150;
		  /* 821A3150h */ case   12:  		/* rlwinm R10, R28, 1, 29, 30 */
		/* 821A3150h case   12:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R10,regs.R28);
		/* 821A3150h case   12:*/		return 0x821A3154;
		  /* 821A3154h */ case   13:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A3154h case   13:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A3154h case   13:*/		return 0x821A3158;
		  /* 821A3158h */ case   14:  		/* srw R8, R7, R8 */
		/* 821A3158h case   14:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821A3158h case   14:*/		return 0x821A315C;
		  /* 821A315Ch */ case   15:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821A315Ch case   15:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821A315Ch case   15:*/		return 0x821A3160;
		  /* 821A3160h */ case   16:  		/* srw R28, R7, R10 */
		/* 821A3160h case   16:*/		cpu::op::srw<0>(regs,&regs.R28,regs.R7,regs.R10);
		/* 821A3160h case   16:*/		return 0x821A3164;
		  /* 821A3164h */ case   17:  		/* rlwimi R28, R8, 2, 0, 29 */
		/* 821A3164h case   17:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R28,regs.R8);
		/* 821A3164h case   17:*/		return 0x821A3168;
	}
	return 0x821A3168;
} // Block from 821A3120h-821A3168h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A3168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3168);
		  /* 821A3168h */ case    0:  		/* cmplw CR6, R17, R30 */
		/* 821A3168h case    0:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R30);
		/* 821A3168h case    0:*/		return 0x821A316C;
		  /* 821A316Ch */ case    1:  		/* bc 12, CR6_EQ, 52 */
		/* 821A316Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821A31A0;  }
		/* 821A316Ch case    1:*/		return 0x821A3170;
		  /* 821A3170h */ case    2:  		/* rlwinm R10, R29, 27, 29, 30 */
		/* 821A3170h case    2:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R10,regs.R29);
		/* 821A3170h case    2:*/		return 0x821A3174;
		  /* 821A3174h */ case    3:  		/* rlwinm R9, R29, 29, 29, 30 */
		/* 821A3174h case    3:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R9,regs.R29);
		/* 821A3174h case    3:*/		return 0x821A3178;
		  /* 821A3178h */ case    4:  		/* srw R10, R6, R10 */
		/* 821A3178h case    4:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 821A3178h case    4:*/		return 0x821A317C;
		  /* 821A317Ch */ case    5:  		/* srw R9, R6, R9 */
		/* 821A317Ch case    5:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821A317Ch case    5:*/		return 0x821A3180;
		  /* 821A3180h */ case    6:  		/* rlwinm R8, R29, 31, 29, 30 */
		/* 821A3180h case    6:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R8,regs.R29);
		/* 821A3180h case    6:*/		return 0x821A3184;
		  /* 821A3184h */ case    7:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821A3184h case    7:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821A3184h case    7:*/		return 0x821A3188;
		  /* 821A3188h */ case    8:  		/* rlwinm R10, R29, 1, 29, 30 */
		/* 821A3188h case    8:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R10,regs.R29);
		/* 821A3188h case    8:*/		return 0x821A318C;
		  /* 821A318Ch */ case    9:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A318Ch case    9:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A318Ch case    9:*/		return 0x821A3190;
		  /* 821A3190h */ case   10:  		/* srw R8, R6, R8 */
		/* 821A3190h case   10:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 821A3190h case   10:*/		return 0x821A3194;
		  /* 821A3194h */ case   11:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821A3194h case   11:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821A3194h case   11:*/		return 0x821A3198;
		  /* 821A3198h */ case   12:  		/* srw R29, R6, R10 */
		/* 821A3198h case   12:*/		cpu::op::srw<0>(regs,&regs.R29,regs.R6,regs.R10);
		/* 821A3198h case   12:*/		return 0x821A319C;
		  /* 821A319Ch */ case   13:  		/* rlwimi R29, R8, 2, 0, 29 */
		/* 821A319Ch case   13:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R29,regs.R8);
		/* 821A319Ch case   13:*/		return 0x821A31A0;
	}
	return 0x821A31A0;
} // Block from 821A3168h-821A31A0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A31A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A31A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A31A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A31A0);
		  /* 821A31A0h */ case    0:  		/* mr R4, R30 */
		/* 821A31A0h case    0:*/		regs.R4 = regs.R30;
		/* 821A31A0h case    0:*/		return 0x821A31A4;
		  /* 821A31A4h */ case    1:  		/* mr R3, R22 */
		/* 821A31A4h case    1:*/		regs.R3 = regs.R22;
		/* 821A31A4h case    1:*/		return 0x821A31A8;
		  /* 821A31A8h */ case    2:  		/* rlwinm R27, R11, 0, 27, 30 */
		/* 821A31A8h case    2:*/		cpu::op::rlwinm<0,0,27,30>(regs,&regs.R27,regs.R11);
		/* 821A31A8h case    2:*/		return 0x821A31AC;
		  /* 821A31ACh */ case    3:  		/* bl -176556 */
		/* 821A31ACh case    3:*/		regs.LR = 0x821A31B0; return 0x82178000;
		/* 821A31ACh case    3:*/		return 0x821A31B0;
		  /* 821A31B0h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821A31B0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A31B0h case    4:*/		return 0x821A31B4;
		  /* 821A31B4h */ case    5:  		/* mr R4, R27 */
		/* 821A31B4h case    5:*/		regs.R4 = regs.R27;
		/* 821A31B4h case    5:*/		return 0x821A31B8;
		  /* 821A31B8h */ case    6:  		/* rlwimi R11, R15, 25, 4, 6 */
		/* 821A31B8h case    6:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R15);
		/* 821A31B8h case    6:*/		return 0x821A31BC;
		  /* 821A31BCh */ case    7:  		/* mr R31, R3 */
		/* 821A31BCh case    7:*/		regs.R31 = regs.R3;
		/* 821A31BCh case    7:*/		return 0x821A31C0;
		  /* 821A31C0h */ case    8:  		/* stw R11, <#[R3]> */
		/* 821A31C0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A31C0h case    8:*/		return 0x821A31C4;
		  /* 821A31C4h */ case    9:  		/* bl -177924 */
		/* 821A31C4h case    9:*/		regs.LR = 0x821A31C8; return 0x82177AC0;
		/* 821A31C4h case    9:*/		return 0x821A31C8;
		  /* 821A31C8h */ case   10:  		/* rlwinm R10, R18, 1, 0, 30 */
		/* 821A31C8h case   10:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R18);
		/* 821A31C8h case   10:*/		return 0x821A31CC;
		  /* 821A31CCh */ case   11:  		/* lwz R9, <#[R31]> */
		/* 821A31CCh case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821A31CCh case   11:*/		return 0x821A31D0;
		  /* 821A31D0h */ case   12:  		/* mr R4, R30 */
		/* 821A31D0h case   12:*/		regs.R4 = regs.R30;
		/* 821A31D0h case   12:*/		return 0x821A31D4;
		  /* 821A31D4h */ case   13:  		/* slw R11, R14, R10 */
		/* 821A31D4h case   13:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R14,regs.R10);
		/* 821A31D4h case   13:*/		return 0x821A31D8;
		  /* 821A31D8h */ case   14:  		/* addi R11, R11, -1 */
		/* 821A31D8h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A31D8h case   14:*/		return 0x821A31DC;
		  /* 821A31DCh */ case   15:  		/* slw R10, R29, R10 */
		/* 821A31DCh case   15:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 821A31DCh case   15:*/		return 0x821A31E0;
		  /* 821A31E0h */ case   16:  		/* and R11, R11, R28 */
		/* 821A31E0h case   16:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821A31E0h case   16:*/		return 0x821A31E4;
		  /* 821A31E4h */ case   17:  		/* mr R3, R22 */
		/* 821A31E4h case   17:*/		regs.R3 = regs.R22;
		/* 821A31E4h case   17:*/		return 0x821A31E8;
		  /* 821A31E8h */ case   18:  		/* or R11, R11, R10 */
		/* 821A31E8h case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A31E8h case   18:*/		return 0x821A31EC;
		  /* 821A31ECh */ case   19:  		/* rlwimi R9, R11, 5, 19, 26 */
		/* 821A31ECh case   19:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R9,regs.R11);
		/* 821A31ECh case   19:*/		return 0x821A31F0;
		  /* 821A31F0h */ case   20:  		/* stw R9, <#[R31]> */
		/* 821A31F0h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R31 + 0x00000000) );
		/* 821A31F0h case   20:*/		return 0x821A31F4;
		  /* 821A31F4h */ case   21:  		/* bl 78324 */
		/* 821A31F4h case   21:*/		regs.LR = 0x821A31F8; return 0x821B63E8;
		/* 821A31F4h case   21:*/		return 0x821A31F8;
		  /* 821A31F8h */ case   22:  		/* b 3196 */
		/* 821A31F8h case   22:*/		return 0x821A3E74;
		/* 821A31F8h case   22:*/		return 0x821A31FC;
	}
	return 0x821A31FC;
} // Block from 821A31A0h-821A31FCh (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A31FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A31FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A31FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A31FC);
		  /* 821A31FCh */ case    0:  		/* cmplw CR6, R20, R17 */
		/* 821A31FCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R20,regs.R17);
		/* 821A31FCh case    0:*/		return 0x821A3200;
		  /* 821A3200h */ case    1:  		/* bc 12, CR6_EQ, 1820 */
		/* 821A3200h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A391C;  }
		/* 821A3200h case    1:*/		return 0x821A3204;
		  /* 821A3204h */ case    2:  		/* mr R4, R16 */
		/* 821A3204h case    2:*/		regs.R4 = regs.R16;
		/* 821A3204h case    2:*/		return 0x821A3208;
		  /* 821A3208h */ case    3:  		/* mr R3, R19 */
		/* 821A3208h case    3:*/		regs.R3 = regs.R19;
		/* 821A3208h case    3:*/		return 0x821A320C;
		  /* 821A320Ch */ case    4:  		/* bl -257924 */
		/* 821A320Ch case    4:*/		regs.LR = 0x821A3210; return 0x82164288;
		/* 821A320Ch case    4:*/		return 0x821A3210;
		  /* 821A3210h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A3210h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A3210h case    5:*/		return 0x821A3214;
		  /* 821A3214h */ case    6:  		/* bc 4, CR0_EQ, 1800 */
		/* 821A3214h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A391C;  }
		/* 821A3214h case    6:*/		return 0x821A3218;
		  /* 821A3218h */ case    7:  		/* rlwinm. R11, R31, 9, 31, 31 */
		/* 821A3218h case    7:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R31);
		/* 821A3218h case    7:*/		return 0x821A321C;
		  /* 821A321Ch */ case    8:  		/* bc 12, CR0_EQ, 84 */
		/* 821A321Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821A3270;  }
		/* 821A321Ch case    8:*/		return 0x821A3220;
		  /* 821A3220h */ case    9:  		/* mr R4, R20 */
		/* 821A3220h case    9:*/		regs.R4 = regs.R20;
		/* 821A3220h case    9:*/		return 0x821A3224;
		  /* 821A3224h */ case   10:  		/* mr R3, R22 */
		/* 821A3224h case   10:*/		regs.R3 = regs.R22;
		/* 821A3224h case   10:*/		return 0x821A3228;
		  /* 821A3228h */ case   11:  		/* bl -127568 */
		/* 821A3228h case   11:*/		regs.LR = 0x821A322C; return 0x82183FD8;
		/* 821A3228h case   11:*/		return 0x821A322C;
		  /* 821A322Ch */ case   12:  		/* mr R31, R3 */
		/* 821A322Ch case   12:*/		regs.R31 = regs.R3;
		/* 821A322Ch case   12:*/		return 0x821A3230;
		  /* 821A3230h */ case   13:  		/* mr R4, R17 */
		/* 821A3230h case   13:*/		regs.R4 = regs.R17;
		/* 821A3230h case   13:*/		return 0x821A3234;
		  /* 821A3234h */ case   14:  		/* mr R3, R22 */
		/* 821A3234h case   14:*/		regs.R3 = regs.R22;
		/* 821A3234h case   14:*/		return 0x821A3238;
		  /* 821A3238h */ case   15:  		/* bl -127584 */
		/* 821A3238h case   15:*/		regs.LR = 0x821A323C; return 0x82183FD8;
		/* 821A3238h case   15:*/		return 0x821A323C;
		  /* 821A323Ch */ case   16:  		/* mr R5, R3 */
		/* 821A323Ch case   16:*/		regs.R5 = regs.R3;
		/* 821A323Ch case   16:*/		return 0x821A3240;
		  /* 821A3240h */ case   17:  		/* cmplw CR6, R31, R3 */
		/* 821A3240h case   17:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821A3240h case   17:*/		return 0x821A3244;
		  /* 821A3244h */ case   18:  		/* bc 12, CR6_EQ, 44 */
		/* 821A3244h case   18:*/		if ( regs.CR[6].eq ) { return 0x821A3270;  }
		/* 821A3244h case   18:*/		return 0x821A3248;
		  /* 821A3248h */ case   19:  		/* addi R11, R1, 80 */
		/* 821A3248h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x50);
		/* 821A3248h case   19:*/		return 0x821A324C;
		  /* 821A324Ch */ case   20:  		/* li R7, 0 */
		/* 821A324Ch case   20:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A324Ch case   20:*/		return 0x821A3250;
		  /* 821A3250h */ case   21:  		/* li R10, 0 */
		/* 821A3250h case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A3250h case   21:*/		return 0x821A3254;
		  /* 821A3254h */ case   22:  		/* li R9, 0 */
		/* 821A3254h case   22:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A3254h case   22:*/		return 0x821A3258;
		  /* 821A3258h */ case   23:  		/* li R8, 0 */
		/* 821A3258h case   23:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A3258h case   23:*/		return 0x821A325C;
		  /* 821A325Ch */ case   24:  		/* stw R7, <#[R11]> */
		/* 821A325Ch case   24:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A325Ch case   24:*/		return 0x821A3260;
		  /* 821A3260h */ case   25:  		/* mr R4, R31 */
		/* 821A3260h case   25:*/		regs.R4 = regs.R31;
		/* 821A3260h case   25:*/		return 0x821A3264;
		  /* 821A3264h */ case   26:  		/* mr R3, R22 */
		/* 821A3264h case   26:*/		regs.R3 = regs.R22;
		/* 821A3264h case   26:*/		return 0x821A3268;
		  /* 821A3268h */ case   27:  		/* lwz R6, <#[R1 + 80]> */
		/* 821A3268h case   27:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821A3268h case   27:*/		return 0x821A326C;
		  /* 821A326Ch */ case   28:  		/* bl -117236 */
		/* 821A326Ch case   28:*/		regs.LR = 0x821A3270; return 0x82186878;
		/* 821A326Ch case   28:*/		return 0x821A3270;
	}
	return 0x821A3270;
} // Block from 821A31FCh-821A3270h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A3270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3270);
		  /* 821A3270h */ case    0:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A3270h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A3270h case    0:*/		return 0x821A3274;
		  /* 821A3274h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A3274h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A3274h case    1:*/		return 0x821A3278;
		  /* 821A3278h */ case    2:  		/* cmplwi CR6, R11, 14080 */
		/* 821A3278h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821A3278h case    2:*/		return 0x821A327C;
		  /* 821A327Ch */ case    3:  		/* bc 4, CR6_EQ, 44 */
		/* 821A327Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821A32A8;  }
		/* 821A327Ch case    3:*/		return 0x821A3280;
		  /* 821A3280h */ case    4:  		/* lwz R11, <#[R17 + 8]> */
		/* 821A3280h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821A3280h case    4:*/		return 0x821A3284;
		  /* 821A3284h */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A3284h case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A3284h case    5:*/		return 0x821A3288;
		  /* 821A3288h */ case    6:  		/* cmplwi CR6, R11, 14080 */
		/* 821A3288h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821A3288h case    6:*/		return 0x821A328C;
		  /* 821A328Ch */ case    7:  		/* bc 4, CR6_EQ, 28 */
		/* 821A328Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821A32A8;  }
		/* 821A328Ch case    7:*/		return 0x821A3290;
		  /* 821A3290h */ case    8:  		/* li R7, 1 */
		/* 821A3290h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A3290h case    8:*/		return 0x821A3294;
		  /* 821A3294h */ case    9:  		/* li R6, 1 */
		/* 821A3294h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A3294h case    9:*/		return 0x821A3298;
		  /* 821A3298h */ case   10:  		/* mr R5, R17 */
		/* 821A3298h case   10:*/		regs.R5 = regs.R17;
		/* 821A3298h case   10:*/		return 0x821A329C;
		  /* 821A329Ch */ case   11:  		/* mr R4, R20 */
		/* 821A329Ch case   11:*/		regs.R4 = regs.R20;
		/* 821A329Ch case   11:*/		return 0x821A32A0;
		  /* 821A32A0h */ case   12:  		/* mr R3, R22 */
		/* 821A32A0h case   12:*/		regs.R3 = regs.R22;
		/* 821A32A0h case   12:*/		return 0x821A32A4;
		  /* 821A32A4h */ case   13:  		/* bl 567524 */
		/* 821A32A4h case   13:*/		regs.LR = 0x821A32A8; return 0x8222DB88;
		/* 821A32A4h case   13:*/		return 0x821A32A8;
	}
	return 0x821A32A8;
} // Block from 821A3270h-821A32A8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A32A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A32A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A32A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A32A8);
		  /* 821A32A8h */ case    0:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A32A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A32A8h case    0:*/		return 0x821A32AC;
		  /* 821A32ACh */ case    1:  		/* li R5, 0 */
		/* 821A32ACh case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A32ACh case    1:*/		return 0x821A32B0;
		  /* 821A32B0h */ case    2:  		/* lwz R10, <#[R17 + 8]> */
		/* 821A32B0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000008) );
		/* 821A32B0h case    2:*/		return 0x821A32B4;
		  /* 821A32B4h */ case    3:  		/* mr R4, R29 */
		/* 821A32B4h case    3:*/		regs.R4 = regs.R29;
		/* 821A32B4h case    3:*/		return 0x821A32B8;
		  /* 821A32B8h */ case    4:  		/* rlwinm R24, R11, 18, 29, 31 */
		/* 821A32B8h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R24,regs.R11);
		/* 821A32B8h case    4:*/		return 0x821A32BC;
		  /* 821A32BCh */ case    5:  		/* rlwinm R25, R10, 18, 29, 31 */
		/* 821A32BCh case    5:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R25,regs.R10);
		/* 821A32BCh case    5:*/		return 0x821A32C0;
		  /* 821A32C0h */ case    6:  		/* mr R3, R22 */
		/* 821A32C0h case    6:*/		regs.R3 = regs.R22;
		/* 821A32C0h case    6:*/		return 0x821A32C4;
		  /* 821A32C4h */ case    7:  		/* add R18, R25, R24 */
		/* 821A32C4h case    7:*/		cpu::op::add<0>(regs,&regs.R18,regs.R25,regs.R24);
		/* 821A32C4h case    7:*/		return 0x821A32C8;
		  /* 821A32C8h */ case    8:  		/* mr R6, R18 */
		/* 821A32C8h case    8:*/		regs.R6 = regs.R18;
		/* 821A32C8h case    8:*/		return 0x821A32CC;
		  /* 821A32CCh */ case    9:  		/* bl 530484 */
		/* 821A32CCh case    9:*/		regs.LR = 0x821A32D0; return 0x82224B00;
		/* 821A32CCh case    9:*/		return 0x821A32D0;
		  /* 821A32D0h */ case   10:  		/* lis R11, -32252 */
		/* 821A32D0h case   10:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821A32D0h case   10:*/		return 0x821A32D4;
		  /* 821A32D4h */ case   11:  		/* lwz R10, <#[R20 + 8]> */
		/* 821A32D4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 821A32D4h case   11:*/		return 0x821A32D8;
		  /* 821A32D8h */ case   12:  		/* mr R31, R3 */
		/* 821A32D8h case   12:*/		regs.R31 = regs.R3;
		/* 821A32D8h case   12:*/		return 0x821A32DC;
		  /* 821A32DCh */ case   13:  		/* addi R26, R11, -17164 */
		/* 821A32DCh case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFBCF4);
		/* 821A32DCh case   13:*/		return 0x821A32E0;
		  /* 821A32E0h */ case   14:  		/* lwz R11, <#[R17 + 8]> */
		/* 821A32E0h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821A32E0h case   14:*/		return 0x821A32E4;
		  /* 821A32E4h */ case   15:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821A32E4h case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821A32E4h case   15:*/		return 0x821A32E8;
		  /* 821A32E8h */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A32E8h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A32E8h case   16:*/		return 0x821A32EC;
		  /* 821A32ECh */ case   17:  		/* cmplwi CR6, R10, 14080 */
		/* 821A32ECh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821A32ECh case   17:*/		return 0x821A32F0;
		  /* 821A32F0h */ case   18:  		/* bc 4, CR6_EQ, 240 */
		/* 821A32F0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821A33E0;  }
		/* 821A32F0h case   18:*/		return 0x821A32F4;
		  /* 821A32F4h */ case   19:  		/* cmplwi CR6, R11, 14336 */
		/* 821A32F4h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821A32F4h case   19:*/		return 0x821A32F8;
		  /* 821A32F8h */ case   20:  		/* bc 12, CR6_EQ, 24 */
		/* 821A32F8h case   20:*/		if ( regs.CR[6].eq ) { return 0x821A3310;  }
		/* 821A32F8h case   20:*/		return 0x821A32FC;
		  /* 821A32FCh */ case   21:  		/* li R6, 0 */
		/* 821A32FCh case   21:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A32FCh case   21:*/		return 0x821A3300;
		  /* 821A3300h */ case   22:  		/* mr R5, R20 */
		/* 821A3300h case   22:*/		regs.R5 = regs.R20;
		/* 821A3300h case   22:*/		return 0x821A3304;
		  /* 821A3304h */ case   23:  		/* mr R4, R17 */
		/* 821A3304h case   23:*/		regs.R4 = regs.R17;
		/* 821A3304h case   23:*/		return 0x821A3308;
		  /* 821A3308h */ case   24:  		/* mr R3, R22 */
		/* 821A3308h case   24:*/		regs.R3 = regs.R22;
		/* 821A3308h case   24:*/		return 0x821A330C;
		  /* 821A330Ch */ case   25:  		/* bl 567604 */
		/* 821A330Ch case   25:*/		regs.LR = 0x821A3310; return 0x8222DC40;
		/* 821A330Ch case   25:*/		return 0x821A3310;
	}
	return 0x821A3310;
} // Block from 821A32A8h-821A3310h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821A3310h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3310( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3310) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3310);
		  /* 821A3310h */ case    0:  		/* rlwinm R11, R20, 0, 0, 30 */
		/* 821A3310h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R20);
		/* 821A3310h case    0:*/		return 0x821A3314;
		  /* 821A3314h */ case    1:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821A3314h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821A3314h case    1:*/		return 0x821A3318;
		  /* 821A3318h */ case    2:  		/* addi R11, R11, 36 */
		/* 821A3318h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A3318h case    2:*/		return 0x821A331C;
		  /* 821A331Ch */ case    3:  		/* addi R10, R10, 36 */
		/* 821A331Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A331Ch case    3:*/		return 0x821A3320;
		  /* 821A3320h */ case    4:  		/* addi R9, R11, 4 */
		/* 821A3320h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821A3320h case    4:*/		return 0x821A3324;
		  /* 821A3324h */ case    5:  		/* addi R8, R10, 4 */
		/* 821A3324h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821A3324h case    5:*/		return 0x821A3328;
		  /* 821A3328h */ case    6:  		/* addi R7, R10, -36 */
		/* 821A3328h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821A3328h case    6:*/		return 0x821A332C;
		  /* 821A332Ch */ case    7:  		/* lwz R6, <#[R11 + 4]> */
		/* 821A332Ch case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821A332Ch case    7:*/		return 0x821A3330;
		  /* 821A3330h */ case    8:  		/* cmplwi CR6, R24, 0 */
		/* 821A3330h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821A3330h case    8:*/		return 0x821A3334;
		  /* 821A3334h */ case    9:  		/* stw R6, <#[R10 + 4]> */
		/* 821A3334h case    9:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 821A3334h case    9:*/		return 0x821A3338;
		  /* 821A3338h */ case   10:  		/* lwz R6, <#[R11 + 4]> */
		/* 821A3338h case   10:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821A3338h case   10:*/		return 0x821A333C;
		  /* 821A333Ch */ case   11:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821A333Ch case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821A333Ch case   11:*/		return 0x821A3340;
		  /* 821A3340h */ case   12:  		/* stw R8, <#[R6 + 36]> */
		/* 821A3340h case   12:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000024) );
		/* 821A3340h case   12:*/		return 0x821A3344;
		  /* 821A3344h */ case   13:  		/* stw R9, <#[R10]> */
		/* 821A3344h case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A3344h case   13:*/		return 0x821A3348;
		  /* 821A3348h */ case   14:  		/* stw R7, <#[R11 + 4]> */
		/* 821A3348h case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821A3348h case   14:*/		return 0x821A334C;
		  /* 821A334Ch */ case   15:  		/* bc 12, CR6_EQ, 44 */
		/* 821A334Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821A3378;  }
		/* 821A334Ch case   15:*/		return 0x821A3350;
		  /* 821A3350h */ case   16:  		/* addi R30, R31, 44 */
		/* 821A3350h case   16:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2C);
		/* 821A3350h case   16:*/		return 0x821A3354;
		  /* 821A3354h */ case   17:  		/* subf R28, R31, R20 */
		/* 821A3354h case   17:*/		cpu::op::subf<0>(regs,&regs.R28,regs.R31,regs.R20);
		/* 821A3354h case   17:*/		return 0x821A3358;
		  /* 821A3358h */ case   18:  		/* mr R29, R24 */
		/* 821A3358h case   18:*/		regs.R29 = regs.R24;
		/* 821A3358h case   18:*/		return 0x821A335C;
		  /* 821A335Ch */ case   19:  		/* mr R3, R31 */
		/* 821A335Ch case   19:*/		regs.R3 = regs.R31;
		/* 821A335Ch case   19:*/		return 0x821A3360;
		  /* 821A3360h */ case   20:  		/* lwzx R4, <#[R28 + R30]> */
		/* 821A3360h case   20:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R28 + regs.R30 + 0x00000000) );
		/* 821A3360h case   20:*/		return 0x821A3364;
		  /* 821A3364h */ case   21:  		/* bl -176540 */
		/* 821A3364h case   21:*/		regs.LR = 0x821A3368; return 0x821781C8;
		/* 821A3364h case   21:*/		return 0x821A3368;
	}
	return 0x821A3368;
} // Block from 821A3310h-821A3368h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821A3368h
// Function '?CombineDependencies@Compiler@D3DXShader@@AAAPAVDependency@2@PAVInstruction@2@PAV32@01PAVBlock@2@0PAUCombineDependenciesState@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3368( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3368) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3368);
		  /* 821A3368h */ case    0:  		/* stw R3, <#[R30]> */
		/* 821A3368h case    0:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821A3368h case    0:*/		return 0x821A336C;
		  /* 821A336Ch */ case    1:  		/* addic. R29, R29, -1 */
		/* 821A336Ch case    1:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821A336Ch case    1:*/		return 0x821A3370;
		  /* 821A3370h */ case    2:  		/* addi R30, R30, 4 */
		/* 821A3370h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A3370h case    2:*/		return 0x821A3374;
		  /* 821A3374h */ case    3:  		/* bc 4, CR0_EQ, -24 */
		/* 821A3374h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A335C;  }
		/* 821A3374h case    3:*/		return 0x821A3378;
	}
	return 0x821A3378;
} // Block from 821A3368h-821A3378h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A3378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3378);
		  /* 821A3378h */ case    0:  		/* addi R8, R20, 4 */
		/* 821A3378h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R20,0x4);
		/* 821A3378h case    0:*/		return 0x821A337C;
		  /* 821A337Ch */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821A337Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A337Ch case    1:*/		return 0x821A3380;
		  /* 821A3380h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A3380h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A3380h case    2:*/		return 0x821A3384;
		  /* 821A3384h */ case    3:  		/* bc 12, CR6_EQ, 296 */
		/* 821A3384h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A34AC;  }
		/* 821A3384h case    3:*/		return 0x821A3388;
		  /* 821A3388h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A3388h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A3388h case    4:*/		return 0x821A338C;
		  /* 821A338Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821A338Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A338Ch case    5:*/		return 0x821A3390;
		  /* 821A3390h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821A3390h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A33CC;  }
		/* 821A3390h case    6:*/		return 0x821A3394;
		  /* 821A3394h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A3394h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A3394h case    7:*/		return 0x821A3398;
		  /* 821A3398h */ case    8:  		/* addi R10, R10, 4 */
		/* 821A3398h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A3398h case    8:*/		return 0x821A339C;
		  /* 821A339Ch */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821A339Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A339Ch case    9:*/		return 0x821A33A0;
		  /* 821A33A0h */ case   10:  		/* b 12 */
		/* 821A33A0h case   10:*/		return 0x821A33AC;
		/* 821A33A0h case   10:*/		return 0x821A33A4;
		  /* 821A33A4h */ case   11:  		/* addi R10, R9, 8 */
		/* 821A33A4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A33A4h case   11:*/		return 0x821A33A8;
		  /* 821A33A8h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A33A8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A33A8h case   12:*/		return 0x821A33AC;
	}
	return 0x821A33AC;
} // Block from 821A3378h-821A33ACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A33ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A33AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A33AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A33AC);
		  /* 821A33ACh */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A33ACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A33ACh case    0:*/		return 0x821A33B0;
		  /* 821A33B0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A33B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A33A4;  }
		/* 821A33B0h case    1:*/		return 0x821A33B4;
		  /* 821A33B4h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A33B4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A33B4h case    2:*/		return 0x821A33B8;
		  /* 821A33B8h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A33B8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A33B8h case    3:*/		return 0x821A33BC;
		  /* 821A33BCh */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 821A33BCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821A33BCh case    4:*/		return 0x821A33C0;
		  /* 821A33C0h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A33C0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A33C0h case    5:*/		return 0x821A33C4;
		  /* 821A33C4h */ case    6:  		/* stw R11, <#[R31 + 4]> */
		/* 821A33C4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821A33C4h case    6:*/		return 0x821A33C8;
		  /* 821A33C8h */ case    7:  		/* stw R31, <#[R11 + 12]> */
		/* 821A33C8h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A33C8h case    7:*/		return 0x821A33CC;
	}
	return 0x821A33CC;
} // Block from 821A33ACh-821A33CCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A33CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A33CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A33CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A33CC);
		  /* 821A33CCh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A33CCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A33CCh case    0:*/		return 0x821A33D0;
		  /* 821A33D0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A33D0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A33D0h case    1:*/		return 0x821A33D4;
		  /* 821A33D4h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821A33D4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A337C;  }
		/* 821A33D4h case    2:*/		return 0x821A33D8;
		  /* 821A33D8h */ case    3:  		/* addi R8, R11, 8 */
		/* 821A33D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821A33D8h case    3:*/		return 0x821A33DC;
		  /* 821A33DCh */ case    4:  		/* b -96 */
		/* 821A33DCh case    4:*/		return 0x821A337C;
		/* 821A33DCh case    4:*/		return 0x821A33E0;
	}
	return 0x821A33E0;
} // Block from 821A33CCh-821A33E0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A33E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A33E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A33E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A33E0);
		  /* 821A33E0h */ case    0:  		/* cmplwi CR6, R11, 14080 */
		/* 821A33E0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821A33E0h case    0:*/		return 0x821A33E4;
		  /* 821A33E4h */ case    1:  		/* bc 12, CR6_EQ, 60 */
		/* 821A33E4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A3420;  }
		/* 821A33E4h case    1:*/		return 0x821A33E8;
		  /* 821A33E8h */ case    2:  		/* rlwinm R11, R21, 0, 0, 30 */
		/* 821A33E8h case    2:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R21);
		/* 821A33E8h case    2:*/		return 0x821A33EC;
		  /* 821A33ECh */ case    3:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821A33ECh case    3:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821A33ECh case    3:*/		return 0x821A33F0;
		  /* 821A33F0h */ case    4:  		/* addi R11, R11, 36 */
		/* 821A33F0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A33F0h case    4:*/		return 0x821A33F4;
		  /* 821A33F4h */ case    5:  		/* addi R10, R10, 36 */
		/* 821A33F4h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A33F4h case    5:*/		return 0x821A33F8;
		  /* 821A33F8h */ case    6:  		/* addi R8, R11, -36 */
		/* 821A33F8h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A33F8h case    6:*/		return 0x821A33FC;
		  /* 821A33FCh */ case    7:  		/* addi R7, R10, -36 */
		/* 821A33FCh case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821A33FCh case    7:*/		return 0x821A3400;
		  /* 821A3400h */ case    8:  		/* addi R9, R10, 4 */
		/* 821A3400h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A3400h case    8:*/		return 0x821A3404;
		  /* 821A3404h */ case    9:  		/* lwz R6, <#[R11]> */
		/* 821A3404h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3404h case    9:*/		return 0x821A3408;
		  /* 821A3408h */ case   10:  		/* stw R6, <#[R10]> */
		/* 821A3408h case   10:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821A3408h case   10:*/		return 0x821A340C;
		  /* 821A340Ch */ case   11:  		/* lwz R6, <#[R11]> */
		/* 821A340Ch case   11:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A340Ch case   11:*/		return 0x821A3410;
		  /* 821A3410h */ case   12:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821A3410h case   12:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821A3410h case   12:*/		return 0x821A3414;
		  /* 821A3414h */ case   13:  		/* stw R7, <#[R6]> */
		/* 821A3414h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821A3414h case   13:*/		return 0x821A3418;
		  /* 821A3418h */ case   14:  		/* stw R8, <#[R10 + 4]> */
		/* 821A3418h case   14:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A3418h case   14:*/		return 0x821A341C;
		  /* 821A341Ch */ case   15:  		/* stw R9, <#[R11]> */
		/* 821A341Ch case   15:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A341Ch case   15:*/		return 0x821A3420;
	}
	return 0x821A3420;
} // Block from 821A33E0h-821A3420h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A3420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3420);
		  /* 821A3420h */ case    0:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A3420h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A3420h case    0:*/		return 0x821A3424;
		  /* 821A3424h */ case    1:  		/* cmplwi CR6, R24, 0 */
		/* 821A3424h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821A3424h case    1:*/		return 0x821A3428;
		  /* 821A3428h */ case    2:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821A3428h case    2:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821A3428h case    2:*/		return 0x821A342C;
		  /* 821A342Ch */ case    3:  		/* add R11, R11, R26 */
		/* 821A342Ch case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821A342Ch case    3:*/		return 0x821A3430;
		  /* 821A3430h */ case    4:  		/* lbz R27, <#[R11 - 1]> */
		/* 821A3430h case    4:*/		cpu::mem::load8z( regs, &regs.R27, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821A3430h case    4:*/		return 0x821A3434;
		  /* 821A3434h */ case    5:  		/* bc 12, CR6_EQ, 120 */
		/* 821A3434h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A34AC;  }
		/* 821A3434h case    5:*/		return 0x821A3438;
		  /* 821A3438h */ case    6:  		/* li R29, 0 */
		/* 821A3438h case    6:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A3438h case    6:*/		return 0x821A343C;
		  /* 821A343Ch */ case    7:  		/* addi R28, R31, 40 */
		/* 821A343Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x28);
		/* 821A343Ch case    7:*/		return 0x821A3440;
		  /* 821A3440h */ case    8:  		/* mr R30, R24 */
		/* 821A3440h case    8:*/		regs.R30 = regs.R24;
		/* 821A3440h case    8:*/		return 0x821A3444;
		  /* 821A3444h */ case    9:  		/* mr R4, R20 */
		/* 821A3444h case    9:*/		regs.R4 = regs.R20;
		/* 821A3444h case    9:*/		return 0x821A3448;
		  /* 821A3448h */ case   10:  		/* mr R3, R22 */
		/* 821A3448h case   10:*/		regs.R3 = regs.R22;
		/* 821A3448h case   10:*/		return 0x821A344C;
		  /* 821A344Ch */ case   11:  		/* bl -177228 */
		/* 821A344Ch case   11:*/		regs.LR = 0x821A3450; return 0x82178000;
		/* 821A344Ch case   11:*/		return 0x821A3450;
		  /* 821A3450h */ case   12:  		/* lis R10, 512 */
		/* 821A3450h case   12:*/		cpu::op::lis<0>(regs,&regs.R10,0x200);
		/* 821A3450h case   12:*/		return 0x821A3454;
		  /* 821A3454h */ case   13:  		/* lis R12, -3073 */
		/* 821A3454h case   13:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFF3FF);
		/* 821A3454h case   13:*/		return 0x821A3458;
		  /* 821A3458h */ case   14:  		/* lwz R8, <#[R3]> */
		/* 821A3458h case   14:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3458h case   14:*/		return 0x821A345C;
		  /* 821A345Ch */ case   15:  		/* ori R10, R10, 7296 */
		/* 821A345Ch case   15:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1C80);
		/* 821A345Ch case   15:*/		return 0x821A3460;
		  /* 821A3460h */ case   16:  		/* srw R9, R27, R29 */
		/* 821A3460h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R29);
		/* 821A3460h case   16:*/		return 0x821A3464;
		  /* 821A3464h */ case   17:  		/* ori R12, R12, 64671 */
		/* 821A3464h case   17:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFC9F);
		/* 821A3464h case   17:*/		return 0x821A3468;
		  /* 821A3468h */ case   18:  		/* rlwimi R10, R9, 5, 25, 26 */
		/* 821A3468h case   18:*/		cpu::op::rlwimi<0,5,25,26>(regs,&regs.R10,regs.R9);
		/* 821A3468h case   18:*/		return 0x821A346C;
		  /* 821A346Ch */ case   19:  		/* mr R11, R3 */
		/* 821A346Ch case   19:*/		regs.R11 = regs.R3;
		/* 821A346Ch case   19:*/		return 0x821A3470;
		  /* 821A3470h */ case   20:  		/* and R9, R8, R12 */
		/* 821A3470h case   20:*/		cpu::op::and<0>(regs,&regs.R9,regs.R8,regs.R12);
		/* 821A3470h case   20:*/		return 0x821A3474;
		  /* 821A3474h */ case   21:  		/* mr R3, R31 */
		/* 821A3474h case   21:*/		regs.R3 = regs.R31;
		/* 821A3474h case   21:*/		return 0x821A3478;
		  /* 821A3478h */ case   22:  		/* or R10, R10, R9 */
		/* 821A3478h case   22:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821A3478h case   22:*/		return 0x821A347C;
		  /* 821A347Ch */ case   23:  		/* mr R4, R11 */
		/* 821A347Ch case   23:*/		regs.R4 = regs.R11;
		/* 821A347Ch case   23:*/		return 0x821A3480;
		  /* 821A3480h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821A3480h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3480h case   24:*/		return 0x821A3484;
		  /* 821A3484h */ case   25:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821A3484h case   25:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821A3484h case   25:*/		return 0x821A3488;
		  /* 821A3488h */ case   26:  		/* lwz R9, <#[R19]> */
		/* 821A3488h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R19 + 0x00000000) );
		/* 821A3488h case   26:*/		return 0x821A348C;
		  /* 821A348Ch */ case   27:  		/* rlwinm R9, R9, 0, 31, 31 */
		/* 821A348Ch case   27:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821A348Ch case   27:*/		return 0x821A3490;
		  /* 821A3490h */ case   28:  		/* or R10, R9, R10 */
		/* 821A3490h case   28:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A3490h case   28:*/		return 0x821A3494;
		  /* 821A3494h */ case   29:  		/* stw R10, <#[R11]> */
		/* 821A3494h case   29:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3494h case   29:*/		return 0x821A3498;
		  /* 821A3498h */ case   30:  		/* bl -176848 */
		/* 821A3498h case   30:*/		regs.LR = 0x821A349C; return 0x821781C8;
		/* 821A3498h case   30:*/		return 0x821A349C;
		  /* 821A349Ch */ case   31:  		/* addic. R30, R30, -1 */
		/* 821A349Ch case   31:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821A349Ch case   31:*/		return 0x821A34A0;
		  /* 821A34A0h */ case   32:  		/* stwu R3, <#[R28 + 4]> */
		/* 821A34A0h case   32:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R28 + 0x00000004) );
		regs.R28 = (uint32)(regs.R28 + 0x00000004);
		/* 821A34A0h case   32:*/		return 0x821A34A4;
		  /* 821A34A4h */ case   33:  		/* addi R29, R29, 2 */
		/* 821A34A4h case   33:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x2);
		/* 821A34A4h case   33:*/		return 0x821A34A8;
		  /* 821A34A8h */ case   34:  		/* bc 4, CR0_EQ, -100 */
		/* 821A34A8h case   34:*/		if ( !regs.CR[0].eq ) { return 0x821A3444;  }
		/* 821A34A8h case   34:*/		return 0x821A34AC;
	}
	return 0x821A34AC;
} // Block from 821A3420h-821A34ACh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821A34ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A34AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A34AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A34AC);
		  /* 821A34ACh */ case    0:  		/* lwz R11, <#[R17 + 8]> */
		/* 821A34ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821A34ACh case    0:*/		return 0x821A34B0;
		  /* 821A34B0h */ case    1:  		/* lis R10, -32252 */
		/* 821A34B0h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821A34B0h case    1:*/		return 0x821A34B4;
		  /* 821A34B4h */ case    2:  		/* rlwinm R9, R11, 0, 18, 24 */
		/* 821A34B4h case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R11);
		/* 821A34B4h case    2:*/		return 0x821A34B8;
		  /* 821A34B8h */ case    3:  		/* addi R23, R10, -16632 */
		/* 821A34B8h case    3:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R10,0xFFFFBF08);
		/* 821A34B8h case    3:*/		return 0x821A34BC;
		  /* 821A34BCh */ case    4:  		/* cmplwi CR6, R9, 14080 */
		/* 821A34BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A34BCh case    4:*/		return 0x821A34C0;
		  /* 821A34C0h */ case    5:  		/* bc 4, CR6_EQ, 348 */
		/* 821A34C0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A361C;  }
		/* 821A34C0h case    5:*/		return 0x821A34C4;
		  /* 821A34C4h */ case    6:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A34C4h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A34C4h case    6:*/		return 0x821A34C8;
		  /* 821A34C8h */ case    7:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A34C8h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A34C8h case    7:*/		return 0x821A34CC;
		  /* 821A34CCh */ case    8:  		/* cmplwi CR6, R11, 110 */
		/* 821A34CCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000006E);
		/* 821A34CCh case    8:*/		return 0x821A34D0;
		  /* 821A34D0h */ case    9:  		/* bc 12, CR6_EQ, 88 */
		/* 821A34D0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A3528;  }
		/* 821A34D0h case    9:*/		return 0x821A34D4;
		  /* 821A34D4h */ case   10:  		/* cmplwi CR6, R11, 112 */
		/* 821A34D4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000070);
		/* 821A34D4h case   10:*/		return 0x821A34D8;
		  /* 821A34D8h */ case   11:  		/* bc 12, CR6_EQ, 24 */
		/* 821A34D8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821A34F0;  }
		/* 821A34D8h case   11:*/		return 0x821A34DC;
		  /* 821A34DCh */ case   12:  		/* li R6, 0 */
		/* 821A34DCh case   12:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A34DCh case   12:*/		return 0x821A34E0;
		  /* 821A34E0h */ case   13:  		/* mr R5, R17 */
		/* 821A34E0h case   13:*/		regs.R5 = regs.R17;
		/* 821A34E0h case   13:*/		return 0x821A34E4;
		  /* 821A34E4h */ case   14:  		/* mr R4, R20 */
		/* 821A34E4h case   14:*/		regs.R4 = regs.R20;
		/* 821A34E4h case   14:*/		return 0x821A34E8;
		  /* 821A34E8h */ case   15:  		/* mr R3, R22 */
		/* 821A34E8h case   15:*/		regs.R3 = regs.R22;
		/* 821A34E8h case   15:*/		return 0x821A34EC;
		  /* 821A34ECh */ case   16:  		/* bl 567124 */
		/* 821A34ECh case   16:*/		regs.LR = 0x821A34F0; return 0x8222DC40;
		/* 821A34ECh case   16:*/		return 0x821A34F0;
	}
	return 0x821A34F0;
} // Block from 821A34ACh-821A34F0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A34F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A34F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A34F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A34F0);
		  /* 821A34F0h */ case    0:  		/* rlwinm R11, R17, 0, 0, 30 */
		/* 821A34F0h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R17);
		/* 821A34F0h case    0:*/		return 0x821A34F4;
		  /* 821A34F4h */ case    1:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821A34F4h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821A34F4h case    1:*/		return 0x821A34F8;
		  /* 821A34F8h */ case    2:  		/* addi R11, R11, 36 */
		/* 821A34F8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A34F8h case    2:*/		return 0x821A34FC;
		  /* 821A34FCh */ case    3:  		/* addi R10, R10, 36 */
		/* 821A34FCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A34FCh case    3:*/		return 0x821A3500;
		  /* 821A3500h */ case    4:  		/* addi R9, R11, 4 */
		/* 821A3500h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821A3500h case    4:*/		return 0x821A3504;
		  /* 821A3504h */ case    5:  		/* addi R8, R10, 4 */
		/* 821A3504h case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821A3504h case    5:*/		return 0x821A3508;
		  /* 821A3508h */ case    6:  		/* addi R7, R10, -36 */
		/* 821A3508h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821A3508h case    6:*/		return 0x821A350C;
		  /* 821A350Ch */ case    7:  		/* lwz R6, <#[R11 + 4]> */
		/* 821A350Ch case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821A350Ch case    7:*/		return 0x821A3510;
		  /* 821A3510h */ case    8:  		/* stw R6, <#[R10 + 4]> */
		/* 821A3510h case    8:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000004) );
		/* 821A3510h case    8:*/		return 0x821A3514;
		  /* 821A3514h */ case    9:  		/* lwz R6, <#[R11 + 4]> */
		/* 821A3514h case    9:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821A3514h case    9:*/		return 0x821A3518;
		  /* 821A3518h */ case   10:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821A3518h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821A3518h case   10:*/		return 0x821A351C;
		  /* 821A351Ch */ case   11:  		/* stw R8, <#[R6 + 36]> */
		/* 821A351Ch case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R6 + 0x00000024) );
		/* 821A351Ch case   11:*/		return 0x821A3520;
		  /* 821A3520h */ case   12:  		/* stw R9, <#[R10]> */
		/* 821A3520h case   12:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A3520h case   12:*/		return 0x821A3524;
		  /* 821A3524h */ case   13:  		/* stw R7, <#[R11 + 4]> */
		/* 821A3524h case   13:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821A3524h case   13:*/		return 0x821A3528;
	}
	return 0x821A3528;
} // Block from 821A34F0h-821A3528h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A3528h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3528( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3528) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3528);
		  /* 821A3528h */ case    0:  		/* li R30, 0 */
		/* 821A3528h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A3528h case    0:*/		return 0x821A352C;
		  /* 821A352Ch */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 821A352Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821A352Ch case    1:*/		return 0x821A3530;
		  /* 821A3530h */ case    2:  		/* bc 12, CR6_EQ, 48 */
		/* 821A3530h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A3560;  }
		/* 821A3530h case    2:*/		return 0x821A3534;
		  /* 821A3534h */ case    3:  		/* addi R28, R24, 11 */
		/* 821A3534h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R24,0xB);
		/* 821A3534h case    3:*/		return 0x821A3538;
		  /* 821A3538h */ case    4:  		/* addi R29, R17, 40 */
		/* 821A3538h case    4:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R17,0x28);
		/* 821A3538h case    4:*/		return 0x821A353C;
		  /* 821A353Ch */ case    5:  		/* mr R3, R31 */
		/* 821A353Ch case    5:*/		regs.R3 = regs.R31;
		/* 821A353Ch case    5:*/		return 0x821A3540;
		  /* 821A3540h */ case    6:  		/* lwzu R4, <#[R29 + 4]> */
		/* 821A3540h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A3540h case    6:*/		return 0x821A3544;
		  /* 821A3544h */ case    7:  		/* bl -177020 */
		/* 821A3544h case    7:*/		regs.LR = 0x821A3548; return 0x821781C8;
		/* 821A3544h case    7:*/		return 0x821A3548;
		  /* 821A3548h */ case    8:  		/* add R11, R30, R28 */
		/* 821A3548h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R28);
		/* 821A3548h case    8:*/		return 0x821A354C;
		  /* 821A354Ch */ case    9:  		/* addi R30, R30, 1 */
		/* 821A354Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A354Ch case    9:*/		return 0x821A3550;
		  /* 821A3550h */ case   10:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A3550h case   10:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A3550h case   10:*/		return 0x821A3554;
		  /* 821A3554h */ case   11:  		/* cmplw CR6, R30, R25 */
		/* 821A3554h case   11:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 821A3554h case   11:*/		return 0x821A3558;
		  /* 821A3558h */ case   12:  		/* stwx R3, <#[R11 + R31]> */
		/* 821A3558h case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821A3558h case   12:*/		return 0x821A355C;
		  /* 821A355Ch */ case   13:  		/* bc 12, CR6_LT, -32 */
		/* 821A355Ch case   13:*/		if ( regs.CR[6].lt ) { return 0x821A353C;  }
		/* 821A355Ch case   13:*/		return 0x821A3560;
	}
	return 0x821A3560;
} // Block from 821A3528h-821A3560h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A3560h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3560( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3560) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3560);
		  /* 821A3560h */ case    0:  		/* add R11, R24, R23 */
		/* 821A3560h case    0:*/		cpu::op::add<0>(regs,&regs.R11,regs.R24,regs.R23);
		/* 821A3560h case    0:*/		return 0x821A3564;
		  /* 821A3564h */ case    1:  		/* addi R7, R17, 4 */
		/* 821A3564h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R17,0x4);
		/* 821A3564h case    1:*/		return 0x821A3568;
		  /* 821A3568h */ case    2:  		/* lbz R8, <#[R11 - 1]> */
		/* 821A3568h case    2:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821A3568h case    2:*/		return 0x821A356C;
		  /* 821A356Ch */ case    3:  		/* lwz R11, <#[R7]> */
		/* 821A356Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821A356Ch case    3:*/		return 0x821A3570;
		  /* 821A3570h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821A3570h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A3570h case    4:*/		return 0x821A3574;
		  /* 821A3574h */ case    5:  		/* bc 12, CR6_EQ, 316 */
		/* 821A3574h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A36B0;  }
		/* 821A3574h case    5:*/		return 0x821A3578;
		  /* 821A3578h */ case    6:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A3578h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A3578h case    6:*/		return 0x821A357C;
		  /* 821A357Ch */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821A357Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A357Ch case    7:*/		return 0x821A3580;
		  /* 821A3580h */ case    8:  		/* bc 12, CR6_EQ, 136 */
		/* 821A3580h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A3608;  }
		/* 821A3580h case    8:*/		return 0x821A3584;
		  /* 821A3584h */ case    9:  		/* cmplw CR6, R11, R16 */
		/* 821A3584h case    9:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R16);
		/* 821A3584h case    9:*/		return 0x821A3588;
		  /* 821A3588h */ case   10:  		/* bc 12, CR6_EQ, 128 */
		/* 821A3588h case   10:*/		if ( regs.CR[6].eq ) { return 0x821A3608;  }
		/* 821A3588h case   10:*/		return 0x821A358C;
		  /* 821A358Ch */ case   11:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A358Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A358Ch case   11:*/		return 0x821A3590;
		  /* 821A3590h */ case   12:  		/* addi R10, R10, 4 */
		/* 821A3590h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A3590h case   12:*/		return 0x821A3594;
		  /* 821A3594h */ case   13:  		/* lwz R9, <#[R10]> */
		/* 821A3594h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A3594h case   13:*/		return 0x821A3598;
		  /* 821A3598h */ case   14:  		/* b 12 */
		/* 821A3598h case   14:*/		return 0x821A35A4;
		/* 821A3598h case   14:*/		return 0x821A359C;
		  /* 821A359Ch */ case   15:  		/* addi R10, R9, 8 */
		/* 821A359Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A359Ch case   15:*/		return 0x821A35A0;
		  /* 821A35A0h */ case   16:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A35A0h case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A35A0h case   16:*/		return 0x821A35A4;
	}
	return 0x821A35A4;
} // Block from 821A3560h-821A35A4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A35A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A35A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A35A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A35A4);
		  /* 821A35A4h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A35A4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A35A4h case    0:*/		return 0x821A35A8;
		  /* 821A35A8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A35A8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A359C;  }
		/* 821A35A8h case    1:*/		return 0x821A35AC;
		  /* 821A35ACh */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A35ACh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A35ACh case    2:*/		return 0x821A35B0;
		  /* 821A35B0h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A35B0h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A35B0h case    3:*/		return 0x821A35B4;
		  /* 821A35B4h */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 821A35B4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821A35B4h case    4:*/		return 0x821A35B8;
		  /* 821A35B8h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A35B8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A35B8h case    5:*/		return 0x821A35BC;
		  /* 821A35BCh */ case    6:  		/* stw R11, <#[R31 + 4]> */
		/* 821A35BCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821A35BCh case    6:*/		return 0x821A35C0;
		  /* 821A35C0h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821A35C0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A35C0h case    7:*/		return 0x821A35C4;
		  /* 821A35C4h */ case    8:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821A35C4h case    8:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821A35C4h case    8:*/		return 0x821A35C8;
		  /* 821A35C8h */ case    9:  		/* rlwinm R6, R10, 24, 29, 30 */
		/* 821A35C8h case    9:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R6,regs.R10);
		/* 821A35C8h case    9:*/		return 0x821A35CC;
		  /* 821A35CCh */ case   10:  		/* stw R31, <#[R11 + 12]> */
		/* 821A35CCh case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A35CCh case   10:*/		return 0x821A35D0;
		  /* 821A35D0h */ case   11:  		/* srw R9, R8, R9 */
		/* 821A35D0h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821A35D0h case   11:*/		return 0x821A35D4;
		  /* 821A35D4h */ case   12:  		/* srw R6, R8, R6 */
		/* 821A35D4h case   12:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R8,regs.R6);
		/* 821A35D4h case   12:*/		return 0x821A35D8;
		  /* 821A35D8h */ case   13:  		/* rlwimi R6, R9, 2, 28, 29 */
		/* 821A35D8h case   13:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R6,regs.R9);
		/* 821A35D8h case   13:*/		return 0x821A35DC;
		  /* 821A35DCh */ case   14:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821A35DCh case   14:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821A35DCh case   14:*/		return 0x821A35E0;
		  /* 821A35E0h */ case   15:  		/* rlwinm R6, R6, 0, 28, 31 */
		/* 821A35E0h case   15:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R6,regs.R6);
		/* 821A35E0h case   15:*/		return 0x821A35E4;
		  /* 821A35E4h */ case   16:  		/* srw R9, R8, R9 */
		/* 821A35E4h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821A35E4h case   16:*/		return 0x821A35E8;
		  /* 821A35E8h */ case   17:  		/* rlwinm R5, R10, 28, 29, 30 */
		/* 821A35E8h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R5,regs.R10);
		/* 821A35E8h case   17:*/		return 0x821A35EC;
		  /* 821A35ECh */ case   18:  		/* rlwimi R9, R6, 2, 0, 29 */
		/* 821A35ECh case   18:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R6);
		/* 821A35ECh case   18:*/		return 0x821A35F0;
		  /* 821A35F0h */ case   19:  		/* srw R6, R8, R5 */
		/* 821A35F0h case   19:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R8,regs.R5);
		/* 821A35F0h case   19:*/		return 0x821A35F4;
		  /* 821A35F4h */ case   20:  		/* rlwimi R6, R9, 2, 0, 29 */
		/* 821A35F4h case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R6,regs.R9);
		/* 821A35F4h case   20:*/		return 0x821A35F8;
		  /* 821A35F8h */ case   21:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A35F8h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A35F8h case   21:*/		return 0x821A35FC;
		  /* 821A35FCh */ case   22:  		/* rlwinm R9, R6, 5, 0, 26 */
		/* 821A35FCh case   22:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R6);
		/* 821A35FCh case   22:*/		return 0x821A3600;
		  /* 821A3600h */ case   23:  		/* or R10, R9, R10 */
		/* 821A3600h case   23:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A3600h case   23:*/		return 0x821A3604;
		  /* 821A3604h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821A3604h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3604h case   24:*/		return 0x821A3608;
	}
	return 0x821A3608;
} // Block from 821A35A4h-821A3608h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821A3608h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3608( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3608) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3608);
		  /* 821A3608h */ case    0:  		/* lwz R10, <#[R7]> */
		/* 821A3608h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R7 + 0x00000000) );
		/* 821A3608h case    0:*/		return 0x821A360C;
		  /* 821A360Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A360Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A360Ch case    1:*/		return 0x821A3610;
		  /* 821A3610h */ case    2:  		/* bc 4, CR6_EQ, -164 */
		/* 821A3610h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A356C;  }
		/* 821A3610h case    2:*/		return 0x821A3614;
		  /* 821A3614h */ case    3:  		/* addi R7, R11, 8 */
		/* 821A3614h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R11,0x8);
		/* 821A3614h case    3:*/		return 0x821A3618;
		  /* 821A3618h */ case    4:  		/* b -172 */
		/* 821A3618h case    4:*/		return 0x821A356C;
		/* 821A3618h case    4:*/		return 0x821A361C;
	}
	return 0x821A361C;
} // Block from 821A3608h-821A361Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A361Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A361C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A361C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A361C);
		  /* 821A361Ch */ case    0:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821A361Ch case    0:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821A361Ch case    0:*/		return 0x821A3620;
		  /* 821A3620h */ case    1:  		/* li R30, 0 */
		/* 821A3620h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A3620h case    1:*/		return 0x821A3624;
		  /* 821A3624h */ case    2:  		/* add R11, R11, R26 */
		/* 821A3624h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R26);
		/* 821A3624h case    2:*/		return 0x821A3628;
		  /* 821A3628h */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 821A3628h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821A3628h case    3:*/		return 0x821A362C;
		  /* 821A362Ch */ case    4:  		/* lbz R27, <#[R11 - 1]> */
		/* 821A362Ch case    4:*/		cpu::mem::load8z( regs, &regs.R27, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821A362Ch case    4:*/		return 0x821A3630;
		  /* 821A3630h */ case    5:  		/* bc 12, CR6_EQ, 128 */
		/* 821A3630h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A36B0;  }
		/* 821A3630h case    5:*/		return 0x821A3634;
		  /* 821A3634h */ case    6:  		/* addi R28, R24, 11 */
		/* 821A3634h case    6:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R24,0xB);
		/* 821A3634h case    6:*/		return 0x821A3638;
		  /* 821A3638h */ case    7:  		/* li R29, 0 */
		/* 821A3638h case    7:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A3638h case    7:*/		return 0x821A363C;
		  /* 821A363Ch */ case    8:  		/* mr R4, R17 */
		/* 821A363Ch case    8:*/		regs.R4 = regs.R17;
		/* 821A363Ch case    8:*/		return 0x821A3640;
		  /* 821A3640h */ case    9:  		/* mr R3, R22 */
		/* 821A3640h case    9:*/		regs.R3 = regs.R22;
		/* 821A3640h case    9:*/		return 0x821A3644;
		  /* 821A3644h */ case   10:  		/* bl -177732 */
		/* 821A3644h case   10:*/		regs.LR = 0x821A3648; return 0x82178000;
		/* 821A3644h case   10:*/		return 0x821A3648;
		  /* 821A3648h */ case   11:  		/* lis R10, 512 */
		/* 821A3648h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0x200);
		/* 821A3648h case   11:*/		return 0x821A364C;
		  /* 821A364Ch */ case   12:  		/* lis R12, -3073 */
		/* 821A364Ch case   12:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFF3FF);
		/* 821A364Ch case   12:*/		return 0x821A3650;
		  /* 821A3650h */ case   13:  		/* lwz R8, <#[R3]> */
		/* 821A3650h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3650h case   13:*/		return 0x821A3654;
		  /* 821A3654h */ case   14:  		/* ori R10, R10, 7296 */
		/* 821A3654h case   14:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x1C80);
		/* 821A3654h case   14:*/		return 0x821A3658;
		  /* 821A3658h */ case   15:  		/* srw R9, R27, R29 */
		/* 821A3658h case   15:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R29);
		/* 821A3658h case   15:*/		return 0x821A365C;
		  /* 821A365Ch */ case   16:  		/* ori R12, R12, 64671 */
		/* 821A365Ch case   16:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0xFC9F);
		/* 821A365Ch case   16:*/		return 0x821A3660;
		  /* 821A3660h */ case   17:  		/* rlwimi R10, R9, 5, 25, 26 */
		/* 821A3660h case   17:*/		cpu::op::rlwimi<0,5,25,26>(regs,&regs.R10,regs.R9);
		/* 821A3660h case   17:*/		return 0x821A3664;
		  /* 821A3664h */ case   18:  		/* mr R11, R3 */
		/* 821A3664h case   18:*/		regs.R11 = regs.R3;
		/* 821A3664h case   18:*/		return 0x821A3668;
		  /* 821A3668h */ case   19:  		/* and R9, R8, R12 */
		/* 821A3668h case   19:*/		cpu::op::and<0>(regs,&regs.R9,regs.R8,regs.R12);
		/* 821A3668h case   19:*/		return 0x821A366C;
		  /* 821A366Ch */ case   20:  		/* mr R3, R31 */
		/* 821A366Ch case   20:*/		regs.R3 = regs.R31;
		/* 821A366Ch case   20:*/		return 0x821A3670;
		  /* 821A3670h */ case   21:  		/* or R10, R10, R9 */
		/* 821A3670h case   21:*/		cpu::op::or<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821A3670h case   21:*/		return 0x821A3674;
		  /* 821A3674h */ case   22:  		/* mr R4, R11 */
		/* 821A3674h case   22:*/		regs.R4 = regs.R11;
		/* 821A3674h case   22:*/		return 0x821A3678;
		  /* 821A3678h */ case   23:  		/* stw R10, <#[R11]> */
		/* 821A3678h case   23:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3678h case   23:*/		return 0x821A367C;
		  /* 821A367Ch */ case   24:  		/* rlwinm R10, R10, 0, 0, 26 */
		/* 821A367Ch case   24:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R10,regs.R10);
		/* 821A367Ch case   24:*/		return 0x821A3680;
		  /* 821A3680h */ case   25:  		/* lwz R9, <#[R16]> */
		/* 821A3680h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R16 + 0x00000000) );
		/* 821A3680h case   25:*/		return 0x821A3684;
		  /* 821A3684h */ case   26:  		/* rlwinm R9, R9, 0, 31, 31 */
		/* 821A3684h case   26:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R9,regs.R9);
		/* 821A3684h case   26:*/		return 0x821A3688;
		  /* 821A3688h */ case   27:  		/* or R10, R9, R10 */
		/* 821A3688h case   27:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A3688h case   27:*/		return 0x821A368C;
		  /* 821A368Ch */ case   28:  		/* stw R10, <#[R11]> */
		/* 821A368Ch case   28:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A368Ch case   28:*/		return 0x821A3690;
		  /* 821A3690h */ case   29:  		/* bl -177352 */
		/* 821A3690h case   29:*/		regs.LR = 0x821A3694; return 0x821781C8;
		/* 821A3690h case   29:*/		return 0x821A3694;
		  /* 821A3694h */ case   30:  		/* add R11, R30, R28 */
		/* 821A3694h case   30:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R28);
		/* 821A3694h case   30:*/		return 0x821A3698;
		  /* 821A3698h */ case   31:  		/* addi R30, R30, 1 */
		/* 821A3698h case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A3698h case   31:*/		return 0x821A369C;
		  /* 821A369Ch */ case   32:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A369Ch case   32:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A369Ch case   32:*/		return 0x821A36A0;
		  /* 821A36A0h */ case   33:  		/* addi R29, R29, 2 */
		/* 821A36A0h case   33:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x2);
		/* 821A36A0h case   33:*/		return 0x821A36A4;
		  /* 821A36A4h */ case   34:  		/* cmplw CR6, R30, R25 */
		/* 821A36A4h case   34:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R25);
		/* 821A36A4h case   34:*/		return 0x821A36A8;
		  /* 821A36A8h */ case   35:  		/* stwx R3, <#[R11 + R31]> */
		/* 821A36A8h case   35:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821A36A8h case   35:*/		return 0x821A36AC;
		  /* 821A36ACh */ case   36:  		/* bc 12, CR6_LT, -112 */
		/* 821A36ACh case   36:*/		if ( regs.CR[6].lt ) { return 0x821A363C;  }
		/* 821A36ACh case   36:*/		return 0x821A36B0;
	}
	return 0x821A36B0;
} // Block from 821A361Ch-821A36B0h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821A36B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A36B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A36B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A36B0);
		  /* 821A36B0h */ case    0:  		/* lwz R11, <#[R19 + 12]> */
		/* 821A36B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x0000000C) );
		/* 821A36B0h case    0:*/		return 0x821A36B4;
		  /* 821A36B4h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A36B4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A36B4h case    1:*/		return 0x821A36B8;
		  /* 821A36B8h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A36B8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A36B8h case    2:*/		return 0x821A36BC;
		  /* 821A36BCh */ case    3:  		/* b 12 */
		/* 821A36BCh case    3:*/		return 0x821A36C8;
		/* 821A36BCh case    3:*/		return 0x821A36C0;
		  /* 821A36C0h */ case    4:  		/* addi R11, R10, 8 */
		/* 821A36C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A36C0h case    4:*/		return 0x821A36C4;
		  /* 821A36C4h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A36C4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A36C4h case    5:*/		return 0x821A36C8;
	}
	return 0x821A36C8;
} // Block from 821A36B0h-821A36C8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A36C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A36C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A36C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A36C8);
		  /* 821A36C8h */ case    0:  		/* cmplw CR6, R10, R19 */
		/* 821A36C8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R19);
		/* 821A36C8h case    0:*/		return 0x821A36CC;
		  /* 821A36CCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A36CCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A36C0;  }
		/* 821A36CCh case    1:*/		return 0x821A36D0;
		  /* 821A36D0h */ case    2:  		/* lwz R8, <#[R19 + 8]> */
		/* 821A36D0h case    2:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R19 + 0x00000008) );
		/* 821A36D0h case    2:*/		return 0x821A36D4;
		  /* 821A36D4h */ case    3:  		/* lis R10, -32252 */
		/* 821A36D4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821A36D4h case    3:*/		return 0x821A36D8;
		  /* 821A36D8h */ case    4:  		/* addi R9, R10, -16648 */
		/* 821A36D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0xFFFFBEF8);
		/* 821A36D8h case    4:*/		return 0x821A36DC;
		  /* 821A36DCh */ case    5:  		/* stw R8, <#[R11]> */
		/* 821A36DCh case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000000) );
		/* 821A36DCh case    5:*/		return 0x821A36E0;
		  /* 821A36E0h */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 821A36E0h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821A36E0h case    6:*/		return 0x821A36E4;
		  /* 821A36E4h */ case    7:  		/* stw R11, <#[R19 + 8]> */
		/* 821A36E4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000008) );
		/* 821A36E4h case    7:*/		return 0x821A36E8;
		  /* 821A36E8h */ case    8:  		/* stw R19, <#[R31 + 4]> */
		/* 821A36E8h case    8:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R31 + 0x00000004) );
		/* 821A36E8h case    8:*/		return 0x821A36EC;
		  /* 821A36ECh */ case    9:  		/* stw R31, <#[R19 + 12]> */
		/* 821A36ECh case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R19 + 0x0000000C) );
		/* 821A36ECh case    9:*/		return 0x821A36F0;
		  /* 821A36F0h */ case   10:  		/* lwz R11, <#[R19]> */
		/* 821A36F0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821A36F0h case   10:*/		return 0x821A36F4;
		  /* 821A36F4h */ case   11:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821A36F4h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821A36F4h case   11:*/		return 0x821A36F8;
		  /* 821A36F8h */ case   12:  		/* stw R10, <#[R19]> */
		/* 821A36F8h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 821A36F8h case   12:*/		return 0x821A36FC;
		  /* 821A36FCh */ case   13:  		/* rlwinm R8, R10, 22, 29, 30 */
		/* 821A36FCh case   13:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R8,regs.R10);
		/* 821A36FCh case   13:*/		return 0x821A3700;
		  /* 821A3700h */ case   14:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A3700h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A3700h case   14:*/		return 0x821A3704;
		  /* 821A3704h */ case   15:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821A3704h case   15:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821A3704h case   15:*/		return 0x821A3708;
		  /* 821A3708h */ case   16:  		/* add R11, R11, R9 */
		/* 821A3708h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A3708h case   16:*/		return 0x821A370C;
		  /* 821A370Ch */ case   17:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821A370Ch case   17:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821A370Ch case   17:*/		return 0x821A3710;
		  /* 821A3710h */ case   18:  		/* rlwinm R6, R10, 26, 29, 30 */
		/* 821A3710h case   18:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R6,regs.R10);
		/* 821A3710h case   18:*/		return 0x821A3714;
		  /* 821A3714h */ case   19:  		/* rlwinm R5, R10, 28, 29, 30 */
		/* 821A3714h case   19:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R5,regs.R10);
		/* 821A3714h case   19:*/		return 0x821A3718;
		  /* 821A3718h */ case   20:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A3718h case   20:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A3718h case   20:*/		return 0x821A371C;
		  /* 821A371Ch */ case   21:  		/* lbz R11, <#[R11 - 1]> */
		/* 821A371Ch case   21:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821A371Ch case   21:*/		return 0x821A3720;
		  /* 821A3720h */ case   22:  		/* srw R8, R11, R8 */
		/* 821A3720h case   22:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 821A3720h case   22:*/		return 0x821A3724;
		  /* 821A3724h */ case   23:  		/* srw R7, R11, R7 */
		/* 821A3724h case   23:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821A3724h case   23:*/		return 0x821A3728;
		  /* 821A3728h */ case   24:  		/* rlwimi R7, R8, 2, 28, 29 */
		/* 821A3728h case   24:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R8);
		/* 821A3728h case   24:*/		return 0x821A372C;
		  /* 821A372Ch */ case   25:  		/* srw R8, R11, R6 */
		/* 821A372Ch case   25:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R11,regs.R6);
		/* 821A372Ch case   25:*/		return 0x821A3730;
		  /* 821A3730h */ case   26:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821A3730h case   26:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821A3730h case   26:*/		return 0x821A3734;
		  /* 821A3734h */ case   27:  		/* srw R11, R11, R5 */
		/* 821A3734h case   27:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R5);
		/* 821A3734h case   27:*/		return 0x821A3738;
		  /* 821A3738h */ case   28:  		/* rlwimi R8, R7, 2, 0, 29 */
		/* 821A3738h case   28:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R7);
		/* 821A3738h case   28:*/		return 0x821A373C;
		  /* 821A373Ch */ case   29:  		/* rlwimi R11, R8, 2, 0, 29 */
		/* 821A373Ch case   29:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 821A373Ch case   29:*/		return 0x821A3740;
		  /* 821A3740h */ case   30:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821A3740h case   30:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821A3740h case   30:*/		return 0x821A3744;
		  /* 821A3744h */ case   31:  		/* or R11, R11, R10 */
		/* 821A3744h case   31:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A3744h case   31:*/		return 0x821A3748;
		  /* 821A3748h */ case   32:  		/* stw R11, <#[R19]> */
		/* 821A3748h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821A3748h case   32:*/		return 0x821A374C;
		  /* 821A374Ch */ case   33:  		/* lwz R11, <#[R16 + 12]> */
		/* 821A374Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x0000000C) );
		/* 821A374Ch case   33:*/		return 0x821A3750;
		  /* 821A3750h */ case   34:  		/* addi R11, R11, 4 */
		/* 821A3750h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A3750h case   34:*/		return 0x821A3754;
		  /* 821A3754h */ case   35:  		/* lwz R10, <#[R11]> */
		/* 821A3754h case   35:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3754h case   35:*/		return 0x821A3758;
		  /* 821A3758h */ case   36:  		/* b 12 */
		/* 821A3758h case   36:*/		return 0x821A3764;
		/* 821A3758h case   36:*/		return 0x821A375C;
		  /* 821A375Ch */ case   37:  		/* addi R11, R10, 8 */
		/* 821A375Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A375Ch case   37:*/		return 0x821A3760;
		  /* 821A3760h */ case   38:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A3760h case   38:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A3760h case   38:*/		return 0x821A3764;
	}
	return 0x821A3764;
} // Block from 821A36C8h-821A3764h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821A3764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3764);
		  /* 821A3764h */ case    0:  		/* cmplw CR6, R10, R16 */
		/* 821A3764h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R16);
		/* 821A3764h case    0:*/		return 0x821A3768;
		  /* 821A3768h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A3768h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A375C;  }
		/* 821A3768h case    1:*/		return 0x821A376C;
		  /* 821A376Ch */ case    2:  		/* lwz R10, <#[R16 + 8]> */
		/* 821A376Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R16 + 0x00000008) );
		/* 821A376Ch case    2:*/		return 0x821A3770;
		  /* 821A3770h */ case    3:  		/* add R8, R24, R23 */
		/* 821A3770h case    3:*/		cpu::op::add<0>(regs,&regs.R8,regs.R24,regs.R23);
		/* 821A3770h case    3:*/		return 0x821A3774;
		  /* 821A3774h */ case    4:  		/* mr R3, R20 */
		/* 821A3774h case    4:*/		regs.R3 = regs.R20;
		/* 821A3774h case    4:*/		return 0x821A3778;
		  /* 821A3778h */ case    5:  		/* stw R10, <#[R11]> */
		/* 821A3778h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3778h case    5:*/		return 0x821A377C;
		  /* 821A377Ch */ case    6:  		/* lwz R11, <#[R31 + 4]> */
		/* 821A377Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821A377Ch case    6:*/		return 0x821A3780;
		  /* 821A3780h */ case    7:  		/* stw R11, <#[R16 + 8]> */
		/* 821A3780h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000008) );
		/* 821A3780h case    7:*/		return 0x821A3784;
		  /* 821A3784h */ case    8:  		/* stw R16, <#[R31 + 4]> */
		/* 821A3784h case    8:*/		cpu::mem::store32( regs, regs.R16, (uint32)(regs.R31 + 0x00000004) );
		/* 821A3784h case    8:*/		return 0x821A3788;
		  /* 821A3788h */ case    9:  		/* stw R31, <#[R16 + 12]> */
		/* 821A3788h case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R16 + 0x0000000C) );
		/* 821A3788h case    9:*/		return 0x821A378C;
		  /* 821A378Ch */ case   10:  		/* lwz R11, <#[R16]> */
		/* 821A378Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821A378Ch case   10:*/		return 0x821A3790;
		  /* 821A3790h */ case   11:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821A3790h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821A3790h case   11:*/		return 0x821A3794;
		  /* 821A3794h */ case   12:  		/* stw R10, <#[R16]> */
		/* 821A3794h case   12:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R16 + 0x00000000) );
		/* 821A3794h case   12:*/		return 0x821A3798;
		  /* 821A3798h */ case   13:  		/* rlwinm R7, R10, 22, 29, 30 */
		/* 821A3798h case   13:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R7,regs.R10);
		/* 821A3798h case   13:*/		return 0x821A379C;
		  /* 821A379Ch */ case   14:  		/* lwz R11, <#[R17 + 8]> */
		/* 821A379Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821A379Ch case   14:*/		return 0x821A37A0;
		  /* 821A37A0h */ case   15:  		/* rlwinm R11, R11, 31, 28, 31 */
		/* 821A37A0h case   15:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R11,regs.R11);
		/* 821A37A0h case   15:*/		return 0x821A37A4;
		  /* 821A37A4h */ case   16:  		/* add R11, R11, R9 */
		/* 821A37A4h case   16:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A37A4h case   16:*/		return 0x821A37A8;
		  /* 821A37A8h */ case   17:  		/* rlwinm R6, R10, 24, 29, 30 */
		/* 821A37A8h case   17:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R6,regs.R10);
		/* 821A37A8h case   17:*/		return 0x821A37AC;
		  /* 821A37ACh */ case   18:  		/* rlwinm R5, R10, 26, 29, 30 */
		/* 821A37ACh case   18:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R5,regs.R10);
		/* 821A37ACh case   18:*/		return 0x821A37B0;
		  /* 821A37B0h */ case   19:  		/* rlwinm R9, R10, 0, 0, 31 */
		/* 821A37B0h case   19:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R10);
		/* 821A37B0h case   19:*/		return 0x821A37B4;
		  /* 821A37B4h */ case   20:  		/* rlwinm R10, R10, 28, 29, 30 */
		/* 821A37B4h case   20:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R10,regs.R10);
		/* 821A37B4h case   20:*/		return 0x821A37B8;
		  /* 821A37B8h */ case   21:  		/* lbz R11, <#[R11 - 1]> */
		/* 821A37B8h case   21:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821A37B8h case   21:*/		return 0x821A37BC;
		  /* 821A37BCh */ case   22:  		/* srw R7, R11, R7 */
		/* 821A37BCh case   22:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821A37BCh case   22:*/		return 0x821A37C0;
		  /* 821A37C0h */ case   23:  		/* srw R6, R11, R6 */
		/* 821A37C0h case   23:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R11,regs.R6);
		/* 821A37C0h case   23:*/		return 0x821A37C4;
		  /* 821A37C4h */ case   24:  		/* rlwimi R6, R7, 2, 28, 29 */
		/* 821A37C4h case   24:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R6,regs.R7);
		/* 821A37C4h case   24:*/		return 0x821A37C8;
		  /* 821A37C8h */ case   25:  		/* srw R7, R11, R5 */
		/* 821A37C8h case   25:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R5);
		/* 821A37C8h case   25:*/		return 0x821A37CC;
		  /* 821A37CCh */ case   26:  		/* rlwinm R6, R6, 0, 28, 31 */
		/* 821A37CCh case   26:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R6,regs.R6);
		/* 821A37CCh case   26:*/		return 0x821A37D0;
		  /* 821A37D0h */ case   27:  		/* srw R11, R11, R10 */
		/* 821A37D0h case   27:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A37D0h case   27:*/		return 0x821A37D4;
		  /* 821A37D4h */ case   28:  		/* rlwimi R7, R6, 2, 0, 29 */
		/* 821A37D4h case   28:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R6);
		/* 821A37D4h case   28:*/		return 0x821A37D8;
		  /* 821A37D8h */ case   29:  		/* rlwinm R9, R9, 0, 27, 18 */
		/* 821A37D8h case   29:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R9,regs.R9);
		/* 821A37D8h case   29:*/		return 0x821A37DC;
		  /* 821A37DCh */ case   30:  		/* rlwimi R11, R7, 2, 0, 29 */
		/* 821A37DCh case   30:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 821A37DCh case   30:*/		return 0x821A37E0;
		  /* 821A37E0h */ case   31:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821A37E0h case   31:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821A37E0h case   31:*/		return 0x821A37E4;
		  /* 821A37E4h */ case   32:  		/* or R11, R11, R9 */
		/* 821A37E4h case   32:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A37E4h case   32:*/		return 0x821A37E8;
		  /* 821A37E8h */ case   33:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821A37E8h case   33:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821A37E8h case   33:*/		return 0x821A37EC;
		  /* 821A37ECh */ case   34:  		/* stw R11, <#[R16]> */
		/* 821A37ECh case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821A37ECh case   34:*/		return 0x821A37F0;
		  /* 821A37F0h */ case   35:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821A37F0h case   35:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821A37F0h case   35:*/		return 0x821A37F4;
		  /* 821A37F4h */ case   36:  		/* lbz R8, <#[R8 - 1]> */
		/* 821A37F4h case   36:*/		cpu::mem::load8z( regs, &regs.R8, (uint32)(regs.R8 + 0xFFFFFFFF) );
		/* 821A37F4h case   36:*/		return 0x821A37F8;
		  /* 821A37F8h */ case   37:  		/* srw R10, R8, R10 */
		/* 821A37F8h case   37:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821A37F8h case   37:*/		return 0x821A37FC;
		  /* 821A37FCh */ case   38:  		/* srw R9, R8, R9 */
		/* 821A37FCh case   38:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821A37FCh case   38:*/		return 0x821A3800;
		  /* 821A3800h */ case   39:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821A3800h case   39:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821A3800h case   39:*/		return 0x821A3804;
		  /* 821A3804h */ case   40:  		/* rlwinm R7, R11, 26, 29, 30 */
		/* 821A3804h case   40:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R7,regs.R11);
		/* 821A3804h case   40:*/		return 0x821A3808;
		  /* 821A3808h */ case   41:  		/* rlwinm R10, R11, 28, 29, 30 */
		/* 821A3808h case   41:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R10,regs.R11);
		/* 821A3808h case   41:*/		return 0x821A380C;
		  /* 821A380Ch */ case   42:  		/* srw R7, R8, R7 */
		/* 821A380Ch case   42:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R8,regs.R7);
		/* 821A380Ch case   42:*/		return 0x821A3810;
		  /* 821A3810h */ case   43:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A3810h case   43:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A3810h case   43:*/		return 0x821A3814;
		  /* 821A3814h */ case   44:  		/* srw R10, R8, R10 */
		/* 821A3814h case   44:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821A3814h case   44:*/		return 0x821A3818;
		  /* 821A3818h */ case   45:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821A3818h case   45:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821A3818h case   45:*/		return 0x821A381C;
		  /* 821A381Ch */ case   46:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821A381Ch case   46:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821A381Ch case   46:*/		return 0x821A3820;
		  /* 821A3820h */ case   47:  		/* rlwimi R10, R7, 2, 0, 29 */
		/* 821A3820h case   47:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R7);
		/* 821A3820h case   47:*/		return 0x821A3824;
		  /* 821A3824h */ case   48:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821A3824h case   48:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821A3824h case   48:*/		return 0x821A3828;
		  /* 821A3828h */ case   49:  		/* or R11, R10, R11 */
		/* 821A3828h case   49:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A3828h case   49:*/		return 0x821A382C;
		  /* 821A382Ch */ case   50:  		/* stw R11, <#[R16]> */
		/* 821A382Ch case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821A382Ch case   50:*/		return 0x821A3830;
		  /* 821A3830h */ case   51:  		/* bl -257712 */
		/* 821A3830h case   51:*/		regs.LR = 0x821A3834; return 0x82164980;
		/* 821A3830h case   51:*/		return 0x821A3834;
		  /* 821A3834h */ case   52:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A3834h case   52:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A3834h case   52:*/		return 0x821A3838;
		  /* 821A3838h */ case   53:  		/* bc 12, CR0_EQ, 24 */
		/* 821A3838h case   53:*/		if ( regs.CR[0].eq ) { return 0x821A3850;  }
		/* 821A3838h case   53:*/		return 0x821A383C;
		  /* 821A383Ch */ case   54:  		/* li R6, 1 */
		/* 821A383Ch case   54:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A383Ch case   54:*/		return 0x821A3840;
		  /* 821A3840h */ case   55:  		/* lwz R5, <#[R22 + 652]> */
		/* 821A3840h case   55:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R22 + 0x0000028C) );
		/* 821A3840h case   55:*/		return 0x821A3844;
		  /* 821A3844h */ case   56:  		/* mr R4, R20 */
		/* 821A3844h case   56:*/		regs.R4 = regs.R20;
		/* 821A3844h case   56:*/		return 0x821A3848;
		  /* 821A3848h */ case   57:  		/* mr R3, R22 */
		/* 821A3848h case   57:*/		regs.R3 = regs.R22;
		/* 821A3848h case   57:*/		return 0x821A384C;
		  /* 821A384Ch */ case   58:  		/* bl 555900 */
		/* 821A384Ch case   58:*/		regs.LR = 0x821A3850; return 0x8222B3C8;
		/* 821A384Ch case   58:*/		return 0x821A3850;
	}
	return 0x821A3850;
} // Block from 821A3764h-821A3850h (59 instructions)

//////////////////////////////////////////////////////
// Block at 821A3850h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3850( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3850) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3850);
		  /* 821A3850h */ case    0:  		/* mr R3, R17 */
		/* 821A3850h case    0:*/		regs.R3 = regs.R17;
		/* 821A3850h case    0:*/		return 0x821A3854;
		  /* 821A3854h */ case    1:  		/* bl -257748 */
		/* 821A3854h case    1:*/		regs.LR = 0x821A3858; return 0x82164980;
		/* 821A3854h case    1:*/		return 0x821A3858;
		  /* 821A3858h */ case    2:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A3858h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A3858h case    2:*/		return 0x821A385C;
		  /* 821A385Ch */ case    3:  		/* bc 12, CR0_EQ, 24 */
		/* 821A385Ch case    3:*/		if ( regs.CR[0].eq ) { return 0x821A3874;  }
		/* 821A385Ch case    3:*/		return 0x821A3860;
		  /* 821A3860h */ case    4:  		/* li R6, 1 */
		/* 821A3860h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A3860h case    4:*/		return 0x821A3864;
		  /* 821A3864h */ case    5:  		/* lwz R5, <#[R22 + 652]> */
		/* 821A3864h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R22 + 0x0000028C) );
		/* 821A3864h case    5:*/		return 0x821A3868;
		  /* 821A3868h */ case    6:  		/* mr R4, R17 */
		/* 821A3868h case    6:*/		regs.R4 = regs.R17;
		/* 821A3868h case    6:*/		return 0x821A386C;
		  /* 821A386Ch */ case    7:  		/* mr R3, R22 */
		/* 821A386Ch case    7:*/		regs.R3 = regs.R22;
		/* 821A386Ch case    7:*/		return 0x821A3870;
		  /* 821A3870h */ case    8:  		/* bl 555864 */
		/* 821A3870h case    8:*/		regs.LR = 0x821A3874; return 0x8222B3C8;
		/* 821A3870h case    8:*/		return 0x821A3874;
	}
	return 0x821A3874;
} // Block from 821A3850h-821A3874h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A3874h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3874( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3874) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3874);
		  /* 821A3874h */ case    0:  		/* slw R11, R14, R18 */
		/* 821A3874h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R14,regs.R18);
		/* 821A3874h case    0:*/		return 0x821A3878;
		  /* 821A3878h */ case    1:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A3878h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A3878h case    1:*/		return 0x821A387C;
		  /* 821A387Ch */ case    2:  		/* addi R11, R11, -1 */
		/* 821A387Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A387Ch case    2:*/		return 0x821A3880;
		  /* 821A3880h */ case    3:  		/* lis R9, 256 */
		/* 821A3880h case    3:*/		cpu::op::lis<0>(regs,&regs.R9,0x100);
		/* 821A3880h case    3:*/		return 0x821A3884;
		  /* 821A3884h */ case    4:  		/* rlwinm R10, R10, 0, 31, 26 */
		/* 821A3884h case    4:*/		cpu::op::rlwinm<0,0,31,26>(regs,&regs.R10,regs.R10);
		/* 821A3884h case    4:*/		return 0x821A3888;
		  /* 821A3888h */ case    5:  		/* rlwimi R9, R11, 1, 27, 30 */
		/* 821A3888h case    5:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R9,regs.R11);
		/* 821A3888h case    5:*/		return 0x821A388C;
		  /* 821A388Ch */ case    6:  		/* or R11, R9, R10 */
		/* 821A388Ch case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 821A388Ch case    6:*/		return 0x821A3890;
		  /* 821A3890h */ case    7:  		/* stw R11, <#[R31 + 8]> */
		/* 821A3890h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A3890h case    7:*/		return 0x821A3894;
		  /* 821A3894h */ case    8:  		/* lwz R10, <#[R20 + 8]> */
		/* 821A3894h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 821A3894h case    8:*/		return 0x821A3898;
		  /* 821A3898h */ case    9:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A3898h case    9:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A3898h case    9:*/		return 0x821A389C;
		  /* 821A389Ch */ case   10:  		/* bc 12, CR0_EQ, 112 */
		/* 821A389Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821A390C;  }
		/* 821A389Ch case   10:*/		return 0x821A38A0;
		  /* 821A38A0h */ case   11:  		/* oris R11, R11, 128 */
		/* 821A38A0h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A38A0h case   11:*/		return 0x821A38A4;
		  /* 821A38A4h */ case   12:  		/* mr R3, R20 */
		/* 821A38A4h case   12:*/		regs.R3 = regs.R20;
		/* 821A38A4h case   12:*/		return 0x821A38A8;
		  /* 821A38A8h */ case   13:  		/* stw R11, <#[R31 + 8]> */
		/* 821A38A8h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A38A8h case   13:*/		return 0x821A38AC;
		  /* 821A38ACh */ case   14:  		/* bl -131012 */
		/* 821A38ACh case   14:*/		regs.LR = 0x821A38B0; return 0x821838E8;
		/* 821A38ACh case   14:*/		return 0x821A38B0;
		  /* 821A38B0h */ case   15:  		/* sth R3, <#[R31 + 18]> */
		/* 821A38B0h case   15:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 821A38B0h case   15:*/		return 0x821A38B4;
		  /* 821A38B4h */ case   16:  		/* lwz R3, <#[R22 + 660]> */
		/* 821A38B4h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R22 + 0x00000294) );
		/* 821A38B4h case   16:*/		return 0x821A38B8;
		  /* 821A38B8h */ case   17:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A38B8h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A38B8h case   17:*/		return 0x821A38BC;
		  /* 821A38BCh */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A38BCh case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A38BCh case   18:*/		return 0x821A38C0;
		  /* 821A38C0h */ case   19:  		/* bc 4, CR0_EQ, 40 */
		/* 821A38C0h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821A38E8;  }
		/* 821A38C0h case   19:*/		return 0x821A38C4;
		  /* 821A38C4h */ case   20:  		/* lwz R11, <#[R3]> */
		/* 821A38C4h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A38C4h case   20:*/		return 0x821A38C8;
		  /* 821A38C8h */ case   21:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A38C8h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A38C8h case   21:*/		return 0x821A38CC;
		  /* 821A38CCh */ case   22:  		/* addic. R11, R11, -4 */
		/* 821A38CCh case   22:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A38CCh case   22:*/		return 0x821A38D0;
		  /* 821A38D0h */ case   23:  		/* bc 12, CR0_EQ, 24 */
		/* 821A38D0h case   23:*/		if ( regs.CR[0].eq ) { return 0x821A38E8;  }
		/* 821A38D0h case   23:*/		return 0x821A38D4;
		  /* 821A38D4h */ case   24:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A38D4h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A38D4h case   24:*/		return 0x821A38D8;
		  /* 821A38D8h */ case   25:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A38D8h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A38D8h case   25:*/		return 0x821A38DC;
		  /* 821A38DCh */ case   26:  		/* addi R10, R10, 1 */
		/* 821A38DCh case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A38DCh case   26:*/		return 0x821A38E0;
		  /* 821A38E0h */ case   27:  		/* cmplw CR6, R10, R9 */
		/* 821A38E0h case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A38E0h case   27:*/		return 0x821A38E4;
		  /* 821A38E4h */ case   28:  		/* bc 4, CR6_GT, 16 */
		/* 821A38E4h case   28:*/		if ( !regs.CR[6].gt ) { return 0x821A38F4;  }
		/* 821A38E4h case   28:*/		return 0x821A38E8;
	}
	return 0x821A38E8;
} // Block from 821A3874h-821A38E8h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A38E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A38E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A38E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A38E8);
		  /* 821A38E8h */ case    0:  		/* li R4, 1 */
		/* 821A38E8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A38E8h case    0:*/		return 0x821A38EC;
		  /* 821A38ECh */ case    1:  		/* bl -92196 */
		/* 821A38ECh case    1:*/		regs.LR = 0x821A38F0; return 0x8218D0C8;
		/* 821A38ECh case    1:*/		return 0x821A38F0;
		  /* 821A38F0h */ case    2:  		/* mr R11, R3 */
		/* 821A38F0h case    2:*/		regs.R11 = regs.R3;
		/* 821A38F0h case    2:*/		return 0x821A38F4;
	}
	return 0x821A38F4;
} // Block from 821A38E8h-821A38F4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A38F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A38F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A38F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A38F4);
		  /* 821A38F4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A38F4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A38F4h case    0:*/		return 0x821A38F8;
		  /* 821A38F8h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A38F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A38F8h case    1:*/		return 0x821A38FC;
		  /* 821A38FCh */ case    2:  		/* addi R8, R10, 1 */
		/* 821A38FCh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A38FCh case    2:*/		return 0x821A3900;
		  /* 821A3900h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A3900h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A3900h case    3:*/		return 0x821A3904;
		  /* 821A3904h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A3904h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A3904h case    4:*/		return 0x821A3908;
		  /* 821A3908h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A3908h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A3908h case    5:*/		return 0x821A390C;
	}
	return 0x821A390C;
} // Block from 821A38F4h-821A390Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A390Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A390C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A390C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A390C);
		  /* 821A390Ch */ case    0:  		/* mr R4, R31 */
		/* 821A390Ch case    0:*/		regs.R4 = regs.R31;
		/* 821A390Ch case    0:*/		return 0x821A3910;
		  /* 821A3910h */ case    1:  		/* mr R3, R22 */
		/* 821A3910h case    1:*/		regs.R3 = regs.R22;
		/* 821A3910h case    1:*/		return 0x821A3914;
		  /* 821A3914h */ case    2:  		/* mr R20, R31 */
		/* 821A3914h case    2:*/		regs.R20 = regs.R31;
		/* 821A3914h case    2:*/		return 0x821A3918;
		  /* 821A3918h */ case    3:  		/* bl -11872 */
		/* 821A3918h case    3:*/		regs.LR = 0x821A391C; return 0x821A0AB8;
		/* 821A3918h case    3:*/		return 0x821A391C;
	}
	return 0x821A391C;
} // Block from 821A390Ch-821A391Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A391Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A391C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A391C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A391C);
		  /* 821A391Ch */ case    0:  		/* mr R4, R20 */
		/* 821A391Ch case    0:*/		regs.R4 = regs.R20;
		/* 821A391Ch case    0:*/		return 0x821A3920;
		  /* 821A3920h */ case    1:  		/* mr R3, R22 */
		/* 821A3920h case    1:*/		regs.R3 = regs.R22;
		/* 821A3920h case    1:*/		return 0x821A3924;
		  /* 821A3924h */ case    2:  		/* bl -178468 */
		/* 821A3924h case    2:*/		regs.LR = 0x821A3928; return 0x82178000;
		/* 821A3924h case    2:*/		return 0x821A3928;
		  /* 821A3928h */ case    3:  		/* lwz R11, <#[R3]> */
		/* 821A3928h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3928h case    3:*/		return 0x821A392C;
		  /* 821A392Ch */ case    4:  		/* mr R31, R3 */
		/* 821A392Ch case    4:*/		regs.R31 = regs.R3;
		/* 821A392Ch case    4:*/		return 0x821A3930;
		  /* 821A3930h */ case    5:  		/* rlwimi R11, R15, 25, 4, 6 */
		/* 821A3930h case    5:*/		cpu::op::rlwimi<0,25,4,6>(regs,&regs.R11,regs.R15);
		/* 821A3930h case    5:*/		return 0x821A3934;
		  /* 821A3934h */ case    6:  		/* stw R11, <#[R3]> */
		/* 821A3934h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3934h case    6:*/		return 0x821A3938;
		  /* 821A3938h */ case    7:  		/* mr R10, R11 */
		/* 821A3938h case    7:*/		regs.R10 = regs.R11;
		/* 821A3938h case    7:*/		return 0x821A393C;
		  /* 821A393Ch */ case    8:  		/* lwz R9, <#[R19]> */
		/* 821A393Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R19 + 0x00000000) );
		/* 821A393Ch case    8:*/		return 0x821A3940;
		  /* 821A3940h */ case    9:  		/* rlwinm R8, R9, 8, 28, 30 */
		/* 821A3940h case    9:*/		cpu::op::rlwinm<0,8,28,30>(regs,&regs.R8,regs.R9);
		/* 821A3940h case    9:*/		return 0x821A3944;
		  /* 821A3944h */ case   10:  		/* lwz R11, <#[R16]> */
		/* 821A3944h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821A3944h case   10:*/		return 0x821A3948;
		  /* 821A3948h */ case   11:  		/* rlwinm R7, R11, 27, 24, 31 */
		/* 821A3948h case   11:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R11);
		/* 821A3948h case   11:*/		return 0x821A394C;
		  /* 821A394Ch */ case   12:  		/* slw R11, R14, R8 */
		/* 821A394Ch case   12:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R14,regs.R8);
		/* 821A394Ch case   12:*/		return 0x821A3950;
		  /* 821A3950h */ case   13:  		/* addi R11, R11, -1 */
		/* 821A3950h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A3950h case   13:*/		return 0x821A3954;
		  /* 821A3954h */ case   14:  		/* slw R8, R7, R8 */
		/* 821A3954h case   14:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821A3954h case   14:*/		return 0x821A3958;
		  /* 821A3958h */ case   15:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821A3958h case   15:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821A3958h case   15:*/		return 0x821A395C;
		  /* 821A395Ch */ case   16:  		/* rlwinm R8, R8, 5, 0, 26 */
		/* 821A395Ch case   16:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R8,regs.R8);
		/* 821A395Ch case   16:*/		return 0x821A3960;
		  /* 821A3960h */ case   17:  		/* and R11, R11, R9 */
		/* 821A3960h case   17:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A3960h case   17:*/		return 0x821A3964;
		  /* 821A3964h */ case   18:  		/* or R11, R11, R8 */
		/* 821A3964h case   18:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821A3964h case   18:*/		return 0x821A3968;
		  /* 821A3968h */ case   19:  		/* rlwimi R11, R10, 0, 27, 18 */
		/* 821A3968h case   19:*/		cpu::op::rlwimi<0,0,27,18>(regs,&regs.R11,regs.R10);
		/* 821A3968h case   19:*/		return 0x821A396C;
		  /* 821A396Ch */ case   20:  		/* stw R11, <#[R3]> */
		/* 821A396Ch case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A396Ch case   20:*/		return 0x821A3970;
		  /* 821A3970h */ case   21:  		/* rlwinm R11, R11, 0, 0, 31 */
		/* 821A3970h case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R11);
		/* 821A3970h case   21:*/		return 0x821A3974;
		  /* 821A3974h */ case   22:  		/* lwz R10, <#[R19]> */
		/* 821A3974h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R19 + 0x00000000) );
		/* 821A3974h case   22:*/		return 0x821A3978;
		  /* 821A3978h */ case   23:  		/* rlwimi R10, R11, 0, 0, 26 */
		/* 821A3978h case   23:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R10,regs.R11);
		/* 821A3978h case   23:*/		return 0x821A397C;
		  /* 821A397Ch */ case   24:  		/* stw R10, <#[R3]> */
		/* 821A397Ch case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821A397Ch case   24:*/		return 0x821A3980;
		  /* 821A3980h */ case   25:  		/* b 1268 */
		/* 821A3980h case   25:*/		return 0x821A3E74;
		/* 821A3980h case   25:*/		return 0x821A3984;
	}
	return 0x821A3984;
} // Block from 821A391Ch-821A3984h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821A3984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3984);
		  /* 821A3984h */ case    0:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821A3984h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821A3984h case    0:*/		return 0x821A3988;
		  /* 821A3988h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821A3988h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A39A0;  }
		/* 821A3988h case    1:*/		return 0x821A398C;
		  /* 821A398Ch */ case    2:  		/* li R6, 0 */
		/* 821A398Ch case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A398Ch case    2:*/		return 0x821A3990;
		  /* 821A3990h */ case    3:  		/* mr R5, R21 */
		/* 821A3990h case    3:*/		regs.R5 = regs.R21;
		/* 821A3990h case    3:*/		return 0x821A3994;
		  /* 821A3994h */ case    4:  		/* mr R4, R20 */
		/* 821A3994h case    4:*/		regs.R4 = regs.R20;
		/* 821A3994h case    4:*/		return 0x821A3998;
		  /* 821A3998h */ case    5:  		/* mr R3, R22 */
		/* 821A3998h case    5:*/		regs.R3 = regs.R22;
		/* 821A3998h case    5:*/		return 0x821A399C;
		  /* 821A399Ch */ case    6:  		/* bl 565924 */
		/* 821A399Ch case    6:*/		regs.LR = 0x821A39A0; return 0x8222DC40;
		/* 821A399Ch case    6:*/		return 0x821A39A0;
	}
	return 0x821A39A0;
} // Block from 821A3984h-821A39A0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A39A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A39A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A39A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A39A0);
		  /* 821A39A0h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821A39A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A39A0h case    0:*/		return 0x821A39A4;
		  /* 821A39A4h */ case    1:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821A39A4h case    1:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821A39A4h case    1:*/		return 0x821A39A8;
		  /* 821A39A8h */ case    2:  		/* bc 12, CR0_EQ, 24 */
		/* 821A39A8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A39C0;  }
		/* 821A39A8h case    2:*/		return 0x821A39AC;
		  /* 821A39ACh */ case    3:  		/* li R6, 0 */
		/* 821A39ACh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A39ACh case    3:*/		return 0x821A39B0;
		  /* 821A39B0h */ case    4:  		/* mr R5, R21 */
		/* 821A39B0h case    4:*/		regs.R5 = regs.R21;
		/* 821A39B0h case    4:*/		return 0x821A39B4;
		  /* 821A39B4h */ case    5:  		/* mr R4, R17 */
		/* 821A39B4h case    5:*/		regs.R4 = regs.R17;
		/* 821A39B4h case    5:*/		return 0x821A39B8;
		  /* 821A39B8h */ case    6:  		/* mr R3, R22 */
		/* 821A39B8h case    6:*/		regs.R3 = regs.R22;
		/* 821A39B8h case    6:*/		return 0x821A39BC;
		  /* 821A39BCh */ case    7:  		/* bl 565892 */
		/* 821A39BCh case    7:*/		regs.LR = 0x821A39C0; return 0x8222DC40;
		/* 821A39BCh case    7:*/		return 0x821A39C0;
	}
	return 0x821A39C0;
} // Block from 821A39A0h-821A39C0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A39C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A39C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A39C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A39C0);
		  /* 821A39C0h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821A39C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A39C0h case    0:*/		return 0x821A39C4;
		  /* 821A39C4h */ case    1:  		/* rlwinm. R11, R11, 0, 18, 18 */
		/* 821A39C4h case    1:*/		cpu::op::rlwinm<1,0,18,18>(regs,&regs.R11,regs.R11);
		/* 821A39C4h case    1:*/		return 0x821A39C8;
		  /* 821A39C8h */ case    2:  		/* bc 12, CR0_EQ, 480 */
		/* 821A39C8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A3BA8;  }
		/* 821A39C8h case    2:*/		return 0x821A39CC;
		  /* 821A39CCh */ case    3:  		/* mr R7, R19 */
		/* 821A39CCh case    3:*/		regs.R7 = regs.R19;
		/* 821A39CCh case    3:*/		return 0x821A39D0;
		  /* 821A39D0h */ case    4:  		/* mr R6, R19 */
		/* 821A39D0h case    4:*/		regs.R6 = regs.R19;
		/* 821A39D0h case    4:*/		return 0x821A39D4;
		  /* 821A39D4h */ case    5:  		/* mr R5, R21 */
		/* 821A39D4h case    5:*/		regs.R5 = regs.R21;
		/* 821A39D4h case    5:*/		return 0x821A39D8;
		  /* 821A39D8h */ case    6:  		/* li R4, 0 */
		/* 821A39D8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A39D8h case    6:*/		return 0x821A39DC;
		  /* 821A39DCh */ case    7:  		/* mr R3, R22 */
		/* 821A39DCh case    7:*/		regs.R3 = regs.R22;
		/* 821A39DCh case    7:*/		return 0x821A39E0;
		  /* 821A39E0h */ case    8:  		/* bl -23336 */
		/* 821A39E0h case    8:*/		regs.LR = 0x821A39E4; return 0x8219DEB8;
		/* 821A39E0h case    8:*/		return 0x821A39E4;
		  /* 821A39E4h */ case    9:  		/* lwz R11, <#[R19]> */
		/* 821A39E4h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821A39E4h case    9:*/		return 0x821A39E8;
		  /* 821A39E8h */ case   10:  		/* mr R27, R3 */
		/* 821A39E8h case   10:*/		regs.R27 = regs.R3;
		/* 821A39E8h case   10:*/		return 0x821A39EC;
		  /* 821A39ECh */ case   11:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821A39ECh case   11:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821A39ECh case   11:*/		return 0x821A39F0;
		  /* 821A39F0h */ case   12:  		/* bc 12, CR0_EQ, 40 */
		/* 821A39F0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A3A18;  }
		/* 821A39F0h case   12:*/		return 0x821A39F4;
		  /* 821A39F4h */ case   13:  		/* mr R3, R31 */
		/* 821A39F4h case   13:*/		regs.R3 = regs.R31;
		/* 821A39F4h case   13:*/		return 0x821A39F8;
		  /* 821A39F8h */ case   14:  		/* bl -179936 */
		/* 821A39F8h case   14:*/		regs.LR = 0x821A39FC; return 0x82177B18;
		/* 821A39F8h case   14:*/		return 0x821A39FC;
		  /* 821A39FCh */ case   15:  		/* mr R4, R3 */
		/* 821A39FCh case   15:*/		regs.R4 = regs.R3;
		/* 821A39FCh case   15:*/		return 0x821A3A00;
		  /* 821A3A00h */ case   16:  		/* li R5, 0 */
		/* 821A3A00h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A3A00h case   16:*/		return 0x821A3A04;
		  /* 821A3A04h */ case   17:  		/* mr R3, R22 */
		/* 821A3A04h case   17:*/		regs.R3 = regs.R22;
		/* 821A3A04h case   17:*/		return 0x821A3A08;
		  /* 821A3A08h */ case   18:  		/* bl -209592 */
		/* 821A3A08h case   18:*/		regs.LR = 0x821A3A0C; return 0x82170750;
		/* 821A3A08h case   18:*/		return 0x821A3A0C;
		  /* 821A3A0Ch */ case   19:  		/* mr R4, R3 */
		/* 821A3A0Ch case   19:*/		regs.R4 = regs.R3;
		/* 821A3A0Ch case   19:*/		return 0x821A3A10;
		  /* 821A3A10h */ case   20:  		/* mr R3, R27 */
		/* 821A3A10h case   20:*/		regs.R3 = regs.R27;
		/* 821A3A10h case   20:*/		return 0x821A3A14;
		  /* 821A3A14h */ case   21:  		/* bl -178252 */
		/* 821A3A14h case   21:*/		regs.LR = 0x821A3A18; return 0x821781C8;
		/* 821A3A14h case   21:*/		return 0x821A3A18;
	}
	return 0x821A3A18;
} // Block from 821A39C0h-821A3A18h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821A3A18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3A18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3A18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3A18);
		  /* 821A3A18h */ case    0:  		/* mr R7, R16 */
		/* 821A3A18h case    0:*/		regs.R7 = regs.R16;
		/* 821A3A18h case    0:*/		return 0x821A3A1C;
		  /* 821A3A1Ch */ case    1:  		/* mr R6, R16 */
		/* 821A3A1Ch case    1:*/		regs.R6 = regs.R16;
		/* 821A3A1Ch case    1:*/		return 0x821A3A20;
		  /* 821A3A20h */ case    2:  		/* mr R5, R21 */
		/* 821A3A20h case    2:*/		regs.R5 = regs.R21;
		/* 821A3A20h case    2:*/		return 0x821A3A24;
		  /* 821A3A24h */ case    3:  		/* li R4, 0 */
		/* 821A3A24h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A3A24h case    3:*/		return 0x821A3A28;
		  /* 821A3A28h */ case    4:  		/* mr R3, R22 */
		/* 821A3A28h case    4:*/		regs.R3 = regs.R22;
		/* 821A3A28h case    4:*/		return 0x821A3A2C;
		  /* 821A3A2Ch */ case    5:  		/* bl -23412 */
		/* 821A3A2Ch case    5:*/		regs.LR = 0x821A3A30; return 0x8219DEB8;
		/* 821A3A2Ch case    5:*/		return 0x821A3A30;
		  /* 821A3A30h */ case    6:  		/* lwz R11, <#[R16]> */
		/* 821A3A30h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821A3A30h case    6:*/		return 0x821A3A34;
		  /* 821A3A34h */ case    7:  		/* mr R28, R3 */
		/* 821A3A34h case    7:*/		regs.R28 = regs.R3;
		/* 821A3A34h case    7:*/		return 0x821A3A38;
		  /* 821A3A38h */ case    8:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821A3A38h case    8:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821A3A38h case    8:*/		return 0x821A3A3C;
		  /* 821A3A3Ch */ case    9:  		/* bc 12, CR0_EQ, 40 */
		/* 821A3A3Ch case    9:*/		if ( regs.CR[0].eq ) { return 0x821A3A64;  }
		/* 821A3A3Ch case    9:*/		return 0x821A3A40;
		  /* 821A3A40h */ case   10:  		/* mr R3, R30 */
		/* 821A3A40h case   10:*/		regs.R3 = regs.R30;
		/* 821A3A40h case   10:*/		return 0x821A3A44;
		  /* 821A3A44h */ case   11:  		/* bl -180012 */
		/* 821A3A44h case   11:*/		regs.LR = 0x821A3A48; return 0x82177B18;
		/* 821A3A44h case   11:*/		return 0x821A3A48;
		  /* 821A3A48h */ case   12:  		/* mr R4, R3 */
		/* 821A3A48h case   12:*/		regs.R4 = regs.R3;
		/* 821A3A48h case   12:*/		return 0x821A3A4C;
		  /* 821A3A4Ch */ case   13:  		/* li R5, 0 */
		/* 821A3A4Ch case   13:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A3A4Ch case   13:*/		return 0x821A3A50;
		  /* 821A3A50h */ case   14:  		/* mr R3, R22 */
		/* 821A3A50h case   14:*/		regs.R3 = regs.R22;
		/* 821A3A50h case   14:*/		return 0x821A3A54;
		  /* 821A3A54h */ case   15:  		/* bl -209668 */
		/* 821A3A54h case   15:*/		regs.LR = 0x821A3A58; return 0x82170750;
		/* 821A3A54h case   15:*/		return 0x821A3A58;
		  /* 821A3A58h */ case   16:  		/* mr R4, R3 */
		/* 821A3A58h case   16:*/		regs.R4 = regs.R3;
		/* 821A3A58h case   16:*/		return 0x821A3A5C;
		  /* 821A3A5Ch */ case   17:  		/* mr R3, R28 */
		/* 821A3A5Ch case   17:*/		regs.R3 = regs.R28;
		/* 821A3A5Ch case   17:*/		return 0x821A3A60;
		  /* 821A3A60h */ case   18:  		/* bl -178328 */
		/* 821A3A60h case   18:*/		regs.LR = 0x821A3A64; return 0x821781C8;
		/* 821A3A60h case   18:*/		return 0x821A3A64;
	}
	return 0x821A3A64;
} // Block from 821A3A18h-821A3A64h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A3A64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3A64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3A64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3A64);
		  /* 821A3A64h */ case    0:  		/* li R11, 0 */
		/* 821A3A64h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A3A64h case    0:*/		return 0x821A3A68;
		  /* 821A3A68h */ case    1:  		/* mr R6, R15 */
		/* 821A3A68h case    1:*/		regs.R6 = regs.R15;
		/* 821A3A68h case    1:*/		return 0x821A3A6C;
		  /* 821A3A6Ch */ case    2:  		/* stw R11, <#[R24 + 8]> */
		/* 821A3A6Ch case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821A3A6Ch case    2:*/		return 0x821A3A70;
		  /* 821A3A70h */ case    3:  		/* li R5, 0 */
		/* 821A3A70h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A3A70h case    3:*/		return 0x821A3A74;
		  /* 821A3A74h */ case    4:  		/* mr R3, R22 */
		/* 821A3A74h case    4:*/		regs.R3 = regs.R22;
		/* 821A3A74h case    4:*/		return 0x821A3A78;
		  /* 821A3A78h */ case    5:  		/* lwz R4, <#[R21 + 28]> */
		/* 821A3A78h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R21 + 0x0000001C) );
		/* 821A3A78h case    5:*/		return 0x821A3A7C;
		  /* 821A3A7Ch */ case    6:  		/* bl 528516 */
		/* 821A3A7Ch case    6:*/		regs.LR = 0x821A3A80; return 0x82224B00;
		/* 821A3A7Ch case    6:*/		return 0x821A3A80;
		  /* 821A3A80h */ case    7:  		/* rlwinm R11, R21, 0, 0, 30 */
		/* 821A3A80h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R21);
		/* 821A3A80h case    7:*/		return 0x821A3A84;
		  /* 821A3A84h */ case    8:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A3A84h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A3A84h case    8:*/		return 0x821A3A88;
		  /* 821A3A88h */ case    9:  		/* addi R11, R11, 36 */
		/* 821A3A88h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A3A88h case    9:*/		return 0x821A3A8C;
		  /* 821A3A8Ch */ case   10:  		/* addi R10, R10, 36 */
		/* 821A3A8Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A3A8Ch case   10:*/		return 0x821A3A90;
		  /* 821A3A90h */ case   11:  		/* addi R8, R11, -36 */
		/* 821A3A90h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A3A90h case   11:*/		return 0x821A3A94;
		  /* 821A3A94h */ case   12:  		/* addi R6, R10, -36 */
		/* 821A3A94h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A3A94h case   12:*/		return 0x821A3A98;
		  /* 821A3A98h */ case   13:  		/* addi R9, R10, 4 */
		/* 821A3A98h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A3A98h case   13:*/		return 0x821A3A9C;
		  /* 821A3A9Ch */ case   14:  		/* lwz R7, <#[R11]> */
		/* 821A3A9Ch case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3A9Ch case   14:*/		return 0x821A3AA0;
		  /* 821A3AA0h */ case   15:  		/* mr R30, R3 */
		/* 821A3AA0h case   15:*/		regs.R30 = regs.R3;
		/* 821A3AA0h case   15:*/		return 0x821A3AA4;
		  /* 821A3AA4h */ case   16:  		/* li R31, 0 */
		/* 821A3AA4h case   16:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A3AA4h case   16:*/		return 0x821A3AA8;
		  /* 821A3AA8h */ case   17:  		/* cmplwi CR6, R18, 0 */
		/* 821A3AA8h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821A3AA8h case   17:*/		return 0x821A3AAC;
		  /* 821A3AACh */ case   18:  		/* stw R7, <#[R10]> */
		/* 821A3AACh case   18:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A3AACh case   18:*/		return 0x821A3AB0;
		  /* 821A3AB0h */ case   19:  		/* lwz R7, <#[R11]> */
		/* 821A3AB0h case   19:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3AB0h case   19:*/		return 0x821A3AB4;
		  /* 821A3AB4h */ case   20:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A3AB4h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A3AB4h case   20:*/		return 0x821A3AB8;
		  /* 821A3AB8h */ case   21:  		/* stw R6, <#[R7]> */
		/* 821A3AB8h case   21:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821A3AB8h case   21:*/		return 0x821A3ABC;
		  /* 821A3ABCh */ case   22:  		/* stw R8, <#[R10 + 4]> */
		/* 821A3ABCh case   22:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A3ABCh case   22:*/		return 0x821A3AC0;
		  /* 821A3AC0h */ case   23:  		/* stw R9, <#[R11]> */
		/* 821A3AC0h case   23:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A3AC0h case   23:*/		return 0x821A3AC4;
		  /* 821A3AC4h */ case   24:  		/* bc 12, CR6_EQ, 52 */
		/* 821A3AC4h case   24:*/		if ( regs.CR[6].eq ) { return 0x821A3AF8;  }
		/* 821A3AC4h case   24:*/		return 0x821A3AC8;
		  /* 821A3AC8h */ case   25:  		/* addi R29, R3, 40 */
		/* 821A3AC8h case   25:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x28);
		/* 821A3AC8h case   25:*/		return 0x821A3ACC;
		  /* 821A3ACCh */ case   26:  		/* mr R5, R31 */
		/* 821A3ACCh case   26:*/		regs.R5 = regs.R31;
		/* 821A3ACCh case   26:*/		return 0x821A3AD0;
		  /* 821A3AD0h */ case   27:  		/* mr R4, R27 */
		/* 821A3AD0h case   27:*/		regs.R4 = regs.R27;
		/* 821A3AD0h case   27:*/		return 0x821A3AD4;
		  /* 821A3AD4h */ case   28:  		/* mr R3, R22 */
		/* 821A3AD4h case   28:*/		regs.R3 = regs.R22;
		/* 821A3AD4h case   28:*/		return 0x821A3AD8;
		  /* 821A3AD8h */ case   29:  		/* bl -178632 */
		/* 821A3AD8h case   29:*/		regs.LR = 0x821A3ADC; return 0x82178110;
		/* 821A3AD8h case   29:*/		return 0x821A3ADC;
		  /* 821A3ADCh */ case   30:  		/* mr R4, R3 */
		/* 821A3ADCh case   30:*/		regs.R4 = regs.R3;
		/* 821A3ADCh case   30:*/		return 0x821A3AE0;
		  /* 821A3AE0h */ case   31:  		/* mr R3, R30 */
		/* 821A3AE0h case   31:*/		regs.R3 = regs.R30;
		/* 821A3AE0h case   31:*/		return 0x821A3AE4;
		  /* 821A3AE4h */ case   32:  		/* bl -178460 */
		/* 821A3AE4h case   32:*/		regs.LR = 0x821A3AE8; return 0x821781C8;
		/* 821A3AE4h case   32:*/		return 0x821A3AE8;
		  /* 821A3AE8h */ case   33:  		/* addi R31, R31, 1 */
		/* 821A3AE8h case   33:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A3AE8h case   33:*/		return 0x821A3AEC;
		  /* 821A3AECh */ case   34:  		/* stwu R3, <#[R29 + 4]> */
		/* 821A3AECh case   34:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A3AECh case   34:*/		return 0x821A3AF0;
		  /* 821A3AF0h */ case   35:  		/* cmplw CR6, R31, R18 */
		/* 821A3AF0h case   35:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R18);
		/* 821A3AF0h case   35:*/		return 0x821A3AF4;
		  /* 821A3AF4h */ case   36:  		/* bc 12, CR6_LT, -40 */
		/* 821A3AF4h case   36:*/		if ( regs.CR[6].lt ) { return 0x821A3ACC;  }
		/* 821A3AF4h case   36:*/		return 0x821A3AF8;
	}
	return 0x821A3AF8;
} // Block from 821A3A64h-821A3AF8h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821A3AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3AF8);
		  /* 821A3AF8h */ case    0:  		/* li R31, 0 */
		/* 821A3AF8h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A3AF8h case    0:*/		return 0x821A3AFC;
		  /* 821A3AFCh */ case    1:  		/* cmplwi CR6, R23, 0 */
		/* 821A3AFCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821A3AFCh case    1:*/		return 0x821A3B00;
		  /* 821A3B00h */ case    2:  		/* bc 12, CR6_EQ, 60 */
		/* 821A3B00h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A3B3C;  }
		/* 821A3B00h case    2:*/		return 0x821A3B04;
		  /* 821A3B04h */ case    3:  		/* addi R29, R18, 11 */
		/* 821A3B04h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R18,0xB);
		/* 821A3B04h case    3:*/		return 0x821A3B08;
		  /* 821A3B08h */ case    4:  		/* mr R5, R31 */
		/* 821A3B08h case    4:*/		regs.R5 = regs.R31;
		/* 821A3B08h case    4:*/		return 0x821A3B0C;
		  /* 821A3B0Ch */ case    5:  		/* mr R4, R28 */
		/* 821A3B0Ch case    5:*/		regs.R4 = regs.R28;
		/* 821A3B0Ch case    5:*/		return 0x821A3B10;
		  /* 821A3B10h */ case    6:  		/* mr R3, R22 */
		/* 821A3B10h case    6:*/		regs.R3 = regs.R22;
		/* 821A3B10h case    6:*/		return 0x821A3B14;
		  /* 821A3B14h */ case    7:  		/* bl -178692 */
		/* 821A3B14h case    7:*/		regs.LR = 0x821A3B18; return 0x82178110;
		/* 821A3B14h case    7:*/		return 0x821A3B18;
		  /* 821A3B18h */ case    8:  		/* mr R4, R3 */
		/* 821A3B18h case    8:*/		regs.R4 = regs.R3;
		/* 821A3B18h case    8:*/		return 0x821A3B1C;
		  /* 821A3B1Ch */ case    9:  		/* mr R3, R30 */
		/* 821A3B1Ch case    9:*/		regs.R3 = regs.R30;
		/* 821A3B1Ch case    9:*/		return 0x821A3B20;
		  /* 821A3B20h */ case   10:  		/* bl -178520 */
		/* 821A3B20h case   10:*/		regs.LR = 0x821A3B24; return 0x821781C8;
		/* 821A3B20h case   10:*/		return 0x821A3B24;
		  /* 821A3B24h */ case   11:  		/* add R11, R31, R29 */
		/* 821A3B24h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R29);
		/* 821A3B24h case   11:*/		return 0x821A3B28;
		  /* 821A3B28h */ case   12:  		/* addi R31, R31, 1 */
		/* 821A3B28h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A3B28h case   12:*/		return 0x821A3B2C;
		  /* 821A3B2Ch */ case   13:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A3B2Ch case   13:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A3B2Ch case   13:*/		return 0x821A3B30;
		  /* 821A3B30h */ case   14:  		/* cmplw CR6, R31, R23 */
		/* 821A3B30h case   14:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R23);
		/* 821A3B30h case   14:*/		return 0x821A3B34;
		  /* 821A3B34h */ case   15:  		/* stwx R3, <#[R11 + R30]> */
		/* 821A3B34h case   15:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R11 + regs.R30 + 0x00000000) );
		/* 821A3B34h case   15:*/		return 0x821A3B38;
		  /* 821A3B38h */ case   16:  		/* bc 12, CR6_LT, -48 */
		/* 821A3B38h case   16:*/		if ( regs.CR[6].lt ) { return 0x821A3B08;  }
		/* 821A3B38h case   16:*/		return 0x821A3B3C;
	}
	return 0x821A3B3C;
} // Block from 821A3AF8h-821A3B3Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A3B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3B3C);
		  /* 821A3B3Ch */ case    0:  		/* mr R4, R30 */
		/* 821A3B3Ch case    0:*/		regs.R4 = regs.R30;
		/* 821A3B3Ch case    0:*/		return 0x821A3B40;
		  /* 821A3B40h */ case    1:  		/* mr R3, R22 */
		/* 821A3B40h case    1:*/		regs.R3 = regs.R22;
		/* 821A3B40h case    1:*/		return 0x821A3B44;
		  /* 821A3B44h */ case    2:  		/* bl -179012 */
		/* 821A3B44h case    2:*/		regs.LR = 0x821A3B48; return 0x82178000;
		/* 821A3B44h case    2:*/		return 0x821A3B48;
		  /* 821A3B48h */ case    3:  		/* mr R31, R3 */
		/* 821A3B48h case    3:*/		regs.R31 = regs.R3;
		/* 821A3B48h case    3:*/		return 0x821A3B4C;
		  /* 821A3B4Ch */ case    4:  		/* mr R3, R27 */
		/* 821A3B4Ch case    4:*/		regs.R3 = regs.R27;
		/* 821A3B4Ch case    4:*/		return 0x821A3B50;
		  /* 821A3B50h */ case    5:  		/* bl -178136 */
		/* 821A3B50h case    5:*/		regs.LR = 0x821A3B54; return 0x82178378;
		/* 821A3B50h case    5:*/		return 0x821A3B54;
		  /* 821A3B54h */ case    6:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A3B54h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A3B54h case    6:*/		return 0x821A3B58;
		  /* 821A3B58h */ case    7:  		/* mr R3, R28 */
		/* 821A3B58h case    7:*/		regs.R3 = regs.R28;
		/* 821A3B58h case    7:*/		return 0x821A3B5C;
		  /* 821A3B5Ch */ case    8:  		/* oris R11, R11, 256 */
		/* 821A3B5Ch case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A3B5Ch case    8:*/		return 0x821A3B60;
		  /* 821A3B60h */ case    9:  		/* stw R11, <#[R27 + 8]> */
		/* 821A3B60h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A3B60h case    9:*/		return 0x821A3B64;
		  /* 821A3B64h */ case   10:  		/* bl -178156 */
		/* 821A3B64h case   10:*/		regs.LR = 0x821A3B68; return 0x82178378;
		/* 821A3B64h case   10:*/		return 0x821A3B68;
		  /* 821A3B68h */ case   11:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A3B68h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A3B68h case   11:*/		return 0x821A3B6C;
		  /* 821A3B6Ch */ case   12:  		/* mr R4, R30 */
		/* 821A3B6Ch case   12:*/		regs.R4 = regs.R30;
		/* 821A3B6Ch case   12:*/		return 0x821A3B70;
		  /* 821A3B70h */ case   13:  		/* oris R11, R11, 256 */
		/* 821A3B70h case   13:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A3B70h case   13:*/		return 0x821A3B74;
		  /* 821A3B74h */ case   14:  		/* mr R3, R22 */
		/* 821A3B74h case   14:*/		regs.R3 = regs.R22;
		/* 821A3B74h case   14:*/		return 0x821A3B78;
		  /* 821A3B78h */ case   15:  		/* stw R11, <#[R28 + 8]> */
		/* 821A3B78h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A3B78h case   15:*/		return 0x821A3B7C;
		  /* 821A3B7Ch */ case   16:  		/* bl 75884 */
		/* 821A3B7Ch case   16:*/		regs.LR = 0x821A3B80; return 0x821B63E8;
		/* 821A3B7Ch case   16:*/		return 0x821A3B80;
		  /* 821A3B80h */ case   17:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A3B80h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A3B80h case   17:*/		return 0x821A3B84;
		  /* 821A3B84h */ case   18:  		/* mr R4, R27 */
		/* 821A3B84h case   18:*/		regs.R4 = regs.R27;
		/* 821A3B84h case   18:*/		return 0x821A3B88;
		  /* 821A3B88h */ case   19:  		/* oris R11, R11, 256 */
		/* 821A3B88h case   19:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A3B88h case   19:*/		return 0x821A3B8C;
		  /* 821A3B8Ch */ case   20:  		/* mr R3, R22 */
		/* 821A3B8Ch case   20:*/		regs.R3 = regs.R22;
		/* 821A3B8Ch case   20:*/		return 0x821A3B90;
		  /* 821A3B90h */ case   21:  		/* stw R11, <#[R30 + 8]> */
		/* 821A3B90h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A3B90h case   21:*/		return 0x821A3B94;
		  /* 821A3B94h */ case   22:  		/* bl -12508 */
		/* 821A3B94h case   22:*/		regs.LR = 0x821A3B98; return 0x821A0AB8;
		/* 821A3B94h case   22:*/		return 0x821A3B98;
		  /* 821A3B98h */ case   23:  		/* mr R4, R28 */
		/* 821A3B98h case   23:*/		regs.R4 = regs.R28;
		/* 821A3B98h case   23:*/		return 0x821A3B9C;
		  /* 821A3B9Ch */ case   24:  		/* mr R3, R22 */
		/* 821A3B9Ch case   24:*/		regs.R3 = regs.R22;
		/* 821A3B9Ch case   24:*/		return 0x821A3BA0;
		  /* 821A3BA0h */ case   25:  		/* bl -12520 */
		/* 821A3BA0h case   25:*/		regs.LR = 0x821A3BA4; return 0x821A0AB8;
		/* 821A3BA0h case   25:*/		return 0x821A3BA4;
		  /* 821A3BA4h */ case   26:  		/* b 708 */
		/* 821A3BA4h case   26:*/		return 0x821A3E68;
		/* 821A3BA4h case   26:*/		return 0x821A3BA8;
	}
	return 0x821A3BA8;
} // Block from 821A3B3Ch-821A3BA8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A3BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3BA8);
		  /* 821A3BA8h */ case    0:  		/* lis R11, -32256 */
		/* 821A3BA8h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821A3BA8h case    0:*/		return 0x821A3BAC;
		  /* 821A3BACh */ case    1:  		/* lis R10, -32256 */
		/* 821A3BACh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821A3BACh case    1:*/		return 0x821A3BB0;
		  /* 821A3BB0h */ case    2:  		/* cmplwi CR6, R18, 2 */
		/* 821A3BB0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000002);
		/* 821A3BB0h case    2:*/		return 0x821A3BB4;
		  /* 821A3BB4h */ case    3:  		/* lfs FR1, <#[R11 + 1816]> */
		/* 821A3BB4h case    3:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000718) );
		/* 821A3BB4h case    3:*/		return 0x821A3BB8;
		  /* 821A3BB8h */ case    4:  		/* lfs FR4, <#[R10 + 1792]> */
		/* 821A3BB8h case    4:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R10 + 0x00000700) );
		/* 821A3BB8h case    4:*/		return 0x821A3BBC;
		  /* 821A3BBCh */ case    5:  		/* bc 4, CR6_GT, 12 */
		/* 821A3BBCh case    5:*/		if ( !regs.CR[6].gt ) { return 0x821A3BC8;  }
		/* 821A3BBCh case    5:*/		return 0x821A3BC0;
		  /* 821A3BC0h */ case    6:  		/* fmr FR3, FR1 */
		/* 821A3BC0h case    6:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR1);
		/* 821A3BC0h case    6:*/		return 0x821A3BC4;
		  /* 821A3BC4h */ case    7:  		/* b 8 */
		/* 821A3BC4h case    7:*/		return 0x821A3BCC;
		/* 821A3BC4h case    7:*/		return 0x821A3BC8;
	}
	return 0x821A3BC8;
} // Block from 821A3BA8h-821A3BC8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A3BC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3BC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3BC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3BC8);
		  /* 821A3BC8h */ case    0:  		/* fmr FR3, FR4 */
		/* 821A3BC8h case    0:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 821A3BC8h case    0:*/		return 0x821A3BCC;
	}
	return 0x821A3BCC;
} // Block from 821A3BC8h-821A3BCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A3BCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3BCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3BCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3BCC);
		  /* 821A3BCCh */ case    0:  		/* cmplwi CR6, R18, 1 */
		/* 821A3BCCh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000001);
		/* 821A3BCCh case    0:*/		return 0x821A3BD0;
		  /* 821A3BD0h */ case    1:  		/* bc 4, CR6_GT, 12 */
		/* 821A3BD0h case    1:*/		if ( !regs.CR[6].gt ) { return 0x821A3BDC;  }
		/* 821A3BD0h case    1:*/		return 0x821A3BD4;
		  /* 821A3BD4h */ case    2:  		/* fmr FR2, FR1 */
		/* 821A3BD4h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR1);
		/* 821A3BD4h case    2:*/		return 0x821A3BD8;
		  /* 821A3BD8h */ case    3:  		/* b 8 */
		/* 821A3BD8h case    3:*/		return 0x821A3BE0;
		/* 821A3BD8h case    3:*/		return 0x821A3BDC;
	}
	return 0x821A3BDC;
} // Block from 821A3BCCh-821A3BDCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A3BDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3BDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3BDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3BDC);
		  /* 821A3BDCh */ case    0:  		/* fmr FR2, FR4 */
		/* 821A3BDCh case    0:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 821A3BDCh case    0:*/		return 0x821A3BE0;
	}
	return 0x821A3BE0;
} // Block from 821A3BDCh-821A3BE0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A3BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3BE0);
		  /* 821A3BE0h */ case    0:  		/* mr R4, R15 */
		/* 821A3BE0h case    0:*/		regs.R4 = regs.R15;
		/* 821A3BE0h case    0:*/		return 0x821A3BE4;
		  /* 821A3BE4h */ case    1:  		/* mr R3, R22 */
		/* 821A3BE4h case    1:*/		regs.R3 = regs.R22;
		/* 821A3BE4h case    1:*/		return 0x821A3BE8;
		  /* 821A3BE8h */ case    2:  		/* bl 552816 */
		/* 821A3BE8h case    2:*/		regs.LR = 0x821A3BEC; return 0x8222AB58;
		/* 821A3BE8h case    2:*/		return 0x821A3BEC;
		  /* 821A3BECh */ case    3:  		/* mr R25, R3 */
		/* 821A3BECh case    3:*/		regs.R25 = regs.R3;
		/* 821A3BECh case    3:*/		return 0x821A3BF0;
		  /* 821A3BF0h */ case    4:  		/* mr R3, R22 */
		/* 821A3BF0h case    4:*/		regs.R3 = regs.R22;
		/* 821A3BF0h case    4:*/		return 0x821A3BF4;
		  /* 821A3BF4h */ case    5:  		/* mr R4, R25 */
		/* 821A3BF4h case    5:*/		regs.R4 = regs.R25;
		/* 821A3BF4h case    5:*/		return 0x821A3BF8;
		  /* 821A3BF8h */ case    6:  		/* bl -179192 */
		/* 821A3BF8h case    6:*/		regs.LR = 0x821A3BFC; return 0x82178000;
		/* 821A3BF8h case    6:*/		return 0x821A3BFC;
		  /* 821A3BFCh */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821A3BFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3BFCh case    7:*/		return 0x821A3C00;
		  /* 821A3C00h */ case    8:  		/* rlwinm R28, R15, 25, 4, 6 */
		/* 821A3C00h case    8:*/		cpu::op::rlwinm<0,25,4,6>(regs,&regs.R28,regs.R15);
		/* 821A3C00h case    8:*/		return 0x821A3C04;
		  /* 821A3C04h */ case    9:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 821A3C04h case    9:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 821A3C04h case    9:*/		return 0x821A3C08;
		  /* 821A3C08h */ case   10:  		/* li R4, 0 */
		/* 821A3C08h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A3C08h case   10:*/		return 0x821A3C0C;
		  /* 821A3C0Ch */ case   11:  		/* or R11, R11, R28 */
		/* 821A3C0Ch case   11:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821A3C0Ch case   11:*/		return 0x821A3C10;
		  /* 821A3C10h */ case   12:  		/* mr R27, R3 */
		/* 821A3C10h case   12:*/		regs.R27 = regs.R3;
		/* 821A3C10h case   12:*/		return 0x821A3C14;
		  /* 821A3C14h */ case   13:  		/* stw R11, <#[R3]> */
		/* 821A3C14h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3C14h case   13:*/		return 0x821A3C18;
		  /* 821A3C18h */ case   14:  		/* bl -180568 */
		/* 821A3C18h case   14:*/		regs.LR = 0x821A3C1C; return 0x82177AC0;
		/* 821A3C18h case   14:*/		return 0x821A3C1C;
		  /* 821A3C1Ch */ case   15:  		/* lwz R10, <#[R27]> */
		/* 821A3C1Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821A3C1Ch case   15:*/		return 0x821A3C20;
		  /* 821A3C20h */ case   16:  		/* li R11, 57 */
		/* 821A3C20h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x39);
		/* 821A3C20h case   16:*/		return 0x821A3C24;
		  /* 821A3C24h */ case   17:  		/* li R26, 3 */
		/* 821A3C24h case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x3);
		/* 821A3C24h case   17:*/		return 0x821A3C28;
		  /* 821A3C28h */ case   18:  		/* rlwimi R10, R11, 7, 19, 26 */
		/* 821A3C28h case   18:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R10,regs.R11);
		/* 821A3C28h case   18:*/		return 0x821A3C2C;
		  /* 821A3C2Ch */ case   19:  		/* cmplwi CR6, R18, 4 */
		/* 821A3C2Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000004);
		/* 821A3C2Ch case   19:*/		return 0x821A3C30;
		  /* 821A3C30h */ case   20:  		/* stw R10, <#[R27]> */
		/* 821A3C30h case   20:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821A3C30h case   20:*/		return 0x821A3C34;
		  /* 821A3C34h */ case   21:  		/* lwz R11, <#[R19]> */
		/* 821A3C34h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821A3C34h case   21:*/		return 0x821A3C38;
		  /* 821A3C38h */ case   22:  		/* rlwinm R31, R11, 27, 24, 31 */
		/* 821A3C38h case   22:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R31,regs.R11);
		/* 821A3C38h case   22:*/		return 0x821A3C3C;
		  /* 821A3C3Ch */ case   23:  		/* bc 4, CR6_LT, 56 */
		/* 821A3C3Ch case   23:*/		if ( !regs.CR[6].lt ) { return 0x821A3C74;  }
		/* 821A3C3Ch case   23:*/		return 0x821A3C40;
		  /* 821A3C40h */ case   24:  		/* subfic R10, R18, 4 */
		/* 821A3C40h case   24:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R18,0x4);
		/* 821A3C40h case   24:*/		return 0x821A3C44;
		  /* 821A3C44h */ case   25:  		/* addi R9, R18, -1 */
		/* 821A3C44h case   25:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R18,0xFFFFFFFF);
		/* 821A3C44h case   25:*/		return 0x821A3C48;
		  /* 821A3C48h */ case   26:  		/* rlwinm R11, R18, 1, 0, 30 */
		/* 821A3C48h case   26:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R18);
		/* 821A3C48h case   26:*/		return 0x821A3C4C;
		  /* 821A3C4Ch */ case   27:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 821A3C4Ch case   27:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 821A3C4Ch case   27:*/		return 0x821A3C50;
		  /* 821A3C50h */ case   28:  		/* mtspr CTR, R10 */
		/* 821A3C50h case   28:*/		regs.CTR = regs.R10;
		/* 821A3C50h case   28:*/		return 0x821A3C54;
		  /* 821A3C54h */ case   29:  		/* srw R10, R31, R9 */
		/* 821A3C54h case   29:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R31,regs.R9);
		/* 821A3C54h case   29:*/		return 0x821A3C58;
		  /* 821A3C58h */ case   30:  		/* slw R8, R26, R11 */
		/* 821A3C58h case   30:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R26,regs.R11);
		/* 821A3C58h case   30:*/		return 0x821A3C5C;
		  /* 821A3C5Ch */ case   31:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821A3C5Ch case   31:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821A3C5Ch case   31:*/		return 0x821A3C60;
		  /* 821A3C60h */ case   32:  		/* andc R8, R31, R8 */
		/* 821A3C60h case   32:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R31,regs.R8);
		/* 821A3C60h case   32:*/		return 0x821A3C64;
		  /* 821A3C64h */ case   33:  		/* slw R10, R10, R11 */
		/* 821A3C64h case   33:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A3C64h case   33:*/		return 0x821A3C68;
		  /* 821A3C68h */ case   34:  		/* addi R11, R11, 2 */
		/* 821A3C68h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A3C68h case   34:*/		return 0x821A3C6C;
		  /* 821A3C6Ch */ case   35:  		/* or R31, R10, R8 */
		/* 821A3C6Ch case   35:*/		cpu::op::or<0>(regs,&regs.R31,regs.R10,regs.R8);
		/* 821A3C6Ch case   35:*/		return 0x821A3C70;
		  /* 821A3C70h */ case   36:  		/* bc 16, CR0_LT, -28 */
		/* 821A3C70h case   36:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A3C54;  }
		/* 821A3C70h case   36:*/		return 0x821A3C74;
	}
	return 0x821A3C74;
} // Block from 821A3BE0h-821A3C74h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821A3C74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3C74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3C74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3C74);
		  /* 821A3C74h */ case    0:  		/* mr R4, R19 */
		/* 821A3C74h case    0:*/		regs.R4 = regs.R19;
		/* 821A3C74h case    0:*/		return 0x821A3C78;
		  /* 821A3C78h */ case    1:  		/* lwz R5, <#[R19 + 12]> */
		/* 821A3C78h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x0000000C) );
		/* 821A3C78h case    1:*/		return 0x821A3C7C;
		  /* 821A3C7Ch */ case    2:  		/* mr R3, R22 */
		/* 821A3C7Ch case    2:*/		regs.R3 = regs.R22;
		/* 821A3C7Ch case    2:*/		return 0x821A3C80;
		  /* 821A3C80h */ case    3:  		/* bl -207760 */
		/* 821A3C80h case    3:*/		regs.LR = 0x821A3C84; return 0x821710F0;
		/* 821A3C80h case    3:*/		return 0x821A3C84;
		  /* 821A3C84h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821A3C84h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3C84h case    4:*/		return 0x821A3C88;
		  /* 821A3C88h */ case    5:  		/* mr R29, R3 */
		/* 821A3C88h case    5:*/		regs.R29 = regs.R3;
		/* 821A3C88h case    5:*/		return 0x821A3C8C;
		  /* 821A3C8Ch */ case    6:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 821A3C8Ch case    6:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 821A3C8Ch case    6:*/		return 0x821A3C90;
		  /* 821A3C90h */ case    7:  		/* li R30, 0 */
		/* 821A3C90h case    7:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A3C90h case    7:*/		return 0x821A3C94;
		  /* 821A3C94h */ case    8:  		/* or R11, R11, R28 */
		/* 821A3C94h case    8:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821A3C94h case    8:*/		return 0x821A3C98;
		  /* 821A3C98h */ case    9:  		/* cmplwi CR6, R23, 0 */
		/* 821A3C98h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R23,0x00000000);
		/* 821A3C98h case    9:*/		return 0x821A3C9C;
		  /* 821A3C9Ch */ case   10:  		/* rlwimi R11, R31, 5, 19, 26 */
		/* 821A3C9Ch case   10:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R31);
		/* 821A3C9Ch case   10:*/		return 0x821A3CA0;
		  /* 821A3CA0h */ case   11:  		/* stw R11, <#[R3]> */
		/* 821A3CA0h case   11:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3CA0h case   11:*/		return 0x821A3CA4;
		  /* 821A3CA4h */ case   12:  		/* lwz R11, <#[R16]> */
		/* 821A3CA4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821A3CA4h case   12:*/		return 0x821A3CA8;
		  /* 821A3CA8h */ case   13:  		/* rlwinm R9, R11, 27, 24, 31 */
		/* 821A3CA8h case   13:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R11);
		/* 821A3CA8h case   13:*/		return 0x821A3CAC;
		  /* 821A3CACh */ case   14:  		/* bc 12, CR6_EQ, 52 */
		/* 821A3CACh case   14:*/		if ( regs.CR[6].eq ) { return 0x821A3CE0;  }
		/* 821A3CACh case   14:*/		return 0x821A3CB0;
		  /* 821A3CB0h */ case   15:  		/* li R10, 0 */
		/* 821A3CB0h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A3CB0h case   15:*/		return 0x821A3CB4;
		  /* 821A3CB4h */ case   16:  		/* mtspr CTR, R23 */
		/* 821A3CB4h case   16:*/		regs.CTR = regs.R23;
		/* 821A3CB4h case   16:*/		return 0x821A3CB8;
		  /* 821A3CB8h */ case   17:  		/* rlwinm R11, R18, 1, 0, 30 */
		/* 821A3CB8h case   17:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R18);
		/* 821A3CB8h case   17:*/		return 0x821A3CBC;
		  /* 821A3CBCh */ case   18:  		/* srw R8, R9, R10 */
		/* 821A3CBCh case   18:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R9,regs.R10);
		/* 821A3CBCh case   18:*/		return 0x821A3CC0;
		  /* 821A3CC0h */ case   19:  		/* slw R7, R26, R11 */
		/* 821A3CC0h case   19:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R26,regs.R11);
		/* 821A3CC0h case   19:*/		return 0x821A3CC4;
		  /* 821A3CC4h */ case   20:  		/* rlwinm R8, R8, 0, 30, 31 */
		/* 821A3CC4h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R8);
		/* 821A3CC4h case   20:*/		return 0x821A3CC8;
		  /* 821A3CC8h */ case   21:  		/* andc R7, R30, R7 */
		/* 821A3CC8h case   21:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R30,regs.R7);
		/* 821A3CC8h case   21:*/		return 0x821A3CCC;
		  /* 821A3CCCh */ case   22:  		/* slw R8, R8, R11 */
		/* 821A3CCCh case   22:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 821A3CCCh case   22:*/		return 0x821A3CD0;
		  /* 821A3CD0h */ case   23:  		/* addi R11, R11, 2 */
		/* 821A3CD0h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A3CD0h case   23:*/		return 0x821A3CD4;
		  /* 821A3CD4h */ case   24:  		/* or R30, R8, R7 */
		/* 821A3CD4h case   24:*/		cpu::op::or<0>(regs,&regs.R30,regs.R8,regs.R7);
		/* 821A3CD4h case   24:*/		return 0x821A3CD8;
		  /* 821A3CD8h */ case   25:  		/* addi R10, R10, 2 */
		/* 821A3CD8h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821A3CD8h case   25:*/		return 0x821A3CDC;
		  /* 821A3CDCh */ case   26:  		/* bc 16, CR0_LT, -32 */
		/* 821A3CDCh case   26:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A3CBC;  }
		/* 821A3CDCh case   26:*/		return 0x821A3CE0;
	}
	return 0x821A3CE0;
} // Block from 821A3C74h-821A3CE0h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A3CE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3CE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3CE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3CE0);
		  /* 821A3CE0h */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 821A3CE0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821A3CE0h case    0:*/		return 0x821A3CE4;
		  /* 821A3CE4h */ case    1:  		/* bc 12, CR6_EQ, 40 */
		/* 821A3CE4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A3D0C;  }
		/* 821A3CE4h case    1:*/		return 0x821A3CE8;
		  /* 821A3CE8h */ case    2:  		/* rlwinm R10, R9, 0, 30, 31 */
		/* 821A3CE8h case    2:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R9);
		/* 821A3CE8h case    2:*/		return 0x821A3CEC;
		  /* 821A3CECh */ case    3:  		/* mtspr CTR, R18 */
		/* 821A3CECh case    3:*/		regs.CTR = regs.R18;
		/* 821A3CECh case    3:*/		return 0x821A3CF0;
		  /* 821A3CF0h */ case    4:  		/* li R11, 0 */
		/* 821A3CF0h case    4:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A3CF0h case    4:*/		return 0x821A3CF4;
		  /* 821A3CF4h */ case    5:  		/* slw R8, R26, R11 */
		/* 821A3CF4h case    5:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R26,regs.R11);
		/* 821A3CF4h case    5:*/		return 0x821A3CF8;
		  /* 821A3CF8h */ case    6:  		/* slw R7, R10, R11 */
		/* 821A3CF8h case    6:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R10,regs.R11);
		/* 821A3CF8h case    6:*/		return 0x821A3CFC;
		  /* 821A3CFCh */ case    7:  		/* andc R8, R30, R8 */
		/* 821A3CFCh case    7:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R30,regs.R8);
		/* 821A3CFCh case    7:*/		return 0x821A3D00;
		  /* 821A3D00h */ case    8:  		/* addi R11, R11, 2 */
		/* 821A3D00h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A3D00h case    8:*/		return 0x821A3D04;
		  /* 821A3D04h */ case    9:  		/* or R30, R8, R7 */
		/* 821A3D04h case    9:*/		cpu::op::or<0>(regs,&regs.R30,regs.R8,regs.R7);
		/* 821A3D04h case    9:*/		return 0x821A3D08;
		  /* 821A3D08h */ case   10:  		/* bc 16, CR0_LT, -20 */
		/* 821A3D08h case   10:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A3CF4;  }
		/* 821A3D08h case   10:*/		return 0x821A3D0C;
	}
	return 0x821A3D0C;
} // Block from 821A3CE0h-821A3D0Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A3D0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3D0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3D0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3D0C);
		  /* 821A3D0Ch */ case    0:  		/* cmplwi CR6, R15, 4 */
		/* 821A3D0Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000004);
		/* 821A3D0Ch case    0:*/		return 0x821A3D10;
		  /* 821A3D10h */ case    1:  		/* bc 4, CR6_LT, 56 */
		/* 821A3D10h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821A3D48;  }
		/* 821A3D10h case    1:*/		return 0x821A3D14;
		  /* 821A3D14h */ case    2:  		/* addi R11, R23, -1 */
		/* 821A3D14h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R23,0xFFFFFFFF);
		/* 821A3D14h case    2:*/		return 0x821A3D18;
		  /* 821A3D18h */ case    3:  		/* subfic R10, R15, 4 */
		/* 821A3D18h case    3:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R15,0x4);
		/* 821A3D18h case    3:*/		return 0x821A3D1C;
		  /* 821A3D1Ch */ case    4:  		/* rlwinm R8, R11, 1, 0, 30 */
		/* 821A3D1Ch case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R8,regs.R11);
		/* 821A3D1Ch case    4:*/		return 0x821A3D20;
		  /* 821A3D20h */ case    5:  		/* rlwinm R11, R15, 1, 0, 30 */
		/* 821A3D20h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R15);
		/* 821A3D20h case    5:*/		return 0x821A3D24;
		  /* 821A3D24h */ case    6:  		/* srw R9, R9, R8 */
		/* 821A3D24h case    6:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821A3D24h case    6:*/		return 0x821A3D28;
		  /* 821A3D28h */ case    7:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821A3D28h case    7:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821A3D28h case    7:*/		return 0x821A3D2C;
		  /* 821A3D2Ch */ case    8:  		/* mtspr CTR, R10 */
		/* 821A3D2Ch case    8:*/		regs.CTR = regs.R10;
		/* 821A3D2Ch case    8:*/		return 0x821A3D30;
		  /* 821A3D30h */ case    9:  		/* slw R10, R26, R11 */
		/* 821A3D30h case    9:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R26,regs.R11);
		/* 821A3D30h case    9:*/		return 0x821A3D34;
		  /* 821A3D34h */ case   10:  		/* slw R8, R9, R11 */
		/* 821A3D34h case   10:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R9,regs.R11);
		/* 821A3D34h case   10:*/		return 0x821A3D38;
		  /* 821A3D38h */ case   11:  		/* andc R10, R30, R10 */
		/* 821A3D38h case   11:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R30,regs.R10);
		/* 821A3D38h case   11:*/		return 0x821A3D3C;
		  /* 821A3D3Ch */ case   12:  		/* addi R11, R11, 2 */
		/* 821A3D3Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A3D3Ch case   12:*/		return 0x821A3D40;
		  /* 821A3D40h */ case   13:  		/* or R30, R10, R8 */
		/* 821A3D40h case   13:*/		cpu::op::or<0>(regs,&regs.R30,regs.R10,regs.R8);
		/* 821A3D40h case   13:*/		return 0x821A3D44;
		  /* 821A3D44h */ case   14:  		/* bc 16, CR0_LT, -20 */
		/* 821A3D44h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A3D30;  }
		/* 821A3D44h case   14:*/		return 0x821A3D48;
	}
	return 0x821A3D48;
} // Block from 821A3D0Ch-821A3D48h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A3D48h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3D48);
		  /* 821A3D48h */ case    0:  		/* mr R4, R16 */
		/* 821A3D48h case    0:*/		regs.R4 = regs.R16;
		/* 821A3D48h case    0:*/		return 0x821A3D4C;
		  /* 821A3D4Ch */ case    1:  		/* lwz R5, <#[R16 + 12]> */
		/* 821A3D4Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R16 + 0x0000000C) );
		/* 821A3D4Ch case    1:*/		return 0x821A3D50;
		  /* 821A3D50h */ case    2:  		/* mr R3, R22 */
		/* 821A3D50h case    2:*/		regs.R3 = regs.R22;
		/* 821A3D50h case    2:*/		return 0x821A3D54;
		  /* 821A3D54h */ case    3:  		/* bl -207972 */
		/* 821A3D54h case    3:*/		regs.LR = 0x821A3D58; return 0x821710F0;
		/* 821A3D54h case    3:*/		return 0x821A3D58;
		  /* 821A3D58h */ case    4:  		/* lwz R11, <#[R3]> */
		/* 821A3D58h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3D58h case    4:*/		return 0x821A3D5C;
		  /* 821A3D5Ch */ case    5:  		/* mr R8, R3 */
		/* 821A3D5Ch case    5:*/		regs.R8 = regs.R3;
		/* 821A3D5Ch case    5:*/		return 0x821A3D60;
		  /* 821A3D60h */ case    6:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 821A3D60h case    6:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 821A3D60h case    6:*/		return 0x821A3D64;
		  /* 821A3D64h */ case    7:  		/* or R11, R11, R28 */
		/* 821A3D64h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R28);
		/* 821A3D64h case    7:*/		return 0x821A3D68;
		  /* 821A3D68h */ case    8:  		/* rlwimi R11, R30, 5, 19, 26 */
		/* 821A3D68h case    8:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R30);
		/* 821A3D68h case    8:*/		return 0x821A3D6C;
		  /* 821A3D6Ch */ case    9:  		/* stw R11, <#[R3]> */
		/* 821A3D6Ch case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3D6Ch case    9:*/		return 0x821A3D70;
		  /* 821A3D70h */ case   10:  		/* lwz R10, <#[R29 + 12]> */
		/* 821A3D70h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A3D70h case   10:*/		return 0x821A3D74;
		  /* 821A3D74h */ case   11:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A3D74h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A3D74h case   11:*/		return 0x821A3D78;
		  /* 821A3D78h */ case   12:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821A3D78h case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821A3D78h case   12:*/		return 0x821A3D7C;
		  /* 821A3D7Ch */ case   13:  		/* cmplwi CR6, R10, 125 */
		/* 821A3D7Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007D);
		/* 821A3D7Ch case   13:*/		return 0x821A3D80;
		  /* 821A3D80h */ case   14:  		/* bc 12, CR6_EQ, 16 */
		/* 821A3D80h case   14:*/		if ( regs.CR[6].eq ) { return 0x821A3D90;  }
		/* 821A3D80h case   14:*/		return 0x821A3D84;
		  /* 821A3D84h */ case   15:  		/* cmplwi CR6, R10, 124 */
		/* 821A3D84h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007C);
		/* 821A3D84h case   15:*/		return 0x821A3D88;
		  /* 821A3D88h */ case   16:  		/* li R10, 0 */
		/* 821A3D88h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A3D88h case   16:*/		return 0x821A3D8C;
		  /* 821A3D8Ch */ case   17:  		/* bc 4, CR6_EQ, 8 */
		/* 821A3D8Ch case   17:*/		if ( !regs.CR[6].eq ) { return 0x821A3D94;  }
		/* 821A3D8Ch case   17:*/		return 0x821A3D90;
	}
	return 0x821A3D90;
} // Block from 821A3D48h-821A3D90h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A3D90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3D90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3D90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3D90);
		  /* 821A3D90h */ case    0:  		/* mr R10, R14 */
		/* 821A3D90h case    0:*/		regs.R10 = regs.R14;
		/* 821A3D90h case    0:*/		return 0x821A3D94;
	}
	return 0x821A3D94;
} // Block from 821A3D90h-821A3D94h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A3D94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3D94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3D94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3D94);
		  /* 821A3D94h */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821A3D94h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821A3D94h case    0:*/		return 0x821A3D98;
		  /* 821A3D98h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821A3D98h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A3DA8;  }
		/* 821A3D98h case    1:*/		return 0x821A3D9C;
		  /* 821A3D9Ch */ case    2:  		/* lwz R10, <#[R29]> */
		/* 821A3D9Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000000) );
		/* 821A3D9Ch case    2:*/		return 0x821A3DA0;
		  /* 821A3DA0h */ case    3:  		/* rlwinm. R10, R10, 31, 31, 31 */
		/* 821A3DA0h case    3:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R10,regs.R10);
		/* 821A3DA0h case    3:*/		return 0x821A3DA4;
		  /* 821A3DA4h */ case    4:  		/* bc 4, CR0_EQ, 56 */
		/* 821A3DA4h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A3DDC;  }
		/* 821A3DA4h case    4:*/		return 0x821A3DA8;
	}
	return 0x821A3DA8;
} // Block from 821A3D94h-821A3DA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A3DA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3DA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3DA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3DA8);
		  /* 821A3DA8h */ case    0:  		/* lwz R10, <#[R8 + 12]> */
		/* 821A3DA8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x0000000C) );
		/* 821A3DA8h case    0:*/		return 0x821A3DAC;
		  /* 821A3DACh */ case    1:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A3DACh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A3DACh case    1:*/		return 0x821A3DB0;
		  /* 821A3DB0h */ case    2:  		/* rlwinm R10, R10, 25, 25, 31 */
		/* 821A3DB0h case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R10);
		/* 821A3DB0h case    2:*/		return 0x821A3DB4;
		  /* 821A3DB4h */ case    3:  		/* cmplwi CR6, R10, 125 */
		/* 821A3DB4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007D);
		/* 821A3DB4h case    3:*/		return 0x821A3DB8;
		  /* 821A3DB8h */ case    4:  		/* bc 12, CR6_EQ, 16 */
		/* 821A3DB8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A3DC8;  }
		/* 821A3DB8h case    4:*/		return 0x821A3DBC;
		  /* 821A3DBCh */ case    5:  		/* cmplwi CR6, R10, 124 */
		/* 821A3DBCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000007C);
		/* 821A3DBCh case    5:*/		return 0x821A3DC0;
		  /* 821A3DC0h */ case    6:  		/* li R10, 0 */
		/* 821A3DC0h case    6:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A3DC0h case    6:*/		return 0x821A3DC4;
		  /* 821A3DC4h */ case    7:  		/* bc 4, CR6_EQ, 8 */
		/* 821A3DC4h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821A3DCC;  }
		/* 821A3DC4h case    7:*/		return 0x821A3DC8;
	}
	return 0x821A3DC8;
} // Block from 821A3DA8h-821A3DC8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A3DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3DC8);
		  /* 821A3DC8h */ case    0:  		/* mr R10, R14 */
		/* 821A3DC8h case    0:*/		regs.R10 = regs.R14;
		/* 821A3DC8h case    0:*/		return 0x821A3DCC;
	}
	return 0x821A3DCC;
} // Block from 821A3DC8h-821A3DCCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A3DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3DCC);
		  /* 821A3DCCh */ case    0:  		/* rlwinm. R10, R10, 0, 24, 31 */
		/* 821A3DCCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R10,regs.R10);
		/* 821A3DCCh case    0:*/		return 0x821A3DD0;
		  /* 821A3DD0h */ case    1:  		/* bc 12, CR0_EQ, 24 */
		/* 821A3DD0h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A3DE8;  }
		/* 821A3DD0h case    1:*/		return 0x821A3DD4;
		  /* 821A3DD4h */ case    2:  		/* rlwinm. R11, R11, 31, 31, 31 */
		/* 821A3DD4h case    2:*/		cpu::op::rlwinm<1,31,31,31>(regs,&regs.R11,regs.R11);
		/* 821A3DD4h case    2:*/		return 0x821A3DD8;
		  /* 821A3DD8h */ case    3:  		/* bc 12, CR0_EQ, 16 */
		/* 821A3DD8h case    3:*/		if ( regs.CR[0].eq ) { return 0x821A3DE8;  }
		/* 821A3DD8h case    3:*/		return 0x821A3DDC;
	}
	return 0x821A3DDC;
} // Block from 821A3DCCh-821A3DDCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A3DDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3DDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3DDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3DDC);
		  /* 821A3DDCh */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821A3DDCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A3DDCh case    0:*/		return 0x821A3DE0;
		  /* 821A3DE0h */ case    1:  		/* rlwimi R11, R14, 1, 27, 31 */
		/* 821A3DE0h case    1:*/		cpu::op::rlwimi<0,1,27,31>(regs,&regs.R11,regs.R14);
		/* 821A3DE0h case    1:*/		return 0x821A3DE4;
		  /* 821A3DE4h */ case    2:  		/* stw R11, <#[R27]> */
		/* 821A3DE4h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A3DE4h case    2:*/		return 0x821A3DE8;
	}
	return 0x821A3DE8;
} // Block from 821A3DDCh-821A3DE8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A3DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3DE8);
		  /* 821A3DE8h */ case    0:  		/* mr R7, R29 */
		/* 821A3DE8h case    0:*/		regs.R7 = regs.R29;
		/* 821A3DE8h case    0:*/		return 0x821A3DEC;
		  /* 821A3DECh */ case    1:  		/* mr R6, R27 */
		/* 821A3DECh case    1:*/		regs.R6 = regs.R27;
		/* 821A3DECh case    1:*/		return 0x821A3DF0;
		  /* 821A3DF0h */ case    2:  		/* mr R5, R21 */
		/* 821A3DF0h case    2:*/		regs.R5 = regs.R21;
		/* 821A3DF0h case    2:*/		return 0x821A3DF4;
		  /* 821A3DF4h */ case    3:  		/* li R4, 0 */
		/* 821A3DF4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A3DF4h case    3:*/		return 0x821A3DF8;
		  /* 821A3DF8h */ case    4:  		/* mr R3, R22 */
		/* 821A3DF8h case    4:*/		regs.R3 = regs.R22;
		/* 821A3DF8h case    4:*/		return 0x821A3DFC;
		  /* 821A3DFCh */ case    5:  		/* bl -23556 */
		/* 821A3DFCh case    5:*/		regs.LR = 0x821A3E00; return 0x8219E1F8;
		/* 821A3DFCh case    5:*/		return 0x821A3E00;
		  /* 821A3E00h */ case    6:  		/* lwz R4, <#[R24 + 8]> */
		/* 821A3E00h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000008) );
		/* 821A3E00h case    6:*/		return 0x821A3E04;
		  /* 821A3E04h */ case    7:  		/* mr R30, R3 */
		/* 821A3E04h case    7:*/		regs.R30 = regs.R3;
		/* 821A3E04h case    7:*/		return 0x821A3E08;
		  /* 821A3E08h */ case    8:  		/* cmplwi CR6, R4, 0 */
		/* 821A3E08h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A3E08h case    8:*/		return 0x821A3E0C;
		  /* 821A3E0Ch */ case    9:  		/* bc 12, CR6_EQ, 36 */
		/* 821A3E0Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821A3E30;  }
		/* 821A3E0Ch case    9:*/		return 0x821A3E10;
		  /* 821A3E10h */ case   10:  		/* li R5, 0 */
		/* 821A3E10h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A3E10h case   10:*/		return 0x821A3E14;
		  /* 821A3E14h */ case   11:  		/* mr R3, R22 */
		/* 821A3E14h case   11:*/		regs.R3 = regs.R22;
		/* 821A3E14h case   11:*/		return 0x821A3E18;
		  /* 821A3E18h */ case   12:  		/* bl -210632 */
		/* 821A3E18h case   12:*/		regs.LR = 0x821A3E1C; return 0x82170750;
		/* 821A3E18h case   12:*/		return 0x821A3E1C;
		  /* 821A3E1Ch */ case   13:  		/* mr R4, R3 */
		/* 821A3E1Ch case   13:*/		regs.R4 = regs.R3;
		/* 821A3E1Ch case   13:*/		return 0x821A3E20;
		  /* 821A3E20h */ case   14:  		/* mr R3, R30 */
		/* 821A3E20h case   14:*/		regs.R3 = regs.R30;
		/* 821A3E20h case   14:*/		return 0x821A3E24;
		  /* 821A3E24h */ case   15:  		/* bl -179292 */
		/* 821A3E24h case   15:*/		regs.LR = 0x821A3E28; return 0x821781C8;
		/* 821A3E24h case   15:*/		return 0x821A3E28;
		  /* 821A3E28h */ case   16:  		/* li R11, 0 */
		/* 821A3E28h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A3E28h case   16:*/		return 0x821A3E2C;
		  /* 821A3E2Ch */ case   17:  		/* stw R11, <#[R24 + 8]> */
		/* 821A3E2Ch case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821A3E2Ch case   17:*/		return 0x821A3E30;
	}
	return 0x821A3E30;
} // Block from 821A3DE8h-821A3E30h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A3E30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3E30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3E30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3E30);
		  /* 821A3E30h */ case    0:  		/* mr R4, R30 */
		/* 821A3E30h case    0:*/		regs.R4 = regs.R30;
		/* 821A3E30h case    0:*/		return 0x821A3E34;
		  /* 821A3E34h */ case    1:  		/* mr R3, R22 */
		/* 821A3E34h case    1:*/		regs.R3 = regs.R22;
		/* 821A3E34h case    1:*/		return 0x821A3E38;
		  /* 821A3E38h */ case    2:  		/* bl -179768 */
		/* 821A3E38h case    2:*/		regs.LR = 0x821A3E3C; return 0x82178000;
		/* 821A3E38h case    2:*/		return 0x821A3E3C;
		  /* 821A3E3Ch */ case    3:  		/* mr R31, R3 */
		/* 821A3E3Ch case    3:*/		regs.R31 = regs.R3;
		/* 821A3E3Ch case    3:*/		return 0x821A3E40;
		  /* 821A3E40h */ case    4:  		/* mr R3, R25 */
		/* 821A3E40h case    4:*/		regs.R3 = regs.R25;
		/* 821A3E40h case    4:*/		return 0x821A3E44;
		  /* 821A3E44h */ case    5:  		/* bl -55956 */
		/* 821A3E44h case    5:*/		regs.LR = 0x821A3E48; return 0x821963B0;
		/* 821A3E44h case    5:*/		return 0x821A3E48;
		  /* 821A3E48h */ case    6:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A3E48h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A3E48h case    6:*/		return 0x821A3E4C;
		  /* 821A3E4Ch */ case    7:  		/* mr R3, R30 */
		/* 821A3E4Ch case    7:*/		regs.R3 = regs.R30;
		/* 821A3E4Ch case    7:*/		return 0x821A3E50;
		  /* 821A3E50h */ case    8:  		/* oris R11, R11, 256 */
		/* 821A3E50h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A3E50h case    8:*/		return 0x821A3E54;
		  /* 821A3E54h */ case    9:  		/* stw R11, <#[R25 + 8]> */
		/* 821A3E54h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A3E54h case    9:*/		return 0x821A3E58;
		  /* 821A3E58h */ case   10:  		/* bl -178912 */
		/* 821A3E58h case   10:*/		regs.LR = 0x821A3E5C; return 0x82178378;
		/* 821A3E58h case   10:*/		return 0x821A3E5C;
		  /* 821A3E5Ch */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A3E5Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A3E5Ch case   11:*/		return 0x821A3E60;
		  /* 821A3E60h */ case   12:  		/* oris R11, R11, 256 */
		/* 821A3E60h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A3E60h case   12:*/		return 0x821A3E64;
		  /* 821A3E64h */ case   13:  		/* stw R11, <#[R30 + 8]> */
		/* 821A3E64h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A3E64h case   13:*/		return 0x821A3E68;
	}
	return 0x821A3E68;
} // Block from 821A3E30h-821A3E68h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A3E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3E68);
		  /* 821A3E68h */ case    0:  		/* mr R4, R30 */
		/* 821A3E68h case    0:*/		regs.R4 = regs.R30;
		/* 821A3E68h case    0:*/		return 0x821A3E6C;
		  /* 821A3E6Ch */ case    1:  		/* mr R3, R22 */
		/* 821A3E6Ch case    1:*/		regs.R3 = regs.R22;
		/* 821A3E6Ch case    1:*/		return 0x821A3E70;
		  /* 821A3E70h */ case    2:  		/* bl -13240 */
		/* 821A3E70h case    2:*/		regs.LR = 0x821A3E74; return 0x821A0AB8;
		/* 821A3E70h case    2:*/		return 0x821A3E74;
	}
	return 0x821A3E74;
} // Block from 821A3E68h-821A3E74h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A3E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3E74);
		  /* 821A3E74h */ case    0:  		/* mr R3, R31 */
		/* 821A3E74h case    0:*/		regs.R3 = regs.R31;
		/* 821A3E74h case    0:*/		return 0x821A3E78;
		  /* 821A3E78h */ case    1:  		/* addi R1, R1, 272 */
		/* 821A3E78h case    1:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 821A3E78h case    1:*/		return 0x821A3E7C;
		  /* 821A3E7Ch */ case    2:  		/* b -1125388 */
		/* 821A3E7Ch case    2:*/		return 0x82091270;
		/* 821A3E7Ch case    2:*/		return 0x821A3E80;
	}
	return 0x821A3E80;
} // Block from 821A3E74h-821A3E80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A3E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3E80);
		  /* 821A3E80h */ case    0:  		/* mfspr R12, LR */
		/* 821A3E80h case    0:*/		regs.R12 = regs.LR;
		/* 821A3E80h case    0:*/		return 0x821A3E84;
		  /* 821A3E84h */ case    1:  		/* bl -1125448 */
		/* 821A3E84h case    1:*/		regs.LR = 0x821A3E88; return 0x8209123C;
		/* 821A3E84h case    1:*/		return 0x821A3E88;
		  /* 821A3E88h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821A3E88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821A3E88h case    2:*/		return 0x821A3E8C;
		  /* 821A3E8Ch */ case    3:  		/* mr R26, R3 */
		/* 821A3E8Ch case    3:*/		regs.R26 = regs.R3;
		/* 821A3E8Ch case    3:*/		return 0x821A3E90;
		  /* 821A3E90h */ case    4:  		/* mr R23, R4 */
		/* 821A3E90h case    4:*/		regs.R23 = regs.R4;
		/* 821A3E90h case    4:*/		return 0x821A3E94;
		  /* 821A3E94h */ case    5:  		/* mr R22, R5 */
		/* 821A3E94h case    5:*/		regs.R22 = regs.R5;
		/* 821A3E94h case    5:*/		return 0x821A3E98;
		  /* 821A3E98h */ case    6:  		/* mr R21, R6 */
		/* 821A3E98h case    6:*/		regs.R21 = regs.R6;
		/* 821A3E98h case    6:*/		return 0x821A3E9C;
		  /* 821A3E9Ch */ case    7:  		/* cmplwi CR6, R6, 0 */
		/* 821A3E9Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821A3E9Ch case    7:*/		return 0x821A3EA0;
		  /* 821A3EA0h */ case    8:  		/* bc 4, CR6_EQ, 8 */
		/* 821A3EA0h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821A3EA8;  }
		/* 821A3EA0h case    8:*/		return 0x821A3EA4;
		  /* 821A3EA4h */ case    9:  		/* lwz R21, <#[R3 + 540]> */
		/* 821A3EA4h case    9:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R3 + 0x0000021C) );
		/* 821A3EA4h case    9:*/		return 0x821A3EA8;
	}
	return 0x821A3EA8;
} // Block from 821A3E80h-821A3EA8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A3EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3EA8);
		  /* 821A3EA8h */ case    0:  		/* lwz R4, <#[R26 + 652]> */
		/* 821A3EA8h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000028C) );
		/* 821A3EA8h case    0:*/		return 0x821A3EAC;
		  /* 821A3EACh */ case    1:  		/* li R31, 0 */
		/* 821A3EACh case    1:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A3EACh case    1:*/		return 0x821A3EB0;
		  /* 821A3EB0h */ case    2:  		/* lwz R11, <#[R4 + 4]> */
		/* 821A3EB0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821A3EB0h case    2:*/		return 0x821A3EB4;
		  /* 821A3EB4h */ case    3:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A3EB4h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A3EB4h case    3:*/		return 0x821A3EB8;
		  /* 821A3EB8h */ case    4:  		/* bc 4, CR0_EQ, 44 */
		/* 821A3EB8h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A3EE4;  }
		/* 821A3EB8h case    4:*/		return 0x821A3EBC;
		  /* 821A3EBCh */ case    5:  		/* cmplwi CR0, R11, 0 */
		/* 821A3EBCh case    5:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A3EBCh case    5:*/		return 0x821A3EC0;
		  /* 821A3EC0h */ case    6:  		/* bc 12, CR0_EQ, 36 */
		/* 821A3EC0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821A3EE4;  }
		/* 821A3EC0h case    6:*/		return 0x821A3EC4;
		  /* 821A3EC4h */ case    7:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821A3EC4h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821A3EC4h case    7:*/		return 0x821A3EC8;
		  /* 821A3EC8h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A3EC8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A3EC8h case    8:*/		return 0x821A3ECC;
		  /* 821A3ECCh */ case    9:  		/* add R31, R11, R31 */
		/* 821A3ECCh case    9:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821A3ECCh case    9:*/		return 0x821A3ED0;
		  /* 821A3ED0h */ case   10:  		/* lwz R11, <#[R10 + 4]> */
		/* 821A3ED0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821A3ED0h case   10:*/		return 0x821A3ED4;
		  /* 821A3ED4h */ case   11:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A3ED4h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A3ED4h case   11:*/		return 0x821A3ED8;
		  /* 821A3ED8h */ case   12:  		/* bc 4, CR0_EQ, 12 */
		/* 821A3ED8h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A3EE4;  }
		/* 821A3ED8h case   12:*/		return 0x821A3EDC;
		  /* 821A3EDCh */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821A3EDCh case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A3EDCh case   13:*/		return 0x821A3EE0;
		  /* 821A3EE0h */ case   14:  		/* bc 4, CR6_EQ, -28 */
		/* 821A3EE0h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821A3EC4;  }
		/* 821A3EE0h case   14:*/		return 0x821A3EE4;
	}
	return 0x821A3EE4;
} // Block from 821A3EA8h-821A3EE4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A3EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3EE4);
		  /* 821A3EE4h */ case    0:  		/* cmplw CR6, R31, R23 */
		/* 821A3EE4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R23);
		/* 821A3EE4h case    0:*/		return 0x821A3EE8;
		  /* 821A3EE8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821A3EE8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A3EF4;  }
		/* 821A3EE8h case    1:*/		return 0x821A3EEC;
		  /* 821A3EECh */ case    2:  		/* mr R3, R21 */
		/* 821A3EECh case    2:*/		regs.R3 = regs.R21;
		/* 821A3EECh case    2:*/		return 0x821A3EF0;
		  /* 821A3EF0h */ case    3:  		/* b 720 */
		/* 821A3EF0h case    3:*/		return 0x821A41C0;
		/* 821A3EF0h case    3:*/		return 0x821A3EF4;
	}
	return 0x821A3EF4;
} // Block from 821A3EE4h-821A3EF4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A3EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3EF4);
		  /* 821A3EF4h */ case    0:  		/* addi R3, R1, 80 */
		/* 821A3EF4h case    0:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821A3EF4h case    0:*/		return 0x821A3EF8;
		  /* 821A3EF8h */ case    1:  		/* bl -16584 */
		/* 821A3EF8h case    1:*/		regs.LR = 0x821A3EFC; return 0x8219FE30;
		/* 821A3EF8h case    1:*/		return 0x821A3EFC;
		  /* 821A3EFCh */ case    2:  		/* subf R27, R23, R31 */
		/* 821A3EFCh case    2:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R23,regs.R31);
		/* 821A3EFCh case    2:*/		return 0x821A3F00;
		  /* 821A3F00h */ case    3:  		/* lwz R25, <#[R1 + 84]> */
		/* 821A3F00h case    3:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821A3F00h case    3:*/		return 0x821A3F04;
		  /* 821A3F04h */ case    4:  		/* lwz R24, <#[R1 + 88]> */
		/* 821A3F04h case    4:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R1 + 0x00000058) );
		/* 821A3F04h case    4:*/		return 0x821A3F08;
		  /* 821A3F08h */ case    5:  		/* li R29, 0 */
		/* 821A3F08h case    5:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A3F08h case    5:*/		return 0x821A3F0C;
		  /* 821A3F0Ch */ case    6:  		/* stw R25, <#[R1 + 84]> */
		/* 821A3F0Ch case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R1 + 0x00000054) );
		/* 821A3F0Ch case    6:*/		return 0x821A3F10;
		  /* 821A3F10h */ case    7:  		/* stw R24, <#[R1 + 88]> */
		/* 821A3F10h case    7:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000058) );
		/* 821A3F10h case    7:*/		return 0x821A3F14;
		  /* 821A3F14h */ case    8:  		/* mr R28, R27 */
		/* 821A3F14h case    8:*/		regs.R28 = regs.R27;
		/* 821A3F14h case    8:*/		return 0x821A3F18;
		  /* 821A3F18h */ case    9:  		/* cmplwi CR0, R27, 0 */
		/* 821A3F18h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R27,0x00000000);
		/* 821A3F18h case    9:*/		return 0x821A3F1C;
		  /* 821A3F1Ch */ case   10:  		/* bc 12, CR0_EQ, 352 */
		/* 821A3F1Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821A407C;  }
		/* 821A3F1Ch case   10:*/		return 0x821A3F20;
		  /* 821A3F20h */ case   11:  		/* addi R3, R1, 80 */
		/* 821A3F20h case   11:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x50);
		/* 821A3F20h case   11:*/		return 0x821A3F24;
		  /* 821A3F24h */ case   12:  		/* bl -20780 */
		/* 821A3F24h case   12:*/		regs.LR = 0x821A3F28; return 0x8219EDF8;
		/* 821A3F24h case   12:*/		return 0x821A3F28;
		  /* 821A3F28h */ case   13:  		/* lwz R31, <#[R3]> */
		/* 821A3F28h case   13:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3F28h case   13:*/		return 0x821A3F2C;
		  /* 821A3F2Ch */ case   14:  		/* addi R28, R28, -1 */
		/* 821A3F2Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0xFFFFFFFF);
		/* 821A3F2Ch case   14:*/		return 0x821A3F30;
		  /* 821A3F30h */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A3F30h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A3F30h case   15:*/		return 0x821A3F34;
		  /* 821A3F34h */ case   16:  		/* rlwinm R30, R11, 25, 25, 31 */
		/* 821A3F34h case   16:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R30,regs.R11);
		/* 821A3F34h case   16:*/		return 0x821A3F38;
		  /* 821A3F38h */ case   17:  		/* cmplwi CR6, R30, 115 */
		/* 821A3F38h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000073);
		/* 821A3F38h case   17:*/		return 0x821A3F3C;
		  /* 821A3F3Ch */ case   18:  		/* bc 12, CR6_EQ, 312 */
		/* 821A3F3Ch case   18:*/		if ( regs.CR[6].eq ) { return 0x821A4074;  }
		/* 821A3F3Ch case   18:*/		return 0x821A3F40;
		  /* 821A3F40h */ case   19:  		/* mr R3, R31 */
		/* 821A3F40h case   19:*/		regs.R3 = regs.R31;
		/* 821A3F40h case   19:*/		return 0x821A3F44;
		  /* 821A3F44h */ case   20:  		/* bl -259524 */
		/* 821A3F44h case   20:*/		regs.LR = 0x821A3F48; return 0x82164980;
		/* 821A3F44h case   20:*/		return 0x821A3F48;
		  /* 821A3F48h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A3F48h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A3F48h case   21:*/		return 0x821A3F4C;
		  /* 821A3F4Ch */ case   22:  		/* mr R4, R31 */
		/* 821A3F4Ch case   22:*/		regs.R4 = regs.R31;
		/* 821A3F4Ch case   22:*/		return 0x821A3F50;
		  /* 821A3F50h */ case   23:  		/* bc 12, CR0_EQ, 16 */
		/* 821A3F50h case   23:*/		if ( regs.CR[0].eq ) { return 0x821A3F60;  }
		/* 821A3F50h case   23:*/		return 0x821A3F54;
		  /* 821A3F54h */ case   24:  		/* mr R3, R26 */
		/* 821A3F54h case   24:*/		regs.R3 = regs.R26;
		/* 821A3F54h case   24:*/		return 0x821A3F58;
		  /* 821A3F58h */ case   25:  		/* bl 554744 */
		/* 821A3F58h case   25:*/		regs.LR = 0x821A3F5C; return 0x8222B650;
		/* 821A3F58h case   25:*/		return 0x821A3F5C;
		  /* 821A3F5Ch */ case   26:  		/* b 260 */
		/* 821A3F5Ch case   26:*/		return 0x821A4060;
		/* 821A3F5Ch case   26:*/		return 0x821A3F60;
	}
	return 0x821A3F60;
} // Block from 821A3EF4h-821A3F60h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A3F60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3F60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3F60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3F60);
		  /* 821A3F60h */ case    0:  		/* cmplwi CR6, R30, 110 */
		/* 821A3F60h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x0000006E);
		/* 821A3F60h case    0:*/		return 0x821A3F64;
		  /* 821A3F64h */ case    1:  		/* bc 4, CR6_EQ, 260 */
		/* 821A3F64h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4068;  }
		/* 821A3F64h case    1:*/		return 0x821A3F68;
		  /* 821A3F68h */ case    2:  		/* li R5, 0 */
		/* 821A3F68h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A3F68h case    2:*/		return 0x821A3F6C;
		  /* 821A3F6Ch */ case    3:  		/* mr R3, R26 */
		/* 821A3F6Ch case    3:*/		regs.R3 = regs.R26;
		/* 821A3F6Ch case    3:*/		return 0x821A3F70;
		  /* 821A3F70h */ case    4:  		/* bl 163264 */
		/* 821A3F70h case    4:*/		regs.LR = 0x821A3F74; return 0x821CBD30;
		/* 821A3F70h case    4:*/		return 0x821A3F74;
		  /* 821A3F74h */ case    5:  		/* or. R30, R3, R3 */
		/* 821A3F74h case    5:*/		cpu::op::or<1>(regs,&regs.R30,regs.R3,regs.R3);
		/* 821A3F74h case    5:*/		return 0x821A3F78;
		  /* 821A3F78h */ case    6:  		/* bc 12, CR0_EQ, 252 */
		/* 821A3F78h case    6:*/		if ( regs.CR[0].eq ) { return 0x821A4074;  }
		/* 821A3F78h case    6:*/		return 0x821A3F7C;
		  /* 821A3F7Ch */ case    7:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A3F7Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A3F7Ch case    7:*/		return 0x821A3F80;
		  /* 821A3F80h */ case    8:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A3F80h case    8:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A3F80h case    8:*/		return 0x821A3F84;
		  /* 821A3F84h */ case    9:  		/* bc 12, CR0_EQ, 116 */
		/* 821A3F84h case    9:*/		if ( regs.CR[0].eq ) { return 0x821A3FF8;  }
		/* 821A3F84h case    9:*/		return 0x821A3F88;
		  /* 821A3F88h */ case   10:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A3F88h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A3F88h case   10:*/		return 0x821A3F8C;
		  /* 821A3F8Ch */ case   11:  		/* mr R3, R31 */
		/* 821A3F8Ch case   11:*/		regs.R3 = regs.R31;
		/* 821A3F8Ch case   11:*/		return 0x821A3F90;
		  /* 821A3F90h */ case   12:  		/* oris R11, R11, 128 */
		/* 821A3F90h case   12:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A3F90h case   12:*/		return 0x821A3F94;
		  /* 821A3F94h */ case   13:  		/* stw R11, <#[R30 + 8]> */
		/* 821A3F94h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A3F94h case   13:*/		return 0x821A3F98;
		  /* 821A3F98h */ case   14:  		/* bl -132784 */
		/* 821A3F98h case   14:*/		regs.LR = 0x821A3F9C; return 0x821838E8;
		/* 821A3F98h case   14:*/		return 0x821A3F9C;
		  /* 821A3F9Ch */ case   15:  		/* sth R3, <#[R30 + 18]> */
		/* 821A3F9Ch case   15:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R30 + 0x00000012) );
		/* 821A3F9Ch case   15:*/		return 0x821A3FA0;
		  /* 821A3FA0h */ case   16:  		/* lwz R3, <#[R26 + 660]> */
		/* 821A3FA0h case   16:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000294) );
		/* 821A3FA0h case   16:*/		return 0x821A3FA4;
		  /* 821A3FA4h */ case   17:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A3FA4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A3FA4h case   17:*/		return 0x821A3FA8;
		  /* 821A3FA8h */ case   18:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A3FA8h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A3FA8h case   18:*/		return 0x821A3FAC;
		  /* 821A3FACh */ case   19:  		/* bc 4, CR0_EQ, 40 */
		/* 821A3FACh case   19:*/		if ( !regs.CR[0].eq ) { return 0x821A3FD4;  }
		/* 821A3FACh case   19:*/		return 0x821A3FB0;
		  /* 821A3FB0h */ case   20:  		/* lwz R11, <#[R3]> */
		/* 821A3FB0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A3FB0h case   20:*/		return 0x821A3FB4;
		  /* 821A3FB4h */ case   21:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A3FB4h case   21:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A3FB4h case   21:*/		return 0x821A3FB8;
		  /* 821A3FB8h */ case   22:  		/* addic. R11, R11, -4 */
		/* 821A3FB8h case   22:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A3FB8h case   22:*/		return 0x821A3FBC;
		  /* 821A3FBCh */ case   23:  		/* bc 12, CR0_EQ, 24 */
		/* 821A3FBCh case   23:*/		if ( regs.CR[0].eq ) { return 0x821A3FD4;  }
		/* 821A3FBCh case   23:*/		return 0x821A3FC0;
		  /* 821A3FC0h */ case   24:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A3FC0h case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A3FC0h case   24:*/		return 0x821A3FC4;
		  /* 821A3FC4h */ case   25:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A3FC4h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A3FC4h case   25:*/		return 0x821A3FC8;
		  /* 821A3FC8h */ case   26:  		/* addi R10, R10, 1 */
		/* 821A3FC8h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A3FC8h case   26:*/		return 0x821A3FCC;
		  /* 821A3FCCh */ case   27:  		/* cmplw CR6, R10, R9 */
		/* 821A3FCCh case   27:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A3FCCh case   27:*/		return 0x821A3FD0;
		  /* 821A3FD0h */ case   28:  		/* bc 4, CR6_GT, 16 */
		/* 821A3FD0h case   28:*/		if ( !regs.CR[6].gt ) { return 0x821A3FE0;  }
		/* 821A3FD0h case   28:*/		return 0x821A3FD4;
	}
	return 0x821A3FD4;
} // Block from 821A3F60h-821A3FD4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A3FD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3FD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3FD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3FD4);
		  /* 821A3FD4h */ case    0:  		/* li R4, 1 */
		/* 821A3FD4h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A3FD4h case    0:*/		return 0x821A3FD8;
		  /* 821A3FD8h */ case    1:  		/* bl -93968 */
		/* 821A3FD8h case    1:*/		regs.LR = 0x821A3FDC; return 0x8218D0C8;
		/* 821A3FD8h case    1:*/		return 0x821A3FDC;
		  /* 821A3FDCh */ case    2:  		/* mr R11, R3 */
		/* 821A3FDCh case    2:*/		regs.R11 = regs.R3;
		/* 821A3FDCh case    2:*/		return 0x821A3FE0;
	}
	return 0x821A3FE0;
} // Block from 821A3FD4h-821A3FE0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A3FE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3FE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3FE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3FE0);
		  /* 821A3FE0h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A3FE0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A3FE0h case    0:*/		return 0x821A3FE4;
		  /* 821A3FE4h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A3FE4h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A3FE4h case    1:*/		return 0x821A3FE8;
		  /* 821A3FE8h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A3FE8h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A3FE8h case    2:*/		return 0x821A3FEC;
		  /* 821A3FECh */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A3FECh case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A3FECh case    3:*/		return 0x821A3FF0;
		  /* 821A3FF0h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A3FF0h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A3FF0h case    4:*/		return 0x821A3FF4;
		  /* 821A3FF4h */ case    5:  		/* stwx R30, <#[R10 + R11]> */
		/* 821A3FF4h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A3FF4h case    5:*/		return 0x821A3FF8;
	}
	return 0x821A3FF8;
} // Block from 821A3FE0h-821A3FF8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A3FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A3FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A3FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A3FF8);
		  /* 821A3FF8h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A3FF8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A3FF8h case    0:*/		return 0x821A3FFC;
		  /* 821A3FFCh */ case    1:  		/* rlwinm. R30, R11, 13, 29, 31 */
		/* 821A3FFCh case    1:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R30,regs.R11);
		/* 821A3FFCh case    1:*/		return 0x821A4000;
		  /* 821A4000h */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 821A4000h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A4020;  }
		/* 821A4000h case    2:*/		return 0x821A4004;
		  /* 821A4004h */ case    3:  		/* addi R10, R1, 92 */
		/* 821A4004h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x5C);
		/* 821A4004h case    3:*/		return 0x821A4008;
		  /* 821A4008h */ case    4:  		/* mtspr CTR, R30 */
		/* 821A4008h case    4:*/		regs.CTR = regs.R30;
		/* 821A4008h case    4:*/		return 0x821A400C;
		  /* 821A400Ch */ case    5:  		/* addi R11, R31, 40 */
		/* 821A400Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x28);
		/* 821A400Ch case    5:*/		return 0x821A4010;
		  /* 821A4010h */ case    6:  		/* lwzu R9, <#[R11 + 4]> */
		/* 821A4010h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		regs.R11 = (uint32)(regs.R11 + 0x00000004);
		/* 821A4010h case    6:*/		return 0x821A4014;
		  /* 821A4014h */ case    7:  		/* lwz R9, <#[R9 + 12]> */
		/* 821A4014h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A4014h case    7:*/		return 0x821A4018;
		  /* 821A4018h */ case    8:  		/* stwu R9, <#[R10 + 4]> */
		/* 821A4018h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821A4018h case    8:*/		return 0x821A401C;
		  /* 821A401Ch */ case    9:  		/* bc 16, CR0_LT, -12 */
		/* 821A401Ch case    9:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A4010;  }
		/* 821A401Ch case    9:*/		return 0x821A4020;
	}
	return 0x821A4020;
} // Block from 821A3FF8h-821A4020h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A4020h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4020( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4020) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4020);
		  /* 821A4020h */ case    0:  		/* li R6, 1 */
		/* 821A4020h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A4020h case    0:*/		return 0x821A4024;
		  /* 821A4024h */ case    1:  		/* li R5, 0 */
		/* 821A4024h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A4024h case    1:*/		return 0x821A4028;
		  /* 821A4028h */ case    2:  		/* mr R4, R31 */
		/* 821A4028h case    2:*/		regs.R4 = regs.R31;
		/* 821A4028h case    2:*/		return 0x821A402C;
		  /* 821A402Ch */ case    3:  		/* mr R3, R26 */
		/* 821A402Ch case    3:*/		regs.R3 = regs.R26;
		/* 821A402Ch case    3:*/		return 0x821A4030;
		  /* 821A4030h */ case    4:  		/* bl 553880 */
		/* 821A4030h case    4:*/		regs.LR = 0x821A4034; return 0x8222B3C8;
		/* 821A4030h case    4:*/		return 0x821A4034;
		  /* 821A4034h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821A4034h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A4034h case    5:*/		return 0x821A4038;
		  /* 821A4038h */ case    6:  		/* bc 12, CR6_EQ, 40 */
		/* 821A4038h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A4060;  }
		/* 821A4038h case    6:*/		return 0x821A403C;
		  /* 821A403Ch */ case    7:  		/* addi R11, R1, 96 */
		/* 821A403Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A403Ch case    7:*/		return 0x821A4040;
		  /* 821A4040h */ case    8:  		/* mr R31, R30 */
		/* 821A4040h case    8:*/		regs.R31 = regs.R30;
		/* 821A4040h case    8:*/		return 0x821A4044;
		  /* 821A4044h */ case    9:  		/* addi R29, R11, -4 */
		/* 821A4044h case    9:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 821A4044h case    9:*/		return 0x821A4048;
		  /* 821A4048h */ case   10:  		/* mr R3, R26 */
		/* 821A4048h case   10:*/		regs.R3 = regs.R26;
		/* 821A4048h case   10:*/		return 0x821A404C;
		  /* 821A404Ch */ case   11:  		/* lwzu R4, <#[R29 + 4]> */
		/* 821A404Ch case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A404Ch case   11:*/		return 0x821A4050;
		  /* 821A4050h */ case   12:  		/* lwz R5, <#[R26 + 660]> */
		/* 821A4050h case   12:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x00000294) );
		/* 821A4050h case   12:*/		return 0x821A4054;
		  /* 821A4054h */ case   13:  		/* bl 101812 */
		/* 821A4054h case   13:*/		regs.LR = 0x821A4058; return 0x821BCE08;
		/* 821A4054h case   13:*/		return 0x821A4058;
		  /* 821A4058h */ case   14:  		/* addic. R31, R31, -1 */
		/* 821A4058h case   14:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821A4058h case   14:*/		return 0x821A405C;
		  /* 821A405Ch */ case   15:  		/* bc 4, CR0_EQ, -20 */
		/* 821A405Ch case   15:*/		if ( !regs.CR[0].eq ) { return 0x821A4048;  }
		/* 821A405Ch case   15:*/		return 0x821A4060;
	}
	return 0x821A4060;
} // Block from 821A4020h-821A4060h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A4060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4060);
		  /* 821A4060h */ case    0:  		/* li R29, 1 */
		/* 821A4060h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x1);
		/* 821A4060h case    0:*/		return 0x821A4064;
		  /* 821A4064h */ case    1:  		/* b 16 */
		/* 821A4064h case    1:*/		return 0x821A4074;
		/* 821A4064h case    1:*/		return 0x821A4068;
	}
	return 0x821A4068;
} // Block from 821A4060h-821A4068h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A4068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4068);
		  /* 821A4068h */ case    0:  		/* mr R3, R26 */
		/* 821A4068h case    0:*/		regs.R3 = regs.R26;
		/* 821A4068h case    0:*/		return 0x821A406C;
		  /* 821A406Ch */ case    1:  		/* lwz R5, <#[R26 + 660]> */
		/* 821A406Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x00000294) );
		/* 821A406Ch case    1:*/		return 0x821A4070;
		  /* 821A4070h */ case    2:  		/* bl 101784 */
		/* 821A4070h case    2:*/		regs.LR = 0x821A4074; return 0x821BCE08;
		/* 821A4070h case    2:*/		return 0x821A4074;
	}
	return 0x821A4074;
} // Block from 821A4068h-821A4074h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A4074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4074);
		  /* 821A4074h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821A4074h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A4074h case    0:*/		return 0x821A4078;
		  /* 821A4078h */ case    1:  		/* bc 4, CR6_EQ, -344 */
		/* 821A4078h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A3F20;  }
		/* 821A4078h case    1:*/		return 0x821A407C;
	}
	return 0x821A407C;
} // Block from 821A4074h-821A407Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A407Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A407C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A407C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A407C);
		  /* 821A407Ch */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821A407Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821A407Ch case    0:*/		return 0x821A4080;
		  /* 821A4080h */ case    1:  		/* bc 4, CR0_EQ, -376 */
		/* 821A4080h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821A3F08;  }
		/* 821A4080h case    1:*/		return 0x821A4084;
		  /* 821A4084h */ case    2:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821A4084h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821A4084h case    2:*/		return 0x821A4088;
		  /* 821A4088h */ case    3:  		/* bc 12, CR0_EQ, -412 */
		/* 821A4088h case    3:*/		if ( regs.CR[0].eq ) { return 0x821A3EEC;  }
		/* 821A4088h case    3:*/		return 0x821A408C;
		  /* 821A408Ch */ case    4:  		/* lwz R10, <#[R26 + 652]> */
		/* 821A408Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x0000028C) );
		/* 821A408Ch case    4:*/		return 0x821A4090;
		  /* 821A4090h */ case    5:  		/* li R11, 0 */
		/* 821A4090h case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A4090h case    5:*/		return 0x821A4094;
		  /* 821A4094h */ case    6:  		/* lwz R10, <#[R10 + 4]> */
		/* 821A4094h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821A4094h case    6:*/		return 0x821A4098;
		  /* 821A4098h */ case    7:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821A4098h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821A4098h case    7:*/		return 0x821A409C;
		  /* 821A409Ch */ case    8:  		/* bc 4, CR0_EQ, 44 */
		/* 821A409Ch case    8:*/		if ( !regs.CR[0].eq ) { return 0x821A40C8;  }
		/* 821A409Ch case    8:*/		return 0x821A40A0;
		  /* 821A40A0h */ case    9:  		/* cmplwi CR0, R10, 0 */
		/* 821A40A0h case    9:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821A40A0h case    9:*/		return 0x821A40A4;
		  /* 821A40A4h */ case   10:  		/* bc 12, CR0_EQ, 36 */
		/* 821A40A4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A40C8;  }
		/* 821A40A4h case   10:*/		return 0x821A40A8;
		  /* 821A40A8h */ case   11:  		/* rlwinm R9, R10, 0, 0, 30 */
		/* 821A40A8h case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R9,regs.R10);
		/* 821A40A8h case   11:*/		return 0x821A40AC;
		  /* 821A40ACh */ case   12:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A40ACh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A40ACh case   12:*/		return 0x821A40B0;
		  /* 821A40B0h */ case   13:  		/* add R11, R10, R11 */
		/* 821A40B0h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A40B0h case   13:*/		return 0x821A40B4;
		  /* 821A40B4h */ case   14:  		/* lwz R10, <#[R9 + 4]> */
		/* 821A40B4h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 821A40B4h case   14:*/		return 0x821A40B8;
		  /* 821A40B8h */ case   15:  		/* rlwinm. R9, R10, 0, 31, 31 */
		/* 821A40B8h case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R9,regs.R10);
		/* 821A40B8h case   15:*/		return 0x821A40BC;
		  /* 821A40BCh */ case   16:  		/* bc 4, CR0_EQ, 12 */
		/* 821A40BCh case   16:*/		if ( !regs.CR[0].eq ) { return 0x821A40C8;  }
		/* 821A40BCh case   16:*/		return 0x821A40C0;
		  /* 821A40C0h */ case   17:  		/* cmplwi CR6, R10, 0 */
		/* 821A40C0h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A40C0h case   17:*/		return 0x821A40C4;
		  /* 821A40C4h */ case   18:  		/* bc 4, CR6_EQ, -28 */
		/* 821A40C4h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821A40A8;  }
		/* 821A40C4h case   18:*/		return 0x821A40C8;
	}
	return 0x821A40C8;
} // Block from 821A407Ch-821A40C8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A40C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A40C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A40C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A40C8);
		  /* 821A40C8h */ case    0:  		/* cmplw CR6, R11, R23 */
		/* 821A40C8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R23);
		/* 821A40C8h case    0:*/		return 0x821A40CC;
		  /* 821A40CCh */ case    1:  		/* bc 4, CR6_GT, 144 */
		/* 821A40CCh case    1:*/		if ( !regs.CR[6].gt ) { return 0x821A415C;  }
		/* 821A40CCh case    1:*/		return 0x821A40D0;
		  /* 821A40D0h */ case    2:  		/* subf R30, R23, R11 */
		/* 821A40D0h case    2:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R23,regs.R11);
		/* 821A40D0h case    2:*/		return 0x821A40D4;
		  /* 821A40D4h */ case    3:  		/* lwz R3, <#[R26 + 652]> */
		/* 821A40D4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x0000028C) );
		/* 821A40D4h case    3:*/		return 0x821A40D8;
		  /* 821A40D8h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A40D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A40D8h case    4:*/		return 0x821A40DC;
		  /* 821A40DCh */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A40DCh case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A40DCh case    5:*/		return 0x821A40E0;
		  /* 821A40E0h */ case    6:  		/* bc 12, CR0_EQ, 12 */
		/* 821A40E0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821A40EC;  }
		/* 821A40E0h case    6:*/		return 0x821A40E4;
		  /* 821A40E4h */ case    7:  		/* li R4, 0 */
		/* 821A40E4h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A40E4h case    7:*/		return 0x821A40E8;
		  /* 821A40E8h */ case    8:  		/* b 16 */
		/* 821A40E8h case    8:*/		return 0x821A40F8;
		/* 821A40E8h case    8:*/		return 0x821A40EC;
	}
	return 0x821A40EC;
} // Block from 821A40C8h-821A40ECh (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A40ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A40EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A40EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A40EC);
		  /* 821A40ECh */ case    0:  		/* lwz R11, <#[R3]> */
		/* 821A40ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A40ECh case    0:*/		return 0x821A40F0;
		  /* 821A40F0h */ case    1:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A40F0h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A40F0h case    1:*/		return 0x821A40F4;
		  /* 821A40F4h */ case    2:  		/* addi R4, R11, -4 */
		/* 821A40F4h case    2:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821A40F4h case    2:*/		return 0x821A40F8;
	}
	return 0x821A40F8;
} // Block from 821A40ECh-821A40F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A40F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A40F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A40F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A40F8);
		  /* 821A40F8h */ case    0:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A40F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A40F8h case    0:*/		return 0x821A40FC;
		  /* 821A40FCh */ case    1:  		/* addi R10, R11, 3 */
		/* 821A40FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821A40FCh case    1:*/		return 0x821A4100;
		  /* 821A4100h */ case    2:  		/* addic. R11, R11, -1 */
		/* 821A4100h case    2:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A4100h case    2:*/		return 0x821A4104;
		  /* 821A4104h */ case    3:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821A4104h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821A4104h case    3:*/		return 0x821A4108;
		  /* 821A4108h */ case    4:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821A4108h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821A4108h case    4:*/		return 0x821A410C;
		  /* 821A410Ch */ case    5:  		/* stw R11, <#[R4 + 8]> */
		/* 821A410Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A410Ch case    5:*/		return 0x821A4110;
		  /* 821A4110h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821A4110h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A4148;  }
		/* 821A4110h case    6:*/		return 0x821A4114;
		  /* 821A4114h */ case    7:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821A4114h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821A4114h case    7:*/		return 0x821A4118;
		  /* 821A4118h */ case    8:  		/* lwz R10, <#[R11 + 4]> */
		/* 821A4118h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4118h case    8:*/		return 0x821A411C;
		  /* 821A411Ch */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821A411Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A411Ch case    9:*/		return 0x821A4120;
		  /* 821A4120h */ case   10:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821A4120h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821A4120h case   10:*/		return 0x821A4124;
		  /* 821A4124h */ case   11:  		/* stw R9, <#[R10]> */
		/* 821A4124h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4124h case   11:*/		return 0x821A4128;
		  /* 821A4128h */ case   12:  		/* lwz R10, <#[R11 + 4]> */
		/* 821A4128h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4128h case   12:*/		return 0x821A412C;
		  /* 821A412Ch */ case   13:  		/* lwz R11, <#[R11]> */
		/* 821A412Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821A412Ch case   13:*/		return 0x821A4130;
		  /* 821A4130h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4130h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4130h case   14:*/		return 0x821A4134;
		  /* 821A4134h */ case   15:  		/* stw R10, <#[R11]> */
		/* 821A4134h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4134h case   15:*/		return 0x821A4138;
		  /* 821A4138h */ case   16:  		/* lwz R11, <#[R4 + 12]> */
		/* 821A4138h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821A4138h case   16:*/		return 0x821A413C;
		  /* 821A413Ch */ case   17:  		/* addi R11, R11, 4 */
		/* 821A413Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A413Ch case   17:*/		return 0x821A4140;
		  /* 821A4140h */ case   18:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821A4140h case   18:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821A4140h case   18:*/		return 0x821A4144;
		  /* 821A4144h */ case   19:  		/* bl -336700 */
		/* 821A4144h case   19:*/		regs.LR = 0x821A4148; return 0x82151E08;
		/* 821A4144h case   19:*/		return 0x821A4148;
	}
	return 0x821A4148;
} // Block from 821A40F8h-821A4148h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821A4148h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4148( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4148) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4148);
		  /* 821A4148h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A4148h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4148h case    0:*/		return 0x821A414C;
		  /* 821A414Ch */ case    1:  		/* addic. R30, R30, -1 */
		/* 821A414Ch case    1:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821A414Ch case    1:*/		return 0x821A4150;
		  /* 821A4150h */ case    2:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821A4150h case    2:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821A4150h case    2:*/		return 0x821A4154;
		  /* 821A4154h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821A4154h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4154h case    3:*/		return 0x821A4158;
		  /* 821A4158h */ case    4:  		/* bc 4, CR0_EQ, -132 */
		/* 821A4158h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A40D4;  }
		/* 821A4158h case    4:*/		return 0x821A415C;
	}
	return 0x821A415C;
} // Block from 821A4148h-821A415Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A415Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A415C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A415C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A415C);
		  /* 821A415Ch */ case    0:  		/* lwz R31, <#[R26 + 540]> */
		/* 821A415Ch case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x0000021C) );
		/* 821A415Ch case    0:*/		return 0x821A4160;
		  /* 821A4160h */ case    1:  		/* addi R30, R26, 540 */
		/* 821A4160h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R26,0x21C);
		/* 821A4160h case    1:*/		return 0x821A4164;
		  /* 821A4164h */ case    2:  		/* b 80 */
		/* 821A4164h case    2:*/		return 0x821A41B4;
		/* 821A4164h case    2:*/		return 0x821A4168;
		  /* 821A4168h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A4168h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4168h case    3:*/		return 0x821A416C;
		  /* 821A416Ch */ case    4:  		/* rlwinm. R11, R11, 6, 31, 31 */
		/* 821A416Ch case    4:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R11);
		/* 821A416Ch case    4:*/		return 0x821A4170;
		  /* 821A4170h */ case    5:  		/* bc 12, CR0_EQ, 12 */
		/* 821A4170h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A417C;  }
		/* 821A4170h case    5:*/		return 0x821A4174;
		  /* 821A4174h */ case    6:  		/* addi R30, R31, 32 */
		/* 821A4174h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x20);
		/* 821A4174h case    6:*/		return 0x821A4178;
		  /* 821A4178h */ case    7:  		/* b 56 */
		/* 821A4178h case    7:*/		return 0x821A41B0;
		/* 821A4178h case    7:*/		return 0x821A417C;
	}
	return 0x821A417C;
} // Block from 821A415Ch-821A417Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A417Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A417C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A417C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A417C);
		  /* 821A417Ch */ case    0:  		/* lwz R11, <#[R31 + 32]> */
		/* 821A417Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821A417Ch case    0:*/		return 0x821A4180;
		  /* 821A4180h */ case    1:  		/* mr R3, R26 */
		/* 821A4180h case    1:*/		regs.R3 = regs.R26;
		/* 821A4180h case    1:*/		return 0x821A4184;
		  /* 821A4184h */ case    2:  		/* stw R11, <#[R30]> */
		/* 821A4184h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A4184h case    2:*/		return 0x821A4188;
		  /* 821A4188h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A4188h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4188h case    3:*/		return 0x821A418C;
		  /* 821A418Ch */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821A418Ch case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821A418Ch case    4:*/		return 0x821A4190;
		  /* 821A4190h */ case    5:  		/* rlwinm R5, R11, 13, 29, 31 */
		/* 821A4190h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R5,regs.R11);
		/* 821A4190h case    5:*/		return 0x821A4194;
		  /* 821A4194h */ case    6:  		/* rlwinm R4, R11, 25, 25, 31 */
		/* 821A4194h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R4,regs.R11);
		/* 821A4194h case    6:*/		return 0x821A4198;
		  /* 821A4198h */ case    7:  		/* bl -261480 */
		/* 821A4198h case    7:*/		regs.LR = 0x821A419C; return 0x82164430;
		/* 821A4198h case    7:*/		return 0x821A419C;
		  /* 821A419Ch */ case    8:  		/* mr R5, R3 */
		/* 821A419Ch case    8:*/		regs.R5 = regs.R3;
		/* 821A419Ch case    8:*/		return 0x821A41A0;
		  /* 821A41A0h */ case    9:  		/* mr R4, R31 */
		/* 821A41A0h case    9:*/		regs.R4 = regs.R31;
		/* 821A41A0h case    9:*/		return 0x821A41A4;
		  /* 821A41A4h */ case   10:  		/* mr R3, R26 */
		/* 821A41A4h case   10:*/		regs.R3 = regs.R26;
		/* 821A41A4h case   10:*/		return 0x821A41A8;
		  /* 821A41A8h */ case   11:  		/* li R6, 0 */
		/* 821A41A8h case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A41A8h case   11:*/		return 0x821A41AC;
		  /* 821A41ACh */ case   12:  		/* bl -259348 */
		/* 821A41ACh case   12:*/		regs.LR = 0x821A41B0; return 0x82164C98;
		/* 821A41ACh case   12:*/		return 0x821A41B0;
	}
	return 0x821A41B0;
} // Block from 821A417Ch-821A41B0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A41B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A41B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A41B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A41B0);
		  /* 821A41B0h */ case    0:  		/* lwz R31, <#[R30]> */
		/* 821A41B0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821A41B0h case    0:*/		return 0x821A41B4;
	}
	return 0x821A41B4;
} // Block from 821A41B0h-821A41B4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A41B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A41B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A41B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A41B4);
		  /* 821A41B4h */ case    0:  		/* cmplw CR6, R31, R21 */
		/* 821A41B4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R21);
		/* 821A41B4h case    0:*/		return 0x821A41B8;
		  /* 821A41B8h */ case    1:  		/* bc 4, CR6_EQ, -80 */
		/* 821A41B8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4168;  }
		/* 821A41B8h case    1:*/		return 0x821A41BC;
		  /* 821A41BCh */ case    2:  		/* li R3, 0 */
		/* 821A41BCh case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A41BCh case    2:*/		return 0x821A41C0;
	}
	return 0x821A41C0;
} // Block from 821A41B4h-821A41C0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A41C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A41C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A41C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A41C0);
		  /* 821A41C0h */ case    0:  		/* addi R1, R1, 208 */
		/* 821A41C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821A41C0h case    0:*/		return 0x821A41C4;
		  /* 821A41C4h */ case    1:  		/* b -1126200 */
		/* 821A41C4h case    1:*/		return 0x8209128C;
		/* 821A41C4h case    1:*/		return 0x821A41C8;
	}
	return 0x821A41C8;
} // Block from 821A41C0h-821A41C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A41C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A41C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A41C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A41C8);
		  /* 821A41C8h */ case    0:  		/* mfspr R12, LR */
		/* 821A41C8h case    0:*/		regs.R12 = regs.LR;
		/* 821A41C8h case    0:*/		return 0x821A41CC;
		  /* 821A41CCh */ case    1:  		/* bl -1126280 */
		/* 821A41CCh case    1:*/		regs.LR = 0x821A41D0; return 0x82091244;
		/* 821A41CCh case    1:*/		return 0x821A41D0;
		  /* 821A41D0h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821A41D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821A41D0h case    2:*/		return 0x821A41D4;
		  /* 821A41D4h */ case    3:  		/* mr R29, R4 */
		/* 821A41D4h case    3:*/		regs.R29 = regs.R4;
		/* 821A41D4h case    3:*/		return 0x821A41D8;
		  /* 821A41D8h */ case    4:  		/* mr R25, R5 */
		/* 821A41D8h case    4:*/		regs.R25 = regs.R5;
		/* 821A41D8h case    4:*/		return 0x821A41DC;
		  /* 821A41DCh */ case    5:  		/* li R5, 28 */
		/* 821A41DCh case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 821A41DCh case    5:*/		return 0x821A41E0;
		  /* 821A41E0h */ case    6:  		/* li R4, 8 */
		/* 821A41E0h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821A41E0h case    6:*/		return 0x821A41E4;
		  /* 821A41E4h */ case    7:  		/* mr R26, R3 */
		/* 821A41E4h case    7:*/		regs.R26 = regs.R3;
		/* 821A41E4h case    7:*/		return 0x821A41E8;
		  /* 821A41E8h */ case    8:  		/* mr R23, R6 */
		/* 821A41E8h case    8:*/		regs.R23 = regs.R6;
		/* 821A41E8h case    8:*/		return 0x821A41EC;
		  /* 821A41ECh */ case    9:  		/* bl -260348 */
		/* 821A41ECh case    9:*/		regs.LR = 0x821A41F0; return 0x821648F0;
		/* 821A41ECh case    9:*/		return 0x821A41F0;
		  /* 821A41F0h */ case   10:  		/* addi R24, R3, 4 */
		/* 821A41F0h case   10:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R3,0x4);
		/* 821A41F0h case   10:*/		return 0x821A41F4;
		  /* 821A41F4h */ case   11:  		/* ori R11, R3, 1 */
		/* 821A41F4h case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821A41F4h case   11:*/		return 0x821A41F8;
		  /* 821A41F8h */ case   12:  		/* ori R10, R24, 1 */
		/* 821A41F8h case   12:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R24,0x1);
		/* 821A41F8h case   12:*/		return 0x821A41FC;
		  /* 821A41FCh */ case   13:  		/* mr R30, R3 */
		/* 821A41FCh case   13:*/		regs.R30 = regs.R3;
		/* 821A41FCh case   13:*/		return 0x821A4200;
		  /* 821A4200h */ case   14:  		/* stw R11, <#[R3 + 4]> */
		/* 821A4200h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A4200h case   14:*/		return 0x821A4204;
		  /* 821A4204h */ case   15:  		/* stw R10, <#[R3]> */
		/* 821A4204h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821A4204h case   15:*/		return 0x821A4208;
		  /* 821A4208h */ case   16:  		/* li R27, 0 */
		/* 821A4208h case   16:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A4208h case   16:*/		return 0x821A420C;
		  /* 821A420Ch */ case   17:  		/* addi R28, R29, 44 */
		/* 821A420Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R29,0x2C);
		/* 821A420Ch case   17:*/		return 0x821A4210;
		  /* 821A4210h */ case   18:  		/* lwz R11, <#[R29 + 8]> */
		/* 821A4210h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A4210h case   18:*/		return 0x821A4214;
		  /* 821A4214h */ case   19:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A4214h case   19:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A4214h case   19:*/		return 0x821A4218;
		  /* 821A4218h */ case   20:  		/* cmplw CR6, R27, R11 */
		/* 821A4218h case   20:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821A4218h case   20:*/		return 0x821A421C;
		  /* 821A421Ch */ case   21:  		/* bc 4, CR6_LT, 352 */
		/* 821A421Ch case   21:*/		if ( !regs.CR[6].lt ) { return 0x821A437C;  }
		/* 821A421Ch case   21:*/		return 0x821A4220;
		  /* 821A4220h */ case   22:  		/* lwz R31, <#[R28]> */
		/* 821A4220h case   22:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 821A4220h case   22:*/		return 0x821A4224;
		  /* 821A4224h */ case   23:  		/* li R10, 1 */
		/* 821A4224h case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821A4224h case   23:*/		return 0x821A4228;
		  /* 821A4228h */ case   24:  		/* li R9, 0 */
		/* 821A4228h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A4228h case   24:*/		return 0x821A422C;
		  /* 821A422Ch */ case   25:  		/* lwz R8, <#[R29 + 28]> */
		/* 821A422Ch case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x0000001C) );
		/* 821A422Ch case   25:*/		return 0x821A4230;
		  /* 821A4230h */ case   26:  		/* addi R7, R1, 80 */
		/* 821A4230h case   26:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821A4230h case   26:*/		return 0x821A4234;
		  /* 821A4234h */ case   27:  		/* addi R6, R1, 84 */
		/* 821A4234h case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 821A4234h case   27:*/		return 0x821A4238;
		  /* 821A4238h */ case   28:  		/* addi R5, R1, 88 */
		/* 821A4238h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 821A4238h case   28:*/		return 0x821A423C;
		  /* 821A423Ch */ case   29:  		/* mr R4, R25 */
		/* 821A423Ch case   29:*/		regs.R4 = regs.R25;
		/* 821A423Ch case   29:*/		return 0x821A4240;
		  /* 821A4240h */ case   30:  		/* mr R3, R31 */
		/* 821A4240h case   30:*/		regs.R3 = regs.R31;
		/* 821A4240h case   30:*/		return 0x821A4244;
		  /* 821A4244h */ case   31:  		/* bl 520844 */
		/* 821A4244h case   31:*/		regs.LR = 0x821A4248; return 0x822234D0;
		/* 821A4244h case   31:*/		return 0x821A4248;
		  /* 821A4248h */ case   32:  		/* lwz R4, <#[R1 + 88]> */
		/* 821A4248h case   32:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000058) );
		/* 821A4248h case   32:*/		return 0x821A424C;
		  /* 821A424Ch */ case   33:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A424Ch case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A424Ch case   33:*/		return 0x821A4250;
		  /* 821A4250h */ case   34:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A4250h case   34:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A4250h case   34:*/		return 0x821A4254;
		  /* 821A4254h */ case   35:  		/* cmplwi CR6, R11, 2 */
		/* 821A4254h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821A4254h case   35:*/		return 0x821A4258;
		  /* 821A4258h */ case   36:  		/* bc 4, CR6_EQ, 140 */
		/* 821A4258h case   36:*/		if ( !regs.CR[6].eq ) { return 0x821A42E4;  }
		/* 821A4258h case   36:*/		return 0x821A425C;
		  /* 821A425Ch */ case   37:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A425Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A425Ch case   37:*/		return 0x821A4260;
		  /* 821A4260h */ case   38:  		/* stw R31, <#[R1 + 100]> */
		/* 821A4260h case   38:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000064) );
		/* 821A4260h case   38:*/		return 0x821A4264;
		  /* 821A4264h */ case   39:  		/* cmplw CR6, R4, R11 */
		/* 821A4264h case   39:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821A4264h case   39:*/		return 0x821A4268;
		  /* 821A4268h */ case   40:  		/* bc 4, CR6_EQ, 12 */
		/* 821A4268h case   40:*/		if ( !regs.CR[6].eq ) { return 0x821A4274;  }
		/* 821A4268h case   40:*/		return 0x821A426C;
		  /* 821A426Ch */ case   41:  		/* stw R31, <#[R1 + 96]> */
		/* 821A426Ch case   41:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R1 + 0x00000060) );
		/* 821A426Ch case   41:*/		return 0x821A4270;
		  /* 821A4270h */ case   42:  		/* b 24 */
		/* 821A4270h case   42:*/		return 0x821A4288;
		/* 821A4270h case   42:*/		return 0x821A4274;
	}
	return 0x821A4274;
} // Block from 821A41C8h-821A4274h (43 instructions)

//////////////////////////////////////////////////////
// Block at 821A4274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4274);
		  /* 821A4274h */ case    0:  		/* mr R3, R26 */
		/* 821A4274h case    0:*/		regs.R3 = regs.R26;
		/* 821A4274h case    0:*/		return 0x821A4278;
		  /* 821A4278h */ case    1:  		/* lwz R6, <#[R1 + 80]> */
		/* 821A4278h case    1:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000050) );
		/* 821A4278h case    1:*/		return 0x821A427C;
		  /* 821A427Ch */ case    2:  		/* lwz R5, <#[R1 + 84]> */
		/* 821A427Ch case    2:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A427Ch case    2:*/		return 0x821A4280;
		  /* 821A4280h */ case    3:  		/* bl -180504 */
		/* 821A4280h case    3:*/		regs.LR = 0x821A4284; return 0x82178168;
		/* 821A4280h case    3:*/		return 0x821A4284;
		  /* 821A4284h */ case    4:  		/* stw R3, <#[R1 + 96]> */
		/* 821A4284h case    4:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000060) );
		/* 821A4284h case    4:*/		return 0x821A4288;
	}
	return 0x821A4288;
} // Block from 821A4274h-821A4288h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A4288h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4288( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4288) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4288);
		  /* 821A4288h */ case    0:  		/* lwz R11, <#[R23 + 4]> */
		/* 821A4288h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821A4288h case    0:*/		return 0x821A428C;
		  /* 821A428Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A428Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A428Ch case    1:*/		return 0x821A4290;
		  /* 821A4290h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821A4290h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A42B8;  }
		/* 821A4290h case    2:*/		return 0x821A4294;
		  /* 821A4294h */ case    3:  		/* lwz R11, <#[R23]> */
		/* 821A4294h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821A4294h case    3:*/		return 0x821A4298;
		  /* 821A4298h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4298h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4298h case    4:*/		return 0x821A429C;
		  /* 821A429Ch */ case    5:  		/* addic. R3, R11, -4 */
		/* 821A429Ch case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821A429Ch case    5:*/		return 0x821A42A0;
		  /* 821A42A0h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821A42A0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821A42B8;  }
		/* 821A42A0h case    6:*/		return 0x821A42A4;
		  /* 821A42A4h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A42A4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A42A4h case    7:*/		return 0x821A42A8;
		  /* 821A42A8h */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821A42A8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A42A8h case    8:*/		return 0x821A42AC;
		  /* 821A42ACh */ case    9:  		/* addi R11, R11, 1 */
		/* 821A42ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A42ACh case    9:*/		return 0x821A42B0;
		  /* 821A42B0h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821A42B0h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A42B0h case   10:*/		return 0x821A42B4;
		  /* 821A42B4h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821A42B4h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821A42C4;  }
		/* 821A42B4h case   11:*/		return 0x821A42B8;
	}
	return 0x821A42B8;
} // Block from 821A4288h-821A42B8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A42B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A42B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A42B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A42B8);
		  /* 821A42B8h */ case    0:  		/* li R4, 1 */
		/* 821A42B8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A42B8h case    0:*/		return 0x821A42BC;
		  /* 821A42BCh */ case    1:  		/* mr R3, R23 */
		/* 821A42BCh case    1:*/		regs.R3 = regs.R23;
		/* 821A42BCh case    1:*/		return 0x821A42C0;
		  /* 821A42C0h */ case    2:  		/* bl -21512 */
		/* 821A42C0h case    2:*/		regs.LR = 0x821A42C4; return 0x8219EEB8;
		/* 821A42C0h case    2:*/		return 0x821A42C4;
	}
	return 0x821A42C4;
} // Block from 821A42B8h-821A42C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A42C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A42C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A42C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A42C4);
		  /* 821A42C4h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A42C4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A42C4h case    0:*/		return 0x821A42C8;
		  /* 821A42C8h */ case    1:  		/* ld R10, <#[R1 + 96]> */
		/* 821A42C8h case    1:*/		cpu::mem::load64( regs, &regs.R10, (uint32)(regs.R1 + 0x00000060) );
		/* 821A42C8h case    1:*/		return 0x821A42CC;
		  /* 821A42CCh */ case    2:  		/* addi R9, R11, 2 */
		/* 821A42CCh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x2);
		/* 821A42CCh case    2:*/		return 0x821A42D0;
		  /* 821A42D0h */ case    3:  		/* addi R8, R11, 1 */
		/* 821A42D0h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x1);
		/* 821A42D0h case    3:*/		return 0x821A42D4;
		  /* 821A42D4h */ case    4:  		/* rlwinm R11, R9, 3, 0, 28 */
		/* 821A42D4h case    4:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R11,regs.R9);
		/* 821A42D4h case    4:*/		return 0x821A42D8;
		  /* 821A42D8h */ case    5:  		/* stw R8, <#[R3 + 8]> */
		/* 821A42D8h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R3 + 0x00000008) );
		/* 821A42D8h case    5:*/		return 0x821A42DC;
		  /* 821A42DCh */ case    6:  		/* stdx R10, <#[R11 + R3]> */
		/* 821A42DCh case    6:*/		cpu::mem::store64( regs, regs.R10, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821A42DCh case    6:*/		return 0x821A42E0;
		  /* 821A42E0h */ case    7:  		/* b 144 */
		/* 821A42E0h case    7:*/		return 0x821A4370;
		/* 821A42E0h case    7:*/		return 0x821A42E4;
	}
	return 0x821A42E4;
} // Block from 821A42C4h-821A42E4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A42E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A42E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A42E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A42E4);
		  /* 821A42E4h */ case    0:  		/* cmplwi CR6, R11, 1 */
		/* 821A42E4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821A42E4h case    0:*/		return 0x821A42E8;
		  /* 821A42E8h */ case    1:  		/* bc 4, CR6_EQ, 136 */
		/* 821A42E8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4370;  }
		/* 821A42E8h case    1:*/		return 0x821A42EC;
		  /* 821A42ECh */ case    2:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A42ECh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A42ECh case    2:*/		return 0x821A42F0;
		  /* 821A42F0h */ case    3:  		/* cmplwi CR6, R11, 0 */
		/* 821A42F0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A42F0h case    3:*/		return 0x821A42F4;
		  /* 821A42F4h */ case    4:  		/* bc 4, CR6_EQ, 124 */
		/* 821A42F4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821A4370;  }
		/* 821A42F4h case    4:*/		return 0x821A42F8;
		  /* 821A42F8h */ case    5:  		/* cmpwi CR6, R25, 0 */
		/* 821A42F8h case    5:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000000);
		/* 821A42F8h case    5:*/		return 0x821A42FC;
		  /* 821A42FCh */ case    6:  		/* bc 4, CR6_EQ, 16 */
		/* 821A42FCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821A430C;  }
		/* 821A42FCh case    6:*/		return 0x821A4300;
		  /* 821A4300h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A4300h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A4300h case    7:*/		return 0x821A4304;
		  /* 821A4304h */ case    8:  		/* cmplw CR6, R4, R11 */
		/* 821A4304h case    8:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R11);
		/* 821A4304h case    8:*/		return 0x821A4308;
		  /* 821A4308h */ case    9:  		/* bc 12, CR6_EQ, 20 */
		/* 821A4308h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A431C;  }
		/* 821A4308h case    9:*/		return 0x821A430C;
	}
	return 0x821A430C;
} // Block from 821A42E4h-821A430Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A430Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A430C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A430C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A430C);
		  /* 821A430Ch */ case    0:  		/* mr R3, R26 */
		/* 821A430Ch case    0:*/		regs.R3 = regs.R26;
		/* 821A430Ch case    0:*/		return 0x821A4310;
		  /* 821A4310h */ case    1:  		/* lwz R5, <#[R1 + 84]> */
		/* 821A4310h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A4310h case    1:*/		return 0x821A4314;
		  /* 821A4314h */ case    2:  		/* bl -180740 */
		/* 821A4314h case    2:*/		regs.LR = 0x821A4318; return 0x82178110;
		/* 821A4314h case    2:*/		return 0x821A4318;
		  /* 821A4318h */ case    3:  		/* mr R31, R3 */
		/* 821A4318h case    3:*/		regs.R31 = regs.R3;
		/* 821A4318h case    3:*/		return 0x821A431C;
	}
	return 0x821A431C;
} // Block from 821A430Ch-821A431Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A431Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A431C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A431C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A431C);
		  /* 821A431Ch */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821A431Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A431Ch case    0:*/		return 0x821A4320;
		  /* 821A4320h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A4320h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A4320h case    1:*/		return 0x821A4324;
		  /* 821A4324h */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821A4324h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A434C;  }
		/* 821A4324h case    2:*/		return 0x821A4328;
		  /* 821A4328h */ case    3:  		/* lwz R11, <#[R30]> */
		/* 821A4328h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A4328h case    3:*/		return 0x821A432C;
		  /* 821A432Ch */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A432Ch case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A432Ch case    4:*/		return 0x821A4330;
		  /* 821A4330h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821A4330h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821A4330h case    5:*/		return 0x821A4334;
		  /* 821A4334h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821A4334h case    6:*/		if ( regs.CR[0].eq ) { return 0x821A434C;  }
		/* 821A4334h case    6:*/		return 0x821A4338;
		  /* 821A4338h */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A4338h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A4338h case    7:*/		return 0x821A433C;
		  /* 821A433Ch */ case    8:  		/* lwz R10, <#[R3 + 12]> */
		/* 821A433Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A433Ch case    8:*/		return 0x821A4340;
		  /* 821A4340h */ case    9:  		/* addi R11, R11, 1 */
		/* 821A4340h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A4340h case    9:*/		return 0x821A4344;
		  /* 821A4344h */ case   10:  		/* cmplw CR6, R11, R10 */
		/* 821A4344h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A4344h case   10:*/		return 0x821A4348;
		  /* 821A4348h */ case   11:  		/* bc 4, CR6_GT, 16 */
		/* 821A4348h case   11:*/		if ( !regs.CR[6].gt ) { return 0x821A4358;  }
		/* 821A4348h case   11:*/		return 0x821A434C;
	}
	return 0x821A434C;
} // Block from 821A431Ch-821A434Ch (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A434Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A434C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A434C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A434C);
		  /* 821A434Ch */ case    0:  		/* li R4, 1 */
		/* 821A434Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A434Ch case    0:*/		return 0x821A4350;
		  /* 821A4350h */ case    1:  		/* mr R3, R30 */
		/* 821A4350h case    1:*/		regs.R3 = regs.R30;
		/* 821A4350h case    1:*/		return 0x821A4354;
		  /* 821A4354h */ case    2:  		/* bl -94860 */
		/* 821A4354h case    2:*/		regs.LR = 0x821A4358; return 0x8218D0C8;
		/* 821A4354h case    2:*/		return 0x821A4358;
	}
	return 0x821A4358;
} // Block from 821A434Ch-821A4358h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A4358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4358);
		  /* 821A4358h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A4358h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A4358h case    0:*/		return 0x821A435C;
		  /* 821A435Ch */ case    1:  		/* addi R10, R11, 4 */
		/* 821A435Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821A435Ch case    1:*/		return 0x821A4360;
		  /* 821A4360h */ case    2:  		/* addi R9, R11, 1 */
		/* 821A4360h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821A4360h case    2:*/		return 0x821A4364;
		  /* 821A4364h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821A4364h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821A4364h case    3:*/		return 0x821A4368;
		  /* 821A4368h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821A4368h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821A4368h case    4:*/		return 0x821A436C;
		  /* 821A436Ch */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821A436Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821A436Ch case    5:*/		return 0x821A4370;
	}
	return 0x821A4370;
} // Block from 821A4358h-821A4370h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A4370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4370);
		  /* 821A4370h */ case    0:  		/* addi R27, R27, 1 */
		/* 821A4370h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A4370h case    0:*/		return 0x821A4374;
		  /* 821A4374h */ case    1:  		/* addi R28, R28, 4 */
		/* 821A4374h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821A4374h case    1:*/		return 0x821A4378;
		  /* 821A4378h */ case    2:  		/* b -360 */
		/* 821A4378h case    2:*/		return 0x821A4210;
		/* 821A4378h case    2:*/		return 0x821A437C;
	}
	return 0x821A437C;
} // Block from 821A4370h-821A437Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A437Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A437C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A437C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A437C);
		  /* 821A437Ch */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821A437Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A437Ch case    0:*/		return 0x821A4380;
		  /* 821A4380h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A4380h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A4380h case    1:*/		return 0x821A4384;
		  /* 821A4384h */ case    2:  		/* bc 4, CR0_EQ, 192 */
		/* 821A4384h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A4444;  }
		/* 821A4384h case    2:*/		return 0x821A4388;
		  /* 821A4388h */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821A4388h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A4388h case    3:*/		return 0x821A438C;
		  /* 821A438Ch */ case    4:  		/* bc 12, CR0_EQ, 184 */
		/* 821A438Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821A4444;  }
		/* 821A438Ch case    4:*/		return 0x821A4390;
		  /* 821A4390h */ case    5:  		/* lwz R11, <#[R30]> */
		/* 821A4390h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A4390h case    5:*/		return 0x821A4394;
		  /* 821A4394h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4394h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4394h case    6:*/		return 0x821A4398;
		  /* 821A4398h */ case    7:  		/* addi R4, R11, -4 */
		/* 821A4398h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821A4398h case    7:*/		return 0x821A439C;
		  /* 821A439Ch */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821A439Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821A439Ch case    8:*/		return 0x821A43A0;
		  /* 821A43A0h */ case    9:  		/* addi R10, R11, 3 */
		/* 821A43A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821A43A0h case    9:*/		return 0x821A43A4;
		  /* 821A43A4h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821A43A4h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A43A4h case   10:*/		return 0x821A43A8;
		  /* 821A43A8h */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821A43A8h case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821A43A8h case   11:*/		return 0x821A43AC;
		  /* 821A43ACh */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821A43ACh case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821A43ACh case   12:*/		return 0x821A43B0;
		  /* 821A43B0h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821A43B0h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A43B0h case   13:*/		return 0x821A43B4;
		  /* 821A43B4h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821A43B4h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821A43F0;  }
		/* 821A43B4h case   14:*/		return 0x821A43B8;
		  /* 821A43B8h */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821A43B8h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821A43B8h case   15:*/		return 0x821A43BC;
		  /* 821A43BCh */ case   16:  		/* mr R3, R30 */
		/* 821A43BCh case   16:*/		regs.R3 = regs.R30;
		/* 821A43BCh case   16:*/		return 0x821A43C0;
		  /* 821A43C0h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821A43C0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A43C0h case   17:*/		return 0x821A43C4;
		  /* 821A43C4h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821A43C4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A43C4h case   18:*/		return 0x821A43C8;
		  /* 821A43C8h */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821A43C8h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821A43C8h case   19:*/		return 0x821A43CC;
		  /* 821A43CCh */ case   20:  		/* stw R9, <#[R10]> */
		/* 821A43CCh case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A43CCh case   20:*/		return 0x821A43D0;
		  /* 821A43D0h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821A43D0h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A43D0h case   21:*/		return 0x821A43D4;
		  /* 821A43D4h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 821A43D4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821A43D4h case   22:*/		return 0x821A43D8;
		  /* 821A43D8h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A43D8h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A43D8h case   23:*/		return 0x821A43DC;
		  /* 821A43DCh */ case   24:  		/* stw R10, <#[R11]> */
		/* 821A43DCh case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A43DCh case   24:*/		return 0x821A43E0;
		  /* 821A43E0h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821A43E0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821A43E0h case   25:*/		return 0x821A43E4;
		  /* 821A43E4h */ case   26:  		/* addi R11, R11, 4 */
		/* 821A43E4h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A43E4h case   26:*/		return 0x821A43E8;
		  /* 821A43E8h */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821A43E8h case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821A43E8h case   27:*/		return 0x821A43EC;
		  /* 821A43ECh */ case   28:  		/* bl -337380 */
		/* 821A43ECh case   28:*/		regs.LR = 0x821A43F0; return 0x82151E08;
		/* 821A43ECh case   28:*/		return 0x821A43F0;
	}
	return 0x821A43F0;
} // Block from 821A437Ch-821A43F0h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A43F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A43F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A43F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A43F0);
		  /* 821A43F0h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821A43F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A43F0h case    0:*/		return 0x821A43F4;
		  /* 821A43F4h */ case    1:  		/* lwz R10, <#[R31 + 16]> */
		/* 821A43F4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 821A43F4h case    1:*/		return 0x821A43F8;
		  /* 821A43F8h */ case    2:  		/* lwz R29, <#[R31 + 12]> */
		/* 821A43F8h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A43F8h case    2:*/		return 0x821A43FC;
		  /* 821A43FCh */ case    3:  		/* rlwinm R25, R11, 27, 30, 31 */
		/* 821A43FCh case    3:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R25,regs.R11);
		/* 821A43FCh case    3:*/		return 0x821A4400;
		  /* 821A4400h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821A4400h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A4400h case    4:*/		return 0x821A4404;
		  /* 821A4404h */ case    5:  		/* bc 4, CR6_EQ, -508 */
		/* 821A4404h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A4208;  }
		/* 821A4404h case    5:*/		return 0x821A4408;
		  /* 821A4408h */ case    6:  		/* lwz R11, <#[R29 + 4]> */
		/* 821A4408h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821A4408h case    6:*/		return 0x821A440C;
		  /* 821A440Ch */ case    7:  		/* addi R10, R29, 4 */
		/* 821A440Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R29,0x4);
		/* 821A440Ch case    7:*/		return 0x821A4410;
		  /* 821A4410h */ case    8:  		/* b 12 */
		/* 821A4410h case    8:*/		return 0x821A441C;
		/* 821A4410h case    8:*/		return 0x821A4414;
		  /* 821A4414h */ case    9:  		/* addi R10, R11, 8 */
		/* 821A4414h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821A4414h case    9:*/		return 0x821A4418;
		  /* 821A4418h */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A4418h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4418h case   10:*/		return 0x821A441C;
	}
	return 0x821A441C;
} // Block from 821A43F0h-821A441Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A441Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A441C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A441C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A441C);
		  /* 821A441Ch */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 821A441Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A441Ch case    0:*/		return 0x821A4420;
		  /* 821A4420h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A4420h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4414;  }
		/* 821A4420h case    1:*/		return 0x821A4424;
		  /* 821A4424h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A4424h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4424h case    2:*/		return 0x821A4428;
		  /* 821A4428h */ case    3:  		/* li R6, 26 */
		/* 821A4428h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821A4428h case    3:*/		return 0x821A442C;
		  /* 821A442Ch */ case    4:  		/* li R5, 20 */
		/* 821A442Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821A442Ch case    4:*/		return 0x821A4430;
		  /* 821A4430h */ case    5:  		/* mr R4, R31 */
		/* 821A4430h case    5:*/		regs.R4 = regs.R31;
		/* 821A4430h case    5:*/		return 0x821A4434;
		  /* 821A4434h */ case    6:  		/* mr R3, R26 */
		/* 821A4434h case    6:*/		regs.R3 = regs.R26;
		/* 821A4434h case    6:*/		return 0x821A4438;
		  /* 821A4438h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821A4438h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4438h case    7:*/		return 0x821A443C;
		  /* 821A443Ch */ case    8:  		/* bl -260004 */
		/* 821A443Ch case    8:*/		regs.LR = 0x821A4440; return 0x82164C98;
		/* 821A443Ch case    8:*/		return 0x821A4440;
		  /* 821A4440h */ case    9:  		/* b -568 */
		/* 821A4440h case    9:*/		return 0x821A4208;
		/* 821A4440h case    9:*/		return 0x821A4444;
	}
	return 0x821A4444;
} // Block from 821A441Ch-821A4444h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A4444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4444);
		  /* 821A4444h */ case    0:  		/* lwz R10, <#[R26 + 976]> */
		/* 821A4444h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x000003D0) );
		/* 821A4444h case    0:*/		return 0x821A4448;
		  /* 821A4448h */ case    1:  		/* addi R11, R26, 972 */
		/* 821A4448h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x3CC);
		/* 821A4448h case    1:*/		return 0x821A444C;
		  /* 821A444Ch */ case    2:  		/* stw R10, <#[R30]> */
		/* 821A444Ch case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821A444Ch case    2:*/		return 0x821A4450;
		  /* 821A4450h */ case    3:  		/* stw R30, <#[R26 + 976]> */
		/* 821A4450h case    3:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R26 + 0x000003D0) );
		/* 821A4450h case    3:*/		return 0x821A4454;
		  /* 821A4454h */ case    4:  		/* addi R1, R1, 192 */
		/* 821A4454h case    4:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821A4454h case    4:*/		return 0x821A4458;
		  /* 821A4458h */ case    5:  		/* b -1126852 */
		/* 821A4458h case    5:*/		return 0x82091294;
		/* 821A4458h case    5:*/		return 0x821A445C;
		  /* 821A445Ch */ case    6:  		/* nop */
		/* 821A445Ch case    6:*/		cpu::op::nop();
		/* 821A445Ch case    6:*/		return 0x821A4460;
	}
	return 0x821A4460;
} // Block from 821A4444h-821A4460h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A4460h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4460( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4460) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4460);
		  /* 821A4460h */ case    0:  		/* mfspr R12, LR */
		/* 821A4460h case    0:*/		regs.R12 = regs.LR;
		/* 821A4460h case    0:*/		return 0x821A4464;
		  /* 821A4464h */ case    1:  		/* bl -1126956 */
		/* 821A4464h case    1:*/		regs.LR = 0x821A4468; return 0x82091238;
		/* 821A4464h case    1:*/		return 0x821A4468;
		  /* 821A4468h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821A4468h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821A4468h case    2:*/		return 0x821A446C;
		  /* 821A446Ch */ case    3:  		/* mr R25, R4 */
		/* 821A446Ch case    3:*/		regs.R25 = regs.R4;
		/* 821A446Ch case    3:*/		return 0x821A4470;
		  /* 821A4470h */ case    4:  		/* mr R22, R5 */
		/* 821A4470h case    4:*/		regs.R22 = regs.R5;
		/* 821A4470h case    4:*/		return 0x821A4474;
		  /* 821A4474h */ case    5:  		/* li R5, 28 */
		/* 821A4474h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 821A4474h case    5:*/		return 0x821A4478;
		  /* 821A4478h */ case    6:  		/* li R4, 8 */
		/* 821A4478h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821A4478h case    6:*/		return 0x821A447C;
		  /* 821A447Ch */ case    7:  		/* mr R26, R3 */
		/* 821A447Ch case    7:*/		regs.R26 = regs.R3;
		/* 821A447Ch case    7:*/		return 0x821A4480;
		  /* 821A4480h */ case    8:  		/* mr R21, R6 */
		/* 821A4480h case    8:*/		regs.R21 = regs.R6;
		/* 821A4480h case    8:*/		return 0x821A4484;
		  /* 821A4484h */ case    9:  		/* bl -261012 */
		/* 821A4484h case    9:*/		regs.LR = 0x821A4488; return 0x821648F0;
		/* 821A4484h case    9:*/		return 0x821A4488;
		  /* 821A4488h */ case   10:  		/* addi R20, R3, 4 */
		/* 821A4488h case   10:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R3,0x4);
		/* 821A4488h case   10:*/		return 0x821A448C;
		  /* 821A448Ch */ case   11:  		/* ori R11, R3, 1 */
		/* 821A448Ch case   11:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821A448Ch case   11:*/		return 0x821A4490;
		  /* 821A4490h */ case   12:  		/* ori R10, R20, 1 */
		/* 821A4490h case   12:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R20,0x1);
		/* 821A4490h case   12:*/		return 0x821A4494;
		  /* 821A4494h */ case   13:  		/* mr R27, R3 */
		/* 821A4494h case   13:*/		regs.R27 = regs.R3;
		/* 821A4494h case   13:*/		return 0x821A4498;
		  /* 821A4498h */ case   14:  		/* stw R11, <#[R3 + 4]> */
		/* 821A4498h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A4498h case   14:*/		return 0x821A449C;
		  /* 821A449Ch */ case   15:  		/* stw R10, <#[R3]> */
		/* 821A449Ch case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821A449Ch case   15:*/		return 0x821A44A0;
		  /* 821A44A0h */ case   16:  		/* li R23, 0 */
		/* 821A44A0h case   16:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821A44A0h case   16:*/		return 0x821A44A4;
		  /* 821A44A4h */ case   17:  		/* addi R24, R25, 44 */
		/* 821A44A4h case   17:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R25,0x2C);
		/* 821A44A4h case   17:*/		return 0x821A44A8;
		  /* 821A44A8h */ case   18:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A44A8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A44A8h case   18:*/		return 0x821A44AC;
		  /* 821A44ACh */ case   19:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A44ACh case   19:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A44ACh case   19:*/		return 0x821A44B0;
		  /* 821A44B0h */ case   20:  		/* cmplw CR6, R23, R11 */
		/* 821A44B0h case   20:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821A44B0h case   20:*/		return 0x821A44B4;
		  /* 821A44B4h */ case   21:  		/* bc 4, CR6_LT, 588 */
		/* 821A44B4h case   21:*/		if ( !regs.CR[6].lt ) { return 0x821A4700;  }
		/* 821A44B4h case   21:*/		return 0x821A44B8;
		  /* 821A44B8h */ case   22:  		/* lwz R28, <#[R24]> */
		/* 821A44B8h case   22:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x00000000) );
		/* 821A44B8h case   22:*/		return 0x821A44BC;
		  /* 821A44BCh */ case   23:  		/* li R10, 1 */
		/* 821A44BCh case   23:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821A44BCh case   23:*/		return 0x821A44C0;
		  /* 821A44C0h */ case   24:  		/* li R9, 0 */
		/* 821A44C0h case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A44C0h case   24:*/		return 0x821A44C4;
		  /* 821A44C4h */ case   25:  		/* lwz R8, <#[R25 + 28]> */
		/* 821A44C4h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821A44C4h case   25:*/		return 0x821A44C8;
		  /* 821A44C8h */ case   26:  		/* addi R7, R1, 88 */
		/* 821A44C8h case   26:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x58);
		/* 821A44C8h case   26:*/		return 0x821A44CC;
		  /* 821A44CCh */ case   27:  		/* addi R6, R1, 84 */
		/* 821A44CCh case   27:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x54);
		/* 821A44CCh case   27:*/		return 0x821A44D0;
		  /* 821A44D0h */ case   28:  		/* addi R5, R1, 80 */
		/* 821A44D0h case   28:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x50);
		/* 821A44D0h case   28:*/		return 0x821A44D4;
		  /* 821A44D4h */ case   29:  		/* mr R4, R22 */
		/* 821A44D4h case   29:*/		regs.R4 = regs.R22;
		/* 821A44D4h case   29:*/		return 0x821A44D8;
		  /* 821A44D8h */ case   30:  		/* mr R3, R28 */
		/* 821A44D8h case   30:*/		regs.R3 = regs.R28;
		/* 821A44D8h case   30:*/		return 0x821A44DC;
		  /* 821A44DCh */ case   31:  		/* bl 520180 */
		/* 821A44DCh case   31:*/		regs.LR = 0x821A44E0; return 0x822234D0;
		/* 821A44DCh case   31:*/		return 0x821A44E0;
		  /* 821A44E0h */ case   32:  		/* lwz R31, <#[R1 + 80]> */
		/* 821A44E0h case   32:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000050) );
		/* 821A44E0h case   32:*/		return 0x821A44E4;
		  /* 821A44E4h */ case   33:  		/* mr R3, R31 */
		/* 821A44E4h case   33:*/		regs.R3 = regs.R31;
		/* 821A44E4h case   33:*/		return 0x821A44E8;
		  /* 821A44E8h */ case   34:  		/* bl -34808 */
		/* 821A44E8h case   34:*/		regs.LR = 0x821A44EC; return 0x8219BCF0;
		/* 821A44E8h case   34:*/		return 0x821A44EC;
		  /* 821A44ECh */ case   35:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A44ECh case   35:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A44ECh case   35:*/		return 0x821A44F0;
		  /* 821A44F0h */ case   36:  		/* bc 4, CR0_EQ, 20 */
		/* 821A44F0h case   36:*/		if ( !regs.CR[0].eq ) { return 0x821A4504;  }
		/* 821A44F0h case   36:*/		return 0x821A44F4;
		  /* 821A44F4h */ case   37:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A44F4h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A44F4h case   37:*/		return 0x821A44F8;
		  /* 821A44F8h */ case   38:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A44F8h case   38:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A44F8h case   38:*/		return 0x821A44FC;
		  /* 821A44FCh */ case   39:  		/* cmplwi CR6, R11, 14336 */
		/* 821A44FCh case   39:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003800);
		/* 821A44FCh case   39:*/		return 0x821A4500;
		  /* 821A4500h */ case   40:  		/* bc 4, CR6_EQ, 500 */
		/* 821A4500h case   40:*/		if ( !regs.CR[6].eq ) { return 0x821A46F4;  }
		/* 821A4500h case   40:*/		return 0x821A4504;
	}
	return 0x821A4504;
} // Block from 821A4460h-821A4504h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821A4504h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4504( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4504) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4504);
		  /* 821A4504h */ case    0:  		/* lwz R30, <#[R31 + 8]> */
		/* 821A4504h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4504h case    0:*/		return 0x821A4508;
		  /* 821A4508h */ case    1:  		/* lwz R29, <#[R1 + 88]> */
		/* 821A4508h case    1:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000058) );
		/* 821A4508h case    1:*/		return 0x821A450C;
		  /* 821A450Ch */ case    2:  		/* rlwinm R11, R30, 0, 18, 24 */
		/* 821A450Ch case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R30);
		/* 821A450Ch case    2:*/		return 0x821A4510;
		  /* 821A4510h */ case    3:  		/* cmplwi CR6, R11, 384 */
		/* 821A4510h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821A4510h case    3:*/		return 0x821A4514;
		  /* 821A4514h */ case    4:  		/* bc 4, CR6_EQ, 272 */
		/* 821A4514h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821A4624;  }
		/* 821A4514h case    4:*/		return 0x821A4518;
		  /* 821A4518h */ case    5:  		/* cmplwi CR6, R29, 0 */
		/* 821A4518h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A4518h case    5:*/		return 0x821A451C;
		  /* 821A451Ch */ case    6:  		/* bc 4, CR6_EQ, 264 */
		/* 821A451Ch case    6:*/		if ( !regs.CR[6].eq ) { return 0x821A4624;  }
		/* 821A451Ch case    6:*/		return 0x821A4520;
		  /* 821A4520h */ case    7:  		/* lwz R4, <#[R31 + 48]> */
		/* 821A4520h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000030) );
		/* 821A4520h case    7:*/		return 0x821A4524;
		  /* 821A4524h */ case    8:  		/* lwz R3, <#[R31 + 44]> */
		/* 821A4524h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x0000002C) );
		/* 821A4524h case    8:*/		return 0x821A4528;
		  /* 821A4528h */ case    9:  		/* bl -262816 */
		/* 821A4528h case    9:*/		regs.LR = 0x821A452C; return 0x82164288;
		/* 821A4528h case    9:*/		return 0x821A452C;
		  /* 821A452Ch */ case   10:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A452Ch case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A452Ch case   10:*/		return 0x821A4530;
		  /* 821A4530h */ case   11:  		/* bc 4, CR0_EQ, 244 */
		/* 821A4530h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821A4624;  }
		/* 821A4530h case   11:*/		return 0x821A4534;
		  /* 821A4534h */ case   12:  		/* rlwinm. R11, R30, 6, 31, 31 */
		/* 821A4534h case   12:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R11,regs.R30);
		/* 821A4534h case   12:*/		return 0x821A4538;
		  /* 821A4538h */ case   13:  		/* bc 4, CR0_EQ, 444 */
		/* 821A4538h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821A46F4;  }
		/* 821A4538h case   13:*/		return 0x821A453C;
		  /* 821A453Ch */ case   14:  		/* cmpwi CR6, R22, 0 */
		/* 821A453Ch case   14:*/		cpu::op::cmpwi<6>(regs,regs.R22,0x00000000);
		/* 821A453Ch case   14:*/		return 0x821A4540;
		  /* 821A4540h */ case   15:  		/* bc 4, CR6_EQ, 104 */
		/* 821A4540h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821A45A8;  }
		/* 821A4540h case   15:*/		return 0x821A4544;
		  /* 821A4544h */ case   16:  		/* lwz R11, <#[R28 + 12]> */
		/* 821A4544h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A4544h case   16:*/		return 0x821A4548;
		  /* 821A4548h */ case   17:  		/* cmplw CR6, R31, R11 */
		/* 821A4548h case   17:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821A4548h case   17:*/		return 0x821A454C;
		  /* 821A454Ch */ case   18:  		/* bc 4, CR6_EQ, 92 */
		/* 821A454Ch case   18:*/		if ( !regs.CR[6].eq ) { return 0x821A45A8;  }
		/* 821A454Ch case   18:*/		return 0x821A4550;
		  /* 821A4550h */ case   19:  		/* lwz R11, <#[R20]> */
		/* 821A4550h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A4550h case   19:*/		return 0x821A4554;
		  /* 821A4554h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A4554h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A4554h case   20:*/		return 0x821A4558;
		  /* 821A4558h */ case   21:  		/* bc 4, CR0_EQ, 40 */
		/* 821A4558h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821A4580;  }
		/* 821A4558h case   21:*/		return 0x821A455C;
		  /* 821A455Ch */ case   22:  		/* lwz R11, <#[R27]> */
		/* 821A455Ch case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A455Ch case   22:*/		return 0x821A4560;
		  /* 821A4560h */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4560h case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4560h case   23:*/		return 0x821A4564;
		  /* 821A4564h */ case   24:  		/* addic. R3, R11, -4 */
		/* 821A4564h case   24:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821A4564h case   24:*/		return 0x821A4568;
		  /* 821A4568h */ case   25:  		/* bc 12, CR0_EQ, 24 */
		/* 821A4568h case   25:*/		if ( regs.CR[0].eq ) { return 0x821A4580;  }
		/* 821A4568h case   25:*/		return 0x821A456C;
		  /* 821A456Ch */ case   26:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A456Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A456Ch case   26:*/		return 0x821A4570;
		  /* 821A4570h */ case   27:  		/* lwz R10, <#[R3 + 12]> */
		/* 821A4570h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A4570h case   27:*/		return 0x821A4574;
		  /* 821A4574h */ case   28:  		/* addi R11, R11, 1 */
		/* 821A4574h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A4574h case   28:*/		return 0x821A4578;
		  /* 821A4578h */ case   29:  		/* cmplw CR6, R11, R10 */
		/* 821A4578h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A4578h case   29:*/		return 0x821A457C;
		  /* 821A457Ch */ case   30:  		/* bc 4, CR6_GT, 16 */
		/* 821A457Ch case   30:*/		if ( !regs.CR[6].gt ) { return 0x821A458C;  }
		/* 821A457Ch case   30:*/		return 0x821A4580;
	}
	return 0x821A4580;
} // Block from 821A4504h-821A4580h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821A4580h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4580( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4580) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4580);
		  /* 821A4580h */ case    0:  		/* li R4, 1 */
		/* 821A4580h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A4580h case    0:*/		return 0x821A4584;
		  /* 821A4584h */ case    1:  		/* mr R3, R27 */
		/* 821A4584h case    1:*/		regs.R3 = regs.R27;
		/* 821A4584h case    1:*/		return 0x821A4588;
		  /* 821A4588h */ case    2:  		/* bl -95424 */
		/* 821A4588h case    2:*/		regs.LR = 0x821A458C; return 0x8218D0C8;
		/* 821A4588h case    2:*/		return 0x821A458C;
	}
	return 0x821A458C;
} // Block from 821A4580h-821A458Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A458Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A458C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A458C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A458C);
		  /* 821A458Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A458Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A458Ch case    0:*/		return 0x821A4590;
		  /* 821A4590h */ case    1:  		/* addi R10, R11, 4 */
		/* 821A4590h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821A4590h case    1:*/		return 0x821A4594;
		  /* 821A4594h */ case    2:  		/* addi R9, R11, 1 */
		/* 821A4594h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821A4594h case    2:*/		return 0x821A4598;
		  /* 821A4598h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821A4598h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821A4598h case    3:*/		return 0x821A459C;
		  /* 821A459Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821A459Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821A459Ch case    4:*/		return 0x821A45A0;
		  /* 821A45A0h */ case    5:  		/* stwx R28, <#[R11 + R3]> */
		/* 821A45A0h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821A45A0h case    5:*/		return 0x821A45A4;
		  /* 821A45A4h */ case    6:  		/* b 108 */
		/* 821A45A4h case    6:*/		return 0x821A4610;
		/* 821A45A4h case    6:*/		return 0x821A45A8;
	}
	return 0x821A45A8;
} // Block from 821A458Ch-821A45A8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A45A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A45A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A45A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A45A8);
		  /* 821A45A8h */ case    0:  		/* mr R4, R31 */
		/* 821A45A8h case    0:*/		regs.R4 = regs.R31;
		/* 821A45A8h case    0:*/		return 0x821A45AC;
		  /* 821A45ACh */ case    1:  		/* lwz R5, <#[R1 + 84]> */
		/* 821A45ACh case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A45ACh case    1:*/		return 0x821A45B0;
		  /* 821A45B0h */ case    2:  		/* mr R3, R26 */
		/* 821A45B0h case    2:*/		regs.R3 = regs.R26;
		/* 821A45B0h case    2:*/		return 0x821A45B4;
		  /* 821A45B4h */ case    3:  		/* bl -181412 */
		/* 821A45B4h case    3:*/		regs.LR = 0x821A45B8; return 0x82178110;
		/* 821A45B4h case    3:*/		return 0x821A45B8;
		  /* 821A45B8h */ case    4:  		/* lwz R11, <#[R20]> */
		/* 821A45B8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A45B8h case    4:*/		return 0x821A45BC;
		  /* 821A45BCh */ case    5:  		/* mr R31, R3 */
		/* 821A45BCh case    5:*/		regs.R31 = regs.R3;
		/* 821A45BCh case    5:*/		return 0x821A45C0;
		  /* 821A45C0h */ case    6:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A45C0h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A45C0h case    6:*/		return 0x821A45C4;
		  /* 821A45C4h */ case    7:  		/* bc 4, CR0_EQ, 40 */
		/* 821A45C4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821A45EC;  }
		/* 821A45C4h case    7:*/		return 0x821A45C8;
		  /* 821A45C8h */ case    8:  		/* lwz R11, <#[R27]> */
		/* 821A45C8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A45C8h case    8:*/		return 0x821A45CC;
		  /* 821A45CCh */ case    9:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A45CCh case    9:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A45CCh case    9:*/		return 0x821A45D0;
		  /* 821A45D0h */ case   10:  		/* addic. R3, R11, -4 */
		/* 821A45D0h case   10:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821A45D0h case   10:*/		return 0x821A45D4;
		  /* 821A45D4h */ case   11:  		/* bc 12, CR0_EQ, 24 */
		/* 821A45D4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A45EC;  }
		/* 821A45D4h case   11:*/		return 0x821A45D8;
		  /* 821A45D8h */ case   12:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A45D8h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A45D8h case   12:*/		return 0x821A45DC;
		  /* 821A45DCh */ case   13:  		/* lwz R10, <#[R3 + 12]> */
		/* 821A45DCh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A45DCh case   13:*/		return 0x821A45E0;
		  /* 821A45E0h */ case   14:  		/* addi R11, R11, 1 */
		/* 821A45E0h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A45E0h case   14:*/		return 0x821A45E4;
		  /* 821A45E4h */ case   15:  		/* cmplw CR6, R11, R10 */
		/* 821A45E4h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A45E4h case   15:*/		return 0x821A45E8;
		  /* 821A45E8h */ case   16:  		/* bc 4, CR6_GT, 16 */
		/* 821A45E8h case   16:*/		if ( !regs.CR[6].gt ) { return 0x821A45F8;  }
		/* 821A45E8h case   16:*/		return 0x821A45EC;
	}
	return 0x821A45EC;
} // Block from 821A45A8h-821A45ECh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A45ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A45EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A45EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A45EC);
		  /* 821A45ECh */ case    0:  		/* li R4, 1 */
		/* 821A45ECh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A45ECh case    0:*/		return 0x821A45F0;
		  /* 821A45F0h */ case    1:  		/* mr R3, R27 */
		/* 821A45F0h case    1:*/		regs.R3 = regs.R27;
		/* 821A45F0h case    1:*/		return 0x821A45F4;
		  /* 821A45F4h */ case    2:  		/* bl -95532 */
		/* 821A45F4h case    2:*/		regs.LR = 0x821A45F8; return 0x8218D0C8;
		/* 821A45F4h case    2:*/		return 0x821A45F8;
	}
	return 0x821A45F8;
} // Block from 821A45ECh-821A45F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A45F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A45F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A45F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A45F8);
		  /* 821A45F8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A45F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A45F8h case    0:*/		return 0x821A45FC;
		  /* 821A45FCh */ case    1:  		/* addi R10, R11, 4 */
		/* 821A45FCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821A45FCh case    1:*/		return 0x821A4600;
		  /* 821A4600h */ case    2:  		/* addi R9, R11, 1 */
		/* 821A4600h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821A4600h case    2:*/		return 0x821A4604;
		  /* 821A4604h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821A4604h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821A4604h case    3:*/		return 0x821A4608;
		  /* 821A4608h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821A4608h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821A4608h case    4:*/		return 0x821A460C;
		  /* 821A460Ch */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821A460Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821A460Ch case    5:*/		return 0x821A4610;
	}
	return 0x821A4610;
} // Block from 821A45F8h-821A4610h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A4610h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4610( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4610) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4610);
		  /* 821A4610h */ case    0:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A4610h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A4610h case    0:*/		return 0x821A4614;
		  /* 821A4614h */ case    1:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A4614h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4614h case    1:*/		return 0x821A4618;
		  /* 821A4618h */ case    2:  		/* oris R10, R10, 1024 */
		/* 821A4618h case    2:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R10,0x400);
		/* 821A4618h case    2:*/		return 0x821A461C;
		  /* 821A461Ch */ case    3:  		/* stw R10, <#[R11 + 8]> */
		/* 821A461Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A461Ch case    3:*/		return 0x821A4620;
		  /* 821A4620h */ case    4:  		/* b 212 */
		/* 821A4620h case    4:*/		return 0x821A46F4;
		/* 821A4620h case    4:*/		return 0x821A4624;
	}
	return 0x821A4624;
} // Block from 821A4610h-821A4624h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A4624h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4624( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4624) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4624);
		  /* 821A4624h */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821A4624h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A4624h case    0:*/		return 0x821A4628;
		  /* 821A4628h */ case    1:  		/* cmplw CR6, R31, R11 */
		/* 821A4628h case    1:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821A4628h case    1:*/		return 0x821A462C;
		  /* 821A462Ch */ case    2:  		/* bc 4, CR6_EQ, 92 */
		/* 821A462Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A4688;  }
		/* 821A462Ch case    2:*/		return 0x821A4630;
		  /* 821A4630h */ case    3:  		/* lwz R11, <#[R21 + 4]> */
		/* 821A4630h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821A4630h case    3:*/		return 0x821A4634;
		  /* 821A4634h */ case    4:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A4634h case    4:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A4634h case    4:*/		return 0x821A4638;
		  /* 821A4638h */ case    5:  		/* bc 4, CR0_EQ, 40 */
		/* 821A4638h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821A4660;  }
		/* 821A4638h case    5:*/		return 0x821A463C;
		  /* 821A463Ch */ case    6:  		/* lwz R11, <#[R21]> */
		/* 821A463Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821A463Ch case    6:*/		return 0x821A4640;
		  /* 821A4640h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4640h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4640h case    7:*/		return 0x821A4644;
		  /* 821A4644h */ case    8:  		/* addic. R3, R11, -4 */
		/* 821A4644h case    8:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821A4644h case    8:*/		return 0x821A4648;
		  /* 821A4648h */ case    9:  		/* bc 12, CR0_EQ, 24 */
		/* 821A4648h case    9:*/		if ( regs.CR[0].eq ) { return 0x821A4660;  }
		/* 821A4648h case    9:*/		return 0x821A464C;
		  /* 821A464Ch */ case   10:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A464Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A464Ch case   10:*/		return 0x821A4650;
		  /* 821A4650h */ case   11:  		/* lwz R10, <#[R3 + 12]> */
		/* 821A4650h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A4650h case   11:*/		return 0x821A4654;
		  /* 821A4654h */ case   12:  		/* addi R11, R11, 1 */
		/* 821A4654h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A4654h case   12:*/		return 0x821A4658;
		  /* 821A4658h */ case   13:  		/* cmplw CR6, R11, R10 */
		/* 821A4658h case   13:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A4658h case   13:*/		return 0x821A465C;
		  /* 821A465Ch */ case   14:  		/* bc 4, CR6_GT, 16 */
		/* 821A465Ch case   14:*/		if ( !regs.CR[6].gt ) { return 0x821A466C;  }
		/* 821A465Ch case   14:*/		return 0x821A4660;
	}
	return 0x821A4660;
} // Block from 821A4624h-821A4660h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A4660h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4660);
		  /* 821A4660h */ case    0:  		/* li R4, 1 */
		/* 821A4660h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A4660h case    0:*/		return 0x821A4664;
		  /* 821A4664h */ case    1:  		/* mr R3, R21 */
		/* 821A4664h case    1:*/		regs.R3 = regs.R21;
		/* 821A4664h case    1:*/		return 0x821A4668;
		  /* 821A4668h */ case    2:  		/* bl -95648 */
		/* 821A4668h case    2:*/		regs.LR = 0x821A466C; return 0x8218D0C8;
		/* 821A4668h case    2:*/		return 0x821A466C;
	}
	return 0x821A466C;
} // Block from 821A4660h-821A466Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A466Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A466C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A466C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A466C);
		  /* 821A466Ch */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A466Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A466Ch case    0:*/		return 0x821A4670;
		  /* 821A4670h */ case    1:  		/* addi R10, R11, 4 */
		/* 821A4670h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821A4670h case    1:*/		return 0x821A4674;
		  /* 821A4674h */ case    2:  		/* addi R9, R11, 1 */
		/* 821A4674h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821A4674h case    2:*/		return 0x821A4678;
		  /* 821A4678h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821A4678h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821A4678h case    3:*/		return 0x821A467C;
		  /* 821A467Ch */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821A467Ch case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821A467Ch case    4:*/		return 0x821A4680;
		  /* 821A4680h */ case    5:  		/* stwx R28, <#[R11 + R3]> */
		/* 821A4680h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821A4680h case    5:*/		return 0x821A4684;
		  /* 821A4684h */ case    6:  		/* b 112 */
		/* 821A4684h case    6:*/		return 0x821A46F4;
		/* 821A4684h case    6:*/		return 0x821A4688;
	}
	return 0x821A4688;
} // Block from 821A466Ch-821A4688h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A4688h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4688( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4688) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4688);
		  /* 821A4688h */ case    0:  		/* mr R6, R29 */
		/* 821A4688h case    0:*/		regs.R6 = regs.R29;
		/* 821A4688h case    0:*/		return 0x821A468C;
		  /* 821A468Ch */ case    1:  		/* lwz R5, <#[R1 + 84]> */
		/* 821A468Ch case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A468Ch case    1:*/		return 0x821A4690;
		  /* 821A4690h */ case    2:  		/* mr R4, R31 */
		/* 821A4690h case    2:*/		regs.R4 = regs.R31;
		/* 821A4690h case    2:*/		return 0x821A4694;
		  /* 821A4694h */ case    3:  		/* mr R3, R26 */
		/* 821A4694h case    3:*/		regs.R3 = regs.R26;
		/* 821A4694h case    3:*/		return 0x821A4698;
		  /* 821A4698h */ case    4:  		/* bl -181552 */
		/* 821A4698h case    4:*/		regs.LR = 0x821A469C; return 0x82178168;
		/* 821A4698h case    4:*/		return 0x821A469C;
		  /* 821A469Ch */ case    5:  		/* lwz R11, <#[R21 + 4]> */
		/* 821A469Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821A469Ch case    5:*/		return 0x821A46A0;
		  /* 821A46A0h */ case    6:  		/* mr R31, R3 */
		/* 821A46A0h case    6:*/		regs.R31 = regs.R3;
		/* 821A46A0h case    6:*/		return 0x821A46A4;
		  /* 821A46A4h */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A46A4h case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A46A4h case    7:*/		return 0x821A46A8;
		  /* 821A46A8h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821A46A8h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821A46D0;  }
		/* 821A46A8h case    8:*/		return 0x821A46AC;
		  /* 821A46ACh */ case    9:  		/* lwz R11, <#[R21]> */
		/* 821A46ACh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821A46ACh case    9:*/		return 0x821A46B0;
		  /* 821A46B0h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A46B0h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A46B0h case   10:*/		return 0x821A46B4;
		  /* 821A46B4h */ case   11:  		/* addic. R3, R11, -4 */
		/* 821A46B4h case   11:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821A46B4h case   11:*/		return 0x821A46B8;
		  /* 821A46B8h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821A46B8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A46D0;  }
		/* 821A46B8h case   12:*/		return 0x821A46BC;
		  /* 821A46BCh */ case   13:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A46BCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A46BCh case   13:*/		return 0x821A46C0;
		  /* 821A46C0h */ case   14:  		/* lwz R10, <#[R3 + 12]> */
		/* 821A46C0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A46C0h case   14:*/		return 0x821A46C4;
		  /* 821A46C4h */ case   15:  		/* addi R11, R11, 1 */
		/* 821A46C4h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A46C4h case   15:*/		return 0x821A46C8;
		  /* 821A46C8h */ case   16:  		/* cmplw CR6, R11, R10 */
		/* 821A46C8h case   16:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A46C8h case   16:*/		return 0x821A46CC;
		  /* 821A46CCh */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 821A46CCh case   17:*/		if ( !regs.CR[6].gt ) { return 0x821A46DC;  }
		/* 821A46CCh case   17:*/		return 0x821A46D0;
	}
	return 0x821A46D0;
} // Block from 821A4688h-821A46D0h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A46D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A46D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A46D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A46D0);
		  /* 821A46D0h */ case    0:  		/* li R4, 1 */
		/* 821A46D0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A46D0h case    0:*/		return 0x821A46D4;
		  /* 821A46D4h */ case    1:  		/* mr R3, R21 */
		/* 821A46D4h case    1:*/		regs.R3 = regs.R21;
		/* 821A46D4h case    1:*/		return 0x821A46D8;
		  /* 821A46D8h */ case    2:  		/* bl -95760 */
		/* 821A46D8h case    2:*/		regs.LR = 0x821A46DC; return 0x8218D0C8;
		/* 821A46D8h case    2:*/		return 0x821A46DC;
	}
	return 0x821A46DC;
} // Block from 821A46D0h-821A46DCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A46DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A46DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A46DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A46DC);
		  /* 821A46DCh */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A46DCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A46DCh case    0:*/		return 0x821A46E0;
		  /* 821A46E0h */ case    1:  		/* addi R10, R11, 4 */
		/* 821A46E0h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821A46E0h case    1:*/		return 0x821A46E4;
		  /* 821A46E4h */ case    2:  		/* addi R9, R11, 1 */
		/* 821A46E4h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821A46E4h case    2:*/		return 0x821A46E8;
		  /* 821A46E8h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821A46E8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821A46E8h case    3:*/		return 0x821A46EC;
		  /* 821A46ECh */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821A46ECh case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821A46ECh case    4:*/		return 0x821A46F0;
	}
	return 0x821A46F0;
} // Block from 821A46DCh-821A46F0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A46F0h
// Function '?RevertPendingStack@Compiler@D3DXShader@@AAAPAVInstruction@2@K_NPAV32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A46F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A46F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A46F0);
		  /* 821A46F0h */ case    0:  		/* stwx R31, <#[R11 + R3]> */
		/* 821A46F0h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821A46F0h case    0:*/		return 0x821A46F4;
	}
	return 0x821A46F4;
} // Block from 821A46F0h-821A46F4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A46F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A46F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A46F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A46F4);
		  /* 821A46F4h */ case    0:  		/* addi R23, R23, 1 */
		/* 821A46F4h case    0:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821A46F4h case    0:*/		return 0x821A46F8;
		  /* 821A46F8h */ case    1:  		/* addi R24, R24, 4 */
		/* 821A46F8h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 821A46F8h case    1:*/		return 0x821A46FC;
		  /* 821A46FCh */ case    2:  		/* b -596 */
		/* 821A46FCh case    2:*/		return 0x821A44A8;
		/* 821A46FCh case    2:*/		return 0x821A4700;
	}
	return 0x821A4700;
} // Block from 821A46F4h-821A4700h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A4700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4700);
		  /* 821A4700h */ case    0:  		/* lwz R11, <#[R20]> */
		/* 821A4700h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A4700h case    0:*/		return 0x821A4704;
		  /* 821A4704h */ case    1:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A4704h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A4704h case    1:*/		return 0x821A4708;
		  /* 821A4708h */ case    2:  		/* bc 4, CR0_EQ, 192 */
		/* 821A4708h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A47C8;  }
		/* 821A4708h case    2:*/		return 0x821A470C;
		  /* 821A470Ch */ case    3:  		/* cmplwi CR0, R11, 0 */
		/* 821A470Ch case    3:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A470Ch case    3:*/		return 0x821A4710;
		  /* 821A4710h */ case    4:  		/* bc 12, CR0_EQ, 184 */
		/* 821A4710h case    4:*/		if ( regs.CR[0].eq ) { return 0x821A47C8;  }
		/* 821A4710h case    4:*/		return 0x821A4714;
		  /* 821A4714h */ case    5:  		/* lwz R11, <#[R27]> */
		/* 821A4714h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A4714h case    5:*/		return 0x821A4718;
		  /* 821A4718h */ case    6:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4718h case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4718h case    6:*/		return 0x821A471C;
		  /* 821A471Ch */ case    7:  		/* addi R4, R11, -4 */
		/* 821A471Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821A471Ch case    7:*/		return 0x821A4720;
		  /* 821A4720h */ case    8:  		/* lwz R11, <#[R11 + 4]> */
		/* 821A4720h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4720h case    8:*/		return 0x821A4724;
		  /* 821A4724h */ case    9:  		/* addi R10, R11, 3 */
		/* 821A4724h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821A4724h case    9:*/		return 0x821A4728;
		  /* 821A4728h */ case   10:  		/* addic. R11, R11, -1 */
		/* 821A4728h case   10:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A4728h case   10:*/		return 0x821A472C;
		  /* 821A472Ch */ case   11:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821A472Ch case   11:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821A472Ch case   11:*/		return 0x821A4730;
		  /* 821A4730h */ case   12:  		/* lwzx R31, <#[R10 + R4]> */
		/* 821A4730h case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821A4730h case   12:*/		return 0x821A4734;
		  /* 821A4734h */ case   13:  		/* stw R11, <#[R4 + 8]> */
		/* 821A4734h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A4734h case   13:*/		return 0x821A4738;
		  /* 821A4738h */ case   14:  		/* bc 4, CR0_EQ, 60 */
		/* 821A4738h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821A4774;  }
		/* 821A4738h case   14:*/		return 0x821A473C;
		  /* 821A473Ch */ case   15:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821A473Ch case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821A473Ch case   15:*/		return 0x821A4740;
		  /* 821A4740h */ case   16:  		/* mr R3, R27 */
		/* 821A4740h case   16:*/		regs.R3 = regs.R27;
		/* 821A4740h case   16:*/		return 0x821A4744;
		  /* 821A4744h */ case   17:  		/* lwz R10, <#[R11 + 4]> */
		/* 821A4744h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4744h case   17:*/		return 0x821A4748;
		  /* 821A4748h */ case   18:  		/* lwz R9, <#[R11]> */
		/* 821A4748h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4748h case   18:*/		return 0x821A474C;
		  /* 821A474Ch */ case   19:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821A474Ch case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821A474Ch case   19:*/		return 0x821A4750;
		  /* 821A4750h */ case   20:  		/* stw R9, <#[R10]> */
		/* 821A4750h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4750h case   20:*/		return 0x821A4754;
		  /* 821A4754h */ case   21:  		/* lwz R10, <#[R11 + 4]> */
		/* 821A4754h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4754h case   21:*/		return 0x821A4758;
		  /* 821A4758h */ case   22:  		/* lwz R11, <#[R11]> */
		/* 821A4758h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4758h case   22:*/		return 0x821A475C;
		  /* 821A475Ch */ case   23:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A475Ch case   23:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A475Ch case   23:*/		return 0x821A4760;
		  /* 821A4760h */ case   24:  		/* stw R10, <#[R11]> */
		/* 821A4760h case   24:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4760h case   24:*/		return 0x821A4764;
		  /* 821A4764h */ case   25:  		/* lwz R11, <#[R4 + 12]> */
		/* 821A4764h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821A4764h case   25:*/		return 0x821A4768;
		  /* 821A4768h */ case   26:  		/* addi R11, R11, 4 */
		/* 821A4768h case   26:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A4768h case   26:*/		return 0x821A476C;
		  /* 821A476Ch */ case   27:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821A476Ch case   27:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821A476Ch case   27:*/		return 0x821A4770;
		  /* 821A4770h */ case   28:  		/* bl -338280 */
		/* 821A4770h case   28:*/		regs.LR = 0x821A4774; return 0x82151E08;
		/* 821A4770h case   28:*/		return 0x821A4774;
	}
	return 0x821A4774;
} // Block from 821A4700h-821A4774h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A4774h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4774( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4774) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4774);
		  /* 821A4774h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821A4774h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A4774h case    0:*/		return 0x821A4778;
		  /* 821A4778h */ case    1:  		/* lwz R10, <#[R31 + 16]> */
		/* 821A4778h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000010) );
		/* 821A4778h case    1:*/		return 0x821A477C;
		  /* 821A477Ch */ case    2:  		/* lwz R25, <#[R31 + 12]> */
		/* 821A477Ch case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A477Ch case    2:*/		return 0x821A4780;
		  /* 821A4780h */ case    3:  		/* rlwinm R22, R11, 27, 30, 31 */
		/* 821A4780h case    3:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R22,regs.R11);
		/* 821A4780h case    3:*/		return 0x821A4784;
		  /* 821A4784h */ case    4:  		/* cmplwi CR6, R10, 0 */
		/* 821A4784h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A4784h case    4:*/		return 0x821A4788;
		  /* 821A4788h */ case    5:  		/* bc 4, CR6_EQ, -744 */
		/* 821A4788h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A44A0;  }
		/* 821A4788h case    5:*/		return 0x821A478C;
		  /* 821A478Ch */ case    6:  		/* lwz R11, <#[R25 + 4]> */
		/* 821A478Ch case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821A478Ch case    6:*/		return 0x821A4790;
		  /* 821A4790h */ case    7:  		/* addi R10, R25, 4 */
		/* 821A4790h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R25,0x4);
		/* 821A4790h case    7:*/		return 0x821A4794;
		  /* 821A4794h */ case    8:  		/* b 12 */
		/* 821A4794h case    8:*/		return 0x821A47A0;
		/* 821A4794h case    8:*/		return 0x821A4798;
		  /* 821A4798h */ case    9:  		/* addi R10, R11, 8 */
		/* 821A4798h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821A4798h case    9:*/		return 0x821A479C;
		  /* 821A479Ch */ case   10:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A479Ch case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A479Ch case   10:*/		return 0x821A47A0;
	}
	return 0x821A47A0;
} // Block from 821A4774h-821A47A0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A47A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A47A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A47A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A47A0);
		  /* 821A47A0h */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 821A47A0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A47A0h case    0:*/		return 0x821A47A4;
		  /* 821A47A4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A47A4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4798;  }
		/* 821A47A4h case    1:*/		return 0x821A47A8;
		  /* 821A47A8h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A47A8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A47A8h case    2:*/		return 0x821A47AC;
		  /* 821A47ACh */ case    3:  		/* li R6, 26 */
		/* 821A47ACh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821A47ACh case    3:*/		return 0x821A47B0;
		  /* 821A47B0h */ case    4:  		/* li R5, 20 */
		/* 821A47B0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821A47B0h case    4:*/		return 0x821A47B4;
		  /* 821A47B4h */ case    5:  		/* mr R4, R31 */
		/* 821A47B4h case    5:*/		regs.R4 = regs.R31;
		/* 821A47B4h case    5:*/		return 0x821A47B8;
		  /* 821A47B8h */ case    6:  		/* mr R3, R26 */
		/* 821A47B8h case    6:*/		regs.R3 = regs.R26;
		/* 821A47B8h case    6:*/		return 0x821A47BC;
		  /* 821A47BCh */ case    7:  		/* stw R11, <#[R10]> */
		/* 821A47BCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821A47BCh case    7:*/		return 0x821A47C0;
		  /* 821A47C0h */ case    8:  		/* bl -260904 */
		/* 821A47C0h case    8:*/		regs.LR = 0x821A47C4; return 0x82164C98;
		/* 821A47C0h case    8:*/		return 0x821A47C4;
		  /* 821A47C4h */ case    9:  		/* b -804 */
		/* 821A47C4h case    9:*/		return 0x821A44A0;
		/* 821A47C4h case    9:*/		return 0x821A47C8;
	}
	return 0x821A47C8;
} // Block from 821A47A0h-821A47C8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A47C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A47C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A47C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A47C8);
		  /* 821A47C8h */ case    0:  		/* lwz R10, <#[R26 + 976]> */
		/* 821A47C8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x000003D0) );
		/* 821A47C8h case    0:*/		return 0x821A47CC;
		  /* 821A47CCh */ case    1:  		/* addi R11, R26, 972 */
		/* 821A47CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x3CC);
		/* 821A47CCh case    1:*/		return 0x821A47D0;
		  /* 821A47D0h */ case    2:  		/* stw R10, <#[R27]> */
		/* 821A47D0h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R27 + 0x00000000) );
		/* 821A47D0h case    2:*/		return 0x821A47D4;
		  /* 821A47D4h */ case    3:  		/* stw R27, <#[R26 + 976]> */
		/* 821A47D4h case    3:*/		cpu::mem::store32( regs, regs.R27, (uint32)(regs.R26 + 0x000003D0) );
		/* 821A47D4h case    3:*/		return 0x821A47D8;
		  /* 821A47D8h */ case    4:  		/* lwz R11, <#[R25 + 28]> */
		/* 821A47D8h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000001C) );
		/* 821A47D8h case    4:*/		return 0x821A47DC;
		  /* 821A47DCh */ case    5:  		/* lwz R11, <#[R11 + 28]> */
		/* 821A47DCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000001C) );
		/* 821A47DCh case    5:*/		return 0x821A47E0;
		  /* 821A47E0h */ case    6:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A47E0h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A47E0h case    6:*/		return 0x821A47E4;
		  /* 821A47E4h */ case    7:  		/* bc 4, CR0_EQ, 56 */
		/* 821A47E4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821A481C;  }
		/* 821A47E4h case    7:*/		return 0x821A47E8;
		  /* 821A47E8h */ case    8:  		/* cmplwi CR0, R11, 0 */
		/* 821A47E8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A47E8h case    8:*/		return 0x821A47EC;
		  /* 821A47ECh */ case    9:  		/* bc 12, CR0_EQ, 48 */
		/* 821A47ECh case    9:*/		if ( regs.CR[0].eq ) { return 0x821A481C;  }
		/* 821A47ECh case    9:*/		return 0x821A47F0;
		  /* 821A47F0h */ case   10:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A47F0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A47F0h case   10:*/		return 0x821A47F4;
		  /* 821A47F4h */ case   11:  		/* rlwinm. R9, R10, 6, 31, 31 */
		/* 821A47F4h case   11:*/		cpu::op::rlwinm<1,6,31,31>(regs,&regs.R9,regs.R10);
		/* 821A47F4h case   11:*/		return 0x821A47F8;
		  /* 821A47F8h */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 821A47F8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A4804;  }
		/* 821A47F8h case   12:*/		return 0x821A47FC;
		  /* 821A47FCh */ case   13:  		/* rlwinm R10, R10, 0, 6, 4 */
		/* 821A47FCh case   13:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R10,regs.R10);
		/* 821A47FCh case   13:*/		return 0x821A4800;
		  /* 821A4800h */ case   14:  		/* stw R10, <#[R11 + 8]> */
		/* 821A4800h case   14:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4800h case   14:*/		return 0x821A4804;
	}
	return 0x821A4804;
} // Block from 821A47C8h-821A4804h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A4804h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4804( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4804) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4804);
		  /* 821A4804h */ case    0:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4804h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4804h case    0:*/		return 0x821A4808;
		  /* 821A4808h */ case    1:  		/* lwz R11, <#[R11 + 40]> */
		/* 821A4808h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000028) );
		/* 821A4808h case    1:*/		return 0x821A480C;
		  /* 821A480Ch */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A480Ch case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A480Ch case    2:*/		return 0x821A4810;
		  /* 821A4810h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821A4810h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A481C;  }
		/* 821A4810h case    3:*/		return 0x821A4814;
		  /* 821A4814h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821A4814h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A4814h case    4:*/		return 0x821A4818;
		  /* 821A4818h */ case    5:  		/* bc 4, CR6_EQ, -40 */
		/* 821A4818h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A47F0;  }
		/* 821A4818h case    5:*/		return 0x821A481C;
	}
	return 0x821A481C;
} // Block from 821A4804h-821A481Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A481Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A481C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A481C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A481C);
		  /* 821A481Ch */ case    0:  		/* addi R1, R1, 208 */
		/* 821A481Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821A481Ch case    0:*/		return 0x821A4820;
		  /* 821A4820h */ case    1:  		/* b -1127832 */
		/* 821A4820h case    1:*/		return 0x82091288;
		/* 821A4820h case    1:*/		return 0x821A4824;
		  /* 821A4824h */ case    2:  		/* nop */
		/* 821A4824h case    2:*/		cpu::op::nop();
		/* 821A4824h case    2:*/		return 0x821A4828;
	}
	return 0x821A4828;
} // Block from 821A481Ch-821A4828h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A4828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4828);
		  /* 821A4828h */ case    0:  		/* mfspr R12, LR */
		/* 821A4828h case    0:*/		regs.R12 = regs.LR;
		/* 821A4828h case    0:*/		return 0x821A482C;
		  /* 821A482Ch */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821A482Ch case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821A482Ch case    1:*/		return 0x821A4830;
		  /* 821A4830h */ case    2:  		/* stwu R1, <#[R1 - 96]> */
		/* 821A4830h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFFA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFFA0);
		/* 821A4830h case    2:*/		return 0x821A4834;
		  /* 821A4834h */ case    3:  		/* mr R10, R4 */
		/* 821A4834h case    3:*/		regs.R10 = regs.R4;
		/* 821A4834h case    3:*/		return 0x821A4838;
		  /* 821A4838h */ case    4:  		/* mr R4, R5 */
		/* 821A4838h case    4:*/		regs.R4 = regs.R5;
		/* 821A4838h case    4:*/		return 0x821A483C;
		  /* 821A483Ch */ case    5:  		/* cmplw CR6, R6, R7 */
		/* 821A483Ch case    5:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 821A483Ch case    5:*/		return 0x821A4840;
		  /* 821A4840h */ case    6:  		/* bc 4, CR6_GT, 120 */
		/* 821A4840h case    6:*/		if ( !regs.CR[6].gt ) { return 0x821A48B8;  }
		/* 821A4840h case    6:*/		return 0x821A4844;
		  /* 821A4844h */ case    7:  		/* lwz R11, <#[R3 + 664]> */
		/* 821A4844h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000298) );
		/* 821A4844h case    7:*/		return 0x821A4848;
		  /* 821A4848h */ case    8:  		/* cmplw CR6, R6, R11 */
		/* 821A4848h case    8:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821A4848h case    8:*/		return 0x821A484C;
		  /* 821A484Ch */ case    9:  		/* bc 4, CR6_GT, 108 */
		/* 821A484Ch case    9:*/		if ( !regs.CR[6].gt ) { return 0x821A48B8;  }
		/* 821A484Ch case    9:*/		return 0x821A4850;
		  /* 821A4850h */ case   10:  		/* cmplwi CR6, R6, 20 */
		/* 821A4850h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000014);
		/* 821A4850h case   10:*/		return 0x821A4854;
		  /* 821A4854h */ case   11:  		/* bc 12, CR6_LT, 12 */
		/* 821A4854h case   11:*/		if ( regs.CR[6].lt ) { return 0x821A4860;  }
		/* 821A4854h case   11:*/		return 0x821A4858;
		  /* 821A4858h */ case   12:  		/* li R3, 0 */
		/* 821A4858h case   12:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A4858h case   12:*/		return 0x821A485C;
		  /* 821A485Ch */ case   13:  		/* b 96 */
		/* 821A485Ch case   13:*/		return 0x821A48BC;
		/* 821A485Ch case   13:*/		return 0x821A4860;
	}
	return 0x821A4860;
} // Block from 821A4828h-821A4860h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A4860h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4860( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4860) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4860);
		  /* 821A4860h */ case    0:  		/* lwz R9, <#[R3 + 40]> */
		/* 821A4860h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000028) );
		/* 821A4860h case    0:*/		return 0x821A4864;
		  /* 821A4864h */ case    1:  		/* rlwinm. R9, R9, 0, 6, 6 */
		/* 821A4864h case    1:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R9,regs.R9);
		/* 821A4864h case    1:*/		return 0x821A4868;
		  /* 821A4868h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821A4868h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A4878;  }
		/* 821A4868h case    2:*/		return 0x821A486C;
		  /* 821A486Ch */ case    3:  		/* addi R5, R6, -10 */
		/* 821A486Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R6,0xFFFFFFF6);
		/* 821A486Ch case    3:*/		return 0x821A4870;
		  /* 821A4870h */ case    4:  		/* bl -15544 */
		/* 821A4870h case    4:*/		regs.LR = 0x821A4874; return 0x821A0BB8;
		/* 821A4870h case    4:*/		return 0x821A4874;
		  /* 821A4874h */ case    5:  		/* b -28 */
		/* 821A4874h case    5:*/		return 0x821A4858;
		/* 821A4874h case    5:*/		return 0x821A4878;
	}
	return 0x821A4878;
} // Block from 821A4860h-821A4878h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A4878h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4878( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4878) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4878);
		  /* 821A4878h */ case    0:  		/* addi R11, R11, 10 */
		/* 821A4878h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xA);
		/* 821A4878h case    0:*/		return 0x821A487C;
		  /* 821A487Ch */ case    1:  		/* cmplw CR6, R6, R11 */
		/* 821A487Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821A487Ch case    1:*/		return 0x821A4880;
		  /* 821A4880h */ case    2:  		/* bc 12, CR6_GT, -40 */
		/* 821A4880h case    2:*/		if ( regs.CR[6].gt ) { return 0x821A4858;  }
		/* 821A4880h case    2:*/		return 0x821A4884;
		  /* 821A4884h */ case    3:  		/* lwz R11, <#[R10 + 4]> */
		/* 821A4884h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821A4884h case    3:*/		return 0x821A4888;
		  /* 821A4888h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821A4888h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A4888h case    4:*/		return 0x821A488C;
		  /* 821A488Ch */ case    5:  		/* bc 12, CR6_EQ, 44 */
		/* 821A488Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821A48B8;  }
		/* 821A488Ch case    5:*/		return 0x821A4890;
		  /* 821A4890h */ case    6:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A4890h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A4890h case    6:*/		return 0x821A4894;
		  /* 821A4894h */ case    7:  		/* cmplwi CR6, R10, 0 */
		/* 821A4894h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A4894h case    7:*/		return 0x821A4898;
		  /* 821A4898h */ case    8:  		/* bc 12, CR6_EQ, 24 */
		/* 821A4898h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A48B0;  }
		/* 821A4898h case    8:*/		return 0x821A489C;
		  /* 821A489Ch */ case    9:  		/* lwz R9, <#[R11]> */
		/* 821A489Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A489Ch case    9:*/		return 0x821A48A0;
		  /* 821A48A0h */ case   10:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A48A0h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A48A0h case   10:*/		return 0x821A48A4;
		  /* 821A48A4h */ case   11:  		/* bc 12, CR0_EQ, 12 */
		/* 821A48A4h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A48B0;  }
		/* 821A48A4h case   11:*/		return 0x821A48A8;
		  /* 821A48A8h */ case   12:  		/* cmplw CR6, R10, R4 */
		/* 821A48A8h case   12:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R4);
		/* 821A48A8h case   12:*/		return 0x821A48AC;
		  /* 821A48ACh */ case   13:  		/* bc 4, CR6_EQ, -84 */
		/* 821A48ACh case   13:*/		if ( !regs.CR[6].eq ) { return 0x821A4858;  }
		/* 821A48ACh case   13:*/		return 0x821A48B0;
	}
	return 0x821A48B0;
} // Block from 821A4878h-821A48B0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A48B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A48B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A48B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A48B0);
		  /* 821A48B0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A48B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A48B0h case    0:*/		return 0x821A48B4;
		  /* 821A48B4h */ case    1:  		/* b -44 */
		/* 821A48B4h case    1:*/		return 0x821A4888;
		/* 821A48B4h case    1:*/		return 0x821A48B8;
	}
	return 0x821A48B8;
} // Block from 821A48B0h-821A48B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A48B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A48B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A48B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A48B8);
		  /* 821A48B8h */ case    0:  		/* li R3, 1 */
		/* 821A48B8h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821A48B8h case    0:*/		return 0x821A48BC;
	}
	return 0x821A48BC;
} // Block from 821A48B8h-821A48BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A48BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A48BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A48BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A48BC);
		  /* 821A48BCh */ case    0:  		/* addi R1, R1, 96 */
		/* 821A48BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x60);
		/* 821A48BCh case    0:*/		return 0x821A48C0;
		  /* 821A48C0h */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821A48C0h case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821A48C0h case    1:*/		return 0x821A48C4;
		  /* 821A48C4h */ case    2:  		/* mtspr LR, R12 */
		/* 821A48C4h case    2:*/		regs.LR = regs.R12;
		/* 821A48C4h case    2:*/		return 0x821A48C8;
		  /* 821A48C8h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821A48C8h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821A48C8h case    3:*/		return 0x821A48CC;
	}
	return 0x821A48CC;
} // Block from 821A48BCh-821A48CCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A48CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A48CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A48CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A48CC);
		  /* 821A48CCh */ case    0:  		/* nop */
		/* 821A48CCh case    0:*/		cpu::op::nop();
		/* 821A48CCh case    0:*/		return 0x821A48D0;
	}
	return 0x821A48D0;
} // Block from 821A48CCh-821A48D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A48D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A48D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A48D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A48D0);
		  /* 821A48D0h */ case    0:  		/* mfspr R12, LR */
		/* 821A48D0h case    0:*/		regs.R12 = regs.LR;
		/* 821A48D0h case    0:*/		return 0x821A48D4;
		  /* 821A48D4h */ case    1:  		/* stw R12, <#[R1 - 8]> */
		/* 821A48D4h case    1:*/		cpu::mem::store32( regs, regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821A48D4h case    1:*/		return 0x821A48D8;
		  /* 821A48D8h */ case    2:  		/* stwu R1, <#[R1 - 112]> */
		/* 821A48D8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF90) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF90);
		/* 821A48D8h case    2:*/		return 0x821A48DC;
		  /* 821A48DCh */ case    3:  		/* lwz R11, <#[R5 + 200]> */
		/* 821A48DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x000000C8) );
		/* 821A48DCh case    3:*/		return 0x821A48E0;
		  /* 821A48E0h */ case    4:  		/* cmpwi CR6, R11, 0 */
		/* 821A48E0h case    4:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000000);
		/* 821A48E0h case    4:*/		return 0x821A48E4;
		  /* 821A48E4h */ case    5:  		/* bc 12, CR6_GT, 12 */
		/* 821A48E4h case    5:*/		if ( regs.CR[6].gt ) { return 0x821A48F0;  }
		/* 821A48E4h case    5:*/		return 0x821A48E8;
		  /* 821A48E8h */ case    6:  		/* li R3, 0 */
		/* 821A48E8h case    6:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A48E8h case    6:*/		return 0x821A48EC;
		  /* 821A48ECh */ case    7:  		/* b 220 */
		/* 821A48ECh case    7:*/		return 0x821A49C8;
		/* 821A48ECh case    7:*/		return 0x821A48F0;
	}
	return 0x821A48F0;
} // Block from 821A48D0h-821A48F0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A48F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A48F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A48F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A48F0);
		  /* 821A48F0h */ case    0:  		/* lwz R10, <#[R6 + 200]> */
		/* 821A48F0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x000000C8) );
		/* 821A48F0h case    0:*/		return 0x821A48F4;
		  /* 821A48F4h */ case    1:  		/* cmpw CR6, R10, R11 */
		/* 821A48F4h case    1:*/		cpu::op::cmpw<6>(regs,regs.R10,regs.R11);
		/* 821A48F4h case    1:*/		return 0x821A48F8;
		  /* 821A48F8h */ case    2:  		/* bc 12, CR6_GT, -16 */
		/* 821A48F8h case    2:*/		if ( regs.CR[6].gt ) { return 0x821A48E8;  }
		/* 821A48F8h case    2:*/		return 0x821A48FC;
		  /* 821A48FCh */ case    3:  		/* lwz R11, <#[R5 + 28]> */
		/* 821A48FCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000001C) );
		/* 821A48FCh case    3:*/		return 0x821A4900;
		  /* 821A4900h */ case    4:  		/* cmplwi CR6, R11, 2 */
		/* 821A4900h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000002);
		/* 821A4900h case    4:*/		return 0x821A4904;
		  /* 821A4904h */ case    5:  		/* bc 12, CR6_GT, 192 */
		/* 821A4904h case    5:*/		if ( regs.CR[6].gt ) { return 0x821A49C4;  }
		/* 821A4904h case    5:*/		return 0x821A4908;
		  /* 821A4908h */ case    6:  		/* lwz R11, <#[R3 + 40]> */
		/* 821A4908h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000028) );
		/* 821A4908h case    6:*/		return 0x821A490C;
		  /* 821A490Ch */ case    7:  		/* rlwinm. R11, R11, 0, 6, 6 */
		/* 821A490Ch case    7:*/		cpu::op::rlwinm<1,0,6,6>(regs,&regs.R11,regs.R11);
		/* 821A490Ch case    7:*/		return 0x821A4910;
		  /* 821A4910h */ case    8:  		/* bc 12, CR0_EQ, 16 */
		/* 821A4910h case    8:*/		if ( regs.CR[0].eq ) { return 0x821A4920;  }
		/* 821A4910h case    8:*/		return 0x821A4914;
		  /* 821A4914h */ case    9:  		/* li R5, 10 */
		/* 821A4914h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0xA);
		/* 821A4914h case    9:*/		return 0x821A4918;
		  /* 821A4918h */ case   10:  		/* bl -15712 */
		/* 821A4918h case   10:*/		regs.LR = 0x821A491C; return 0x821A0BB8;
		/* 821A4918h case   10:*/		return 0x821A491C;
		  /* 821A491Ch */ case   11:  		/* b -52 */
		/* 821A491Ch case   11:*/		return 0x821A48E8;
		/* 821A491Ch case   11:*/		return 0x821A4920;
	}
	return 0x821A4920;
} // Block from 821A48F0h-821A4920h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A4920h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4920( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4920) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4920);
		  /* 821A4920h */ case    0:  		/* lwz R10, <#[R5 + 160]> */
		/* 821A4920h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x000000A0) );
		/* 821A4920h case    0:*/		return 0x821A4924;
		  /* 821A4924h */ case    1:  		/* addi R11, R5, 32 */
		/* 821A4924h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0x20);
		/* 821A4924h case    1:*/		return 0x821A4928;
		  /* 821A4928h */ case    2:  		/* addi R9, R1, 80 */
		/* 821A4928h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821A4928h case    2:*/		return 0x821A492C;
		  /* 821A492Ch */ case    3:  		/* rlwinm R10, R10, 4, 0, 27 */
		/* 821A492Ch case    3:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R10);
		/* 821A492Ch case    3:*/		return 0x821A4930;
		  /* 821A4930h */ case    4:  		/* add R11, R10, R11 */
		/* 821A4930h case    4:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A4930h case    4:*/		return 0x821A4934;
		  /* 821A4934h */ case    5:  		/* addi R10, R11, -16 */
		/* 821A4934h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFF0);
		/* 821A4934h case    5:*/		return 0x821A4938;
		  /* 821A4938h */ case    6:  		/* lwz R10, <#[R11 - 16]> */
		/* 821A4938h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0xFFFFFFF0) );
		/* 821A4938h case    6:*/		return 0x821A493C;
		  /* 821A493Ch */ case    7:  		/* lwz R8, <#[R11 - 12]> */
		/* 821A493Ch case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFF4) );
		/* 821A493Ch case    7:*/		return 0x821A4940;
		  /* 821A4940h */ case    8:  		/* lwz R7, <#[R11 - 8]> */
		/* 821A4940h case    8:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0xFFFFFFF8) );
		/* 821A4940h case    8:*/		return 0x821A4944;
		  /* 821A4944h */ case    9:  		/* lwz R11, <#[R11 - 4]> */
		/* 821A4944h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821A4944h case    9:*/		return 0x821A4948;
		  /* 821A4948h */ case   10:  		/* stw R10, <#[R9]> */
		/* 821A4948h case   10:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821A4948h case   10:*/		return 0x821A494C;
		  /* 821A494Ch */ case   11:  		/* stw R8, <#[R9 + 4]> */
		/* 821A494Ch case   11:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000004) );
		/* 821A494Ch case   11:*/		return 0x821A4950;
		  /* 821A4950h */ case   12:  		/* stw R7, <#[R9 + 8]> */
		/* 821A4950h case   12:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x00000008) );
		/* 821A4950h case   12:*/		return 0x821A4954;
		  /* 821A4954h */ case   13:  		/* stw R11, <#[R9 + 12]> */
		/* 821A4954h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A4954h case   13:*/		return 0x821A4958;
		  /* 821A4958h */ case   14:  		/* lwz R11, <#[R1 + 92]> */
		/* 821A4958h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A4958h case   14:*/		return 0x821A495C;
		  /* 821A495Ch */ case   15:  		/* cmplwi CR6, R11, 0 */
		/* 821A495Ch case   15:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A495Ch case   15:*/		return 0x821A4960;
		  /* 821A4960h */ case   16:  		/* bc 12, CR6_EQ, 20 */
		/* 821A4960h case   16:*/		if ( regs.CR[6].eq ) { return 0x821A4974;  }
		/* 821A4960h case   16:*/		return 0x821A4964;
		  /* 821A4964h */ case   17:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A4964h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4964h case   17:*/		return 0x821A4968;
		  /* 821A4968h */ case   18:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821A4968h case   18:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821A4968h case   18:*/		return 0x821A496C;
		  /* 821A496Ch */ case   19:  		/* cmplwi CR6, R11, 16384 */
		/* 821A496Ch case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 821A496Ch case   19:*/		return 0x821A4970;
		  /* 821A4970h */ case   20:  		/* bc 4, CR6_EQ, -136 */
		/* 821A4970h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821A48E8;  }
		/* 821A4970h case   20:*/		return 0x821A4974;
	}
	return 0x821A4974;
} // Block from 821A4920h-821A4974h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821A4974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4974);
		  /* 821A4974h */ case    0:  		/* lwz R7, <#[R5 + 196]> */
		/* 821A4974h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R5 + 0x000000C4) );
		/* 821A4974h case    0:*/		return 0x821A4978;
		  /* 821A4978h */ case    1:  		/* li R11, 0 */
		/* 821A4978h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A4978h case    1:*/		return 0x821A497C;
		  /* 821A497Ch */ case    2:  		/* cmplwi CR6, R7, 0 */
		/* 821A497Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821A497Ch case    2:*/		return 0x821A4980;
		  /* 821A4980h */ case    3:  		/* bc 12, CR6_EQ, 56 */
		/* 821A4980h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A49B8;  }
		/* 821A4980h case    3:*/		return 0x821A4984;
		  /* 821A4984h */ case    4:  		/* rlwinm R8, R7, 0, 0, 31 */
		/* 821A4984h case    4:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R8,regs.R7);
		/* 821A4984h case    4:*/		return 0x821A4988;
		  /* 821A4988h */ case    5:  		/* addi R10, R5, 164 */
		/* 821A4988h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R5,0xA4);
		/* 821A4988h case    5:*/		return 0x821A498C;
		  /* 821A498Ch */ case    6:  		/* subf R9, R11, R8 */
		/* 821A498Ch case    6:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R11,regs.R8);
		/* 821A498Ch case    6:*/		return 0x821A4990;
		  /* 821A4990h */ case    7:  		/* addi R9, R9, -1 */
		/* 821A4990h case    7:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821A4990h case    7:*/		return 0x821A4994;
		  /* 821A4994h */ case    8:  		/* rlwinm R9, R9, 2, 0, 29 */
		/* 821A4994h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R9);
		/* 821A4994h case    8:*/		return 0x821A4998;
		  /* 821A4998h */ case    9:  		/* lwzx R9, <#[R9 + R10]> */
		/* 821A4998h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821A4998h case    9:*/		return 0x821A499C;
		  /* 821A499Ch */ case   10:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A499Ch case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A499Ch case   10:*/		return 0x821A49A0;
		  /* 821A49A0h */ case   11:  		/* rlwinm R9, R9, 0, 15, 17 */
		/* 821A49A0h case   11:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R9,regs.R9);
		/* 821A49A0h case   11:*/		return 0x821A49A4;
		  /* 821A49A4h */ case   12:  		/* cmplwi CR6, R9, 16384 */
		/* 821A49A4h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00004000);
		/* 821A49A4h case   12:*/		return 0x821A49A8;
		  /* 821A49A8h */ case   13:  		/* bc 12, CR6_EQ, 16 */
		/* 821A49A8h case   13:*/		if ( regs.CR[6].eq ) { return 0x821A49B8;  }
		/* 821A49A8h case   13:*/		return 0x821A49AC;
		  /* 821A49ACh */ case   14:  		/* addi R11, R11, 1 */
		/* 821A49ACh case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A49ACh case   14:*/		return 0x821A49B0;
		  /* 821A49B0h */ case   15:  		/* cmplw CR6, R11, R7 */
		/* 821A49B0h case   15:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821A49B0h case   15:*/		return 0x821A49B4;
		  /* 821A49B4h */ case   16:  		/* bc 12, CR6_LT, -40 */
		/* 821A49B4h case   16:*/		if ( regs.CR[6].lt ) { return 0x821A498C;  }
		/* 821A49B4h case   16:*/		return 0x821A49B8;
	}
	return 0x821A49B8;
} // Block from 821A4974h-821A49B8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A49B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A49B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A49B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A49B8);
		  /* 821A49B8h */ case    0:  		/* cmplw CR6, R11, R7 */
		/* 821A49B8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821A49B8h case    0:*/		return 0x821A49BC;
		  /* 821A49BCh */ case    1:  		/* li R3, 0 */
		/* 821A49BCh case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A49BCh case    1:*/		return 0x821A49C0;
		  /* 821A49C0h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821A49C0h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A49C8;  }
		/* 821A49C0h case    2:*/		return 0x821A49C4;
	}
	return 0x821A49C4;
} // Block from 821A49B8h-821A49C4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A49C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A49C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A49C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A49C4);
		  /* 821A49C4h */ case    0:  		/* li R3, 1 */
		/* 821A49C4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821A49C4h case    0:*/		return 0x821A49C8;
	}
	return 0x821A49C8;
} // Block from 821A49C4h-821A49C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A49C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A49C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A49C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A49C8);
		  /* 821A49C8h */ case    0:  		/* addi R1, R1, 112 */
		/* 821A49C8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x70);
		/* 821A49C8h case    0:*/		return 0x821A49CC;
		  /* 821A49CCh */ case    1:  		/* lwz R12, <#[R1 - 8]> */
		/* 821A49CCh case    1:*/		cpu::mem::load32z( regs, &regs.R12, (uint32)(regs.R1 + 0xFFFFFFF8) );
		/* 821A49CCh case    1:*/		return 0x821A49D0;
		  /* 821A49D0h */ case    2:  		/* mtspr LR, R12 */
		/* 821A49D0h case    2:*/		regs.LR = regs.R12;
		/* 821A49D0h case    2:*/		return 0x821A49D4;
		  /* 821A49D4h */ case    3:  		/* bclr 20, CR0_LT */
		/* 821A49D4h case    3:*/		if ( 1 ) { return (uint32)regs.LR; }
		/* 821A49D4h case    3:*/		return 0x821A49D8;
	}
	return 0x821A49D8;
} // Block from 821A49C8h-821A49D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A49D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A49D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A49D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A49D8);
		  /* 821A49D8h */ case    0:  		/* mfspr R12, LR */
		/* 821A49D8h case    0:*/		regs.R12 = regs.LR;
		/* 821A49D8h case    0:*/		return 0x821A49DC;
		  /* 821A49DCh */ case    1:  		/* bl -1128324 */
		/* 821A49DCh case    1:*/		regs.LR = 0x821A49E0; return 0x82091258;
		/* 821A49DCh case    1:*/		return 0x821A49E0;
		  /* 821A49E0h */ case    2:  		/* stwu R1, <#[R1 - 128]> */
		/* 821A49E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF80) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF80);
		/* 821A49E0h case    2:*/		return 0x821A49E4;
		  /* 821A49E4h */ case    3:  		/* mr R29, R3 */
		/* 821A49E4h case    3:*/		regs.R29 = regs.R3;
		/* 821A49E4h case    3:*/		return 0x821A49E8;
		  /* 821A49E8h */ case    4:  		/* mr R30, R4 */
		/* 821A49E8h case    4:*/		regs.R30 = regs.R4;
		/* 821A49E8h case    4:*/		return 0x821A49EC;
		  /* 821A49ECh */ case    5:  		/* mr R31, R5 */
		/* 821A49ECh case    5:*/		regs.R31 = regs.R5;
		/* 821A49ECh case    5:*/		return 0x821A49F0;
		  /* 821A49F0h */ case    6:  		/* mr R28, R7 */
		/* 821A49F0h case    6:*/		regs.R28 = regs.R7;
		/* 821A49F0h case    6:*/		return 0x821A49F4;
		  /* 821A49F4h */ case    7:  		/* mr R8, R4 */
		/* 821A49F4h case    7:*/		regs.R8 = regs.R4;
		/* 821A49F4h case    7:*/		return 0x821A49F8;
		  /* 821A49F8h */ case    8:  		/* lwz R11, <#[R8]> */
		/* 821A49F8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A49F8h case    8:*/		return 0x821A49FC;
		  /* 821A49FCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821A49FCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A49FCh case    9:*/		return 0x821A4A00;
		  /* 821A4A00h */ case   10:  		/* bc 12, CR6_EQ, 88 */
		/* 821A4A00h case   10:*/		if ( regs.CR[6].eq ) { return 0x821A4A58;  }
		/* 821A4A00h case   10:*/		return 0x821A4A04;
		  /* 821A4A04h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821A4A04h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4A04h case   11:*/		return 0x821A4A08;
		  /* 821A4A08h */ case   12:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821A4A08h case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821A4A08h case   12:*/		return 0x821A4A0C;
		  /* 821A4A0Ch */ case   13:  		/* bc 4, CR0_EQ, 56 */
		/* 821A4A0Ch case   13:*/		if ( !regs.CR[0].eq ) { return 0x821A4A44;  }
		/* 821A4A0Ch case   13:*/		return 0x821A4A10;
		  /* 821A4A10h */ case   14:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A4A10h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A4A10h case   14:*/		return 0x821A4A14;
		  /* 821A4A14h */ case   15:  		/* lwz R9, <#[R10]> */
		/* 821A4A14h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4A14h case   15:*/		return 0x821A4A18;
		  /* 821A4A18h */ case   16:  		/* b 12 */
		/* 821A4A18h case   16:*/		return 0x821A4A24;
		/* 821A4A18h case   16:*/		return 0x821A4A1C;
		  /* 821A4A1Ch */ case   17:  		/* addi R10, R9, 4 */
		/* 821A4A1Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821A4A1Ch case   17:*/		return 0x821A4A20;
		  /* 821A4A20h */ case   18:  		/* lwz R9, <#[R9 + 4]> */
		/* 821A4A20h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821A4A20h case   18:*/		return 0x821A4A24;
	}
	return 0x821A4A24;
} // Block from 821A49D8h-821A4A24h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A4A24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4A24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4A24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4A24);
		  /* 821A4A24h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A4A24h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A4A24h case    0:*/		return 0x821A4A28;
		  /* 821A4A28h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A4A28h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4A1C;  }
		/* 821A4A28h case    1:*/		return 0x821A4A2C;
		  /* 821A4A2Ch */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821A4A2Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4A2Ch case    2:*/		return 0x821A4A30;
		  /* 821A4A30h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A4A30h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4A30h case    3:*/		return 0x821A4A34;
		  /* 821A4A34h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821A4A34h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821A4A34h case    4:*/		return 0x821A4A38;
	}
	return 0x821A4A38;
} // Block from 821A4A24h-821A4A38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A4A38h
// Function '?CollectAddChainOperands@Compiler@D3DXShader@@AAAXPAVInstruction@2@W4Component@2@PAV?$Stack@UPossibleVectorizationCandidate@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4A38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4A38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4A38);
		  /* 821A4A38h */ case    0:  		/* stw R10, <#[R11 + 4]> */
		/* 821A4A38h case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4A38h case    0:*/		return 0x821A4A3C;
		  /* 821A4A3Ch */ case    1:  		/* stw R11, <#[R31]> */
		/* 821A4A3Ch case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A4A3Ch case    1:*/		return 0x821A4A40;
		  /* 821A4A40h */ case    2:  		/* stw R31, <#[R11 + 16]> */
		/* 821A4A40h case    2:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821A4A40h case    2:*/		return 0x821A4A44;
	}
	return 0x821A4A44;
} // Block from 821A4A38h-821A4A44h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A4A44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4A44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4A44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4A44);
		  /* 821A4A44h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A4A44h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A4A44h case    0:*/		return 0x821A4A48;
		  /* 821A4A48h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A4A48h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A4A48h case    1:*/		return 0x821A4A4C;
		  /* 821A4A4Ch */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821A4A4Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A49F8;  }
		/* 821A4A4Ch case    2:*/		return 0x821A4A50;
		  /* 821A4A50h */ case    3:  		/* addi R8, R11, 4 */
		/* 821A4A50h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821A4A50h case    3:*/		return 0x821A4A54;
		  /* 821A4A54h */ case    4:  		/* b -92 */
		/* 821A4A54h case    4:*/		return 0x821A49F8;
		/* 821A4A54h case    4:*/		return 0x821A4A58;
	}
	return 0x821A4A58;
} // Block from 821A4A44h-821A4A58h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A4A58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4A58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4A58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4A58);
		  /* 821A4A58h */ case    0:  		/* addi R8, R30, 4 */
		/* 821A4A58h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R30,0x4);
		/* 821A4A58h case    0:*/		return 0x821A4A5C;
		  /* 821A4A5Ch */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821A4A5Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A4A5Ch case    1:*/		return 0x821A4A60;
		  /* 821A4A60h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A4A60h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A4A60h case    2:*/		return 0x821A4A64;
		  /* 821A4A64h */ case    3:  		/* bc 12, CR6_EQ, 176 */
		/* 821A4A64h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A4B14;  }
		/* 821A4A64h case    3:*/		return 0x821A4A68;
		  /* 821A4A68h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A4A68h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A4A68h case    4:*/		return 0x821A4A6C;
		  /* 821A4A6Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821A4A6Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A4A6Ch case    5:*/		return 0x821A4A70;
		  /* 821A4A70h */ case    6:  		/* bc 12, CR6_EQ, 144 */
		/* 821A4A70h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A4B00;  }
		/* 821A4A70h case    6:*/		return 0x821A4A74;
		  /* 821A4A74h */ case    7:  		/* cmplwi CR6, R6, 228 */
		/* 821A4A74h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x000000E4);
		/* 821A4A74h case    7:*/		return 0x821A4A78;
		  /* 821A4A78h */ case    8:  		/* bc 12, CR6_EQ, 80 */
		/* 821A4A78h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A4AC8;  }
		/* 821A4A78h case    8:*/		return 0x821A4A7C;
		  /* 821A4A7Ch */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821A4A7Ch case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4A7Ch case    9:*/		return 0x821A4A80;
		  /* 821A4A80h */ case   10:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821A4A80h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821A4A80h case   10:*/		return 0x821A4A84;
		  /* 821A4A84h */ case   11:  		/* bc 12, CR0_EQ, 68 */
		/* 821A4A84h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A4AC8;  }
		/* 821A4A84h case   11:*/		return 0x821A4A88;
		  /* 821A4A88h */ case   12:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821A4A88h case   12:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821A4A88h case   12:*/		return 0x821A4A8C;
		  /* 821A4A8Ch */ case   13:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821A4A8Ch case   13:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821A4A8Ch case   13:*/		return 0x821A4A90;
		  /* 821A4A90h */ case   14:  		/* srw R9, R6, R9 */
		/* 821A4A90h case   14:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821A4A90h case   14:*/		return 0x821A4A94;
		  /* 821A4A94h */ case   15:  		/* srw R7, R6, R7 */
		/* 821A4A94h case   15:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R6,regs.R7);
		/* 821A4A94h case   15:*/		return 0x821A4A98;
		  /* 821A4A98h */ case   16:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821A4A98h case   16:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821A4A98h case   16:*/		return 0x821A4A9C;
		  /* 821A4A9Ch */ case   17:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821A4A9Ch case   17:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821A4A9Ch case   17:*/		return 0x821A4AA0;
		  /* 821A4AA0h */ case   18:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821A4AA0h case   18:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821A4AA0h case   18:*/		return 0x821A4AA4;
		  /* 821A4AA4h */ case   19:  		/* srw R9, R6, R9 */
		/* 821A4AA4h case   19:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821A4AA4h case   19:*/		return 0x821A4AA8;
		  /* 821A4AA8h */ case   20:  		/* rlwinm R5, R10, 28, 29, 30 */
		/* 821A4AA8h case   20:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R5,regs.R10);
		/* 821A4AA8h case   20:*/		return 0x821A4AAC;
		  /* 821A4AACh */ case   21:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821A4AACh case   21:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821A4AACh case   21:*/		return 0x821A4AB0;
		  /* 821A4AB0h */ case   22:  		/* srw R7, R6, R5 */
		/* 821A4AB0h case   22:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R6,regs.R5);
		/* 821A4AB0h case   22:*/		return 0x821A4AB4;
		  /* 821A4AB4h */ case   23:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821A4AB4h case   23:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821A4AB4h case   23:*/		return 0x821A4AB8;
		  /* 821A4AB8h */ case   24:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A4AB8h case   24:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A4AB8h case   24:*/		return 0x821A4ABC;
		  /* 821A4ABCh */ case   25:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821A4ABCh case   25:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821A4ABCh case   25:*/		return 0x821A4AC0;
		  /* 821A4AC0h */ case   26:  		/* or R10, R9, R10 */
		/* 821A4AC0h case   26:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A4AC0h case   26:*/		return 0x821A4AC4;
		  /* 821A4AC4h */ case   27:  		/* stw R10, <#[R11]> */
		/* 821A4AC4h case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4AC4h case   27:*/		return 0x821A4AC8;
	}
	return 0x821A4AC8;
} // Block from 821A4A58h-821A4AC8h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821A4AC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4AC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4AC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4AC8);
		  /* 821A4AC8h */ case    0:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A4AC8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A4AC8h case    0:*/		return 0x821A4ACC;
		  /* 821A4ACCh */ case    1:  		/* addi R10, R10, 4 */
		/* 821A4ACCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A4ACCh case    1:*/		return 0x821A4AD0;
		  /* 821A4AD0h */ case    2:  		/* lwz R9, <#[R10]> */
		/* 821A4AD0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4AD0h case    2:*/		return 0x821A4AD4;
		  /* 821A4AD4h */ case    3:  		/* b 12 */
		/* 821A4AD4h case    3:*/		return 0x821A4AE0;
		/* 821A4AD4h case    3:*/		return 0x821A4AD8;
		  /* 821A4AD8h */ case    4:  		/* addi R10, R9, 8 */
		/* 821A4AD8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A4AD8h case    4:*/		return 0x821A4ADC;
		  /* 821A4ADCh */ case    5:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A4ADCh case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A4ADCh case    5:*/		return 0x821A4AE0;
	}
	return 0x821A4AE0;
} // Block from 821A4AC8h-821A4AE0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A4AE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4AE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4AE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4AE0);
		  /* 821A4AE0h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A4AE0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A4AE0h case    0:*/		return 0x821A4AE4;
		  /* 821A4AE4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A4AE4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4AD8;  }
		/* 821A4AE4h case    1:*/		return 0x821A4AE8;
		  /* 821A4AE8h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A4AE8h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4AE8h case    2:*/		return 0x821A4AEC;
		  /* 821A4AECh */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A4AECh case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4AECh case    3:*/		return 0x821A4AF0;
		  /* 821A4AF0h */ case    4:  		/* lwz R10, <#[R31 + 4]> */
		/* 821A4AF0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821A4AF0h case    4:*/		return 0x821A4AF4;
		  /* 821A4AF4h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A4AF4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4AF4h case    5:*/		return 0x821A4AF8;
		  /* 821A4AF8h */ case    6:  		/* stw R11, <#[R31 + 4]> */
		/* 821A4AF8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821A4AF8h case    6:*/		return 0x821A4AFC;
		  /* 821A4AFCh */ case    7:  		/* stw R31, <#[R11 + 12]> */
		/* 821A4AFCh case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A4AFCh case    7:*/		return 0x821A4B00;
	}
	return 0x821A4B00;
} // Block from 821A4AE0h-821A4B00h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A4B00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4B00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4B00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4B00);
		  /* 821A4B00h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A4B00h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A4B00h case    0:*/		return 0x821A4B04;
		  /* 821A4B04h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A4B04h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A4B04h case    1:*/		return 0x821A4B08;
		  /* 821A4B08h */ case    2:  		/* bc 4, CR6_EQ, -172 */
		/* 821A4B08h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A4A5C;  }
		/* 821A4B08h case    2:*/		return 0x821A4B0C;
		  /* 821A4B0Ch */ case    3:  		/* addi R8, R11, 8 */
		/* 821A4B0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821A4B0Ch case    3:*/		return 0x821A4B10;
		  /* 821A4B10h */ case    4:  		/* b -180 */
		/* 821A4B10h case    4:*/		return 0x821A4A5C;
		/* 821A4B10h case    4:*/		return 0x821A4B14;
	}
	return 0x821A4B14;
} // Block from 821A4B00h-821A4B14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A4B14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4B14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4B14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4B14);
		  /* 821A4B14h */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A4B14h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4B14h case    0:*/		return 0x821A4B18;
		  /* 821A4B18h */ case    1:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A4B18h case    1:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A4B18h case    1:*/		return 0x821A4B1C;
		  /* 821A4B1Ch */ case    2:  		/* cmplwi CR6, R11, 14080 */
		/* 821A4B1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821A4B1Ch case    2:*/		return 0x821A4B20;
		  /* 821A4B20h */ case    3:  		/* bc 4, CR6_EQ, 20 */
		/* 821A4B20h case    3:*/		if ( !regs.CR[6].eq ) { return 0x821A4B34;  }
		/* 821A4B20h case    3:*/		return 0x821A4B24;
		  /* 821A4B24h */ case    4:  		/* mr R4, R31 */
		/* 821A4B24h case    4:*/		regs.R4 = regs.R31;
		/* 821A4B24h case    4:*/		return 0x821A4B28;
		  /* 821A4B28h */ case    5:  		/* mr R3, R29 */
		/* 821A4B28h case    5:*/		regs.R3 = regs.R29;
		/* 821A4B28h case    5:*/		return 0x821A4B2C;
		  /* 821A4B2Ch */ case    6:  		/* bl 71868 */
		/* 821A4B2Ch case    6:*/		regs.LR = 0x821A4B30; return 0x821B63E8;
		/* 821A4B2Ch case    6:*/		return 0x821A4B30;
		  /* 821A4B30h */ case    7:  		/* b 12 */
		/* 821A4B30h case    7:*/		return 0x821A4B3C;
		/* 821A4B30h case    7:*/		return 0x821A4B34;
	}
	return 0x821A4B34;
} // Block from 821A4B14h-821A4B34h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A4B34h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4B34( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4B34) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4B34);
		  /* 821A4B34h */ case    0:  		/* mr R3, R31 */
		/* 821A4B34h case    0:*/		regs.R3 = regs.R31;
		/* 821A4B34h case    0:*/		return 0x821A4B38;
		  /* 821A4B38h */ case    1:  		/* bl -182208 */
		/* 821A4B38h case    1:*/		regs.LR = 0x821A4B3C; return 0x82178378;
		/* 821A4B38h case    1:*/		return 0x821A4B3C;
	}
	return 0x821A4B3C;
} // Block from 821A4B34h-821A4B3Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A4B3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4B3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4B3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4B3C);
		  /* 821A4B3Ch */ case    0:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A4B3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4B3Ch case    0:*/		return 0x821A4B40;
		  /* 821A4B40h */ case    1:  		/* oris R11, R11, 256 */
		/* 821A4B40h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A4B40h case    1:*/		return 0x821A4B44;
		  /* 821A4B44h */ case    2:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A4B44h case    2:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A4B44h case    2:*/		return 0x821A4B48;
		  /* 821A4B48h */ case    3:  		/* stw R11, <#[R31 + 8]> */
		/* 821A4B48h case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4B48h case    3:*/		return 0x821A4B4C;
		  /* 821A4B4Ch */ case    4:  		/* bc 4, CR0_EQ, 248 */
		/* 821A4B4Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A4C44;  }
		/* 821A4B4Ch case    4:*/		return 0x821A4B50;
		  /* 821A4B50h */ case    5:  		/* lwz R10, <#[R30 + 8]> */
		/* 821A4B50h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821A4B50h case    5:*/		return 0x821A4B54;
		  /* 821A4B54h */ case    6:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A4B54h case    6:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A4B54h case    6:*/		return 0x821A4B58;
		  /* 821A4B58h */ case    7:  		/* bc 12, CR0_EQ, 236 */
		/* 821A4B58h case    7:*/		if ( regs.CR[0].eq ) { return 0x821A4C44;  }
		/* 821A4B58h case    7:*/		return 0x821A4B5C;
		  /* 821A4B5Ch */ case    8:  		/* oris R11, R11, 128 */
		/* 821A4B5Ch case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A4B5Ch case    8:*/		return 0x821A4B60;
		  /* 821A4B60h */ case    9:  		/* stw R11, <#[R31 + 8]> */
		/* 821A4B60h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4B60h case    9:*/		return 0x821A4B64;
		  /* 821A4B64h */ case   10:  		/* lhz R11, <#[R30 + 16]> */
		/* 821A4B64h case   10:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821A4B64h case   10:*/		return 0x821A4B68;
		  /* 821A4B68h */ case   11:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821A4B68h case   11:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A4B68h case   11:*/		return 0x821A4B6C;
		  /* 821A4B6Ch */ case   12:  		/* bc 12, CR0_EQ, 116 */
		/* 821A4B6Ch case   12:*/		if ( regs.CR[0].eq ) { return 0x821A4BE0;  }
		/* 821A4B6Ch case   12:*/		return 0x821A4B70;
		  /* 821A4B70h */ case   13:  		/* lwz R11, <#[R30 + 16]> */
		/* 821A4B70h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821A4B70h case   13:*/		return 0x821A4B74;
		  /* 821A4B74h */ case   14:  		/* sth R11, <#[R31 + 18]> */
		/* 821A4B74h case   14:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R31 + 0x00000012) );
		/* 821A4B74h case   14:*/		return 0x821A4B78;
		  /* 821A4B78h */ case   15:  		/* lwz R10, <#[R30 + 16]> */
		/* 821A4B78h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 821A4B78h case   15:*/		return 0x821A4B7C;
		  /* 821A4B7Ch */ case   16:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A4B7Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A4B7Ch case   16:*/		return 0x821A4B80;
		  /* 821A4B80h */ case   17:  		/* rlwimi R11, R10, 0, 13, 15 */
		/* 821A4B80h case   17:*/		cpu::op::rlwimi<0,0,13,15>(regs,&regs.R11,regs.R10);
		/* 821A4B80h case   17:*/		return 0x821A4B84;
		  /* 821A4B84h */ case   18:  		/* stw R11, <#[R31 + 16]> */
		/* 821A4B84h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A4B84h case   18:*/		return 0x821A4B88;
		  /* 821A4B88h */ case   19:  		/* lhz R11, <#[R30 + 18]> */
		/* 821A4B88h case   19:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000012) );
		/* 821A4B88h case   19:*/		return 0x821A4B8C;
		  /* 821A4B8Ch */ case   20:  		/* lwz R10, <#[R30 + 16]> */
		/* 821A4B8Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000010) );
		/* 821A4B8Ch case   20:*/		return 0x821A4B90;
		  /* 821A4B90h */ case   21:  		/* rlwinm R9, R10, 16, 29, 31 */
		/* 821A4B90h case   21:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R9,regs.R10);
		/* 821A4B90h case   21:*/		return 0x821A4B94;
		  /* 821A4B94h */ case   22:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 821A4B94h case   22:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 821A4B94h case   22:*/		return 0x821A4B98;
		  /* 821A4B98h */ case   23:  		/* add R10, R9, R10 */
		/* 821A4B98h case   23:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A4B98h case   23:*/		return 0x821A4B9C;
		  /* 821A4B9Ch */ case   24:  		/* cmplw CR6, R11, R10 */
		/* 821A4B9Ch case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A4B9Ch case   24:*/		return 0x821A4BA0;
		  /* 821A4BA0h */ case   25:  		/* bc 4, CR6_LT, 164 */
		/* 821A4BA0h case   25:*/		if ( !regs.CR[6].lt ) { return 0x821A4C44;  }
		/* 821A4BA0h case   25:*/		return 0x821A4BA4;
		  /* 821A4BA4h */ case   26:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 821A4BA4h case   26:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 821A4BA4h case   26:*/		return 0x821A4BA8;
		  /* 821A4BA8h */ case   27:  		/* lwz R9, <#[R29 + 708]> */
		/* 821A4BA8h case   27:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x000002C4) );
		/* 821A4BA8h case   27:*/		return 0x821A4BAC;
		  /* 821A4BACh */ case   28:  		/* lwzx R8, <#[R10 + R9]> */
		/* 821A4BACh case   28:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821A4BACh case   28:*/		return 0x821A4BB0;
		  /* 821A4BB0h */ case   29:  		/* cmplw CR6, R8, R30 */
		/* 821A4BB0h case   29:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R30);
		/* 821A4BB0h case   29:*/		return 0x821A4BB4;
		  /* 821A4BB4h */ case   30:  		/* bc 4, CR6_EQ, 8 */
		/* 821A4BB4h case   30:*/		if ( !regs.CR[6].eq ) { return 0x821A4BBC;  }
		/* 821A4BB4h case   30:*/		return 0x821A4BB8;
		  /* 821A4BB8h */ case   31:  		/* stwx R31, <#[R10 + R9]> */
		/* 821A4BB8h case   31:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821A4BB8h case   31:*/		return 0x821A4BBC;
	}
	return 0x821A4BBC;
} // Block from 821A4B3Ch-821A4BBCh (32 instructions)

//////////////////////////////////////////////////////
// Block at 821A4BBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4BBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4BBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4BBC);
		  /* 821A4BBCh */ case    0:  		/* lwz R8, <#[R30 + 16]> */
		/* 821A4BBCh case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x00000010) );
		/* 821A4BBCh case    0:*/		return 0x821A4BC0;
		  /* 821A4BC0h */ case    1:  		/* addi R11, R11, 1 */
		/* 821A4BC0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A4BC0h case    1:*/		return 0x821A4BC4;
		  /* 821A4BC4h */ case    2:  		/* addi R10, R10, 4 */
		/* 821A4BC4h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A4BC4h case    2:*/		return 0x821A4BC8;
		  /* 821A4BC8h */ case    3:  		/* rlwinm R9, R8, 16, 29, 31 */
		/* 821A4BC8h case    3:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R9,regs.R8);
		/* 821A4BC8h case    3:*/		return 0x821A4BCC;
		  /* 821A4BCCh */ case    4:  		/* rlwinm R8, R8, 0, 16, 31 */
		/* 821A4BCCh case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R8);
		/* 821A4BCCh case    4:*/		return 0x821A4BD0;
		  /* 821A4BD0h */ case    5:  		/* add R9, R9, R8 */
		/* 821A4BD0h case    5:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821A4BD0h case    5:*/		return 0x821A4BD4;
		  /* 821A4BD4h */ case    6:  		/* cmplw CR6, R11, R9 */
		/* 821A4BD4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821A4BD4h case    6:*/		return 0x821A4BD8;
		  /* 821A4BD8h */ case    7:  		/* bc 12, CR6_LT, -48 */
		/* 821A4BD8h case    7:*/		if ( regs.CR[6].lt ) { return 0x821A4BA8;  }
		/* 821A4BD8h case    7:*/		return 0x821A4BDC;
		  /* 821A4BDCh */ case    8:  		/* b 104 */
		/* 821A4BDCh case    8:*/		return 0x821A4C44;
		/* 821A4BDCh case    8:*/		return 0x821A4BE0;
	}
	return 0x821A4BE0;
} // Block from 821A4BBCh-821A4BE0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A4BE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4BE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4BE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4BE0);
		  /* 821A4BE0h */ case    0:  		/* mr R3, R30 */
		/* 821A4BE0h case    0:*/		regs.R3 = regs.R30;
		/* 821A4BE0h case    0:*/		return 0x821A4BE4;
		  /* 821A4BE4h */ case    1:  		/* bl -135932 */
		/* 821A4BE4h case    1:*/		regs.LR = 0x821A4BE8; return 0x821838E8;
		/* 821A4BE4h case    1:*/		return 0x821A4BE8;
		  /* 821A4BE8h */ case    2:  		/* sth R3, <#[R31 + 18]> */
		/* 821A4BE8h case    2:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 821A4BE8h case    2:*/		return 0x821A4BEC;
		  /* 821A4BECh */ case    3:  		/* lwz R3, <#[R29 + 660]> */
		/* 821A4BECh case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x00000294) );
		/* 821A4BECh case    3:*/		return 0x821A4BF0;
		  /* 821A4BF0h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A4BF0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A4BF0h case    4:*/		return 0x821A4BF4;
		  /* 821A4BF4h */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A4BF4h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A4BF4h case    5:*/		return 0x821A4BF8;
		  /* 821A4BF8h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 821A4BF8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A4C20;  }
		/* 821A4BF8h case    6:*/		return 0x821A4BFC;
		  /* 821A4BFCh */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821A4BFCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A4BFCh case    7:*/		return 0x821A4C00;
		  /* 821A4C00h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4C00h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4C00h case    8:*/		return 0x821A4C04;
		  /* 821A4C04h */ case    9:  		/* addic. R11, R11, -4 */
		/* 821A4C04h case    9:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A4C04h case    9:*/		return 0x821A4C08;
		  /* 821A4C08h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 821A4C08h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A4C20;  }
		/* 821A4C08h case   10:*/		return 0x821A4C0C;
		  /* 821A4C0Ch */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A4C0Ch case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4C0Ch case   11:*/		return 0x821A4C10;
		  /* 821A4C10h */ case   12:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A4C10h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A4C10h case   12:*/		return 0x821A4C14;
		  /* 821A4C14h */ case   13:  		/* addi R10, R10, 1 */
		/* 821A4C14h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A4C14h case   13:*/		return 0x821A4C18;
		  /* 821A4C18h */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 821A4C18h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A4C18h case   14:*/		return 0x821A4C1C;
		  /* 821A4C1Ch */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 821A4C1Ch case   15:*/		if ( !regs.CR[6].gt ) { return 0x821A4C2C;  }
		/* 821A4C1Ch case   15:*/		return 0x821A4C20;
	}
	return 0x821A4C20;
} // Block from 821A4BE0h-821A4C20h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A4C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4C20);
		  /* 821A4C20h */ case    0:  		/* li R4, 1 */
		/* 821A4C20h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A4C20h case    0:*/		return 0x821A4C24;
		  /* 821A4C24h */ case    1:  		/* bl -97116 */
		/* 821A4C24h case    1:*/		regs.LR = 0x821A4C28; return 0x8218D0C8;
		/* 821A4C24h case    1:*/		return 0x821A4C28;
		  /* 821A4C28h */ case    2:  		/* mr R11, R3 */
		/* 821A4C28h case    2:*/		regs.R11 = regs.R3;
		/* 821A4C28h case    2:*/		return 0x821A4C2C;
	}
	return 0x821A4C2C;
} // Block from 821A4C20h-821A4C2Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A4C2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4C2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4C2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4C2C);
		  /* 821A4C2Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A4C2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4C2Ch case    0:*/		return 0x821A4C30;
		  /* 821A4C30h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A4C30h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A4C30h case    1:*/		return 0x821A4C34;
		  /* 821A4C34h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A4C34h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A4C34h case    2:*/		return 0x821A4C38;
		  /* 821A4C38h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A4C38h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A4C38h case    3:*/		return 0x821A4C3C;
		  /* 821A4C3Ch */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A4C3Ch case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4C3Ch case    4:*/		return 0x821A4C40;
		  /* 821A4C40h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A4C40h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A4C40h case    5:*/		return 0x821A4C44;
	}
	return 0x821A4C44;
} // Block from 821A4C2Ch-821A4C44h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A4C44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4C44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4C44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4C44);
		  /* 821A4C44h */ case    0:  		/* li R6, 1 */
		/* 821A4C44h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A4C44h case    0:*/		return 0x821A4C48;
		  /* 821A4C48h */ case    1:  		/* mr R5, R28 */
		/* 821A4C48h case    1:*/		regs.R5 = regs.R28;
		/* 821A4C48h case    1:*/		return 0x821A4C4C;
		  /* 821A4C4Ch */ case    2:  		/* mr R4, R30 */
		/* 821A4C4Ch case    2:*/		regs.R4 = regs.R30;
		/* 821A4C4Ch case    2:*/		return 0x821A4C50;
		  /* 821A4C50h */ case    3:  		/* mr R3, R29 */
		/* 821A4C50h case    3:*/		regs.R3 = regs.R29;
		/* 821A4C50h case    3:*/		return 0x821A4C54;
		  /* 821A4C54h */ case    4:  		/* bl 550772 */
		/* 821A4C54h case    4:*/		regs.LR = 0x821A4C58; return 0x8222B3C8;
		/* 821A4C54h case    4:*/		return 0x821A4C58;
		  /* 821A4C58h */ case    5:  		/* addi R1, R1, 128 */
		/* 821A4C58h case    5:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x80);
		/* 821A4C58h case    5:*/		return 0x821A4C5C;
		  /* 821A4C5Ch */ case    6:  		/* b -1128884 */
		/* 821A4C5Ch case    6:*/		return 0x820912A8;
		/* 821A4C5Ch case    6:*/		return 0x821A4C60;
	}
	return 0x821A4C60;
} // Block from 821A4C44h-821A4C60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A4C60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4C60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4C60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4C60);
		  /* 821A4C60h */ case    0:  		/* mfspr R12, LR */
		/* 821A4C60h case    0:*/		regs.R12 = regs.LR;
		/* 821A4C60h case    0:*/		return 0x821A4C64;
		  /* 821A4C64h */ case    1:  		/* bl -1128984 */
		/* 821A4C64h case    1:*/		regs.LR = 0x821A4C68; return 0x8209124C;
		/* 821A4C64h case    1:*/		return 0x821A4C68;
		  /* 821A4C68h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821A4C68h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821A4C68h case    2:*/		return 0x821A4C6C;
		  /* 821A4C6Ch */ case    3:  		/* mr R26, R8 */
		/* 821A4C6Ch case    3:*/		regs.R26 = regs.R8;
		/* 821A4C6Ch case    3:*/		return 0x821A4C70;
		  /* 821A4C70h */ case    4:  		/* mr R25, R3 */
		/* 821A4C70h case    4:*/		regs.R25 = regs.R3;
		/* 821A4C70h case    4:*/		return 0x821A4C74;
		  /* 821A4C74h */ case    5:  		/* mr R28, R4 */
		/* 821A4C74h case    5:*/		regs.R28 = regs.R4;
		/* 821A4C74h case    5:*/		return 0x821A4C78;
		  /* 821A4C78h */ case    6:  		/* mr R30, R5 */
		/* 821A4C78h case    6:*/		regs.R30 = regs.R5;
		/* 821A4C78h case    6:*/		return 0x821A4C7C;
		  /* 821A4C7Ch */ case    7:  		/* mr R27, R6 */
		/* 821A4C7Ch case    7:*/		regs.R27 = regs.R6;
		/* 821A4C7Ch case    7:*/		return 0x821A4C80;
		  /* 821A4C80h */ case    8:  		/* mr R8, R4 */
		/* 821A4C80h case    8:*/		regs.R8 = regs.R4;
		/* 821A4C80h case    8:*/		return 0x821A4C84;
		  /* 821A4C84h */ case    9:  		/* lwz R11, <#[R8]> */
		/* 821A4C84h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A4C84h case    9:*/		return 0x821A4C88;
		  /* 821A4C88h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821A4C88h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A4C88h case   10:*/		return 0x821A4C8C;
		  /* 821A4C8Ch */ case   11:  		/* bc 12, CR6_EQ, 112 */
		/* 821A4C8Ch case   11:*/		if ( regs.CR[6].eq ) { return 0x821A4CFC;  }
		/* 821A4C8Ch case   11:*/		return 0x821A4C90;
		  /* 821A4C90h */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821A4C90h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4C90h case   12:*/		return 0x821A4C94;
		  /* 821A4C94h */ case   13:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821A4C94h case   13:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821A4C94h case   13:*/		return 0x821A4C98;
		  /* 821A4C98h */ case   14:  		/* bc 4, CR0_EQ, 80 */
		/* 821A4C98h case   14:*/		if ( !regs.CR[0].eq ) { return 0x821A4CE8;  }
		/* 821A4C98h case   14:*/		return 0x821A4C9C;
		  /* 821A4C9Ch */ case   15:  		/* rlwinm. R9, R7, 0, 24, 31 */
		/* 821A4C9Ch case   15:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R9,regs.R7);
		/* 821A4C9Ch case   15:*/		return 0x821A4CA0;
		  /* 821A4CA0h */ case   16:  		/* bc 4, CR0_EQ, 20 */
		/* 821A4CA0h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821A4CB4;  }
		/* 821A4CA0h case   16:*/		return 0x821A4CA4;
		  /* 821A4CA4h */ case   17:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821A4CA4h case   17:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821A4CA4h case   17:*/		return 0x821A4CA8;
		  /* 821A4CA8h */ case   18:  		/* bc 12, CR0_EQ, 12 */
		/* 821A4CA8h case   18:*/		if ( regs.CR[0].eq ) { return 0x821A4CB4;  }
		/* 821A4CA8h case   18:*/		return 0x821A4CAC;
		  /* 821A4CACh */ case   19:  		/* rlwinm. R10, R10, 0, 7, 18 */
		/* 821A4CACh case   19:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R10);
		/* 821A4CACh case   19:*/		return 0x821A4CB0;
		  /* 821A4CB0h */ case   20:  		/* bc 12, CR0_EQ, 56 */
		/* 821A4CB0h case   20:*/		if ( regs.CR[0].eq ) { return 0x821A4CE8;  }
		/* 821A4CB0h case   20:*/		return 0x821A4CB4;
	}
	return 0x821A4CB4;
} // Block from 821A4C60h-821A4CB4h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821A4CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4CB4);
		  /* 821A4CB4h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A4CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A4CB4h case    0:*/		return 0x821A4CB8;
		  /* 821A4CB8h */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821A4CB8h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4CB8h case    1:*/		return 0x821A4CBC;
		  /* 821A4CBCh */ case    2:  		/* b 12 */
		/* 821A4CBCh case    2:*/		return 0x821A4CC8;
		/* 821A4CBCh case    2:*/		return 0x821A4CC0;
		  /* 821A4CC0h */ case    3:  		/* addi R10, R9, 4 */
		/* 821A4CC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821A4CC0h case    3:*/		return 0x821A4CC4;
		  /* 821A4CC4h */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821A4CC4h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821A4CC4h case    4:*/		return 0x821A4CC8;
	}
	return 0x821A4CC8;
} // Block from 821A4CB4h-821A4CC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A4CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4CC8);
		  /* 821A4CC8h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A4CC8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A4CC8h case    0:*/		return 0x821A4CCC;
		  /* 821A4CCCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A4CCCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4CC0;  }
		/* 821A4CCCh case    1:*/		return 0x821A4CD0;
	}
	return 0x821A4CD0;
} // Block from 821A4CC8h-821A4CD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A4CD0h
// Function '?CollectMaxChainOperands@Compiler@D3DXShader@@AAAXPAVInstruction@2@W4Component@2@PAV?$ArrayList@PAVDependency@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4CD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4CD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4CD0);
		  /* 821A4CD0h */ case    0:  		/* lwz R9, <#[R11 + 4]> */
		/* 821A4CD0h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4CD0h case    0:*/		return 0x821A4CD4;
		  /* 821A4CD4h */ case    1:  		/* stw R9, <#[R10]> */
		/* 821A4CD4h case    1:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A4CD4h case    1:*/		return 0x821A4CD8;
		  /* 821A4CD8h */ case    2:  		/* lwz R10, <#[R30]> */
		/* 821A4CD8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821A4CD8h case    2:*/		return 0x821A4CDC;
		  /* 821A4CDCh */ case    3:  		/* stw R10, <#[R11 + 4]> */
		/* 821A4CDCh case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A4CDCh case    3:*/		return 0x821A4CE0;
		  /* 821A4CE0h */ case    4:  		/* stw R11, <#[R30]> */
		/* 821A4CE0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A4CE0h case    4:*/		return 0x821A4CE4;
		  /* 821A4CE4h */ case    5:  		/* stw R30, <#[R11 + 16]> */
		/* 821A4CE4h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 821A4CE4h case    5:*/		return 0x821A4CE8;
	}
	return 0x821A4CE8;
} // Block from 821A4CD0h-821A4CE8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A4CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4CE8);
		  /* 821A4CE8h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A4CE8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A4CE8h case    0:*/		return 0x821A4CEC;
		  /* 821A4CECh */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A4CECh case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A4CECh case    1:*/		return 0x821A4CF0;
		  /* 821A4CF0h */ case    2:  		/* bc 4, CR6_EQ, -108 */
		/* 821A4CF0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A4C84;  }
		/* 821A4CF0h case    2:*/		return 0x821A4CF4;
		  /* 821A4CF4h */ case    3:  		/* addi R8, R11, 4 */
		/* 821A4CF4h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821A4CF4h case    3:*/		return 0x821A4CF8;
		  /* 821A4CF8h */ case    4:  		/* b -116 */
		/* 821A4CF8h case    4:*/		return 0x821A4C84;
		/* 821A4CF8h case    4:*/		return 0x821A4CFC;
	}
	return 0x821A4CFC;
} // Block from 821A4CE8h-821A4CFCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A4CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4CFC);
		  /* 821A4CFCh */ case    0:  		/* addi R29, R28, 4 */
		/* 821A4CFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0x4);
		/* 821A4CFCh case    0:*/		return 0x821A4D00;
		  /* 821A4D00h */ case    1:  		/* lwz R31, <#[R29]> */
		/* 821A4D00h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821A4D00h case    1:*/		return 0x821A4D04;
		  /* 821A4D04h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821A4D04h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A4D04h case    2:*/		return 0x821A4D08;
		  /* 821A4D08h */ case    3:  		/* bc 12, CR6_EQ, 176 */
		/* 821A4D08h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A4DB8;  }
		/* 821A4D08h case    3:*/		return 0x821A4D0C;
		  /* 821A4D0Ch */ case    4:  		/* lwz R4, <#[R31 + 16]> */
		/* 821A4D0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821A4D0Ch case    4:*/		return 0x821A4D10;
		  /* 821A4D10h */ case    5:  		/* cmplwi CR6, R4, 0 */
		/* 821A4D10h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A4D10h case    5:*/		return 0x821A4D14;
		  /* 821A4D14h */ case    6:  		/* bc 12, CR6_EQ, 144 */
		/* 821A4D14h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A4DA4;  }
		/* 821A4D14h case    6:*/		return 0x821A4D18;
		  /* 821A4D18h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821A4D18h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A4D18h case    7:*/		return 0x821A4D1C;
		  /* 821A4D1Ch */ case    8:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821A4D1Ch case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821A4D1Ch case    8:*/		return 0x821A4D20;
		  /* 821A4D20h */ case    9:  		/* bc 12, CR0_EQ, 76 */
		/* 821A4D20h case    9:*/		if ( regs.CR[0].eq ) { return 0x821A4D6C;  }
		/* 821A4D20h case    9:*/		return 0x821A4D24;
		  /* 821A4D24h */ case   10:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821A4D24h case   10:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821A4D24h case   10:*/		return 0x821A4D28;
		  /* 821A4D28h */ case   11:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821A4D28h case   11:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821A4D28h case   11:*/		return 0x821A4D2C;
		  /* 821A4D2Ch */ case   12:  		/* srw R10, R27, R10 */
		/* 821A4D2Ch case   12:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821A4D2Ch case   12:*/		return 0x821A4D30;
		  /* 821A4D30h */ case   13:  		/* srw R9, R27, R9 */
		/* 821A4D30h case   13:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821A4D30h case   13:*/		return 0x821A4D34;
		  /* 821A4D34h */ case   14:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821A4D34h case   14:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821A4D34h case   14:*/		return 0x821A4D38;
		  /* 821A4D38h */ case   15:  		/* rlwinm R8, R11, 26, 29, 30 */
		/* 821A4D38h case   15:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R8,regs.R11);
		/* 821A4D38h case   15:*/		return 0x821A4D3C;
		  /* 821A4D3Ch */ case   16:  		/* rlwinm R10, R11, 28, 29, 30 */
		/* 821A4D3Ch case   16:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R10,regs.R11);
		/* 821A4D3Ch case   16:*/		return 0x821A4D40;
		  /* 821A4D40h */ case   17:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A4D40h case   17:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A4D40h case   17:*/		return 0x821A4D44;
		  /* 821A4D44h */ case   18:  		/* srw R8, R27, R8 */
		/* 821A4D44h case   18:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R27,regs.R8);
		/* 821A4D44h case   18:*/		return 0x821A4D48;
		  /* 821A4D48h */ case   19:  		/* srw R10, R27, R10 */
		/* 821A4D48h case   19:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821A4D48h case   19:*/		return 0x821A4D4C;
		  /* 821A4D4Ch */ case   20:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821A4D4Ch case   20:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821A4D4Ch case   20:*/		return 0x821A4D50;
		  /* 821A4D50h */ case   21:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821A4D50h case   21:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821A4D50h case   21:*/		return 0x821A4D54;
		  /* 821A4D54h */ case   22:  		/* rlwimi R10, R8, 2, 0, 29 */
		/* 821A4D54h case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 821A4D54h case   22:*/		return 0x821A4D58;
		  /* 821A4D58h */ case   23:  		/* mr R3, R25 */
		/* 821A4D58h case   23:*/		regs.R3 = regs.R25;
		/* 821A4D58h case   23:*/		return 0x821A4D5C;
		  /* 821A4D5Ch */ case   24:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821A4D5Ch case   24:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821A4D5Ch case   24:*/		return 0x821A4D60;
		  /* 821A4D60h */ case   25:  		/* or R11, R10, R11 */
		/* 821A4D60h case   25:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A4D60h case   25:*/		return 0x821A4D64;
		  /* 821A4D64h */ case   26:  		/* stw R11, <#[R31]> */
		/* 821A4D64h case   26:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A4D64h case   26:*/		return 0x821A4D68;
		  /* 821A4D68h */ case   27:  		/* bl -17072 */
		/* 821A4D68h case   27:*/		regs.LR = 0x821A4D6C; return 0x821A0AB8;
		/* 821A4D68h case   27:*/		return 0x821A4D6C;
	}
	return 0x821A4D6C;
} // Block from 821A4CFCh-821A4D6Ch (28 instructions)

//////////////////////////////////////////////////////
// Block at 821A4D6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4D6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4D6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4D6C);
		  /* 821A4D6Ch */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A4D6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A4D6Ch case    0:*/		return 0x821A4D70;
		  /* 821A4D70h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A4D70h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A4D70h case    1:*/		return 0x821A4D74;
		  /* 821A4D74h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A4D74h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4D74h case    2:*/		return 0x821A4D78;
		  /* 821A4D78h */ case    3:  		/* b 12 */
		/* 821A4D78h case    3:*/		return 0x821A4D84;
		/* 821A4D78h case    3:*/		return 0x821A4D7C;
		  /* 821A4D7Ch */ case    4:  		/* addi R11, R10, 8 */
		/* 821A4D7Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A4D7Ch case    4:*/		return 0x821A4D80;
		  /* 821A4D80h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A4D80h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A4D80h case    5:*/		return 0x821A4D84;
	}
	return 0x821A4D84;
} // Block from 821A4D6Ch-821A4D84h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A4D84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4D84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4D84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4D84);
		  /* 821A4D84h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A4D84h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A4D84h case    0:*/		return 0x821A4D88;
		  /* 821A4D88h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A4D88h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A4D7C;  }
		/* 821A4D88h case    1:*/		return 0x821A4D8C;
		  /* 821A4D8Ch */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A4D8Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4D8Ch case    2:*/		return 0x821A4D90;
		  /* 821A4D90h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A4D90h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4D90h case    3:*/		return 0x821A4D94;
		  /* 821A4D94h */ case    4:  		/* lwz R11, <#[R30 + 4]> */
		/* 821A4D94h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821A4D94h case    4:*/		return 0x821A4D98;
		  /* 821A4D98h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821A4D98h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A4D98h case    5:*/		return 0x821A4D9C;
		  /* 821A4D9Ch */ case    6:  		/* stw R31, <#[R30 + 4]> */
		/* 821A4D9Ch case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R30 + 0x00000004) );
		/* 821A4D9Ch case    6:*/		return 0x821A4DA0;
		  /* 821A4DA0h */ case    7:  		/* stw R30, <#[R31 + 12]> */
		/* 821A4DA0h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A4DA0h case    7:*/		return 0x821A4DA4;
	}
	return 0x821A4DA4;
} // Block from 821A4D84h-821A4DA4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A4DA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4DA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4DA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4DA4);
		  /* 821A4DA4h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821A4DA4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A4DA4h case    0:*/		return 0x821A4DA8;
		  /* 821A4DA8h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A4DA8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A4DA8h case    1:*/		return 0x821A4DAC;
		  /* 821A4DACh */ case    2:  		/* bc 4, CR6_EQ, -172 */
		/* 821A4DACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A4D00;  }
		/* 821A4DACh case    2:*/		return 0x821A4DB0;
		  /* 821A4DB0h */ case    3:  		/* addi R29, R31, 8 */
		/* 821A4DB0h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x8);
		/* 821A4DB0h case    3:*/		return 0x821A4DB4;
		  /* 821A4DB4h */ case    4:  		/* b -180 */
		/* 821A4DB4h case    4:*/		return 0x821A4D00;
		/* 821A4DB4h case    4:*/		return 0x821A4DB8;
	}
	return 0x821A4DB8;
} // Block from 821A4DA4h-821A4DB8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A4DB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4DB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4DB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4DB8);
		  /* 821A4DB8h */ case    0:  		/* rlwinm. R11, R26, 0, 24, 31 */
		/* 821A4DB8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R26);
		/* 821A4DB8h case    0:*/		return 0x821A4DBC;
		  /* 821A4DBCh */ case    1:  		/* bc 12, CR0_EQ, 56 */
		/* 821A4DBCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821A4DF4;  }
		/* 821A4DBCh case    1:*/		return 0x821A4DC0;
		  /* 821A4DC0h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A4DC0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A4DC0h case    2:*/		return 0x821A4DC4;
		  /* 821A4DC4h */ case    3:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A4DC4h case    3:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A4DC4h case    3:*/		return 0x821A4DC8;
		  /* 821A4DC8h */ case    4:  		/* cmplwi CR6, R11, 14080 */
		/* 821A4DC8h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821A4DC8h case    4:*/		return 0x821A4DCC;
		  /* 821A4DCCh */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 821A4DCCh case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A4DE0;  }
		/* 821A4DCCh case    5:*/		return 0x821A4DD0;
		  /* 821A4DD0h */ case    6:  		/* mr R4, R30 */
		/* 821A4DD0h case    6:*/		regs.R4 = regs.R30;
		/* 821A4DD0h case    6:*/		return 0x821A4DD4;
		  /* 821A4DD4h */ case    7:  		/* mr R3, R25 */
		/* 821A4DD4h case    7:*/		regs.R3 = regs.R25;
		/* 821A4DD4h case    7:*/		return 0x821A4DD8;
		  /* 821A4DD8h */ case    8:  		/* bl 71184 */
		/* 821A4DD8h case    8:*/		regs.LR = 0x821A4DDC; return 0x821B63E8;
		/* 821A4DD8h case    8:*/		return 0x821A4DDC;
		  /* 821A4DDCh */ case    9:  		/* b 12 */
		/* 821A4DDCh case    9:*/		return 0x821A4DE8;
		/* 821A4DDCh case    9:*/		return 0x821A4DE0;
	}
	return 0x821A4DE0;
} // Block from 821A4DB8h-821A4DE0h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A4DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4DE0);
		  /* 821A4DE0h */ case    0:  		/* mr R3, R30 */
		/* 821A4DE0h case    0:*/		regs.R3 = regs.R30;
		/* 821A4DE0h case    0:*/		return 0x821A4DE4;
		  /* 821A4DE4h */ case    1:  		/* bl -182892 */
		/* 821A4DE4h case    1:*/		regs.LR = 0x821A4DE8; return 0x82178378;
		/* 821A4DE4h case    1:*/		return 0x821A4DE8;
	}
	return 0x821A4DE8;
} // Block from 821A4DE0h-821A4DE8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A4DE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4DE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4DE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4DE8);
		  /* 821A4DE8h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A4DE8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A4DE8h case    0:*/		return 0x821A4DEC;
		  /* 821A4DECh */ case    1:  		/* oris R11, R11, 256 */
		/* 821A4DECh case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A4DECh case    1:*/		return 0x821A4DF0;
		  /* 821A4DF0h */ case    2:  		/* stw R11, <#[R30 + 8]> */
		/* 821A4DF0h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A4DF0h case    2:*/		return 0x821A4DF4;
	}
	return 0x821A4DF4;
} // Block from 821A4DE8h-821A4DF4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A4DF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4DF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4DF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4DF4);
		  /* 821A4DF4h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A4DF4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A4DF4h case    0:*/		return 0x821A4DF8;
		  /* 821A4DF8h */ case    1:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A4DF8h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A4DF8h case    1:*/		return 0x821A4DFC;
		  /* 821A4DFCh */ case    2:  		/* bc 4, CR0_EQ, 248 */
		/* 821A4DFCh case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A4EF4;  }
		/* 821A4DFCh case    2:*/		return 0x821A4E00;
		  /* 821A4E00h */ case    3:  		/* lwz R10, <#[R28 + 8]> */
		/* 821A4E00h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821A4E00h case    3:*/		return 0x821A4E04;
		  /* 821A4E04h */ case    4:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A4E04h case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A4E04h case    4:*/		return 0x821A4E08;
		  /* 821A4E08h */ case    5:  		/* bc 12, CR0_EQ, 236 */
		/* 821A4E08h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A4EF4;  }
		/* 821A4E08h case    5:*/		return 0x821A4E0C;
		  /* 821A4E0Ch */ case    6:  		/* oris R11, R11, 128 */
		/* 821A4E0Ch case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A4E0Ch case    6:*/		return 0x821A4E10;
		  /* 821A4E10h */ case    7:  		/* stw R11, <#[R30 + 8]> */
		/* 821A4E10h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A4E10h case    7:*/		return 0x821A4E14;
		  /* 821A4E14h */ case    8:  		/* lhz R11, <#[R28 + 16]> */
		/* 821A4E14h case    8:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821A4E14h case    8:*/		return 0x821A4E18;
		  /* 821A4E18h */ case    9:  		/* rlwinm. R11, R11, 0, 29, 31 */
		/* 821A4E18h case    9:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A4E18h case    9:*/		return 0x821A4E1C;
		  /* 821A4E1Ch */ case   10:  		/* bc 12, CR0_EQ, 116 */
		/* 821A4E1Ch case   10:*/		if ( regs.CR[0].eq ) { return 0x821A4E90;  }
		/* 821A4E1Ch case   10:*/		return 0x821A4E20;
		  /* 821A4E20h */ case   11:  		/* lwz R11, <#[R28 + 16]> */
		/* 821A4E20h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000010) );
		/* 821A4E20h case   11:*/		return 0x821A4E24;
		  /* 821A4E24h */ case   12:  		/* sth R11, <#[R30 + 18]> */
		/* 821A4E24h case   12:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R30 + 0x00000012) );
		/* 821A4E24h case   12:*/		return 0x821A4E28;
		  /* 821A4E28h */ case   13:  		/* lwz R10, <#[R28 + 16]> */
		/* 821A4E28h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 821A4E28h case   13:*/		return 0x821A4E2C;
		  /* 821A4E2Ch */ case   14:  		/* lwz R11, <#[R30 + 16]> */
		/* 821A4E2Ch case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821A4E2Ch case   14:*/		return 0x821A4E30;
		  /* 821A4E30h */ case   15:  		/* rlwimi R11, R10, 0, 13, 15 */
		/* 821A4E30h case   15:*/		cpu::op::rlwimi<0,0,13,15>(regs,&regs.R11,regs.R10);
		/* 821A4E30h case   15:*/		return 0x821A4E34;
		  /* 821A4E34h */ case   16:  		/* stw R11, <#[R30 + 16]> */
		/* 821A4E34h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821A4E34h case   16:*/		return 0x821A4E38;
		  /* 821A4E38h */ case   17:  		/* lhz R11, <#[R28 + 18]> */
		/* 821A4E38h case   17:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000012) );
		/* 821A4E38h case   17:*/		return 0x821A4E3C;
		  /* 821A4E3Ch */ case   18:  		/* lwz R10, <#[R28 + 16]> */
		/* 821A4E3Ch case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000010) );
		/* 821A4E3Ch case   18:*/		return 0x821A4E40;
		  /* 821A4E40h */ case   19:  		/* rlwinm R9, R10, 16, 29, 31 */
		/* 821A4E40h case   19:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R9,regs.R10);
		/* 821A4E40h case   19:*/		return 0x821A4E44;
		  /* 821A4E44h */ case   20:  		/* rlwinm R10, R10, 0, 16, 31 */
		/* 821A4E44h case   20:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R10,regs.R10);
		/* 821A4E44h case   20:*/		return 0x821A4E48;
		  /* 821A4E48h */ case   21:  		/* add R10, R9, R10 */
		/* 821A4E48h case   21:*/		cpu::op::add<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A4E48h case   21:*/		return 0x821A4E4C;
		  /* 821A4E4Ch */ case   22:  		/* cmplw CR6, R11, R10 */
		/* 821A4E4Ch case   22:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A4E4Ch case   22:*/		return 0x821A4E50;
		  /* 821A4E50h */ case   23:  		/* bc 4, CR6_LT, 164 */
		/* 821A4E50h case   23:*/		if ( !regs.CR[6].lt ) { return 0x821A4EF4;  }
		/* 821A4E50h case   23:*/		return 0x821A4E54;
		  /* 821A4E54h */ case   24:  		/* rlwinm R10, R11, 2, 0, 29 */
		/* 821A4E54h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R11);
		/* 821A4E54h case   24:*/		return 0x821A4E58;
		  /* 821A4E58h */ case   25:  		/* lwz R9, <#[R25 + 708]> */
		/* 821A4E58h case   25:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x000002C4) );
		/* 821A4E58h case   25:*/		return 0x821A4E5C;
		  /* 821A4E5Ch */ case   26:  		/* lwzx R8, <#[R10 + R9]> */
		/* 821A4E5Ch case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821A4E5Ch case   26:*/		return 0x821A4E60;
		  /* 821A4E60h */ case   27:  		/* cmplw CR6, R8, R28 */
		/* 821A4E60h case   27:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R28);
		/* 821A4E60h case   27:*/		return 0x821A4E64;
		  /* 821A4E64h */ case   28:  		/* bc 4, CR6_EQ, 8 */
		/* 821A4E64h case   28:*/		if ( !regs.CR[6].eq ) { return 0x821A4E6C;  }
		/* 821A4E64h case   28:*/		return 0x821A4E68;
		  /* 821A4E68h */ case   29:  		/* stwx R30, <#[R10 + R9]> */
		/* 821A4E68h case   29:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821A4E68h case   29:*/		return 0x821A4E6C;
	}
	return 0x821A4E6C;
} // Block from 821A4DF4h-821A4E6Ch (30 instructions)

//////////////////////////////////////////////////////
// Block at 821A4E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4E6C);
		  /* 821A4E6Ch */ case    0:  		/* lwz R8, <#[R28 + 16]> */
		/* 821A4E6Ch case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x00000010) );
		/* 821A4E6Ch case    0:*/		return 0x821A4E70;
		  /* 821A4E70h */ case    1:  		/* addi R11, R11, 1 */
		/* 821A4E70h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A4E70h case    1:*/		return 0x821A4E74;
		  /* 821A4E74h */ case    2:  		/* addi R10, R10, 4 */
		/* 821A4E74h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A4E74h case    2:*/		return 0x821A4E78;
		  /* 821A4E78h */ case    3:  		/* rlwinm R9, R8, 16, 29, 31 */
		/* 821A4E78h case    3:*/		cpu::op::rlwinm<0,16,29,31>(regs,&regs.R9,regs.R8);
		/* 821A4E78h case    3:*/		return 0x821A4E7C;
		  /* 821A4E7Ch */ case    4:  		/* rlwinm R8, R8, 0, 16, 31 */
		/* 821A4E7Ch case    4:*/		cpu::op::rlwinm<0,0,16,31>(regs,&regs.R8,regs.R8);
		/* 821A4E7Ch case    4:*/		return 0x821A4E80;
		  /* 821A4E80h */ case    5:  		/* add R9, R9, R8 */
		/* 821A4E80h case    5:*/		cpu::op::add<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821A4E80h case    5:*/		return 0x821A4E84;
		  /* 821A4E84h */ case    6:  		/* cmplw CR6, R11, R9 */
		/* 821A4E84h case    6:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R9);
		/* 821A4E84h case    6:*/		return 0x821A4E88;
		  /* 821A4E88h */ case    7:  		/* bc 12, CR6_LT, -48 */
		/* 821A4E88h case    7:*/		if ( regs.CR[6].lt ) { return 0x821A4E58;  }
		/* 821A4E88h case    7:*/		return 0x821A4E8C;
		  /* 821A4E8Ch */ case    8:  		/* b 104 */
		/* 821A4E8Ch case    8:*/		return 0x821A4EF4;
		/* 821A4E8Ch case    8:*/		return 0x821A4E90;
	}
	return 0x821A4E90;
} // Block from 821A4E6Ch-821A4E90h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A4E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4E90);
		  /* 821A4E90h */ case    0:  		/* mr R3, R28 */
		/* 821A4E90h case    0:*/		regs.R3 = regs.R28;
		/* 821A4E90h case    0:*/		return 0x821A4E94;
		  /* 821A4E94h */ case    1:  		/* bl -136620 */
		/* 821A4E94h case    1:*/		regs.LR = 0x821A4E98; return 0x821838E8;
		/* 821A4E94h case    1:*/		return 0x821A4E98;
		  /* 821A4E98h */ case    2:  		/* sth R3, <#[R30 + 18]> */
		/* 821A4E98h case    2:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R30 + 0x00000012) );
		/* 821A4E98h case    2:*/		return 0x821A4E9C;
		  /* 821A4E9Ch */ case    3:  		/* lwz R3, <#[R25 + 660]> */
		/* 821A4E9Ch case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000294) );
		/* 821A4E9Ch case    3:*/		return 0x821A4EA0;
		  /* 821A4EA0h */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A4EA0h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A4EA0h case    4:*/		return 0x821A4EA4;
		  /* 821A4EA4h */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A4EA4h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A4EA4h case    5:*/		return 0x821A4EA8;
		  /* 821A4EA8h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 821A4EA8h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A4ED0;  }
		/* 821A4EA8h case    6:*/		return 0x821A4EAC;
		  /* 821A4EACh */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821A4EACh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A4EACh case    7:*/		return 0x821A4EB0;
		  /* 821A4EB0h */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A4EB0h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A4EB0h case    8:*/		return 0x821A4EB4;
		  /* 821A4EB4h */ case    9:  		/* addic. R11, R11, -4 */
		/* 821A4EB4h case    9:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A4EB4h case    9:*/		return 0x821A4EB8;
		  /* 821A4EB8h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 821A4EB8h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A4ED0;  }
		/* 821A4EB8h case   10:*/		return 0x821A4EBC;
		  /* 821A4EBCh */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A4EBCh case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4EBCh case   11:*/		return 0x821A4EC0;
		  /* 821A4EC0h */ case   12:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A4EC0h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A4EC0h case   12:*/		return 0x821A4EC4;
		  /* 821A4EC4h */ case   13:  		/* addi R10, R10, 1 */
		/* 821A4EC4h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A4EC4h case   13:*/		return 0x821A4EC8;
		  /* 821A4EC8h */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 821A4EC8h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A4EC8h case   14:*/		return 0x821A4ECC;
		  /* 821A4ECCh */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 821A4ECCh case   15:*/		if ( !regs.CR[6].gt ) { return 0x821A4EDC;  }
		/* 821A4ECCh case   15:*/		return 0x821A4ED0;
	}
	return 0x821A4ED0;
} // Block from 821A4E90h-821A4ED0h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A4ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4ED0);
		  /* 821A4ED0h */ case    0:  		/* li R4, 1 */
		/* 821A4ED0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A4ED0h case    0:*/		return 0x821A4ED4;
		  /* 821A4ED4h */ case    1:  		/* bl -97804 */
		/* 821A4ED4h case    1:*/		regs.LR = 0x821A4ED8; return 0x8218D0C8;
		/* 821A4ED4h case    1:*/		return 0x821A4ED8;
		  /* 821A4ED8h */ case    2:  		/* mr R11, R3 */
		/* 821A4ED8h case    2:*/		regs.R11 = regs.R3;
		/* 821A4ED8h case    2:*/		return 0x821A4EDC;
	}
	return 0x821A4EDC;
} // Block from 821A4ED0h-821A4EDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A4EDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4EDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4EDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4EDC);
		  /* 821A4EDCh */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A4EDCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4EDCh case    0:*/		return 0x821A4EE0;
		  /* 821A4EE0h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A4EE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A4EE0h case    1:*/		return 0x821A4EE4;
		  /* 821A4EE4h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A4EE4h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A4EE4h case    2:*/		return 0x821A4EE8;
		  /* 821A4EE8h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A4EE8h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A4EE8h case    3:*/		return 0x821A4EEC;
		  /* 821A4EECh */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A4EECh case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4EECh case    4:*/		return 0x821A4EF0;
		  /* 821A4EF0h */ case    5:  		/* stwx R30, <#[R10 + R11]> */
		/* 821A4EF0h case    5:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A4EF0h case    5:*/		return 0x821A4EF4;
	}
	return 0x821A4EF4;
} // Block from 821A4EDCh-821A4EF4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A4EF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4EF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4EF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4EF4);
		  /* 821A4EF4h */ case    0:  		/* mr R4, R30 */
		/* 821A4EF4h case    0:*/		regs.R4 = regs.R30;
		/* 821A4EF4h case    0:*/		return 0x821A4EF8;
		  /* 821A4EF8h */ case    1:  		/* mr R3, R25 */
		/* 821A4EF8h case    1:*/		regs.R3 = regs.R25;
		/* 821A4EF8h case    1:*/		return 0x821A4EFC;
		  /* 821A4EFCh */ case    2:  		/* bl -17476 */
		/* 821A4EFCh case    2:*/		regs.LR = 0x821A4F00; return 0x821A0AB8;
		/* 821A4EFCh case    2:*/		return 0x821A4F00;
		  /* 821A4F00h */ case    3:  		/* li R6, 1 */
		/* 821A4F00h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A4F00h case    3:*/		return 0x821A4F04;
		  /* 821A4F04h */ case    4:  		/* mr R4, R28 */
		/* 821A4F04h case    4:*/		regs.R4 = regs.R28;
		/* 821A4F04h case    4:*/		return 0x821A4F08;
		  /* 821A4F08h */ case    5:  		/* lwz R5, <#[R25 + 652]> */
		/* 821A4F08h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000028C) );
		/* 821A4F08h case    5:*/		return 0x821A4F0C;
		  /* 821A4F0Ch */ case    6:  		/* mr R3, R25 */
		/* 821A4F0Ch case    6:*/		regs.R3 = regs.R25;
		/* 821A4F0Ch case    6:*/		return 0x821A4F10;
		  /* 821A4F10h */ case    7:  		/* bl 550072 */
		/* 821A4F10h case    7:*/		regs.LR = 0x821A4F14; return 0x8222B3C8;
		/* 821A4F10h case    7:*/		return 0x821A4F14;
		  /* 821A4F14h */ case    8:  		/* addi R1, R1, 144 */
		/* 821A4F14h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821A4F14h case    8:*/		return 0x821A4F18;
		  /* 821A4F18h */ case    9:  		/* b -1129596 */
		/* 821A4F18h case    9:*/		return 0x8209129C;
		/* 821A4F18h case    9:*/		return 0x821A4F1C;
		  /* 821A4F1Ch */ case   10:  		/* nop */
		/* 821A4F1Ch case   10:*/		cpu::op::nop();
		/* 821A4F1Ch case   10:*/		return 0x821A4F20;
	}
	return 0x821A4F20;
} // Block from 821A4EF4h-821A4F20h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A4F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4F20);
		  /* 821A4F20h */ case    0:  		/* mfspr R12, LR */
		/* 821A4F20h case    0:*/		regs.R12 = regs.LR;
		/* 821A4F20h case    0:*/		return 0x821A4F24;
		  /* 821A4F24h */ case    1:  		/* bl -1129704 */
		/* 821A4F24h case    1:*/		regs.LR = 0x821A4F28; return 0x8209123C;
		/* 821A4F24h case    1:*/		return 0x821A4F28;
		  /* 821A4F28h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821A4F28h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821A4F28h case    2:*/		return 0x821A4F2C;
		  /* 821A4F2Ch */ case    3:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A4F2Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A4F2Ch case    3:*/		return 0x821A4F30;
		  /* 821A4F30h */ case    4:  		/* mr R23, R6 */
		/* 821A4F30h case    4:*/		regs.R23 = regs.R6;
		/* 821A4F30h case    4:*/		return 0x821A4F34;
		  /* 821A4F34h */ case    5:  		/* mr R26, R3 */
		/* 821A4F34h case    5:*/		regs.R26 = regs.R3;
		/* 821A4F34h case    5:*/		return 0x821A4F38;
		  /* 821A4F38h */ case    6:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821A4F38h case    6:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821A4F38h case    6:*/		return 0x821A4F3C;
		  /* 821A4F3Ch */ case    7:  		/* mr R27, R4 */
		/* 821A4F3Ch case    7:*/		regs.R27 = regs.R4;
		/* 821A4F3Ch case    7:*/		return 0x821A4F40;
		  /* 821A4F40h */ case    8:  		/* mr R21, R5 */
		/* 821A4F40h case    8:*/		regs.R21 = regs.R5;
		/* 821A4F40h case    8:*/		return 0x821A4F44;
		  /* 821A4F44h */ case    9:  		/* cmplwi CR6, R6, 1 */
		/* 821A4F44h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 821A4F44h case    9:*/		return 0x821A4F48;
		  /* 821A4F48h */ case   10:  		/* bc 4, CR6_EQ, 28 */
		/* 821A4F48h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821A4F64;  }
		/* 821A4F48h case   10:*/		return 0x821A4F4C;
		  /* 821A4F4Ch */ case   11:  		/* li R8, 1 */
		/* 821A4F4Ch case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821A4F4Ch case   11:*/		return 0x821A4F50;
		  /* 821A4F50h */ case   12:  		/* li R7, 0 */
		/* 821A4F50h case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A4F50h case   12:*/		return 0x821A4F54;
		  /* 821A4F54h */ case   13:  		/* li R6, 0 */
		/* 821A4F54h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A4F54h case   13:*/		return 0x821A4F58;
		  /* 821A4F58h */ case   14:  		/* mr R5, R23 */
		/* 821A4F58h case   14:*/		regs.R5 = regs.R23;
		/* 821A4F58h case   14:*/		return 0x821A4F5C;
		  /* 821A4F5Ch */ case   15:  		/* bl -764 */
		/* 821A4F5Ch case   15:*/		regs.LR = 0x821A4F60; return 0x821A4C60;
		/* 821A4F5Ch case   15:*/		return 0x821A4F60;
		  /* 821A4F60h */ case   16:  		/* b 1388 */
		/* 821A4F60h case   16:*/		return 0x821A54CC;
		/* 821A4F60h case   16:*/		return 0x821A4F64;
	}
	return 0x821A4F64;
} // Block from 821A4F20h-821A4F64h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A4F64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4F64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4F64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4F64);
		  /* 821A4F64h */ case    0:  		/* lwz R8, <#[R27 + 4]> */
		/* 821A4F64h case    0:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000004) );
		/* 821A4F64h case    0:*/		return 0x821A4F68;
		  /* 821A4F68h */ case    1:  		/* li R22, 1 */
		/* 821A4F68h case    1:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821A4F68h case    1:*/		return 0x821A4F6C;
		  /* 821A4F6Ch */ case    2:  		/* addi R25, R27, 4 */
		/* 821A4F6Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R27,0x4);
		/* 821A4F6Ch case    2:*/		return 0x821A4F70;
		  /* 821A4F70h */ case    3:  		/* mr R10, R22 */
		/* 821A4F70h case    3:*/		regs.R10 = regs.R22;
		/* 821A4F70h case    3:*/		return 0x821A4F74;
		  /* 821A4F74h */ case    4:  		/* mr R11, R8 */
		/* 821A4F74h case    4:*/		regs.R11 = regs.R8;
		/* 821A4F74h case    4:*/		return 0x821A4F78;
		  /* 821A4F78h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821A4F78h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A4F78h case    5:*/		return 0x821A4F7C;
		  /* 821A4F7Ch */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 821A4F7Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821A4FAC;  }
		/* 821A4F7Ch case    6:*/		return 0x821A4F80;
		  /* 821A4F80h */ case    7:  		/* lwz R9, <#[R11 + 16]> */
		/* 821A4F80h case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000010) );
		/* 821A4F80h case    7:*/		return 0x821A4F84;
		  /* 821A4F84h */ case    8:  		/* cmplwi CR6, R9, 0 */
		/* 821A4F84h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821A4F84h case    8:*/		return 0x821A4F88;
		  /* 821A4F88h */ case    9:  		/* bc 12, CR6_EQ, 24 */
		/* 821A4F88h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A4FA0;  }
		/* 821A4F88h case    9:*/		return 0x821A4F8C;
		  /* 821A4F8Ch */ case   10:  		/* lwz R9, <#[R11]> */
		/* 821A4F8Ch case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4F8Ch case   10:*/		return 0x821A4F90;
		  /* 821A4F90h */ case   11:  		/* rlwinm. R9, R9, 7, 29, 31 */
		/* 821A4F90h case   11:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R9,regs.R9);
		/* 821A4F90h case   11:*/		return 0x821A4F94;
		  /* 821A4F94h */ case   12:  		/* bc 12, CR0_EQ, 12 */
		/* 821A4F94h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A4FA0;  }
		/* 821A4F94h case   12:*/		return 0x821A4F98;
		  /* 821A4F98h */ case   13:  		/* addic. R9, R9, -1 */
		/* 821A4F98h case   13:*/		cpu::op::addic<1>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821A4F98h case   13:*/		return 0x821A4F9C;
		  /* 821A4F9Ch */ case   14:  		/* bc 4, CR0_EQ, 12 */
		/* 821A4F9Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x821A4FA8;  }
		/* 821A4F9Ch case   14:*/		return 0x821A4FA0;
	}
	return 0x821A4FA0;
} // Block from 821A4F64h-821A4FA0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A4FA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4FA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4FA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4FA0);
		  /* 821A4FA0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A4FA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4FA0h case    0:*/		return 0x821A4FA4;
		  /* 821A4FA4h */ case    1:  		/* b -44 */
		/* 821A4FA4h case    1:*/		return 0x821A4F78;
		/* 821A4FA4h case    1:*/		return 0x821A4FA8;
	}
	return 0x821A4FA8;
} // Block from 821A4FA0h-821A4FA8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A4FA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4FA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4FA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4FA8);
		  /* 821A4FA8h */ case    0:  		/* li R10, 0 */
		/* 821A4FA8h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A4FA8h case    0:*/		return 0x821A4FAC;
	}
	return 0x821A4FAC;
} // Block from 821A4FA8h-821A4FACh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A4FACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4FAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4FAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4FAC);
		  /* 821A4FACh */ case    0:  		/* rlwinm. R11, R10, 0, 24, 31 */
		/* 821A4FACh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R10);
		/* 821A4FACh case    0:*/		return 0x821A4FB0;
		  /* 821A4FB0h */ case    1:  		/* li R28, 0 */
		/* 821A4FB0h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A4FB0h case    1:*/		return 0x821A4FB4;
		  /* 821A4FB4h */ case    2:  		/* li R24, 0 */
		/* 821A4FB4h case    2:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821A4FB4h case    2:*/		return 0x821A4FB8;
		  /* 821A4FB8h */ case    3:  		/* bc 4, CR0_EQ, 536 */
		/* 821A4FB8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A51D0;  }
		/* 821A4FB8h case    3:*/		return 0x821A4FBC;
		  /* 821A4FBCh */ case    4:  		/* mr R11, R8 */
		/* 821A4FBCh case    4:*/		regs.R11 = regs.R8;
		/* 821A4FBCh case    4:*/		return 0x821A4FC0;
		  /* 821A4FC0h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821A4FC0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A4FC0h case    5:*/		return 0x821A4FC4;
		  /* 821A4FC4h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821A4FC4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A5000;  }
		/* 821A4FC4h case    6:*/		return 0x821A4FC8;
		  /* 821A4FC8h */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A4FC8h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A4FC8h case    7:*/		return 0x821A4FCC;
		  /* 821A4FCCh */ case    8:  		/* cmplwi CR6, R10, 0 */
		/* 821A4FCCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A4FCCh case    8:*/		return 0x821A4FD0;
		  /* 821A4FD0h */ case    9:  		/* bc 12, CR6_EQ, 32 */
		/* 821A4FD0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A4FF0;  }
		/* 821A4FD0h case    9:*/		return 0x821A4FD4;
		  /* 821A4FD4h */ case   10:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A4FD4h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A4FD4h case   10:*/		return 0x821A4FD8;
		  /* 821A4FD8h */ case   11:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A4FD8h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A4FD8h case   11:*/		return 0x821A4FDC;
		  /* 821A4FDCh */ case   12:  		/* cmplwi CR6, R9, 14080 */
		/* 821A4FDCh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A4FDCh case   12:*/		return 0x821A4FE0;
		  /* 821A4FE0h */ case   13:  		/* bc 4, CR6_EQ, 16 */
		/* 821A4FE0h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821A4FF0;  }
		/* 821A4FE0h case   13:*/		return 0x821A4FE4;
		  /* 821A4FE4h */ case   14:  		/* lwz R9, <#[R11]> */
		/* 821A4FE4h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A4FE4h case   14:*/		return 0x821A4FE8;
		  /* 821A4FE8h */ case   15:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A4FE8h case   15:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A4FE8h case   15:*/		return 0x821A4FEC;
		  /* 821A4FECh */ case   16:  		/* bc 4, CR0_EQ, 12 */
		/* 821A4FECh case   16:*/		if ( !regs.CR[0].eq ) { return 0x821A4FF8;  }
		/* 821A4FECh case   16:*/		return 0x821A4FF0;
	}
	return 0x821A4FF0;
} // Block from 821A4FACh-821A4FF0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A4FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4FF0);
		  /* 821A4FF0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A4FF0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A4FF0h case    0:*/		return 0x821A4FF4;
		  /* 821A4FF4h */ case    1:  		/* b -52 */
		/* 821A4FF4h case    1:*/		return 0x821A4FC0;
		/* 821A4FF4h case    1:*/		return 0x821A4FF8;
	}
	return 0x821A4FF8;
} // Block from 821A4FF0h-821A4FF8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A4FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A4FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A4FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A4FF8);
		  /* 821A4FF8h */ case    0:  		/* mr R28, R10 */
		/* 821A4FF8h case    0:*/		regs.R28 = regs.R10;
		/* 821A4FF8h case    0:*/		return 0x821A4FFC;
		  /* 821A4FFCh */ case    1:  		/* b 8 */
		/* 821A4FFCh case    1:*/		return 0x821A5004;
		/* 821A4FFCh case    1:*/		return 0x821A5000;
	}
	return 0x821A5000;
} // Block from 821A4FF8h-821A5000h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A5000h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5000( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5000) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5000);
		  /* 821A5000h */ case    0:  		/* li R28, 0 */
		/* 821A5000h case    0:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A5000h case    0:*/		return 0x821A5004;
	}
	return 0x821A5004;
} // Block from 821A5000h-821A5004h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5004);
		  /* 821A5004h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821A5004h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A5004h case    0:*/		return 0x821A5008;
		  /* 821A5008h */ case    1:  		/* bc 4, CR6_EQ, 288 */
		/* 821A5008h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A5128;  }
		/* 821A5008h case    1:*/		return 0x821A500C;
		  /* 821A500Ch */ case    2:  		/* li R5, 0 */
		/* 821A500Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A500Ch case    2:*/		return 0x821A5010;
		  /* 821A5010h */ case    3:  		/* lwz R4, <#[R27 + 28]> */
		/* 821A5010h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A5010h case    3:*/		return 0x821A5014;
		  /* 821A5014h */ case    4:  		/* mr R3, R26 */
		/* 821A5014h case    4:*/		regs.R3 = regs.R26;
		/* 821A5014h case    4:*/		return 0x821A5018;
		  /* 821A5018h */ case    5:  		/* bl 522984 */
		/* 821A5018h case    5:*/		regs.LR = 0x821A501C; return 0x82224B00;
		/* 821A5018h case    5:*/		return 0x821A501C;
		  /* 821A501Ch */ case    6:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821A501Ch case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821A501Ch case    6:*/		return 0x821A5020;
		  /* 821A5020h */ case    7:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A5020h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A5020h case    7:*/		return 0x821A5024;
		  /* 821A5024h */ case    8:  		/* addi R11, R11, 36 */
		/* 821A5024h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A5024h case    8:*/		return 0x821A5028;
		  /* 821A5028h */ case    9:  		/* addi R10, R10, 36 */
		/* 821A5028h case    9:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A5028h case    9:*/		return 0x821A502C;
		  /* 821A502Ch */ case   10:  		/* addi R9, R11, 4 */
		/* 821A502Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821A502Ch case   10:*/		return 0x821A5030;
		  /* 821A5030h */ case   11:  		/* addi R8, R10, 4 */
		/* 821A5030h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821A5030h case   11:*/		return 0x821A5034;
		  /* 821A5034h */ case   12:  		/* addi R6, R10, -36 */
		/* 821A5034h case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A5034h case   12:*/		return 0x821A5038;
		  /* 821A5038h */ case   13:  		/* lwz R7, <#[R11 + 4]> */
		/* 821A5038h case   13:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821A5038h case   13:*/		return 0x821A503C;
		  /* 821A503Ch */ case   14:  		/* mr R31, R3 */
		/* 821A503Ch case   14:*/		regs.R31 = regs.R3;
		/* 821A503Ch case   14:*/		return 0x821A5040;
		  /* 821A5040h */ case   15:  		/* mr R28, R3 */
		/* 821A5040h case   15:*/		regs.R28 = regs.R3;
		/* 821A5040h case   15:*/		return 0x821A5044;
		  /* 821A5044h */ case   16:  		/* addi R29, R3, 40 */
		/* 821A5044h case   16:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R3,0x28);
		/* 821A5044h case   16:*/		return 0x821A5048;
		  /* 821A5048h */ case   17:  		/* stw R7, <#[R10 + 4]> */
		/* 821A5048h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821A5048h case   17:*/		return 0x821A504C;
		  /* 821A504Ch */ case   18:  		/* lwz R7, <#[R11 + 4]> */
		/* 821A504Ch case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821A504Ch case   18:*/		return 0x821A5050;
		  /* 821A5050h */ case   19:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A5050h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A5050h case   19:*/		return 0x821A5054;
		  /* 821A5054h */ case   20:  		/* stw R8, <#[R7 + 36]> */
		/* 821A5054h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000024) );
		/* 821A5054h case   20:*/		return 0x821A5058;
		  /* 821A5058h */ case   21:  		/* stw R9, <#[R10]> */
		/* 821A5058h case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A5058h case   21:*/		return 0x821A505C;
		  /* 821A505Ch */ case   22:  		/* stw R6, <#[R11 + 4]> */
		/* 821A505Ch case   22:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821A505Ch case   22:*/		return 0x821A5060;
		  /* 821A5060h */ case   23:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A5060h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A5060h case   23:*/		return 0x821A5064;
		  /* 821A5064h */ case   24:  		/* rlwinm R30, R11, 31, 28, 31 */
		/* 821A5064h case   24:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R30,regs.R11);
		/* 821A5064h case   24:*/		return 0x821A5068;
		  /* 821A5068h */ case   25:  		/* cmplwi CR6, R30, 0 */
		/* 821A5068h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A5068h case   25:*/		return 0x821A506C;
		  /* 821A506Ch */ case   26:  		/* bc 12, CR6_EQ, 64 */
		/* 821A506Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x821A50AC;  }
		/* 821A506Ch case   26:*/		return 0x821A5070;
		  /* 821A5070h */ case   27:  		/* addi R11, R30, -1 */
		/* 821A5070h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 821A5070h case   27:*/		return 0x821A5074;
		  /* 821A5074h */ case   28:  		/* mr R4, R27 */
		/* 821A5074h case   28:*/		regs.R4 = regs.R27;
		/* 821A5074h case   28:*/		return 0x821A5078;
		  /* 821A5078h */ case   29:  		/* andc R11, R30, R11 */
		/* 821A5078h case   29:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 821A5078h case   29:*/		return 0x821A507C;
		  /* 821A507Ch */ case   30:  		/* mr R3, R26 */
		/* 821A507Ch case   30:*/		regs.R3 = regs.R26;
		/* 821A507Ch case   30:*/		return 0x821A5080;
		  /* 821A5080h */ case   31:  		/* cntlzw R11, R11 */
		/* 821A5080h case   31:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A5080h case   31:*/		return 0x821A5084;
		  /* 821A5084h */ case   32:  		/* subfic R5, R11, 31 */
		/* 821A5084h case   32:*/		cpu::op::subfic<0>(regs,&regs.R5,regs.R11,0x1F);
		/* 821A5084h case   32:*/		return 0x821A5088;
		  /* 821A5088h */ case   33:  		/* bl -184184 */
		/* 821A5088h case   33:*/		regs.LR = 0x821A508C; return 0x82178110;
		/* 821A5088h case   33:*/		return 0x821A508C;
		  /* 821A508Ch */ case   34:  		/* mr R4, R3 */
		/* 821A508Ch case   34:*/		regs.R4 = regs.R3;
		/* 821A508Ch case   34:*/		return 0x821A5090;
		  /* 821A5090h */ case   35:  		/* mr R3, R31 */
		/* 821A5090h case   35:*/		regs.R3 = regs.R31;
		/* 821A5090h case   35:*/		return 0x821A5094;
		  /* 821A5094h */ case   36:  		/* bl -184012 */
		/* 821A5094h case   36:*/		regs.LR = 0x821A5098; return 0x821781C8;
		/* 821A5094h case   36:*/		return 0x821A5098;
	}
	return 0x821A5098;
} // Block from 821A5004h-821A5098h (37 instructions)

//////////////////////////////////////////////////////
// Block at 821A5098h
// Function '?WorthReplacingInstruction@Compiler@D3DXShader@@AAA_NPAVInstruction@2@0II@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5098( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5098) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5098);
		  /* 821A5098h */ case    0:  		/* addi R11, R30, -1 */
		/* 821A5098h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 821A5098h case    0:*/		return 0x821A509C;
		  /* 821A509Ch */ case    1:  		/* stwu R3, <#[R29 + 4]> */
		/* 821A509Ch case    1:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A509Ch case    1:*/		return 0x821A50A0;
		  /* 821A50A0h */ case    2:  		/* andc R11, R30, R11 */
		/* 821A50A0h case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 821A50A0h case    2:*/		return 0x821A50A4;
		  /* 821A50A4h */ case    3:  		/* subf R30, R11, R30 */
		/* 821A50A4h case    3:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 821A50A4h case    3:*/		return 0x821A50A8;
		  /* 821A50A8h */ case    4:  		/* b -64 */
		/* 821A50A8h case    4:*/		return 0x821A5068;
		/* 821A50A8h case    4:*/		return 0x821A50AC;
	}
	return 0x821A50AC;
} // Block from 821A5098h-821A50ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A50ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A50AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A50AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A50AC);
		  /* 821A50ACh */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A50ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A50ACh case    0:*/		return 0x821A50B0;
		  /* 821A50B0h */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A50B0h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A50B0h case    1:*/		return 0x821A50B4;
		  /* 821A50B4h */ case    2:  		/* bc 12, CR0_EQ, 116 */
		/* 821A50B4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A5128;  }
		/* 821A50B4h case    2:*/		return 0x821A50B8;
		  /* 821A50B8h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A50B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A50B8h case    3:*/		return 0x821A50BC;
		  /* 821A50BCh */ case    4:  		/* mr R3, R27 */
		/* 821A50BCh case    4:*/		regs.R3 = regs.R27;
		/* 821A50BCh case    4:*/		return 0x821A50C0;
		  /* 821A50C0h */ case    5:  		/* oris R11, R11, 128 */
		/* 821A50C0h case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A50C0h case    5:*/		return 0x821A50C4;
		  /* 821A50C4h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821A50C4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A50C4h case    6:*/		return 0x821A50C8;
		  /* 821A50C8h */ case    7:  		/* bl -137184 */
		/* 821A50C8h case    7:*/		regs.LR = 0x821A50CC; return 0x821838E8;
		/* 821A50C8h case    7:*/		return 0x821A50CC;
		  /* 821A50CCh */ case    8:  		/* sth R3, <#[R31 + 18]> */
		/* 821A50CCh case    8:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 821A50CCh case    8:*/		return 0x821A50D0;
		  /* 821A50D0h */ case    9:  		/* lwz R3, <#[R26 + 660]> */
		/* 821A50D0h case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000294) );
		/* 821A50D0h case    9:*/		return 0x821A50D4;
		  /* 821A50D4h */ case   10:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A50D4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A50D4h case   10:*/		return 0x821A50D8;
		  /* 821A50D8h */ case   11:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A50D8h case   11:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A50D8h case   11:*/		return 0x821A50DC;
		  /* 821A50DCh */ case   12:  		/* bc 4, CR0_EQ, 40 */
		/* 821A50DCh case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A5104;  }
		/* 821A50DCh case   12:*/		return 0x821A50E0;
		  /* 821A50E0h */ case   13:  		/* lwz R11, <#[R3]> */
		/* 821A50E0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A50E0h case   13:*/		return 0x821A50E4;
		  /* 821A50E4h */ case   14:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A50E4h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A50E4h case   14:*/		return 0x821A50E8;
		  /* 821A50E8h */ case   15:  		/* addic. R11, R11, -4 */
		/* 821A50E8h case   15:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A50E8h case   15:*/		return 0x821A50EC;
		  /* 821A50ECh */ case   16:  		/* bc 12, CR0_EQ, 24 */
		/* 821A50ECh case   16:*/		if ( regs.CR[0].eq ) { return 0x821A5104;  }
		/* 821A50ECh case   16:*/		return 0x821A50F0;
		  /* 821A50F0h */ case   17:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A50F0h case   17:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A50F0h case   17:*/		return 0x821A50F4;
		  /* 821A50F4h */ case   18:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A50F4h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A50F4h case   18:*/		return 0x821A50F8;
		  /* 821A50F8h */ case   19:  		/* addi R10, R10, 1 */
		/* 821A50F8h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A50F8h case   19:*/		return 0x821A50FC;
		  /* 821A50FCh */ case   20:  		/* cmplw CR6, R10, R9 */
		/* 821A50FCh case   20:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A50FCh case   20:*/		return 0x821A5100;
		  /* 821A5100h */ case   21:  		/* bc 4, CR6_GT, 16 */
		/* 821A5100h case   21:*/		if ( !regs.CR[6].gt ) { return 0x821A5110;  }
		/* 821A5100h case   21:*/		return 0x821A5104;
	}
	return 0x821A5104;
} // Block from 821A50ACh-821A5104h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821A5104h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5104( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5104) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5104);
		  /* 821A5104h */ case    0:  		/* li R4, 1 */
		/* 821A5104h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A5104h case    0:*/		return 0x821A5108;
		  /* 821A5108h */ case    1:  		/* bl -98368 */
		/* 821A5108h case    1:*/		regs.LR = 0x821A510C; return 0x8218D0C8;
		/* 821A5108h case    1:*/		return 0x821A510C;
		  /* 821A510Ch */ case    2:  		/* mr R11, R3 */
		/* 821A510Ch case    2:*/		regs.R11 = regs.R3;
		/* 821A510Ch case    2:*/		return 0x821A5110;
	}
	return 0x821A5110;
} // Block from 821A5104h-821A5110h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5110h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5110( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5110) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5110);
		  /* 821A5110h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A5110h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5110h case    0:*/		return 0x821A5114;
		  /* 821A5114h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A5114h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A5114h case    1:*/		return 0x821A5118;
		  /* 821A5118h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A5118h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A5118h case    2:*/		return 0x821A511C;
		  /* 821A511Ch */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A511Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A511Ch case    3:*/		return 0x821A5120;
		  /* 821A5120h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A5120h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5120h case    4:*/		return 0x821A5124;
		  /* 821A5124h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A5124h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A5124h case    5:*/		return 0x821A5128;
	}
	return 0x821A5128;
} // Block from 821A5110h-821A5128h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A5128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5128);
		  /* 821A5128h */ case    0:  		/* lwz R10, <#[R28 + 8]> */
		/* 821A5128h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821A5128h case    0:*/		return 0x821A512C;
		  /* 821A512Ch */ case    1:  		/* li R11, 0 */
		/* 821A512Ch case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A512Ch case    1:*/		return 0x821A5130;
		  /* 821A5130h */ case    2:  		/* addi R9, R28, 44 */
		/* 821A5130h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R28,0x2C);
		/* 821A5130h case    2:*/		return 0x821A5134;
		  /* 821A5134h */ case    3:  		/* rlwinm R8, R10, 13, 29, 31 */
		/* 821A5134h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R8,regs.R10);
		/* 821A5134h case    3:*/		return 0x821A5138;
		  /* 821A5138h */ case    4:  		/* cmplw CR6, R11, R8 */
		/* 821A5138h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821A5138h case    4:*/		return 0x821A513C;
		  /* 821A513Ch */ case    5:  		/* bc 4, CR6_LT, 60 */
		/* 821A513Ch case    5:*/		if ( !regs.CR[6].lt ) { return 0x821A5178;  }
		/* 821A513Ch case    5:*/		return 0x821A5140;
	}
	return 0x821A5140;
} // Block from 821A5128h-821A5140h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A5140h
// Function '?WorthUsingDotProduct@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PAUAddChainInfo@2@1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5140);
		  /* 821A5140h */ case    0:  		/* lwz R10, <#[R9]> */
		/* 821A5140h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821A5140h case    0:*/		return 0x821A5144;
		  /* 821A5144h */ case    1:  		/* lwz R7, <#[R10 + 12]> */
		/* 821A5144h case    1:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 821A5144h case    1:*/		return 0x821A5148;
		  /* 821A5148h */ case    2:  		/* cmplw CR6, R7, R27 */
		/* 821A5148h case    2:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R27);
		/* 821A5148h case    2:*/		return 0x821A514C;
		  /* 821A514Ch */ case    3:  		/* bc 4, CR6_EQ, 32 */
		/* 821A514Ch case    3:*/		if ( !regs.CR[6].eq ) { return 0x821A516C;  }
		/* 821A514Ch case    3:*/		return 0x821A5150;
		  /* 821A5150h */ case    4:  		/* lwz R10, <#[R10]> */
		/* 821A5150h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000000) );
		/* 821A5150h case    4:*/		return 0x821A5154;
		  /* 821A5154h */ case    5:  		/* li R7, 3 */
		/* 821A5154h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821A5154h case    5:*/		return 0x821A5158;
		  /* 821A5158h */ case    6:  		/* rlwinm R10, R10, 28, 29, 30 */
		/* 821A5158h case    6:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R10,regs.R10);
		/* 821A5158h case    6:*/		return 0x821A515C;
		  /* 821A515Ch */ case    7:  		/* slw R7, R7, R10 */
		/* 821A515Ch case    7:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R10);
		/* 821A515Ch case    7:*/		return 0x821A5160;
		  /* 821A5160h */ case    8:  		/* andc R7, R24, R7 */
		/* 821A5160h case    8:*/		cpu::op::andc<0>(regs,&regs.R7,regs.R24,regs.R7);
		/* 821A5160h case    8:*/		return 0x821A5164;
		  /* 821A5164h */ case    9:  		/* slw R10, R11, R10 */
		/* 821A5164h case    9:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821A5164h case    9:*/		return 0x821A5168;
		  /* 821A5168h */ case   10:  		/* or R24, R7, R10 */
		/* 821A5168h case   10:*/		cpu::op::or<0>(regs,&regs.R24,regs.R7,regs.R10);
		/* 821A5168h case   10:*/		return 0x821A516C;
	}
	return 0x821A516C;
} // Block from 821A5140h-821A516Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A516Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A516C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A516C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A516C);
		  /* 821A516Ch */ case    0:  		/* addi R11, R11, 1 */
		/* 821A516Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A516Ch case    0:*/		return 0x821A5170;
		  /* 821A5170h */ case    1:  		/* addi R9, R9, 4 */
		/* 821A5170h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821A5170h case    1:*/		return 0x821A5174;
		  /* 821A5174h */ case    2:  		/* b -60 */
		/* 821A5174h case    2:*/		return 0x821A5138;
		/* 821A5174h case    2:*/		return 0x821A5178;
	}
	return 0x821A5178;
} // Block from 821A516Ch-821A5178h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5178);
		  /* 821A5178h */ case    0:  		/* rlwinm R11, R21, 1, 0, 30 */
		/* 821A5178h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R21);
		/* 821A5178h case    0:*/		return 0x821A517C;
		  /* 821A517Ch */ case    1:  		/* mr R3, R26 */
		/* 821A517Ch case    1:*/		regs.R3 = regs.R26;
		/* 821A517Ch case    1:*/		return 0x821A5180;
		  /* 821A5180h */ case    2:  		/* srw R11, R24, R11 */
		/* 821A5180h case    2:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 821A5180h case    2:*/		return 0x821A5184;
		  /* 821A5184h */ case    3:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821A5184h case    3:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821A5184h case    3:*/		return 0x821A5188;
		  /* 821A5188h */ case    4:  		/* addi R11, R11, 11 */
		/* 821A5188h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xB);
		/* 821A5188h case    4:*/		return 0x821A518C;
		  /* 821A518Ch */ case    5:  		/* rlwinm R31, R11, 2, 0, 29 */
		/* 821A518Ch case    5:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R31,regs.R11);
		/* 821A518Ch case    5:*/		return 0x821A5190;
		  /* 821A5190h */ case    6:  		/* lwzx R11, <#[R31 + R28]> */
		/* 821A5190h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + regs.R28 + 0x00000000) );
		/* 821A5190h case    6:*/		return 0x821A5194;
		  /* 821A5194h */ case    7:  		/* lwz R4, <#[R11 + 12]> */
		/* 821A5194h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A5194h case    7:*/		return 0x821A5198;
		  /* 821A5198h */ case    8:  		/* bl -18144 */
		/* 821A5198h case    8:*/		regs.LR = 0x821A519C; return 0x821A0AB8;
		/* 821A5198h case    8:*/		return 0x821A519C;
		  /* 821A519Ch */ case    9:  		/* li R5, 0 */
		/* 821A519Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A519Ch case    9:*/		return 0x821A51A0;
		  /* 821A51A0h */ case   10:  		/* mr R4, R23 */
		/* 821A51A0h case   10:*/		regs.R4 = regs.R23;
		/* 821A51A0h case   10:*/		return 0x821A51A4;
		  /* 821A51A4h */ case   11:  		/* mr R3, R26 */
		/* 821A51A4h case   11:*/		regs.R3 = regs.R26;
		/* 821A51A4h case   11:*/		return 0x821A51A8;
		  /* 821A51A8h */ case   12:  		/* bl -184472 */
		/* 821A51A8h case   12:*/		regs.LR = 0x821A51AC; return 0x82178110;
		/* 821A51A8h case   12:*/		return 0x821A51AC;
		  /* 821A51ACh */ case   13:  		/* mr R30, R3 */
		/* 821A51ACh case   13:*/		regs.R30 = regs.R3;
		/* 821A51ACh case   13:*/		return 0x821A51B0;
		  /* 821A51B0h */ case   14:  		/* mr R5, R26 */
		/* 821A51B0h case   14:*/		regs.R5 = regs.R26;
		/* 821A51B0h case   14:*/		return 0x821A51B4;
		  /* 821A51B4h */ case   15:  		/* lwzx R4, <#[R31 + R28]> */
		/* 821A51B4h case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + regs.R28 + 0x00000000) );
		/* 821A51B4h case   15:*/		return 0x821A51B8;
		  /* 821A51B8h */ case   16:  		/* mr R3, R28 */
		/* 821A51B8h case   16:*/		regs.R3 = regs.R28;
		/* 821A51B8h case   16:*/		return 0x821A51BC;
		  /* 821A51BCh */ case   17:  		/* bl -182444 */
		/* 821A51BCh case   17:*/		regs.LR = 0x821A51C0; return 0x82178910;
		/* 821A51BCh case   17:*/		return 0x821A51C0;
		  /* 821A51C0h */ case   18:  		/* mr R4, R30 */
		/* 821A51C0h case   18:*/		regs.R4 = regs.R30;
		/* 821A51C0h case   18:*/		return 0x821A51C4;
		  /* 821A51C4h */ case   19:  		/* mr R3, R28 */
		/* 821A51C4h case   19:*/		regs.R3 = regs.R28;
		/* 821A51C4h case   19:*/		return 0x821A51C8;
		  /* 821A51C8h */ case   20:  		/* bl -184320 */
		/* 821A51C8h case   20:*/		regs.LR = 0x821A51CC; return 0x821781C8;
		/* 821A51C8h case   20:*/		return 0x821A51CC;
		  /* 821A51CCh */ case   21:  		/* stwx R3, <#[R31 + R28]> */
		/* 821A51CCh case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + regs.R28 + 0x00000000) );
		/* 821A51CCh case   21:*/		return 0x821A51D0;
	}
	return 0x821A51D0;
} // Block from 821A5178h-821A51D0h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821A51D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A51D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A51D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A51D0);
		  /* 821A51D0h */ case    0:  		/* lwz R31, <#[R27]> */
		/* 821A51D0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 821A51D0h case    0:*/		return 0x821A51D4;
		  /* 821A51D4h */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821A51D4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A51D4h case    1:*/		return 0x821A51D8;
		  /* 821A51D8h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821A51D8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A520C;  }
		/* 821A51D8h case    2:*/		return 0x821A51DC;
		  /* 821A51DCh */ case    3:  		/* lwz R11, <#[R31]> */
		/* 821A51DCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A51DCh case    3:*/		return 0x821A51E0;
		  /* 821A51E0h */ case    4:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821A51E0h case    4:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821A51E0h case    4:*/		return 0x821A51E4;
		  /* 821A51E4h */ case    5:  		/* bc 4, CR0_EQ, 32 */
		/* 821A51E4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821A5204;  }
		/* 821A51E4h case    5:*/		return 0x821A51E8;
		  /* 821A51E8h */ case    6:  		/* rlwinm. R10, R11, 2, 31, 31 */
		/* 821A51E8h case    6:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R10,regs.R11);
		/* 821A51E8h case    6:*/		return 0x821A51EC;
		  /* 821A51ECh */ case    7:  		/* bc 12, CR0_EQ, 12 */
		/* 821A51ECh case    7:*/		if ( regs.CR[0].eq ) { return 0x821A51F8;  }
		/* 821A51ECh case    7:*/		return 0x821A51F0;
		  /* 821A51F0h */ case    8:  		/* rlwinm. R11, R11, 0, 7, 18 */
		/* 821A51F0h case    8:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R11,regs.R11);
		/* 821A51F0h case    8:*/		return 0x821A51F4;
		  /* 821A51F4h */ case    9:  		/* bc 12, CR0_EQ, 16 */
		/* 821A51F4h case    9:*/		if ( regs.CR[0].eq ) { return 0x821A5204;  }
		/* 821A51F4h case    9:*/		return 0x821A51F8;
	}
	return 0x821A51F8;
} // Block from 821A51D0h-821A51F8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A51F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A51F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A51F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A51F8);
		  /* 821A51F8h */ case    0:  		/* mr R4, R31 */
		/* 821A51F8h case    0:*/		regs.R4 = regs.R31;
		/* 821A51F8h case    0:*/		return 0x821A51FC;
		  /* 821A51FCh */ case    1:  		/* mr R3, R23 */
		/* 821A51FCh case    1:*/		regs.R3 = regs.R23;
		/* 821A51FCh case    1:*/		return 0x821A5200;
		  /* 821A5200h */ case    2:  		/* bl -184376 */
		/* 821A5200h case    2:*/		regs.LR = 0x821A5204; return 0x821781C8;
		/* 821A5200h case    2:*/		return 0x821A5204;
	}
	return 0x821A5204;
} // Block from 821A51F8h-821A5204h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5204h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5204( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5204) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5204);
		  /* 821A5204h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821A5204h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821A5204h case    0:*/		return 0x821A5208;
		  /* 821A5208h */ case    1:  		/* b -52 */
		/* 821A5208h case    1:*/		return 0x821A51D4;
		/* 821A5208h case    1:*/		return 0x821A520C;
	}
	return 0x821A520C;
} // Block from 821A5204h-821A520Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A520Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A520C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A520C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A520C);
		  /* 821A520Ch */ case    0:  		/* mr R29, R25 */
		/* 821A520Ch case    0:*/		regs.R29 = regs.R25;
		/* 821A520Ch case    0:*/		return 0x821A5210;
		  /* 821A5210h */ case    1:  		/* lwz R31, <#[R29]> */
		/* 821A5210h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821A5210h case    1:*/		return 0x821A5214;
		  /* 821A5214h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821A5214h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A5214h case    2:*/		return 0x821A5218;
		  /* 821A5218h */ case    3:  		/* bc 12, CR6_EQ, 408 */
		/* 821A5218h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A53B0;  }
		/* 821A5218h case    3:*/		return 0x821A521C;
		  /* 821A521Ch */ case    4:  		/* lwz R30, <#[R31 + 16]> */
		/* 821A521Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 821A521Ch case    4:*/		return 0x821A5220;
		  /* 821A5220h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821A5220h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A5220h case    5:*/		return 0x821A5224;
		  /* 821A5224h */ case    6:  		/* bc 12, CR6_EQ, 376 */
		/* 821A5224h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A539C;  }
		/* 821A5224h case    6:*/		return 0x821A5228;
		  /* 821A5228h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821A5228h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5228h case    7:*/		return 0x821A522C;
		  /* 821A522Ch */ case    8:  		/* rlwinm. R6, R11, 7, 29, 31 */
		/* 821A522Ch case    8:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R6,regs.R11);
		/* 821A522Ch case    8:*/		return 0x821A5230;
		  /* 821A5230h */ case    9:  		/* bc 12, CR0_EQ, 364 */
		/* 821A5230h case    9:*/		if ( regs.CR[0].eq ) { return 0x821A539C;  }
		/* 821A5230h case    9:*/		return 0x821A5234;
		  /* 821A5234h */ case   10:  		/* cmplw CR6, R30, R28 */
		/* 821A5234h case   10:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R28);
		/* 821A5234h case   10:*/		return 0x821A5238;
		  /* 821A5238h */ case   11:  		/* bc 12, CR6_EQ, 356 */
		/* 821A5238h case   11:*/		if ( regs.CR[6].eq ) { return 0x821A539C;  }
		/* 821A5238h case   11:*/		return 0x821A523C;
		  /* 821A523Ch */ case   12:  		/* li R9, 0 */
		/* 821A523Ch case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A523Ch case   12:*/		return 0x821A5240;
		  /* 821A5240h */ case   13:  		/* li R10, 0 */
		/* 821A5240h case   13:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A5240h case   13:*/		return 0x821A5244;
		  /* 821A5244h */ case   14:  		/* cmplwi CR6, R6, 0 */
		/* 821A5244h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821A5244h case   14:*/		return 0x821A5248;
	}
	return 0x821A5248;
} // Block from 821A520Ch-821A5248h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A5248h
// Function '?ReplaceInstruction@Compiler@D3DXShader@@AAAXPAVInstruction@2@0IPAV?$Stack@PAVInstruction@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5248);
		  /* 821A5248h */ case    0:  		/* bc 12, CR6_EQ, 52 */
		/* 821A5248h case    0:*/		if ( regs.CR[6].eq ) { return 0x821A527C;  }
		/* 821A5248h case    0:*/		return 0x821A524C;
		  /* 821A524Ch */ case    1:  		/* rlwinm R7, R11, 0, 0, 31 */
		/* 821A524Ch case    1:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R7,regs.R11);
		/* 821A524Ch case    1:*/		return 0x821A5250;
		  /* 821A5250h */ case    2:  		/* rlwinm R8, R11, 27, 24, 31 */
		/* 821A5250h case    2:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R8,regs.R11);
		/* 821A5250h case    2:*/		return 0x821A5254;
		  /* 821A5254h */ case    3:  		/* li R11, 0 */
		/* 821A5254h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A5254h case    3:*/		return 0x821A5258;
		  /* 821A5258h */ case    4:  		/* rlwinm R7, R7, 7, 29, 31 */
		/* 821A5258h case    4:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R7,regs.R7);
		/* 821A5258h case    4:*/		return 0x821A525C;
		  /* 821A525Ch */ case    5:  		/* srw R5, R8, R11 */
		/* 821A525Ch case    5:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R8,regs.R11);
		/* 821A525Ch case    5:*/		return 0x821A5260;
		  /* 821A5260h */ case    6:  		/* rlwinm R5, R5, 0, 30, 31 */
		/* 821A5260h case    6:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R5);
		/* 821A5260h case    6:*/		return 0x821A5264;
		  /* 821A5264h */ case    7:  		/* addi R10, R10, 1 */
		/* 821A5264h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A5264h case    7:*/		return 0x821A5268;
		  /* 821A5268h */ case    8:  		/* slw R5, R22, R5 */
		/* 821A5268h case    8:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R22,regs.R5);
		/* 821A5268h case    8:*/		return 0x821A526C;
		  /* 821A526Ch */ case    9:  		/* or R9, R5, R9 */
		/* 821A526Ch case    9:*/		cpu::op::or<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 821A526Ch case    9:*/		return 0x821A5270;
		  /* 821A5270h */ case   10:  		/* addi R11, R11, 2 */
		/* 821A5270h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A5270h case   10:*/		return 0x821A5274;
		  /* 821A5274h */ case   11:  		/* cmplw CR6, R10, R7 */
		/* 821A5274h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R7);
		/* 821A5274h case   11:*/		return 0x821A5278;
		  /* 821A5278h */ case   12:  		/* bc 12, CR6_LT, -28 */
		/* 821A5278h case   12:*/		if ( regs.CR[6].lt ) { return 0x821A525C;  }
		/* 821A5278h case   12:*/		return 0x821A527C;
	}
	return 0x821A527C;
} // Block from 821A5248h-821A527Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A527Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A527C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A527C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A527C);
		  /* 821A527Ch */ case    0:  		/* slw R11, R22, R21 */
		/* 821A527Ch case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R22,regs.R21);
		/* 821A527Ch case    0:*/		return 0x821A5280;
		  /* 821A5280h */ case    1:  		/* and. R11, R11, R9 */
		/* 821A5280h case    1:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A5280h case    1:*/		return 0x821A5284;
		  /* 821A5284h */ case    2:  		/* bc 12, CR0_EQ, 280 */
		/* 821A5284h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A539C;  }
		/* 821A5284h case    2:*/		return 0x821A5288;
		  /* 821A5288h */ case    3:  		/* addic. R11, R6, -1 */
		/* 821A5288h case    3:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R6,0xFFFFFFFF);
		/* 821A5288h case    3:*/		return 0x821A528C;
		  /* 821A528Ch */ case    4:  		/* bc 4, CR0_EQ, 76 */
		/* 821A528Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A52D8;  }
		/* 821A528Ch case    4:*/		return 0x821A5290;
		  /* 821A5290h */ case    5:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A5290h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A5290h case    5:*/		return 0x821A5294;
		  /* 821A5294h */ case    6:  		/* addi R11, R11, 4 */
		/* 821A5294h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A5294h case    6:*/		return 0x821A5298;
		  /* 821A5298h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821A5298h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A5298h case    7:*/		return 0x821A529C;
		  /* 821A529Ch */ case    8:  		/* b 12 */
		/* 821A529Ch case    8:*/		return 0x821A52A8;
		/* 821A529Ch case    8:*/		return 0x821A52A0;
		  /* 821A52A0h */ case    9:  		/* addi R11, R10, 8 */
		/* 821A52A0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A52A0h case    9:*/		return 0x821A52A4;
		  /* 821A52A4h */ case   10:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A52A4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A52A4h case   10:*/		return 0x821A52A8;
	}
	return 0x821A52A8;
} // Block from 821A527Ch-821A52A8h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A52A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A52A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A52A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A52A8);
		  /* 821A52A8h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A52A8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A52A8h case    0:*/		return 0x821A52AC;
		  /* 821A52ACh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A52ACh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A52A0;  }
		/* 821A52ACh case    1:*/		return 0x821A52B0;
		  /* 821A52B0h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A52B0h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A52B0h case    2:*/		return 0x821A52B4;
		  /* 821A52B4h */ case    3:  		/* li R9, 57 */
		/* 821A52B4h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x39);
		/* 821A52B4h case    3:*/		return 0x821A52B8;
		  /* 821A52B8h */ case    4:  		/* stw R10, <#[R11]> */
		/* 821A52B8h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A52B8h case    4:*/		return 0x821A52BC;
		  /* 821A52BCh */ case    5:  		/* lwz R11, <#[R23 + 4]> */
		/* 821A52BCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821A52BCh case    5:*/		return 0x821A52C0;
		  /* 821A52C0h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821A52C0h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A52C0h case    6:*/		return 0x821A52C4;
		  /* 821A52C4h */ case    7:  		/* stw R31, <#[R23 + 4]> */
		/* 821A52C4h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R23 + 0x00000004) );
		/* 821A52C4h case    7:*/		return 0x821A52C8;
		  /* 821A52C8h */ case    8:  		/* stw R23, <#[R31 + 12]> */
		/* 821A52C8h case    8:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A52C8h case    8:*/		return 0x821A52CC;
		  /* 821A52CCh */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821A52CCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A52CCh case    9:*/		return 0x821A52D0;
		  /* 821A52D0h */ case   10:  		/* rlwimi R11, R9, 7, 19, 26 */
		/* 821A52D0h case   10:*/		cpu::op::rlwimi<0,7,19,26>(regs,&regs.R11,regs.R9);
		/* 821A52D0h case   10:*/		return 0x821A52D4;
		  /* 821A52D4h */ case   11:  		/* b 184 */
		/* 821A52D4h case   11:*/		return 0x821A538C;
		/* 821A52D4h case   11:*/		return 0x821A52D8;
	}
	return 0x821A52D8;
} // Block from 821A52A8h-821A52D8h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A52D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A52D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A52D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A52D8);
		  /* 821A52D8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821A52D8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A52D8h case    0:*/		return 0x821A52DC;
		  /* 821A52DCh */ case    1:  		/* bc 12, CR6_EQ, 44 */
		/* 821A52DCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821A5308;  }
		/* 821A52DCh case    1:*/		return 0x821A52E0;
		  /* 821A52E0h */ case    2:  		/* mr R4, R30 */
		/* 821A52E0h case    2:*/		regs.R4 = regs.R30;
		/* 821A52E0h case    2:*/		return 0x821A52E4;
		  /* 821A52E4h */ case    3:  		/* mr R3, R28 */
		/* 821A52E4h case    3:*/		regs.R3 = regs.R28;
		/* 821A52E4h case    3:*/		return 0x821A52E8;
		  /* 821A52E8h */ case    4:  		/* bl 527832 */
		/* 821A52E8h case    4:*/		regs.LR = 0x821A52EC; return 0x822260C0;
		/* 821A52E8h case    4:*/		return 0x821A52EC;
		  /* 821A52ECh */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A52ECh case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A52ECh case    5:*/		return 0x821A52F0;
		  /* 821A52F0h */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821A52F0h case    6:*/		if ( regs.CR[0].eq ) { return 0x821A5308;  }
		/* 821A52F0h case    6:*/		return 0x821A52F4;
		  /* 821A52F4h */ case    7:  		/* li R6, 0 */
		/* 821A52F4h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A52F4h case    7:*/		return 0x821A52F8;
		  /* 821A52F8h */ case    8:  		/* mr R5, R30 */
		/* 821A52F8h case    8:*/		regs.R5 = regs.R30;
		/* 821A52F8h case    8:*/		return 0x821A52FC;
		  /* 821A52FCh */ case    9:  		/* mr R4, R28 */
		/* 821A52FCh case    9:*/		regs.R4 = regs.R28;
		/* 821A52FCh case    9:*/		return 0x821A5300;
		  /* 821A5300h */ case   10:  		/* mr R3, R26 */
		/* 821A5300h case   10:*/		regs.R3 = regs.R26;
		/* 821A5300h case   10:*/		return 0x821A5304;
		  /* 821A5304h */ case   11:  		/* bl 559420 */
		/* 821A5304h case   11:*/		regs.LR = 0x821A5308; return 0x8222DC40;
		/* 821A5304h case   11:*/		return 0x821A5308;
	}
	return 0x821A5308;
} // Block from 821A52D8h-821A5308h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A5308h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5308( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5308) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5308);
		  /* 821A5308h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A5308h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A5308h case    0:*/		return 0x821A530C;
		  /* 821A530Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 821A530Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A530Ch case    1:*/		return 0x821A5310;
		  /* 821A5310h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A5310h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A5310h case    2:*/		return 0x821A5314;
		  /* 821A5314h */ case    3:  		/* b 12 */
		/* 821A5314h case    3:*/		return 0x821A5320;
		/* 821A5314h case    3:*/		return 0x821A5318;
		  /* 821A5318h */ case    4:  		/* addi R11, R10, 8 */
		/* 821A5318h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A5318h case    4:*/		return 0x821A531C;
		  /* 821A531Ch */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A531Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A531Ch case    5:*/		return 0x821A5320;
	}
	return 0x821A5320;
} // Block from 821A5308h-821A5320h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A5320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5320);
		  /* 821A5320h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A5320h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A5320h case    0:*/		return 0x821A5324;
		  /* 821A5324h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A5324h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A5318;  }
		/* 821A5324h case    1:*/		return 0x821A5328;
		  /* 821A5328h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A5328h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A5328h case    2:*/		return 0x821A532C;
		  /* 821A532Ch */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A532Ch case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A532Ch case    3:*/		return 0x821A5330;
		  /* 821A5330h */ case    4:  		/* lwz R11, <#[R28 + 4]> */
		/* 821A5330h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821A5330h case    4:*/		return 0x821A5334;
		  /* 821A5334h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821A5334h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A5334h case    5:*/		return 0x821A5338;
		  /* 821A5338h */ case    6:  		/* stw R31, <#[R28 + 4]> */
		/* 821A5338h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R28 + 0x00000004) );
		/* 821A5338h case    6:*/		return 0x821A533C;
		  /* 821A533Ch */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821A533Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A533Ch case    7:*/		return 0x821A5340;
		  /* 821A5340h */ case    8:  		/* lwz R10, <#[R31]> */
		/* 821A5340h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5340h case    8:*/		return 0x821A5344;
		  /* 821A5344h */ case    9:  		/* rlwinm R10, R10, 27, 24, 31 */
		/* 821A5344h case    9:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R10);
		/* 821A5344h case    9:*/		return 0x821A5348;
		  /* 821A5348h */ case   10:  		/* rlwinm R9, R10, 27, 29, 30 */
		/* 821A5348h case   10:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R9,regs.R10);
		/* 821A5348h case   10:*/		return 0x821A534C;
		  /* 821A534Ch */ case   11:  		/* stw R28, <#[R31 + 12]> */
		/* 821A534Ch case   11:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A534Ch case   11:*/		return 0x821A5350;
		  /* 821A5350h */ case   12:  		/* rlwinm R8, R10, 29, 29, 30 */
		/* 821A5350h case   12:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R8,regs.R10);
		/* 821A5350h case   12:*/		return 0x821A5354;
		  /* 821A5354h */ case   13:  		/* srw R9, R24, R9 */
		/* 821A5354h case   13:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R24,regs.R9);
		/* 821A5354h case   13:*/		return 0x821A5358;
		  /* 821A5358h */ case   14:  		/* srw R8, R24, R8 */
		/* 821A5358h case   14:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R24,regs.R8);
		/* 821A5358h case   14:*/		return 0x821A535C;
		  /* 821A535Ch */ case   15:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821A535Ch case   15:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821A535Ch case   15:*/		return 0x821A5360;
		  /* 821A5360h */ case   16:  		/* rlwinm R9, R10, 31, 29, 30 */
		/* 821A5360h case   16:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R9,regs.R10);
		/* 821A5360h case   16:*/		return 0x821A5364;
		  /* 821A5364h */ case   17:  		/* rlwinm R10, R10, 1, 29, 30 */
		/* 821A5364h case   17:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R10,regs.R10);
		/* 821A5364h case   17:*/		return 0x821A5368;
		  /* 821A5368h */ case   18:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821A5368h case   18:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821A5368h case   18:*/		return 0x821A536C;
		  /* 821A536Ch */ case   19:  		/* srw R9, R24, R9 */
		/* 821A536Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R24,regs.R9);
		/* 821A536Ch case   19:*/		return 0x821A5370;
		  /* 821A5370h */ case   20:  		/* srw R10, R24, R10 */
		/* 821A5370h case   20:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R24,regs.R10);
		/* 821A5370h case   20:*/		return 0x821A5374;
		  /* 821A5374h */ case   21:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 821A5374h case   21:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821A5374h case   21:*/		return 0x821A5378;
		  /* 821A5378h */ case   22:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A5378h case   22:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A5378h case   22:*/		return 0x821A537C;
		  /* 821A537Ch */ case   23:  		/* rlwimi R10, R9, 2, 0, 29 */
		/* 821A537Ch case   23:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A537Ch case   23:*/		return 0x821A5380;
		  /* 821A5380h */ case   24:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821A5380h case   24:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821A5380h case   24:*/		return 0x821A5384;
		  /* 821A5384h */ case   25:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821A5384h case   25:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821A5384h case   25:*/		return 0x821A5388;
		  /* 821A5388h */ case   26:  		/* or R11, R10, R11 */
		/* 821A5388h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A5388h case   26:*/		return 0x821A538C;
	}
	return 0x821A538C;
} // Block from 821A5320h-821A538Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A538Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A538C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A538C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A538C);
		  /* 821A538Ch */ case    0:  		/* stw R11, <#[R31]> */
		/* 821A538Ch case    0:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A538Ch case    0:*/		return 0x821A5390;
		  /* 821A5390h */ case    1:  		/* mr R4, R30 */
		/* 821A5390h case    1:*/		regs.R4 = regs.R30;
		/* 821A5390h case    1:*/		return 0x821A5394;
		  /* 821A5394h */ case    2:  		/* mr R3, R26 */
		/* 821A5394h case    2:*/		regs.R3 = regs.R26;
		/* 821A5394h case    2:*/		return 0x821A5398;
		  /* 821A5398h */ case    3:  		/* bl -18656 */
		/* 821A5398h case    3:*/		regs.LR = 0x821A539C; return 0x821A0AB8;
		/* 821A5398h case    3:*/		return 0x821A539C;
	}
	return 0x821A539C;
} // Block from 821A538Ch-821A539Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A539Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A539C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A539C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A539C);
		  /* 821A539Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821A539Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A539Ch case    0:*/		return 0x821A53A0;
		  /* 821A53A0h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A53A0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A53A0h case    1:*/		return 0x821A53A4;
		  /* 821A53A4h */ case    2:  		/* bc 4, CR6_EQ, -404 */
		/* 821A53A4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A5210;  }
		/* 821A53A4h case    2:*/		return 0x821A53A8;
		  /* 821A53A8h */ case    3:  		/* addi R29, R31, 8 */
		/* 821A53A8h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x8);
		/* 821A53A8h case    3:*/		return 0x821A53AC;
		  /* 821A53ACh */ case    4:  		/* b -412 */
		/* 821A53ACh case    4:*/		return 0x821A5210;
		/* 821A53ACh case    4:*/		return 0x821A53B0;
	}
	return 0x821A53B0;
} // Block from 821A539Ch-821A53B0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A53B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A53B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A53B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A53B0);
		  /* 821A53B0h */ case    0:  		/* mr R4, R26 */
		/* 821A53B0h case    0:*/		regs.R4 = regs.R26;
		/* 821A53B0h case    0:*/		return 0x821A53B4;
		  /* 821A53B4h */ case    1:  		/* mr R3, R27 */
		/* 821A53B4h case    1:*/		regs.R3 = regs.R27;
		/* 821A53B4h case    1:*/		return 0x821A53B8;
		  /* 821A53B8h */ case    2:  		/* bl -59408 */
		/* 821A53B8h case    2:*/		regs.LR = 0x821A53BC; return 0x82196BA8;
		/* 821A53B8h case    2:*/		return 0x821A53BC;
		  /* 821A53BCh */ case    3:  		/* mr R3, R27 */
		/* 821A53BCh case    3:*/		regs.R3 = regs.R27;
		/* 821A53BCh case    3:*/		return 0x821A53C0;
		  /* 821A53C0h */ case    4:  		/* bl -184392 */
		/* 821A53C0h case    4:*/		regs.LR = 0x821A53C4; return 0x82178378;
		/* 821A53C0h case    4:*/		return 0x821A53C4;
		  /* 821A53C4h */ case    5:  		/* mr R3, R23 */
		/* 821A53C4h case    5:*/		regs.R3 = regs.R23;
		/* 821A53C4h case    5:*/		return 0x821A53C8;
		  /* 821A53C8h */ case    6:  		/* bl -184400 */
		/* 821A53C8h case    6:*/		regs.LR = 0x821A53CC; return 0x82178378;
		/* 821A53C8h case    6:*/		return 0x821A53CC;
		  /* 821A53CCh */ case    7:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A53CCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A53CCh case    7:*/		return 0x821A53D0;
		  /* 821A53D0h */ case    8:  		/* cmplwi CR6, R28, 0 */
		/* 821A53D0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A53D0h case    8:*/		return 0x821A53D4;
		  /* 821A53D4h */ case    9:  		/* oris R11, R11, 256 */
		/* 821A53D4h case    9:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A53D4h case    9:*/		return 0x821A53D8;
		  /* 821A53D8h */ case   10:  		/* stw R11, <#[R23 + 8]> */
		/* 821A53D8h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A53D8h case   10:*/		return 0x821A53DC;
		  /* 821A53DCh */ case   11:  		/* bc 12, CR6_EQ, 28 */
		/* 821A53DCh case   11:*/		if ( regs.CR[6].eq ) { return 0x821A53F8;  }
		/* 821A53DCh case   11:*/		return 0x821A53E0;
		  /* 821A53E0h */ case   12:  		/* mr R4, R28 */
		/* 821A53E0h case   12:*/		regs.R4 = regs.R28;
		/* 821A53E0h case   12:*/		return 0x821A53E4;
		  /* 821A53E4h */ case   13:  		/* mr R3, R26 */
		/* 821A53E4h case   13:*/		regs.R3 = regs.R26;
		/* 821A53E4h case   13:*/		return 0x821A53E8;
		  /* 821A53E8h */ case   14:  		/* bl 69632 */
		/* 821A53E8h case   14:*/		regs.LR = 0x821A53EC; return 0x821B63E8;
		/* 821A53E8h case   14:*/		return 0x821A53EC;
		  /* 821A53ECh */ case   15:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A53ECh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A53ECh case   15:*/		return 0x821A53F0;
		  /* 821A53F0h */ case   16:  		/* oris R11, R11, 256 */
		/* 821A53F0h case   16:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A53F0h case   16:*/		return 0x821A53F4;
		  /* 821A53F4h */ case   17:  		/* stw R11, <#[R28 + 8]> */
		/* 821A53F4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A53F4h case   17:*/		return 0x821A53F8;
	}
	return 0x821A53F8;
} // Block from 821A53B0h-821A53F8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A53F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A53F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A53F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A53F8);
		  /* 821A53F8h */ case    0:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A53F8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A53F8h case    0:*/		return 0x821A53FC;
		  /* 821A53FCh */ case    1:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A53FCh case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A53FCh case    1:*/		return 0x821A5400;
		  /* 821A5400h */ case    2:  		/* bc 4, CR0_EQ, 160 */
		/* 821A5400h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A54A0;  }
		/* 821A5400h case    2:*/		return 0x821A5404;
		  /* 821A5404h */ case    3:  		/* lwz R10, <#[R27 + 8]> */
		/* 821A5404h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821A5404h case    3:*/		return 0x821A5408;
		  /* 821A5408h */ case    4:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A5408h case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A5408h case    4:*/		return 0x821A540C;
		  /* 821A540Ch */ case    5:  		/* bc 12, CR0_EQ, 148 */
		/* 821A540Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821A54A0;  }
		/* 821A540Ch case    5:*/		return 0x821A5410;
		  /* 821A5410h */ case    6:  		/* oris R11, R11, 128 */
		/* 821A5410h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A5410h case    6:*/		return 0x821A5414;
		  /* 821A5414h */ case    7:  		/* stw R11, <#[R23 + 8]> */
		/* 821A5414h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A5414h case    7:*/		return 0x821A5418;
		  /* 821A5418h */ case    8:  		/* lwz R11, <#[R27 + 16]> */
		/* 821A5418h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000010) );
		/* 821A5418h case    8:*/		return 0x821A541C;
		  /* 821A541Ch */ case    9:  		/* rlwinm. R10, R11, 0, 13, 15 */
		/* 821A541Ch case    9:*/		cpu::op::rlwinm<1,0,13,15>(regs,&regs.R10,regs.R11);
		/* 821A541Ch case    9:*/		return 0x821A5420;
		  /* 821A5420h */ case   10:  		/* bc 12, CR0_EQ, 16 */
		/* 821A5420h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A5430;  }
		/* 821A5420h case   10:*/		return 0x821A5424;
		  /* 821A5424h */ case   11:  		/* add R11, R11, R21 */
		/* 821A5424h case   11:*/		cpu::op::add<0>(regs,&regs.R11,regs.R11,regs.R21);
		/* 821A5424h case   11:*/		return 0x821A5428;
		  /* 821A5428h */ case   12:  		/* sth R11, <#[R23 + 18]> */
		/* 821A5428h case   12:*/		cpu::mem::store16( regs, regs.R11, (uint32)(regs.R23 + 0x00000012) );
		/* 821A5428h case   12:*/		return 0x821A542C;
		  /* 821A542Ch */ case   13:  		/* b 16 */
		/* 821A542Ch case   13:*/		return 0x821A543C;
		/* 821A542Ch case   13:*/		return 0x821A5430;
	}
	return 0x821A5430;
} // Block from 821A53F8h-821A5430h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A5430h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5430( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5430) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5430);
		  /* 821A5430h */ case    0:  		/* mr R3, R27 */
		/* 821A5430h case    0:*/		regs.R3 = regs.R27;
		/* 821A5430h case    0:*/		return 0x821A5434;
		  /* 821A5434h */ case    1:  		/* bl -138060 */
		/* 821A5434h case    1:*/		regs.LR = 0x821A5438; return 0x821838E8;
		/* 821A5434h case    1:*/		return 0x821A5438;
		  /* 821A5438h */ case    2:  		/* sth R3, <#[R23 + 18]> */
		/* 821A5438h case    2:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R23 + 0x00000012) );
		/* 821A5438h case    2:*/		return 0x821A543C;
	}
	return 0x821A543C;
} // Block from 821A5430h-821A543Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A543Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A543C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A543C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A543C);
		  /* 821A543Ch */ case    0:  		/* lwz R11, <#[R23 + 16]> */
		/* 821A543Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000010) );
		/* 821A543Ch case    0:*/		return 0x821A5440;
		  /* 821A5440h */ case    1:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 821A5440h case    1:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 821A5440h case    1:*/		return 0x821A5444;
		  /* 821A5444h */ case    2:  		/* stw R11, <#[R23 + 16]> */
		/* 821A5444h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000010) );
		/* 821A5444h case    2:*/		return 0x821A5448;
		  /* 821A5448h */ case    3:  		/* lwz R3, <#[R26 + 660]> */
		/* 821A5448h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R26 + 0x00000294) );
		/* 821A5448h case    3:*/		return 0x821A544C;
		  /* 821A544Ch */ case    4:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A544Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A544Ch case    4:*/		return 0x821A5450;
		  /* 821A5450h */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A5450h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A5450h case    5:*/		return 0x821A5454;
		  /* 821A5454h */ case    6:  		/* bc 4, CR0_EQ, 40 */
		/* 821A5454h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A547C;  }
		/* 821A5454h case    6:*/		return 0x821A5458;
		  /* 821A5458h */ case    7:  		/* lwz R11, <#[R3]> */
		/* 821A5458h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A5458h case    7:*/		return 0x821A545C;
		  /* 821A545Ch */ case    8:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A545Ch case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A545Ch case    8:*/		return 0x821A5460;
		  /* 821A5460h */ case    9:  		/* addic. R11, R11, -4 */
		/* 821A5460h case    9:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A5460h case    9:*/		return 0x821A5464;
		  /* 821A5464h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 821A5464h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A547C;  }
		/* 821A5464h case   10:*/		return 0x821A5468;
		  /* 821A5468h */ case   11:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A5468h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5468h case   11:*/		return 0x821A546C;
		  /* 821A546Ch */ case   12:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A546Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A546Ch case   12:*/		return 0x821A5470;
		  /* 821A5470h */ case   13:  		/* addi R10, R10, 1 */
		/* 821A5470h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A5470h case   13:*/		return 0x821A5474;
		  /* 821A5474h */ case   14:  		/* cmplw CR6, R10, R9 */
		/* 821A5474h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A5474h case   14:*/		return 0x821A5478;
		  /* 821A5478h */ case   15:  		/* bc 4, CR6_GT, 16 */
		/* 821A5478h case   15:*/		if ( !regs.CR[6].gt ) { return 0x821A5488;  }
		/* 821A5478h case   15:*/		return 0x821A547C;
	}
	return 0x821A547C;
} // Block from 821A543Ch-821A547Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A547Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A547C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A547C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A547C);
		  /* 821A547Ch */ case    0:  		/* li R4, 1 */
		/* 821A547Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A547Ch case    0:*/		return 0x821A5480;
		  /* 821A5480h */ case    1:  		/* bl -99256 */
		/* 821A5480h case    1:*/		regs.LR = 0x821A5484; return 0x8218D0C8;
		/* 821A5480h case    1:*/		return 0x821A5484;
		  /* 821A5484h */ case    2:  		/* mr R11, R3 */
		/* 821A5484h case    2:*/		regs.R11 = regs.R3;
		/* 821A5484h case    2:*/		return 0x821A5488;
	}
	return 0x821A5488;
} // Block from 821A547Ch-821A5488h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5488);
		  /* 821A5488h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A5488h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5488h case    0:*/		return 0x821A548C;
		  /* 821A548Ch */ case    1:  		/* addi R9, R10, 4 */
		/* 821A548Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A548Ch case    1:*/		return 0x821A5490;
		  /* 821A5490h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A5490h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A5490h case    2:*/		return 0x821A5494;
		  /* 821A5494h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A5494h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A5494h case    3:*/		return 0x821A5498;
		  /* 821A5498h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A5498h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5498h case    4:*/		return 0x821A549C;
		  /* 821A549Ch */ case    5:  		/* stwx R23, <#[R10 + R11]> */
		/* 821A549Ch case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A549Ch case    5:*/		return 0x821A54A0;
	}
	return 0x821A54A0;
} // Block from 821A5488h-821A54A0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A54A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A54A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A54A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A54A0);
		  /* 821A54A0h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821A54A0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A54A0h case    0:*/		return 0x821A54A4;
		  /* 821A54A4h */ case    1:  		/* bc 12, CR6_EQ, 16 */
		/* 821A54A4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A54B4;  }
		/* 821A54A4h case    1:*/		return 0x821A54A8;
		  /* 821A54A8h */ case    2:  		/* mr R4, R28 */
		/* 821A54A8h case    2:*/		regs.R4 = regs.R28;
		/* 821A54A8h case    2:*/		return 0x821A54AC;
		  /* 821A54ACh */ case    3:  		/* mr R3, R26 */
		/* 821A54ACh case    3:*/		regs.R3 = regs.R26;
		/* 821A54ACh case    3:*/		return 0x821A54B0;
		  /* 821A54B0h */ case    4:  		/* bl -18936 */
		/* 821A54B0h case    4:*/		regs.LR = 0x821A54B4; return 0x821A0AB8;
		/* 821A54B0h case    4:*/		return 0x821A54B4;
	}
	return 0x821A54B4;
} // Block from 821A54A0h-821A54B4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A54B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A54B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A54B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A54B4);
		  /* 821A54B4h */ case    0:  		/* mr R4, R23 */
		/* 821A54B4h case    0:*/		regs.R4 = regs.R23;
		/* 821A54B4h case    0:*/		return 0x821A54B8;
		  /* 821A54B8h */ case    1:  		/* mr R3, R26 */
		/* 821A54B8h case    1:*/		regs.R3 = regs.R26;
		/* 821A54B8h case    1:*/		return 0x821A54BC;
		  /* 821A54BCh */ case    2:  		/* bl -18948 */
		/* 821A54BCh case    2:*/		regs.LR = 0x821A54C0; return 0x821A0AB8;
		/* 821A54BCh case    2:*/		return 0x821A54C0;
		  /* 821A54C0h */ case    3:  		/* mr R4, R27 */
		/* 821A54C0h case    3:*/		regs.R4 = regs.R27;
		/* 821A54C0h case    3:*/		return 0x821A54C4;
		  /* 821A54C4h */ case    4:  		/* mr R3, R26 */
		/* 821A54C4h case    4:*/		regs.R3 = regs.R26;
		/* 821A54C4h case    4:*/		return 0x821A54C8;
		  /* 821A54C8h */ case    5:  		/* bl -18960 */
		/* 821A54C8h case    5:*/		regs.LR = 0x821A54CC; return 0x821A0AB8;
		/* 821A54C8h case    5:*/		return 0x821A54CC;
	}
	return 0x821A54CC;
} // Block from 821A54B4h-821A54CCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A54CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A54CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A54CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A54CC);
		  /* 821A54CCh */ case    0:  		/* addi R1, R1, 176 */
		/* 821A54CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821A54CCh case    0:*/		return 0x821A54D0;
	}
	return 0x821A54D0;
} // Block from 821A54CCh-821A54D0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A54D0h
// Function '?ReplaceCombinedInstruction@Compiler@D3DXShader@@AAAXPAVInstruction@2@0I_N1@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A54D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A54D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A54D0);
		  /* 821A54D0h */ case    0:  		/* b -1131076 */
		/* 821A54D0h case    0:*/		return 0x8209128C;
		/* 821A54D0h case    0:*/		return 0x821A54D4;
		  /* 821A54D4h */ case    1:  		/* nop */
		/* 821A54D4h case    1:*/		cpu::op::nop();
		/* 821A54D4h case    1:*/		return 0x821A54D8;
	}
	return 0x821A54D8;
} // Block from 821A54D0h-821A54D8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A54D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A54D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A54D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A54D8);
		  /* 821A54D8h */ case    0:  		/* mfspr R12, LR */
		/* 821A54D8h case    0:*/		regs.R12 = regs.LR;
		/* 821A54D8h case    0:*/		return 0x821A54DC;
		  /* 821A54DCh */ case    1:  		/* bl -1131152 */
		/* 821A54DCh case    1:*/		regs.LR = 0x821A54E0; return 0x8209124C;
		/* 821A54DCh case    1:*/		return 0x821A54E0;
		  /* 821A54E0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821A54E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821A54E0h case    2:*/		return 0x821A54E4;
		  /* 821A54E4h */ case    3:  		/* lwz R29, <#[R7 + 52]> */
		/* 821A54E4h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R7 + 0x00000034) );
		/* 821A54E4h case    3:*/		return 0x821A54E8;
		  /* 821A54E8h */ case    4:  		/* mr R30, R3 */
		/* 821A54E8h case    4:*/		regs.R30 = regs.R3;
		/* 821A54E8h case    4:*/		return 0x821A54EC;
		  /* 821A54ECh */ case    5:  		/* mr R26, R4 */
		/* 821A54ECh case    5:*/		regs.R26 = regs.R4;
		/* 821A54ECh case    5:*/		return 0x821A54F0;
		  /* 821A54F0h */ case    6:  		/* mr R25, R5 */
		/* 821A54F0h case    6:*/		regs.R25 = regs.R5;
		/* 821A54F0h case    6:*/		return 0x821A54F4;
		  /* 821A54F4h */ case    7:  		/* mr R31, R6 */
		/* 821A54F4h case    7:*/		regs.R31 = regs.R6;
		/* 821A54F4h case    7:*/		return 0x821A54F8;
		  /* 821A54F8h */ case    8:  		/* mr R27, R7 */
		/* 821A54F8h case    8:*/		regs.R27 = regs.R7;
		/* 821A54F8h case    8:*/		return 0x821A54FC;
		  /* 821A54FCh */ case    9:  		/* lwz R3, <#[R29 + 12]> */
		/* 821A54FCh case    9:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A54FCh case    9:*/		return 0x821A5500;
		  /* 821A5500h */ case   10:  		/* mr R28, R6 */
		/* 821A5500h case   10:*/		regs.R28 = regs.R6;
		/* 821A5500h case   10:*/		return 0x821A5504;
		  /* 821A5504h */ case   11:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A5504h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A5504h case   11:*/		return 0x821A5508;
		  /* 821A5508h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A5508h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A5508h case   12:*/		return 0x821A550C;
		  /* 821A550Ch */ case   13:  		/* cmplwi CR6, R11, 16000 */
		/* 821A550Ch case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821A550Ch case   13:*/		return 0x821A5510;
		  /* 821A5510h */ case   14:  		/* bc 4, CR6_EQ, 36 */
		/* 821A5510h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821A5534;  }
		/* 821A5510h case   14:*/		return 0x821A5514;
		  /* 821A5514h */ case   15:  		/* lwz R11, <#[R29]> */
		/* 821A5514h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A5514h case   15:*/		return 0x821A5518;
		  /* 821A5518h */ case   16:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821A5518h case   16:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821A5518h case   16:*/		return 0x821A551C;
		  /* 821A551Ch */ case   17:  		/* rlwinm R4, R11, 27, 30, 31 */
		/* 821A551Ch case   17:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R4,regs.R11);
		/* 821A551Ch case   17:*/		return 0x821A5520;
		  /* 821A5520h */ case   18:  		/* bl 508264 */
		/* 821A5520h case   18:*/		regs.LR = 0x821A5524; return 0x82221688;
		/* 821A5520h case   18:*/		return 0x821A5524;
		  /* 821A5524h */ case   19:  		/* lis R11, -32256 */
		/* 821A5524h case   19:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821A5524h case   19:*/		return 0x821A5528;
		  /* 821A5528h */ case   20:  		/* lfs FR0, <#[R11 + 1816]> */
		/* 821A5528h case   20:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R11 + 0x00000718) );
		/* 821A5528h case   20:*/		return 0x821A552C;
		  /* 821A552Ch */ case   21:  		/* fcmpu CR6, FR1, FR0 */
		/* 821A552Ch case   21:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR0);
		/* 821A552Ch case   21:*/		return 0x821A5530;
		  /* 821A5530h */ case   22:  		/* bc 12, CR6_EQ, 124 */
		/* 821A5530h case   22:*/		if ( regs.CR[6].eq ) { return 0x821A55AC;  }
		/* 821A5530h case   22:*/		return 0x821A5534;
	}
	return 0x821A5534;
} // Block from 821A54D8h-821A5534h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A5534h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5534( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5534) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5534);
		  /* 821A5534h */ case    0:  		/* mr R4, R31 */
		/* 821A5534h case    0:*/		regs.R4 = regs.R31;
		/* 821A5534h case    0:*/		return 0x821A5538;
		  /* 821A5538h */ case    1:  		/* mr R3, R30 */
		/* 821A5538h case    1:*/		regs.R3 = regs.R30;
		/* 821A5538h case    1:*/		return 0x821A553C;
		  /* 821A553Ch */ case    2:  		/* bl -185660 */
		/* 821A553Ch case    2:*/		regs.LR = 0x821A5540; return 0x82178000;
		/* 821A553Ch case    2:*/		return 0x821A5540;
		  /* 821A5540h */ case    3:  		/* mr R7, R3 */
		/* 821A5540h case    3:*/		regs.R7 = regs.R3;
		/* 821A5540h case    3:*/		return 0x821A5544;
		  /* 821A5544h */ case    4:  		/* mr R6, R29 */
		/* 821A5544h case    4:*/		regs.R6 = regs.R29;
		/* 821A5544h case    4:*/		return 0x821A5548;
		  /* 821A5548h */ case    5:  		/* mr R5, R31 */
		/* 821A5548h case    5:*/		regs.R5 = regs.R31;
		/* 821A5548h case    5:*/		return 0x821A554C;
		  /* 821A554Ch */ case    6:  		/* li R4, 1 */
		/* 821A554Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A554Ch case    6:*/		return 0x821A5550;
		  /* 821A5550h */ case    7:  		/* mr R3, R30 */
		/* 821A5550h case    7:*/		regs.R3 = regs.R30;
		/* 821A5550h case    7:*/		return 0x821A5554;
		  /* 821A5554h */ case    8:  		/* bl -30572 */
		/* 821A5554h case    8:*/		regs.LR = 0x821A5558; return 0x8219DDE8;
		/* 821A5554h case    8:*/		return 0x821A5558;
		  /* 821A5558h */ case    9:  		/* lwz R11, <#[R29]> */
		/* 821A5558h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A5558h case    9:*/		return 0x821A555C;
		  /* 821A555Ch */ case   10:  		/* mr R28, R3 */
		/* 821A555Ch case   10:*/		regs.R28 = regs.R3;
		/* 821A555Ch case   10:*/		return 0x821A5560;
		  /* 821A5560h */ case   11:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821A5560h case   11:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821A5560h case   11:*/		return 0x821A5564;
		  /* 821A5564h */ case   12:  		/* bc 12, CR0_EQ, 40 */
		/* 821A5564h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A558C;  }
		/* 821A5564h case   12:*/		return 0x821A5568;
		  /* 821A5568h */ case   13:  		/* mr R3, R27 */
		/* 821A5568h case   13:*/		regs.R3 = regs.R27;
		/* 821A5568h case   13:*/		return 0x821A556C;
		  /* 821A556Ch */ case   14:  		/* bl -186964 */
		/* 821A556Ch case   14:*/		regs.LR = 0x821A5570; return 0x82177B18;
		/* 821A556Ch case   14:*/		return 0x821A5570;
		  /* 821A5570h */ case   15:  		/* mr R4, R3 */
		/* 821A5570h case   15:*/		regs.R4 = regs.R3;
		/* 821A5570h case   15:*/		return 0x821A5574;
		  /* 821A5574h */ case   16:  		/* mr R3, R30 */
		/* 821A5574h case   16:*/		regs.R3 = regs.R30;
		/* 821A5574h case   16:*/		return 0x821A5578;
		  /* 821A5578h */ case   17:  		/* li R5, 0 */
		/* 821A5578h case   17:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A5578h case   17:*/		return 0x821A557C;
		  /* 821A557Ch */ case   18:  		/* bl -216620 */
		/* 821A557Ch case   18:*/		regs.LR = 0x821A5580; return 0x82170750;
		/* 821A557Ch case   18:*/		return 0x821A5580;
		  /* 821A5580h */ case   19:  		/* mr R4, R3 */
		/* 821A5580h case   19:*/		regs.R4 = regs.R3;
		/* 821A5580h case   19:*/		return 0x821A5584;
		  /* 821A5584h */ case   20:  		/* mr R3, R28 */
		/* 821A5584h case   20:*/		regs.R3 = regs.R28;
		/* 821A5584h case   20:*/		return 0x821A5588;
		  /* 821A5588h */ case   21:  		/* bl -185280 */
		/* 821A5588h case   21:*/		regs.LR = 0x821A558C; return 0x821781C8;
		/* 821A5588h case   21:*/		return 0x821A558C;
	}
	return 0x821A558C;
} // Block from 821A5534h-821A558Ch (22 instructions)

//////////////////////////////////////////////////////
// Block at 821A558Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A558C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A558C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A558C);
		  /* 821A558Ch */ case    0:  		/* mr R3, R31 */
		/* 821A558Ch case    0:*/		regs.R3 = regs.R31;
		/* 821A558Ch case    0:*/		return 0x821A5590;
		  /* 821A5590h */ case    1:  		/* bl -184856 */
		/* 821A5590h case    1:*/		regs.LR = 0x821A5594; return 0x82178378;
		/* 821A5590h case    1:*/		return 0x821A5594;
		  /* 821A5594h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A5594h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A5594h case    2:*/		return 0x821A5598;
		  /* 821A5598h */ case    3:  		/* mr R4, R28 */
		/* 821A5598h case    3:*/		regs.R4 = regs.R28;
		/* 821A5598h case    3:*/		return 0x821A559C;
		  /* 821A559Ch */ case    4:  		/* oris R11, R11, 256 */
		/* 821A559Ch case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A559Ch case    4:*/		return 0x821A55A0;
		  /* 821A55A0h */ case    5:  		/* mr R3, R30 */
		/* 821A55A0h case    5:*/		regs.R3 = regs.R30;
		/* 821A55A0h case    5:*/		return 0x821A55A4;
		  /* 821A55A4h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821A55A4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A55A4h case    6:*/		return 0x821A55A8;
		  /* 821A55A8h */ case    7:  		/* bl -19184 */
		/* 821A55A8h case    7:*/		regs.LR = 0x821A55AC; return 0x821A0AB8;
		/* 821A55A8h case    7:*/		return 0x821A55AC;
	}
	return 0x821A55AC;
} // Block from 821A558Ch-821A55ACh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A55ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A55AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A55AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A55AC);
		  /* 821A55ACh */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 821A55ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821A55ACh case    0:*/		return 0x821A55B0;
		  /* 821A55B0h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A55B0h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A55B0h case    1:*/		return 0x821A55B4;
		  /* 821A55B4h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821A55B4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A55C4;  }
		/* 821A55B4h case    2:*/		return 0x821A55B8;
		  /* 821A55B8h */ case    3:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A55B8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A55B8h case    3:*/		return 0x821A55BC;
		  /* 821A55BCh */ case    4:  		/* ori R11, R11, 1 */
		/* 821A55BCh case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A55BCh case    4:*/		return 0x821A55C0;
		  /* 821A55C0h */ case    5:  		/* stw R11, <#[R28 + 8]> */
		/* 821A55C0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A55C0h case    5:*/		return 0x821A55C4;
	}
	return 0x821A55C4;
} // Block from 821A55ACh-821A55C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A55C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A55C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A55C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A55C4);
		  /* 821A55C4h */ case    0:  		/* mr R6, R28 */
		/* 821A55C4h case    0:*/		regs.R6 = regs.R28;
		/* 821A55C4h case    0:*/		return 0x821A55C8;
		  /* 821A55C8h */ case    1:  		/* mr R5, R25 */
		/* 821A55C8h case    1:*/		regs.R5 = regs.R25;
		/* 821A55C8h case    1:*/		return 0x821A55CC;
		  /* 821A55CCh */ case    2:  		/* mr R4, R26 */
		/* 821A55CCh case    2:*/		regs.R4 = regs.R26;
		/* 821A55CCh case    2:*/		return 0x821A55D0;
		  /* 821A55D0h */ case    3:  		/* mr R3, R30 */
		/* 821A55D0h case    3:*/		regs.R3 = regs.R30;
		/* 821A55D0h case    3:*/		return 0x821A55D4;
		  /* 821A55D4h */ case    4:  		/* bl -1716 */
		/* 821A55D4h case    4:*/		regs.LR = 0x821A55D8; return 0x821A4F20;
		/* 821A55D4h case    4:*/		return 0x821A55D8;
		  /* 821A55D8h */ case    5:  		/* mr R4, R31 */
		/* 821A55D8h case    5:*/		regs.R4 = regs.R31;
		/* 821A55D8h case    5:*/		return 0x821A55DC;
		  /* 821A55DCh */ case    6:  		/* mr R3, R30 */
		/* 821A55DCh case    6:*/		regs.R3 = regs.R30;
		/* 821A55DCh case    6:*/		return 0x821A55E0;
		  /* 821A55E0h */ case    7:  		/* bl -19240 */
		/* 821A55E0h case    7:*/		regs.LR = 0x821A55E4; return 0x821A0AB8;
		/* 821A55E0h case    7:*/		return 0x821A55E4;
		  /* 821A55E4h */ case    8:  		/* addi R1, R1, 144 */
		/* 821A55E4h case    8:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821A55E4h case    8:*/		return 0x821A55E8;
		  /* 821A55E8h */ case    9:  		/* b -1131340 */
		/* 821A55E8h case    9:*/		return 0x8209129C;
		/* 821A55E8h case    9:*/		return 0x821A55EC;
		  /* 821A55ECh */ case   10:  		/* nop */
		/* 821A55ECh case   10:*/		cpu::op::nop();
		/* 821A55ECh case   10:*/		return 0x821A55F0;
	}
	return 0x821A55F0;
} // Block from 821A55C4h-821A55F0h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A55F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A55F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A55F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A55F0);
		  /* 821A55F0h */ case    0:  		/* mfspr R12, LR */
		/* 821A55F0h case    0:*/		regs.R12 = regs.LR;
		/* 821A55F0h case    0:*/		return 0x821A55F4;
		  /* 821A55F4h */ case    1:  		/* bl -1131452 */
		/* 821A55F4h case    1:*/		regs.LR = 0x821A55F8; return 0x82091238;
		/* 821A55F4h case    1:*/		return 0x821A55F8;
		  /* 821A55F8h */ case    2:  		/* stwu R1, <#[R1 - 192]> */
		/* 821A55F8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF40);
		/* 821A55F8h case    2:*/		return 0x821A55FC;
		  /* 821A55FCh */ case    3:  		/* lwz R23, <#[R5 + 12]> */
		/* 821A55FCh case    3:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R5 + 0x0000000C) );
		/* 821A55FCh case    3:*/		return 0x821A5600;
		  /* 821A5600h */ case    4:  		/* mr R25, R3 */
		/* 821A5600h case    4:*/		regs.R25 = regs.R3;
		/* 821A5600h case    4:*/		return 0x821A5604;
		  /* 821A5604h */ case    5:  		/* lwz R11, <#[R5]> */
		/* 821A5604h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821A5604h case    5:*/		return 0x821A5608;
		  /* 821A5608h */ case    6:  		/* mr R24, R4 */
		/* 821A5608h case    6:*/		regs.R24 = regs.R4;
		/* 821A5608h case    6:*/		return 0x821A560C;
		  /* 821A560Ch */ case    7:  		/* mr R28, R5 */
		/* 821A560Ch case    7:*/		regs.R28 = regs.R5;
		/* 821A560Ch case    7:*/		return 0x821A5610;
		  /* 821A5610h */ case    8:  		/* rlwinm R21, R11, 0, 27, 31 */
		/* 821A5610h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R21,regs.R11);
		/* 821A5610h case    8:*/		return 0x821A5614;
		  /* 821A5614h */ case    9:  		/* mr R20, R6 */
		/* 821A5614h case    9:*/		regs.R20 = regs.R6;
		/* 821A5614h case    9:*/		return 0x821A5618;
		  /* 821A5618h */ case   10:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A5618h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A5618h case   10:*/		return 0x821A561C;
		  /* 821A561Ch */ case   11:  		/* li R29, 0 */
		/* 821A561Ch case   11:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A561Ch case   11:*/		return 0x821A5620;
		  /* 821A5620h */ case   12:  		/* li R27, 0 */
		/* 821A5620h case   12:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A5620h case   12:*/		return 0x821A5624;
		  /* 821A5624h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A5624h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A5624h case   13:*/		return 0x821A5628;
		  /* 821A5628h */ case   14:  		/* cmplwi CR6, R11, 14080 */
		/* 821A5628h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821A5628h case   14:*/		return 0x821A562C;
		  /* 821A562Ch */ case   15:  		/* bc 12, CR6_EQ, 80 */
		/* 821A562Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821A567C;  }
		/* 821A562Ch case   15:*/		return 0x821A5630;
		  /* 821A5630h */ case   16:  		/* lwz R11, <#[R23 + 4]> */
		/* 821A5630h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821A5630h case   16:*/		return 0x821A5634;
		  /* 821A5634h */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821A5634h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A5634h case   17:*/		return 0x821A5638;
		  /* 821A5638h */ case   18:  		/* bc 12, CR6_EQ, 52 */
		/* 821A5638h case   18:*/		if ( regs.CR[6].eq ) { return 0x821A566C;  }
		/* 821A5638h case   18:*/		return 0x821A563C;
		  /* 821A563Ch */ case   19:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A563Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A563Ch case   19:*/		return 0x821A5640;
		  /* 821A5640h */ case   20:  		/* cmplwi CR6, R10, 0 */
		/* 821A5640h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A5640h case   20:*/		return 0x821A5644;
		  /* 821A5644h */ case   21:  		/* bc 12, CR6_EQ, 32 */
		/* 821A5644h case   21:*/		if ( regs.CR[6].eq ) { return 0x821A5664;  }
		/* 821A5644h case   21:*/		return 0x821A5648;
		  /* 821A5648h */ case   22:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A5648h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A5648h case   22:*/		return 0x821A564C;
		  /* 821A564Ch */ case   23:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A564Ch case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A564Ch case   23:*/		return 0x821A5650;
		  /* 821A5650h */ case   24:  		/* cmplwi CR6, R9, 14080 */
		/* 821A5650h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A5650h case   24:*/		return 0x821A5654;
		  /* 821A5654h */ case   25:  		/* bc 4, CR6_EQ, 16 */
		/* 821A5654h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821A5664;  }
		/* 821A5654h case   25:*/		return 0x821A5658;
		  /* 821A5658h */ case   26:  		/* lwz R9, <#[R11]> */
		/* 821A5658h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A5658h case   26:*/		return 0x821A565C;
		  /* 821A565Ch */ case   27:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A565Ch case   27:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A565Ch case   27:*/		return 0x821A5660;
		  /* 821A5660h */ case   28:  		/* bc 4, CR0_EQ, 16 */
		/* 821A5660h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821A5670;  }
		/* 821A5660h case   28:*/		return 0x821A5664;
	}
	return 0x821A5664;
} // Block from 821A55F0h-821A5664h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A5664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5664);
		  /* 821A5664h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A5664h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5664h case    0:*/		return 0x821A5668;
		  /* 821A5668h */ case    1:  		/* b -52 */
		/* 821A5668h case    1:*/		return 0x821A5634;
		/* 821A5668h case    1:*/		return 0x821A566C;
	}
	return 0x821A566C;
} // Block from 821A5664h-821A566Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A566Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A566C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A566C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A566C);
		  /* 821A566Ch */ case    0:  		/* li R10, 0 */
		/* 821A566Ch case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A566Ch case    0:*/		return 0x821A5670;
	}
	return 0x821A5670;
} // Block from 821A566Ch-821A5670h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5670h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5670( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5670) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5670);
		  /* 821A5670h */ case    0:  		/* cmplwi CR6, R10, 0 */
		/* 821A5670h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A5670h case    0:*/		return 0x821A5674;
		  /* 821A5674h */ case    1:  		/* li R11, 0 */
		/* 821A5674h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A5674h case    1:*/		return 0x821A5678;
		  /* 821A5678h */ case    2:  		/* bc 12, CR6_EQ, 8 */
		/* 821A5678h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A5680;  }
		/* 821A5678h case    2:*/		return 0x821A567C;
	}
	return 0x821A567C;
} // Block from 821A5670h-821A567Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A567Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A567C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A567C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A567C);
		  /* 821A567Ch */ case    0:  		/* li R11, 1 */
		/* 821A567Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A567Ch case    0:*/		return 0x821A5680;
	}
	return 0x821A5680;
} // Block from 821A567Ch-821A5680h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5680h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5680( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5680) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5680);
		  /* 821A5680h */ case    0:  		/* rlwinm R22, R11, 0, 24, 31 */
		/* 821A5680h case    0:*/		cpu::op::rlwinm<0,0,24,31>(regs,&regs.R22,regs.R11);
		/* 821A5680h case    0:*/		return 0x821A5684;
		  /* 821A5684h */ case    1:  		/* addi R26, R24, 4 */
		/* 821A5684h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R24,0x4);
		/* 821A5684h case    1:*/		return 0x821A5688;
		  /* 821A5688h */ case    2:  		/* lwz R31, <#[R26]> */
		/* 821A5688h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R26 + 0x00000000) );
		/* 821A5688h case    2:*/		return 0x821A568C;
		  /* 821A568Ch */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821A568Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A568Ch case    3:*/		return 0x821A5690;
		  /* 821A5690h */ case    4:  		/* bc 12, CR6_EQ, 580 */
		/* 821A5690h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A58D4;  }
		/* 821A5690h case    4:*/		return 0x821A5694;
		  /* 821A5694h */ case    5:  		/* lwz R30, <#[R31 + 16]> */
		/* 821A5694h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 821A5694h case    5:*/		return 0x821A5698;
		  /* 821A5698h */ case    6:  		/* cmplwi CR6, R30, 0 */
		/* 821A5698h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A5698h case    6:*/		return 0x821A569C;
		  /* 821A569Ch */ case    7:  		/* bc 12, CR6_EQ, 548 */
		/* 821A569Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821A58C0;  }
		/* 821A569Ch case    7:*/		return 0x821A56A0;
		  /* 821A56A0h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821A56A0h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A56A0h case    8:*/		return 0x821A56A4;
		  /* 821A56A4h */ case    9:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821A56A4h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821A56A4h case    9:*/		return 0x821A56A8;
		  /* 821A56A8h */ case   10:  		/* bc 12, CR0_EQ, 536 */
		/* 821A56A8h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A58C0;  }
		/* 821A56A8h case   10:*/		return 0x821A56AC;
		  /* 821A56ACh */ case   11:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A56ACh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A56ACh case   11:*/		return 0x821A56B0;
		  /* 821A56B0h */ case   12:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821A56B0h case   12:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821A56B0h case   12:*/		return 0x821A56B4;
		  /* 821A56B4h */ case   13:  		/* cmplwi CR6, R10, 1 */
		/* 821A56B4h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821A56B4h case   13:*/		return 0x821A56B8;
		  /* 821A56B8h */ case   14:  		/* bc 12, CR6_LT, 16 */
		/* 821A56B8h case   14:*/		if ( regs.CR[6].lt ) { return 0x821A56C8;  }
		/* 821A56B8h case   14:*/		return 0x821A56BC;
		  /* 821A56BCh */ case   15:  		/* cmplwi CR6, R10, 102 */
		/* 821A56BCh case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000066);
		/* 821A56BCh case   15:*/		return 0x821A56C0;
		  /* 821A56C0h */ case   16:  		/* li R11, 1 */
		/* 821A56C0h case   16:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A56C0h case   16:*/		return 0x821A56C4;
		  /* 821A56C4h */ case   17:  		/* bc 4, CR6_GT, 8 */
		/* 821A56C4h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821A56CC;  }
		/* 821A56C4h case   17:*/		return 0x821A56C8;
	}
	return 0x821A56C8;
} // Block from 821A5680h-821A56C8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A56C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A56C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A56C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A56C8);
		  /* 821A56C8h */ case    0:  		/* li R11, 0 */
		/* 821A56C8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A56C8h case    0:*/		return 0x821A56CC;
	}
	return 0x821A56CC;
} // Block from 821A56C8h-821A56CCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A56CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A56CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A56CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A56CC);
		  /* 821A56CCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A56CCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A56CCh case    0:*/		return 0x821A56D0;
		  /* 821A56D0h */ case    1:  		/* bc 4, CR0_EQ, 104 */
		/* 821A56D0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821A5738;  }
		/* 821A56D0h case    1:*/		return 0x821A56D4;
		  /* 821A56D4h */ case    2:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821A56D4h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821A56D4h case    2:*/		return 0x821A56D8;
		  /* 821A56D8h */ case    3:  		/* bc 4, CR0_EQ, 128 */
		/* 821A56D8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A5758;  }
		/* 821A56D8h case    3:*/		return 0x821A56DC;
		  /* 821A56DCh */ case    4:  		/* cmplwi CR6, R10, 110 */
		/* 821A56DCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000006E);
		/* 821A56DCh case    4:*/		return 0x821A56E0;
		  /* 821A56E0h */ case    5:  		/* bc 4, CR6_EQ, 120 */
		/* 821A56E0h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A5758;  }
		/* 821A56E0h case    5:*/		return 0x821A56E4;
		  /* 821A56E4h */ case    6:  		/* lwz R10, <#[R23 + 8]> */
		/* 821A56E4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 821A56E4h case    6:*/		return 0x821A56E8;
		  /* 821A56E8h */ case    7:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821A56E8h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821A56E8h case    7:*/		return 0x821A56EC;
		  /* 821A56ECh */ case    8:  		/* cmplwi CR6, R11, 125 */
		/* 821A56ECh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821A56ECh case    8:*/		return 0x821A56F0;
		  /* 821A56F0h */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 821A56F0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A5700;  }
		/* 821A56F0h case    9:*/		return 0x821A56F4;
		  /* 821A56F4h */ case   10:  		/* cmplwi CR6, R11, 124 */
		/* 821A56F4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821A56F4h case   10:*/		return 0x821A56F8;
		  /* 821A56F8h */ case   11:  		/* li R11, 0 */
		/* 821A56F8h case   11:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A56F8h case   11:*/		return 0x821A56FC;
		  /* 821A56FCh */ case   12:  		/* bc 4, CR6_EQ, 8 */
		/* 821A56FCh case   12:*/		if ( !regs.CR[6].eq ) { return 0x821A5704;  }
		/* 821A56FCh case   12:*/		return 0x821A5700;
	}
	return 0x821A5700;
} // Block from 821A56CCh-821A5700h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A5700h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5700( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5700) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5700);
		  /* 821A5700h */ case    0:  		/* li R11, 1 */
		/* 821A5700h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A5700h case    0:*/		return 0x821A5704;
	}
	return 0x821A5704;
} // Block from 821A5700h-821A5704h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5704h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5704( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5704) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5704);
		  /* 821A5704h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A5704h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A5704h case    0:*/		return 0x821A5708;
		  /* 821A5708h */ case    1:  		/* bc 4, CR0_EQ, 80 */
		/* 821A5708h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821A5758;  }
		/* 821A5708h case    1:*/		return 0x821A570C;
		  /* 821A570Ch */ case    2:  		/* lwz R11, <#[R24 + 8]> */
		/* 821A570Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821A570Ch case    2:*/		return 0x821A5710;
		  /* 821A5710h */ case    3:  		/* rlwinm. R9, R11, 9, 31, 31 */
		/* 821A5710h case    3:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R9,regs.R11);
		/* 821A5710h case    3:*/		return 0x821A5714;
		  /* 821A5714h */ case    4:  		/* bc 4, CR0_EQ, 68 */
		/* 821A5714h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A5758;  }
		/* 821A5714h case    4:*/		return 0x821A5718;
		  /* 821A5718h */ case    5:  		/* rlwinm. R9, R10, 9, 31, 31 */
		/* 821A5718h case    5:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R9,regs.R10);
		/* 821A5718h case    5:*/		return 0x821A571C;
		  /* 821A571Ch */ case    6:  		/* bc 4, CR0_EQ, 60 */
		/* 821A571Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A5758;  }
		/* 821A571Ch case    6:*/		return 0x821A5720;
		  /* 821A5720h */ case    7:  		/* rlwinm. R9, R21, 0, 27, 30 */
		/* 821A5720h case    7:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R9,regs.R21);
		/* 821A5720h case    7:*/		return 0x821A5724;
		  /* 821A5724h */ case    8:  		/* bc 4, CR0_EQ, 52 */
		/* 821A5724h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821A5758;  }
		/* 821A5724h case    8:*/		return 0x821A5728;
		  /* 821A5728h */ case    9:  		/* rlwinm R11, R11, 0, 15, 17 */
		/* 821A5728h case    9:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821A5728h case    9:*/		return 0x821A572C;
		  /* 821A572Ch */ case   10:  		/* rlwinm R10, R10, 0, 15, 17 */
		/* 821A572Ch case   10:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R10,regs.R10);
		/* 821A572Ch case   10:*/		return 0x821A5730;
		  /* 821A5730h */ case   11:  		/* cmplw CR6, R10, R11 */
		/* 821A5730h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A5730h case   11:*/		return 0x821A5734;
		  /* 821A5734h */ case   12:  		/* bc 12, CR6_GT, 36 */
		/* 821A5734h case   12:*/		if ( regs.CR[6].gt ) { return 0x821A5758;  }
		/* 821A5734h case   12:*/		return 0x821A5738;
	}
	return 0x821A5738;
} // Block from 821A5704h-821A5738h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A5738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5738);
		  /* 821A5738h */ case    0:  		/* addi R7, R1, 84 */
		/* 821A5738h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x54);
		/* 821A5738h case    0:*/		return 0x821A573C;
		  /* 821A573Ch */ case    1:  		/* addi R6, R1, 80 */
		/* 821A573Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x50);
		/* 821A573Ch case    1:*/		return 0x821A5740;
		  /* 821A5740h */ case    2:  		/* mr R5, R28 */
		/* 821A5740h case    2:*/		regs.R5 = regs.R28;
		/* 821A5740h case    2:*/		return 0x821A5744;
		  /* 821A5744h */ case    3:  		/* mr R4, R31 */
		/* 821A5744h case    3:*/		regs.R4 = regs.R31;
		/* 821A5744h case    3:*/		return 0x821A5748;
		  /* 821A5748h */ case    4:  		/* mr R3, R25 */
		/* 821A5748h case    4:*/		regs.R3 = regs.R25;
		/* 821A5748h case    4:*/		return 0x821A574C;
		  /* 821A574Ch */ case    5:  		/* bl -37300 */
		/* 821A574Ch case    5:*/		regs.LR = 0x821A5750; return 0x8219C598;
		/* 821A574Ch case    5:*/		return 0x821A5750;
		  /* 821A5750h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A5750h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A5750h case    6:*/		return 0x821A5754;
		  /* 821A5754h */ case    7:  		/* bc 4, CR0_EQ, 108 */
		/* 821A5754h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821A57C0;  }
		/* 821A5754h case    7:*/		return 0x821A5758;
	}
	return 0x821A5758;
} // Block from 821A5738h-821A5758h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A5758h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5758( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5758) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5758);
		  /* 821A5758h */ case    0:  		/* cmplwi CR6, R29, 0 */
		/* 821A5758h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A5758h case    0:*/		return 0x821A575C;
		  /* 821A575Ch */ case    1:  		/* bc 4, CR6_EQ, 40 */
		/* 821A575Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A5784;  }
		/* 821A575Ch case    1:*/		return 0x821A5760;
		  /* 821A5760h */ case    2:  		/* rlwinm. R11, R20, 0, 24, 31 */
		/* 821A5760h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R20);
		/* 821A5760h case    2:*/		return 0x821A5764;
		  /* 821A5764h */ case    3:  		/* bc 12, CR0_EQ, 348 */
		/* 821A5764h case    3:*/		if ( regs.CR[0].eq ) { return 0x821A58C0;  }
		/* 821A5764h case    3:*/		return 0x821A5768;
		  /* 821A5768h */ case    4:  		/* mr R7, R28 */
		/* 821A5768h case    4:*/		regs.R7 = regs.R28;
		/* 821A5768h case    4:*/		return 0x821A576C;
		  /* 821A576Ch */ case    5:  		/* mr R6, R28 */
		/* 821A576Ch case    5:*/		regs.R6 = regs.R28;
		/* 821A576Ch case    5:*/		return 0x821A5770;
		  /* 821A5770h */ case    6:  		/* mr R5, R24 */
		/* 821A5770h case    6:*/		regs.R5 = regs.R24;
		/* 821A5770h case    6:*/		return 0x821A5774;
		  /* 821A5774h */ case    7:  		/* li R4, 0 */
		/* 821A5774h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A5774h case    7:*/		return 0x821A5778;
		  /* 821A5778h */ case    8:  		/* mr R3, R25 */
		/* 821A5778h case    8:*/		regs.R3 = regs.R25;
		/* 821A5778h case    8:*/		return 0x821A577C;
		  /* 821A577Ch */ case    9:  		/* bl -30916 */
		/* 821A577Ch case    9:*/		regs.LR = 0x821A5780; return 0x8219DEB8;
		/* 821A577Ch case    9:*/		return 0x821A5780;
		  /* 821A5780h */ case   10:  		/* mr R29, R3 */
		/* 821A5780h case   10:*/		regs.R29 = regs.R3;
		/* 821A5780h case   10:*/		return 0x821A5784;
	}
	return 0x821A5784;
} // Block from 821A5758h-821A5784h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A5784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5784);
		  /* 821A5784h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A5784h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A5784h case    0:*/		return 0x821A5788;
		  /* 821A5788h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A5788h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A5788h case    1:*/		return 0x821A578C;
		  /* 821A578Ch */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A578Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A578Ch case    2:*/		return 0x821A5790;
	}
	return 0x821A5790;
} // Block from 821A5784h-821A5790h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5790h
// Function '?ReplaceCombinedComponent@Compiler@D3DXShader@@AAAXPAVInstruction@2@W4Component@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5790);
		  /* 821A5790h */ case    0:  		/* b 12 */
		/* 821A5790h case    0:*/		return 0x821A579C;
		/* 821A5790h case    0:*/		return 0x821A5794;
		  /* 821A5794h */ case    1:  		/* addi R11, R10, 8 */
		/* 821A5794h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A5794h case    1:*/		return 0x821A5798;
		  /* 821A5798h */ case    2:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A5798h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A5798h case    2:*/		return 0x821A579C;
	}
	return 0x821A579C;
} // Block from 821A5790h-821A579Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A579Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A579C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A579C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A579C);
		  /* 821A579Ch */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A579Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A579Ch case    0:*/		return 0x821A57A0;
		  /* 821A57A0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A57A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A5794;  }
		/* 821A57A0h case    1:*/		return 0x821A57A4;
		  /* 821A57A4h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A57A4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A57A4h case    2:*/		return 0x821A57A8;
		  /* 821A57A8h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A57A8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A57A8h case    3:*/		return 0x821A57AC;
		  /* 821A57ACh */ case    4:  		/* lwz R11, <#[R29 + 4]> */
		/* 821A57ACh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821A57ACh case    4:*/		return 0x821A57B0;
		  /* 821A57B0h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821A57B0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A57B0h case    5:*/		return 0x821A57B4;
		  /* 821A57B4h */ case    6:  		/* stw R31, <#[R29 + 4]> */
		/* 821A57B4h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000004) );
		/* 821A57B4h case    6:*/		return 0x821A57B8;
		  /* 821A57B8h */ case    7:  		/* stw R29, <#[R31 + 12]> */
		/* 821A57B8h case    7:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A57B8h case    7:*/		return 0x821A57BC;
		  /* 821A57BCh */ case    8:  		/* b 256 */
		/* 821A57BCh case    8:*/		return 0x821A58BC;
		/* 821A57BCh case    8:*/		return 0x821A57C0;
	}
	return 0x821A57C0;
} // Block from 821A579Ch-821A57C0h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A57C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A57C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A57C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A57C0);
		  /* 821A57C0h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A57C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A57C0h case    0:*/		return 0x821A57C4;
		  /* 821A57C4h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A57C4h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A57C4h case    1:*/		return 0x821A57C8;
		  /* 821A57C8h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A57C8h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A57C8h case    2:*/		return 0x821A57CC;
		  /* 821A57CCh */ case    3:  		/* b 12 */
		/* 821A57CCh case    3:*/		return 0x821A57D8;
		/* 821A57CCh case    3:*/		return 0x821A57D0;
		  /* 821A57D0h */ case    4:  		/* addi R11, R10, 8 */
		/* 821A57D0h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A57D0h case    4:*/		return 0x821A57D4;
		  /* 821A57D4h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A57D4h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A57D4h case    5:*/		return 0x821A57D8;
	}
	return 0x821A57D8;
} // Block from 821A57C0h-821A57D8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A57D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A57D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A57D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A57D8);
		  /* 821A57D8h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A57D8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A57D8h case    0:*/		return 0x821A57DC;
		  /* 821A57DCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A57DCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A57D0;  }
		/* 821A57DCh case    1:*/		return 0x821A57E0;
		  /* 821A57E0h */ case    2:  		/* lwz R9, <#[R31 + 8]> */
		/* 821A57E0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R31 + 0x00000008) );
		/* 821A57E0h case    2:*/		return 0x821A57E4;
		  /* 821A57E4h */ case    3:  		/* lwz R10, <#[R1 + 80]> */
		/* 821A57E4h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821A57E4h case    3:*/		return 0x821A57E8;
		  /* 821A57E8h */ case    4:  		/* rlwinm R8, R10, 0, 27, 31 */
		/* 821A57E8h case    4:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R8,regs.R10);
		/* 821A57E8h case    4:*/		return 0x821A57EC;
		  /* 821A57ECh */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821A57ECh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A57ECh case    5:*/		return 0x821A57F0;
		  /* 821A57F0h */ case    6:  		/* stw R9, <#[R11]> */
		/* 821A57F0h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A57F0h case    6:*/		return 0x821A57F4;
		  /* 821A57F4h */ case    7:  		/* lwz R11, <#[R23 + 4]> */
		/* 821A57F4h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000004) );
		/* 821A57F4h case    7:*/		return 0x821A57F8;
		  /* 821A57F8h */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 821A57F8h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A57F8h case    8:*/		return 0x821A57FC;
		  /* 821A57FCh */ case    9:  		/* stw R31, <#[R23 + 4]> */
		/* 821A57FCh case    9:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R23 + 0x00000004) );
		/* 821A57FCh case    9:*/		return 0x821A5800;
		  /* 821A5800h */ case   10:  		/* stw R23, <#[R31 + 12]> */
		/* 821A5800h case   10:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A5800h case   10:*/		return 0x821A5804;
		  /* 821A5804h */ case   11:  		/* lwz R11, <#[R28]> */
		/* 821A5804h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A5804h case   11:*/		return 0x821A5808;
		  /* 821A5808h */ case   12:  		/* lwz R10, <#[R31]> */
		/* 821A5808h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5808h case   12:*/		return 0x821A580C;
		  /* 821A580Ch */ case   13:  		/* mr R9, R10 */
		/* 821A580Ch case   13:*/		regs.R9 = regs.R10;
		/* 821A580Ch case   13:*/		return 0x821A5810;
		  /* 821A5810h */ case   14:  		/* rlwinm R9, R9, 27, 24, 31 */
		/* 821A5810h case   14:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R9,regs.R9);
		/* 821A5810h case   14:*/		return 0x821A5814;
		  /* 821A5814h */ case   15:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821A5814h case   15:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821A5814h case   15:*/		return 0x821A5818;
		  /* 821A5818h */ case   16:  		/* rlwinm R7, R9, 27, 29, 30 */
		/* 821A5818h case   16:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R7,regs.R9);
		/* 821A5818h case   16:*/		return 0x821A581C;
		  /* 821A581Ch */ case   17:  		/* rlwinm R6, R9, 29, 29, 30 */
		/* 821A581Ch case   17:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R6,regs.R9);
		/* 821A581Ch case   17:*/		return 0x821A5820;
		  /* 821A5820h */ case   18:  		/* srw R7, R11, R7 */
		/* 821A5820h case   18:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821A5820h case   18:*/		return 0x821A5824;
		  /* 821A5824h */ case   19:  		/* srw R6, R11, R6 */
		/* 821A5824h case   19:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R11,regs.R6);
		/* 821A5824h case   19:*/		return 0x821A5828;
		  /* 821A5828h */ case   20:  		/* rlwimi R6, R7, 2, 28, 29 */
		/* 821A5828h case   20:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R6,regs.R7);
		/* 821A5828h case   20:*/		return 0x821A582C;
		  /* 821A582Ch */ case   21:  		/* rlwinm R7, R9, 31, 29, 30 */
		/* 821A582Ch case   21:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R7,regs.R9);
		/* 821A582Ch case   21:*/		return 0x821A5830;
		  /* 821A5830h */ case   22:  		/* rlwinm R6, R6, 0, 28, 31 */
		/* 821A5830h case   22:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R6,regs.R6);
		/* 821A5830h case   22:*/		return 0x821A5834;
		  /* 821A5834h */ case   23:  		/* srw R7, R11, R7 */
		/* 821A5834h case   23:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R11,regs.R7);
		/* 821A5834h case   23:*/		return 0x821A5838;
		  /* 821A5838h */ case   24:  		/* rlwinm R9, R9, 1, 29, 30 */
		/* 821A5838h case   24:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R9,regs.R9);
		/* 821A5838h case   24:*/		return 0x821A583C;
		  /* 821A583Ch */ case   25:  		/* rlwimi R7, R6, 2, 0, 29 */
		/* 821A583Ch case   25:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R6);
		/* 821A583Ch case   25:*/		return 0x821A5840;
		  /* 821A5840h */ case   26:  		/* srw R11, R11, R9 */
		/* 821A5840h case   26:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A5840h case   26:*/		return 0x821A5844;
		  /* 821A5844h */ case   27:  		/* rlwimi R11, R7, 2, 0, 29 */
		/* 821A5844h case   27:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R7);
		/* 821A5844h case   27:*/		return 0x821A5848;
		  /* 821A5848h */ case   28:  		/* rlwinm R10, R10, 0, 0, 18 */
		/* 821A5848h case   28:*/		cpu::op::rlwinm<0,0,0,18>(regs,&regs.R10,regs.R10);
		/* 821A5848h case   28:*/		return 0x821A584C;
		  /* 821A584Ch */ case   29:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821A584Ch case   29:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821A584Ch case   29:*/		return 0x821A5850;
		  /* 821A5850h */ case   30:  		/* or R11, R11, R10 */
		/* 821A5850h case   30:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A5850h case   30:*/		return 0x821A5854;
		  /* 821A5854h */ case   31:  		/* or R11, R11, R8 */
		/* 821A5854h case   31:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821A5854h case   31:*/		return 0x821A5858;
		  /* 821A5858h */ case   32:  		/* stw R11, <#[R31]> */
		/* 821A5858h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5858h case   32:*/		return 0x821A585C;
		  /* 821A585Ch */ case   33:  		/* bc 12, CR6_EQ, 16 */
		/* 821A585Ch case   33:*/		if ( regs.CR[6].eq ) { return 0x821A586C;  }
		/* 821A585Ch case   33:*/		return 0x821A5860;
		  /* 821A5860h */ case   34:  		/* lwz R11, <#[R30 + 16]> */
		/* 821A5860h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821A5860h case   34:*/		return 0x821A5864;
		  /* 821A5864h */ case   35:  		/* rlwinm R11, R11, 0, 13, 11 */
		/* 821A5864h case   35:*/		cpu::op::rlwinm<0,0,13,11>(regs,&regs.R11,regs.R11);
		/* 821A5864h case   35:*/		return 0x821A5868;
		  /* 821A5868h */ case   36:  		/* stw R11, <#[R30 + 16]> */
		/* 821A5868h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000010) );
		/* 821A5868h case   36:*/		return 0x821A586C;
	}
	return 0x821A586C;
} // Block from 821A57D8h-821A586Ch (37 instructions)

//////////////////////////////////////////////////////
// Block at 821A586Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A586C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A586C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A586C);
		  /* 821A586Ch */ case    0:  		/* rlwinm. R11, R21, 0, 28, 28 */
		/* 821A586Ch case    0:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R21);
		/* 821A586Ch case    0:*/		return 0x821A5870;
		  /* 821A5870h */ case    1:  		/* bc 12, CR0_EQ, 52 */
		/* 821A5870h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A58A4;  }
		/* 821A5870h case    1:*/		return 0x821A5874;
		  /* 821A5874h */ case    2:  		/* lwz R11, <#[R1 + 84]> */
		/* 821A5874h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821A5874h case    2:*/		return 0x821A5878;
		  /* 821A5878h */ case    3:  		/* rlwinm. R11, R11, 0, 28, 28 */
		/* 821A5878h case    3:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R11);
		/* 821A5878h case    3:*/		return 0x821A587C;
		  /* 821A587Ch */ case    4:  		/* bc 4, CR0_EQ, 40 */
		/* 821A587Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A58A4;  }
		/* 821A587Ch case    4:*/		return 0x821A5880;
		  /* 821A5880h */ case    5:  		/* mr R3, R24 */
		/* 821A5880h case    5:*/		regs.R3 = regs.R24;
		/* 821A5880h case    5:*/		return 0x821A5884;
		  /* 821A5884h */ case    6:  		/* bl -187756 */
		/* 821A5884h case    6:*/		regs.LR = 0x821A5888; return 0x82177B18;
		/* 821A5884h case    6:*/		return 0x821A5888;
		  /* 821A5888h */ case    7:  		/* mr R4, R3 */
		/* 821A5888h case    7:*/		regs.R4 = regs.R3;
		/* 821A5888h case    7:*/		return 0x821A588C;
		  /* 821A588Ch */ case    8:  		/* li R5, 0 */
		/* 821A588Ch case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A588Ch case    8:*/		return 0x821A5890;
		  /* 821A5890h */ case    9:  		/* mr R3, R25 */
		/* 821A5890h case    9:*/		regs.R3 = regs.R25;
		/* 821A5890h case    9:*/		return 0x821A5894;
		  /* 821A5894h */ case   10:  		/* bl -217412 */
		/* 821A5894h case   10:*/		regs.LR = 0x821A5898; return 0x82170750;
		/* 821A5894h case   10:*/		return 0x821A5898;
		  /* 821A5898h */ case   11:  		/* mr R4, R3 */
		/* 821A5898h case   11:*/		regs.R4 = regs.R3;
		/* 821A5898h case   11:*/		return 0x821A589C;
		  /* 821A589Ch */ case   12:  		/* mr R3, R30 */
		/* 821A589Ch case   12:*/		regs.R3 = regs.R30;
		/* 821A589Ch case   12:*/		return 0x821A58A0;
		  /* 821A58A0h */ case   13:  		/* bl -186072 */
		/* 821A58A0h case   13:*/		regs.LR = 0x821A58A4; return 0x821781C8;
		/* 821A58A0h case   13:*/		return 0x821A58A4;
	}
	return 0x821A58A4;
} // Block from 821A586Ch-821A58A4h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A58A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A58A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A58A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A58A4);
		  /* 821A58A4h */ case    0:  		/* mr R4, R30 */
		/* 821A58A4h case    0:*/		regs.R4 = regs.R30;
		/* 821A58A4h case    0:*/		return 0x821A58A8;
		  /* 821A58A8h */ case    1:  		/* mr R3, R25 */
		/* 821A58A8h case    1:*/		regs.R3 = regs.R25;
		/* 821A58A8h case    1:*/		return 0x821A58AC;
		  /* 821A58ACh */ case    2:  		/* bl -19804 */
		/* 821A58ACh case    2:*/		regs.LR = 0x821A58B0; return 0x821A0B50;
		/* 821A58ACh case    2:*/		return 0x821A58B0;
		  /* 821A58B0h */ case    3:  		/* mr R4, R30 */
		/* 821A58B0h case    3:*/		regs.R4 = regs.R30;
		/* 821A58B0h case    3:*/		return 0x821A58B4;
		  /* 821A58B4h */ case    4:  		/* mr R3, R25 */
		/* 821A58B4h case    4:*/		regs.R3 = regs.R25;
		/* 821A58B4h case    4:*/		return 0x821A58B8;
		  /* 821A58B8h */ case    5:  		/* bl -19968 */
		/* 821A58B8h case    5:*/		regs.LR = 0x821A58BC; return 0x821A0AB8;
		/* 821A58B8h case    5:*/		return 0x821A58BC;
	}
	return 0x821A58BC;
} // Block from 821A58A4h-821A58BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A58BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A58BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A58BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A58BC);
		  /* 821A58BCh */ case    0:  		/* li R27, 1 */
		/* 821A58BCh case    0:*/		cpu::op::li<0>(regs,&regs.R27,0x1);
		/* 821A58BCh case    0:*/		return 0x821A58C0;
	}
	return 0x821A58C0;
} // Block from 821A58BCh-821A58C0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A58C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A58C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A58C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A58C0);
		  /* 821A58C0h */ case    0:  		/* lwz R11, <#[R26]> */
		/* 821A58C0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821A58C0h case    0:*/		return 0x821A58C4;
		  /* 821A58C4h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A58C4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A58C4h case    1:*/		return 0x821A58C8;
		  /* 821A58C8h */ case    2:  		/* bc 4, CR6_EQ, -576 */
		/* 821A58C8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A5688;  }
		/* 821A58C8h case    2:*/		return 0x821A58CC;
		  /* 821A58CCh */ case    3:  		/* addi R26, R31, 8 */
		/* 821A58CCh case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R31,0x8);
		/* 821A58CCh case    3:*/		return 0x821A58D0;
		  /* 821A58D0h */ case    4:  		/* b -584 */
		/* 821A58D0h case    4:*/		return 0x821A5688;
		/* 821A58D0h case    4:*/		return 0x821A58D4;
	}
	return 0x821A58D4;
} // Block from 821A58C0h-821A58D4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A58D4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A58D4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A58D4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A58D4);
		  /* 821A58D4h */ case    0:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821A58D4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821A58D4h case    0:*/		return 0x821A58D8;
		  /* 821A58D8h */ case    1:  		/* bc 12, CR0_EQ, 232 */
		/* 821A58D8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A59C0;  }
		/* 821A58D8h case    1:*/		return 0x821A58DC;
		  /* 821A58DCh */ case    2:  		/* cmplwi CR6, R29, 0 */
		/* 821A58DCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A58DCh case    2:*/		return 0x821A58E0;
		  /* 821A58E0h */ case    3:  		/* bc 12, CR6_EQ, 200 */
		/* 821A58E0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A59A8;  }
		/* 821A58E0h case    3:*/		return 0x821A58E4;
		  /* 821A58E4h */ case    4:  		/* lwz R31, <#[R24]> */
		/* 821A58E4h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 821A58E4h case    4:*/		return 0x821A58E8;
		  /* 821A58E8h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821A58E8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A58E8h case    5:*/		return 0x821A58EC;
		  /* 821A58ECh */ case    6:  		/* bc 12, CR6_EQ, 36 */
		/* 821A58ECh case    6:*/		if ( regs.CR[6].eq ) { return 0x821A5910;  }
		/* 821A58ECh case    6:*/		return 0x821A58F0;
		  /* 821A58F0h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821A58F0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A58F0h case    7:*/		return 0x821A58F4;
		  /* 821A58F4h */ case    8:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821A58F4h case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821A58F4h case    8:*/		return 0x821A58F8;
		  /* 821A58F8h */ case    9:  		/* bc 4, CR0_EQ, 16 */
		/* 821A58F8h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821A5908;  }
		/* 821A58F8h case    9:*/		return 0x821A58FC;
		  /* 821A58FCh */ case   10:  		/* mr R4, R31 */
		/* 821A58FCh case   10:*/		regs.R4 = regs.R31;
		/* 821A58FCh case   10:*/		return 0x821A5900;
		  /* 821A5900h */ case   11:  		/* mr R3, R29 */
		/* 821A5900h case   11:*/		regs.R3 = regs.R29;
		/* 821A5900h case   11:*/		return 0x821A5904;
		  /* 821A5904h */ case   12:  		/* bl -186172 */
		/* 821A5904h case   12:*/		regs.LR = 0x821A5908; return 0x821781C8;
		/* 821A5904h case   12:*/		return 0x821A5908;
	}
	return 0x821A5908;
} // Block from 821A58D4h-821A5908h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A5908h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5908( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5908) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5908);
		  /* 821A5908h */ case    0:  		/* lwz R31, <#[R31 + 4]> */
		/* 821A5908h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000004) );
		/* 821A5908h case    0:*/		return 0x821A590C;
		  /* 821A590Ch */ case    1:  		/* b -36 */
		/* 821A590Ch case    1:*/		return 0x821A58E8;
		/* 821A590Ch case    1:*/		return 0x821A5910;
	}
	return 0x821A5910;
} // Block from 821A5908h-821A5910h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A5910h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5910( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5910) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5910);
		  /* 821A5910h */ case    0:  		/* mr R3, R29 */
		/* 821A5910h case    0:*/		regs.R3 = regs.R29;
		/* 821A5910h case    0:*/		return 0x821A5914;
		  /* 821A5914h */ case    1:  		/* bl -185756 */
		/* 821A5914h case    1:*/		regs.LR = 0x821A5918; return 0x82178378;
		/* 821A5914h case    1:*/		return 0x821A5918;
		  /* 821A5918h */ case    2:  		/* lwz R11, <#[R29 + 8]> */
		/* 821A5918h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A5918h case    2:*/		return 0x821A591C;
		  /* 821A591Ch */ case    3:  		/* oris R11, R11, 256 */
		/* 821A591Ch case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A591Ch case    3:*/		return 0x821A5920;
		  /* 821A5920h */ case    4:  		/* stw R11, <#[R29 + 8]> */
		/* 821A5920h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A5920h case    4:*/		return 0x821A5924;
		  /* 821A5924h */ case    5:  		/* lwz R10, <#[R24 + 8]> */
		/* 821A5924h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000008) );
		/* 821A5924h case    5:*/		return 0x821A5928;
		  /* 821A5928h */ case    6:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A5928h case    6:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A5928h case    6:*/		return 0x821A592C;
		  /* 821A592Ch */ case    7:  		/* bc 12, CR0_EQ, 112 */
		/* 821A592Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821A599C;  }
		/* 821A592Ch case    7:*/		return 0x821A5930;
		  /* 821A5930h */ case    8:  		/* oris R11, R11, 128 */
		/* 821A5930h case    8:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A5930h case    8:*/		return 0x821A5934;
		  /* 821A5934h */ case    9:  		/* mr R3, R24 */
		/* 821A5934h case    9:*/		regs.R3 = regs.R24;
		/* 821A5934h case    9:*/		return 0x821A5938;
		  /* 821A5938h */ case   10:  		/* stw R11, <#[R29 + 8]> */
		/* 821A5938h case   10:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A5938h case   10:*/		return 0x821A593C;
		  /* 821A593Ch */ case   11:  		/* bl -139348 */
		/* 821A593Ch case   11:*/		regs.LR = 0x821A5940; return 0x821838E8;
		/* 821A593Ch case   11:*/		return 0x821A5940;
		  /* 821A5940h */ case   12:  		/* sth R3, <#[R29 + 18]> */
		/* 821A5940h case   12:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R29 + 0x00000012) );
		/* 821A5940h case   12:*/		return 0x821A5944;
		  /* 821A5944h */ case   13:  		/* lwz R3, <#[R25 + 660]> */
		/* 821A5944h case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R25 + 0x00000294) );
		/* 821A5944h case   13:*/		return 0x821A5948;
		  /* 821A5948h */ case   14:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A5948h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A5948h case   14:*/		return 0x821A594C;
		  /* 821A594Ch */ case   15:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A594Ch case   15:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A594Ch case   15:*/		return 0x821A5950;
		  /* 821A5950h */ case   16:  		/* bc 4, CR0_EQ, 40 */
		/* 821A5950h case   16:*/		if ( !regs.CR[0].eq ) { return 0x821A5978;  }
		/* 821A5950h case   16:*/		return 0x821A5954;
		  /* 821A5954h */ case   17:  		/* lwz R11, <#[R3]> */
		/* 821A5954h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A5954h case   17:*/		return 0x821A5958;
		  /* 821A5958h */ case   18:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A5958h case   18:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A5958h case   18:*/		return 0x821A595C;
		  /* 821A595Ch */ case   19:  		/* addic. R11, R11, -4 */
		/* 821A595Ch case   19:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A595Ch case   19:*/		return 0x821A5960;
		  /* 821A5960h */ case   20:  		/* bc 12, CR0_EQ, 24 */
		/* 821A5960h case   20:*/		if ( regs.CR[0].eq ) { return 0x821A5978;  }
		/* 821A5960h case   20:*/		return 0x821A5964;
		  /* 821A5964h */ case   21:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A5964h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5964h case   21:*/		return 0x821A5968;
		  /* 821A5968h */ case   22:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A5968h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A5968h case   22:*/		return 0x821A596C;
		  /* 821A596Ch */ case   23:  		/* addi R10, R10, 1 */
		/* 821A596Ch case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A596Ch case   23:*/		return 0x821A5970;
		  /* 821A5970h */ case   24:  		/* cmplw CR6, R10, R9 */
		/* 821A5970h case   24:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A5970h case   24:*/		return 0x821A5974;
		  /* 821A5974h */ case   25:  		/* bc 4, CR6_GT, 16 */
		/* 821A5974h case   25:*/		if ( !regs.CR[6].gt ) { return 0x821A5984;  }
		/* 821A5974h case   25:*/		return 0x821A5978;
	}
	return 0x821A5978;
} // Block from 821A5910h-821A5978h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821A5978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5978);
		  /* 821A5978h */ case    0:  		/* li R4, 1 */
		/* 821A5978h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A5978h case    0:*/		return 0x821A597C;
		  /* 821A597Ch */ case    1:  		/* bl -100532 */
		/* 821A597Ch case    1:*/		regs.LR = 0x821A5980; return 0x8218D0C8;
		/* 821A597Ch case    1:*/		return 0x821A5980;
		  /* 821A5980h */ case    2:  		/* mr R11, R3 */
		/* 821A5980h case    2:*/		regs.R11 = regs.R3;
		/* 821A5980h case    2:*/		return 0x821A5984;
	}
	return 0x821A5984;
} // Block from 821A5978h-821A5984h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5984h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5984( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5984) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5984);
		  /* 821A5984h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A5984h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5984h case    0:*/		return 0x821A5988;
		  /* 821A5988h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A5988h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A5988h case    1:*/		return 0x821A598C;
		  /* 821A598Ch */ case    2:  		/* addi R8, R10, 1 */
		/* 821A598Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A598Ch case    2:*/		return 0x821A5990;
		  /* 821A5990h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A5990h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A5990h case    3:*/		return 0x821A5994;
		  /* 821A5994h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A5994h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5994h case    4:*/		return 0x821A5998;
		  /* 821A5998h */ case    5:  		/* stwx R29, <#[R10 + R11]> */
		/* 821A5998h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A5998h case    5:*/		return 0x821A599C;
	}
	return 0x821A599C;
} // Block from 821A5984h-821A599Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A599Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A599C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A599C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A599C);
		  /* 821A599Ch */ case    0:  		/* mr R4, R29 */
		/* 821A599Ch case    0:*/		regs.R4 = regs.R29;
		/* 821A599Ch case    0:*/		return 0x821A59A0;
		  /* 821A59A0h */ case    1:  		/* mr R3, R25 */
		/* 821A59A0h case    1:*/		regs.R3 = regs.R25;
		/* 821A59A0h case    1:*/		return 0x821A59A4;
		  /* 821A59A4h */ case    2:  		/* bl -20204 */
		/* 821A59A4h case    2:*/		regs.LR = 0x821A59A8; return 0x821A0AB8;
		/* 821A59A4h case    2:*/		return 0x821A59A8;
	}
	return 0x821A59A8;
} // Block from 821A599Ch-821A59A8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A59A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A59A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A59A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A59A8);
		  /* 821A59A8h */ case    0:  		/* mr R4, R24 */
		/* 821A59A8h case    0:*/		regs.R4 = regs.R24;
		/* 821A59A8h case    0:*/		return 0x821A59AC;
		  /* 821A59ACh */ case    1:  		/* mr R3, R25 */
		/* 821A59ACh case    1:*/		regs.R3 = regs.R25;
		/* 821A59ACh case    1:*/		return 0x821A59B0;
		  /* 821A59B0h */ case    2:  		/* bl -20216 */
		/* 821A59B0h case    2:*/		regs.LR = 0x821A59B4; return 0x821A0AB8;
		/* 821A59B0h case    2:*/		return 0x821A59B4;
		  /* 821A59B4h */ case    3:  		/* mr R4, R23 */
		/* 821A59B4h case    3:*/		regs.R4 = regs.R23;
		/* 821A59B4h case    3:*/		return 0x821A59B8;
		  /* 821A59B8h */ case    4:  		/* mr R3, R25 */
		/* 821A59B8h case    4:*/		regs.R3 = regs.R25;
		/* 821A59B8h case    4:*/		return 0x821A59BC;
		  /* 821A59BCh */ case    5:  		/* bl -20228 */
		/* 821A59BCh case    5:*/		regs.LR = 0x821A59C0; return 0x821A0AB8;
		/* 821A59BCh case    5:*/		return 0x821A59C0;
	}
	return 0x821A59C0;
} // Block from 821A59A8h-821A59C0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A59C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A59C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A59C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A59C0);
		  /* 821A59C0h */ case    0:  		/* addi R1, R1, 192 */
		/* 821A59C0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xC0);
		/* 821A59C0h case    0:*/		return 0x821A59C4;
		  /* 821A59C4h */ case    1:  		/* b -1132348 */
		/* 821A59C4h case    1:*/		return 0x82091288;
		/* 821A59C4h case    1:*/		return 0x821A59C8;
	}
	return 0x821A59C8;
} // Block from 821A59C0h-821A59C8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A59C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A59C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A59C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A59C8);
		  /* 821A59C8h */ case    0:  		/* mfspr R12, LR */
		/* 821A59C8h case    0:*/		regs.R12 = regs.LR;
		/* 821A59C8h case    0:*/		return 0x821A59CC;
		  /* 821A59CCh */ case    1:  		/* bl -1132412 */
		/* 821A59CCh case    1:*/		regs.LR = 0x821A59D0; return 0x82091250;
		/* 821A59CCh case    1:*/		return 0x821A59D0;
		  /* 821A59D0h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821A59D0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821A59D0h case    2:*/		return 0x821A59D4;
		  /* 821A59D4h */ case    3:  		/* lwz R31, <#[R4 + 28]> */
		/* 821A59D4h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x0000001C) );
		/* 821A59D4h case    3:*/		return 0x821A59D8;
		  /* 821A59D8h */ case    4:  		/* mr R28, R3 */
		/* 821A59D8h case    4:*/		regs.R28 = regs.R3;
		/* 821A59D8h case    4:*/		return 0x821A59DC;
		  /* 821A59DCh */ case    5:  		/* mr R27, R4 */
		/* 821A59DCh case    5:*/		regs.R27 = regs.R4;
		/* 821A59DCh case    5:*/		return 0x821A59E0;
		  /* 821A59E0h */ case    6:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821A59E0h case    6:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821A59E0h case    6:*/		return 0x821A59E4;
		  /* 821A59E4h */ case    7:  		/* bc 4, CR0_EQ, 232 */
		/* 821A59E4h case    7:*/		if ( !regs.CR[0].eq ) { return 0x821A5ACC;  }
		/* 821A59E4h case    7:*/		return 0x821A59E8;
		  /* 821A59E8h */ case    8:  		/* cmplwi CR0, R31, 0 */
		/* 821A59E8h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R31,0x00000000);
		/* 821A59E8h case    8:*/		return 0x821A59EC;
		  /* 821A59ECh */ case    9:  		/* bc 12, CR0_EQ, 224 */
		/* 821A59ECh case    9:*/		if ( regs.CR[0].eq ) { return 0x821A5ACC;  }
		/* 821A59ECh case    9:*/		return 0x821A59F0;
		  /* 821A59F0h */ case   10:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A59F0h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A59F0h case   10:*/		return 0x821A59F4;
		  /* 821A59F4h */ case   11:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821A59F4h case   11:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821A59F4h case   11:*/		return 0x821A59F8;
		  /* 821A59F8h */ case   12:  		/* cmplwi CR6, R10, 14208 */
		/* 821A59F8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003780);
		/* 821A59F8h case   12:*/		return 0x821A59FC;
		  /* 821A59FCh */ case   13:  		/* bc 4, CR6_EQ, 184 */
		/* 821A59FCh case   13:*/		if ( !regs.CR[6].eq ) { return 0x821A5AB4;  }
		/* 821A59FCh case   13:*/		return 0x821A5A00;
		  /* 821A5A00h */ case   14:  		/* li R10, 55 */
		/* 821A5A00h case   14:*/		cpu::op::li<0>(regs,&regs.R10,0x37);
		/* 821A5A00h case   14:*/		return 0x821A5A04;
		  /* 821A5A04h */ case   15:  		/* li R29, 0 */
		/* 821A5A04h case   15:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A5A04h case   15:*/		return 0x821A5A08;
		  /* 821A5A08h */ case   16:  		/* rlwimi R11, R10, 8, 18, 24 */
		/* 821A5A08h case   16:*/		cpu::op::rlwimi<0,8,18,24>(regs,&regs.R11,regs.R10);
		/* 821A5A08h case   16:*/		return 0x821A5A0C;
		  /* 821A5A0Ch */ case   17:  		/* addi R30, R31, 44 */
		/* 821A5A0Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x2C);
		/* 821A5A0Ch case   17:*/		return 0x821A5A10;
		  /* 821A5A10h */ case   18:  		/* stw R11, <#[R31 + 8]> */
		/* 821A5A10h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A5A10h case   18:*/		return 0x821A5A14;
		  /* 821A5A14h */ case   19:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A5A14h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A5A14h case   19:*/		return 0x821A5A18;
		  /* 821A5A18h */ case   20:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A5A18h case   20:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A5A18h case   20:*/		return 0x821A5A1C;
		  /* 821A5A1Ch */ case   21:  		/* cmplw CR6, R29, R11 */
		/* 821A5A1Ch case   21:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R11);
		/* 821A5A1Ch case   21:*/		return 0x821A5A20;
		  /* 821A5A20h */ case   22:  		/* bc 4, CR6_LT, 148 */
		/* 821A5A20h case   22:*/		if ( !regs.CR[6].lt ) { return 0x821A5AB4;  }
		/* 821A5A20h case   22:*/		return 0x821A5A24;
		  /* 821A5A24h */ case   23:  		/* lwz R26, <#[R30]> */
		/* 821A5A24h case   23:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R30 + 0x00000000) );
		/* 821A5A24h case   23:*/		return 0x821A5A28;
		  /* 821A5A28h */ case   24:  		/* rlwinm R5, R31, 0, 0, 29 */
		/* 821A5A28h case   24:*/		cpu::op::rlwinm<0,0,0,29>(regs,&regs.R5,regs.R31);
		/* 821A5A28h case   24:*/		return 0x821A5A2C;
		  /* 821A5A2Ch */ case   25:  		/* mr R4, R27 */
		/* 821A5A2Ch case   25:*/		regs.R4 = regs.R27;
		/* 821A5A2Ch case   25:*/		return 0x821A5A30;
		  /* 821A5A30h */ case   26:  		/* mr R6, R26 */
		/* 821A5A30h case   26:*/		regs.R6 = regs.R26;
		/* 821A5A30h case   26:*/		return 0x821A5A34;
		  /* 821A5A34h */ case   27:  		/* mr R3, R28 */
		/* 821A5A34h case   27:*/		regs.R3 = regs.R28;
		/* 821A5A34h case   27:*/		return 0x821A5A38;
		  /* 821A5A38h */ case   28:  		/* bl 541248 */
		/* 821A5A38h case   28:*/		regs.LR = 0x821A5A3C; return 0x82229C78;
		/* 821A5A38h case   28:*/		return 0x821A5A3C;
		  /* 821A5A3Ch */ case   29:  		/* li R11, 0 */
		/* 821A5A3Ch case   29:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A5A3Ch case   29:*/		return 0x821A5A40;
		  /* 821A5A40h */ case   30:  		/* lwz R3, <#[R28 + 656]> */
		/* 821A5A40h case   30:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + 0x00000290) );
		/* 821A5A40h case   30:*/		return 0x821A5A44;
		  /* 821A5A44h */ case   31:  		/* stw R11, <#[R1 + 84]> */
		/* 821A5A44h case   31:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821A5A44h case   31:*/		return 0x821A5A48;
		  /* 821A5A48h */ case   32:  		/* lwz R10, <#[R3 + 4]> */
		/* 821A5A48h case   32:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000004) );
		/* 821A5A48h case   32:*/		return 0x821A5A4C;
		  /* 821A5A4Ch */ case   33:  		/* rlwinm. R10, R10, 0, 31, 31 */
		/* 821A5A4Ch case   33:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R10);
		/* 821A5A4Ch case   33:*/		return 0x821A5A50;
		  /* 821A5A50h */ case   34:  		/* lwz R11, <#[R26 + 12]> */
		/* 821A5A50h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x0000000C) );
		/* 821A5A50h case   34:*/		return 0x821A5A54;
		  /* 821A5A54h */ case   35:  		/* stw R11, <#[R1 + 80]> */
		/* 821A5A54h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A5A54h case   35:*/		return 0x821A5A58;
		  /* 821A5A58h */ case   36:  		/* bc 4, CR0_EQ, 40 */
		/* 821A5A58h case   36:*/		if ( !regs.CR[0].eq ) { return 0x821A5A80;  }
		/* 821A5A58h case   36:*/		return 0x821A5A5C;
		  /* 821A5A5Ch */ case   37:  		/* lwz R11, <#[R3]> */
		/* 821A5A5Ch case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A5A5Ch case   37:*/		return 0x821A5A60;
		  /* 821A5A60h */ case   38:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A5A60h case   38:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A5A60h case   38:*/		return 0x821A5A64;
		  /* 821A5A64h */ case   39:  		/* addic. R11, R11, -4 */
		/* 821A5A64h case   39:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A5A64h case   39:*/		return 0x821A5A68;
		  /* 821A5A68h */ case   40:  		/* bc 12, CR0_EQ, 24 */
		/* 821A5A68h case   40:*/		if ( regs.CR[0].eq ) { return 0x821A5A80;  }
		/* 821A5A68h case   40:*/		return 0x821A5A6C;
		  /* 821A5A6Ch */ case   41:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A5A6Ch case   41:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5A6Ch case   41:*/		return 0x821A5A70;
		  /* 821A5A70h */ case   42:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A5A70h case   42:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A5A70h case   42:*/		return 0x821A5A74;
		  /* 821A5A74h */ case   43:  		/* addi R10, R10, 1 */
		/* 821A5A74h case   43:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A5A74h case   43:*/		return 0x821A5A78;
		  /* 821A5A78h */ case   44:  		/* cmplw CR6, R10, R9 */
		/* 821A5A78h case   44:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A5A78h case   44:*/		return 0x821A5A7C;
		  /* 821A5A7Ch */ case   45:  		/* bc 4, CR6_GT, 16 */
		/* 821A5A7Ch case   45:*/		if ( !regs.CR[6].gt ) { return 0x821A5A8C;  }
		/* 821A5A7Ch case   45:*/		return 0x821A5A80;
	}
	return 0x821A5A80;
} // Block from 821A59C8h-821A5A80h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821A5A80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5A80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5A80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5A80);
		  /* 821A5A80h */ case    0:  		/* li R4, 1 */
		/* 821A5A80h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A5A80h case    0:*/		return 0x821A5A84;
		  /* 821A5A84h */ case    1:  		/* bl -27596 */
		/* 821A5A84h case    1:*/		regs.LR = 0x821A5A88; return 0x8219EEB8;
		/* 821A5A84h case    1:*/		return 0x821A5A88;
		  /* 821A5A88h */ case    2:  		/* mr R11, R3 */
		/* 821A5A88h case    2:*/		regs.R11 = regs.R3;
		/* 821A5A88h case    2:*/		return 0x821A5A8C;
	}
	return 0x821A5A8C;
} // Block from 821A5A80h-821A5A8Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5A8C);
		  /* 821A5A8Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A5A8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5A8Ch case    0:*/		return 0x821A5A90;
		  /* 821A5A90h */ case    1:  		/* addi R29, R29, 1 */
		/* 821A5A90h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821A5A90h case    1:*/		return 0x821A5A94;
		  /* 821A5A94h */ case    2:  		/* ld R9, <#[R1 + 80]> */
		/* 821A5A94h case    2:*/		cpu::mem::load64( regs, &regs.R9, (uint32)(regs.R1 + 0x00000050) );
		/* 821A5A94h case    2:*/		return 0x821A5A98;
		  /* 821A5A98h */ case    3:  		/* addi R30, R30, 4 */
		/* 821A5A98h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A5A98h case    3:*/		return 0x821A5A9C;
		  /* 821A5A9Ch */ case    4:  		/* addi R8, R10, 2 */
		/* 821A5A9Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x2);
		/* 821A5A9Ch case    4:*/		return 0x821A5AA0;
		  /* 821A5AA0h */ case    5:  		/* addi R7, R10, 1 */
		/* 821A5AA0h case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0x1);
		/* 821A5AA0h case    5:*/		return 0x821A5AA4;
		  /* 821A5AA4h */ case    6:  		/* rlwinm R10, R8, 3, 0, 28 */
		/* 821A5AA4h case    6:*/		cpu::op::rlwinm<0,3,0,28>(regs,&regs.R10,regs.R8);
		/* 821A5AA4h case    6:*/		return 0x821A5AA8;
		  /* 821A5AA8h */ case    7:  		/* stw R7, <#[R11 + 8]> */
		/* 821A5AA8h case    7:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5AA8h case    7:*/		return 0x821A5AAC;
		  /* 821A5AACh */ case    8:  		/* stdx R9, <#[R10 + R11]> */
		/* 821A5AACh case    8:*/		cpu::mem::store64( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A5AACh case    8:*/		return 0x821A5AB0;
		  /* 821A5AB0h */ case    9:  		/* b -156 */
		/* 821A5AB0h case    9:*/		return 0x821A5A14;
		/* 821A5AB0h case    9:*/		return 0x821A5AB4;
	}
	return 0x821A5AB4;
} // Block from 821A5A8Ch-821A5AB4h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A5AB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5AB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5AB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5AB4);
		  /* 821A5AB4h */ case    0:  		/* rlwinm R11, R31, 0, 0, 30 */
		/* 821A5AB4h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R31);
		/* 821A5AB4h case    0:*/		return 0x821A5AB8;
		  /* 821A5AB8h */ case    1:  		/* lwz R31, <#[R11 + 40]> */
		/* 821A5AB8h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000028) );
		/* 821A5AB8h case    1:*/		return 0x821A5ABC;
		  /* 821A5ABCh */ case    2:  		/* rlwinm. R11, R31, 0, 31, 31 */
		/* 821A5ABCh case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R31);
		/* 821A5ABCh case    2:*/		return 0x821A5AC0;
		  /* 821A5AC0h */ case    3:  		/* bc 4, CR0_EQ, 12 */
		/* 821A5AC0h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A5ACC;  }
		/* 821A5AC0h case    3:*/		return 0x821A5AC4;
		  /* 821A5AC4h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821A5AC4h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A5AC4h case    4:*/		return 0x821A5AC8;
		  /* 821A5AC8h */ case    5:  		/* bc 4, CR6_EQ, -216 */
		/* 821A5AC8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A59F0;  }
		/* 821A5AC8h case    5:*/		return 0x821A5ACC;
	}
	return 0x821A5ACC;
} // Block from 821A5AB4h-821A5ACCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A5ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5ACC);
		  /* 821A5ACCh */ case    0:  		/* addi R1, R1, 144 */
		/* 821A5ACCh case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821A5ACCh case    0:*/		return 0x821A5AD0;
		  /* 821A5AD0h */ case    1:  		/* b -1132592 */
		/* 821A5AD0h case    1:*/		return 0x820912A0;
		/* 821A5AD0h case    1:*/		return 0x821A5AD4;
		  /* 821A5AD4h */ case    2:  		/* nop */
		/* 821A5AD4h case    2:*/		cpu::op::nop();
		/* 821A5AD4h case    2:*/		return 0x821A5AD8;
	}
	return 0x821A5AD8;
} // Block from 821A5ACCh-821A5AD8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5AD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5AD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5AD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5AD8);
		  /* 821A5AD8h */ case    0:  		/* mfspr R12, LR */
		/* 821A5AD8h case    0:*/		regs.R12 = regs.LR;
		/* 821A5AD8h case    0:*/		return 0x821A5ADC;
		  /* 821A5ADCh */ case    1:  		/* bl -1132720 */
		/* 821A5ADCh case    1:*/		regs.LR = 0x821A5AE0; return 0x8209122C;
		/* 821A5ADCh case    1:*/		return 0x821A5AE0;
		  /* 821A5AE0h */ case    2:  		/* stwu R1, <#[R1 - 208]> */
		/* 821A5AE0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF30) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF30);
		/* 821A5AE0h case    2:*/		return 0x821A5AE4;
		  /* 821A5AE4h */ case    3:  		/* lwz R11, <#[R5 + 4]> */
		/* 821A5AE4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000004) );
		/* 821A5AE4h case    3:*/		return 0x821A5AE8;
		  /* 821A5AE8h */ case    4:  		/* mr R22, R3 */
		/* 821A5AE8h case    4:*/		regs.R22 = regs.R3;
		/* 821A5AE8h case    4:*/		return 0x821A5AEC;
		  /* 821A5AECh */ case    5:  		/* mr R19, R4 */
		/* 821A5AECh case    5:*/		regs.R19 = regs.R4;
		/* 821A5AECh case    5:*/		return 0x821A5AF0;
		  /* 821A5AF0h */ case    6:  		/* mr R29, R7 */
		/* 821A5AF0h case    6:*/		regs.R29 = regs.R7;
		/* 821A5AF0h case    6:*/		return 0x821A5AF4;
		  /* 821A5AF4h */ case    7:  		/* mr R20, R8 */
		/* 821A5AF4h case    7:*/		regs.R20 = regs.R8;
		/* 821A5AF4h case    7:*/		return 0x821A5AF8;
		  /* 821A5AF8h */ case    8:  		/* mr R23, R9 */
		/* 821A5AF8h case    8:*/		regs.R23 = regs.R9;
		/* 821A5AF8h case    8:*/		return 0x821A5AFC;
		  /* 821A5AFCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821A5AFCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A5AFCh case    9:*/		return 0x821A5B00;
		  /* 821A5B00h */ case   10:  		/* bc 4, CR6_EQ, 12 */
		/* 821A5B00h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821A5B0C;  }
		/* 821A5B00h case   10:*/		return 0x821A5B04;
		  /* 821A5B04h */ case   11:  		/* li R3, 0 */
		/* 821A5B04h case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A5B04h case   11:*/		return 0x821A5B08;
		  /* 821A5B08h */ case   12:  		/* b 968 */
		/* 821A5B08h case   12:*/		return 0x821A5ED0;
		/* 821A5B08h case   12:*/		return 0x821A5B0C;
	}
	return 0x821A5B0C;
} // Block from 821A5AD8h-821A5B0Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A5B0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5B0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5B0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5B0C);
		  /* 821A5B0Ch */ case    0:  		/* lwz R24, <#[R11 + 12]> */
		/* 821A5B0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A5B0Ch case    0:*/		return 0x821A5B10;
		  /* 821A5B10h */ case    1:  		/* li R27, 4 */
		/* 821A5B10h case    1:*/		cpu::op::li<0>(regs,&regs.R27,0x4);
		/* 821A5B10h case    1:*/		return 0x821A5B14;
		  /* 821A5B14h */ case    2:  		/* cmplwi CR6, R6, 1 */
		/* 821A5B14h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 821A5B14h case    2:*/		return 0x821A5B18;
		  /* 821A5B18h */ case    3:  		/* bc 4, CR6_GT, 52 */
		/* 821A5B18h case    3:*/		if ( !regs.CR[6].gt ) { return 0x821A5B4C;  }
		/* 821A5B18h case    3:*/		return 0x821A5B1C;
		  /* 821A5B1Ch */ case    4:  		/* addi R10, R6, -1 */
		/* 821A5B1Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R6,0xFFFFFFFF);
		/* 821A5B1Ch case    4:*/		return 0x821A5B20;
		  /* 821A5B20h */ case    5:  		/* addi R9, R5, 12 */
		/* 821A5B20h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R5,0xC);
		/* 821A5B20h case    5:*/		return 0x821A5B24;
		  /* 821A5B24h */ case    6:  		/* mtspr CTR, R10 */
		/* 821A5B24h case    6:*/		regs.CTR = regs.R10;
		/* 821A5B24h case    6:*/		return 0x821A5B28;
		  /* 821A5B28h */ case    7:  		/* lwz R10, <#[R9]> */
		/* 821A5B28h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821A5B28h case    7:*/		return 0x821A5B2C;
		  /* 821A5B2Ch */ case    8:  		/* lwz R10, <#[R10 + 12]> */
		/* 821A5B2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821A5B2Ch case    8:*/		return 0x821A5B30;
		  /* 821A5B30h */ case    9:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A5B30h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A5B30h case    9:*/		return 0x821A5B34;
		  /* 821A5B34h */ case   10:  		/* rlwinm R10, R10, 18, 29, 31 */
		/* 821A5B34h case   10:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R10,regs.R10);
		/* 821A5B34h case   10:*/		return 0x821A5B38;
		  /* 821A5B38h */ case   11:  		/* cmplw CR6, R10, R27 */
		/* 821A5B38h case   11:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R27);
		/* 821A5B38h case   11:*/		return 0x821A5B3C;
		  /* 821A5B3Ch */ case   12:  		/* bc 4, CR6_LT, 8 */
		/* 821A5B3Ch case   12:*/		if ( !regs.CR[6].lt ) { return 0x821A5B44;  }
		/* 821A5B3Ch case   12:*/		return 0x821A5B40;
		  /* 821A5B40h */ case   13:  		/* mr R27, R10 */
		/* 821A5B40h case   13:*/		regs.R27 = regs.R10;
		/* 821A5B40h case   13:*/		return 0x821A5B44;
	}
	return 0x821A5B44;
} // Block from 821A5B0Ch-821A5B44h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A5B44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5B44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5B44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5B44);
		  /* 821A5B44h */ case    0:  		/* addi R9, R9, 8 */
		/* 821A5B44h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x8);
		/* 821A5B44h case    0:*/		return 0x821A5B48;
		  /* 821A5B48h */ case    1:  		/* bc 16, CR0_LT, -32 */
		/* 821A5B48h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A5B28;  }
		/* 821A5B48h case    1:*/		return 0x821A5B4C;
	}
	return 0x821A5B4C;
} // Block from 821A5B44h-821A5B4Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A5B4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5B4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5B4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5B4C);
		  /* 821A5B4Ch */ case    0:  		/* lwz R9, <#[R5]> */
		/* 821A5B4Ch case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000000) );
		/* 821A5B4Ch case    0:*/		return 0x821A5B50;
		  /* 821A5B50h */ case    1:  		/* mr R26, R6 */
		/* 821A5B50h case    1:*/		regs.R26 = regs.R6;
		/* 821A5B50h case    1:*/		return 0x821A5B54;
		  /* 821A5B54h */ case    2:  		/* mr R10, R24 */
		/* 821A5B54h case    2:*/		regs.R10 = regs.R24;
		/* 821A5B54h case    2:*/		return 0x821A5B58;
		  /* 821A5B58h */ case    3:  		/* subf R11, R9, R11 */
		/* 821A5B58h case    3:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R9,regs.R11);
		/* 821A5B58h case    3:*/		return 0x821A5B5C;
		  /* 821A5B5Ch */ case    4:  		/* cmplwi CR6, R6, 1 */
		/* 821A5B5Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000001);
		/* 821A5B5Ch case    4:*/		return 0x821A5B60;
		  /* 821A5B60h */ case    5:  		/* addic R9, R11, -1 */
		/* 821A5B60h case    5:*/		cpu::op::addic<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821A5B60h case    5:*/		return 0x821A5B64;
		  /* 821A5B64h */ case    6:  		/* subfe R21, R9, R11 */
		/* 821A5B64h case    6:*/		cpu::op::subfe<0>(regs,&regs.R21,regs.R9,regs.R11);
		/* 821A5B64h case    6:*/		return 0x821A5B68;
		  /* 821A5B68h */ case    7:  		/* bc 4, CR6_GT, -100 */
		/* 821A5B68h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821A5B04;  }
		/* 821A5B68h case    7:*/		return 0x821A5B6C;
		  /* 821A5B6Ch */ case    8:  		/* addi R31, R6, -1 */
		/* 821A5B6Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R6,0xFFFFFFFF);
		/* 821A5B6Ch case    8:*/		return 0x821A5B70;
		  /* 821A5B70h */ case    9:  		/* addi R30, R5, 12 */
		/* 821A5B70h case    9:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R5,0xC);
		/* 821A5B70h case    9:*/		return 0x821A5B74;
		  /* 821A5B74h */ case   10:  		/* mr R11, R30 */
		/* 821A5B74h case   10:*/		regs.R11 = regs.R30;
		/* 821A5B74h case   10:*/		return 0x821A5B78;
		  /* 821A5B78h */ case   11:  		/* mtspr CTR, R31 */
		/* 821A5B78h case   11:*/		regs.CTR = regs.R31;
		/* 821A5B78h case   11:*/		return 0x821A5B7C;
		  /* 821A5B7Ch */ case   12:  		/* lwz R9, <#[R11]> */
		/* 821A5B7Ch case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A5B7Ch case   12:*/		return 0x821A5B80;
		  /* 821A5B80h */ case   13:  		/* lwz R9, <#[R9 + 12]> */
		/* 821A5B80h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A5B80h case   13:*/		return 0x821A5B84;
		  /* 821A5B84h */ case   14:  		/* cmplw CR6, R9, R10 */
		/* 821A5B84h case   14:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R10);
		/* 821A5B84h case   14:*/		return 0x821A5B88;
		  /* 821A5B88h */ case   15:  		/* bc 12, CR6_EQ, 32 */
		/* 821A5B88h case   15:*/		if ( regs.CR[6].eq ) { return 0x821A5BA8;  }
		/* 821A5B88h case   15:*/		return 0x821A5B8C;
		  /* 821A5B8Ch */ case   16:  		/* lwz R10, <#[R9 + 8]> */
		/* 821A5B8Ch case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000008) );
		/* 821A5B8Ch case   16:*/		return 0x821A5B90;
		  /* 821A5B90h */ case   17:  		/* rlwinm R10, R10, 18, 29, 31 */
		/* 821A5B90h case   17:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R10,regs.R10);
		/* 821A5B90h case   17:*/		return 0x821A5B94;
		  /* 821A5B94h */ case   18:  		/* add R10, R10, R27 */
		/* 821A5B94h case   18:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 821A5B94h case   18:*/		return 0x821A5B98;
		  /* 821A5B98h */ case   19:  		/* cmplwi CR6, R10, 4 */
		/* 821A5B98h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821A5B98h case   19:*/		return 0x821A5B9C;
		  /* 821A5B9Ch */ case   20:  		/* bc 4, CR6_GT, 20 */
		/* 821A5B9Ch case   20:*/		if ( !regs.CR[6].gt ) { return 0x821A5BB0;  }
		/* 821A5B9Ch case   20:*/		return 0x821A5BA0;
		  /* 821A5BA0h */ case   21:  		/* cmplwi CR6, R20, 0 */
		/* 821A5BA0h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821A5BA0h case   21:*/		return 0x821A5BA4;
		  /* 821A5BA4h */ case   22:  		/* bc 12, CR6_EQ, 12 */
		/* 821A5BA4h case   22:*/		if ( regs.CR[6].eq ) { return 0x821A5BB0;  }
		/* 821A5BA4h case   22:*/		return 0x821A5BA8;
	}
	return 0x821A5BA8;
} // Block from 821A5B4Ch-821A5BA8h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A5BA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5BA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5BA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5BA8);
		  /* 821A5BA8h */ case    0:  		/* addi R26, R26, -1 */
		/* 821A5BA8h case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xFFFFFFFF);
		/* 821A5BA8h case    0:*/		return 0x821A5BAC;
		  /* 821A5BACh */ case    1:  		/* b 24 */
		/* 821A5BACh case    1:*/		return 0x821A5BC4;
		/* 821A5BACh case    1:*/		return 0x821A5BB0;
	}
	return 0x821A5BB0;
} // Block from 821A5BA8h-821A5BB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A5BB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5BB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5BB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5BB0);
		  /* 821A5BB0h */ case    0:  		/* lwz R10, <#[R11]> */
		/* 821A5BB0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A5BB0h case    0:*/		return 0x821A5BB4;
		  /* 821A5BB4h */ case    1:  		/* lwz R8, <#[R11 - 4]> */
		/* 821A5BB4h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821A5BB4h case    1:*/		return 0x821A5BB8;
		  /* 821A5BB8h */ case    2:  		/* cmplw CR6, R8, R10 */
		/* 821A5BB8h case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R10);
		/* 821A5BB8h case    2:*/		return 0x821A5BBC;
		  /* 821A5BBCh */ case    3:  		/* bc 12, CR6_EQ, 8 */
		/* 821A5BBCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821A5BC4;  }
		/* 821A5BBCh case    3:*/		return 0x821A5BC0;
		  /* 821A5BC0h */ case    4:  		/* addi R21, R21, 1 */
		/* 821A5BC0h case    4:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 821A5BC0h case    4:*/		return 0x821A5BC4;
	}
	return 0x821A5BC4;
} // Block from 821A5BB0h-821A5BC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A5BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5BC4);
		  /* 821A5BC4h */ case    0:  		/* mr R10, R9 */
		/* 821A5BC4h case    0:*/		regs.R10 = regs.R9;
		/* 821A5BC4h case    0:*/		return 0x821A5BC8;
		  /* 821A5BC8h */ case    1:  		/* addi R11, R11, 8 */
		/* 821A5BC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x8);
		/* 821A5BC8h case    1:*/		return 0x821A5BCC;
		  /* 821A5BCCh */ case    2:  		/* bc 16, CR0_LT, -80 */
		/* 821A5BCCh case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A5B7C;  }
		/* 821A5BCCh case    2:*/		return 0x821A5BD0;
		  /* 821A5BD0h */ case    3:  		/* cmplwi CR6, R26, 1 */
		/* 821A5BD0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 821A5BD0h case    3:*/		return 0x821A5BD4;
		  /* 821A5BD4h */ case    4:  		/* bc 4, CR6_GT, -208 */
		/* 821A5BD4h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821A5B04;  }
		/* 821A5BD4h case    4:*/		return 0x821A5BD8;
		  /* 821A5BD8h */ case    5:  		/* cmplwi CR6, R20, 0 */
		/* 821A5BD8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821A5BD8h case    5:*/		return 0x821A5BDC;
		  /* 821A5BDCh */ case    6:  		/* bc 12, CR6_EQ, 752 */
		/* 821A5BDCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821A5ECC;  }
		/* 821A5BDCh case    6:*/		return 0x821A5BE0;
		  /* 821A5BE0h */ case    7:  		/* addi R11, R26, 6 */
		/* 821A5BE0h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0x6);
		/* 821A5BE0h case    7:*/		return 0x821A5BE4;
		  /* 821A5BE4h */ case    8:  		/* li R5, 0 */
		/* 821A5BE4h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A5BE4h case    8:*/		return 0x821A5BE8;
		  /* 821A5BE8h */ case    9:  		/* rlwinm R25, R11, 2, 0, 29 */
		/* 821A5BE8h case    9:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R25,regs.R11);
		/* 821A5BE8h case    9:*/		return 0x821A5BEC;
		  /* 821A5BECh */ case   10:  		/* mr R3, R22 */
		/* 821A5BECh case   10:*/		regs.R3 = regs.R22;
		/* 821A5BECh case   10:*/		return 0x821A5BF0;
		  /* 821A5BF0h */ case   11:  		/* mr R4, R25 */
		/* 821A5BF0h case   11:*/		regs.R4 = regs.R25;
		/* 821A5BF0h case   11:*/		return 0x821A5BF4;
		  /* 821A5BF4h */ case   12:  		/* bl -265148 */
		/* 821A5BF4h case   12:*/		regs.LR = 0x821A5BF8; return 0x82165038;
		/* 821A5BF4h case   12:*/		return 0x821A5BF8;
		  /* 821A5BF8h */ case   13:  		/* subf R11, R21, R26 */
		/* 821A5BF8h case   13:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R21,regs.R26);
		/* 821A5BF8h case   13:*/		return 0x821A5BFC;
		  /* 821A5BFCh */ case   14:  		/* mr R28, R3 */
		/* 821A5BFCh case   14:*/		regs.R28 = regs.R3;
		/* 821A5BFCh case   14:*/		return 0x821A5C00;
		  /* 821A5C00h */ case   15:  		/* mulli R10, R11, 10 */
		/* 821A5C00h case   15:*/		cpu::op::mulli<0>(regs,&regs.R10,regs.R11,0xA);
		/* 821A5C00h case   15:*/		return 0x821A5C04;
		  /* 821A5C04h */ case   16:  		/* lwz R11, <#[R3]> */
		/* 821A5C04h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A5C04h case   16:*/		return 0x821A5C08;
		  /* 821A5C08h */ case   17:  		/* rlwimi R11, R26, 0, 19, 31 */
		/* 821A5C08h case   17:*/		cpu::op::rlwimi<0,0,19,31>(regs,&regs.R11,regs.R26);
		/* 821A5C08h case   17:*/		return 0x821A5C0C;
		  /* 821A5C0Ch */ case   18:  		/* cmplwi CR6, R10, 10 */
		/* 821A5C0Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000000A);
		/* 821A5C0Ch case   18:*/		return 0x821A5C10;
		  /* 821A5C10h */ case   19:  		/* stw R11, <#[R3]> */
		/* 821A5C10h case   19:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A5C10h case   19:*/		return 0x821A5C14;
		  /* 821A5C14h */ case   20:  		/* addi R10, R10, -10 */
		/* 821A5C14h case   20:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFF6);
		/* 821A5C14h case   20:*/		return 0x821A5C18;
		  /* 821A5C18h */ case   21:  		/* bc 12, CR6_GT, 8 */
		/* 821A5C18h case   21:*/		if ( regs.CR[6].gt ) { return 0x821A5C20;  }
		/* 821A5C18h case   21:*/		return 0x821A5C1C;
		  /* 821A5C1Ch */ case   22:  		/* li R10, 1 */
		/* 821A5C1Ch case   22:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821A5C1Ch case   22:*/		return 0x821A5C20;
	}
	return 0x821A5C20;
} // Block from 821A5BC4h-821A5C20h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A5C20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5C20);
		  /* 821A5C20h */ case    0:  		/* add R10, R10, R29 */
		/* 821A5C20h case    0:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R29);
		/* 821A5C20h case    0:*/		return 0x821A5C24;
		  /* 821A5C24h */ case    1:  		/* mtspr CTR, R31 */
		/* 821A5C24h case    1:*/		regs.CTR = regs.R31;
		/* 821A5C24h case    1:*/		return 0x821A5C28;
		  /* 821A5C28h */ case    2:  		/* addi R29, R28, 24 */
		/* 821A5C28h case    2:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R28,0x18);
		/* 821A5C28h case    2:*/		return 0x821A5C2C;
		  /* 821A5C2Ch */ case    3:  		/* stw R24, <#[R28 + 24]> */
		/* 821A5C2Ch case    3:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R28 + 0x00000018) );
		/* 821A5C2Ch case    3:*/		return 0x821A5C30;
		  /* 821A5C30h */ case    4:  		/* rlwimi R11, R10, 13, 3, 18 */
		/* 821A5C30h case    4:*/		cpu::op::rlwimi<0,13,3,18>(regs,&regs.R11,regs.R10);
		/* 821A5C30h case    4:*/		return 0x821A5C34;
		  /* 821A5C34h */ case    5:  		/* mr R10, R24 */
		/* 821A5C34h case    5:*/		regs.R10 = regs.R24;
		/* 821A5C34h case    5:*/		return 0x821A5C38;
		  /* 821A5C38h */ case    6:  		/* stw R11, <#[R28]> */
		/* 821A5C38h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A5C38h case    6:*/		return 0x821A5C3C;
		  /* 821A5C3Ch */ case    7:  		/* addi R8, R28, 24 */
		/* 821A5C3Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R28,0x18);
		/* 821A5C3Ch case    7:*/		return 0x821A5C40;
		  /* 821A5C40h */ case    8:  		/* mr R9, R30 */
		/* 821A5C40h case    8:*/		regs.R9 = regs.R30;
		/* 821A5C40h case    8:*/		return 0x821A5C44;
		  /* 821A5C44h */ case    9:  		/* lwz R11, <#[R9]> */
		/* 821A5C44h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821A5C44h case    9:*/		return 0x821A5C48;
		  /* 821A5C48h */ case   10:  		/* lwz R11, <#[R11 + 12]> */
		/* 821A5C48h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A5C48h case   10:*/		return 0x821A5C4C;
		  /* 821A5C4Ch */ case   11:  		/* cmplw CR6, R11, R10 */
		/* 821A5C4Ch case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A5C4Ch case   11:*/		return 0x821A5C50;
		  /* 821A5C50h */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 821A5C50h case   12:*/		if ( regs.CR[6].eq ) { return 0x821A5C70;  }
		/* 821A5C50h case   12:*/		return 0x821A5C54;
		  /* 821A5C54h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A5C54h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A5C54h case   13:*/		return 0x821A5C58;
		  /* 821A5C58h */ case   14:  		/* rlwinm R10, R10, 18, 29, 31 */
		/* 821A5C58h case   14:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R10,regs.R10);
		/* 821A5C58h case   14:*/		return 0x821A5C5C;
		  /* 821A5C5Ch */ case   15:  		/* add R10, R10, R27 */
		/* 821A5C5Ch case   15:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R27);
		/* 821A5C5Ch case   15:*/		return 0x821A5C60;
		  /* 821A5C60h */ case   16:  		/* cmplwi CR6, R10, 4 */
		/* 821A5C60h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821A5C60h case   16:*/		return 0x821A5C64;
		  /* 821A5C64h */ case   17:  		/* bc 12, CR6_GT, 8 */
		/* 821A5C64h case   17:*/		if ( regs.CR[6].gt ) { return 0x821A5C6C;  }
		/* 821A5C64h case   17:*/		return 0x821A5C68;
		  /* 821A5C68h */ case   18:  		/* stwu R11, <#[R8 + 4]> */
		/* 821A5C68h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		regs.R8 = (uint32)(regs.R8 + 0x00000004);
		/* 821A5C68h case   18:*/		return 0x821A5C6C;
	}
	return 0x821A5C6C;
} // Block from 821A5C20h-821A5C6Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A5C6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5C6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5C6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5C6C);
		  /* 821A5C6Ch */ case    0:  		/* mr R10, R11 */
		/* 821A5C6Ch case    0:*/		regs.R10 = regs.R11;
		/* 821A5C6Ch case    0:*/		return 0x821A5C70;
	}
	return 0x821A5C70;
} // Block from 821A5C6Ch-821A5C70h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5C70);
		  /* 821A5C70h */ case    0:  		/* addi R9, R9, 8 */
		/* 821A5C70h case    0:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x8);
		/* 821A5C70h case    0:*/		return 0x821A5C74;
		  /* 821A5C74h */ case    1:  		/* bc 16, CR0_LT, -48 */
		/* 821A5C74h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A5C44;  }
		/* 821A5C74h case    1:*/		return 0x821A5C78;
		  /* 821A5C78h */ case    2:  		/* li R3, 0 */
		/* 821A5C78h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A5C78h case    2:*/		return 0x821A5C7C;
		  /* 821A5C7Ch */ case    3:  		/* li R27, 0 */
		/* 821A5C7Ch case    3:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A5C7Ch case    3:*/		return 0x821A5C80;
		  /* 821A5C80h */ case    4:  		/* cmplwi CR6, R26, 0 */
		/* 821A5C80h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821A5C80h case    4:*/		return 0x821A5C84;
		  /* 821A5C84h */ case    5:  		/* bc 12, CR6_EQ, 376 */
		/* 821A5C84h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A5DFC;  }
		/* 821A5C84h case    5:*/		return 0x821A5C88;
		  /* 821A5C88h */ case    6:  		/* mr R30, R29 */
		/* 821A5C88h case    6:*/		regs.R30 = regs.R29;
		/* 821A5C88h case    6:*/		return 0x821A5C8C;
		  /* 821A5C8Ch */ case    7:  		/* lwz R11, <#[R30]> */
		/* 821A5C8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A5C8Ch case    7:*/		return 0x821A5C90;
		  /* 821A5C90h */ case    8:  		/* addi R5, R11, 32 */
		/* 821A5C90h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R11,0x20);
		/* 821A5C90h case    8:*/		return 0x821A5C94;
		  /* 821A5C94h */ case    9:  		/* lwz R4, <#[R11 + 32]> */
		/* 821A5C94h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000020) );
		/* 821A5C94h case    9:*/		return 0x821A5C98;
		  /* 821A5C98h */ case   10:  		/* b 320 */
		/* 821A5C98h case   10:*/		return 0x821A5DD8;
		/* 821A5C98h case   10:*/		return 0x821A5C9C;
		  /* 821A5C9Ch */ case   11:  		/* lwz R31, <#[R4]> */
		/* 821A5C9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R4 + 0x00000000) );
		/* 821A5C9Ch case   11:*/		return 0x821A5CA0;
		  /* 821A5CA0h */ case   12:  		/* li R8, 0 */
		/* 821A5CA0h case   12:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A5CA0h case   12:*/		return 0x821A5CA4;
		  /* 821A5CA4h */ case   13:  		/* lwz R11, <#[R31]> */
		/* 821A5CA4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5CA4h case   13:*/		return 0x821A5CA8;
		  /* 821A5CA8h */ case   14:  		/* rlwinm R7, R11, 0, 19, 31 */
		/* 821A5CA8h case   14:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R7,regs.R11);
		/* 821A5CA8h case   14:*/		return 0x821A5CAC;
		  /* 821A5CACh */ case   15:  		/* cmplw CR6, R26, R7 */
		/* 821A5CACh case   15:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R7);
		/* 821A5CACh case   15:*/		return 0x821A5CB0;
		  /* 821A5CB0h */ case   16:  		/* bc 4, CR6_GT, 204 */
		/* 821A5CB0h case   16:*/		if ( !regs.CR[6].gt ) { return 0x821A5D7C;  }
		/* 821A5CB0h case   16:*/		return 0x821A5CB4;
		  /* 821A5CB4h */ case   17:  		/* addi R6, R31, 24 */
		/* 821A5CB4h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R31,0x18);
		/* 821A5CB4h case   17:*/		return 0x821A5CB8;
		  /* 821A5CB8h */ case   18:  		/* li R11, 0 */
		/* 821A5CB8h case   18:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A5CB8h case   18:*/		return 0x821A5CBC;
		  /* 821A5CBCh */ case   19:  		/* mr R10, R29 */
		/* 821A5CBCh case   19:*/		regs.R10 = regs.R29;
		/* 821A5CBCh case   19:*/		return 0x821A5CC0;
		  /* 821A5CC0h */ case   20:  		/* mr R9, R6 */
		/* 821A5CC0h case   20:*/		regs.R9 = regs.R6;
		/* 821A5CC0h case   20:*/		return 0x821A5CC4;
		  /* 821A5CC4h */ case   21:  		/* lwz R18, <#[R9]> */
		/* 821A5CC4h case   21:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R9 + 0x00000000) );
		/* 821A5CC4h case   21:*/		return 0x821A5CC8;
		  /* 821A5CC8h */ case   22:  		/* lwz R17, <#[R10]> */
		/* 821A5CC8h case   22:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R10 + 0x00000000) );
		/* 821A5CC8h case   22:*/		return 0x821A5CCC;
		  /* 821A5CCCh */ case   23:  		/* cmplw CR6, R17, R18 */
		/* 821A5CCCh case   23:*/		cpu::op::cmplw<6>(regs,regs.R17,regs.R18);
		/* 821A5CCCh case   23:*/		return 0x821A5CD0;
		  /* 821A5CD0h */ case   24:  		/* bc 4, CR6_EQ, 20 */
		/* 821A5CD0h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821A5CE4;  }
		/* 821A5CD0h case   24:*/		return 0x821A5CD4;
		  /* 821A5CD4h */ case   25:  		/* addi R11, R11, 1 */
		/* 821A5CD4h case   25:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A5CD4h case   25:*/		return 0x821A5CD8;
		  /* 821A5CD8h */ case   26:  		/* addi R9, R9, 4 */
		/* 821A5CD8h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821A5CD8h case   26:*/		return 0x821A5CDC;
		  /* 821A5CDCh */ case   27:  		/* cmplw CR6, R11, R7 */
		/* 821A5CDCh case   27:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821A5CDCh case   27:*/		return 0x821A5CE0;
		  /* 821A5CE0h */ case   28:  		/* bc 12, CR6_EQ, 28 */
		/* 821A5CE0h case   28:*/		if ( regs.CR[6].eq ) { return 0x821A5CFC;  }
		/* 821A5CE0h case   28:*/		return 0x821A5CE4;
	}
	return 0x821A5CE4;
} // Block from 821A5C70h-821A5CE4h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A5CE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5CE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5CE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5CE4);
		  /* 821A5CE4h */ case    0:  		/* addi R8, R8, 1 */
		/* 821A5CE4h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821A5CE4h case    0:*/		return 0x821A5CE8;
		  /* 821A5CE8h */ case    1:  		/* addi R10, R10, 4 */
		/* 821A5CE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A5CE8h case    1:*/		return 0x821A5CEC;
		  /* 821A5CECh */ case    2:  		/* cmplw CR6, R8, R26 */
		/* 821A5CECh case    2:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R26);
		/* 821A5CECh case    2:*/		return 0x821A5CF0;
		  /* 821A5CF0h */ case    3:  		/* bc 12, CR6_LT, -44 */
		/* 821A5CF0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821A5CC4;  }
		/* 821A5CF0h case    3:*/		return 0x821A5CF4;
		  /* 821A5CF4h */ case    4:  		/* cmplw CR6, R11, R7 */
		/* 821A5CF4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R7);
		/* 821A5CF4h case    4:*/		return 0x821A5CF8;
		  /* 821A5CF8h */ case    5:  		/* bc 4, CR6_EQ, 216 */
		/* 821A5CF8h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A5DD0;  }
		/* 821A5CF8h case    5:*/		return 0x821A5CFC;
	}
	return 0x821A5CFC;
} // Block from 821A5CE4h-821A5CFCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A5CFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5CFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5CFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5CFC);
		  /* 821A5CFCh */ case    0:  		/* li R8, 0 */
		/* 821A5CFCh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A5CFCh case    0:*/		return 0x821A5D00;
		  /* 821A5D00h */ case    1:  		/* cmplwi CR6, R7, 0 */
		/* 821A5D00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821A5D00h case    1:*/		return 0x821A5D04;
		  /* 821A5D04h */ case    2:  		/* bc 12, CR6_EQ, 88 */
		/* 821A5D04h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A5D5C;  }
		/* 821A5D04h case    2:*/		return 0x821A5D08;
		  /* 821A5D08h */ case    3:  		/* mr R9, R6 */
		/* 821A5D08h case    3:*/		regs.R9 = regs.R6;
		/* 821A5D08h case    3:*/		return 0x821A5D0C;
		  /* 821A5D0Ch */ case    4:  		/* lwz R11, <#[R9]> */
		/* 821A5D0Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821A5D0Ch case    4:*/		return 0x821A5D10;
		  /* 821A5D10h */ case    5:  		/* cmplw CR6, R11, R24 */
		/* 821A5D10h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R24);
		/* 821A5D10h case    5:*/		return 0x821A5D14;
		  /* 821A5D14h */ case    6:  		/* bc 12, CR6_EQ, 48 */
		/* 821A5D14h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A5D44;  }
		/* 821A5D14h case    6:*/		return 0x821A5D18;
		  /* 821A5D18h */ case    7:  		/* addi R10, R11, 32 */
		/* 821A5D18h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x20);
		/* 821A5D18h case    7:*/		return 0x821A5D1C;
		  /* 821A5D1Ch */ case    8:  		/* lwz R11, <#[R10]> */
		/* 821A5D1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821A5D1Ch case    8:*/		return 0x821A5D20;
		  /* 821A5D20h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821A5D20h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A5D20h case    9:*/		return 0x821A5D24;
		  /* 821A5D24h */ case   10:  		/* bc 12, CR6_EQ, 436 */
		/* 821A5D24h case   10:*/		if ( regs.CR[6].eq ) { return 0x821A5ED8;  }
		/* 821A5D24h case   10:*/		return 0x821A5D28;
		  /* 821A5D28h */ case   11:  		/* lwz R7, <#[R11]> */
		/* 821A5D28h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A5D28h case   11:*/		return 0x821A5D2C;
		  /* 821A5D2Ch */ case   12:  		/* cmplw CR6, R7, R31 */
		/* 821A5D2Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R31);
		/* 821A5D2Ch case   12:*/		return 0x821A5D30;
		  /* 821A5D30h */ case   13:  		/* bc 12, CR6_EQ, 12 */
		/* 821A5D30h case   13:*/		if ( regs.CR[6].eq ) { return 0x821A5D3C;  }
		/* 821A5D30h case   13:*/		return 0x821A5D34;
		  /* 821A5D34h */ case   14:  		/* addi R10, R11, 4 */
		/* 821A5D34h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821A5D34h case   14:*/		return 0x821A5D38;
		  /* 821A5D38h */ case   15:  		/* b -28 */
		/* 821A5D38h case   15:*/		return 0x821A5D1C;
		/* 821A5D38h case   15:*/		return 0x821A5D3C;
	}
	return 0x821A5D3C;
} // Block from 821A5CFCh-821A5D3Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A5D3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5D3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5D3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5D3C);
		  /* 821A5D3Ch */ case    0:  		/* lwz R11, <#[R11 + 4]> */
		/* 821A5D3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821A5D3Ch case    0:*/		return 0x821A5D40;
		  /* 821A5D40h */ case    1:  		/* stw R11, <#[R10]> */
		/* 821A5D40h case    1:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821A5D40h case    1:*/		return 0x821A5D44;
	}
	return 0x821A5D44;
} // Block from 821A5D3Ch-821A5D44h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A5D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5D44);
		  /* 821A5D44h */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821A5D44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5D44h case    0:*/		return 0x821A5D48;
	}
	return 0x821A5D48;
} // Block from 821A5D44h-821A5D48h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5D48h
// Function '?ReplaceDOT2ADD@Compiler@D3DXShader@@AAAXPAVInstruction@2@W4Component@2@00@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5D48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5D48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5D48);
		  /* 821A5D48h */ case    0:  		/* addi R8, R8, 1 */
		/* 821A5D48h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821A5D48h case    0:*/		return 0x821A5D4C;
		  /* 821A5D4Ch */ case    1:  		/* addi R9, R9, 4 */
		/* 821A5D4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821A5D4Ch case    1:*/		return 0x821A5D50;
		  /* 821A5D50h */ case    2:  		/* rlwinm R11, R11, 0, 19, 31 */
		/* 821A5D50h case    2:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R11,regs.R11);
		/* 821A5D50h case    2:*/		return 0x821A5D54;
		  /* 821A5D54h */ case    3:  		/* cmplw CR6, R8, R11 */
		/* 821A5D54h case    3:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821A5D54h case    3:*/		return 0x821A5D58;
		  /* 821A5D58h */ case    4:  		/* bc 12, CR6_LT, -76 */
		/* 821A5D58h case    4:*/		if ( regs.CR[6].lt ) { return 0x821A5D0C;  }
		/* 821A5D58h case    4:*/		return 0x821A5D5C;
	}
	return 0x821A5D5C;
} // Block from 821A5D48h-821A5D5Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A5D5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5D5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5D5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5D5C);
		  /* 821A5D5Ch */ case    0:  		/* lwz R11, <#[R31]> */
		/* 821A5D5Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5D5Ch case    0:*/		return 0x821A5D60;
		  /* 821A5D60h */ case    1:  		/* li R3, 1 */
		/* 821A5D60h case    1:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821A5D60h case    1:*/		return 0x821A5D64;
		  /* 821A5D64h */ case    2:  		/* stw R28, <#[R6]> */
		/* 821A5D64h case    2:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R6 + 0x00000000) );
		/* 821A5D64h case    2:*/		return 0x821A5D68;
		  /* 821A5D68h */ case    3:  		/* rlwinm R11, R11, 0, 19, 2 */
		/* 821A5D68h case    3:*/		cpu::op::rlwinm<0,0,19,2>(regs,&regs.R11,regs.R11);
		/* 821A5D68h case    3:*/		return 0x821A5D6C;
		  /* 821A5D6Ch */ case    4:  		/* stw R11, <#[R31]> */
		/* 821A5D6Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5D6Ch case    4:*/		return 0x821A5D70;
		  /* 821A5D70h */ case    5:  		/* lwz R11, <#[R4 + 4]> */
		/* 821A5D70h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821A5D70h case    5:*/		return 0x821A5D74;
		  /* 821A5D74h */ case    6:  		/* stw R11, <#[R5]> */
		/* 821A5D74h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821A5D74h case    6:*/		return 0x821A5D78;
		  /* 821A5D78h */ case    7:  		/* b 92 */
		/* 821A5D78h case    7:*/		return 0x821A5DD4;
		/* 821A5D78h case    7:*/		return 0x821A5D7C;
	}
	return 0x821A5D7C;
} // Block from 821A5D5Ch-821A5D7Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A5D7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5D7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5D7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5D7C);
		  /* 821A5D7Ch */ case    0:  		/* li R9, 0 */
		/* 821A5D7Ch case    0:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A5D7Ch case    0:*/		return 0x821A5D80;
		  /* 821A5D80h */ case    1:  		/* cmplwi CR6, R7, 0 */
		/* 821A5D80h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R7,0x00000000);
		/* 821A5D80h case    1:*/		return 0x821A5D84;
		  /* 821A5D84h */ case    2:  		/* bc 12, CR6_EQ, 68 */
		/* 821A5D84h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A5DC8;  }
		/* 821A5D84h case    2:*/		return 0x821A5D88;
		  /* 821A5D88h */ case    3:  		/* mr R10, R29 */
		/* 821A5D88h case    3:*/		regs.R10 = regs.R29;
		/* 821A5D88h case    3:*/		return 0x821A5D8C;
		  /* 821A5D8Ch */ case    4:  		/* addi R11, R31, 24 */
		/* 821A5D8Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0x18);
		/* 821A5D8Ch case    4:*/		return 0x821A5D90;
		  /* 821A5D90h */ case    5:  		/* lwz R7, <#[R11]> */
		/* 821A5D90h case    5:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A5D90h case    5:*/		return 0x821A5D94;
		  /* 821A5D94h */ case    6:  		/* lwz R6, <#[R10]> */
		/* 821A5D94h case    6:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821A5D94h case    6:*/		return 0x821A5D98;
		  /* 821A5D98h */ case    7:  		/* cmplw CR6, R6, R7 */
		/* 821A5D98h case    7:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R7);
		/* 821A5D98h case    7:*/		return 0x821A5D9C;
		  /* 821A5D9Ch */ case    8:  		/* bc 4, CR6_EQ, 20 */
		/* 821A5D9Ch case    8:*/		if ( !regs.CR[6].eq ) { return 0x821A5DB0;  }
		/* 821A5D9Ch case    8:*/		return 0x821A5DA0;
		  /* 821A5DA0h */ case    9:  		/* addi R9, R9, 1 */
		/* 821A5DA0h case    9:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821A5DA0h case    9:*/		return 0x821A5DA4;
		  /* 821A5DA4h */ case   10:  		/* addi R10, R10, 4 */
		/* 821A5DA4h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A5DA4h case   10:*/		return 0x821A5DA8;
		  /* 821A5DA8h */ case   11:  		/* cmplw CR6, R9, R26 */
		/* 821A5DA8h case   11:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 821A5DA8h case   11:*/		return 0x821A5DAC;
		  /* 821A5DACh */ case   12:  		/* bc 12, CR6_EQ, 56 */
		/* 821A5DACh case   12:*/		if ( regs.CR[6].eq ) { return 0x821A5DE4;  }
		/* 821A5DACh case   12:*/		return 0x821A5DB0;
	}
	return 0x821A5DB0;
} // Block from 821A5D7Ch-821A5DB0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A5DB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5DB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5DB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5DB0);
		  /* 821A5DB0h */ case    0:  		/* lwz R7, <#[R31]> */
		/* 821A5DB0h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000000) );
		/* 821A5DB0h case    0:*/		return 0x821A5DB4;
		  /* 821A5DB4h */ case    1:  		/* addi R8, R8, 1 */
		/* 821A5DB4h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821A5DB4h case    1:*/		return 0x821A5DB8;
		  /* 821A5DB8h */ case    2:  		/* addi R11, R11, 4 */
		/* 821A5DB8h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A5DB8h case    2:*/		return 0x821A5DBC;
		  /* 821A5DBCh */ case    3:  		/* rlwinm R7, R7, 0, 19, 31 */
		/* 821A5DBCh case    3:*/		cpu::op::rlwinm<0,0,19,31>(regs,&regs.R7,regs.R7);
		/* 821A5DBCh case    3:*/		return 0x821A5DC0;
		  /* 821A5DC0h */ case    4:  		/* cmplw CR6, R8, R7 */
		/* 821A5DC0h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R7);
		/* 821A5DC0h case    4:*/		return 0x821A5DC4;
		  /* 821A5DC4h */ case    5:  		/* bc 12, CR6_LT, -52 */
		/* 821A5DC4h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A5D90;  }
		/* 821A5DC4h case    5:*/		return 0x821A5DC8;
	}
	return 0x821A5DC8;
} // Block from 821A5DB0h-821A5DC8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A5DC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5DC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5DC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5DC8);
		  /* 821A5DC8h */ case    0:  		/* cmplw CR6, R9, R26 */
		/* 821A5DC8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R26);
		/* 821A5DC8h case    0:*/		return 0x821A5DCC;
		  /* 821A5DCCh */ case    1:  		/* bc 12, CR6_EQ, 24 */
		/* 821A5DCCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821A5DE4;  }
		/* 821A5DCCh case    1:*/		return 0x821A5DD0;
	}
	return 0x821A5DD0;
} // Block from 821A5DC8h-821A5DD0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A5DD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5DD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5DD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5DD0);
		  /* 821A5DD0h */ case    0:  		/* addi R5, R4, 4 */
		/* 821A5DD0h case    0:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R4,0x4);
		/* 821A5DD0h case    0:*/		return 0x821A5DD4;
	}
	return 0x821A5DD4;
} // Block from 821A5DD0h-821A5DD4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5DD4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5DD4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5DD4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5DD4);
		  /* 821A5DD4h */ case    0:  		/* lwz R4, <#[R5]> */
		/* 821A5DD4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R5 + 0x00000000) );
		/* 821A5DD4h case    0:*/		return 0x821A5DD8;
	}
	return 0x821A5DD8;
} // Block from 821A5DD4h-821A5DD8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5DD8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5DD8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5DD8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5DD8);
		  /* 821A5DD8h */ case    0:  		/* cmplwi CR6, R4, 0 */
		/* 821A5DD8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A5DD8h case    0:*/		return 0x821A5DDC;
		  /* 821A5DDCh */ case    1:  		/* bc 4, CR6_EQ, -320 */
		/* 821A5DDCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A5C9C;  }
		/* 821A5DDCh case    1:*/		return 0x821A5DE0;
		  /* 821A5DE0h */ case    2:  		/* li R31, 0 */
		/* 821A5DE0h case    2:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A5DE0h case    2:*/		return 0x821A5DE4;
	}
	return 0x821A5DE4;
} // Block from 821A5DD8h-821A5DE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5DE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5DE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5DE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5DE4);
		  /* 821A5DE4h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821A5DE4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A5DE4h case    0:*/		return 0x821A5DE8;
		  /* 821A5DE8h */ case    1:  		/* bc 4, CR6_EQ, 252 */
		/* 821A5DE8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A5EE4;  }
		/* 821A5DE8h case    1:*/		return 0x821A5DEC;
		  /* 821A5DECh */ case    2:  		/* addi R27, R27, 1 */
		/* 821A5DECh case    2:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A5DECh case    2:*/		return 0x821A5DF0;
		  /* 821A5DF0h */ case    3:  		/* addi R30, R30, 4 */
		/* 821A5DF0h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A5DF0h case    3:*/		return 0x821A5DF4;
		  /* 821A5DF4h */ case    4:  		/* cmplw CR6, R27, R26 */
		/* 821A5DF4h case    4:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R26);
		/* 821A5DF4h case    4:*/		return 0x821A5DF8;
		  /* 821A5DF8h */ case    5:  		/* bc 12, CR6_LT, -364 */
		/* 821A5DF8h case    5:*/		if ( regs.CR[6].lt ) { return 0x821A5C8C;  }
		/* 821A5DF8h case    5:*/		return 0x821A5DFC;
	}
	return 0x821A5DFC;
} // Block from 821A5DE4h-821A5DFCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A5DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5DFC);
		  /* 821A5DFCh */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821A5DFCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821A5DFCh case    0:*/		return 0x821A5E00;
		  /* 821A5E00h */ case    1:  		/* cmplwi CR6, R26, 0 */
		/* 821A5E00h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821A5E00h case    1:*/		return 0x821A5E04;
		  /* 821A5E04h */ case    2:  		/* stw R11, <#[R28 + 12]> */
		/* 821A5E04h case    2:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A5E04h case    2:*/		return 0x821A5E08;
		  /* 821A5E08h */ case    3:  		/* stw R28, <#[R23]> */
		/* 821A5E08h case    3:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R23 + 0x00000000) );
		/* 821A5E08h case    3:*/		return 0x821A5E0C;
		  /* 821A5E0Ch */ case    4:  		/* bc 12, CR6_EQ, 56 */
		/* 821A5E0Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821A5E44;  }
		/* 821A5E0Ch case    4:*/		return 0x821A5E10;
		  /* 821A5E10h */ case    5:  		/* addi R29, R29, -4 */
		/* 821A5E10h case    5:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0xFFFFFFFC);
		/* 821A5E10h case    5:*/		return 0x821A5E14;
		  /* 821A5E14h */ case    6:  		/* mr R30, R26 */
		/* 821A5E14h case    6:*/		regs.R30 = regs.R26;
		/* 821A5E14h case    6:*/		return 0x821A5E18;
		  /* 821A5E18h */ case    7:  		/* li R5, 49 */
		/* 821A5E18h case    7:*/		cpu::op::li<0>(regs,&regs.R5,0x31);
		/* 821A5E18h case    7:*/		return 0x821A5E1C;
		  /* 821A5E1Ch */ case    8:  		/* lwzu R31, <#[R29 + 4]> */
		/* 821A5E1Ch case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A5E1Ch case    8:*/		return 0x821A5E20;
		  /* 821A5E20h */ case    9:  		/* li R4, 8 */
		/* 821A5E20h case    9:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821A5E20h case    9:*/		return 0x821A5E24;
		  /* 821A5E24h */ case   10:  		/* mr R3, R22 */
		/* 821A5E24h case   10:*/		regs.R3 = regs.R22;
		/* 821A5E24h case   10:*/		return 0x821A5E28;
		  /* 821A5E28h */ case   11:  		/* bl -267576 */
		/* 821A5E28h case   11:*/		regs.LR = 0x821A5E2C; return 0x821648F0;
		/* 821A5E28h case   11:*/		return 0x821A5E2C;
		  /* 821A5E2Ch */ case   12:  		/* stw R28, <#[R3]> */
		/* 821A5E2Ch case   12:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 821A5E2Ch case   12:*/		return 0x821A5E30;
		  /* 821A5E30h */ case   13:  		/* lwz R11, <#[R31 + 32]> */
		/* 821A5E30h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000020) );
		/* 821A5E30h case   13:*/		return 0x821A5E34;
		  /* 821A5E34h */ case   14:  		/* addic. R30, R30, -1 */
		/* 821A5E34h case   14:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821A5E34h case   14:*/		return 0x821A5E38;
		  /* 821A5E38h */ case   15:  		/* stw R11, <#[R3 + 4]> */
		/* 821A5E38h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A5E38h case   15:*/		return 0x821A5E3C;
		  /* 821A5E3Ch */ case   16:  		/* stw R3, <#[R31 + 32]> */
		/* 821A5E3Ch case   16:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000020) );
		/* 821A5E3Ch case   16:*/		return 0x821A5E40;
		  /* 821A5E40h */ case   17:  		/* bc 4, CR0_EQ, -40 */
		/* 821A5E40h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821A5E18;  }
		/* 821A5E40h case   17:*/		return 0x821A5E44;
	}
	return 0x821A5E44;
} // Block from 821A5DFCh-821A5E44h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A5E44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5E44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5E44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5E44);
		  /* 821A5E44h */ case    0:  		/* lwz R11, <#[R20 + 4]> */
		/* 821A5E44h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000004) );
		/* 821A5E44h case    0:*/		return 0x821A5E48;
		  /* 821A5E48h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A5E48h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A5E48h case    1:*/		return 0x821A5E4C;
		  /* 821A5E4Ch */ case    2:  		/* bc 4, CR0_EQ, 40 */
		/* 821A5E4Ch case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A5E74;  }
		/* 821A5E4Ch case    2:*/		return 0x821A5E50;
		  /* 821A5E50h */ case    3:  		/* lwz R11, <#[R20]> */
		/* 821A5E50h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A5E50h case    3:*/		return 0x821A5E54;
		  /* 821A5E54h */ case    4:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A5E54h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A5E54h case    4:*/		return 0x821A5E58;
		  /* 821A5E58h */ case    5:  		/* addic. R3, R11, -4 */
		/* 821A5E58h case    5:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821A5E58h case    5:*/		return 0x821A5E5C;
		  /* 821A5E5Ch */ case    6:  		/* bc 12, CR0_EQ, 24 */
		/* 821A5E5Ch case    6:*/		if ( regs.CR[0].eq ) { return 0x821A5E74;  }
		/* 821A5E5Ch case    6:*/		return 0x821A5E60;
	}
	return 0x821A5E60;
} // Block from 821A5E44h-821A5E60h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A5E60h
// Function '?ReplaceCombinedDependency@Compiler@D3DXShader@@AAAXPAVInstruction@2@PAVDependency@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5E60);
		  /* 821A5E60h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A5E60h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A5E60h case    0:*/		return 0x821A5E64;
		  /* 821A5E64h */ case    1:  		/* lwz R10, <#[R3 + 12]> */
		/* 821A5E64h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A5E64h case    1:*/		return 0x821A5E68;
		  /* 821A5E68h */ case    2:  		/* addi R11, R11, 1 */
		/* 821A5E68h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A5E68h case    2:*/		return 0x821A5E6C;
		  /* 821A5E6Ch */ case    3:  		/* cmplw CR6, R11, R10 */
		/* 821A5E6Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A5E6Ch case    3:*/		return 0x821A5E70;
		  /* 821A5E70h */ case    4:  		/* bc 4, CR6_GT, 16 */
		/* 821A5E70h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821A5E80;  }
		/* 821A5E70h case    4:*/		return 0x821A5E74;
	}
	return 0x821A5E74;
} // Block from 821A5E60h-821A5E74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A5E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5E74);
		  /* 821A5E74h */ case    0:  		/* li R4, 1 */
		/* 821A5E74h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A5E74h case    0:*/		return 0x821A5E78;
		  /* 821A5E78h */ case    1:  		/* mr R3, R20 */
		/* 821A5E78h case    1:*/		regs.R3 = regs.R20;
		/* 821A5E78h case    1:*/		return 0x821A5E7C;
		  /* 821A5E7Ch */ case    2:  		/* bl -101812 */
		/* 821A5E7Ch case    2:*/		regs.LR = 0x821A5E80; return 0x8218D0C8;
		/* 821A5E7Ch case    2:*/		return 0x821A5E80;
	}
	return 0x821A5E80;
} // Block from 821A5E74h-821A5E80h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5E80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5E80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5E80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5E80);
		  /* 821A5E80h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A5E80h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A5E80h case    0:*/		return 0x821A5E84;
		  /* 821A5E84h */ case    1:  		/* addi R10, R11, 4 */
		/* 821A5E84h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821A5E84h case    1:*/		return 0x821A5E88;
		  /* 821A5E88h */ case    2:  		/* addi R9, R11, 1 */
		/* 821A5E88h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821A5E88h case    2:*/		return 0x821A5E8C;
		  /* 821A5E8Ch */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821A5E8Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821A5E8Ch case    3:*/		return 0x821A5E90;
		  /* 821A5E90h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821A5E90h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821A5E90h case    4:*/		return 0x821A5E94;
		  /* 821A5E94h */ case    5:  		/* stwx R28, <#[R11 + R3]> */
		/* 821A5E94h case    5:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821A5E94h case    5:*/		return 0x821A5E98;
		  /* 821A5E98h */ case    6:  		/* cmplwi CR6, R19, 0 */
		/* 821A5E98h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821A5E98h case    6:*/		return 0x821A5E9C;
		  /* 821A5E9Ch */ case    7:  		/* bc 12, CR6_EQ, 48 */
		/* 821A5E9Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821A5ECC;  }
		/* 821A5E9Ch case    7:*/		return 0x821A5EA0;
		  /* 821A5EA0h */ case    8:  		/* addi R11, R26, -2 */
		/* 821A5EA0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R26,0xFFFFFFFE);
		/* 821A5EA0h case    8:*/		return 0x821A5EA4;
		  /* 821A5EA4h */ case    9:  		/* cmplw CR6, R21, R11 */
		/* 821A5EA4h case    9:*/		cpu::op::cmplw<6>(regs,regs.R21,regs.R11);
		/* 821A5EA4h case    9:*/		return 0x821A5EA8;
		  /* 821A5EA8h */ case   10:  		/* bc 12, CR6_GT, 36 */
		/* 821A5EA8h case   10:*/		if ( regs.CR[6].gt ) { return 0x821A5ECC;  }
		/* 821A5EA8h case   10:*/		return 0x821A5EAC;
		  /* 821A5EACh */ case   11:  		/* li R5, 49 */
		/* 821A5EACh case   11:*/		cpu::op::li<0>(regs,&regs.R5,0x31);
		/* 821A5EACh case   11:*/		return 0x821A5EB0;
		  /* 821A5EB0h */ case   12:  		/* li R4, 8 */
		/* 821A5EB0h case   12:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821A5EB0h case   12:*/		return 0x821A5EB4;
		  /* 821A5EB4h */ case   13:  		/* mr R3, R22 */
		/* 821A5EB4h case   13:*/		regs.R3 = regs.R22;
		/* 821A5EB4h case   13:*/		return 0x821A5EB8;
		  /* 821A5EB8h */ case   14:  		/* bl -267720 */
		/* 821A5EB8h case   14:*/		regs.LR = 0x821A5EBC; return 0x821648F0;
		/* 821A5EB8h case   14:*/		return 0x821A5EBC;
		  /* 821A5EBCh */ case   15:  		/* stw R28, <#[R3]> */
		/* 821A5EBCh case   15:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R3 + 0x00000000) );
		/* 821A5EBCh case   15:*/		return 0x821A5EC0;
		  /* 821A5EC0h */ case   16:  		/* lwz R11, <#[R19 + 20]> */
		/* 821A5EC0h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000014) );
		/* 821A5EC0h case   16:*/		return 0x821A5EC4;
		  /* 821A5EC4h */ case   17:  		/* stw R11, <#[R3 + 4]> */
		/* 821A5EC4h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A5EC4h case   17:*/		return 0x821A5EC8;
		  /* 821A5EC8h */ case   18:  		/* stw R3, <#[R19 + 20]> */
		/* 821A5EC8h case   18:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R19 + 0x00000014) );
		/* 821A5EC8h case   18:*/		return 0x821A5ECC;
	}
	return 0x821A5ECC;
} // Block from 821A5E80h-821A5ECCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A5ECCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5ECC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5ECC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5ECC);
		  /* 821A5ECCh */ case    0:  		/* li R3, 1 */
		/* 821A5ECCh case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821A5ECCh case    0:*/		return 0x821A5ED0;
	}
	return 0x821A5ED0;
} // Block from 821A5ECCh-821A5ED0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A5ED0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5ED0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5ED0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5ED0);
		  /* 821A5ED0h */ case    0:  		/* addi R1, R1, 208 */
		/* 821A5ED0h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xD0);
		/* 821A5ED0h case    0:*/		return 0x821A5ED4;
		  /* 821A5ED4h */ case    1:  		/* b -1133656 */
		/* 821A5ED4h case    1:*/		return 0x8209127C;
		/* 821A5ED4h case    1:*/		return 0x821A5ED8;
	}
	return 0x821A5ED8;
} // Block from 821A5ED0h-821A5ED8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A5ED8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5ED8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5ED8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5ED8);
		  /* 821A5ED8h */ case    0:  		/* li R4, 4800 */
		/* 821A5ED8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821A5ED8h case    0:*/		return 0x821A5EDC;
		  /* 821A5EDCh */ case    1:  		/* mr R3, R22 */
		/* 821A5EDCh case    1:*/		regs.R3 = regs.R22;
		/* 821A5EDCh case    1:*/		return 0x821A5EE0;
		  /* 821A5EE0h */ case    2:  		/* bl -344184 */
		/* 821A5EE0h case    2:*/		regs.LR = 0x821A5EE4; return 0x82151E68;
		/* 821A5EE0h case    2:*/		return 0x821A5EE4;
	}
	return 0x821A5EE4;
} // Block from 821A5ED8h-821A5EE4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A5EE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5EE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5EE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5EE4);
		  /* 821A5EE4h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A5EE4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A5EE4h case    0:*/		return 0x821A5EE8;
		  /* 821A5EE8h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 821A5EE8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A5F0C;  }
		/* 821A5EE8h case    1:*/		return 0x821A5EEC;
		  /* 821A5EECh */ case    2:  		/* lwz R11, <#[R28]> */
		/* 821A5EECh case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A5EECh case    2:*/		return 0x821A5EF0;
		  /* 821A5EF0h */ case    3:  		/* stw R31, <#[R29]> */
		/* 821A5EF0h case    3:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821A5EF0h case    3:*/		return 0x821A5EF4;
		  /* 821A5EF4h */ case    4:  		/* rlwinm R11, R11, 0, 19, 2 */
		/* 821A5EF4h case    4:*/		cpu::op::rlwinm<0,0,19,2>(regs,&regs.R11,regs.R11);
		/* 821A5EF4h case    4:*/		return 0x821A5EF8;
		  /* 821A5EF8h */ case    5:  		/* stw R11, <#[R28]> */
		/* 821A5EF8h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A5EF8h case    5:*/		return 0x821A5EFC;
		  /* 821A5EFCh */ case    6:  		/* lwz R11, <#[R23]> */
		/* 821A5EFCh case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821A5EFCh case    6:*/		return 0x821A5F00;
		  /* 821A5F00h */ case    7:  		/* stw R11, <#[R28 + 12]> */
		/* 821A5F00h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A5F00h case    7:*/		return 0x821A5F04;
		  /* 821A5F04h */ case    8:  		/* stw R28, <#[R23]> */
		/* 821A5F04h case    8:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R23 + 0x00000000) );
		/* 821A5F04h case    8:*/		return 0x821A5F08;
		  /* 821A5F08h */ case    9:  		/* b 24 */
		/* 821A5F08h case    9:*/		return 0x821A5F20;
		/* 821A5F08h case    9:*/		return 0x821A5F0C;
	}
	return 0x821A5F0C;
} // Block from 821A5EE4h-821A5F0Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A5F0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5F0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5F0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5F0C);
		  /* 821A5F0Ch */ case    0:  		/* li R6, 0 */
		/* 821A5F0Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A5F0Ch case    0:*/		return 0x821A5F10;
		  /* 821A5F10h */ case    1:  		/* mr R5, R25 */
		/* 821A5F10h case    1:*/		regs.R5 = regs.R25;
		/* 821A5F10h case    1:*/		return 0x821A5F14;
		  /* 821A5F14h */ case    2:  		/* mr R4, R28 */
		/* 821A5F14h case    2:*/		regs.R4 = regs.R28;
		/* 821A5F14h case    2:*/		return 0x821A5F18;
		  /* 821A5F18h */ case    3:  		/* mr R3, R22 */
		/* 821A5F18h case    3:*/		regs.R3 = regs.R22;
		/* 821A5F18h case    3:*/		return 0x821A5F1C;
		  /* 821A5F1Ch */ case    4:  		/* bl -233676 */
		/* 821A5F1Ch case    4:*/		regs.LR = 0x821A5F20; return 0x8216CE50;
		/* 821A5F1Ch case    4:*/		return 0x821A5F20;
	}
	return 0x821A5F20;
} // Block from 821A5F0Ch-821A5F20h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A5F20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5F20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5F20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5F20);
		  /* 821A5F20h */ case    0:  		/* mr R28, R31 */
		/* 821A5F20h case    0:*/		regs.R28 = regs.R31;
		/* 821A5F20h case    0:*/		return 0x821A5F24;
		  /* 821A5F24h */ case    1:  		/* cmplwi CR6, R19, 0 */
		/* 821A5F24h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821A5F24h case    1:*/		return 0x821A5F28;
		  /* 821A5F28h */ case    2:  		/* bc 12, CR6_EQ, -92 */
		/* 821A5F28h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A5ECC;  }
		/* 821A5F28h case    2:*/		return 0x821A5F2C;
		  /* 821A5F2Ch */ case    3:  		/* cmplw CR6, R19, R31 */
		/* 821A5F2Ch case    3:*/		cpu::op::cmplw<6>(regs,regs.R19,regs.R31);
		/* 821A5F2Ch case    3:*/		return 0x821A5F30;
		  /* 821A5F30h */ case    4:  		/* bc 12, CR6_EQ, -1068 */
		/* 821A5F30h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A5B04;  }
		/* 821A5F30h case    4:*/		return 0x821A5F34;
		  /* 821A5F34h */ case    5:  		/* lwz R11, <#[R19 + 20]> */
		/* 821A5F34h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000014) );
		/* 821A5F34h case    5:*/		return 0x821A5F38;
		  /* 821A5F38h */ case    6:  		/* b 20 */
		/* 821A5F38h case    6:*/		return 0x821A5F4C;
		/* 821A5F38h case    6:*/		return 0x821A5F3C;
		  /* 821A5F3Ch */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821A5F3Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A5F3Ch case    7:*/		return 0x821A5F40;
		  /* 821A5F40h */ case    8:  		/* cmplw CR6, R10, R31 */
		/* 821A5F40h case    8:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A5F40h case    8:*/		return 0x821A5F44;
		  /* 821A5F44h */ case    9:  		/* bc 12, CR6_EQ, -1088 */
		/* 821A5F44h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A5B04;  }
		/* 821A5F44h case    9:*/		return 0x821A5F48;
		  /* 821A5F48h */ case   10:  		/* lwz R11, <#[R11 + 4]> */
		/* 821A5F48h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821A5F48h case   10:*/		return 0x821A5F4C;
	}
	return 0x821A5F4C;
} // Block from 821A5F20h-821A5F4Ch (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A5F4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5F4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5F4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5F4C);
		  /* 821A5F4Ch */ case    0:  		/* cmplwi CR6, R11, 0 */
		/* 821A5F4Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A5F4Ch case    0:*/		return 0x821A5F50;
		  /* 821A5F50h */ case    1:  		/* bc 4, CR6_EQ, -20 */
		/* 821A5F50h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A5F3C;  }
		/* 821A5F50h case    1:*/		return 0x821A5F54;
		  /* 821A5F54h */ case    2:  		/* mr R5, R19 */
		/* 821A5F54h case    2:*/		regs.R5 = regs.R19;
		/* 821A5F54h case    2:*/		return 0x821A5F58;
		  /* 821A5F58h */ case    3:  		/* mr R4, R31 */
		/* 821A5F58h case    3:*/		regs.R4 = regs.R31;
		/* 821A5F58h case    3:*/		return 0x821A5F5C;
		  /* 821A5F5Ch */ case    4:  		/* mr R3, R22 */
		/* 821A5F5Ch case    4:*/		regs.R3 = regs.R22;
		/* 821A5F5Ch case    4:*/		return 0x821A5F60;
		  /* 821A5F60h */ case    5:  		/* bl -42296 */
		/* 821A5F60h case    5:*/		regs.LR = 0x821A5F64; return 0x8219BA28;
		/* 821A5F60h case    5:*/		return 0x821A5F64;
		  /* 821A5F64h */ case    6:  		/* mr R10, R3 */
		/* 821A5F64h case    6:*/		regs.R10 = regs.R3;
		/* 821A5F64h case    6:*/		return 0x821A5F68;
		  /* 821A5F68h */ case    7:  		/* mr R4, R31 */
		/* 821A5F68h case    7:*/		regs.R4 = regs.R31;
		/* 821A5F68h case    7:*/		return 0x821A5F6C;
		  /* 821A5F6Ch */ case    8:  		/* mr R3, R22 */
		/* 821A5F6Ch case    8:*/		regs.R3 = regs.R22;
		/* 821A5F6Ch case    8:*/		return 0x821A5F70;
		  /* 821A5F70h */ case    9:  		/* bl -42152 */
		/* 821A5F70h case    9:*/		regs.LR = 0x821A5F74; return 0x8219BAC8;
		/* 821A5F70h case    9:*/		return 0x821A5F74;
		  /* 821A5F74h */ case   10:  		/* rlwinm. R11, R10, 0, 24, 31 */
		/* 821A5F74h case   10:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R10);
		/* 821A5F74h case   10:*/		return 0x821A5F78;
		  /* 821A5F78h */ case   11:  		/* bc 12, CR0_EQ, -224 */
		/* 821A5F78h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A5E98;  }
		/* 821A5F78h case   11:*/		return 0x821A5F7C;
		  /* 821A5F7Ch */ case   12:  		/* b -1144 */
		/* 821A5F7Ch case   12:*/		return 0x821A5B04;
		/* 821A5F7Ch case   12:*/		return 0x821A5F80;
	}
	return 0x821A5F80;
} // Block from 821A5F4Ch-821A5F80h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A5F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A5F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A5F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A5F80);
		  /* 821A5F80h */ case    0:  		/* mfspr R12, LR */
		/* 821A5F80h case    0:*/		regs.R12 = regs.LR;
		/* 821A5F80h case    0:*/		return 0x821A5F84;
		  /* 821A5F84h */ case    1:  		/* bl -1133924 */
		/* 821A5F84h case    1:*/		regs.LR = 0x821A5F88; return 0x82091220;
		/* 821A5F84h case    1:*/		return 0x821A5F88;
		  /* 821A5F88h */ case    2:  		/* stwu R1, <#[R1 - 256]> */
		/* 821A5F88h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF00) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF00);
		/* 821A5F88h case    2:*/		return 0x821A5F8C;
		  /* 821A5F8Ch */ case    3:  		/* ld R11, <#[R4]> */
		/* 821A5F8Ch case    3:*/		cpu::mem::load64( regs, &regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821A5F8Ch case    3:*/		return 0x821A5F90;
		  /* 821A5F90h */ case    4:  		/* li R30, 0 */
		/* 821A5F90h case    4:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A5F90h case    4:*/		return 0x821A5F94;
		  /* 821A5F94h */ case    5:  		/* lwz R10, <#[R4 + 8]> */
		/* 821A5F94h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821A5F94h case    5:*/		return 0x821A5F98;
		  /* 821A5F98h */ case    6:  		/* mr R27, R7 */
		/* 821A5F98h case    6:*/		regs.R27 = regs.R7;
		/* 821A5F98h case    6:*/		return 0x821A5F9C;
		  /* 821A5F9Ch */ case    7:  		/* lwz R9, <#[R5 + 8]> */
		/* 821A5F9Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x00000008) );
		/* 821A5F9Ch case    7:*/		return 0x821A5FA0;
		  /* 821A5FA0h */ case    8:  		/* mr R23, R3 */
		/* 821A5FA0h case    8:*/		regs.R23 = regs.R3;
		/* 821A5FA0h case    8:*/		return 0x821A5FA4;
		  /* 821A5FA4h */ case    9:  		/* stw R7, <#[R1 + 308]> */
		/* 821A5FA4h case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x00000134) );
		/* 821A5FA4h case    9:*/		return 0x821A5FA8;
		  /* 821A5FA8h */ case   10:  		/* mr R15, R5 */
		/* 821A5FA8h case   10:*/		regs.R15 = regs.R5;
		/* 821A5FA8h case   10:*/		return 0x821A5FAC;
		  /* 821A5FACh */ case   11:  		/* stw R3, <#[R1 + 276]> */
		/* 821A5FACh case   11:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000114) );
		/* 821A5FACh case   11:*/		return 0x821A5FB0;
		  /* 821A5FB0h */ case   12:  		/* li R25, 3 */
		/* 821A5FB0h case   12:*/		cpu::op::li<0>(regs,&regs.R25,0x3);
		/* 821A5FB0h case   12:*/		return 0x821A5FB4;
		  /* 821A5FB4h */ case   13:  		/* li R26, 1 */
		/* 821A5FB4h case   13:*/		cpu::op::li<0>(regs,&regs.R26,0x1);
		/* 821A5FB4h case   13:*/		return 0x821A5FB8;
		  /* 821A5FB8h */ case   14:  		/* stw R30, <#[R1 + 80]> */
		/* 821A5FB8h case   14:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821A5FB8h case   14:*/		return 0x821A5FBC;
		  /* 821A5FBCh */ case   15:  		/* rlwinm. R7, R10, 0, 27, 31 */
		/* 821A5FBCh case   15:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R7,regs.R10);
		/* 821A5FBCh case   15:*/		return 0x821A5FC0;
		  /* 821A5FC0h */ case   16:  		/* std R11, <#[R1 + 88]> */
		/* 821A5FC0h case   16:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821A5FC0h case   16:*/		return 0x821A5FC4;
		  /* 821A5FC4h */ case   17:  		/* li R31, 0 */
		/* 821A5FC4h case   17:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A5FC4h case   17:*/		return 0x821A5FC8;
		  /* 821A5FC8h */ case   18:  		/* li R8, 0 */
		/* 821A5FC8h case   18:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A5FC8h case   18:*/		return 0x821A5FCC;
		  /* 821A5FCCh */ case   19:  		/* rlwinm R29, R9, 18, 29, 31 */
		/* 821A5FCCh case   19:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R29,regs.R9);
		/* 821A5FCCh case   19:*/		return 0x821A5FD0;
		  /* 821A5FD0h */ case   20:  		/* bc 12, CR0_EQ, 152 */
		/* 821A5FD0h case   20:*/		if ( regs.CR[0].eq ) { return 0x821A6068;  }
		/* 821A5FD0h case   20:*/		return 0x821A5FD4;
		  /* 821A5FD4h */ case   21:  		/* rlwinm R9, R10, 0, 0, 31 */
		/* 821A5FD4h case   21:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R10);
		/* 821A5FD4h case   21:*/		return 0x821A5FD8;
		  /* 821A5FD8h */ case   22:  		/* li R11, 0 */
		/* 821A5FD8h case   22:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A5FD8h case   22:*/		return 0x821A5FDC;
		  /* 821A5FDCh */ case   23:  		/* rlwinm R3, R9, 0, 27, 31 */
		/* 821A5FDCh case   23:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R9);
		/* 821A5FDCh case   23:*/		return 0x821A5FE0;
		  /* 821A5FE0h */ case   24:  		/* addi R9, R11, 3 */
		/* 821A5FE0h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x3);
		/* 821A5FE0h case   24:*/		return 0x821A5FE4;
		  /* 821A5FE4h */ case   25:  		/* li R7, 2 */
		/* 821A5FE4h case   25:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821A5FE4h case   25:*/		return 0x821A5FE8;
		  /* 821A5FE8h */ case   26:  		/* rldicl R9, R9, 0, 58 */
		/* 821A5FE8h case   26:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R9,regs.R9);
		/* 821A5FE8h case   26:*/		return 0x821A5FEC;
		  /* 821A5FECh */ case   27:  		/* rlwinm R5, R11, 29, 3, 28 */
		/* 821A5FECh case   27:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R5,regs.R11);
		/* 821A5FECh case   27:*/		return 0x821A5FF0;
		  /* 821A5FF0h */ case   28:  		/* addi R28, R1, 88 */
		/* 821A5FF0h case   28:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x58);
		/* 821A5FF0h case   28:*/		return 0x821A5FF4;
		  /* 821A5FF4h */ case   29:  		/* sld R9, R7, R9 */
		/* 821A5FF4h case   29:*/		cpu::op::sld<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821A5FF4h case   29:*/		return 0x821A5FF8;
		  /* 821A5FF8h */ case   30:  		/* ldx R7, <#[R5 + R28]> */
		/* 821A5FF8h case   30:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R5 + regs.R28 + 0x00000000) );
		/* 821A5FF8h case   30:*/		return 0x821A5FFC;
		  /* 821A5FFCh */ case   31:  		/* addi R9, R9, -1 */
		/* 821A5FFCh case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0xFFFFFFFF);
		/* 821A5FFCh case   31:*/		return 0x821A6000;
		  /* 821A6000h */ case   32:  		/* rldicl R5, R11, 0, 58 */
		/* 821A6000h case   32:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R5,regs.R11);
		/* 821A6000h case   32:*/		return 0x821A6004;
		  /* 821A6004h */ case   33:  		/* li R28, -1 */
		/* 821A6004h case   33:*/		cpu::op::li<0>(regs,&regs.R28,0xFFFFFFFF);
		/* 821A6004h case   33:*/		return 0x821A6008;
		  /* 821A6008h */ case   34:  		/* and R9, R9, R7 */
		/* 821A6008h case   34:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821A6008h case   34:*/		return 0x821A600C;
		  /* 821A600Ch */ case   35:  		/* sld R7, R28, R5 */
		/* 821A600Ch case   35:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R28,regs.R5);
		/* 821A600Ch case   35:*/		return 0x821A6010;
		  /* 821A6010h */ case   36:  		/* and R9, R9, R7 */
		/* 821A6010h case   36:*/		cpu::op::and<0>(regs,&regs.R9,regs.R9,regs.R7);
		/* 821A6010h case   36:*/		return 0x821A6014;
		  /* 821A6014h */ case   37:  		/* cmplwi CR6, R6, 0 */
		/* 821A6014h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000000);
		/* 821A6014h case   37:*/		return 0x821A6018;
		  /* 821A6018h */ case   38:  		/* srd R9, R9, R5 */
		/* 821A6018h case   38:*/		cpu::op::srd<0>(regs,&regs.R9,regs.R9,regs.R5);
		/* 821A6018h case   38:*/		return 0x821A601C;
		  /* 821A601Ch */ case   39:  		/* rlwinm R9, R9, 0, 0, 31 */
		/* 821A601Ch case   39:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R9);
		/* 821A601Ch case   39:*/		return 0x821A6020;
		  /* 821A6020h */ case   40:  		/* rlwinm R7, R9, 30, 2, 31 */
		/* 821A6020h case   40:*/		cpu::op::rlwinm<0,30,2,31>(regs,&regs.R7,regs.R9);
		/* 821A6020h case   40:*/		return 0x821A6024;
		  /* 821A6024h */ case   41:  		/* rlwinm R9, R9, 0, 30, 31 */
		/* 821A6024h case   41:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R9,regs.R9);
		/* 821A6024h case   41:*/		return 0x821A6028;
		  /* 821A6028h */ case   42:  		/* bc 4, CR6_EQ, 16 */
		/* 821A6028h case   42:*/		if ( !regs.CR[6].eq ) { return 0x821A6038;  }
		/* 821A6028h case   42:*/		return 0x821A602C;
		  /* 821A602Ch */ case   43:  		/* mr R5, R7 */
		/* 821A602Ch case   43:*/		regs.R5 = regs.R7;
		/* 821A602Ch case   43:*/		return 0x821A6030;
		  /* 821A6030h */ case   44:  		/* mr R7, R9 */
		/* 821A6030h case   44:*/		regs.R7 = regs.R9;
		/* 821A6030h case   44:*/		return 0x821A6034;
		  /* 821A6034h */ case   45:  		/* mr R9, R5 */
		/* 821A6034h case   45:*/		regs.R9 = regs.R5;
		/* 821A6034h case   45:*/		return 0x821A6038;
	}
	return 0x821A6038;
} // Block from 821A5F80h-821A6038h (46 instructions)

//////////////////////////////////////////////////////
// Block at 821A6038h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6038( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6038) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6038);
		  /* 821A6038h */ case    0:  		/* rlwinm R5, R9, 1, 0, 30 */
		/* 821A6038h case    0:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R5,regs.R9);
		/* 821A6038h case    0:*/		return 0x821A603C;
		  /* 821A603Ch */ case    1:  		/* slw R9, R26, R9 */
		/* 821A603Ch case    1:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R26,regs.R9);
		/* 821A603Ch case    1:*/		return 0x821A6040;
		  /* 821A6040h */ case    2:  		/* slw R28, R25, R5 */
		/* 821A6040h case    2:*/		cpu::op::slw<0>(regs,&regs.R28,regs.R25,regs.R5);
		/* 821A6040h case    2:*/		return 0x821A6044;
		  /* 821A6044h */ case    3:  		/* andc R31, R31, R28 */
		/* 821A6044h case    3:*/		cpu::op::andc<0>(regs,&regs.R31,regs.R31,regs.R28);
		/* 821A6044h case    3:*/		return 0x821A6048;
		  /* 821A6048h */ case    4:  		/* slw R7, R7, R5 */
		/* 821A6048h case    4:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R7,regs.R5);
		/* 821A6048h case    4:*/		return 0x821A604C;
		  /* 821A604Ch */ case    5:  		/* addi R8, R8, 1 */
		/* 821A604Ch case    5:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821A604Ch case    5:*/		return 0x821A6050;
		  /* 821A6050h */ case    6:  		/* or R30, R9, R30 */
		/* 821A6050h case    6:*/		cpu::op::or<0>(regs,&regs.R30,regs.R9,regs.R30);
		/* 821A6050h case    6:*/		return 0x821A6054;
		  /* 821A6054h */ case    7:  		/* or R31, R31, R7 */
		/* 821A6054h case    7:*/		cpu::op::or<0>(regs,&regs.R31,regs.R31,regs.R7);
		/* 821A6054h case    7:*/		return 0x821A6058;
		  /* 821A6058h */ case    8:  		/* addi R11, R11, 4 */
		/* 821A6058h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A6058h case    8:*/		return 0x821A605C;
		  /* 821A605Ch */ case    9:  		/* cmplw CR6, R8, R3 */
		/* 821A605Ch case    9:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R3);
		/* 821A605Ch case    9:*/		return 0x821A6060;
		  /* 821A6060h */ case   10:  		/* bc 12, CR6_LT, -128 */
		/* 821A6060h case   10:*/		if ( regs.CR[6].lt ) { return 0x821A5FE0;  }
		/* 821A6060h case   10:*/		return 0x821A6064;
		  /* 821A6064h */ case   11:  		/* stw R30, <#[R1 + 80]> */
		/* 821A6064h case   11:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821A6064h case   11:*/		return 0x821A6068;
	}
	return 0x821A6068;
} // Block from 821A6038h-821A6068h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A6068h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6068( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6068) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6068);
		  /* 821A6068h */ case    0:  		/* lis R11, -28311 */
		/* 821A6068h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821A6068h case    0:*/		return 0x821A606C;
		  /* 821A606Ch */ case    1:  		/* lis R9, 0 */
		/* 821A606Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R9,0x0);
		/* 821A606Ch case    1:*/		return 0x821A6070;
		  /* 821A6070h */ case    2:  		/* ori R11, R11, 5192 */
		/* 821A6070h case    2:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821A6070h case    2:*/		return 0x821A6074;
		  /* 821A6074h */ case    3:  		/* ori R9, R9, 36262 */
		/* 821A6074h case    3:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x8DA6);
		/* 821A6074h case    3:*/		return 0x821A6078;
		  /* 821A6078h */ case    4:  		/* rldicl R8, R30, 0, 32 */
		/* 821A6078h case    4:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R8,regs.R30);
		/* 821A6078h case    4:*/		return 0x821A607C;
		  /* 821A607Ch */ case    5:  		/* rldimi R11, R9, 32, 0 */
		/* 821A607Ch case    5:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R9);
		/* 821A607Ch case    5:*/		return 0x821A6080;
		  /* 821A6080h */ case    6:  		/* li R28, 0 */
		/* 821A6080h case    6:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A6080h case    6:*/		return 0x821A6084;
		  /* 821A6084h */ case    7:  		/* srd R11, R11, R8 */
		/* 821A6084h case    7:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821A6084h case    7:*/		return 0x821A6088;
		  /* 821A6088h */ case    8:  		/* srd R11, R11, R8 */
		/* 821A6088h case    8:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821A6088h case    8:*/		return 0x821A608C;
		  /* 821A608Ch */ case    9:  		/* srd R11, R11, R8 */
		/* 821A608Ch case    9:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R8);
		/* 821A608Ch case    9:*/		return 0x821A6090;
		  /* 821A6090h */ case   10:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A6090h case   10:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A6090h case   10:*/		return 0x821A6094;
		  /* 821A6094h */ case   11:  		/* cmplwi CR6, R27, 0 */
		/* 821A6094h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821A6094h case   11:*/		return 0x821A6098;
		  /* 821A6098h */ case   12:  		/* rlwimi R10, R11, 5, 24, 26 */
		/* 821A6098h case   12:*/		cpu::op::rlwimi<0,5,24,26>(regs,&regs.R10,regs.R11);
		/* 821A6098h case   12:*/		return 0x821A609C;
		  /* 821A609Ch */ case   13:  		/* stw R11, <#[R1 + 84]> */
		/* 821A609Ch case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821A609Ch case   13:*/		return 0x821A60A0;
		  /* 821A60A0h */ case   14:  		/* subf R24, R11, R29 */
		/* 821A60A0h case   14:*/		cpu::op::subf<0>(regs,&regs.R24,regs.R11,regs.R29);
		/* 821A60A0h case   14:*/		return 0x821A60A4;
		  /* 821A60A4h */ case   15:  		/* stw R10, <#[R4 + 8]> */
		/* 821A60A4h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R4 + 0x00000008) );
		/* 821A60A4h case   15:*/		return 0x821A60A8;
		  /* 821A60A8h */ case   16:  		/* stw R24, <#[R1 + 88]> */
		/* 821A60A8h case   16:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x00000058) );
		/* 821A60A8h case   16:*/		return 0x821A60AC;
		  /* 821A60ACh */ case   17:  		/* bc 12, CR6_EQ, 12 */
		/* 821A60ACh case   17:*/		if ( regs.CR[6].eq ) { return 0x821A60B8;  }
		/* 821A60ACh case   17:*/		return 0x821A60B0;
		  /* 821A60B0h */ case   18:  		/* lwz R14, <#[R27]> */
		/* 821A60B0h case   18:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R27 + 0x00000000) );
		/* 821A60B0h case   18:*/		return 0x821A60B4;
		  /* 821A60B4h */ case   19:  		/* b 8 */
		/* 821A60B4h case   19:*/		return 0x821A60BC;
		/* 821A60B4h case   19:*/		return 0x821A60B8;
	}
	return 0x821A60B8;
} // Block from 821A6068h-821A60B8h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821A60B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A60B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A60B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A60B8);
		  /* 821A60B8h */ case    0:  		/* li R14, 228 */
		/* 821A60B8h case    0:*/		cpu::op::li<0>(regs,&regs.R14,0xE4);
		/* 821A60B8h case    0:*/		return 0x821A60BC;
	}
	return 0x821A60BC;
} // Block from 821A60B8h-821A60BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A60BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A60BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A60BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A60BC);
		  /* 821A60BCh */ case    0:  		/* li R8, 0 */
		/* 821A60BCh case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A60BCh case    0:*/		return 0x821A60C0;
		  /* 821A60C0h */ case    1:  		/* cmplwi CR6, R29, 0 */
		/* 821A60C0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A60C0h case    1:*/		return 0x821A60C4;
		  /* 821A60C4h */ case    2:  		/* bc 12, CR6_EQ, 124 */
		/* 821A60C4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A6140;  }
		/* 821A60C4h case    2:*/		return 0x821A60C8;
		  /* 821A60C8h */ case    3:  		/* li R9, 0 */
		/* 821A60C8h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A60C8h case    3:*/		return 0x821A60CC;
		  /* 821A60CCh */ case    4:  		/* mtspr CTR, R29 */
		/* 821A60CCh case    4:*/		regs.CTR = regs.R29;
		/* 821A60CCh case    4:*/		return 0x821A60D0;
		  /* 821A60D0h */ case    5:  		/* li R10, 0 */
		/* 821A60D0h case    5:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A60D0h case    5:*/		return 0x821A60D4;
		  /* 821A60D4h */ case    6:  		/* slw R11, R26, R8 */
		/* 821A60D4h case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R26,regs.R8);
		/* 821A60D4h case    6:*/		return 0x821A60D8;
		  /* 821A60D8h */ case    7:  		/* and. R11, R11, R30 */
		/* 821A60D8h case    7:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821A60D8h case    7:*/		return 0x821A60DC;
		  /* 821A60DCh */ case    8:  		/* bc 12, CR0_EQ, 68 */
		/* 821A60DCh case    8:*/		if ( regs.CR[0].eq ) { return 0x821A6120;  }
		/* 821A60DCh case    8:*/		return 0x821A60E0;
		  /* 821A60E0h */ case    9:  		/* srw R11, R31, R10 */
		/* 821A60E0h case    9:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R31,regs.R10);
		/* 821A60E0h case    9:*/		return 0x821A60E4;
		  /* 821A60E4h */ case   10:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821A60E4h case   10:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821A60E4h case   10:*/		return 0x821A60E8;
		  /* 821A60E8h */ case   11:  		/* cmplwi CR6, R27, 0 */
		/* 821A60E8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821A60E8h case   11:*/		return 0x821A60EC;
		  /* 821A60ECh */ case   12:  		/* bc 4, CR6_EQ, 16 */
		/* 821A60ECh case   12:*/		if ( !regs.CR[6].eq ) { return 0x821A60FC;  }
		/* 821A60ECh case   12:*/		return 0x821A60F0;
		  /* 821A60F0h */ case   13:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821A60F0h case   13:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821A60F0h case   13:*/		return 0x821A60F4;
		  /* 821A60F4h */ case   14:  		/* srw R11, R14, R11 */
		/* 821A60F4h case   14:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R14,regs.R11);
		/* 821A60F4h case   14:*/		return 0x821A60F8;
		  /* 821A60F8h */ case   15:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821A60F8h case   15:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821A60F8h case   15:*/		return 0x821A60FC;
	}
	return 0x821A60FC;
} // Block from 821A60BCh-821A60FCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A60FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A60FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A60FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A60FC);
		  /* 821A60FCh */ case    0:  		/* slw R7, R11, R10 */
		/* 821A60FCh case    0:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R11,regs.R10);
		/* 821A60FCh case    0:*/		return 0x821A6100;
		  /* 821A6100h */ case    1:  		/* slw R11, R26, R10 */
		/* 821A6100h case    1:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R26,regs.R10);
		/* 821A6100h case    1:*/		return 0x821A6104;
		  /* 821A6104h */ case    2:  		/* addi R11, R11, -1 */
		/* 821A6104h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A6104h case    2:*/		return 0x821A6108;
		  /* 821A6108h */ case    3:  		/* andc R6, R14, R11 */
		/* 821A6108h case    3:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R14,regs.R11);
		/* 821A6108h case    3:*/		return 0x821A610C;
		  /* 821A610Ch */ case    4:  		/* and R11, R11, R14 */
		/* 821A610Ch case    4:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R14);
		/* 821A610Ch case    4:*/		return 0x821A6110;
		  /* 821A6110h */ case    5:  		/* rlwinm R6, R6, 2, 24, 29 */
		/* 821A6110h case    5:*/		cpu::op::rlwinm<0,2,24,29>(regs,&regs.R6,regs.R6);
		/* 821A6110h case    5:*/		return 0x821A6114;
		  /* 821A6114h */ case    6:  		/* or R11, R6, R11 */
		/* 821A6114h case    6:*/		cpu::op::or<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 821A6114h case    6:*/		return 0x821A6118;
		  /* 821A6118h */ case    7:  		/* or R14, R11, R7 */
		/* 821A6118h case    7:*/		cpu::op::or<0>(regs,&regs.R14,regs.R11,regs.R7);
		/* 821A6118h case    7:*/		return 0x821A611C;
		  /* 821A611Ch */ case    8:  		/* b 24 */
		/* 821A611Ch case    8:*/		return 0x821A6134;
		/* 821A611Ch case    8:*/		return 0x821A6120;
	}
	return 0x821A6120;
} // Block from 821A60FCh-821A6120h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A6120h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6120( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6120) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6120);
		  /* 821A6120h */ case    0:  		/* slw R11, R25, R9 */
		/* 821A6120h case    0:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R25,regs.R9);
		/* 821A6120h case    0:*/		return 0x821A6124;
		  /* 821A6124h */ case    1:  		/* slw R7, R8, R9 */
		/* 821A6124h case    1:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R8,regs.R9);
		/* 821A6124h case    1:*/		return 0x821A6128;
		  /* 821A6128h */ case    2:  		/* andc R11, R28, R11 */
		/* 821A6128h case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821A6128h case    2:*/		return 0x821A612C;
		  /* 821A612Ch */ case    3:  		/* addi R9, R9, 2 */
		/* 821A612Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x2);
		/* 821A612Ch case    3:*/		return 0x821A6130;
		  /* 821A6130h */ case    4:  		/* or R28, R11, R7 */
		/* 821A6130h case    4:*/		cpu::op::or<0>(regs,&regs.R28,regs.R11,regs.R7);
		/* 821A6130h case    4:*/		return 0x821A6134;
	}
	return 0x821A6134;
} // Block from 821A6120h-821A6134h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A6134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6134);
		  /* 821A6134h */ case    0:  		/* addi R8, R8, 1 */
		/* 821A6134h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821A6134h case    0:*/		return 0x821A6138;
		  /* 821A6138h */ case    1:  		/* addi R10, R10, 2 */
		/* 821A6138h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821A6138h case    1:*/		return 0x821A613C;
		  /* 821A613Ch */ case    2:  		/* bc 16, CR0_LT, -104 */
		/* 821A613Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A60D4;  }
		/* 821A613Ch case    2:*/		return 0x821A6140;
	}
	return 0x821A6140;
} // Block from 821A6134h-821A6140h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A6140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6140);
		  /* 821A6140h */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821A6140h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821A6140h case    0:*/		return 0x821A6144;
		  /* 821A6144h */ case    1:  		/* bc 12, CR6_EQ, 8 */
		/* 821A6144h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A614C;  }
		/* 821A6144h case    1:*/		return 0x821A6148;
		  /* 821A6148h */ case    2:  		/* stw R14, <#[R27]> */
		/* 821A6148h case    2:*/		cpu::mem::store32( regs, regs.R14, (uint32)(regs.R27 + 0x00000000) );
		/* 821A6148h case    2:*/		return 0x821A614C;
	}
	return 0x821A614C;
} // Block from 821A6140h-821A614Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A614Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A614C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A614C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A614C);
		  /* 821A614Ch */ case    0:  		/* cmplwi CR6, R24, 0 */
		/* 821A614Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R24,0x00000000);
		/* 821A614Ch case    0:*/		return 0x821A6150;
		  /* 821A6150h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821A6150h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A615C;  }
		/* 821A6150h case    1:*/		return 0x821A6154;
		  /* 821A6154h */ case    2:  		/* li R3, 0 */
		/* 821A6154h case    2:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A6154h case    2:*/		return 0x821A6158;
		  /* 821A6158h */ case    3:  		/* b 1572 */
		/* 821A6158h case    3:*/		return 0x821A677C;
		/* 821A6158h case    3:*/		return 0x821A615C;
	}
	return 0x821A615C;
} // Block from 821A614Ch-821A615Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A615Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A615C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A615C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A615C);
		  /* 821A615Ch */ case    0:  		/* cmplwi CR6, R27, 0 */
		/* 821A615Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821A615Ch case    0:*/		return 0x821A6160;
		  /* 821A6160h */ case    1:  		/* bc 4, CR6_EQ, 92 */
		/* 821A6160h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A61BC;  }
		/* 821A6160h case    1:*/		return 0x821A6164;
		  /* 821A6164h */ case    2:  		/* addi R30, R15, 4 */
		/* 821A6164h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R15,0x4);
		/* 821A6164h case    2:*/		return 0x821A6168;
		  /* 821A6168h */ case    3:  		/* lwz R31, <#[R30]> */
		/* 821A6168h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821A6168h case    3:*/		return 0x821A616C;
		  /* 821A616Ch */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821A616Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A616Ch case    4:*/		return 0x821A6170;
		  /* 821A6170h */ case    5:  		/* bc 12, CR6_EQ, 76 */
		/* 821A6170h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A61BC;  }
		/* 821A6170h case    5:*/		return 0x821A6174;
		  /* 821A6174h */ case    6:  		/* lwz R4, <#[R31 + 16]> */
		/* 821A6174h case    6:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821A6174h case    6:*/		return 0x821A6178;
		  /* 821A6178h */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 821A6178h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A6178h case    7:*/		return 0x821A617C;
		  /* 821A617Ch */ case    8:  		/* bc 12, CR6_EQ, 44 */
		/* 821A617Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821A61A8;  }
		/* 821A617Ch case    8:*/		return 0x821A6180;
		  /* 821A6180h */ case    9:  		/* lwz R11, <#[R31]> */
		/* 821A6180h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A6180h case    9:*/		return 0x821A6184;
		  /* 821A6184h */ case   10:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821A6184h case   10:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821A6184h case   10:*/		return 0x821A6188;
		  /* 821A6188h */ case   11:  		/* bc 12, CR0_EQ, 32 */
		/* 821A6188h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A61A8;  }
		/* 821A6188h case   11:*/		return 0x821A618C;
		  /* 821A618Ch */ case   12:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A618Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A618Ch case   12:*/		return 0x821A6190;
		  /* 821A6190h */ case   13:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A6190h case   13:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A6190h case   13:*/		return 0x821A6194;
		  /* 821A6194h */ case   14:  		/* cmplwi CR6, R11, 14080 */
		/* 821A6194h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003700);
		/* 821A6194h case   14:*/		return 0x821A6198;
		  /* 821A6198h */ case   15:  		/* bc 4, CR6_EQ, 16 */
		/* 821A6198h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821A61A8;  }
		/* 821A6198h case   15:*/		return 0x821A619C;
		  /* 821A619Ch */ case   16:  		/* mr R3, R23 */
		/* 821A619Ch case   16:*/		regs.R3 = regs.R23;
		/* 821A619Ch case   16:*/		return 0x821A61A0;
		  /* 821A61A0h */ case   17:  		/* lwz R5, <#[R23 + 660]> */
		/* 821A61A0h case   17:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R23 + 0x00000294) );
		/* 821A61A0h case   17:*/		return 0x821A61A4;
		  /* 821A61A4h */ case   18:  		/* bl 92084 */
		/* 821A61A4h case   18:*/		regs.LR = 0x821A61A8; return 0x821BC958;
		/* 821A61A4h case   18:*/		return 0x821A61A8;
	}
	return 0x821A61A8;
} // Block from 821A615Ch-821A61A8h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A61A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A61A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A61A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A61A8);
		  /* 821A61A8h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821A61A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A61A8h case    0:*/		return 0x821A61AC;
		  /* 821A61ACh */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A61ACh case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A61ACh case    1:*/		return 0x821A61B0;
		  /* 821A61B0h */ case    2:  		/* bc 4, CR6_EQ, -72 */
		/* 821A61B0h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A6168;  }
		/* 821A61B0h case    2:*/		return 0x821A61B4;
		  /* 821A61B4h */ case    3:  		/* addi R30, R31, 8 */
		/* 821A61B4h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 821A61B4h case    3:*/		return 0x821A61B8;
		  /* 821A61B8h */ case    4:  		/* b -80 */
		/* 821A61B8h case    4:*/		return 0x821A6168;
		/* 821A61B8h case    4:*/		return 0x821A61BC;
	}
	return 0x821A61BC;
} // Block from 821A61A8h-821A61BCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A61BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A61BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A61BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A61BC);
		  /* 821A61BCh */ case    0:  		/* lwz R11, <#[R15 + 8]> */
		/* 821A61BCh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 821A61BCh case    0:*/		return 0x821A61C0;
		  /* 821A61C0h */ case    1:  		/* mr R8, R24 */
		/* 821A61C0h case    1:*/		regs.R8 = regs.R24;
		/* 821A61C0h case    1:*/		return 0x821A61C4;
		  /* 821A61C4h */ case    2:  		/* li R5, 0 */
		/* 821A61C4h case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A61C4h case    2:*/		return 0x821A61C8;
		  /* 821A61C8h */ case    3:  		/* lwz R4, <#[R15 + 28]> */
		/* 821A61C8h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R15 + 0x0000001C) );
		/* 821A61C8h case    3:*/		return 0x821A61CC;
		  /* 821A61CCh */ case    4:  		/* rlwinm R7, R11, 13, 29, 31 */
		/* 821A61CCh case    4:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R7,regs.R11);
		/* 821A61CCh case    4:*/		return 0x821A61D0;
		  /* 821A61D0h */ case    5:  		/* rlwinm R6, R11, 25, 25, 31 */
		/* 821A61D0h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R6,regs.R11);
		/* 821A61D0h case    5:*/		return 0x821A61D4;
		  /* 821A61D4h */ case    6:  		/* mr R3, R23 */
		/* 821A61D4h case    6:*/		regs.R3 = regs.R23;
		/* 821A61D4h case    6:*/		return 0x821A61D8;
		  /* 821A61D8h */ case    7:  		/* bl 518080 */
		/* 821A61D8h case    7:*/		regs.LR = 0x821A61DC; return 0x82224998;
		/* 821A61D8h case    7:*/		return 0x821A61DC;
		  /* 821A61DCh */ case    8:  		/* lhz R11, <#[R15 + 14]> */
		/* 821A61DCh case    8:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R15 + 0x0000000E) );
		/* 821A61DCh case    8:*/		return 0x821A61E0;
		  /* 821A61E0h */ case    9:  		/* mr R21, R3 */
		/* 821A61E0h case    9:*/		regs.R21 = regs.R3;
		/* 821A61E0h case    9:*/		return 0x821A61E4;
		  /* 821A61E4h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821A61E4h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A61E4h case   10:*/		return 0x821A61E8;
		  /* 821A61E8h */ case   11:  		/* bc 12, CR0_EQ, 72 */
		/* 821A61E8h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A6230;  }
		/* 821A61E8h case   11:*/		return 0x821A61EC;
		  /* 821A61ECh */ case   12:  		/* li R31, 0 */
		/* 821A61ECh case   12:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A61ECh case   12:*/		return 0x821A61F0;
		  /* 821A61F0h */ case   13:  		/* cmplwi CR6, R29, 0 */
		/* 821A61F0h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A61F0h case   13:*/		return 0x821A61F4;
		  /* 821A61F4h */ case   14:  		/* bc 12, CR6_EQ, 60 */
		/* 821A61F4h case   14:*/		if ( regs.CR[6].eq ) { return 0x821A6230;  }
		/* 821A61F4h case   14:*/		return 0x821A61F8;
		  /* 821A61F8h */ case   15:  		/* li R30, 0 */
		/* 821A61F8h case   15:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A61F8h case   15:*/		return 0x821A61FC;
		  /* 821A61FCh */ case   16:  		/* mr R4, R31 */
		/* 821A61FCh case   16:*/		regs.R4 = regs.R31;
		/* 821A61FCh case   16:*/		return 0x821A6200;
		  /* 821A6200h */ case   17:  		/* mr R3, R15 */
		/* 821A6200h case   17:*/		regs.R3 = regs.R15;
		/* 821A6200h case   17:*/		return 0x821A6204;
		  /* 821A6204h */ case   18:  		/* bl 93796 */
		/* 821A6204h case   18:*/		regs.LR = 0x821A6208; return 0x821BD068;
		/* 821A6204h case   18:*/		return 0x821A6208;
		  /* 821A6208h */ case   19:  		/* srw R11, R14, R30 */
		/* 821A6208h case   19:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R14,regs.R30);
		/* 821A6208h case   19:*/		return 0x821A620C;
		  /* 821A620Ch */ case   20:  		/* mr R6, R3 */
		/* 821A620Ch case   20:*/		regs.R6 = regs.R3;
		/* 821A620Ch case   20:*/		return 0x821A6210;
		  /* 821A6210h */ case   21:  		/* li R5, 15 */
		/* 821A6210h case   21:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 821A6210h case   21:*/		return 0x821A6214;
		  /* 821A6214h */ case   22:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 821A6214h case   22:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 821A6214h case   22:*/		return 0x821A6218;
		  /* 821A6218h */ case   23:  		/* mr R3, R21 */
		/* 821A6218h case   23:*/		regs.R3 = regs.R21;
		/* 821A6218h case   23:*/		return 0x821A621C;
		  /* 821A621Ch */ case   24:  		/* bl 93796 */
		/* 821A621Ch case   24:*/		regs.LR = 0x821A6220; return 0x821BD080;
		/* 821A621Ch case   24:*/		return 0x821A6220;
		  /* 821A6220h */ case   25:  		/* addi R31, R31, 1 */
		/* 821A6220h case   25:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A6220h case   25:*/		return 0x821A6224;
		  /* 821A6224h */ case   26:  		/* addi R30, R30, 2 */
		/* 821A6224h case   26:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821A6224h case   26:*/		return 0x821A6228;
		  /* 821A6228h */ case   27:  		/* cmplw CR6, R31, R29 */
		/* 821A6228h case   27:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R29);
		/* 821A6228h case   27:*/		return 0x821A622C;
		  /* 821A622Ch */ case   28:  		/* bc 12, CR6_LT, -48 */
		/* 821A622Ch case   28:*/		if ( regs.CR[6].lt ) { return 0x821A61FC;  }
		/* 821A622Ch case   28:*/		return 0x821A6230;
	}
	return 0x821A6230;
} // Block from 821A61BCh-821A6230h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A6230h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6230( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6230) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6230);
		  /* 821A6230h */ case    0:  		/* rlwinm R11, R15, 0, 0, 30 */
		/* 821A6230h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R15);
		/* 821A6230h case    0:*/		return 0x821A6234;
		  /* 821A6234h */ case    1:  		/* rlwinm R10, R21, 0, 0, 30 */
		/* 821A6234h case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R21);
		/* 821A6234h case    1:*/		return 0x821A6238;
	}
	return 0x821A6238;
} // Block from 821A6230h-821A6238h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6238h
// Function '?CleanExportMerges@Compiler@D3DXShader@@AAAXPAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6238( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6238) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6238);
		  /* 821A6238h */ case    0:  		/* addi R11, R11, 36 */
		/* 821A6238h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A6238h case    0:*/		return 0x821A623C;
		  /* 821A623Ch */ case    1:  		/* addi R10, R10, 36 */
		/* 821A623Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A623Ch case    1:*/		return 0x821A6240;
		  /* 821A6240h */ case    2:  		/* addi R8, R11, -36 */
		/* 821A6240h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A6240h case    2:*/		return 0x821A6244;
		  /* 821A6244h */ case    3:  		/* addi R7, R10, -36 */
		/* 821A6244h case    3:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821A6244h case    3:*/		return 0x821A6248;
		  /* 821A6248h */ case    4:  		/* addi R9, R10, 4 */
		/* 821A6248h case    4:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A6248h case    4:*/		return 0x821A624C;
		  /* 821A624Ch */ case    5:  		/* lwz R6, <#[R11]> */
		/* 821A624Ch case    5:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A624Ch case    5:*/		return 0x821A6250;
		  /* 821A6250h */ case    6:  		/* stw R6, <#[R10]> */
		/* 821A6250h case    6:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6250h case    6:*/		return 0x821A6254;
		  /* 821A6254h */ case    7:  		/* lwz R6, <#[R11]> */
		/* 821A6254h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6254h case    7:*/		return 0x821A6258;
		  /* 821A6258h */ case    8:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821A6258h case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821A6258h case    8:*/		return 0x821A625C;
		  /* 821A625Ch */ case    9:  		/* stw R7, <#[R6]> */
		/* 821A625Ch case    9:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821A625Ch case    9:*/		return 0x821A6260;
		  /* 821A6260h */ case   10:  		/* stw R8, <#[R10 + 4]> */
		/* 821A6260h case   10:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A6260h case   10:*/		return 0x821A6264;
		  /* 821A6264h */ case   11:  		/* stw R9, <#[R11]> */
		/* 821A6264h case   11:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6264h case   11:*/		return 0x821A6268;
		  /* 821A6268h */ case   12:  		/* lwz R10, <#[R21 + 16]> */
		/* 821A6268h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000010) );
		/* 821A6268h case   12:*/		return 0x821A626C;
		  /* 821A626Ch */ case   13:  		/* lwz R11, <#[R21 + 20]> */
		/* 821A626Ch case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 821A626Ch case   13:*/		return 0x821A6270;
		  /* 821A6270h */ case   14:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 821A6270h case   14:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 821A6270h case   14:*/		return 0x821A6274;
		  /* 821A6274h */ case   15:  		/* rlwinm R10, R10, 0, 1, 31 */
		/* 821A6274h case   15:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R10,regs.R10);
		/* 821A6274h case   15:*/		return 0x821A6278;
		  /* 821A6278h */ case   16:  		/* stw R11, <#[R21 + 20]> */
		/* 821A6278h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000014) );
		/* 821A6278h case   16:*/		return 0x821A627C;
		  /* 821A627Ch */ case   17:  		/* stw R10, <#[R21 + 16]> */
		/* 821A627Ch case   17:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R21 + 0x00000010) );
		/* 821A627Ch case   17:*/		return 0x821A6280;
		  /* 821A6280h */ case   18:  		/* lwz R11, <#[R15 + 8]> */
		/* 821A6280h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 821A6280h case   18:*/		return 0x821A6284;
		  /* 821A6284h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A6284h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A6284h case   19:*/		return 0x821A6288;
		  /* 821A6288h */ case   20:  		/* bc 12, CR0_EQ, 16 */
		/* 821A6288h case   20:*/		if ( regs.CR[0].eq ) { return 0x821A6298;  }
		/* 821A6288h case   20:*/		return 0x821A628C;
		  /* 821A628Ch */ case   21:  		/* lwz R11, <#[R21 + 8]> */
		/* 821A628Ch case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821A628Ch case   21:*/		return 0x821A6290;
		  /* 821A6290h */ case   22:  		/* ori R11, R11, 1 */
		/* 821A6290h case   22:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A6290h case   22:*/		return 0x821A6294;
		  /* 821A6294h */ case   23:  		/* stw R11, <#[R21 + 8]> */
		/* 821A6294h case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821A6294h case   23:*/		return 0x821A6298;
	}
	return 0x821A6298;
} // Block from 821A6238h-821A6298h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821A6298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6298);
		  /* 821A6298h */ case    0:  		/* li R30, 0 */
		/* 821A6298h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A6298h case    0:*/		return 0x821A629C;
		  /* 821A629Ch */ case    1:  		/* addi R31, R21, 44 */
		/* 821A629Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R21,0x2C);
		/* 821A629Ch case    1:*/		return 0x821A62A0;
		  /* 821A62A0h */ case    2:  		/* subf R29, R21, R15 */
		/* 821A62A0h case    2:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R21,regs.R15);
		/* 821A62A0h case    2:*/		return 0x821A62A4;
		  /* 821A62A4h */ case    3:  		/* lwz R11, <#[R15 + 8]> */
		/* 821A62A4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R15 + 0x00000008) );
		/* 821A62A4h case    3:*/		return 0x821A62A8;
		  /* 821A62A8h */ case    4:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A62A8h case    4:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A62A8h case    4:*/		return 0x821A62AC;
		  /* 821A62ACh */ case    5:  		/* cmplw CR6, R30, R11 */
		/* 821A62ACh case    5:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R11);
		/* 821A62ACh case    5:*/		return 0x821A62B0;
		  /* 821A62B0h */ case    6:  		/* bc 4, CR6_LT, 120 */
		/* 821A62B0h case    6:*/		if ( !regs.CR[6].lt ) { return 0x821A6328;  }
		/* 821A62B0h case    6:*/		return 0x821A62B4;
		  /* 821A62B4h */ case    7:  		/* mr R3, R21 */
		/* 821A62B4h case    7:*/		regs.R3 = regs.R21;
		/* 821A62B4h case    7:*/		return 0x821A62B8;
		  /* 821A62B8h */ case    8:  		/* lwzx R4, <#[R29 + R31]> */
		/* 821A62B8h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R29 + regs.R31 + 0x00000000) );
		/* 821A62B8h case    8:*/		return 0x821A62BC;
		  /* 821A62BCh */ case    9:  		/* bl -188660 */
		/* 821A62BCh case    9:*/		regs.LR = 0x821A62C0; return 0x821781C8;
		/* 821A62BCh case    9:*/		return 0x821A62C0;
		  /* 821A62C0h */ case   10:  		/* stw R3, <#[R31]> */
		/* 821A62C0h case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + 0x00000000) );
		/* 821A62C0h case   10:*/		return 0x821A62C4;
		  /* 821A62C4h */ case   11:  		/* lwz R7, <#[R3]> */
		/* 821A62C4h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R3 + 0x00000000) );
		/* 821A62C4h case   11:*/		return 0x821A62C8;
		  /* 821A62C8h */ case   12:  		/* mr R5, R7 */
		/* 821A62C8h case   12:*/		regs.R5 = regs.R7;
		/* 821A62C8h case   12:*/		return 0x821A62CC;
		  /* 821A62CCh */ case   13:  		/* rlwinm R5, R5, 27, 24, 31 */
		/* 821A62CCh case   13:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R5,regs.R5);
		/* 821A62CCh case   13:*/		return 0x821A62D0;
		  /* 821A62D0h */ case   14:  		/* rlwinm R11, R28, 27, 29, 30 */
		/* 821A62D0h case   14:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R11,regs.R28);
		/* 821A62D0h case   14:*/		return 0x821A62D4;
		  /* 821A62D4h */ case   15:  		/* rlwinm R10, R24, 14, 15, 17 */
		/* 821A62D4h case   15:*/		cpu::op::rlwinm<0,14,15,17>(regs,&regs.R10,regs.R24);
		/* 821A62D4h case   15:*/		return 0x821A62D8;
		  /* 821A62D8h */ case   16:  		/* srw R11, R5, R11 */
		/* 821A62D8h case   16:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R5,regs.R11);
		/* 821A62D8h case   16:*/		return 0x821A62DC;
		  /* 821A62DCh */ case   17:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821A62DCh case   17:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821A62DCh case   17:*/		return 0x821A62E0;
		  /* 821A62E0h */ case   18:  		/* rlwinm R9, R28, 29, 29, 30 */
		/* 821A62E0h case   18:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R9,regs.R28);
		/* 821A62E0h case   18:*/		return 0x821A62E4;
		  /* 821A62E4h */ case   19:  		/* or R11, R11, R10 */
		/* 821A62E4h case   19:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A62E4h case   19:*/		return 0x821A62E8;
		  /* 821A62E8h */ case   20:  		/* srw R9, R5, R9 */
		/* 821A62E8h case   20:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R5,regs.R9);
		/* 821A62E8h case   20:*/		return 0x821A62EC;
		  /* 821A62ECh */ case   21:  		/* rlwinm R8, R28, 31, 29, 30 */
		/* 821A62ECh case   21:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R8,regs.R28);
		/* 821A62ECh case   21:*/		return 0x821A62F0;
		  /* 821A62F0h */ case   22:  		/* rlwimi R9, R11, 2, 0, 29 */
		/* 821A62F0h case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 821A62F0h case   22:*/		return 0x821A62F4;
		  /* 821A62F4h */ case   23:  		/* rlwinm R6, R28, 1, 29, 30 */
		/* 821A62F4h case   23:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R6,regs.R28);
		/* 821A62F4h case   23:*/		return 0x821A62F8;
		  /* 821A62F8h */ case   24:  		/* srw R10, R5, R8 */
		/* 821A62F8h case   24:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R5,regs.R8);
		/* 821A62F8h case   24:*/		return 0x821A62FC;
		  /* 821A62FCh */ case   25:  		/* rlwimi R10, R9, 2, 0, 29 */
		/* 821A62FCh case   25:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A62FCh case   25:*/		return 0x821A6300;
		  /* 821A6300h */ case   26:  		/* srw R11, R5, R6 */
		/* 821A6300h case   26:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R5,regs.R6);
		/* 821A6300h case   26:*/		return 0x821A6304;
		  /* 821A6304h */ case   27:  		/* rlwimi R11, R10, 2, 0, 29 */
		/* 821A6304h case   27:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821A6304h case   27:*/		return 0x821A6308;
		  /* 821A6308h */ case   28:  		/* rlwinm R9, R7, 0, 27, 18 */
		/* 821A6308h case   28:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R9,regs.R7);
		/* 821A6308h case   28:*/		return 0x821A630C;
		  /* 821A630Ch */ case   29:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821A630Ch case   29:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821A630Ch case   29:*/		return 0x821A6310;
		  /* 821A6310h */ case   30:  		/* rlwinm R9, R9, 0, 7, 3 */
		/* 821A6310h case   30:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R9,regs.R9);
		/* 821A6310h case   30:*/		return 0x821A6314;
		  /* 821A6314h */ case   31:  		/* addi R30, R30, 1 */
		/* 821A6314h case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A6314h case   31:*/		return 0x821A6318;
		  /* 821A6318h */ case   32:  		/* or R11, R11, R9 */
		/* 821A6318h case   32:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A6318h case   32:*/		return 0x821A631C;
		  /* 821A631Ch */ case   33:  		/* addi R31, R31, 4 */
		/* 821A631Ch case   33:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821A631Ch case   33:*/		return 0x821A6320;
		  /* 821A6320h */ case   34:  		/* stw R11, <#[R3]> */
		/* 821A6320h case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A6320h case   34:*/		return 0x821A6324;
		  /* 821A6324h */ case   35:  		/* b -128 */
		/* 821A6324h case   35:*/		return 0x821A62A4;
		/* 821A6324h case   35:*/		return 0x821A6328;
	}
	return 0x821A6328;
} // Block from 821A6298h-821A6328h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821A6328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6328);
		  /* 821A6328h */ case    0:  		/* mr R8, R15 */
		/* 821A6328h case    0:*/		regs.R8 = regs.R15;
		/* 821A6328h case    0:*/		return 0x821A632C;
		  /* 821A632Ch */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821A632Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A632Ch case    1:*/		return 0x821A6330;
		  /* 821A6330h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A6330h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A6330h case    2:*/		return 0x821A6334;
		  /* 821A6334h */ case    3:  		/* bc 12, CR6_EQ, 88 */
		/* 821A6334h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A638C;  }
		/* 821A6334h case    3:*/		return 0x821A6338;
		  /* 821A6338h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821A6338h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6338h case    4:*/		return 0x821A633C;
		  /* 821A633Ch */ case    5:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821A633Ch case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821A633Ch case    5:*/		return 0x821A6340;
		  /* 821A6340h */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821A6340h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A6378;  }
		/* 821A6340h case    6:*/		return 0x821A6344;
		  /* 821A6344h */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A6344h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A6344h case    7:*/		return 0x821A6348;
	}
	return 0x821A6348;
} // Block from 821A6328h-821A6348h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A6348h
// Function '?FindPossibleVectorizationsWorker@Compiler@D3DXShader@@AAAIPAUPossibleVectorization@2@PAUPossibleVectorizationCandidate@2@IIPAV?$Stack@PAUPossibleVectorization@D3DXShader@@$1?AllocInContext@CompilerHeap@2@SAPAXPAXK@Z$1?FreeInContext@42@SAX00K@Z@2@PAPAU32@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6348);
		  /* 821A6348h */ case    0:  		/* lwz R9, <#[R10]> */
		/* 821A6348h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6348h case    0:*/		return 0x821A634C;
		  /* 821A634Ch */ case    1:  		/* b 12 */
		/* 821A634Ch case    1:*/		return 0x821A6358;
		/* 821A634Ch case    1:*/		return 0x821A6350;
		  /* 821A6350h */ case    2:  		/* addi R10, R9, 4 */
		/* 821A6350h case    2:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821A6350h case    2:*/		return 0x821A6354;
		  /* 821A6354h */ case    3:  		/* lwz R9, <#[R9 + 4]> */
		/* 821A6354h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821A6354h case    3:*/		return 0x821A6358;
	}
	return 0x821A6358;
} // Block from 821A6348h-821A6358h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A6358h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6358( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6358) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6358);
		  /* 821A6358h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A6358h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A6358h case    0:*/		return 0x821A635C;
		  /* 821A635Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A635Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A6350;  }
		/* 821A635Ch case    1:*/		return 0x821A6360;
		  /* 821A6360h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821A6360h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821A6360h case    2:*/		return 0x821A6364;
		  /* 821A6364h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A6364h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6364h case    3:*/		return 0x821A6368;
		  /* 821A6368h */ case    4:  		/* lwz R10, <#[R21]> */
		/* 821A6368h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000000) );
		/* 821A6368h case    4:*/		return 0x821A636C;
		  /* 821A636Ch */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821A636Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A636Ch case    5:*/		return 0x821A6370;
		  /* 821A6370h */ case    6:  		/* stw R11, <#[R21]> */
		/* 821A6370h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821A6370h case    6:*/		return 0x821A6374;
		  /* 821A6374h */ case    7:  		/* stw R21, <#[R11 + 16]> */
		/* 821A6374h case    7:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R11 + 0x00000010) );
		/* 821A6374h case    7:*/		return 0x821A6378;
	}
	return 0x821A6378;
} // Block from 821A6358h-821A6378h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A6378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6378);
		  /* 821A6378h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A6378h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A6378h case    0:*/		return 0x821A637C;
		  /* 821A637Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A637Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A637Ch case    1:*/		return 0x821A6380;
		  /* 821A6380h */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821A6380h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A632C;  }
		/* 821A6380h case    2:*/		return 0x821A6384;
		  /* 821A6384h */ case    3:  		/* addi R8, R11, 4 */
		/* 821A6384h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821A6384h case    3:*/		return 0x821A6388;
		  /* 821A6388h */ case    4:  		/* b -92 */
		/* 821A6388h case    4:*/		return 0x821A632C;
		/* 821A6388h case    4:*/		return 0x821A638C;
	}
	return 0x821A638C;
} // Block from 821A6378h-821A638Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A638Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A638C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A638C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A638C);
		  /* 821A638Ch */ case    0:  		/* addi R16, R15, 4 */
		/* 821A638Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R15,0x4);
		/* 821A638Ch case    0:*/		return 0x821A6390;
		  /* 821A6390h */ case    1:  		/* lwz R17, <#[R16]> */
		/* 821A6390h case    1:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R16 + 0x00000000) );
		/* 821A6390h case    1:*/		return 0x821A6394;
		  /* 821A6394h */ case    2:  		/* cmplwi CR6, R17, 0 */
		/* 821A6394h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821A6394h case    2:*/		return 0x821A6398;
		  /* 821A6398h */ case    3:  		/* bc 12, CR6_EQ, 800 */
		/* 821A6398h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A66B8;  }
		/* 821A6398h case    3:*/		return 0x821A639C;
		  /* 821A639Ch */ case    4:  		/* lwz R27, <#[R17 + 16]> */
		/* 821A639Ch case    4:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R17 + 0x00000010) );
		/* 821A639Ch case    4:*/		return 0x821A63A0;
		  /* 821A63A0h */ case    5:  		/* cmplwi CR6, R27, 0 */
		/* 821A63A0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821A63A0h case    5:*/		return 0x821A63A4;
		  /* 821A63A4h */ case    6:  		/* bc 12, CR6_EQ, 768 */
		/* 821A63A4h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A66A4;  }
		/* 821A63A4h case    6:*/		return 0x821A63A8;
		  /* 821A63A8h */ case    7:  		/* lwz R11, <#[R1 + 308]> */
		/* 821A63A8h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000134) );
		/* 821A63A8h case    7:*/		return 0x821A63AC;
		  /* 821A63ACh */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821A63ACh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A63ACh case    8:*/		return 0x821A63B0;
		  /* 821A63B0h */ case    9:  		/* bc 4, CR6_EQ, 700 */
		/* 821A63B0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821A666C;  }
		/* 821A63B0h case    9:*/		return 0x821A63B4;
		  /* 821A63B4h */ case   10:  		/* lwz R11, <#[R17]> */
		/* 821A63B4h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821A63B4h case   10:*/		return 0x821A63B8;
		  /* 821A63B8h */ case   11:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821A63B8h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821A63B8h case   11:*/		return 0x821A63BC;
		  /* 821A63BCh */ case   12:  		/* bc 12, CR0_EQ, 688 */
		/* 821A63BCh case   12:*/		if ( regs.CR[0].eq ) { return 0x821A666C;  }
		/* 821A63BCh case   12:*/		return 0x821A63C0;
		  /* 821A63C0h */ case   13:  		/* lwz R10, <#[R27 + 8]> */
		/* 821A63C0h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x00000008) );
		/* 821A63C0h case   13:*/		return 0x821A63C4;
		  /* 821A63C4h */ case   14:  		/* rlwinm R9, R10, 0, 18, 24 */
		/* 821A63C4h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R10);
		/* 821A63C4h case   14:*/		return 0x821A63C8;
		  /* 821A63C8h */ case   15:  		/* cmplwi CR6, R9, 14080 */
		/* 821A63C8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A63C8h case   15:*/		return 0x821A63CC;
		  /* 821A63CCh */ case   16:  		/* bc 4, CR6_EQ, 608 */
		/* 821A63CCh case   16:*/		if ( !regs.CR[6].eq ) { return 0x821A662C;  }
		/* 821A63CCh case   16:*/		return 0x821A63D0;
		  /* 821A63D0h */ case   17:  		/* rlwinm R9, R11, 27, 30, 31 */
		/* 821A63D0h case   17:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R9,regs.R11);
		/* 821A63D0h case   17:*/		return 0x821A63D4;
		  /* 821A63D4h */ case   18:  		/* lwz R8, <#[R1 + 80]> */
		/* 821A63D4h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 821A63D4h case   18:*/		return 0x821A63D8;
		  /* 821A63D8h */ case   19:  		/* li R7, 1 */
		/* 821A63D8h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A63D8h case   19:*/		return 0x821A63DC;
		  /* 821A63DCh */ case   20:  		/* slw R9, R7, R9 */
		/* 821A63DCh case   20:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R7,regs.R9);
		/* 821A63DCh case   20:*/		return 0x821A63E0;
		  /* 821A63E0h */ case   21:  		/* and. R9, R9, R8 */
		/* 821A63E0h case   21:*/		cpu::op::and<1>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821A63E0h case   21:*/		return 0x821A63E4;
		  /* 821A63E4h */ case   22:  		/* bc 12, CR0_EQ, 584 */
		/* 821A63E4h case   22:*/		if ( regs.CR[0].eq ) { return 0x821A662C;  }
		/* 821A63E4h case   22:*/		return 0x821A63E8;
		  /* 821A63E8h */ case   23:  		/* lwz R11, <#[R1 + 84]> */
		/* 821A63E8h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821A63E8h case   23:*/		return 0x821A63EC;
		  /* 821A63ECh */ case   24:  		/* rlwinm R10, R10, 13, 29, 31 */
		/* 821A63ECh case   24:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R10,regs.R10);
		/* 821A63ECh case   24:*/		return 0x821A63F0;
		  /* 821A63F0h */ case   25:  		/* li R5, 0 */
		/* 821A63F0h case   25:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A63F0h case   25:*/		return 0x821A63F4;
		  /* 821A63F4h */ case   26:  		/* lwz R4, <#[R27 + 28]> */
		/* 821A63F4h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A63F4h case   26:*/		return 0x821A63F8;
		  /* 821A63F8h */ case   27:  		/* subf R6, R11, R10 */
		/* 821A63F8h case   27:*/		cpu::op::subf<0>(regs,&regs.R6,regs.R11,regs.R10);
		/* 821A63F8h case   27:*/		return 0x821A63FC;
		  /* 821A63FCh */ case   28:  		/* lwz R3, <#[R1 + 276]> */
		/* 821A63FCh case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000114) );
		/* 821A63FCh case   28:*/		return 0x821A6400;
		  /* 821A6400h */ case   29:  		/* bl 517888 */
		/* 821A6400h case   29:*/		regs.LR = 0x821A6404; return 0x82224B00;
		/* 821A6400h case   29:*/		return 0x821A6404;
		  /* 821A6404h */ case   30:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821A6404h case   30:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821A6404h case   30:*/		return 0x821A6408;
		  /* 821A6408h */ case   31:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A6408h case   31:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A6408h case   31:*/		return 0x821A640C;
		  /* 821A640Ch */ case   32:  		/* addi R11, R11, 36 */
		/* 821A640Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A640Ch case   32:*/		return 0x821A6410;
		  /* 821A6410h */ case   33:  		/* addi R10, R10, 36 */
		/* 821A6410h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A6410h case   33:*/		return 0x821A6414;
		  /* 821A6414h */ case   34:  		/* addi R8, R11, -36 */
		/* 821A6414h case   34:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A6414h case   34:*/		return 0x821A6418;
		  /* 821A6418h */ case   35:  		/* addi R6, R10, -36 */
		/* 821A6418h case   35:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A6418h case   35:*/		return 0x821A641C;
		  /* 821A641Ch */ case   36:  		/* addi R9, R10, 4 */
		/* 821A641Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A641Ch case   36:*/		return 0x821A6420;
		  /* 821A6420h */ case   37:  		/* lwz R7, <#[R11]> */
		/* 821A6420h case   37:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6420h case   37:*/		return 0x821A6424;
		  /* 821A6424h */ case   38:  		/* mr R24, R3 */
		/* 821A6424h case   38:*/		regs.R24 = regs.R3;
		/* 821A6424h case   38:*/		return 0x821A6428;
		  /* 821A6428h */ case   39:  		/* li R26, 0 */
		/* 821A6428h case   39:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821A6428h case   39:*/		return 0x821A642C;
		  /* 821A642Ch */ case   40:  		/* li R28, 0 */
		/* 821A642Ch case   40:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A642Ch case   40:*/		return 0x821A6430;
		  /* 821A6430h */ case   41:  		/* li R22, 0 */
		/* 821A6430h case   41:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821A6430h case   41:*/		return 0x821A6434;
		  /* 821A6434h */ case   42:  		/* li R20, 0 */
		/* 821A6434h case   42:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821A6434h case   42:*/		return 0x821A6438;
		  /* 821A6438h */ case   43:  		/* stw R7, <#[R10]> */
		/* 821A6438h case   43:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6438h case   43:*/		return 0x821A643C;
		  /* 821A643Ch */ case   44:  		/* li R25, 0 */
		/* 821A643Ch case   44:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821A643Ch case   44:*/		return 0x821A6440;
		  /* 821A6440h */ case   45:  		/* li R23, 0 */
		/* 821A6440h case   45:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821A6440h case   45:*/		return 0x821A6444;
		  /* 821A6444h */ case   46:  		/* lwz R7, <#[R11]> */
		/* 821A6444h case   46:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6444h case   46:*/		return 0x821A6448;
		  /* 821A6448h */ case   47:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A6448h case   47:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A6448h case   47:*/		return 0x821A644C;
		  /* 821A644Ch */ case   48:  		/* stw R6, <#[R7]> */
		/* 821A644Ch case   48:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821A644Ch case   48:*/		return 0x821A6450;
		  /* 821A6450h */ case   49:  		/* stw R8, <#[R10 + 4]> */
		/* 821A6450h case   49:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A6450h case   49:*/		return 0x821A6454;
		  /* 821A6454h */ case   50:  		/* stw R9, <#[R11]> */
		/* 821A6454h case   50:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6454h case   50:*/		return 0x821A6458;
		  /* 821A6458h */ case   51:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A6458h case   51:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A6458h case   51:*/		return 0x821A645C;
		  /* 821A645Ch */ case   52:  		/* rlwinm. R11, R11, 0, 10, 12 */
		/* 821A645Ch case   52:*/		cpu::op::rlwinm<1,0,10,12>(regs,&regs.R11,regs.R11);
		/* 821A645Ch case   52:*/		return 0x821A6460;
		  /* 821A6460h */ case   53:  		/* bc 12, CR0_EQ, 336 */
		/* 821A6460h case   53:*/		if ( regs.CR[0].eq ) { return 0x821A65B0;  }
		/* 821A6460h case   53:*/		return 0x821A6464;
		  /* 821A6464h */ case   54:  		/* li R30, 0 */
		/* 821A6464h case   54:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A6464h case   54:*/		return 0x821A6468;
		  /* 821A6468h */ case   55:  		/* addi R19, R3, 44 */
		/* 821A6468h case   55:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R3,0x2C);
		/* 821A6468h case   55:*/		return 0x821A646C;
		  /* 821A646Ch */ case   56:  		/* addi R18, R27, 44 */
		/* 821A646Ch case   56:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R27,0x2C);
		/* 821A646Ch case   56:*/		return 0x821A6470;
		  /* 821A6470h */ case   57:  		/* lwz R31, <#[R18]> */
		/* 821A6470h case   57:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R18 + 0x00000000) );
		/* 821A6470h case   57:*/		return 0x821A6474;
		  /* 821A6474h */ case   58:  		/* lwz R11, <#[R31]> */
		/* 821A6474h case   58:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A6474h case   58:*/		return 0x821A6478;
		  /* 821A6478h */ case   59:  		/* lwz R10, <#[R31 + 12]> */
		/* 821A6478h case   59:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A6478h case   59:*/		return 0x821A647C;
		  /* 821A647Ch */ case   60:  		/* rlwinm R29, R11, 27, 30, 31 */
		/* 821A647Ch case   60:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R29,regs.R11);
		/* 821A647Ch case   60:*/		return 0x821A6480;
		  /* 821A6480h */ case   61:  		/* cmplw CR6, R10, R15 */
		/* 821A6480h case   61:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R15);
		/* 821A6480h case   61:*/		return 0x821A6484;
		  /* 821A6484h */ case   62:  		/* bc 4, CR6_EQ, 56 */
		/* 821A6484h case   62:*/		if ( !regs.CR[6].eq ) { return 0x821A64BC;  }
		/* 821A6484h case   62:*/		return 0x821A6488;
		  /* 821A6488h */ case   63:  		/* li R11, 1 */
		/* 821A6488h case   63:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A6488h case   63:*/		return 0x821A648C;
		  /* 821A648Ch */ case   64:  		/* lwz R10, <#[R1 + 80]> */
		/* 821A648Ch case   64:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000050) );
		/* 821A648Ch case   64:*/		return 0x821A6490;
		  /* 821A6490h */ case   65:  		/* slw R9, R11, R29 */
		/* 821A6490h case   65:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R11,regs.R29);
		/* 821A6490h case   65:*/		return 0x821A6494;
		  /* 821A6494h */ case   66:  		/* and. R10, R9, R10 */
		/* 821A6494h case   66:*/		cpu::op::and<1>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A6494h case   66:*/		return 0x821A6498;
		  /* 821A6498h */ case   67:  		/* bc 12, CR0_EQ, 36 */
		/* 821A6498h case   67:*/		if ( regs.CR[0].eq ) { return 0x821A64BC;  }
		/* 821A6498h case   67:*/		return 0x821A649C;
		  /* 821A649Ch */ case   68:  		/* li R10, 3 */
		/* 821A649Ch case   68:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821A649Ch case   68:*/		return 0x821A64A0;
		  /* 821A64A0h */ case   69:  		/* slw R11, R11, R23 */
		/* 821A64A0h case   69:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R23);
		/* 821A64A0h case   69:*/		return 0x821A64A4;
		  /* 821A64A4h */ case   70:  		/* slw R10, R10, R30 */
		/* 821A64A4h case   70:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R30);
		/* 821A64A4h case   70:*/		return 0x821A64A8;
		  /* 821A64A8h */ case   71:  		/* andc R10, R22, R10 */
		/* 821A64A8h case   71:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R22,regs.R10);
		/* 821A64A8h case   71:*/		return 0x821A64AC;
		  /* 821A64ACh */ case   72:  		/* slw R9, R29, R30 */
		/* 821A64ACh case   72:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R29,regs.R30);
		/* 821A64ACh case   72:*/		return 0x821A64B0;
		  /* 821A64B0h */ case   73:  		/* or R20, R11, R20 */
		/* 821A64B0h case   73:*/		cpu::op::or<0>(regs,&regs.R20,regs.R11,regs.R20);
		/* 821A64B0h case   73:*/		return 0x821A64B4;
		  /* 821A64B4h */ case   74:  		/* or R22, R10, R9 */
		/* 821A64B4h case   74:*/		cpu::op::or<0>(regs,&regs.R22,regs.R10,regs.R9);
		/* 821A64B4h case   74:*/		return 0x821A64B8;
		  /* 821A64B8h */ case   75:  		/* b 220 */
		/* 821A64B8h case   75:*/		return 0x821A6594;
		/* 821A64B8h case   75:*/		return 0x821A64BC;
	}
	return 0x821A64BC;
} // Block from 821A638Ch-821A64BCh (76 instructions)

//////////////////////////////////////////////////////
// Block at 821A64BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A64BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A64BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A64BC);
		  /* 821A64BCh */ case    0:  		/* li R11, 3 */
		/* 821A64BCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x3);
		/* 821A64BCh case    0:*/		return 0x821A64C0;
		  /* 821A64C0h */ case    1:  		/* slw R10, R28, R30 */
		/* 821A64C0h case    1:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R28,regs.R30);
		/* 821A64C0h case    1:*/		return 0x821A64C4;
		  /* 821A64C4h */ case    2:  		/* slw R11, R11, R30 */
		/* 821A64C4h case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821A64C4h case    2:*/		return 0x821A64C8;
		  /* 821A64C8h */ case    3:  		/* andc R11, R26, R11 */
		/* 821A64C8h case    3:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R26,regs.R11);
		/* 821A64C8h case    3:*/		return 0x821A64CC;
		  /* 821A64CCh */ case    4:  		/* mr R4, R31 */
		/* 821A64CCh case    4:*/		regs.R4 = regs.R31;
		/* 821A64CCh case    4:*/		return 0x821A64D0;
		  /* 821A64D0h */ case    5:  		/* mr R3, R24 */
		/* 821A64D0h case    5:*/		regs.R3 = regs.R24;
		/* 821A64D0h case    5:*/		return 0x821A64D4;
		  /* 821A64D4h */ case    6:  		/* or R26, R11, R10 */
		/* 821A64D4h case    6:*/		cpu::op::or<0>(regs,&regs.R26,regs.R11,regs.R10);
		/* 821A64D4h case    6:*/		return 0x821A64D8;
		  /* 821A64D8h */ case    7:  		/* bl -189200 */
		/* 821A64D8h case    7:*/		regs.LR = 0x821A64DC; return 0x821781C8;
		/* 821A64D8h case    7:*/		return 0x821A64DC;
		  /* 821A64DCh */ case    8:  		/* stw R3, <#[R19]> */
		/* 821A64DCh case    8:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R19 + 0x00000000) );
		/* 821A64DCh case    8:*/		return 0x821A64E0;
		  /* 821A64E0h */ case    9:  		/* lwz R11, <#[R3 + 12]> */
		/* 821A64E0h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A64E0h case    9:*/		return 0x821A64E4;
		  /* 821A64E4h */ case   10:  		/* cmplw CR6, R11, R15 */
		/* 821A64E4h case   10:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R15);
		/* 821A64E4h case   10:*/		return 0x821A64E8;
		  /* 821A64E8h */ case   11:  		/* bc 4, CR6_EQ, 128 */
		/* 821A64E8h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821A6568;  }
		/* 821A64E8h case   11:*/		return 0x821A64EC;
		  /* 821A64ECh */ case   12:  		/* rlwinm R10, R29, 1, 0, 30 */
		/* 821A64ECh case   12:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R29);
		/* 821A64ECh case   12:*/		return 0x821A64F0;
		  /* 821A64F0h */ case   13:  		/* lwz R9, <#[R3]> */
		/* 821A64F0h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821A64F0h case   13:*/		return 0x821A64F4;
		  /* 821A64F4h */ case   14:  		/* li R7, 3 */
		/* 821A64F4h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x3);
		/* 821A64F4h case   14:*/		return 0x821A64F8;
		  /* 821A64F8h */ case   15:  		/* srw R10, R14, R10 */
		/* 821A64F8h case   15:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R14,regs.R10);
		/* 821A64F8h case   15:*/		return 0x821A64FC;
		  /* 821A64FCh */ case   16:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821A64FCh case   16:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821A64FCh case   16:*/		return 0x821A6500;
		  /* 821A6500h */ case   17:  		/* rlwinm R9, R9, 0, 27, 24 */
		/* 821A6500h case   17:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R9,regs.R9);
		/* 821A6500h case   17:*/		return 0x821A6504;
		  /* 821A6504h */ case   18:  		/* rlwinm R8, R10, 5, 22, 26 */
		/* 821A6504h case   18:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R8,regs.R10);
		/* 821A6504h case   18:*/		return 0x821A6508;
		  /* 821A6508h */ case   19:  		/* rlwinm R9, R9, 0, 24, 21 */
		/* 821A6508h case   19:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R9,regs.R9);
		/* 821A6508h case   19:*/		return 0x821A650C;
		  /* 821A650Ch */ case   20:  		/* rlwinm R8, R8, 0, 25, 23 */
		/* 821A650Ch case   20:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R8,regs.R8);
		/* 821A650Ch case   20:*/		return 0x821A6510;
		  /* 821A6510h */ case   21:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821A6510h case   21:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821A6510h case   21:*/		return 0x821A6514;
		  /* 821A6514h */ case   22:  		/* ori R8, R8, 7296 */
		/* 821A6514h case   22:*/		cpu::op::ori<0>(regs,&regs.R8,regs.R8,0x1C80);
		/* 821A6514h case   22:*/		return 0x821A6518;
		  /* 821A6518h */ case   23:  		/* addi R11, R11, 4 */
		/* 821A6518h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A6518h case   23:*/		return 0x821A651C;
		  /* 821A651Ch */ case   24:  		/* or R9, R8, R9 */
		/* 821A651Ch case   24:*/		cpu::op::or<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821A651Ch case   24:*/		return 0x821A6520;
		  /* 821A6520h */ case   25:  		/* slw R8, R7, R10 */
		/* 821A6520h case   25:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R7,regs.R10);
		/* 821A6520h case   25:*/		return 0x821A6524;
		  /* 821A6524h */ case   26:  		/* stw R9, <#[R3]> */
		/* 821A6524h case   26:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000000) );
		/* 821A6524h case   26:*/		return 0x821A6528;
		  /* 821A6528h */ case   27:  		/* slw R10, R28, R10 */
		/* 821A6528h case   27:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R28,regs.R10);
		/* 821A6528h case   27:*/		return 0x821A652C;
		  /* 821A652Ch */ case   28:  		/* andc R9, R25, R8 */
		/* 821A652Ch case   28:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R25,regs.R8);
		/* 821A652Ch case   28:*/		return 0x821A6530;
		  /* 821A6530h */ case   29:  		/* or R25, R9, R10 */
		/* 821A6530h case   29:*/		cpu::op::or<0>(regs,&regs.R25,regs.R9,regs.R10);
		/* 821A6530h case   29:*/		return 0x821A6534;
		  /* 821A6534h */ case   30:  		/* lwz R10, <#[R11]> */
		/* 821A6534h case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6534h case   30:*/		return 0x821A6538;
		  /* 821A6538h */ case   31:  		/* b 12 */
		/* 821A6538h case   31:*/		return 0x821A6544;
		/* 821A6538h case   31:*/		return 0x821A653C;
		  /* 821A653Ch */ case   32:  		/* addi R11, R10, 8 */
		/* 821A653Ch case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A653Ch case   32:*/		return 0x821A6540;
		  /* 821A6540h */ case   33:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A6540h case   33:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A6540h case   33:*/		return 0x821A6544;
	}
	return 0x821A6544;
} // Block from 821A64BCh-821A6544h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821A6544h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6544( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6544) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6544);
		  /* 821A6544h */ case    0:  		/* cmplw CR6, R10, R3 */
		/* 821A6544h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R3);
		/* 821A6544h case    0:*/		return 0x821A6548;
		  /* 821A6548h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A6548h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A653C;  }
		/* 821A6548h case    1:*/		return 0x821A654C;
		  /* 821A654Ch */ case    2:  		/* lwz R10, <#[R3 + 8]> */
		/* 821A654Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821A654Ch case    2:*/		return 0x821A6550;
		  /* 821A6550h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A6550h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6550h case    3:*/		return 0x821A6554;
		  /* 821A6554h */ case    4:  		/* lwz R11, <#[R21 + 4]> */
		/* 821A6554h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821A6554h case    4:*/		return 0x821A6558;
		  /* 821A6558h */ case    5:  		/* stw R11, <#[R3 + 8]> */
		/* 821A6558h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A6558h case    5:*/		return 0x821A655C;
		  /* 821A655Ch */ case    6:  		/* stw R3, <#[R21 + 4]> */
		/* 821A655Ch case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R21 + 0x00000004) );
		/* 821A655Ch case    6:*/		return 0x821A6560;
		  /* 821A6560h */ case    7:  		/* stw R21, <#[R3 + 12]> */
		/* 821A6560h case    7:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A6560h case    7:*/		return 0x821A6564;
		  /* 821A6564h */ case    8:  		/* b 40 */
		/* 821A6564h case    8:*/		return 0x821A658C;
		/* 821A6564h case    8:*/		return 0x821A6568;
	}
	return 0x821A6568;
} // Block from 821A6544h-821A6568h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A6568h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6568( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6568) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6568);
		  /* 821A6568h */ case    0:  		/* cmplw CR6, R11, R21 */
		/* 821A6568h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 821A6568h case    0:*/		return 0x821A656C;
		  /* 821A656Ch */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 821A656Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A658C;  }
		/* 821A656Ch case    1:*/		return 0x821A6570;
		  /* 821A6570h */ case    2:  		/* lwz R11, <#[R31]> */
		/* 821A6570h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A6570h case    2:*/		return 0x821A6574;
		  /* 821A6574h */ case    3:  		/* li R10, 3 */
		/* 821A6574h case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821A6574h case    3:*/		return 0x821A6578;
		  /* 821A6578h */ case    4:  		/* rlwinm R11, R11, 28, 29, 30 */
		/* 821A6578h case    4:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R11,regs.R11);
		/* 821A6578h case    4:*/		return 0x821A657C;
		  /* 821A657Ch */ case    5:  		/* slw R10, R10, R11 */
		/* 821A657Ch case    5:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A657Ch case    5:*/		return 0x821A6580;
		  /* 821A6580h */ case    6:  		/* andc R10, R25, R10 */
		/* 821A6580h case    6:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R25,regs.R10);
		/* 821A6580h case    6:*/		return 0x821A6584;
		  /* 821A6584h */ case    7:  		/* slw R11, R28, R11 */
		/* 821A6584h case    7:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821A6584h case    7:*/		return 0x821A6588;
		  /* 821A6588h */ case    8:  		/* or R25, R10, R11 */
		/* 821A6588h case    8:*/		cpu::op::or<0>(regs,&regs.R25,regs.R10,regs.R11);
		/* 821A6588h case    8:*/		return 0x821A658C;
	}
	return 0x821A658C;
} // Block from 821A6568h-821A658Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A658Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A658C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A658C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A658C);
		  /* 821A658Ch */ case    0:  		/* addi R28, R28, 1 */
		/* 821A658Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821A658Ch case    0:*/		return 0x821A6590;
		  /* 821A6590h */ case    1:  		/* addi R19, R19, 4 */
		/* 821A6590h case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 821A6590h case    1:*/		return 0x821A6594;
	}
	return 0x821A6594;
} // Block from 821A658Ch-821A6594h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6594h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6594( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6594) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6594);
		  /* 821A6594h */ case    0:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A6594h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A6594h case    0:*/		return 0x821A6598;
		  /* 821A6598h */ case    1:  		/* addi R23, R23, 1 */
		/* 821A6598h case    1:*/		cpu::op::addi<0>(regs,&regs.R23,regs.R23,0x1);
		/* 821A6598h case    1:*/		return 0x821A659C;
		  /* 821A659Ch */ case    2:  		/* addi R18, R18, 4 */
		/* 821A659Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x4);
		/* 821A659Ch case    2:*/		return 0x821A65A0;
		  /* 821A65A0h */ case    3:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A65A0h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A65A0h case    3:*/		return 0x821A65A4;
		  /* 821A65A4h */ case    4:  		/* addi R30, R30, 2 */
		/* 821A65A4h case    4:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x2);
		/* 821A65A4h case    4:*/		return 0x821A65A8;
		  /* 821A65A8h */ case    5:  		/* cmplw CR6, R23, R11 */
		/* 821A65A8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R23,regs.R11);
		/* 821A65A8h case    5:*/		return 0x821A65AC;
		  /* 821A65ACh */ case    6:  		/* bc 12, CR6_LT, -316 */
		/* 821A65ACh case    6:*/		if ( regs.CR[6].lt ) { return 0x821A6470;  }
		/* 821A65ACh case    6:*/		return 0x821A65B0;
	}
	return 0x821A65B0;
} // Block from 821A6594h-821A65B0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A65B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A65B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A65B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A65B0);
		  /* 821A65B0h */ case    0:  		/* mr R11, R20 */
		/* 821A65B0h case    0:*/		regs.R11 = regs.R20;
		/* 821A65B0h case    0:*/		return 0x821A65B4;
		  /* 821A65B4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A65B4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A65B4h case    1:*/		return 0x821A65B8;
		  /* 821A65B8h */ case    2:  		/* bc 12, CR6_EQ, 84 */
		/* 821A65B8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A660C;  }
		/* 821A65B8h case    2:*/		return 0x821A65BC;
		  /* 821A65BCh */ case    3:  		/* addi R10, R11, -1 */
		/* 821A65BCh case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0xFFFFFFFF);
		/* 821A65BCh case    3:*/		return 0x821A65C0;
		  /* 821A65C0h */ case    4:  		/* addi R8, R11, -1 */
		/* 821A65C0h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFFF);
		/* 821A65C0h case    4:*/		return 0x821A65C4;
		  /* 821A65C4h */ case    5:  		/* andc R10, R11, R10 */
		/* 821A65C4h case    5:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R11,regs.R10);
		/* 821A65C4h case    5:*/		return 0x821A65C8;
		  /* 821A65C8h */ case    6:  		/* andc R8, R11, R8 */
		/* 821A65C8h case    6:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R11,regs.R8);
		/* 821A65C8h case    6:*/		return 0x821A65CC;
		  /* 821A65CCh */ case    7:  		/* cntlzw R10, R10 */
		/* 821A65CCh case    7:*/		cpu::op::cntlzw<0>(regs,&regs.R10,regs.R10);
		/* 821A65CCh case    7:*/		return 0x821A65D0;
		  /* 821A65D0h */ case    8:  		/* subf R11, R8, R11 */
		/* 821A65D0h case    8:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R8,regs.R11);
		/* 821A65D0h case    8:*/		return 0x821A65D4;
		  /* 821A65D4h */ case    9:  		/* subfic R10, R10, 31 */
		/* 821A65D4h case    9:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R10,0x1F);
		/* 821A65D4h case    9:*/		return 0x821A65D8;
		  /* 821A65D8h */ case   10:  		/* li R9, 3 */
		/* 821A65D8h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821A65D8h case   10:*/		return 0x821A65DC;
		  /* 821A65DCh */ case   11:  		/* rlwinm R10, R10, 1, 0, 30 */
		/* 821A65DCh case   11:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R10,regs.R10);
		/* 821A65DCh case   11:*/		return 0x821A65E0;
		  /* 821A65E0h */ case   12:  		/* srw R8, R22, R10 */
		/* 821A65E0h case   12:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R22,regs.R10);
		/* 821A65E0h case   12:*/		return 0x821A65E4;
		  /* 821A65E4h */ case   13:  		/* rlwinm R8, R8, 1, 29, 30 */
		/* 821A65E4h case   13:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R8,regs.R8);
		/* 821A65E4h case   13:*/		return 0x821A65E8;
		  /* 821A65E8h */ case   14:  		/* slw R9, R9, R10 */
		/* 821A65E8h case   14:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R10);
		/* 821A65E8h case   14:*/		return 0x821A65EC;
		  /* 821A65ECh */ case   15:  		/* srw R8, R14, R8 */
		/* 821A65ECh case   15:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R14,regs.R8);
		/* 821A65ECh case   15:*/		return 0x821A65F0;
		  /* 821A65F0h */ case   16:  		/* rlwinm R8, R8, 1, 29, 30 */
		/* 821A65F0h case   16:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R8,regs.R8);
		/* 821A65F0h case   16:*/		return 0x821A65F4;
		  /* 821A65F4h */ case   17:  		/* andc R9, R26, R9 */
		/* 821A65F4h case   17:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R26,regs.R9);
		/* 821A65F4h case   17:*/		return 0x821A65F8;
		  /* 821A65F8h */ case   18:  		/* srw R8, R25, R8 */
		/* 821A65F8h case   18:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R25,regs.R8);
		/* 821A65F8h case   18:*/		return 0x821A65FC;
		  /* 821A65FCh */ case   19:  		/* rlwinm R8, R8, 0, 30, 31 */
		/* 821A65FCh case   19:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R8);
		/* 821A65FCh case   19:*/		return 0x821A6600;
		  /* 821A6600h */ case   20:  		/* slw R10, R8, R10 */
		/* 821A6600h case   20:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R8,regs.R10);
		/* 821A6600h case   20:*/		return 0x821A6604;
		  /* 821A6604h */ case   21:  		/* or R26, R10, R9 */
		/* 821A6604h case   21:*/		cpu::op::or<0>(regs,&regs.R26,regs.R10,regs.R9);
		/* 821A6604h case   21:*/		return 0x821A6608;
		  /* 821A6608h */ case   22:  		/* b -84 */
		/* 821A6608h case   22:*/		return 0x821A65B4;
		/* 821A6608h case   22:*/		return 0x821A660C;
	}
	return 0x821A660C;
} // Block from 821A65B0h-821A660Ch (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A660Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A660C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A660C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A660C);
		  /* 821A660Ch */ case    0:  		/* li R8, 1 */
		/* 821A660Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821A660Ch case    0:*/		return 0x821A6610;
		  /* 821A6610h */ case    1:  		/* lwz R3, <#[R1 + 276]> */
		/* 821A6610h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000114) );
		/* 821A6610h case    1:*/		return 0x821A6614;
		  /* 821A6614h */ case    2:  		/* li R7, 1 */
		/* 821A6614h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A6614h case    2:*/		return 0x821A6618;
		  /* 821A6618h */ case    3:  		/* mr R6, R26 */
		/* 821A6618h case    3:*/		regs.R6 = regs.R26;
		/* 821A6618h case    3:*/		return 0x821A661C;
		  /* 821A661Ch */ case    4:  		/* mr R5, R24 */
		/* 821A661Ch case    4:*/		regs.R5 = regs.R24;
		/* 821A661Ch case    4:*/		return 0x821A6620;
		  /* 821A6620h */ case    5:  		/* mr R4, R27 */
		/* 821A6620h case    5:*/		regs.R4 = regs.R27;
		/* 821A6620h case    5:*/		return 0x821A6624;
		  /* 821A6624h */ case    6:  		/* bl -6596 */
		/* 821A6624h case    6:*/		regs.LR = 0x821A6628; return 0x821A4C60;
		/* 821A6624h case    6:*/		return 0x821A6628;
		  /* 821A6628h */ case    7:  		/* b 124 */
		/* 821A6628h case    7:*/		return 0x821A66A4;
		/* 821A6628h case    7:*/		return 0x821A662C;
	}
	return 0x821A662C;
} // Block from 821A660Ch-821A662Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A662Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A662C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A662C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A662C);
		  /* 821A662Ch */ case    0:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821A662Ch case    0:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821A662Ch case    0:*/		return 0x821A6630;
		  /* 821A6630h */ case    1:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821A6630h case    1:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821A6630h case    1:*/		return 0x821A6634;
		  /* 821A6634h */ case    2:  		/* srw R10, R14, R10 */
		/* 821A6634h case    2:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R14,regs.R10);
		/* 821A6634h case    2:*/		return 0x821A6638;
		  /* 821A6638h */ case    3:  		/* srw R9, R14, R9 */
		/* 821A6638h case    3:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R14,regs.R9);
		/* 821A6638h case    3:*/		return 0x821A663C;
		  /* 821A663Ch */ case    4:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821A663Ch case    4:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821A663Ch case    4:*/		return 0x821A6640;
		  /* 821A6640h */ case    5:  		/* rlwinm R10, R11, 26, 29, 30 */
		/* 821A6640h case    5:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R10,regs.R11);
		/* 821A6640h case    5:*/		return 0x821A6644;
		  /* 821A6644h */ case    6:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A6644h case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A6644h case    6:*/		return 0x821A6648;
		  /* 821A6648h */ case    7:  		/* srw R10, R14, R10 */
		/* 821A6648h case    7:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R14,regs.R10);
		/* 821A6648h case    7:*/		return 0x821A664C;
		  /* 821A664Ch */ case    8:  		/* rlwinm R8, R11, 28, 29, 30 */
		/* 821A664Ch case    8:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R8,regs.R11);
		/* 821A664Ch case    8:*/		return 0x821A6650;
		  /* 821A6650h */ case    9:  		/* rlwimi R10, R9, 2, 0, 29 */
		/* 821A6650h case    9:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A6650h case    9:*/		return 0x821A6654;
		  /* 821A6654h */ case   10:  		/* srw R9, R14, R8 */
		/* 821A6654h case   10:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R14,regs.R8);
		/* 821A6654h case   10:*/		return 0x821A6658;
		  /* 821A6658h */ case   11:  		/* rlwimi R9, R10, 2, 0, 29 */
		/* 821A6658h case   11:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 821A6658h case   11:*/		return 0x821A665C;
		  /* 821A665Ch */ case   12:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821A665Ch case   12:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821A665Ch case   12:*/		return 0x821A6660;
		  /* 821A6660h */ case   13:  		/* rlwinm R10, R9, 5, 0, 26 */
		/* 821A6660h case   13:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R9);
		/* 821A6660h case   13:*/		return 0x821A6664;
		  /* 821A6664h */ case   14:  		/* or R11, R10, R11 */
		/* 821A6664h case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A6664h case   14:*/		return 0x821A6668;
		  /* 821A6668h */ case   15:  		/* stw R11, <#[R17]> */
		/* 821A6668h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000000) );
		/* 821A6668h case   15:*/		return 0x821A666C;
	}
	return 0x821A666C;
} // Block from 821A662Ch-821A666Ch (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A666Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A666C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A666C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A666C);
		  /* 821A666Ch */ case    0:  		/* lwz R11, <#[R17 + 12]> */
		/* 821A666Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x0000000C) );
		/* 821A666Ch case    0:*/		return 0x821A6670;
		  /* 821A6670h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A6670h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A6670h case    1:*/		return 0x821A6674;
		  /* 821A6674h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A6674h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6674h case    2:*/		return 0x821A6678;
		  /* 821A6678h */ case    3:  		/* b 12 */
		/* 821A6678h case    3:*/		return 0x821A6684;
		/* 821A6678h case    3:*/		return 0x821A667C;
		  /* 821A667Ch */ case    4:  		/* addi R11, R10, 8 */
		/* 821A667Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A667Ch case    4:*/		return 0x821A6680;
		  /* 821A6680h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A6680h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A6680h case    5:*/		return 0x821A6684;
	}
	return 0x821A6684;
} // Block from 821A666Ch-821A6684h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A6684h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6684( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6684) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6684);
		  /* 821A6684h */ case    0:  		/* cmplw CR6, R10, R17 */
		/* 821A6684h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R17);
		/* 821A6684h case    0:*/		return 0x821A6688;
		  /* 821A6688h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A6688h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A667C;  }
		/* 821A6688h case    1:*/		return 0x821A668C;
		  /* 821A668Ch */ case    2:  		/* lwz R10, <#[R17 + 8]> */
		/* 821A668Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R17 + 0x00000008) );
		/* 821A668Ch case    2:*/		return 0x821A6690;
		  /* 821A6690h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A6690h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6690h case    3:*/		return 0x821A6694;
		  /* 821A6694h */ case    4:  		/* lwz R11, <#[R21 + 4]> */
		/* 821A6694h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000004) );
		/* 821A6694h case    4:*/		return 0x821A6698;
		  /* 821A6698h */ case    5:  		/* stw R11, <#[R17 + 8]> */
		/* 821A6698h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821A6698h case    5:*/		return 0x821A669C;
		  /* 821A669Ch */ case    6:  		/* stw R17, <#[R21 + 4]> */
		/* 821A669Ch case    6:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R21 + 0x00000004) );
		/* 821A669Ch case    6:*/		return 0x821A66A0;
		  /* 821A66A0h */ case    7:  		/* stw R21, <#[R17 + 12]> */
		/* 821A66A0h case    7:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R17 + 0x0000000C) );
		/* 821A66A0h case    7:*/		return 0x821A66A4;
	}
	return 0x821A66A4;
} // Block from 821A6684h-821A66A4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A66A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A66A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A66A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A66A4);
		  /* 821A66A4h */ case    0:  		/* lwz R11, <#[R16]> */
		/* 821A66A4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R16 + 0x00000000) );
		/* 821A66A4h case    0:*/		return 0x821A66A8;
		  /* 821A66A8h */ case    1:  		/* cmplw CR6, R11, R17 */
		/* 821A66A8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R17);
		/* 821A66A8h case    1:*/		return 0x821A66AC;
		  /* 821A66ACh */ case    2:  		/* bc 4, CR6_EQ, -796 */
		/* 821A66ACh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A6390;  }
		/* 821A66ACh case    2:*/		return 0x821A66B0;
		  /* 821A66B0h */ case    3:  		/* addi R16, R17, 8 */
		/* 821A66B0h case    3:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R17,0x8);
		/* 821A66B0h case    3:*/		return 0x821A66B4;
		  /* 821A66B4h */ case    4:  		/* b -804 */
		/* 821A66B4h case    4:*/		return 0x821A6390;
		/* 821A66B4h case    4:*/		return 0x821A66B8;
	}
	return 0x821A66B8;
} // Block from 821A66A4h-821A66B8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A66B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A66B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A66B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A66B8);
		  /* 821A66B8h */ case    0:  		/* lwz R11, <#[R1 + 88]> */
		/* 821A66B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000058) );
		/* 821A66B8h case    0:*/		return 0x821A66BC;
		  /* 821A66BCh */ case    1:  		/* li R10, 1 */
		/* 821A66BCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821A66BCh case    1:*/		return 0x821A66C0;
		  /* 821A66C0h */ case    2:  		/* lwz R9, <#[R21 + 8]> */
		/* 821A66C0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000008) );
		/* 821A66C0h case    2:*/		return 0x821A66C4;
		  /* 821A66C4h */ case    3:  		/* lis R8, 256 */
		/* 821A66C4h case    3:*/		cpu::op::lis<0>(regs,&regs.R8,0x100);
		/* 821A66C4h case    3:*/		return 0x821A66C8;
		  /* 821A66C8h */ case    4:  		/* slw R11, R10, R11 */
		/* 821A66C8h case    4:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A66C8h case    4:*/		return 0x821A66CC;
		  /* 821A66CCh */ case    5:  		/* addi R11, R11, -1 */
		/* 821A66CCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A66CCh case    5:*/		return 0x821A66D0;
		  /* 821A66D0h */ case    6:  		/* rlwinm R10, R9, 0, 31, 26 */
		/* 821A66D0h case    6:*/		cpu::op::rlwinm<0,0,31,26>(regs,&regs.R10,regs.R9);
		/* 821A66D0h case    6:*/		return 0x821A66D4;
		  /* 821A66D4h */ case    7:  		/* rlwimi R8, R11, 1, 27, 30 */
		/* 821A66D4h case    7:*/		cpu::op::rlwimi<0,1,27,30>(regs,&regs.R8,regs.R11);
		/* 821A66D4h case    7:*/		return 0x821A66D8;
		  /* 821A66D8h */ case    8:  		/* or R11, R8, R10 */
		/* 821A66D8h case    8:*/		cpu::op::or<0>(regs,&regs.R11,regs.R8,regs.R10);
		/* 821A66D8h case    8:*/		return 0x821A66DC;
		  /* 821A66DCh */ case    9:  		/* stw R11, <#[R21 + 8]> */
		/* 821A66DCh case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821A66DCh case    9:*/		return 0x821A66E0;
		  /* 821A66E0h */ case   10:  		/* lwz R10, <#[R15 + 8]> */
		/* 821A66E0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R15 + 0x00000008) );
		/* 821A66E0h case   10:*/		return 0x821A66E4;
		  /* 821A66E4h */ case   11:  		/* rlwinm. R10, R10, 9, 31, 31 */
		/* 821A66E4h case   11:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R10);
		/* 821A66E4h case   11:*/		return 0x821A66E8;
		  /* 821A66E8h */ case   12:  		/* bc 12, CR0_EQ, 120 */
		/* 821A66E8h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A6760;  }
		/* 821A66E8h case   12:*/		return 0x821A66EC;
		  /* 821A66ECh */ case   13:  		/* oris R11, R11, 128 */
		/* 821A66ECh case   13:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A66ECh case   13:*/		return 0x821A66F0;
		  /* 821A66F0h */ case   14:  		/* mr R3, R15 */
		/* 821A66F0h case   14:*/		regs.R3 = regs.R15;
		/* 821A66F0h case   14:*/		return 0x821A66F4;
		  /* 821A66F4h */ case   15:  		/* stw R11, <#[R21 + 8]> */
		/* 821A66F4h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821A66F4h case   15:*/		return 0x821A66F8;
		  /* 821A66F8h */ case   16:  		/* bl -142864 */
		/* 821A66F8h case   16:*/		regs.LR = 0x821A66FC; return 0x821838E8;
		/* 821A66F8h case   16:*/		return 0x821A66FC;
		  /* 821A66FCh */ case   17:  		/* lwz R31, <#[R1 + 276]> */
		/* 821A66FCh case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000114) );
		/* 821A66FCh case   17:*/		return 0x821A6700;
		  /* 821A6700h */ case   18:  		/* sth R3, <#[R21 + 18]> */
		/* 821A6700h case   18:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R21 + 0x00000012) );
		/* 821A6700h case   18:*/		return 0x821A6704;
		  /* 821A6704h */ case   19:  		/* lwz R3, <#[R31 + 660]> */
		/* 821A6704h case   19:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000294) );
		/* 821A6704h case   19:*/		return 0x821A6708;
		  /* 821A6708h */ case   20:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A6708h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A6708h case   20:*/		return 0x821A670C;
		  /* 821A670Ch */ case   21:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A670Ch case   21:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A670Ch case   21:*/		return 0x821A6710;
		  /* 821A6710h */ case   22:  		/* bc 4, CR0_EQ, 40 */
		/* 821A6710h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821A6738;  }
		/* 821A6710h case   22:*/		return 0x821A6714;
		  /* 821A6714h */ case   23:  		/* lwz R11, <#[R3]> */
		/* 821A6714h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A6714h case   23:*/		return 0x821A6718;
		  /* 821A6718h */ case   24:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A6718h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A6718h case   24:*/		return 0x821A671C;
		  /* 821A671Ch */ case   25:  		/* addic. R11, R11, -4 */
		/* 821A671Ch case   25:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A671Ch case   25:*/		return 0x821A6720;
		  /* 821A6720h */ case   26:  		/* bc 12, CR0_EQ, 24 */
		/* 821A6720h case   26:*/		if ( regs.CR[0].eq ) { return 0x821A6738;  }
		/* 821A6720h case   26:*/		return 0x821A6724;
		  /* 821A6724h */ case   27:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A6724h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A6724h case   27:*/		return 0x821A6728;
		  /* 821A6728h */ case   28:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A6728h case   28:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A6728h case   28:*/		return 0x821A672C;
		  /* 821A672Ch */ case   29:  		/* addi R10, R10, 1 */
		/* 821A672Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A672Ch case   29:*/		return 0x821A6730;
		  /* 821A6730h */ case   30:  		/* cmplw CR6, R10, R9 */
		/* 821A6730h case   30:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A6730h case   30:*/		return 0x821A6734;
		  /* 821A6734h */ case   31:  		/* bc 4, CR6_GT, 16 */
		/* 821A6734h case   31:*/		if ( !regs.CR[6].gt ) { return 0x821A6744;  }
		/* 821A6734h case   31:*/		return 0x821A6738;
	}
	return 0x821A6738;
} // Block from 821A66B8h-821A6738h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821A6738h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6738( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6738) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6738);
		  /* 821A6738h */ case    0:  		/* li R4, 1 */
		/* 821A6738h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A6738h case    0:*/		return 0x821A673C;
		  /* 821A673Ch */ case    1:  		/* bl -104052 */
		/* 821A673Ch case    1:*/		regs.LR = 0x821A6740; return 0x8218D0C8;
		/* 821A673Ch case    1:*/		return 0x821A6740;
		  /* 821A6740h */ case    2:  		/* mr R11, R3 */
		/* 821A6740h case    2:*/		regs.R11 = regs.R3;
		/* 821A6740h case    2:*/		return 0x821A6744;
	}
	return 0x821A6744;
} // Block from 821A6738h-821A6744h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A6744h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6744( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6744) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6744);
		  /* 821A6744h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A6744h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A6744h case    0:*/		return 0x821A6748;
		  /* 821A6748h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A6748h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A6748h case    1:*/		return 0x821A674C;
		  /* 821A674Ch */ case    2:  		/* addi R8, R10, 1 */
		/* 821A674Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A674Ch case    2:*/		return 0x821A6750;
		  /* 821A6750h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A6750h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A6750h case    3:*/		return 0x821A6754;
		  /* 821A6754h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A6754h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A6754h case    4:*/		return 0x821A6758;
		  /* 821A6758h */ case    5:  		/* stwx R21, <#[R10 + R11]> */
		/* 821A6758h case    5:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A6758h case    5:*/		return 0x821A675C;
		  /* 821A675Ch */ case    6:  		/* b 8 */
		/* 821A675Ch case    6:*/		return 0x821A6764;
		/* 821A675Ch case    6:*/		return 0x821A6760;
	}
	return 0x821A6760;
} // Block from 821A6744h-821A6760h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A6760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6760);
		  /* 821A6760h */ case    0:  		/* lwz R31, <#[R1 + 276]> */
		/* 821A6760h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000114) );
		/* 821A6760h case    0:*/		return 0x821A6764;
	}
	return 0x821A6764;
} // Block from 821A6760h-821A6764h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A6764h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6764( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6764) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6764);
		  /* 821A6764h */ case    0:  		/* li R6, 1 */
		/* 821A6764h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A6764h case    0:*/		return 0x821A6768;
		  /* 821A6768h */ case    1:  		/* lwz R5, <#[R31 + 652]> */
		/* 821A6768h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x0000028C) );
		/* 821A6768h case    1:*/		return 0x821A676C;
		  /* 821A676Ch */ case    2:  		/* mr R4, R15 */
		/* 821A676Ch case    2:*/		regs.R4 = regs.R15;
		/* 821A676Ch case    2:*/		return 0x821A6770;
		  /* 821A6770h */ case    3:  		/* mr R3, R31 */
		/* 821A6770h case    3:*/		regs.R3 = regs.R31;
		/* 821A6770h case    3:*/		return 0x821A6774;
		  /* 821A6774h */ case    4:  		/* bl 543828 */
		/* 821A6774h case    4:*/		regs.LR = 0x821A6778; return 0x8222B3C8;
		/* 821A6774h case    4:*/		return 0x821A6778;
		  /* 821A6778h */ case    5:  		/* mr R3, R21 */
		/* 821A6778h case    5:*/		regs.R3 = regs.R21;
		/* 821A6778h case    5:*/		return 0x821A677C;
	}
	return 0x821A677C;
} // Block from 821A6764h-821A677Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A677Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A677C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A677C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A677C);
		  /* 821A677Ch */ case    0:  		/* addi R1, R1, 256 */
		/* 821A677Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x100);
		/* 821A677Ch case    0:*/		return 0x821A6780;
		  /* 821A6780h */ case    1:  		/* b -1135888 */
		/* 821A6780h case    1:*/		return 0x82091270;
		/* 821A6780h case    1:*/		return 0x821A6784;
		  /* 821A6784h */ case    2:  		/* nop */
		/* 821A6784h case    2:*/		cpu::op::nop();
		/* 821A6784h case    2:*/		return 0x821A6788;
	}
	return 0x821A6788;
} // Block from 821A677Ch-821A6788h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A6788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6788);
		  /* 821A6788h */ case    0:  		/* mfspr R12, LR */
		/* 821A6788h case    0:*/		regs.R12 = regs.LR;
		/* 821A6788h case    0:*/		return 0x821A678C;
		  /* 821A678Ch */ case    1:  		/* bl -1135980 */
		/* 821A678Ch case    1:*/		regs.LR = 0x821A6790; return 0x82091220;
		/* 821A678Ch case    1:*/		return 0x821A6790;
		  /* 821A6790h */ case    2:  		/* stwu R1, <#[R1 - 272]> */
		/* 821A6790h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEF0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEF0);
		/* 821A6790h case    2:*/		return 0x821A6794;
		  /* 821A6794h */ case    3:  		/* addi R11, R1, 96 */
		/* 821A6794h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A6794h case    3:*/		return 0x821A6798;
		  /* 821A6798h */ case    4:  		/* li R16, 0 */
		/* 821A6798h case    4:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 821A6798h case    4:*/		return 0x821A679C;
		  /* 821A679Ch */ case    5:  		/* mr R18, R3 */
		/* 821A679Ch case    5:*/		regs.R18 = regs.R3;
		/* 821A679Ch case    5:*/		return 0x821A67A0;
		  /* 821A67A0h */ case    6:  		/* mr R3, R4 */
		/* 821A67A0h case    6:*/		regs.R3 = regs.R4;
		/* 821A67A0h case    6:*/		return 0x821A67A4;
		  /* 821A67A4h */ case    7:  		/* mr R31, R4 */
		/* 821A67A4h case    7:*/		regs.R31 = regs.R4;
		/* 821A67A4h case    7:*/		return 0x821A67A8;
		  /* 821A67A8h */ case    8:  		/* std R16, <#[R11]> */
		/* 821A67A8h case    8:*/		cpu::mem::store64( regs, regs.R16, (uint32)(regs.R11 + 0x00000000) );
		/* 821A67A8h case    8:*/		return 0x821A67AC;
		  /* 821A67ACh */ case    9:  		/* mr R29, R5 */
		/* 821A67ACh case    9:*/		regs.R29 = regs.R5;
		/* 821A67ACh case    9:*/		return 0x821A67B0;
		  /* 821A67B0h */ case   10:  		/* std R16, <#[R11 + 8]> */
		/* 821A67B0h case   10:*/		cpu::mem::store64( regs, regs.R16, (uint32)(regs.R11 + 0x00000008) );
		/* 821A67B0h case   10:*/		return 0x821A67B4;
		  /* 821A67B4h */ case   11:  		/* mr R14, R6 */
		/* 821A67B4h case   11:*/		regs.R14 = regs.R6;
		/* 821A67B4h case   11:*/		return 0x821A67B8;
		  /* 821A67B8h */ case   12:  		/* mr R28, R7 */
		/* 821A67B8h case   12:*/		regs.R28 = regs.R7;
		/* 821A67B8h case   12:*/		return 0x821A67BC;
		  /* 821A67BCh */ case   13:  		/* mr R27, R8 */
		/* 821A67BCh case   13:*/		regs.R27 = regs.R8;
		/* 821A67BCh case   13:*/		return 0x821A67C0;
		  /* 821A67C0h */ case   14:  		/* li R15, 2 */
		/* 821A67C0h case   14:*/		cpu::op::li<0>(regs,&regs.R15,0x2);
		/* 821A67C0h case   14:*/		return 0x821A67C4;
		  /* 821A67C4h */ case   15:  		/* mr R17, R16 */
		/* 821A67C4h case   15:*/		regs.R17 = regs.R16;
		/* 821A67C4h case   15:*/		return 0x821A67C8;
		  /* 821A67C8h */ case   16:  		/* bl -219672 */
		/* 821A67C8h case   16:*/		regs.LR = 0x821A67CC; return 0x82170DB0;
		/* 821A67C8h case   16:*/		return 0x821A67CC;
		  /* 821A67CCh */ case   17:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A67CCh case   17:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A67CCh case   17:*/		return 0x821A67D0;
		  /* 821A67D0h */ case   18:  		/* bc 12, CR0_EQ, 60 */
		/* 821A67D0h case   18:*/		if ( regs.CR[0].eq ) { return 0x821A680C;  }
		/* 821A67D0h case   18:*/		return 0x821A67D4;
		  /* 821A67D4h */ case   19:  		/* lwz R11, <#[R31 + 44]> */
		/* 821A67D4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000002C) );
		/* 821A67D4h case   19:*/		return 0x821A67D8;
		  /* 821A67D8h */ case   20:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A67D8h case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A67D8h case   20:*/		return 0x821A67DC;
		  /* 821A67DCh */ case   21:  		/* lwz R11, <#[R11]> */
		/* 821A67DCh case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821A67DCh case   21:*/		return 0x821A67E0;
		  /* 821A67E0h */ case   22:  		/* rlwinm R11, R11, 21, 11, 31 */
		/* 821A67E0h case   22:*/		cpu::op::rlwinm<0,21,11,31>(regs,&regs.R11,regs.R11);
		/* 821A67E0h case   22:*/		return 0x821A67E4;
		  /* 821A67E4h */ case   23:  		/* xor R11, R11, R10 */
		/* 821A67E4h case   23:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A67E4h case   23:*/		return 0x821A67E8;
		  /* 821A67E8h */ case   24:  		/* rlwinm. R11, R11, 0, 15, 17 */
		/* 821A67E8h case   24:*/		cpu::op::rlwinm<1,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821A67E8h case   24:*/		return 0x821A67EC;
		  /* 821A67ECh */ case   25:  		/* bc 4, CR0_EQ, 904 */
		/* 821A67ECh case   25:*/		if ( !regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A67ECh case   25:*/		return 0x821A67F0;
	}
	return 0x821A67F0;
} // Block from 821A6788h-821A67F0h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821A67F0h
// Function '?RemoveRedundantComputations@Compiler@D3DXShader@@AAAPAVInstruction@2@PAURedundantComputationState@2@PAV32@IPAI@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A67F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A67F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A67F0);
		  /* 821A67F0h */ case    0:  		/* lwz R11, <#[R29 + 44]> */
		/* 821A67F0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x0000002C) );
		/* 821A67F0h case    0:*/		return 0x821A67F4;
		  /* 821A67F4h */ case    1:  		/* lwz R10, <#[R29 + 8]> */
		/* 821A67F4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821A67F4h case    1:*/		return 0x821A67F8;
		  /* 821A67F8h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821A67F8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821A67F8h case    2:*/		return 0x821A67FC;
		  /* 821A67FCh */ case    3:  		/* rlwinm R11, R11, 21, 11, 31 */
		/* 821A67FCh case    3:*/		cpu::op::rlwinm<0,21,11,31>(regs,&regs.R11,regs.R11);
		/* 821A67FCh case    3:*/		return 0x821A6800;
		  /* 821A6800h */ case    4:  		/* xor R11, R11, R10 */
		/* 821A6800h case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A6800h case    4:*/		return 0x821A6804;
		  /* 821A6804h */ case    5:  		/* rlwinm. R11, R11, 0, 15, 17 */
		/* 821A6804h case    5:*/		cpu::op::rlwinm<1,0,15,17>(regs,&regs.R11,regs.R11);
		/* 821A6804h case    5:*/		return 0x821A6808;
		  /* 821A6808h */ case    6:  		/* bc 4, CR0_EQ, 876 */
		/* 821A6808h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A6808h case    6:*/		return 0x821A680C;
	}
	return 0x821A680C;
} // Block from 821A67F0h-821A680Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A680Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A680C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A680C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A680C);
		  /* 821A680Ch */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A680Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A680Ch case    0:*/		return 0x821A6810;
		  /* 821A6810h */ case    1:  		/* lwz R9, <#[R29 + 8]> */
		/* 821A6810h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R29 + 0x00000008) );
		/* 821A6810h case    1:*/		return 0x821A6814;
		  /* 821A6814h */ case    2:  		/* xor R11, R9, R10 */
		/* 821A6814h case    2:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R9,regs.R10);
		/* 821A6814h case    2:*/		return 0x821A6818;
		  /* 821A6818h */ case    3:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A6818h case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A6818h case    3:*/		return 0x821A681C;
		  /* 821A681Ch */ case    4:  		/* bc 4, CR0_EQ, 856 */
		/* 821A681Ch case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A681Ch case    4:*/		return 0x821A6820;
		  /* 821A6820h */ case    5:  		/* lwz R11, <#[R29]> */
		/* 821A6820h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A6820h case    5:*/		return 0x821A6824;
		  /* 821A6824h */ case    6:  		/* cmplwi CR6, R11, 0 */
		/* 821A6824h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A6824h case    6:*/		return 0x821A6828;
		  /* 821A6828h */ case    7:  		/* bc 12, CR6_EQ, 32 */
		/* 821A6828h case    7:*/		if ( regs.CR[6].eq ) { return 0x821A6848;  }
		/* 821A6828h case    7:*/		return 0x821A682C;
		  /* 821A682Ch */ case    8:  		/* lwz R8, <#[R11 + 12]> */
		/* 821A682Ch case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A682Ch case    8:*/		return 0x821A6830;
		  /* 821A6830h */ case    9:  		/* cmplw CR6, R8, R31 */
		/* 821A6830h case    9:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R31);
		/* 821A6830h case    9:*/		return 0x821A6834;
		  /* 821A6834h */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 821A6834h case   10:*/		if ( regs.CR[6].eq ) { return 0x821A6840;  }
		/* 821A6834h case   10:*/		return 0x821A6838;
		  /* 821A6838h */ case   11:  		/* lwz R11, <#[R11 + 4]> */
		/* 821A6838h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821A6838h case   11:*/		return 0x821A683C;
		  /* 821A683Ch */ case   12:  		/* b -24 */
		/* 821A683Ch case   12:*/		return 0x821A6824;
		/* 821A683Ch case   12:*/		return 0x821A6840;
	}
	return 0x821A6840;
} // Block from 821A680Ch-821A6840h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A6840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6840);
		  /* 821A6840h */ case    0:  		/* li R11, 1 */
		/* 821A6840h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A6840h case    0:*/		return 0x821A6844;
		  /* 821A6844h */ case    1:  		/* b 8 */
		/* 821A6844h case    1:*/		return 0x821A684C;
		/* 821A6844h case    1:*/		return 0x821A6848;
	}
	return 0x821A6848;
} // Block from 821A6840h-821A6848h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6848h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6848( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6848) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6848);
		  /* 821A6848h */ case    0:  		/* mr R11, R16 */
		/* 821A6848h case    0:*/		regs.R11 = regs.R16;
		/* 821A6848h case    0:*/		return 0x821A684C;
	}
	return 0x821A684C;
} // Block from 821A6848h-821A684Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A684Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A684C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A684C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A684C);
		  /* 821A684Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A684Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A684Ch case    0:*/		return 0x821A6850;
		  /* 821A6850h */ case    1:  		/* bc 4, CR0_EQ, 804 */
		/* 821A6850h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A6850h case    1:*/		return 0x821A6854;
		  /* 821A6854h */ case    2:  		/* rlwinm R11, R9, 9, 23, 31 */
		/* 821A6854h case    2:*/		cpu::op::rlwinm<0,9,23,31>(regs,&regs.R11,regs.R9);
		/* 821A6854h case    2:*/		return 0x821A6858;
		  /* 821A6858h */ case    3:  		/* rlwinm R10, R10, 9, 23, 31 */
		/* 821A6858h case    3:*/		cpu::op::rlwinm<0,9,23,31>(regs,&regs.R10,regs.R10);
		/* 821A6858h case    3:*/		return 0x821A685C;
		  /* 821A685Ch */ case    4:  		/* xor R11, R11, R10 */
		/* 821A685Ch case    4:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A685Ch case    4:*/		return 0x821A6860;
		  /* 821A6860h */ case    5:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A6860h case    5:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A6860h case    5:*/		return 0x821A6864;
		  /* 821A6864h */ case    6:  		/* bc 4, CR0_EQ, 784 */
		/* 821A6864h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A6864h case    6:*/		return 0x821A6868;
		  /* 821A6868h */ case    7:  		/* lwz R11, <#[R31 + 4]> */
		/* 821A6868h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821A6868h case    7:*/		return 0x821A686C;
		  /* 821A686Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821A686Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A686Ch case    8:*/		return 0x821A6870;
		  /* 821A6870h */ case    9:  		/* bc 12, CR6_EQ, 60 */
		/* 821A6870h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A68AC;  }
		/* 821A6870h case    9:*/		return 0x821A6874;
		  /* 821A6874h */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A6874h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A6874h case   10:*/		return 0x821A6878;
		  /* 821A6878h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821A6878h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A6878h case   11:*/		return 0x821A687C;
		  /* 821A687Ch */ case   12:  		/* bc 12, CR6_EQ, 32 */
		/* 821A687Ch case   12:*/		if ( regs.CR[6].eq ) { return 0x821A689C;  }
		/* 821A687Ch case   12:*/		return 0x821A6880;
		  /* 821A6880h */ case   13:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A6880h case   13:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A6880h case   13:*/		return 0x821A6884;
		  /* 821A6884h */ case   14:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A6884h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A6884h case   14:*/		return 0x821A6888;
		  /* 821A6888h */ case   15:  		/* cmplwi CR6, R9, 14080 */
		/* 821A6888h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A6888h case   15:*/		return 0x821A688C;
		  /* 821A688Ch */ case   16:  		/* bc 4, CR6_EQ, 16 */
		/* 821A688Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x821A689C;  }
		/* 821A688Ch case   16:*/		return 0x821A6890;
		  /* 821A6890h */ case   17:  		/* lwz R9, <#[R11]> */
		/* 821A6890h case   17:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6890h case   17:*/		return 0x821A6894;
		  /* 821A6894h */ case   18:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A6894h case   18:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A6894h case   18:*/		return 0x821A6898;
		  /* 821A6898h */ case   19:  		/* bc 4, CR0_EQ, 12 */
		/* 821A6898h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821A68A4;  }
		/* 821A6898h case   19:*/		return 0x821A689C;
	}
	return 0x821A689C;
} // Block from 821A684Ch-821A689Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821A689Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A689C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A689C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A689C);
		  /* 821A689Ch */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A689Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A689Ch case    0:*/		return 0x821A68A0;
		  /* 821A68A0h */ case    1:  		/* b -52 */
		/* 821A68A0h case    1:*/		return 0x821A686C;
		/* 821A68A0h case    1:*/		return 0x821A68A4;
	}
	return 0x821A68A4;
} // Block from 821A689Ch-821A68A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A68A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A68A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A68A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A68A4);
		  /* 821A68A4h */ case    0:  		/* mr R4, R10 */
		/* 821A68A4h case    0:*/		regs.R4 = regs.R10;
		/* 821A68A4h case    0:*/		return 0x821A68A8;
		  /* 821A68A8h */ case    1:  		/* b 8 */
		/* 821A68A8h case    1:*/		return 0x821A68B0;
		/* 821A68A8h case    1:*/		return 0x821A68AC;
	}
	return 0x821A68AC;
} // Block from 821A68A4h-821A68ACh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A68ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A68AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A68AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A68AC);
		  /* 821A68ACh */ case    0:  		/* mr R4, R16 */
		/* 821A68ACh case    0:*/		regs.R4 = regs.R16;
		/* 821A68ACh case    0:*/		return 0x821A68B0;
	}
	return 0x821A68B0;
} // Block from 821A68ACh-821A68B0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A68B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A68B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A68B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A68B0);
		  /* 821A68B0h */ case    0:  		/* lwz R11, <#[R29 + 4]> */
		/* 821A68B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000004) );
		/* 821A68B0h case    0:*/		return 0x821A68B4;
		  /* 821A68B4h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A68B4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A68B4h case    1:*/		return 0x821A68B8;
		  /* 821A68B8h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821A68B8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A68EC;  }
		/* 821A68B8h case    2:*/		return 0x821A68BC;
		  /* 821A68BCh */ case    3:  		/* lwz R30, <#[R11 + 16]> */
		/* 821A68BCh case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 821A68BCh case    3:*/		return 0x821A68C0;
		  /* 821A68C0h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821A68C0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A68C0h case    4:*/		return 0x821A68C4;
		  /* 821A68C4h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821A68C4h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A68E4;  }
		/* 821A68C4h case    5:*/		return 0x821A68C8;
		  /* 821A68C8h */ case    6:  		/* lwz R10, <#[R30 + 8]> */
		/* 821A68C8h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000008) );
		/* 821A68C8h case    6:*/		return 0x821A68CC;
		  /* 821A68CCh */ case    7:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821A68CCh case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821A68CCh case    7:*/		return 0x821A68D0;
		  /* 821A68D0h */ case    8:  		/* cmplwi CR6, R10, 14080 */
		/* 821A68D0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821A68D0h case    8:*/		return 0x821A68D4;
		  /* 821A68D4h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821A68D4h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821A68E4;  }
		/* 821A68D4h case    9:*/		return 0x821A68D8;
		  /* 821A68D8h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821A68D8h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A68D8h case   10:*/		return 0x821A68DC;
		  /* 821A68DCh */ case   11:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821A68DCh case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821A68DCh case   11:*/		return 0x821A68E0;
		  /* 821A68E0h */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821A68E0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A68F0;  }
		/* 821A68E0h case   12:*/		return 0x821A68E4;
	}
	return 0x821A68E4;
} // Block from 821A68B0h-821A68E4h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A68E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A68E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A68E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A68E4);
		  /* 821A68E4h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A68E4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A68E4h case    0:*/		return 0x821A68E8;
		  /* 821A68E8h */ case    1:  		/* b -52 */
		/* 821A68E8h case    1:*/		return 0x821A68B4;
		/* 821A68E8h case    1:*/		return 0x821A68EC;
	}
	return 0x821A68EC;
} // Block from 821A68E4h-821A68ECh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A68ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A68EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A68EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A68EC);
		  /* 821A68ECh */ case    0:  		/* mr R30, R16 */
		/* 821A68ECh case    0:*/		regs.R30 = regs.R16;
		/* 821A68ECh case    0:*/		return 0x821A68F0;
	}
	return 0x821A68F0;
} // Block from 821A68ECh-821A68F0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A68F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A68F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A68F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A68F0);
		  /* 821A68F0h */ case    0:  		/* cmplw CR6, R4, R30 */
		/* 821A68F0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R30);
		/* 821A68F0h case    0:*/		return 0x821A68F4;
		  /* 821A68F4h */ case    1:  		/* bc 12, CR6_EQ, 104 */
		/* 821A68F4h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A695C;  }
		/* 821A68F4h case    1:*/		return 0x821A68F8;
		  /* 821A68F8h */ case    2:  		/* rlwinm. R11, R27, 0, 24, 31 */
		/* 821A68F8h case    2:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R27);
		/* 821A68F8h case    2:*/		return 0x821A68FC;
		  /* 821A68FCh */ case    3:  		/* bc 4, CR0_EQ, 96 */
		/* 821A68FCh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A695C;  }
		/* 821A68FCh case    3:*/		return 0x821A6900;
		  /* 821A6900h */ case    4:  		/* mr R7, R29 */
		/* 821A6900h case    4:*/		regs.R7 = regs.R29;
		/* 821A6900h case    4:*/		return 0x821A6904;
		  /* 821A6904h */ case    5:  		/* mr R6, R30 */
		/* 821A6904h case    5:*/		regs.R6 = regs.R30;
		/* 821A6904h case    5:*/		return 0x821A6908;
		  /* 821A6908h */ case    6:  		/* mr R5, R31 */
		/* 821A6908h case    6:*/		regs.R5 = regs.R31;
		/* 821A6908h case    6:*/		return 0x821A690C;
		  /* 821A690Ch */ case    7:  		/* mr R3, R18 */
		/* 821A690Ch case    7:*/		regs.R3 = regs.R18;
		/* 821A690Ch case    7:*/		return 0x821A6910;
		  /* 821A6910h */ case    8:  		/* bl -46008 */
		/* 821A6910h case    8:*/		regs.LR = 0x821A6914; return 0x8219B558;
		/* 821A6910h case    8:*/		return 0x821A6914;
		  /* 821A6914h */ case    9:  		/* cmplwi CR6, R28, 0 */
		/* 821A6914h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A6914h case    9:*/		return 0x821A6918;
		  /* 821A6918h */ case   10:  		/* bc 12, CR6_EQ, 16 */
		/* 821A6918h case   10:*/		if ( regs.CR[6].eq ) { return 0x821A6928;  }
		/* 821A6918h case   10:*/		return 0x821A691C;
		  /* 821A691Ch */ case   11:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A691Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A691Ch case   11:*/		return 0x821A6920;
		  /* 821A6920h */ case   12:  		/* rlwinm R11, R11, 27, 29, 31 */
		/* 821A6920h case   12:*/		cpu::op::rlwinm<0,27,29,31>(regs,&regs.R11,regs.R11);
		/* 821A6920h case   12:*/		return 0x821A6924;
		  /* 821A6924h */ case   13:  		/* subf R3, R11, R3 */
		/* 821A6924h case   13:*/		cpu::op::subf<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 821A6924h case   13:*/		return 0x821A6928;
	}
	return 0x821A6928;
} // Block from 821A68F0h-821A6928h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A6928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6928);
		  /* 821A6928h */ case    0:  		/* cmplwi CR6, R3, 4 */
		/* 821A6928h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 821A6928h case    0:*/		return 0x821A692C;
		  /* 821A692Ch */ case    1:  		/* bc 12, CR6_GT, 584 */
		/* 821A692Ch case    1:*/		if ( regs.CR[6].gt ) { return 0x821A6B74;  }
		/* 821A692Ch case    1:*/		return 0x821A6930;
		  /* 821A6930h */ case    2:  		/* cmplwi CR6, R4, 0 */
		/* 821A6930h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A6930h case    2:*/		return 0x821A6934;
		  /* 821A6934h */ case    3:  		/* bc 12, CR6_EQ, 40 */
		/* 821A6934h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A695C;  }
		/* 821A6934h case    3:*/		return 0x821A6938;
		  /* 821A6938h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821A6938h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A6938h case    4:*/		return 0x821A693C;
		  /* 821A693Ch */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821A693Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821A695C;  }
		/* 821A693Ch case    5:*/		return 0x821A6940;
		  /* 821A6940h */ case    6:  		/* li R7, 1 */
		/* 821A6940h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A6940h case    6:*/		return 0x821A6944;
		  /* 821A6944h */ case    7:  		/* li R6, 1 */
		/* 821A6944h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A6944h case    7:*/		return 0x821A6948;
		  /* 821A6948h */ case    8:  		/* mr R5, R30 */
		/* 821A6948h case    8:*/		regs.R5 = regs.R30;
		/* 821A6948h case    8:*/		return 0x821A694C;
		  /* 821A694Ch */ case    9:  		/* mr R3, R18 */
		/* 821A694Ch case    9:*/		regs.R3 = regs.R18;
		/* 821A694Ch case    9:*/		return 0x821A6950;
		  /* 821A6950h */ case   10:  		/* bl 553248 */
		/* 821A6950h case   10:*/		regs.LR = 0x821A6954; return 0x8222DA70;
		/* 821A6950h case   10:*/		return 0x821A6954;
		  /* 821A6954h */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A6954h case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A6954h case   11:*/		return 0x821A6958;
		  /* 821A6958h */ case   12:  		/* bc 12, CR0_EQ, 540 */
		/* 821A6958h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A6958h case   12:*/		return 0x821A695C;
	}
	return 0x821A695C;
} // Block from 821A6928h-821A695Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A695Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A695C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A695C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A695C);
		  /* 821A695Ch */ case    0:  		/* mr R4, R29 */
		/* 821A695Ch case    0:*/		regs.R4 = regs.R29;
		/* 821A695Ch case    0:*/		return 0x821A6960;
		  /* 821A6960h */ case    1:  		/* mr R3, R31 */
		/* 821A6960h case    1:*/		regs.R3 = regs.R31;
		/* 821A6960h case    1:*/		return 0x821A6964;
		  /* 821A6964h */ case    2:  		/* bl 521764 */
		/* 821A6964h case    2:*/		regs.LR = 0x821A6968; return 0x82225F88;
		/* 821A6964h case    2:*/		return 0x821A6968;
		  /* 821A6968h */ case    3:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A6968h case    3:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A6968h case    3:*/		return 0x821A696C;
		  /* 821A696Ch */ case    4:  		/* bc 12, CR0_EQ, 520 */
		/* 821A696Ch case    4:*/		if ( regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A696Ch case    4:*/		return 0x821A6970;
		  /* 821A6970h */ case    5:  		/* mr R8, R27 */
		/* 821A6970h case    5:*/		regs.R8 = regs.R27;
		/* 821A6970h case    5:*/		return 0x821A6974;
		  /* 821A6974h */ case    6:  		/* li R7, 1 */
		/* 821A6974h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A6974h case    6:*/		return 0x821A6978;
		  /* 821A6978h */ case    7:  		/* addi R6, R1, 96 */
		/* 821A6978h case    7:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821A6978h case    7:*/		return 0x821A697C;
		  /* 821A697Ch */ case    8:  		/* mr R5, R29 */
		/* 821A697Ch case    8:*/		regs.R5 = regs.R29;
		/* 821A697Ch case    8:*/		return 0x821A6980;
		  /* 821A6980h */ case    9:  		/* mr R4, R31 */
		/* 821A6980h case    9:*/		regs.R4 = regs.R31;
		/* 821A6980h case    9:*/		return 0x821A6984;
		  /* 821A6984h */ case   10:  		/* mr R3, R18 */
		/* 821A6984h case   10:*/		regs.R3 = regs.R18;
		/* 821A6984h case   10:*/		return 0x821A6988;
		  /* 821A6988h */ case   11:  		/* bl -40024 */
		/* 821A6988h case   11:*/		regs.LR = 0x821A698C; return 0x8219CD30;
		/* 821A6988h case   11:*/		return 0x821A698C;
		  /* 821A698Ch */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A698Ch case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A698Ch case   12:*/		return 0x821A6990;
		  /* 821A6990h */ case   13:  		/* bc 12, CR0_EQ, 484 */
		/* 821A6990h case   13:*/		if ( regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A6990h case   13:*/		return 0x821A6994;
		  /* 821A6994h */ case   14:  		/* li R7, 1 */
		/* 821A6994h case   14:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A6994h case   14:*/		return 0x821A6998;
		  /* 821A6998h */ case   15:  		/* li R6, 1 */
		/* 821A6998h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A6998h case   15:*/		return 0x821A699C;
		  /* 821A699Ch */ case   16:  		/* mr R5, R29 */
		/* 821A699Ch case   16:*/		regs.R5 = regs.R29;
		/* 821A699Ch case   16:*/		return 0x821A69A0;
		  /* 821A69A0h */ case   17:  		/* mr R4, R31 */
		/* 821A69A0h case   17:*/		regs.R4 = regs.R31;
		/* 821A69A0h case   17:*/		return 0x821A69A4;
		  /* 821A69A4h */ case   18:  		/* mr R3, R18 */
		/* 821A69A4h case   18:*/		regs.R3 = regs.R18;
		/* 821A69A4h case   18:*/		return 0x821A69A8;
		  /* 821A69A8h */ case   19:  		/* bl 553160 */
		/* 821A69A8h case   19:*/		regs.LR = 0x821A69AC; return 0x8222DA70;
		/* 821A69A8h case   19:*/		return 0x821A69AC;
		  /* 821A69ACh */ case   20:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A69ACh case   20:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A69ACh case   20:*/		return 0x821A69B0;
		  /* 821A69B0h */ case   21:  		/* bc 12, CR0_EQ, 452 */
		/* 821A69B0h case   21:*/		if ( regs.CR[0].eq ) { return 0x821A6B74;  }
		/* 821A69B0h case   21:*/		return 0x821A69B4;
		  /* 821A69B4h */ case   22:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A69B4h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A69B4h case   22:*/		return 0x821A69B8;
		  /* 821A69B8h */ case   23:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821A69B8h case   23:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821A69B8h case   23:*/		return 0x821A69BC;
		  /* 821A69BCh */ case   24:  		/* bc 12, CR0_EQ, 48 */
		/* 821A69BCh case   24:*/		if ( regs.CR[0].eq ) { return 0x821A69EC;  }
		/* 821A69BCh case   24:*/		return 0x821A69C0;
		  /* 821A69C0h */ case   25:  		/* lwz R11, <#[R29 + 8]> */
		/* 821A69C0h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A69C0h case   25:*/		return 0x821A69C4;
		  /* 821A69C4h */ case   26:  		/* rlwinm. R11, R11, 0, 1, 1 */
		/* 821A69C4h case   26:*/		cpu::op::rlwinm<1,0,1,1>(regs,&regs.R11,regs.R11);
		/* 821A69C4h case   26:*/		return 0x821A69C8;
		  /* 821A69C8h */ case   27:  		/* bc 12, CR0_EQ, 36 */
		/* 821A69C8h case   27:*/		if ( regs.CR[0].eq ) { return 0x821A69EC;  }
		/* 821A69C8h case   27:*/		return 0x821A69CC;
		  /* 821A69CCh */ case   28:  		/* lwz R11, <#[R31 + 20]> */
		/* 821A69CCh case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000014) );
		/* 821A69CCh case   28:*/		return 0x821A69D0;
		  /* 821A69D0h */ case   29:  		/* lwz R10, <#[R29 + 20]> */
		/* 821A69D0h case   29:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000014) );
		/* 821A69D0h case   29:*/		return 0x821A69D4;
		  /* 821A69D4h */ case   30:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 821A69D4h case   30:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 821A69D4h case   30:*/		return 0x821A69D8;
		  /* 821A69D8h */ case   31:  		/* rlwinm R10, R10, 0, 0, 28 */
		/* 821A69D8h case   31:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R10,regs.R10);
		/* 821A69D8h case   31:*/		return 0x821A69DC;
		  /* 821A69DCh */ case   32:  		/* subfc R11, R11, R10 */
		/* 821A69DCh case   32:*/		cpu::op::subfc<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A69DCh case   32:*/		return 0x821A69E0;
		  /* 821A69E0h */ case   33:  		/* subfe R11, R11, R11 */
		/* 821A69E0h case   33:*/		cpu::op::subfe<0>(regs,&regs.R11,regs.R11,regs.R11);
		/* 821A69E0h case   33:*/		return 0x821A69E4;
		  /* 821A69E4h */ case   34:  		/* rlwinm R3, R11, 0, 31, 31 */
		/* 821A69E4h case   34:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R3,regs.R11);
		/* 821A69E4h case   34:*/		return 0x821A69E8;
		  /* 821A69E8h */ case   35:  		/* b 16 */
		/* 821A69E8h case   35:*/		return 0x821A69F8;
		/* 821A69E8h case   35:*/		return 0x821A69EC;
	}
	return 0x821A69EC;
} // Block from 821A695Ch-821A69ECh (36 instructions)

//////////////////////////////////////////////////////
// Block at 821A69ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A69EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A69EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A69EC);
		  /* 821A69ECh */ case    0:  		/* mr R4, R29 */
		/* 821A69ECh case    0:*/		regs.R4 = regs.R29;
		/* 821A69ECh case    0:*/		return 0x821A69F0;
		  /* 821A69F0h */ case    1:  		/* mr R3, R31 */
		/* 821A69F0h case    1:*/		regs.R3 = regs.R31;
		/* 821A69F0h case    1:*/		return 0x821A69F4;
		  /* 821A69F4h */ case    2:  		/* bl 521932 */
		/* 821A69F4h case    2:*/		regs.LR = 0x821A69F8; return 0x822260C0;
		/* 821A69F4h case    2:*/		return 0x821A69F8;
	}
	return 0x821A69F8;
} // Block from 821A69ECh-821A69F8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A69F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A69F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A69F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A69F8);
		  /* 821A69F8h */ case    0:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A69F8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A69F8h case    0:*/		return 0x821A69FC;
		  /* 821A69FCh */ case    1:  		/* mr R5, R18 */
		/* 821A69FCh case    1:*/		regs.R5 = regs.R18;
		/* 821A69FCh case    1:*/		return 0x821A6A00;
		  /* 821A6A00h */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821A6A00h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A6A14;  }
		/* 821A6A00h case    2:*/		return 0x821A6A04;
		  /* 821A6A04h */ case    3:  		/* mr R4, R29 */
		/* 821A6A04h case    3:*/		regs.R4 = regs.R29;
		/* 821A6A04h case    3:*/		return 0x821A6A08;
		  /* 821A6A08h */ case    4:  		/* mr R3, R31 */
		/* 821A6A08h case    4:*/		regs.R3 = regs.R31;
		/* 821A6A08h case    4:*/		return 0x821A6A0C;
		  /* 821A6A0Ch */ case    5:  		/* mr R21, R29 */
		/* 821A6A0Ch case    5:*/		regs.R21 = regs.R29;
		/* 821A6A0Ch case    5:*/		return 0x821A6A10;
		  /* 821A6A10h */ case    6:  		/* b 16 */
		/* 821A6A10h case    6:*/		return 0x821A6A20;
		/* 821A6A10h case    6:*/		return 0x821A6A14;
	}
	return 0x821A6A14;
} // Block from 821A69F8h-821A6A14h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A6A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6A14);
		  /* 821A6A14h */ case    0:  		/* mr R4, R31 */
		/* 821A6A14h case    0:*/		regs.R4 = regs.R31;
		/* 821A6A14h case    0:*/		return 0x821A6A18;
		  /* 821A6A18h */ case    1:  		/* mr R3, R29 */
		/* 821A6A18h case    1:*/		regs.R3 = regs.R29;
		/* 821A6A18h case    1:*/		return 0x821A6A1C;
		  /* 821A6A1Ch */ case    2:  		/* mr R21, R31 */
		/* 821A6A1Ch case    2:*/		regs.R21 = regs.R31;
		/* 821A6A1Ch case    2:*/		return 0x821A6A20;
	}
	return 0x821A6A20;
} // Block from 821A6A14h-821A6A20h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A6A20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6A20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6A20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6A20);
		  /* 821A6A20h */ case    0:  		/* bl -190456 */
		/* 821A6A20h case    0:*/		regs.LR = 0x821A6A24; return 0x82178228;
		/* 821A6A20h case    0:*/		return 0x821A6A24;
		  /* 821A6A24h */ case    1:  		/* mr R19, R3 */
		/* 821A6A24h case    1:*/		regs.R19 = regs.R3;
		/* 821A6A24h case    1:*/		return 0x821A6A28;
		  /* 821A6A28h */ case    2:  		/* cmplwi CR6, R28, 0 */
		/* 821A6A28h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A6A28h case    2:*/		return 0x821A6A2C;
		  /* 821A6A2Ch */ case    3:  		/* bc 12, CR6_EQ, 16 */
		/* 821A6A2Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821A6A3C;  }
		/* 821A6A2Ch case    3:*/		return 0x821A6A30;
		  /* 821A6A30h */ case    4:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A6A30h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A6A30h case    4:*/		return 0x821A6A34;
		  /* 821A6A34h */ case    5:  		/* rlwinm R7, R11, 27, 29, 31 */
		/* 821A6A34h case    5:*/		cpu::op::rlwinm<0,27,29,31>(regs,&regs.R7,regs.R11);
		/* 821A6A34h case    5:*/		return 0x821A6A38;
		  /* 821A6A38h */ case    6:  		/* b 8 */
		/* 821A6A38h case    6:*/		return 0x821A6A40;
		/* 821A6A38h case    6:*/		return 0x821A6A3C;
	}
	return 0x821A6A3C;
} // Block from 821A6A20h-821A6A3Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A6A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6A3C);
		  /* 821A6A3Ch */ case    0:  		/* mr R7, R16 */
		/* 821A6A3Ch case    0:*/		regs.R7 = regs.R16;
		/* 821A6A3Ch case    0:*/		return 0x821A6A40;
	}
	return 0x821A6A40;
} // Block from 821A6A3Ch-821A6A40h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A6A40h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6A40( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6A40) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6A40);
		  /* 821A6A40h */ case    0:  		/* mr R9, R27 */
		/* 821A6A40h case    0:*/		regs.R9 = regs.R27;
		/* 821A6A40h case    0:*/		return 0x821A6A44;
		  /* 821A6A44h */ case    1:  		/* li R8, 1 */
		/* 821A6A44h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821A6A44h case    1:*/		return 0x821A6A48;
		  /* 821A6A48h */ case    2:  		/* mr R6, R21 */
		/* 821A6A48h case    2:*/		regs.R6 = regs.R21;
		/* 821A6A48h case    2:*/		return 0x821A6A4C;
		  /* 821A6A4Ch */ case    3:  		/* mr R5, R29 */
		/* 821A6A4Ch case    3:*/		regs.R5 = regs.R29;
		/* 821A6A4Ch case    3:*/		return 0x821A6A50;
		  /* 821A6A50h */ case    4:  		/* mr R4, R31 */
		/* 821A6A50h case    4:*/		regs.R4 = regs.R31;
		/* 821A6A50h case    4:*/		return 0x821A6A54;
		  /* 821A6A54h */ case    5:  		/* mr R3, R18 */
		/* 821A6A54h case    5:*/		regs.R3 = regs.R18;
		/* 821A6A54h case    5:*/		return 0x821A6A58;
		  /* 821A6A58h */ case    6:  		/* bl -24056 */
		/* 821A6A58h case    6:*/		regs.LR = 0x821A6A5C; return 0x821A0C60;
		/* 821A6A58h case    6:*/		return 0x821A6A5C;
		  /* 821A6A5Ch */ case    7:  		/* mr R17, R3 */
		/* 821A6A5Ch case    7:*/		regs.R17 = regs.R3;
		/* 821A6A5Ch case    7:*/		return 0x821A6A60;
		  /* 821A6A60h */ case    8:  		/* cmpwi CR6, R3, -1 */
		/* 821A6A60h case    8:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821A6A60h case    8:*/		return 0x821A6A64;
		  /* 821A6A64h */ case    9:  		/* bc 12, CR6_EQ, 248 */
		/* 821A6A64h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A6B5C;  }
		/* 821A6A64h case    9:*/		return 0x821A6A68;
		  /* 821A6A68h */ case   10:  		/* addi R22, R29, 44 */
		/* 821A6A68h case   10:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R29,0x2C);
		/* 821A6A68h case   10:*/		return 0x821A6A6C;
		  /* 821A6A6Ch */ case   11:  		/* mr R20, R16 */
		/* 821A6A6Ch case   11:*/		regs.R20 = regs.R16;
		/* 821A6A6Ch case   11:*/		return 0x821A6A70;
		  /* 821A6A70h */ case   12:  		/* mr R28, R16 */
		/* 821A6A70h case   12:*/		regs.R28 = regs.R16;
		/* 821A6A70h case   12:*/		return 0x821A6A74;
		  /* 821A6A74h */ case   13:  		/* mr R24, R22 */
		/* 821A6A74h case   13:*/		regs.R24 = regs.R22;
		/* 821A6A74h case   13:*/		return 0x821A6A78;
		  /* 821A6A78h */ case   14:  		/* subf R23, R29, R31 */
		/* 821A6A78h case   14:*/		cpu::op::subf<0>(regs,&regs.R23,regs.R29,regs.R31);
		/* 821A6A78h case   14:*/		return 0x821A6A7C;
		  /* 821A6A7Ch */ case   15:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A6A7Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A6A7Ch case   15:*/		return 0x821A6A80;
		  /* 821A6A80h */ case   16:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A6A80h case   16:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A6A80h case   16:*/		return 0x821A6A84;
		  /* 821A6A84h */ case   17:  		/* cmplw CR6, R28, R11 */
		/* 821A6A84h case   17:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821A6A84h case   17:*/		return 0x821A6A88;
		  /* 821A6A88h */ case   18:  		/* bc 4, CR6_LT, 168 */
		/* 821A6A88h case   18:*/		if ( !regs.CR[6].lt ) { return 0x821A6B30;  }
		/* 821A6A88h case   18:*/		return 0x821A6A8C;
		  /* 821A6A8Ch */ case   19:  		/* lwzx R26, <#[R24 + R23]> */
		/* 821A6A8Ch case   19:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R24 + regs.R23 + 0x00000000) );
		/* 821A6A8Ch case   19:*/		return 0x821A6A90;
		  /* 821A6A90h */ case   20:  		/* mr R27, R16 */
		/* 821A6A90h case   20:*/		regs.R27 = regs.R16;
		/* 821A6A90h case   20:*/		return 0x821A6A94;
		  /* 821A6A94h */ case   21:  		/* lwz R25, <#[R24]> */
		/* 821A6A94h case   21:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R24 + 0x00000000) );
		/* 821A6A94h case   21:*/		return 0x821A6A98;
		  /* 821A6A98h */ case   22:  		/* cmplwi CR6, R28, 0 */
		/* 821A6A98h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A6A98h case   22:*/		return 0x821A6A9C;
		  /* 821A6A9Ch */ case   23:  		/* bc 12, CR6_EQ, 72 */
		/* 821A6A9Ch case   23:*/		if ( regs.CR[6].eq ) { return 0x821A6AE4;  }
		/* 821A6A9Ch case   23:*/		return 0x821A6AA0;
		  /* 821A6AA0h */ case   24:  		/* mr R30, R22 */
		/* 821A6AA0h case   24:*/		regs.R30 = regs.R22;
		/* 821A6AA0h case   24:*/		return 0x821A6AA4;
		  /* 821A6AA4h */ case   25:  		/* mr R3, R26 */
		/* 821A6AA4h case   25:*/		regs.R3 = regs.R26;
		/* 821A6AA4h case   25:*/		return 0x821A6AA8;
		  /* 821A6AA8h */ case   26:  		/* lwzx R4, <#[R23 + R30]> */
		/* 821A6AA8h case   26:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + regs.R30 + 0x00000000) );
		/* 821A6AA8h case   26:*/		return 0x821A6AAC;
		  /* 821A6AACh */ case   27:  		/* bl -272420 */
		/* 821A6AACh case   27:*/		regs.LR = 0x821A6AB0; return 0x82164288;
		/* 821A6AACh case   27:*/		return 0x821A6AB0;
		  /* 821A6AB0h */ case   28:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A6AB0h case   28:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A6AB0h case   28:*/		return 0x821A6AB4;
		  /* 821A6AB4h */ case   29:  		/* bc 12, CR0_EQ, 24 */
		/* 821A6AB4h case   29:*/		if ( regs.CR[0].eq ) { return 0x821A6ACC;  }
		/* 821A6AB4h case   29:*/		return 0x821A6AB8;
		  /* 821A6AB8h */ case   30:  		/* mr R3, R25 */
		/* 821A6AB8h case   30:*/		regs.R3 = regs.R25;
		/* 821A6AB8h case   30:*/		return 0x821A6ABC;
		  /* 821A6ABCh */ case   31:  		/* lwz R4, <#[R30]> */
		/* 821A6ABCh case   31:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821A6ABCh case   31:*/		return 0x821A6AC0;
		  /* 821A6AC0h */ case   32:  		/* bl -272440 */
		/* 821A6AC0h case   32:*/		regs.LR = 0x821A6AC4; return 0x82164288;
		/* 821A6AC0h case   32:*/		return 0x821A6AC4;
		  /* 821A6AC4h */ case   33:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A6AC4h case   33:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A6AC4h case   33:*/		return 0x821A6AC8;
		  /* 821A6AC8h */ case   34:  		/* bc 4, CR0_EQ, 20 */
		/* 821A6AC8h case   34:*/		if ( !regs.CR[0].eq ) { return 0x821A6ADC;  }
		/* 821A6AC8h case   34:*/		return 0x821A6ACC;
	}
	return 0x821A6ACC;
} // Block from 821A6A40h-821A6ACCh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821A6ACCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6ACC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6ACC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6ACC);
		  /* 821A6ACCh */ case    0:  		/* addi R27, R27, 1 */
		/* 821A6ACCh case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A6ACCh case    0:*/		return 0x821A6AD0;
		  /* 821A6AD0h */ case    1:  		/* addi R30, R30, 4 */
		/* 821A6AD0h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A6AD0h case    1:*/		return 0x821A6AD4;
		  /* 821A6AD4h */ case    2:  		/* cmplw CR6, R27, R28 */
		/* 821A6AD4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R28);
		/* 821A6AD4h case    2:*/		return 0x821A6AD8;
		  /* 821A6AD8h */ case    3:  		/* bc 12, CR6_LT, -52 */
		/* 821A6AD8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821A6AA4;  }
		/* 821A6AD8h case    3:*/		return 0x821A6ADC;
	}
	return 0x821A6ADC;
} // Block from 821A6ACCh-821A6ADCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A6ADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6ADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6ADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6ADC);
		  /* 821A6ADCh */ case    0:  		/* cmplw CR6, R27, R28 */
		/* 821A6ADCh case    0:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R28);
		/* 821A6ADCh case    0:*/		return 0x821A6AE0;
		  /* 821A6AE0h */ case    1:  		/* bc 12, CR6_LT, 60 */
		/* 821A6AE0h case    1:*/		if ( regs.CR[6].lt ) { return 0x821A6B1C;  }
		/* 821A6AE0h case    1:*/		return 0x821A6AE4;
	}
	return 0x821A6AE4;
} // Block from 821A6ADCh-821A6AE4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6AE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6AE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6AE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6AE4);
		  /* 821A6AE4h */ case    0:  		/* li R10, 0 */
		/* 821A6AE4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A6AE4h case    0:*/		return 0x821A6AE8;
		  /* 821A6AE8h */ case    1:  		/* addi R9, R1, 80 */
		/* 821A6AE8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821A6AE8h case    1:*/		return 0x821A6AEC;
		  /* 821A6AECh */ case    2:  		/* mr R8, R21 */
		/* 821A6AECh case    2:*/		regs.R8 = regs.R21;
		/* 821A6AECh case    2:*/		return 0x821A6AF0;
		  /* 821A6AF0h */ case    3:  		/* mr R7, R25 */
		/* 821A6AF0h case    3:*/		regs.R7 = regs.R25;
		/* 821A6AF0h case    3:*/		return 0x821A6AF4;
		  /* 821A6AF4h */ case    4:  		/* mr R6, R29 */
		/* 821A6AF4h case    4:*/		regs.R6 = regs.R29;
		/* 821A6AF4h case    4:*/		return 0x821A6AF8;
		  /* 821A6AF8h */ case    5:  		/* mr R5, R26 */
		/* 821A6AF8h case    5:*/		regs.R5 = regs.R26;
		/* 821A6AF8h case    5:*/		return 0x821A6AFC;
		  /* 821A6AFCh */ case    6:  		/* mr R4, R31 */
		/* 821A6AFCh case    6:*/		regs.R4 = regs.R31;
		/* 821A6AFCh case    6:*/		return 0x821A6B00;
		  /* 821A6B00h */ case    7:  		/* mr R3, R18 */
		/* 821A6B00h case    7:*/		regs.R3 = regs.R18;
		/* 821A6B00h case    7:*/		return 0x821A6B04;
		  /* 821A6B04h */ case    8:  		/* bl -27756 */
		/* 821A6B04h case    8:*/		regs.LR = 0x821A6B08; return 0x8219FE98;
		/* 821A6B04h case    8:*/		return 0x821A6B08;
		  /* 821A6B08h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 821A6B08h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821A6B08h case    9:*/		return 0x821A6B0C;
		  /* 821A6B0Ch */ case   10:  		/* bc 4, CR0_EQ, 28 */
		/* 821A6B0Ch case   10:*/		if ( !regs.CR[0].eq ) { return 0x821A6B28;  }
		/* 821A6B0Ch case   10:*/		return 0x821A6B10;
		  /* 821A6B10h */ case   11:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A6B10h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A6B10h case   11:*/		return 0x821A6B14;
		  /* 821A6B14h */ case   12:  		/* rlwinm R11, R11, 17, 29, 31 */
		/* 821A6B14h case   12:*/		cpu::op::rlwinm<0,17,29,31>(regs,&regs.R11,regs.R11);
		/* 821A6B14h case   12:*/		return 0x821A6B18;
		  /* 821A6B18h */ case   13:  		/* or R20, R11, R20 */
		/* 821A6B18h case   13:*/		cpu::op::or<0>(regs,&regs.R20,regs.R11,regs.R20);
		/* 821A6B18h case   13:*/		return 0x821A6B1C;
	}
	return 0x821A6B1C;
} // Block from 821A6AE4h-821A6B1Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A6B1Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6B1C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6B1C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6B1C);
		  /* 821A6B1Ch */ case    0:  		/* addi R28, R28, 1 */
		/* 821A6B1Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821A6B1Ch case    0:*/		return 0x821A6B20;
		  /* 821A6B20h */ case    1:  		/* addi R24, R24, 4 */
		/* 821A6B20h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x4);
		/* 821A6B20h case    1:*/		return 0x821A6B24;
		  /* 821A6B24h */ case    2:  		/* b -168 */
		/* 821A6B24h case    2:*/		return 0x821A6A7C;
		/* 821A6B24h case    2:*/		return 0x821A6B28;
	}
	return 0x821A6B28;
} // Block from 821A6B1Ch-821A6B28h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A6B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6B28);
		  /* 821A6B28h */ case    0:  		/* mr R15, R3 */
		/* 821A6B28h case    0:*/		regs.R15 = regs.R3;
		/* 821A6B28h case    0:*/		return 0x821A6B2C;
		  /* 821A6B2Ch */ case    1:  		/* b 48 */
		/* 821A6B2Ch case    1:*/		return 0x821A6B5C;
		/* 821A6B2Ch case    1:*/		return 0x821A6B30;
	}
	return 0x821A6B30;
} // Block from 821A6B28h-821A6B30h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6B30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6B30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6B30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6B30);
		  /* 821A6B30h */ case    0:  		/* andi. R11, R20, 5 */
		/* 821A6B30h case    0:*/		cpu::op::andi<1>(regs,&regs.R11,regs.R20,0x5);
		/* 821A6B30h case    0:*/		return 0x821A6B34;
		  /* 821A6B34h */ case    1:  		/* cmplwi CR6, R11, 5 */
		/* 821A6B34h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821A6B34h case    1:*/		return 0x821A6B38;
		  /* 821A6B38h */ case    2:  		/* bc 12, CR6_EQ, 36 */
		/* 821A6B38h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A6B5C;  }
		/* 821A6B38h case    2:*/		return 0x821A6B3C;
		  /* 821A6B3Ch */ case    3:  		/* mr R3, R31 */
		/* 821A6B3Ch case    3:*/		regs.R3 = regs.R31;
		/* 821A6B3Ch case    3:*/		return 0x821A6B40;
		  /* 821A6B40h */ case    4:  		/* bl -220560 */
		/* 821A6B40h case    4:*/		regs.LR = 0x821A6B44; return 0x82170DB0;
		/* 821A6B40h case    4:*/		return 0x821A6B44;
		  /* 821A6B44h */ case    5:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A6B44h case    5:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A6B44h case    5:*/		return 0x821A6B48;
		  /* 821A6B48h */ case    6:  		/* bc 4, CR0_EQ, 16 */
		/* 821A6B48h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A6B58;  }
		/* 821A6B48h case    6:*/		return 0x821A6B4C;
		  /* 821A6B4Ch */ case    7:  		/* cmplwi CR6, R17, 2 */
		/* 821A6B4Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000002);
		/* 821A6B4Ch case    7:*/		return 0x821A6B50;
		  /* 821A6B50h */ case    8:  		/* bc 4, CR6_LT, 8 */
		/* 821A6B50h case    8:*/		if ( !regs.CR[6].lt ) { return 0x821A6B58;  }
		/* 821A6B50h case    8:*/		return 0x821A6B54;
		  /* 821A6B54h */ case    9:  		/* li R17, 2 */
		/* 821A6B54h case    9:*/		cpu::op::li<0>(regs,&regs.R17,0x2);
		/* 821A6B54h case    9:*/		return 0x821A6B58;
	}
	return 0x821A6B58;
} // Block from 821A6B30h-821A6B58h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A6B58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6B58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6B58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6B58);
		  /* 821A6B58h */ case    0:  		/* mr R15, R16 */
		/* 821A6B58h case    0:*/		regs.R15 = regs.R16;
		/* 821A6B58h case    0:*/		return 0x821A6B5C;
	}
	return 0x821A6B5C;
} // Block from 821A6B58h-821A6B5Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A6B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6B5C);
		  /* 821A6B5Ch */ case    0:  		/* cmplwi CR6, R19, 0 */
		/* 821A6B5Ch case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821A6B5Ch case    0:*/		return 0x821A6B60;
		  /* 821A6B60h */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821A6B60h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A6B74;  }
		/* 821A6B60h case    1:*/		return 0x821A6B64;
		  /* 821A6B64h */ case    2:  		/* mr R5, R18 */
		/* 821A6B64h case    2:*/		regs.R5 = regs.R18;
		/* 821A6B64h case    2:*/		return 0x821A6B68;
		  /* 821A6B68h */ case    3:  		/* lwz R3, <#[R19 + 16]> */
		/* 821A6B68h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R19 + 0x00000010) );
		/* 821A6B68h case    3:*/		return 0x821A6B6C;
		  /* 821A6B6Ch */ case    4:  		/* mr R4, R19 */
		/* 821A6B6Ch case    4:*/		regs.R4 = regs.R19;
		/* 821A6B6Ch case    4:*/		return 0x821A6B70;
		  /* 821A6B70h */ case    5:  		/* bl -189024 */
		/* 821A6B70h case    5:*/		regs.LR = 0x821A6B74; return 0x82178910;
		/* 821A6B70h case    5:*/		return 0x821A6B74;
	}
	return 0x821A6B74;
} // Block from 821A6B5Ch-821A6B74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A6B74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6B74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6B74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6B74);
		  /* 821A6B74h */ case    0:  		/* mr R31, R16 */
		/* 821A6B74h case    0:*/		regs.R31 = regs.R16;
		/* 821A6B74h case    0:*/		return 0x821A6B78;
		  /* 821A6B78h */ case    1:  		/* addi R30, R1, 96 */
		/* 821A6B78h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R1,0x60);
		/* 821A6B78h case    1:*/		return 0x821A6B7C;
		  /* 821A6B7Ch */ case    2:  		/* lwz R4, <#[R30]> */
		/* 821A6B7Ch case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821A6B7Ch case    2:*/		return 0x821A6B80;
		  /* 821A6B80h */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 821A6B80h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A6B80h case    3:*/		return 0x821A6B84;
		  /* 821A6B84h */ case    4:  		/* bc 12, CR6_EQ, 64 */
		/* 821A6B84h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A6BC4;  }
		/* 821A6B84h case    4:*/		return 0x821A6B88;
		  /* 821A6B88h */ case    5:  		/* mr R11, R16 */
		/* 821A6B88h case    5:*/		regs.R11 = regs.R16;
		/* 821A6B88h case    5:*/		return 0x821A6B8C;
		  /* 821A6B8Ch */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821A6B8Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A6B8Ch case    6:*/		return 0x821A6B90;
		  /* 821A6B90h */ case    7:  		/* bc 12, CR6_EQ, 36 */
		/* 821A6B90h case    7:*/		if ( regs.CR[6].eq ) { return 0x821A6BB4;  }
		/* 821A6B90h case    7:*/		return 0x821A6B94;
		  /* 821A6B94h */ case    8:  		/* addi R10, R1, 96 */
		/* 821A6B94h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 821A6B94h case    8:*/		return 0x821A6B98;
		  /* 821A6B98h */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821A6B98h case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6B98h case    9:*/		return 0x821A6B9C;
		  /* 821A6B9Ch */ case   10:  		/* cmplw CR6, R4, R9 */
		/* 821A6B9Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R9);
		/* 821A6B9Ch case   10:*/		return 0x821A6BA0;
		  /* 821A6BA0h */ case   11:  		/* bc 12, CR6_EQ, 20 */
		/* 821A6BA0h case   11:*/		if ( regs.CR[6].eq ) { return 0x821A6BB4;  }
		/* 821A6BA0h case   11:*/		return 0x821A6BA4;
		  /* 821A6BA4h */ case   12:  		/* addi R11, R11, 1 */
		/* 821A6BA4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A6BA4h case   12:*/		return 0x821A6BA8;
		  /* 821A6BA8h */ case   13:  		/* addi R10, R10, 4 */
		/* 821A6BA8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A6BA8h case   13:*/		return 0x821A6BAC;
		  /* 821A6BACh */ case   14:  		/* cmplw CR6, R11, R31 */
		/* 821A6BACh case   14:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A6BACh case   14:*/		return 0x821A6BB0;
		  /* 821A6BB0h */ case   15:  		/* bc 12, CR6_LT, -24 */
		/* 821A6BB0h case   15:*/		if ( regs.CR[6].lt ) { return 0x821A6B98;  }
		/* 821A6BB0h case   15:*/		return 0x821A6BB4;
	}
	return 0x821A6BB4;
} // Block from 821A6B74h-821A6BB4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A6BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6BB4);
		  /* 821A6BB4h */ case    0:  		/* cmplw CR6, R11, R31 */
		/* 821A6BB4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A6BB4h case    0:*/		return 0x821A6BB8;
		  /* 821A6BB8h */ case    1:  		/* bc 4, CR6_EQ, 12 */
		/* 821A6BB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A6BC4;  }
		/* 821A6BB8h case    1:*/		return 0x821A6BBC;
		  /* 821A6BBCh */ case    2:  		/* mr R3, R18 */
		/* 821A6BBCh case    2:*/		regs.R3 = regs.R18;
		/* 821A6BBCh case    2:*/		return 0x821A6BC0;
		  /* 821A6BC0h */ case    3:  		/* bl -140728 */
		/* 821A6BC0h case    3:*/		regs.LR = 0x821A6BC4; return 0x82184608;
		/* 821A6BC0h case    3:*/		return 0x821A6BC4;
	}
	return 0x821A6BC4;
} // Block from 821A6BB4h-821A6BC4h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A6BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6BC4);
		  /* 821A6BC4h */ case    0:  		/* addi R31, R31, 1 */
		/* 821A6BC4h case    0:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A6BC4h case    0:*/		return 0x821A6BC8;
		  /* 821A6BC8h */ case    1:  		/* addi R30, R30, 4 */
		/* 821A6BC8h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A6BC8h case    1:*/		return 0x821A6BCC;
		  /* 821A6BCCh */ case    2:  		/* cmplwi CR6, R31, 4 */
		/* 821A6BCCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 821A6BCCh case    2:*/		return 0x821A6BD0;
		  /* 821A6BD0h */ case    3:  		/* bc 12, CR6_LT, -84 */
		/* 821A6BD0h case    3:*/		if ( regs.CR[6].lt ) { return 0x821A6B7C;  }
		/* 821A6BD0h case    3:*/		return 0x821A6BD4;
		  /* 821A6BD4h */ case    4:  		/* stw R17, <#[R14]> */
		/* 821A6BD4h case    4:*/		cpu::mem::store32( regs, regs.R17, (uint32)(regs.R14 + 0x00000000) );
		/* 821A6BD4h case    4:*/		return 0x821A6BD8;
		  /* 821A6BD8h */ case    5:  		/* mr R3, R15 */
		/* 821A6BD8h case    5:*/		regs.R3 = regs.R15;
		/* 821A6BD8h case    5:*/		return 0x821A6BDC;
		  /* 821A6BDCh */ case    6:  		/* addi R1, R1, 272 */
		/* 821A6BDCh case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x110);
		/* 821A6BDCh case    6:*/		return 0x821A6BE0;
		  /* 821A6BE0h */ case    7:  		/* b -1137008 */
		/* 821A6BE0h case    7:*/		return 0x82091270;
		/* 821A6BE0h case    7:*/		return 0x821A6BE4;
		  /* 821A6BE4h */ case    8:  		/* nop */
		/* 821A6BE4h case    8:*/		cpu::op::nop();
		/* 821A6BE4h case    8:*/		return 0x821A6BE8;
	}
	return 0x821A6BE8;
} // Block from 821A6BC4h-821A6BE8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A6BE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6BE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6BE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6BE8);
		  /* 821A6BE8h */ case    0:  		/* mfspr R12, LR */
		/* 821A6BE8h case    0:*/		regs.R12 = regs.LR;
		/* 821A6BE8h case    0:*/		return 0x821A6BEC;
		  /* 821A6BECh */ case    1:  		/* bl -1137072 */
		/* 821A6BECh case    1:*/		regs.LR = 0x821A6BF0; return 0x8209123C;
		/* 821A6BECh case    1:*/		return 0x821A6BF0;
		  /* 821A6BF0h */ case    2:  		/* stwu R1, <#[R1 - 176]> */
		/* 821A6BF0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF50) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF50);
		/* 821A6BF0h case    2:*/		return 0x821A6BF4;
		  /* 821A6BF4h */ case    3:  		/* mr R11, R5 */
		/* 821A6BF4h case    3:*/		regs.R11 = regs.R5;
		/* 821A6BF4h case    3:*/		return 0x821A6BF8;
		  /* 821A6BF8h */ case    4:  		/* lwz R5, <#[R5 + 12]> */
		/* 821A6BF8h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R5 + 0x0000000C) );
		/* 821A6BF8h case    4:*/		return 0x821A6BFC;
		  /* 821A6BFCh */ case    5:  		/* mr R28, R4 */
		/* 821A6BFCh case    5:*/		regs.R28 = regs.R4;
		/* 821A6BFCh case    5:*/		return 0x821A6C00;
		  /* 821A6C00h */ case    6:  		/* mr R4, R11 */
		/* 821A6C00h case    6:*/		regs.R4 = regs.R11;
		/* 821A6C00h case    6:*/		return 0x821A6C04;
		  /* 821A6C04h */ case    7:  		/* mr R31, R3 */
		/* 821A6C04h case    7:*/		regs.R31 = regs.R3;
		/* 821A6C04h case    7:*/		return 0x821A6C08;
		  /* 821A6C08h */ case    8:  		/* mr R26, R6 */
		/* 821A6C08h case    8:*/		regs.R26 = regs.R6;
		/* 821A6C08h case    8:*/		return 0x821A6C0C;
		  /* 821A6C0Ch */ case    9:  		/* mr R27, R7 */
		/* 821A6C0Ch case    9:*/		regs.R27 = regs.R7;
		/* 821A6C0Ch case    9:*/		return 0x821A6C10;
		  /* 821A6C10h */ case   10:  		/* mr R29, R8 */
		/* 821A6C10h case   10:*/		regs.R29 = regs.R8;
		/* 821A6C10h case   10:*/		return 0x821A6C14;
		  /* 821A6C14h */ case   11:  		/* mr R25, R9 */
		/* 821A6C14h case   11:*/		regs.R25 = regs.R9;
		/* 821A6C14h case   11:*/		return 0x821A6C18;
		  /* 821A6C18h */ case   12:  		/* mr R30, R10 */
		/* 821A6C18h case   12:*/		regs.R30 = regs.R10;
		/* 821A6C18h case   12:*/		return 0x821A6C1C;
		  /* 821A6C1Ch */ case   13:  		/* bl -219948 */
		/* 821A6C1Ch case   13:*/		regs.LR = 0x821A6C20; return 0x821710F0;
		/* 821A6C1Ch case   13:*/		return 0x821A6C20;
		  /* 821A6C20h */ case   14:  		/* mr R24, R3 */
		/* 821A6C20h case   14:*/		regs.R24 = regs.R3;
		/* 821A6C20h case   14:*/		return 0x821A6C24;
		  /* 821A6C24h */ case   15:  		/* lwz R5, <#[R29 + 12]> */
		/* 821A6C24h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A6C24h case   15:*/		return 0x821A6C28;
		  /* 821A6C28h */ case   16:  		/* mr R3, R31 */
		/* 821A6C28h case   16:*/		regs.R3 = regs.R31;
		/* 821A6C28h case   16:*/		return 0x821A6C2C;
		  /* 821A6C2Ch */ case   17:  		/* mr R4, R29 */
		/* 821A6C2Ch case   17:*/		regs.R4 = regs.R29;
		/* 821A6C2Ch case   17:*/		return 0x821A6C30;
		  /* 821A6C30h */ case   18:  		/* bl -219968 */
		/* 821A6C30h case   18:*/		regs.LR = 0x821A6C34; return 0x821710F0;
		/* 821A6C30h case   18:*/		return 0x821A6C34;
		  /* 821A6C34h */ case   19:  		/* mr R7, R3 */
		/* 821A6C34h case   19:*/		regs.R7 = regs.R3;
		/* 821A6C34h case   19:*/		return 0x821A6C38;
		  /* 821A6C38h */ case   20:  		/* mr R9, R30 */
		/* 821A6C38h case   20:*/		regs.R9 = regs.R30;
		/* 821A6C38h case   20:*/		return 0x821A6C3C;
		  /* 821A6C3Ch */ case   21:  		/* lwz R10, <#[R1 + 276]> */
		/* 821A6C3Ch case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x00000114) );
		/* 821A6C3Ch case   21:*/		return 0x821A6C40;
		  /* 821A6C40h */ case   22:  		/* mr R6, R27 */
		/* 821A6C40h case   22:*/		regs.R6 = regs.R27;
		/* 821A6C40h case   22:*/		return 0x821A6C44;
		  /* 821A6C44h */ case   23:  		/* lwz R8, <#[R30 + 28]> */
		/* 821A6C44h case   23:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 821A6C44h case   23:*/		return 0x821A6C48;
		  /* 821A6C48h */ case   24:  		/* mr R5, R24 */
		/* 821A6C48h case   24:*/		regs.R5 = regs.R24;
		/* 821A6C48h case   24:*/		return 0x821A6C4C;
		  /* 821A6C4Ch */ case   25:  		/* mr R4, R28 */
		/* 821A6C4Ch case   25:*/		regs.R4 = regs.R28;
		/* 821A6C4Ch case   25:*/		return 0x821A6C50;
		  /* 821A6C50h */ case   26:  		/* mr R3, R31 */
		/* 821A6C50h case   26:*/		regs.R3 = regs.R31;
		/* 821A6C50h case   26:*/		return 0x821A6C54;
		  /* 821A6C54h */ case   27:  		/* bl -16732 */
		/* 821A6C54h case   27:*/		regs.LR = 0x821A6C58; return 0x821A2AF8;
		/* 821A6C54h case   27:*/		return 0x821A6C58;
		  /* 821A6C58h */ case   28:  		/* lwz R4, <#[R3 + 12]> */
		/* 821A6C58h case   28:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A6C58h case   28:*/		return 0x821A6C5C;
		  /* 821A6C5Ch */ case   29:  		/* mr R29, R3 */
		/* 821A6C5Ch case   29:*/		regs.R29 = regs.R3;
		/* 821A6C5Ch case   29:*/		return 0x821A6C60;
		  /* 821A6C60h */ case   30:  		/* li R21, 0 */
		/* 821A6C60h case   30:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821A6C60h case   30:*/		return 0x821A6C64;
		  /* 821A6C64h */ case   31:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A6C64h case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A6C64h case   31:*/		return 0x821A6C68;
		  /* 821A6C68h */ case   32:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A6C68h case   32:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A6C68h case   32:*/		return 0x821A6C6C;
		  /* 821A6C6Ch */ case   33:  		/* cmplwi CR6, R11, 1 */
		/* 821A6C6Ch case   33:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821A6C6Ch case   33:*/		return 0x821A6C70;
		  /* 821A6C70h */ case   34:  		/* bc 12, CR6_LT, 16 */
		/* 821A6C70h case   34:*/		if ( regs.CR[6].lt ) { return 0x821A6C80;  }
		/* 821A6C70h case   34:*/		return 0x821A6C74;
		  /* 821A6C74h */ case   35:  		/* cmplwi CR6, R11, 102 */
		/* 821A6C74h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821A6C74h case   35:*/		return 0x821A6C78;
		  /* 821A6C78h */ case   36:  		/* li R11, 1 */
		/* 821A6C78h case   36:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A6C78h case   36:*/		return 0x821A6C7C;
		  /* 821A6C7Ch */ case   37:  		/* bc 4, CR6_GT, 8 */
		/* 821A6C7Ch case   37:*/		if ( !regs.CR[6].gt ) { return 0x821A6C84;  }
		/* 821A6C7Ch case   37:*/		return 0x821A6C80;
	}
	return 0x821A6C80;
} // Block from 821A6BE8h-821A6C80h (38 instructions)

//////////////////////////////////////////////////////
// Block at 821A6C80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6C80);
		  /* 821A6C80h */ case    0:  		/* li R11, 0 */
		/* 821A6C80h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A6C80h case    0:*/		return 0x821A6C84;
	}
	return 0x821A6C84;
} // Block from 821A6C80h-821A6C84h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A6C84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6C84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6C84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6C84);
		  /* 821A6C84h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A6C84h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A6C84h case    0:*/		return 0x821A6C88;
		  /* 821A6C88h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821A6C88h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A6C9C;  }
		/* 821A6C88h case    1:*/		return 0x821A6C8C;
		  /* 821A6C8Ch */ case    2:  		/* mr R5, R31 */
		/* 821A6C8Ch case    2:*/		regs.R5 = regs.R31;
		/* 821A6C8Ch case    2:*/		return 0x821A6C90;
		  /* 821A6C90h */ case    3:  		/* mr R3, R30 */
		/* 821A6C90h case    3:*/		regs.R3 = regs.R30;
		/* 821A6C90h case    3:*/		return 0x821A6C94;
		  /* 821A6C94h */ case    4:  		/* bl -191084 */
		/* 821A6C94h case    4:*/		regs.LR = 0x821A6C98; return 0x82178228;
		/* 821A6C94h case    4:*/		return 0x821A6C98;
		  /* 821A6C98h */ case    5:  		/* mr R21, R3 */
		/* 821A6C98h case    5:*/		regs.R21 = regs.R3;
		/* 821A6C98h case    5:*/		return 0x821A6C9C;
	}
	return 0x821A6C9C;
} // Block from 821A6C84h-821A6C9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A6C9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6C9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6C9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6C9C);
		  /* 821A6C9Ch */ case    0:  		/* li R8, 0 */
		/* 821A6C9Ch case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A6C9Ch case    0:*/		return 0x821A6CA0;
		  /* 821A6CA0h */ case    1:  		/* lwz R4, <#[R30 + 28]> */
		/* 821A6CA0h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 821A6CA0h case    1:*/		return 0x821A6CA4;
		  /* 821A6CA4h */ case    2:  		/* li R7, 0 */
		/* 821A6CA4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A6CA4h case    2:*/		return 0x821A6CA8;
		  /* 821A6CA8h */ case    3:  		/* li R6, 117 */
		/* 821A6CA8h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x75);
		/* 821A6CA8h case    3:*/		return 0x821A6CAC;
		  /* 821A6CACh */ case    4:  		/* li R5, 0 */
		/* 821A6CACh case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A6CACh case    4:*/		return 0x821A6CB0;
		  /* 821A6CB0h */ case    5:  		/* mr R3, R31 */
		/* 821A6CB0h case    5:*/		regs.R3 = regs.R31;
		/* 821A6CB0h case    5:*/		return 0x821A6CB4;
		  /* 821A6CB4h */ case    6:  		/* bl 515300 */
		/* 821A6CB4h case    6:*/		regs.LR = 0x821A6CB8; return 0x82224998;
		/* 821A6CB4h case    6:*/		return 0x821A6CB8;
		  /* 821A6CB8h */ case    7:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821A6CB8h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821A6CB8h case    7:*/		return 0x821A6CBC;
		  /* 821A6CBCh */ case    8:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A6CBCh case    8:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A6CBCh case    8:*/		return 0x821A6CC0;
		  /* 821A6CC0h */ case    9:  		/* addi R11, R11, 36 */
		/* 821A6CC0h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A6CC0h case    9:*/		return 0x821A6CC4;
		  /* 821A6CC4h */ case   10:  		/* addi R10, R10, 36 */
		/* 821A6CC4h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A6CC4h case   10:*/		return 0x821A6CC8;
		  /* 821A6CC8h */ case   11:  		/* addi R8, R11, -36 */
		/* 821A6CC8h case   11:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A6CC8h case   11:*/		return 0x821A6CCC;
		  /* 821A6CCCh */ case   12:  		/* addi R6, R10, -36 */
		/* 821A6CCCh case   12:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A6CCCh case   12:*/		return 0x821A6CD0;
		  /* 821A6CD0h */ case   13:  		/* addi R9, R10, 4 */
		/* 821A6CD0h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A6CD0h case   13:*/		return 0x821A6CD4;
		  /* 821A6CD4h */ case   14:  		/* lwz R7, <#[R11]> */
		/* 821A6CD4h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6CD4h case   14:*/		return 0x821A6CD8;
		  /* 821A6CD8h */ case   15:  		/* mr R4, R29 */
		/* 821A6CD8h case   15:*/		regs.R4 = regs.R29;
		/* 821A6CD8h case   15:*/		return 0x821A6CDC;
		  /* 821A6CDCh */ case   16:  		/* mr R24, R3 */
		/* 821A6CDCh case   16:*/		regs.R24 = regs.R3;
		/* 821A6CDCh case   16:*/		return 0x821A6CE0;
		  /* 821A6CE0h */ case   17:  		/* stw R7, <#[R10]> */
		/* 821A6CE0h case   17:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6CE0h case   17:*/		return 0x821A6CE4;
		  /* 821A6CE4h */ case   18:  		/* lwz R7, <#[R11]> */
		/* 821A6CE4h case   18:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6CE4h case   18:*/		return 0x821A6CE8;
		  /* 821A6CE8h */ case   19:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A6CE8h case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A6CE8h case   19:*/		return 0x821A6CEC;
		  /* 821A6CECh */ case   20:  		/* stw R6, <#[R7]> */
		/* 821A6CECh case   20:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821A6CECh case   20:*/		return 0x821A6CF0;
		  /* 821A6CF0h */ case   21:  		/* stw R8, <#[R10 + 4]> */
		/* 821A6CF0h case   21:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A6CF0h case   21:*/		return 0x821A6CF4;
		  /* 821A6CF4h */ case   22:  		/* stw R9, <#[R11]> */
		/* 821A6CF4h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6CF4h case   22:*/		return 0x821A6CF8;
		  /* 821A6CF8h */ case   23:  		/* bl -191280 */
		/* 821A6CF8h case   23:*/		regs.LR = 0x821A6CFC; return 0x821781C8;
		/* 821A6CF8h case   23:*/		return 0x821A6CFC;
		  /* 821A6CFCh */ case   24:  		/* lwz R23, <#[R1 + 284]> */
		/* 821A6CFCh case   24:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x0000011C) );
		/* 821A6CFCh case   24:*/		return 0x821A6D00;
		  /* 821A6D00h */ case   25:  		/* mr R8, R30 */
		/* 821A6D00h case   25:*/		regs.R8 = regs.R30;
		/* 821A6D00h case   25:*/		return 0x821A6D04;
		  /* 821A6D04h */ case   26:  		/* mr R9, R23 */
		/* 821A6D04h case   26:*/		regs.R9 = regs.R23;
		/* 821A6D04h case   26:*/		return 0x821A6D08;
		  /* 821A6D08h */ case   27:  		/* mr R7, R25 */
		/* 821A6D08h case   27:*/		regs.R7 = regs.R25;
		/* 821A6D08h case   27:*/		return 0x821A6D0C;
		  /* 821A6D0Ch */ case   28:  		/* mr R6, R27 */
		/* 821A6D0Ch case   28:*/		regs.R6 = regs.R27;
		/* 821A6D0Ch case   28:*/		return 0x821A6D10;
		  /* 821A6D10h */ case   29:  		/* mr R5, R26 */
		/* 821A6D10h case   29:*/		regs.R5 = regs.R26;
		/* 821A6D10h case   29:*/		return 0x821A6D14;
		  /* 821A6D14h */ case   30:  		/* mr R4, R28 */
		/* 821A6D14h case   30:*/		regs.R4 = regs.R28;
		/* 821A6D14h case   30:*/		return 0x821A6D18;
		  /* 821A6D18h */ case   31:  		/* mr R3, R31 */
		/* 821A6D18h case   31:*/		regs.R3 = regs.R31;
		/* 821A6D18h case   31:*/		return 0x821A6D1C;
		  /* 821A6D1Ch */ case   32:  		/* li R22, 0 */
		/* 821A6D1Ch case   32:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821A6D1Ch case   32:*/		return 0x821A6D20;
		  /* 821A6D20h */ case   33:  		/* bl -26648 */
		/* 821A6D20h case   33:*/		regs.LR = 0x821A6D24; return 0x821A0508;
		/* 821A6D20h case   33:*/		return 0x821A6D24;
		  /* 821A6D24h */ case   34:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A6D24h case   34:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A6D24h case   34:*/		return 0x821A6D28;
		  /* 821A6D28h */ case   35:  		/* bc 12, CR0_EQ, 96 */
		/* 821A6D28h case   35:*/		if ( regs.CR[0].eq ) { return 0x821A6D88;  }
		/* 821A6D28h case   35:*/		return 0x821A6D2C;
		  /* 821A6D2Ch */ case   36:  		/* mr R4, R26 */
		/* 821A6D2Ch case   36:*/		regs.R4 = regs.R26;
		/* 821A6D2Ch case   36:*/		return 0x821A6D30;
		  /* 821A6D30h */ case   37:  		/* lwz R5, <#[R26 + 12]> */
		/* 821A6D30h case   37:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R26 + 0x0000000C) );
		/* 821A6D30h case   37:*/		return 0x821A6D34;
		  /* 821A6D34h */ case   38:  		/* mr R3, R31 */
		/* 821A6D34h case   38:*/		regs.R3 = regs.R31;
		/* 821A6D34h case   38:*/		return 0x821A6D38;
		  /* 821A6D38h */ case   39:  		/* bl -220232 */
		/* 821A6D38h case   39:*/		regs.LR = 0x821A6D3C; return 0x821710F0;
		/* 821A6D38h case   39:*/		return 0x821A6D3C;
		  /* 821A6D3Ch */ case   40:  		/* mr R26, R3 */
		/* 821A6D3Ch case   40:*/		regs.R26 = regs.R3;
		/* 821A6D3Ch case   40:*/		return 0x821A6D40;
		  /* 821A6D40h */ case   41:  		/* mr R4, R25 */
		/* 821A6D40h case   41:*/		regs.R4 = regs.R25;
		/* 821A6D40h case   41:*/		return 0x821A6D44;
		  /* 821A6D44h */ case   42:  		/* lwz R5, <#[R25 + 12]> */
		/* 821A6D44h case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R25 + 0x0000000C) );
		/* 821A6D44h case   42:*/		return 0x821A6D48;
		  /* 821A6D48h */ case   43:  		/* mr R3, R31 */
		/* 821A6D48h case   43:*/		regs.R3 = regs.R31;
		/* 821A6D48h case   43:*/		return 0x821A6D4C;
		  /* 821A6D4Ch */ case   44:  		/* bl -220252 */
		/* 821A6D4Ch case   44:*/		regs.LR = 0x821A6D50; return 0x821710F0;
		/* 821A6D4Ch case   44:*/		return 0x821A6D50;
		  /* 821A6D50h */ case   45:  		/* mr R7, R3 */
		/* 821A6D50h case   45:*/		regs.R7 = regs.R3;
		/* 821A6D50h case   45:*/		return 0x821A6D54;
		  /* 821A6D54h */ case   46:  		/* mr R10, R23 */
		/* 821A6D54h case   46:*/		regs.R10 = regs.R23;
		/* 821A6D54h case   46:*/		return 0x821A6D58;
		  /* 821A6D58h */ case   47:  		/* lwz R8, <#[R30 + 28]> */
		/* 821A6D58h case   47:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R30 + 0x0000001C) );
		/* 821A6D58h case   47:*/		return 0x821A6D5C;
		  /* 821A6D5Ch */ case   48:  		/* mr R9, R30 */
		/* 821A6D5Ch case   48:*/		regs.R9 = regs.R30;
		/* 821A6D5Ch case   48:*/		return 0x821A6D60;
		  /* 821A6D60h */ case   49:  		/* mr R6, R27 */
		/* 821A6D60h case   49:*/		regs.R6 = regs.R27;
		/* 821A6D60h case   49:*/		return 0x821A6D64;
		  /* 821A6D64h */ case   50:  		/* mr R5, R26 */
		/* 821A6D64h case   50:*/		regs.R5 = regs.R26;
		/* 821A6D64h case   50:*/		return 0x821A6D68;
		  /* 821A6D68h */ case   51:  		/* mr R4, R28 */
		/* 821A6D68h case   51:*/		regs.R4 = regs.R28;
		/* 821A6D68h case   51:*/		return 0x821A6D6C;
		  /* 821A6D6Ch */ case   52:  		/* mr R3, R31 */
		/* 821A6D6Ch case   52:*/		regs.R3 = regs.R31;
		/* 821A6D6Ch case   52:*/		return 0x821A6D70;
		  /* 821A6D70h */ case   53:  		/* bl -17016 */
		/* 821A6D70h case   53:*/		regs.LR = 0x821A6D74; return 0x821A2AF8;
		/* 821A6D70h case   53:*/		return 0x821A6D74;
		  /* 821A6D74h */ case   54:  		/* lwz R11, <#[R1 + 260]> */
		/* 821A6D74h case   54:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000104) );
		/* 821A6D74h case   54:*/		return 0x821A6D78;
		  /* 821A6D78h */ case   55:  		/* lwz R10, <#[R1 + 268]> */
		/* 821A6D78h case   55:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000010C) );
		/* 821A6D78h case   55:*/		return 0x821A6D7C;
		  /* 821A6D7Ch */ case   56:  		/* li R22, 1 */
		/* 821A6D7Ch case   56:*/		cpu::op::li<0>(regs,&regs.R22,0x1);
		/* 821A6D7Ch case   56:*/		return 0x821A6D80;
		  /* 821A6D80h */ case   57:  		/* stw R29, <#[R11]> */
		/* 821A6D80h case   57:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6D80h case   57:*/		return 0x821A6D84;
		  /* 821A6D84h */ case   58:  		/* stw R3, <#[R10]> */
		/* 821A6D84h case   58:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6D84h case   58:*/		return 0x821A6D88;
	}
	return 0x821A6D88;
} // Block from 821A6C9Ch-821A6D88h (59 instructions)

//////////////////////////////////////////////////////
// Block at 821A6D88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6D88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6D88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6D88);
		  /* 821A6D88h */ case    0:  		/* cmplwi CR6, R21, 0 */
		/* 821A6D88h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821A6D88h case    0:*/		return 0x821A6D8C;
		  /* 821A6D8Ch */ case    1:  		/* bc 12, CR6_EQ, 20 */
		/* 821A6D8Ch case    1:*/		if ( regs.CR[6].eq ) { return 0x821A6DA0;  }
		/* 821A6D8Ch case    1:*/		return 0x821A6D90;
		  /* 821A6D90h */ case    2:  		/* mr R5, R31 */
		/* 821A6D90h case    2:*/		regs.R5 = regs.R31;
		/* 821A6D90h case    2:*/		return 0x821A6D94;
		  /* 821A6D94h */ case    3:  		/* mr R4, R21 */
		/* 821A6D94h case    3:*/		regs.R4 = regs.R21;
		/* 821A6D94h case    3:*/		return 0x821A6D98;
		  /* 821A6D98h */ case    4:  		/* mr R3, R30 */
		/* 821A6D98h case    4:*/		regs.R3 = regs.R30;
		/* 821A6D98h case    4:*/		return 0x821A6D9C;
		  /* 821A6D9Ch */ case    5:  		/* bl -189580 */
		/* 821A6D9Ch case    5:*/		regs.LR = 0x821A6DA0; return 0x82178910;
		/* 821A6D9Ch case    5:*/		return 0x821A6DA0;
	}
	return 0x821A6DA0;
} // Block from 821A6D88h-821A6DA0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A6DA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6DA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6DA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6DA0);
		  /* 821A6DA0h */ case    0:  		/* lwz R11, <#[R29 + 16]> */
		/* 821A6DA0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821A6DA0h case    0:*/		return 0x821A6DA4;
		  /* 821A6DA4h */ case    1:  		/* lwz R10, <#[R11]> */
		/* 821A6DA4h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6DA4h case    1:*/		return 0x821A6DA8;
		  /* 821A6DA8h */ case    2:  		/* b 12 */
		/* 821A6DA8h case    2:*/		return 0x821A6DB4;
		/* 821A6DA8h case    2:*/		return 0x821A6DAC;
		  /* 821A6DACh */ case    3:  		/* addi R11, R10, 4 */
		/* 821A6DACh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 821A6DACh case    3:*/		return 0x821A6DB0;
		  /* 821A6DB0h */ case    4:  		/* lwz R10, <#[R10 + 4]> */
		/* 821A6DB0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821A6DB0h case    4:*/		return 0x821A6DB4;
	}
	return 0x821A6DB4;
} // Block from 821A6DA0h-821A6DB4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A6DB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6DB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6DB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6DB4);
		  /* 821A6DB4h */ case    0:  		/* cmplw CR6, R10, R29 */
		/* 821A6DB4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R29);
		/* 821A6DB4h case    0:*/		return 0x821A6DB8;
		  /* 821A6DB8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A6DB8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A6DAC;  }
		/* 821A6DB8h case    1:*/		return 0x821A6DBC;
		  /* 821A6DBCh */ case    2:  		/* lwz R10, <#[R29 + 4]> */
		/* 821A6DBCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000004) );
		/* 821A6DBCh case    2:*/		return 0x821A6DC0;
		  /* 821A6DC0h */ case    3:  		/* li R9, 0 */
		/* 821A6DC0h case    3:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A6DC0h case    3:*/		return 0x821A6DC4;
		  /* 821A6DC4h */ case    4:  		/* li R6, 1 */
		/* 821A6DC4h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A6DC4h case    4:*/		return 0x821A6DC8;
		  /* 821A6DC8h */ case    5:  		/* li R5, 0 */
		/* 821A6DC8h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A6DC8h case    5:*/		return 0x821A6DCC;
		  /* 821A6DCCh */ case    6:  		/* mr R4, R24 */
		/* 821A6DCCh case    6:*/		regs.R4 = regs.R24;
		/* 821A6DCCh case    6:*/		return 0x821A6DD0;
		  /* 821A6DD0h */ case    7:  		/* mr R3, R31 */
		/* 821A6DD0h case    7:*/		regs.R3 = regs.R31;
		/* 821A6DD0h case    7:*/		return 0x821A6DD4;
		  /* 821A6DD4h */ case    8:  		/* stw R10, <#[R11]> */
		/* 821A6DD4h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6DD4h case    8:*/		return 0x821A6DD8;
		  /* 821A6DD8h */ case    9:  		/* stw R9, <#[R29 + 16]> */
		/* 821A6DD8h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R29 + 0x00000010) );
		/* 821A6DD8h case    9:*/		return 0x821A6DDC;
		  /* 821A6DDCh */ case   10:  		/* bl 542188 */
		/* 821A6DDCh case   10:*/		regs.LR = 0x821A6DE0; return 0x8222B3C8;
		/* 821A6DDCh case   10:*/		return 0x821A6DE0;
		  /* 821A6DE0h */ case   11:  		/* mr R3, R22 */
		/* 821A6DE0h case   11:*/		regs.R3 = regs.R22;
		/* 821A6DE0h case   11:*/		return 0x821A6DE4;
		  /* 821A6DE4h */ case   12:  		/* addi R1, R1, 176 */
		/* 821A6DE4h case   12:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xB0);
		/* 821A6DE4h case   12:*/		return 0x821A6DE8;
		  /* 821A6DE8h */ case   13:  		/* b -1137500 */
		/* 821A6DE8h case   13:*/		return 0x8209128C;
		/* 821A6DE8h case   13:*/		return 0x821A6DEC;
		  /* 821A6DECh */ case   14:  		/* nop */
		/* 821A6DECh case   14:*/		cpu::op::nop();
		/* 821A6DECh case   14:*/		return 0x821A6DF0;
	}
	return 0x821A6DF0;
} // Block from 821A6DB4h-821A6DF0h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A6DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6DF0);
		  /* 821A6DF0h */ case    0:  		/* mfspr R12, LR */
		/* 821A6DF0h case    0:*/		regs.R12 = regs.LR;
		/* 821A6DF0h case    0:*/		return 0x821A6DF4;
		  /* 821A6DF4h */ case    1:  		/* bl -1137620 */
		/* 821A6DF4h case    1:*/		regs.LR = 0x821A6DF8; return 0x82091220;
		/* 821A6DF4h case    1:*/		return 0x821A6DF8;
		  /* 821A6DF8h */ case    2:  		/* stwu R1, <#[R1 - 288]> */
		/* 821A6DF8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEE0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEE0);
		/* 821A6DF8h case    2:*/		return 0x821A6DFC;
		  /* 821A6DFCh */ case    3:  		/* addi R11, R4, 4 */
		/* 821A6DFCh case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x4);
		/* 821A6DFCh case    3:*/		return 0x821A6E00;
		  /* 821A6E00h */ case    4:  		/* lwz R11, <#[R4 + 4]> */
		/* 821A6E00h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000004) );
		/* 821A6E00h case    4:*/		return 0x821A6E04;
		  /* 821A6E04h */ case    5:  		/* mr R27, R3 */
		/* 821A6E04h case    5:*/		regs.R27 = regs.R3;
		/* 821A6E04h case    5:*/		return 0x821A6E08;
		  /* 821A6E08h */ case    6:  		/* stw R3, <#[R1 + 308]> */
		/* 821A6E08h case    6:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x00000134) );
		/* 821A6E08h case    6:*/		return 0x821A6E0C;
		  /* 821A6E0Ch */ case    7:  		/* mr R25, R4 */
		/* 821A6E0Ch case    7:*/		regs.R25 = regs.R4;
		/* 821A6E0Ch case    7:*/		return 0x821A6E10;
		  /* 821A6E10h */ case    8:  		/* stw R4, <#[R1 + 316]> */
		/* 821A6E10h case    8:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000013C) );
		/* 821A6E10h case    8:*/		return 0x821A6E14;
		  /* 821A6E14h */ case    9:  		/* mr R26, R5 */
		/* 821A6E14h case    9:*/		regs.R26 = regs.R5;
		/* 821A6E14h case    9:*/		return 0x821A6E18;
		  /* 821A6E18h */ case   10:  		/* stw R5, <#[R1 + 324]> */
		/* 821A6E18h case   10:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x00000144) );
		/* 821A6E18h case   10:*/		return 0x821A6E1C;
		  /* 821A6E1Ch */ case   11:  		/* mr R31, R6 */
		/* 821A6E1Ch case   11:*/		regs.R31 = regs.R6;
		/* 821A6E1Ch case   11:*/		return 0x821A6E20;
		  /* 821A6E20h */ case   12:  		/* stw R6, <#[R1 + 332]> */
		/* 821A6E20h case   12:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x0000014C) );
		/* 821A6E20h case   12:*/		return 0x821A6E24;
		  /* 821A6E24h */ case   13:  		/* cmplwi CR6, R11, 0 */
		/* 821A6E24h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A6E24h case   13:*/		return 0x821A6E28;
		  /* 821A6E28h */ case   14:  		/* bc 12, CR6_EQ, 64 */
		/* 821A6E28h case   14:*/		if ( regs.CR[6].eq ) { return 0x821A6E68;  }
		/* 821A6E28h case   14:*/		return 0x821A6E2C;
		  /* 821A6E2Ch */ case   15:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A6E2Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A6E2Ch case   15:*/		return 0x821A6E30;
		  /* 821A6E30h */ case   16:  		/* cmplwi CR6, R10, 0 */
		/* 821A6E30h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A6E30h case   16:*/		return 0x821A6E34;
		  /* 821A6E34h */ case   17:  		/* bc 12, CR6_EQ, 32 */
		/* 821A6E34h case   17:*/		if ( regs.CR[6].eq ) { return 0x821A6E54;  }
		/* 821A6E34h case   17:*/		return 0x821A6E38;
		  /* 821A6E38h */ case   18:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A6E38h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A6E38h case   18:*/		return 0x821A6E3C;
		  /* 821A6E3Ch */ case   19:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A6E3Ch case   19:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A6E3Ch case   19:*/		return 0x821A6E40;
		  /* 821A6E40h */ case   20:  		/* cmplwi CR6, R9, 14080 */
		/* 821A6E40h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A6E40h case   20:*/		return 0x821A6E44;
		  /* 821A6E44h */ case   21:  		/* bc 4, CR6_EQ, 16 */
		/* 821A6E44h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821A6E54;  }
		/* 821A6E44h case   21:*/		return 0x821A6E48;
		  /* 821A6E48h */ case   22:  		/* lwz R9, <#[R11]> */
		/* 821A6E48h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6E48h case   22:*/		return 0x821A6E4C;
		  /* 821A6E4Ch */ case   23:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A6E4Ch case   23:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A6E4Ch case   23:*/		return 0x821A6E50;
		  /* 821A6E50h */ case   24:  		/* bc 4, CR0_EQ, 12 */
		/* 821A6E50h case   24:*/		if ( !regs.CR[0].eq ) { return 0x821A6E5C;  }
		/* 821A6E50h case   24:*/		return 0x821A6E54;
	}
	return 0x821A6E54;
} // Block from 821A6DF0h-821A6E54h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821A6E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6E54);
		  /* 821A6E54h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A6E54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A6E54h case    0:*/		return 0x821A6E58;
		  /* 821A6E58h */ case    1:  		/* b -52 */
		/* 821A6E58h case    1:*/		return 0x821A6E24;
		/* 821A6E58h case    1:*/		return 0x821A6E5C;
	}
	return 0x821A6E5C;
} // Block from 821A6E54h-821A6E5Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6E5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6E5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6E5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6E5C);
		  /* 821A6E5Ch */ case    0:  		/* stw R10, <#[R1 + 84]> */
		/* 821A6E5Ch case    0:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000054) );
		/* 821A6E5Ch case    0:*/		return 0x821A6E60;
		  /* 821A6E60h */ case    1:  		/* li R21, 0 */
		/* 821A6E60h case    1:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821A6E60h case    1:*/		return 0x821A6E64;
		  /* 821A6E64h */ case    2:  		/* b 12 */
		/* 821A6E64h case    2:*/		return 0x821A6E70;
		/* 821A6E64h case    2:*/		return 0x821A6E68;
	}
	return 0x821A6E68;
} // Block from 821A6E5Ch-821A6E68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A6E68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6E68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6E68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6E68);
		  /* 821A6E68h */ case    0:  		/* li R21, 0 */
		/* 821A6E68h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821A6E68h case    0:*/		return 0x821A6E6C;
		  /* 821A6E6Ch */ case    1:  		/* stw R21, <#[R1 + 84]> */
		/* 821A6E6Ch case    1:*/		cpu::mem::store32( regs, regs.R21, (uint32)(regs.R1 + 0x00000054) );
		/* 821A6E6Ch case    1:*/		return 0x821A6E70;
	}
	return 0x821A6E70;
} // Block from 821A6E68h-821A6E70h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6E70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6E70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6E70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6E70);
		  /* 821A6E70h */ case    0:  		/* lwz R11, <#[R26 + 4]> */
		/* 821A6E70h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821A6E70h case    0:*/		return 0x821A6E74;
		  /* 821A6E74h */ case    1:  		/* addi R29, R26, 4 */
		/* 821A6E74h case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R26,0x4);
		/* 821A6E74h case    1:*/		return 0x821A6E78;
		  /* 821A6E78h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A6E78h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A6E78h case    2:*/		return 0x821A6E7C;
		  /* 821A6E7Ch */ case    3:  		/* bc 12, CR6_EQ, 60 */
		/* 821A6E7Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821A6EB8;  }
		/* 821A6E7Ch case    3:*/		return 0x821A6E80;
		  /* 821A6E80h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A6E80h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A6E80h case    4:*/		return 0x821A6E84;
		  /* 821A6E84h */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821A6E84h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A6E84h case    5:*/		return 0x821A6E88;
		  /* 821A6E88h */ case    6:  		/* bc 12, CR6_EQ, 32 */
		/* 821A6E88h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A6EA8;  }
		/* 821A6E88h case    6:*/		return 0x821A6E8C;
		  /* 821A6E8Ch */ case    7:  		/* lwz R9, <#[R10 + 8]> */
		/* 821A6E8Ch case    7:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000008) );
		/* 821A6E8Ch case    7:*/		return 0x821A6E90;
		  /* 821A6E90h */ case    8:  		/* rlwinm R9, R9, 0, 18, 24 */
		/* 821A6E90h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R9,regs.R9);
		/* 821A6E90h case    8:*/		return 0x821A6E94;
		  /* 821A6E94h */ case    9:  		/* cmplwi CR6, R9, 14080 */
		/* 821A6E94h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00003700);
		/* 821A6E94h case    9:*/		return 0x821A6E98;
		  /* 821A6E98h */ case   10:  		/* bc 4, CR6_EQ, 16 */
		/* 821A6E98h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821A6EA8;  }
		/* 821A6E98h case   10:*/		return 0x821A6E9C;
		  /* 821A6E9Ch */ case   11:  		/* lwz R9, <#[R11]> */
		/* 821A6E9Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6E9Ch case   11:*/		return 0x821A6EA0;
		  /* 821A6EA0h */ case   12:  		/* rlwinm. R9, R9, 0, 4, 6 */
		/* 821A6EA0h case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R9);
		/* 821A6EA0h case   12:*/		return 0x821A6EA4;
		  /* 821A6EA4h */ case   13:  		/* bc 4, CR0_EQ, 12 */
		/* 821A6EA4h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821A6EB0;  }
		/* 821A6EA4h case   13:*/		return 0x821A6EA8;
	}
	return 0x821A6EA8;
} // Block from 821A6E70h-821A6EA8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A6EA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6EA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6EA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6EA8);
		  /* 821A6EA8h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A6EA8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A6EA8h case    0:*/		return 0x821A6EAC;
		  /* 821A6EACh */ case    1:  		/* b -52 */
		/* 821A6EACh case    1:*/		return 0x821A6E78;
		/* 821A6EACh case    1:*/		return 0x821A6EB0;
	}
	return 0x821A6EB0;
} // Block from 821A6EA8h-821A6EB0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6EB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6EB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6EB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6EB0);
		  /* 821A6EB0h */ case    0:  		/* mr R28, R10 */
		/* 821A6EB0h case    0:*/		regs.R28 = regs.R10;
		/* 821A6EB0h case    0:*/		return 0x821A6EB4;
		  /* 821A6EB4h */ case    1:  		/* b 8 */
		/* 821A6EB4h case    1:*/		return 0x821A6EBC;
		/* 821A6EB4h case    1:*/		return 0x821A6EB8;
	}
	return 0x821A6EB8;
} // Block from 821A6EB0h-821A6EB8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6EB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6EB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6EB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6EB8);
		  /* 821A6EB8h */ case    0:  		/* mr R28, R21 */
		/* 821A6EB8h case    0:*/		regs.R28 = regs.R21;
		/* 821A6EB8h case    0:*/		return 0x821A6EBC;
	}
	return 0x821A6EBC;
} // Block from 821A6EB8h-821A6EBCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A6EBCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6EBC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6EBC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6EBC);
		  /* 821A6EBCh */ case    0:  		/* li R7, 0 */
		/* 821A6EBCh case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A6EBCh case    0:*/		return 0x821A6EC0;
		  /* 821A6EC0h */ case    1:  		/* stw R28, <#[R1 + 88]> */
		/* 821A6EC0h case    1:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 821A6EC0h case    1:*/		return 0x821A6EC4;
		  /* 821A6EC4h */ case    2:  		/* li R6, 1 */
		/* 821A6EC4h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A6EC4h case    2:*/		return 0x821A6EC8;
		  /* 821A6EC8h */ case    3:  		/* mr R5, R26 */
		/* 821A6EC8h case    3:*/		regs.R5 = regs.R26;
		/* 821A6EC8h case    3:*/		return 0x821A6ECC;
		  /* 821A6ECCh */ case    4:  		/* mr R4, R25 */
		/* 821A6ECCh case    4:*/		regs.R4 = regs.R25;
		/* 821A6ECCh case    4:*/		return 0x821A6ED0;
		  /* 821A6ED0h */ case    5:  		/* mr R3, R27 */
		/* 821A6ED0h case    5:*/		regs.R3 = regs.R27;
		/* 821A6ED0h case    5:*/		return 0x821A6ED4;
		  /* 821A6ED4h */ case    6:  		/* bl 552116 */
		/* 821A6ED4h case    6:*/		regs.LR = 0x821A6ED8; return 0x8222DB88;
		/* 821A6ED4h case    6:*/		return 0x821A6ED8;
		  /* 821A6ED8h */ case    7:  		/* mr R3, R25 */
		/* 821A6ED8h case    7:*/		regs.R3 = regs.R25;
		/* 821A6ED8h case    7:*/		return 0x821A6EDC;
		  /* 821A6EDCh */ case    8:  		/* bl -221484 */
		/* 821A6EDCh case    8:*/		regs.LR = 0x821A6EE0; return 0x82170DB0;
		/* 821A6EDCh case    8:*/		return 0x821A6EE0;
		  /* 821A6EE0h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A6EE0h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A6EE0h case    9:*/		return 0x821A6EE4;
		  /* 821A6EE4h */ case   10:  		/* bc 12, CR0_EQ, 24 */
		/* 821A6EE4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A6EFC;  }
		/* 821A6EE4h case   10:*/		return 0x821A6EE8;
		  /* 821A6EE8h */ case   11:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A6EE8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A6EE8h case   11:*/		return 0x821A6EEC;
		  /* 821A6EECh */ case   12:  		/* lwz R10, <#[R26 + 8]> */
		/* 821A6EECh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000008) );
		/* 821A6EECh case   12:*/		return 0x821A6EF0;
		  /* 821A6EF0h */ case   13:  		/* rlwinm R14, R11, 18, 29, 31 */
		/* 821A6EF0h case   13:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R14,regs.R11);
		/* 821A6EF0h case   13:*/		return 0x821A6EF4;
		  /* 821A6EF4h */ case   14:  		/* rlwinm R16, R10, 18, 29, 31 */
		/* 821A6EF4h case   14:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R16,regs.R10);
		/* 821A6EF4h case   14:*/		return 0x821A6EF8;
		  /* 821A6EF8h */ case   15:  		/* b 12 */
		/* 821A6EF8h case   15:*/		return 0x821A6F04;
		/* 821A6EF8h case   15:*/		return 0x821A6EFC;
	}
	return 0x821A6EFC;
} // Block from 821A6EBCh-821A6EFCh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A6EFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6EFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6EFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6EFC);
		  /* 821A6EFCh */ case    0:  		/* li R14, 2 */
		/* 821A6EFCh case    0:*/		cpu::op::li<0>(regs,&regs.R14,0x2);
		/* 821A6EFCh case    0:*/		return 0x821A6F00;
		  /* 821A6F00h */ case    1:  		/* li R16, 2 */
		/* 821A6F00h case    1:*/		cpu::op::li<0>(regs,&regs.R16,0x2);
		/* 821A6F00h case    1:*/		return 0x821A6F04;
	}
	return 0x821A6F04;
} // Block from 821A6EFCh-821A6F04h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A6F04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6F04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6F04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6F04);
		  /* 821A6F04h */ case    0:  		/* lis R11, -32252 */
		/* 821A6F04h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821A6F04h case    0:*/		return 0x821A6F08;
		  /* 821A6F08h */ case    1:  		/* lhz R15, <#[R26 + 14]> */
		/* 821A6F08h case    1:*/		cpu::mem::load16z( regs, &regs.R15, (uint32)(regs.R26 + 0x0000000E) );
		/* 821A6F08h case    1:*/		return 0x821A6F0C;
		  /* 821A6F0Ch */ case    2:  		/* add R17, R16, R14 */
		/* 821A6F0Ch case    2:*/		cpu::op::add<0>(regs,&regs.R17,regs.R16,regs.R14);
		/* 821A6F0Ch case    2:*/		return 0x821A6F10;
		  /* 821A6F10h */ case    3:  		/* addi R11, R11, -16632 */
		/* 821A6F10h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFBF08);
		/* 821A6F10h case    3:*/		return 0x821A6F14;
		  /* 821A6F14h */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821A6F14h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A6F14h case    4:*/		return 0x821A6F18;
		  /* 821A6F18h */ case    5:  		/* add R18, R14, R11 */
		/* 821A6F18h case    5:*/		cpu::op::add<0>(regs,&regs.R18,regs.R14,regs.R11);
		/* 821A6F18h case    5:*/		return 0x821A6F1C;
		  /* 821A6F1Ch */ case    6:  		/* lbz R11, <#[R18 - 1]> */
		/* 821A6F1Ch case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R18 + 0xFFFFFFFF) );
		/* 821A6F1Ch case    6:*/		return 0x821A6F20;
		  /* 821A6F20h */ case    7:  		/* stw R11, <#[R1 + 80]> */
		/* 821A6F20h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A6F20h case    7:*/		return 0x821A6F24;
		  /* 821A6F24h */ case    8:  		/* bc 12, CR6_EQ, 2216 */
		/* 821A6F24h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A77CC;  }
		/* 821A6F24h case    8:*/		return 0x821A6F28;
		  /* 821A6F28h */ case    9:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A6F28h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A6F28h case    9:*/		return 0x821A6F2C;
		  /* 821A6F2Ch */ case   10:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821A6F2Ch case   10:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821A6F2Ch case   10:*/		return 0x821A6F30;
		  /* 821A6F30h */ case   11:  		/* bc 12, CR0_EQ, 2204 */
		/* 821A6F30h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A77CC;  }
		/* 821A6F30h case   11:*/		return 0x821A6F34;
		  /* 821A6F34h */ case   12:  		/* addi R7, R1, 80 */
		/* 821A6F34h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x50);
		/* 821A6F34h case   12:*/		return 0x821A6F38;
		  /* 821A6F38h */ case   13:  		/* li R6, 1 */
		/* 821A6F38h case   13:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A6F38h case   13:*/		return 0x821A6F3C;
		  /* 821A6F3Ch */ case   14:  		/* mr R5, R26 */
		/* 821A6F3Ch case   14:*/		regs.R5 = regs.R26;
		/* 821A6F3Ch case   14:*/		return 0x821A6F40;
		  /* 821A6F40h */ case   15:  		/* mr R4, R31 */
		/* 821A6F40h case   15:*/		regs.R4 = regs.R31;
		/* 821A6F40h case   15:*/		return 0x821A6F44;
		  /* 821A6F44h */ case   16:  		/* mr R3, R27 */
		/* 821A6F44h case   16:*/		regs.R3 = regs.R27;
		/* 821A6F44h case   16:*/		return 0x821A6F48;
		  /* 821A6F48h */ case   17:  		/* bl -4040 */
		/* 821A6F48h case   17:*/		regs.LR = 0x821A6F4C; return 0x821A5F80;
		/* 821A6F48h case   17:*/		return 0x821A6F4C;
		  /* 821A6F4Ch */ case   18:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A6F4Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A6F4Ch case   18:*/		return 0x821A6F50;
		  /* 821A6F50h */ case   19:  		/* or. R19, R3, R3 */
		/* 821A6F50h case   19:*/		cpu::op::or<1>(regs,&regs.R19,regs.R3,regs.R3);
		/* 821A6F50h case   19:*/		return 0x821A6F54;
		  /* 821A6F54h */ case   20:  		/* rlwinm R10, R11, 27, 29, 31 */
		/* 821A6F54h case   20:*/		cpu::op::rlwinm<0,27,29,31>(regs,&regs.R10,regs.R11);
		/* 821A6F54h case   20:*/		return 0x821A6F58;
		  /* 821A6F58h */ case   21:  		/* subf R17, R10, R17 */
		/* 821A6F58h case   21:*/		cpu::op::subf<0>(regs,&regs.R17,regs.R10,regs.R17);
		/* 821A6F58h case   21:*/		return 0x821A6F5C;
		  /* 821A6F5Ch */ case   22:  		/* bc 4, CR0_EQ, 620 */
		/* 821A6F5Ch case   22:*/		if ( !regs.CR[0].eq ) { return 0x821A71C8;  }
		/* 821A6F5Ch case   22:*/		return 0x821A6F60;
		  /* 821A6F60h */ case   23:  		/* mr R8, R26 */
		/* 821A6F60h case   23:*/		regs.R8 = regs.R26;
		/* 821A6F60h case   23:*/		return 0x821A6F64;
		  /* 821A6F64h */ case   24:  		/* lwz R11, <#[R8]> */
		/* 821A6F64h case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A6F64h case   24:*/		return 0x821A6F68;
		  /* 821A6F68h */ case   25:  		/* cmplwi CR6, R11, 0 */
		/* 821A6F68h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A6F68h case   25:*/		return 0x821A6F6C;
		  /* 821A6F6Ch */ case   26:  		/* bc 12, CR6_EQ, 88 */
		/* 821A6F6Ch case   26:*/		if ( regs.CR[6].eq ) { return 0x821A6FC4;  }
		/* 821A6F6Ch case   26:*/		return 0x821A6F70;
		  /* 821A6F70h */ case   27:  		/* lwz R10, <#[R11]> */
		/* 821A6F70h case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6F70h case   27:*/		return 0x821A6F74;
		  /* 821A6F74h */ case   28:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821A6F74h case   28:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821A6F74h case   28:*/		return 0x821A6F78;
		  /* 821A6F78h */ case   29:  		/* bc 4, CR0_EQ, 56 */
		/* 821A6F78h case   29:*/		if ( !regs.CR[0].eq ) { return 0x821A6FB0;  }
		/* 821A6F78h case   29:*/		return 0x821A6F7C;
		  /* 821A6F7Ch */ case   30:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A6F7Ch case   30:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A6F7Ch case   30:*/		return 0x821A6F80;
		  /* 821A6F80h */ case   31:  		/* lwz R9, <#[R10]> */
		/* 821A6F80h case   31:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6F80h case   31:*/		return 0x821A6F84;
		  /* 821A6F84h */ case   32:  		/* b 12 */
		/* 821A6F84h case   32:*/		return 0x821A6F90;
		/* 821A6F84h case   32:*/		return 0x821A6F88;
		  /* 821A6F88h */ case   33:  		/* addi R10, R9, 4 */
		/* 821A6F88h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821A6F88h case   33:*/		return 0x821A6F8C;
		  /* 821A6F8Ch */ case   34:  		/* lwz R9, <#[R9 + 4]> */
		/* 821A6F8Ch case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821A6F8Ch case   34:*/		return 0x821A6F90;
	}
	return 0x821A6F90;
} // Block from 821A6F04h-821A6F90h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821A6F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6F90);
		  /* 821A6F90h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A6F90h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A6F90h case    0:*/		return 0x821A6F94;
		  /* 821A6F94h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A6F94h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A6F88;  }
		/* 821A6F94h case    1:*/		return 0x821A6F98;
		  /* 821A6F98h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821A6F98h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821A6F98h case    2:*/		return 0x821A6F9C;
		  /* 821A6F9Ch */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A6F9Ch case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A6F9Ch case    3:*/		return 0x821A6FA0;
		  /* 821A6FA0h */ case    4:  		/* lwz R10, <#[R25]> */
		/* 821A6FA0h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000000) );
		/* 821A6FA0h case    4:*/		return 0x821A6FA4;
		  /* 821A6FA4h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821A6FA4h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A6FA4h case    5:*/		return 0x821A6FA8;
		  /* 821A6FA8h */ case    6:  		/* stw R11, <#[R25]> */
		/* 821A6FA8h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A6FA8h case    6:*/		return 0x821A6FAC;
		  /* 821A6FACh */ case    7:  		/* stw R25, <#[R11 + 16]> */
		/* 821A6FACh case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R11 + 0x00000010) );
		/* 821A6FACh case    7:*/		return 0x821A6FB0;
	}
	return 0x821A6FB0;
} // Block from 821A6F90h-821A6FB0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A6FB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6FB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6FB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6FB0);
		  /* 821A6FB0h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A6FB0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A6FB0h case    0:*/		return 0x821A6FB4;
		  /* 821A6FB4h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A6FB4h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A6FB4h case    1:*/		return 0x821A6FB8;
		  /* 821A6FB8h */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821A6FB8h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A6F64;  }
		/* 821A6FB8h case    2:*/		return 0x821A6FBC;
		  /* 821A6FBCh */ case    3:  		/* addi R8, R11, 4 */
		/* 821A6FBCh case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821A6FBCh case    3:*/		return 0x821A6FC0;
		  /* 821A6FC0h */ case    4:  		/* b -92 */
		/* 821A6FC0h case    4:*/		return 0x821A6F64;
		/* 821A6FC0h case    4:*/		return 0x821A6FC4;
	}
	return 0x821A6FC4;
} // Block from 821A6FB0h-821A6FC4h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A6FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6FC4);
		  /* 821A6FC4h */ case    0:  		/* lwz R30, <#[R1 + 80]> */
		/* 821A6FC4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000050) );
		/* 821A6FC4h case    0:*/		return 0x821A6FC8;
		  /* 821A6FC8h */ case    1:  		/* lwz R31, <#[R29]> */
		/* 821A6FC8h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821A6FC8h case    1:*/		return 0x821A6FCC;
		  /* 821A6FCCh */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821A6FCCh case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A6FCCh case    2:*/		return 0x821A6FD0;
		  /* 821A6FD0h */ case    3:  		/* bc 12, CR6_EQ, 184 */
		/* 821A6FD0h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A7088;  }
		/* 821A6FD0h case    3:*/		return 0x821A6FD4;
		  /* 821A6FD4h */ case    4:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A6FD4h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A6FD4h case    4:*/		return 0x821A6FD8;
		  /* 821A6FD8h */ case    5:  		/* cmplwi CR6, R11, 0 */
		/* 821A6FD8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A6FD8h case    5:*/		return 0x821A6FDC;
		  /* 821A6FDCh */ case    6:  		/* bc 12, CR6_EQ, 152 */
		/* 821A6FDCh case    6:*/		if ( regs.CR[6].eq ) { return 0x821A7074;  }
		/* 821A6FDCh case    6:*/		return 0x821A6FE0;
		  /* 821A6FE0h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A6FE0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A6FE0h case    7:*/		return 0x821A6FE4;
		  /* 821A6FE4h */ case    8:  		/* addi R11, R11, 4 */
		/* 821A6FE4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A6FE4h case    8:*/		return 0x821A6FE8;
		  /* 821A6FE8h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821A6FE8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A6FE8h case    9:*/		return 0x821A6FEC;
		  /* 821A6FECh */ case   10:  		/* b 12 */
		/* 821A6FECh case   10:*/		return 0x821A6FF8;
		/* 821A6FECh case   10:*/		return 0x821A6FF0;
		  /* 821A6FF0h */ case   11:  		/* addi R11, R10, 8 */
		/* 821A6FF0h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A6FF0h case   11:*/		return 0x821A6FF4;
		  /* 821A6FF4h */ case   12:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A6FF4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A6FF4h case   12:*/		return 0x821A6FF8;
	}
	return 0x821A6FF8;
} // Block from 821A6FC4h-821A6FF8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A6FF8h
// Function '?CanCombineWorker@Compiler@D3DXShader@@AAA?AW4CanCombineResult@2@PAVInstruction@2@0PAIPAUCombineInstructionsState@2@_N@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A6FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A6FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A6FF8);
		  /* 821A6FF8h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A6FF8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A6FF8h case    0:*/		return 0x821A6FFC;
		  /* 821A6FFCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A6FFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A6FF0;  }
		/* 821A6FFCh case    1:*/		return 0x821A7000;
		  /* 821A7000h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A7000h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A7000h case    2:*/		return 0x821A7004;
		  /* 821A7004h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A7004h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7004h case    3:*/		return 0x821A7008;
		  /* 821A7008h */ case    4:  		/* addi R11, R25, 4 */
		/* 821A7008h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x4);
		/* 821A7008h case    4:*/		return 0x821A700C;
		  /* 821A700Ch */ case    5:  		/* lwz R10, <#[R25 + 4]> */
		/* 821A700Ch case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000004) );
		/* 821A700Ch case    5:*/		return 0x821A7010;
		  /* 821A7010h */ case    6:  		/* stw R10, <#[R31 + 8]> */
		/* 821A7010h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A7010h case    6:*/		return 0x821A7014;
		  /* 821A7014h */ case    7:  		/* stw R31, <#[R25 + 4]> */
		/* 821A7014h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000004) );
		/* 821A7014h case    7:*/		return 0x821A7018;
		  /* 821A7018h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821A7018h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A7018h case    8:*/		return 0x821A701C;
		  /* 821A701Ch */ case    9:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821A701Ch case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821A701Ch case    9:*/		return 0x821A7020;
		  /* 821A7020h */ case   10:  		/* stw R25, <#[R31 + 12]> */
		/* 821A7020h case   10:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A7020h case   10:*/		return 0x821A7024;
		  /* 821A7024h */ case   11:  		/* bc 12, CR0_EQ, 80 */
		/* 821A7024h case   11:*/		if ( regs.CR[0].eq ) { return 0x821A7074;  }
		/* 821A7024h case   11:*/		return 0x821A7028;
		  /* 821A7028h */ case   12:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821A7028h case   12:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821A7028h case   12:*/		return 0x821A702C;
		  /* 821A702Ch */ case   13:  		/* lwz R4, <#[R31 + 16]> */
		/* 821A702Ch case   13:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821A702Ch case   13:*/		return 0x821A7030;
		  /* 821A7030h */ case   14:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821A7030h case   14:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821A7030h case   14:*/		return 0x821A7034;
		  /* 821A7034h */ case   15:  		/* srw R10, R30, R10 */
		/* 821A7034h case   15:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R30,regs.R10);
		/* 821A7034h case   15:*/		return 0x821A7038;
		  /* 821A7038h */ case   16:  		/* srw R9, R30, R9 */
		/* 821A7038h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R30,regs.R9);
		/* 821A7038h case   16:*/		return 0x821A703C;
		  /* 821A703Ch */ case   17:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821A703Ch case   17:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821A703Ch case   17:*/		return 0x821A7040;
		  /* 821A7040h */ case   18:  		/* rlwinm R8, R11, 26, 29, 30 */
		/* 821A7040h case   18:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R8,regs.R11);
		/* 821A7040h case   18:*/		return 0x821A7044;
		  /* 821A7044h */ case   19:  		/* rlwinm R10, R11, 28, 29, 30 */
		/* 821A7044h case   19:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R10,regs.R11);
		/* 821A7044h case   19:*/		return 0x821A7048;
		  /* 821A7048h */ case   20:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A7048h case   20:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A7048h case   20:*/		return 0x821A704C;
		  /* 821A704Ch */ case   21:  		/* srw R8, R30, R8 */
		/* 821A704Ch case   21:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R30,regs.R8);
		/* 821A704Ch case   21:*/		return 0x821A7050;
		  /* 821A7050h */ case   22:  		/* srw R10, R30, R10 */
		/* 821A7050h case   22:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R30,regs.R10);
		/* 821A7050h case   22:*/		return 0x821A7054;
		  /* 821A7054h */ case   23:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821A7054h case   23:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821A7054h case   23:*/		return 0x821A7058;
		  /* 821A7058h */ case   24:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821A7058h case   24:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821A7058h case   24:*/		return 0x821A705C;
		  /* 821A705Ch */ case   25:  		/* rlwimi R10, R8, 2, 0, 29 */
		/* 821A705Ch case   25:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 821A705Ch case   25:*/		return 0x821A7060;
		  /* 821A7060h */ case   26:  		/* mr R3, R27 */
		/* 821A7060h case   26:*/		regs.R3 = regs.R27;
		/* 821A7060h case   26:*/		return 0x821A7064;
		  /* 821A7064h */ case   27:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821A7064h case   27:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821A7064h case   27:*/		return 0x821A7068;
		  /* 821A7068h */ case   28:  		/* or R11, R10, R11 */
		/* 821A7068h case   28:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A7068h case   28:*/		return 0x821A706C;
		  /* 821A706Ch */ case   29:  		/* stw R11, <#[R31]> */
		/* 821A706Ch case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A706Ch case   29:*/		return 0x821A7070;
		  /* 821A7070h */ case   30:  		/* bl -26040 */
		/* 821A7070h case   30:*/		regs.LR = 0x821A7074; return 0x821A0AB8;
		/* 821A7070h case   30:*/		return 0x821A7074;
	}
	return 0x821A7074;
} // Block from 821A6FF8h-821A7074h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821A7074h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7074( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7074) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7074);
		  /* 821A7074h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821A7074h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A7074h case    0:*/		return 0x821A7078;
		  /* 821A7078h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A7078h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A7078h case    1:*/		return 0x821A707C;
		  /* 821A707Ch */ case    2:  		/* bc 4, CR6_EQ, -180 */
		/* 821A707Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A6FC8;  }
		/* 821A707Ch case    2:*/		return 0x821A7080;
		  /* 821A7080h */ case    3:  		/* addi R29, R31, 8 */
		/* 821A7080h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x8);
		/* 821A7080h case    3:*/		return 0x821A7084;
		  /* 821A7084h */ case    4:  		/* b -188 */
		/* 821A7084h case    4:*/		return 0x821A6FC8;
		/* 821A7084h case    4:*/		return 0x821A7088;
	}
	return 0x821A7088;
} // Block from 821A7074h-821A7088h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A7088h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7088( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7088) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7088);
		  /* 821A7088h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 821A7088h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821A7088h case    0:*/		return 0x821A708C;
		  /* 821A708Ch */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A708Ch case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A708Ch case    1:*/		return 0x821A7090;
		  /* 821A7090h */ case    2:  		/* bc 12, CR0_EQ, 212 */
		/* 821A7090h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A7164;  }
		/* 821A7090h case    2:*/		return 0x821A7094;
		  /* 821A7094h */ case    3:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A7094h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A7094h case    3:*/		return 0x821A7098;
		  /* 821A7098h */ case    4:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A7098h case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A7098h case    4:*/		return 0x821A709C;
		  /* 821A709Ch */ case    5:  		/* bc 12, CR0_EQ, 44 */
		/* 821A709Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821A70C8;  }
		/* 821A709Ch case    5:*/		return 0x821A70A0;
		  /* 821A70A0h */ case    6:  		/* addi R11, R1, 96 */
		/* 821A70A0h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A70A0h case    6:*/		return 0x821A70A4;
		  /* 821A70A4h */ case    7:  		/* li R8, 0 */
		/* 821A70A4h case    7:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A70A4h case    7:*/		return 0x821A70A8;
		  /* 821A70A8h */ case    8:  		/* li R7, 0 */
		/* 821A70A8h case    8:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A70A8h case    8:*/		return 0x821A70AC;
		  /* 821A70ACh */ case    9:  		/* addi R6, R1, 96 */
		/* 821A70ACh case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821A70ACh case    9:*/		return 0x821A70B0;
		  /* 821A70B0h */ case   10:  		/* mr R5, R26 */
		/* 821A70B0h case   10:*/		regs.R5 = regs.R26;
		/* 821A70B0h case   10:*/		return 0x821A70B4;
		  /* 821A70B4h */ case   11:  		/* std R21, <#[R11]> */
		/* 821A70B4h case   11:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 821A70B4h case   11:*/		return 0x821A70B8;
		  /* 821A70B8h */ case   12:  		/* mr R4, R25 */
		/* 821A70B8h case   12:*/		regs.R4 = regs.R25;
		/* 821A70B8h case   12:*/		return 0x821A70BC;
		  /* 821A70BCh */ case   13:  		/* std R21, <#[R11 + 8]> */
		/* 821A70BCh case   13:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 821A70BCh case   13:*/		return 0x821A70C0;
		  /* 821A70C0h */ case   14:  		/* mr R3, R27 */
		/* 821A70C0h case   14:*/		regs.R3 = regs.R27;
		/* 821A70C0h case   14:*/		return 0x821A70C4;
		  /* 821A70C4h */ case   15:  		/* bl -41876 */
		/* 821A70C4h case   15:*/		regs.LR = 0x821A70C8; return 0x8219CD30;
		/* 821A70C4h case   15:*/		return 0x821A70C8;
	}
	return 0x821A70C8;
} // Block from 821A7088h-821A70C8h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A70C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A70C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A70C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A70C8);
		  /* 821A70C8h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A70C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A70C8h case    0:*/		return 0x821A70CC;
		  /* 821A70CCh */ case    1:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A70CCh case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A70CCh case    1:*/		return 0x821A70D0;
		  /* 821A70D0h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821A70D0h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A70E0;  }
		/* 821A70D0h case    2:*/		return 0x821A70D4;
		  /* 821A70D4h */ case    3:  		/* lhz R10, <#[R25 + 16]> */
		/* 821A70D4h case    3:*/		cpu::mem::load16z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000010) );
		/* 821A70D4h case    3:*/		return 0x821A70D8;
		  /* 821A70D8h */ case    4:  		/* rlwinm. R10, R10, 0, 29, 31 */
		/* 821A70D8h case    4:*/		cpu::op::rlwinm<1,0,29,31>(regs,&regs.R10,regs.R10);
		/* 821A70D8h case    4:*/		return 0x821A70DC;
		  /* 821A70DCh */ case    5:  		/* bc 12, CR0_EQ, 112 */
		/* 821A70DCh case    5:*/		if ( regs.CR[0].eq ) { return 0x821A714C;  }
		/* 821A70DCh case    5:*/		return 0x821A70E0;
	}
	return 0x821A70E0;
} // Block from 821A70C8h-821A70E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A70E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A70E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A70E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A70E0);
		  /* 821A70E0h */ case    0:  		/* lwz R10, <#[R25 + 16]> */
		/* 821A70E0h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000010) );
		/* 821A70E0h case    0:*/		return 0x821A70E4;
		  /* 821A70E4h */ case    1:  		/* oris R11, R11, 128 */
		/* 821A70E4h case    1:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A70E4h case    1:*/		return 0x821A70E8;
		  /* 821A70E8h */ case    2:  		/* rlwinm R10, R10, 0, 16, 12 */
		/* 821A70E8h case    2:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R10,regs.R10);
		/* 821A70E8h case    2:*/		return 0x821A70EC;
		  /* 821A70ECh */ case    3:  		/* stw R11, <#[R25 + 8]> */
		/* 821A70ECh case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A70ECh case    3:*/		return 0x821A70F0;
		  /* 821A70F0h */ case    4:  		/* stw R10, <#[R25 + 16]> */
		/* 821A70F0h case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R25 + 0x00000010) );
		/* 821A70F0h case    4:*/		return 0x821A70F4;
		  /* 821A70F4h */ case    5:  		/* lwz R3, <#[R27 + 660]> */
		/* 821A70F4h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R27 + 0x00000294) );
		/* 821A70F4h case    5:*/		return 0x821A70F8;
		  /* 821A70F8h */ case    6:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A70F8h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A70F8h case    6:*/		return 0x821A70FC;
		  /* 821A70FCh */ case    7:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A70FCh case    7:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A70FCh case    7:*/		return 0x821A7100;
		  /* 821A7100h */ case    8:  		/* bc 4, CR0_EQ, 40 */
		/* 821A7100h case    8:*/		if ( !regs.CR[0].eq ) { return 0x821A7128;  }
		/* 821A7100h case    8:*/		return 0x821A7104;
		  /* 821A7104h */ case    9:  		/* lwz R11, <#[R3]> */
		/* 821A7104h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A7104h case    9:*/		return 0x821A7108;
		  /* 821A7108h */ case   10:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A7108h case   10:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A7108h case   10:*/		return 0x821A710C;
		  /* 821A710Ch */ case   11:  		/* addic. R11, R11, -4 */
		/* 821A710Ch case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A710Ch case   11:*/		return 0x821A7110;
		  /* 821A7110h */ case   12:  		/* bc 12, CR0_EQ, 24 */
		/* 821A7110h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A7128;  }
		/* 821A7110h case   12:*/		return 0x821A7114;
		  /* 821A7114h */ case   13:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A7114h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7114h case   13:*/		return 0x821A7118;
		  /* 821A7118h */ case   14:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A7118h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A7118h case   14:*/		return 0x821A711C;
		  /* 821A711Ch */ case   15:  		/* addi R10, R10, 1 */
		/* 821A711Ch case   15:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A711Ch case   15:*/		return 0x821A7120;
		  /* 821A7120h */ case   16:  		/* cmplw CR6, R10, R9 */
		/* 821A7120h case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A7120h case   16:*/		return 0x821A7124;
		  /* 821A7124h */ case   17:  		/* bc 4, CR6_GT, 16 */
		/* 821A7124h case   17:*/		if ( !regs.CR[6].gt ) { return 0x821A7134;  }
		/* 821A7124h case   17:*/		return 0x821A7128;
	}
	return 0x821A7128;
} // Block from 821A70E0h-821A7128h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A7128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7128);
		  /* 821A7128h */ case    0:  		/* li R4, 1 */
		/* 821A7128h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A7128h case    0:*/		return 0x821A712C;
		  /* 821A712Ch */ case    1:  		/* bl -106596 */
		/* 821A712Ch case    1:*/		regs.LR = 0x821A7130; return 0x8218D0C8;
		/* 821A712Ch case    1:*/		return 0x821A7130;
		  /* 821A7130h */ case    2:  		/* mr R11, R3 */
		/* 821A7130h case    2:*/		regs.R11 = regs.R3;
		/* 821A7130h case    2:*/		return 0x821A7134;
	}
	return 0x821A7134;
} // Block from 821A7128h-821A7134h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A7134h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7134( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7134) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7134);
		  /* 821A7134h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A7134h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7134h case    0:*/		return 0x821A7138;
		  /* 821A7138h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A7138h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A7138h case    1:*/		return 0x821A713C;
		  /* 821A713Ch */ case    2:  		/* addi R8, R10, 1 */
		/* 821A713Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A713Ch case    2:*/		return 0x821A7140;
		  /* 821A7140h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A7140h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A7140h case    3:*/		return 0x821A7144;
		  /* 821A7144h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A7144h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7144h case    4:*/		return 0x821A7148;
		  /* 821A7148h */ case    5:  		/* stwx R25, <#[R10 + R11]> */
		/* 821A7148h case    5:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A7148h case    5:*/		return 0x821A714C;
	}
	return 0x821A714C;
} // Block from 821A7134h-821A714Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A714Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A714C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A714C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A714C);
		  /* 821A714Ch */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A714Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A714Ch case    0:*/		return 0x821A7150;
		  /* 821A7150h */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A7150h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A7150h case    1:*/		return 0x821A7154;
		  /* 821A7154h */ case    2:  		/* bc 4, CR0_EQ, 16 */
		/* 821A7154h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A7164;  }
		/* 821A7154h case    2:*/		return 0x821A7158;
		  /* 821A7158h */ case    3:  		/* mr R3, R26 */
		/* 821A7158h case    3:*/		regs.R3 = regs.R26;
		/* 821A7158h case    3:*/		return 0x821A715C;
		  /* 821A715Ch */ case    4:  		/* bl -145524 */
		/* 821A715Ch case    4:*/		regs.LR = 0x821A7160; return 0x821838E8;
		/* 821A715Ch case    4:*/		return 0x821A7160;
		  /* 821A7160h */ case    5:  		/* sth R3, <#[R25 + 18]> */
		/* 821A7160h case    5:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R25 + 0x00000012) );
		/* 821A7160h case    5:*/		return 0x821A7164;
	}
	return 0x821A7164;
} // Block from 821A714Ch-821A7164h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A7164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7164);
		  /* 821A7164h */ case    0:  		/* li R6, 1 */
		/* 821A7164h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A7164h case    0:*/		return 0x821A7168;
		  /* 821A7168h */ case    1:  		/* lwz R5, <#[R27 + 652]> */
		/* 821A7168h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x0000028C) );
		/* 821A7168h case    1:*/		return 0x821A716C;
		  /* 821A716Ch */ case    2:  		/* mr R4, R26 */
		/* 821A716Ch case    2:*/		regs.R4 = regs.R26;
		/* 821A716Ch case    2:*/		return 0x821A7170;
		  /* 821A7170h */ case    3:  		/* mr R3, R27 */
		/* 821A7170h case    3:*/		regs.R3 = regs.R27;
		/* 821A7170h case    3:*/		return 0x821A7174;
		  /* 821A7174h */ case    4:  		/* bl 541268 */
		/* 821A7174h case    4:*/		regs.LR = 0x821A7178; return 0x8222B3C8;
		/* 821A7174h case    4:*/		return 0x821A7178;
		  /* 821A7178h */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 821A7178h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A7178h case    5:*/		return 0x821A717C;
		  /* 821A717Ch */ case    6:  		/* bc 12, CR6_EQ, 56 */
		/* 821A717Ch case    6:*/		if ( regs.CR[6].eq ) { return 0x821A71B4;  }
		/* 821A717Ch case    6:*/		return 0x821A7180;
		  /* 821A7180h */ case    7:  		/* lwz R11, <#[R1 + 84]> */
		/* 821A7180h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821A7180h case    7:*/		return 0x821A7184;
		  /* 821A7184h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821A7184h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A7184h case    8:*/		return 0x821A7188;
		  /* 821A7188h */ case    9:  		/* bc 4, CR6_EQ, 8 */
		/* 821A7188h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821A7190;  }
		/* 821A7188h case    9:*/		return 0x821A718C;
		  /* 821A718Ch */ case   10:  		/* stw R28, <#[R1 + 84]> */
		/* 821A718Ch case   10:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000054) );
		/* 821A718Ch case   10:*/		return 0x821A7190;
	}
	return 0x821A7190;
} // Block from 821A7164h-821A7190h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821A7190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7190);
		  /* 821A7190h */ case    0:  		/* li R10, 0 */
		/* 821A7190h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A7190h case    0:*/		return 0x821A7194;
		  /* 821A7194h */ case    1:  		/* lwz R4, <#[R1 + 84]> */
		/* 821A7194h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821A7194h case    1:*/		return 0x821A7198;
		  /* 821A7198h */ case    2:  		/* li R9, 0 */
		/* 821A7198h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A7198h case    2:*/		return 0x821A719C;
		  /* 821A719Ch */ case    3:  		/* li R8, 0 */
		/* 821A719Ch case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A719Ch case    3:*/		return 0x821A71A0;
		  /* 821A71A0h */ case    4:  		/* mr R7, R28 */
		/* 821A71A0h case    4:*/		regs.R7 = regs.R28;
		/* 821A71A0h case    4:*/		return 0x821A71A4;
		  /* 821A71A4h */ case    5:  		/* mr R6, R14 */
		/* 821A71A4h case    5:*/		regs.R6 = regs.R14;
		/* 821A71A4h case    5:*/		return 0x821A71A8;
		  /* 821A71A8h */ case    6:  		/* mr R5, R25 */
		/* 821A71A8h case    6:*/		regs.R5 = regs.R25;
		/* 821A71A8h case    6:*/		return 0x821A71AC;
		  /* 821A71ACh */ case    7:  		/* mr R3, R27 */
		/* 821A71ACh case    7:*/		regs.R3 = regs.R27;
		/* 821A71ACh case    7:*/		return 0x821A71B0;
		  /* 821A71B0h */ case    8:  		/* bl -19808 */
		/* 821A71B0h case    8:*/		regs.LR = 0x821A71B4; return 0x821A2450;
		/* 821A71B0h case    8:*/		return 0x821A71B4;
	}
	return 0x821A71B4;
} // Block from 821A7190h-821A71B4h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A71B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A71B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A71B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A71B4);
		  /* 821A71B4h */ case    0:  		/* mr R4, R25 */
		/* 821A71B4h case    0:*/		regs.R4 = regs.R25;
		/* 821A71B4h case    0:*/		return 0x821A71B8;
		  /* 821A71B8h */ case    1:  		/* mr R3, R27 */
		/* 821A71B8h case    1:*/		regs.R3 = regs.R27;
		/* 821A71B8h case    1:*/		return 0x821A71BC;
		  /* 821A71BCh */ case    2:  		/* bl -26372 */
		/* 821A71BCh case    2:*/		regs.LR = 0x821A71C0; return 0x821A0AB8;
		/* 821A71BCh case    2:*/		return 0x821A71C0;
		  /* 821A71C0h */ case    3:  		/* mr R3, R25 */
		/* 821A71C0h case    3:*/		regs.R3 = regs.R25;
		/* 821A71C0h case    3:*/		return 0x821A71C4;
		  /* 821A71C4h */ case    4:  		/* b 4024 */
		/* 821A71C4h case    4:*/		return 0x821A817C;
		/* 821A71C4h case    4:*/		return 0x821A71C8;
	}
	return 0x821A71C8;
} // Block from 821A71B4h-821A71C8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A71C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A71C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A71C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A71C8);
		  /* 821A71C8h */ case    0:  		/* cmplwi CR6, R28, 0 */
		/* 821A71C8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821A71C8h case    0:*/		return 0x821A71CC;
		  /* 821A71CCh */ case    1:  		/* bc 12, CR6_EQ, 1528 */
		/* 821A71CCh case    1:*/		if ( regs.CR[6].eq ) { return 0x821A77C4;  }
		/* 821A71CCh case    1:*/		return 0x821A71D0;
		  /* 821A71D0h */ case    2:  		/* rlwinm. R9, R11, 0, 27, 31 */
		/* 821A71D0h case    2:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R9,regs.R11);
		/* 821A71D0h case    2:*/		return 0x821A71D4;
		  /* 821A71D4h */ case    3:  		/* mr R10, R21 */
		/* 821A71D4h case    3:*/		regs.R10 = regs.R21;
		/* 821A71D4h case    3:*/		return 0x821A71D8;
		  /* 821A71D8h */ case    4:  		/* bc 12, CR0_EQ, 92 */
		/* 821A71D8h case    4:*/		if ( regs.CR[0].eq ) { return 0x821A7234;  }
		/* 821A71D8h case    4:*/		return 0x821A71DC;
		  /* 821A71DCh */ case    5:  		/* mr R11, R21 */
		/* 821A71DCh case    5:*/		regs.R11 = regs.R21;
		/* 821A71DCh case    5:*/		return 0x821A71E0;
		  /* 821A71E0h */ case    6:  		/* addi R8, R11, 3 */
		/* 821A71E0h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x3);
		/* 821A71E0h case    6:*/		return 0x821A71E4;
		  /* 821A71E4h */ case    7:  		/* rlwinm R7, R11, 29, 3, 28 */
		/* 821A71E4h case    7:*/		cpu::op::rlwinm<0,29,3,28>(regs,&regs.R7,regs.R11);
		/* 821A71E4h case    7:*/		return 0x821A71E8;
		  /* 821A71E8h */ case    8:  		/* rldicl R8, R8, 0, 58 */
		/* 821A71E8h case    8:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R8,regs.R8);
		/* 821A71E8h case    8:*/		return 0x821A71EC;
		  /* 821A71ECh */ case    9:  		/* li R6, 2 */
		/* 821A71ECh case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x2);
		/* 821A71ECh case    9:*/		return 0x821A71F0;
		  /* 821A71F0h */ case   10:  		/* rldicl R5, R11, 0, 58 */
		/* 821A71F0h case   10:*/		cpu::op::rldicl<0,0,58>(regs,&regs.R5,regs.R11);
		/* 821A71F0h case   10:*/		return 0x821A71F4;
		  /* 821A71F4h */ case   11:  		/* sld R8, R6, R8 */
		/* 821A71F4h case   11:*/		cpu::op::sld<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 821A71F4h case   11:*/		return 0x821A71F8;
		  /* 821A71F8h */ case   12:  		/* ldx R7, <#[R7 + R31]> */
		/* 821A71F8h case   12:*/		cpu::mem::load64( regs, &regs.R7, (uint32)(regs.R7 + regs.R31 + 0x00000000) );
		/* 821A71F8h case   12:*/		return 0x821A71FC;
		  /* 821A71FCh */ case   13:  		/* addi R8, R8, -1 */
		/* 821A71FCh case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821A71FCh case   13:*/		return 0x821A7200;
		  /* 821A7200h */ case   14:  		/* li R6, -1 */
		/* 821A7200h case   14:*/		cpu::op::li<0>(regs,&regs.R6,0xFFFFFFFF);
		/* 821A7200h case   14:*/		return 0x821A7204;
		  /* 821A7204h */ case   15:  		/* and R8, R8, R7 */
		/* 821A7204h case   15:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821A7204h case   15:*/		return 0x821A7208;
		  /* 821A7208h */ case   16:  		/* sld R7, R6, R5 */
		/* 821A7208h case   16:*/		cpu::op::sld<0>(regs,&regs.R7,regs.R6,regs.R5);
		/* 821A7208h case   16:*/		return 0x821A720C;
		  /* 821A720Ch */ case   17:  		/* and R8, R8, R7 */
		/* 821A720Ch case   17:*/		cpu::op::and<0>(regs,&regs.R8,regs.R8,regs.R7);
		/* 821A720Ch case   17:*/		return 0x821A7210;
		  /* 821A7210h */ case   18:  		/* li R7, 1 */
		/* 821A7210h case   18:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A7210h case   18:*/		return 0x821A7214;
		  /* 821A7214h */ case   19:  		/* srd R8, R8, R5 */
		/* 821A7214h case   19:*/		cpu::op::srd<0>(regs,&regs.R8,regs.R8,regs.R5);
		/* 821A7214h case   19:*/		return 0x821A7218;
		  /* 821A7218h */ case   20:  		/* rlwinm R8, R8, 0, 30, 31 */
		/* 821A7218h case   20:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R8,regs.R8);
		/* 821A7218h case   20:*/		return 0x821A721C;
		  /* 821A721Ch */ case   21:  		/* addi R10, R10, 1 */
		/* 821A721Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A721Ch case   21:*/		return 0x821A7220;
		  /* 821A7220h */ case   22:  		/* slw R8, R7, R8 */
		/* 821A7220h case   22:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R7,regs.R8);
		/* 821A7220h case   22:*/		return 0x821A7224;
		  /* 821A7224h */ case   23:  		/* or R21, R8, R21 */
		/* 821A7224h case   23:*/		cpu::op::or<0>(regs,&regs.R21,regs.R8,regs.R21);
		/* 821A7224h case   23:*/		return 0x821A7228;
		  /* 821A7228h */ case   24:  		/* addi R11, R11, 4 */
		/* 821A7228h case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A7228h case   24:*/		return 0x821A722C;
		  /* 821A722Ch */ case   25:  		/* cmplw CR6, R10, R9 */
		/* 821A722Ch case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A722Ch case   25:*/		return 0x821A7230;
		  /* 821A7230h */ case   26:  		/* bc 12, CR6_LT, -80 */
		/* 821A7230h case   26:*/		if ( regs.CR[6].lt ) { return 0x821A71E0;  }
		/* 821A7230h case   26:*/		return 0x821A7234;
	}
	return 0x821A7234;
} // Block from 821A71C8h-821A7234h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A7234h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7234( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7234) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7234);
		  /* 821A7234h */ case    0:  		/* lwz R11, <#[R26 + 8]> */
		/* 821A7234h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821A7234h case    0:*/		return 0x821A7238;
		  /* 821A7238h */ case    1:  		/* lis R10, -32252 */
		/* 821A7238h case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821A7238h case    1:*/		return 0x821A723C;
		  /* 821A723Ch */ case    2:  		/* li R5, 28 */
		/* 821A723Ch case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x1C);
		/* 821A723Ch case    2:*/		return 0x821A7240;
		  /* 821A7240h */ case    3:  		/* rlwinm R9, R11, 31, 28, 31 */
		/* 821A7240h case    3:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R9,regs.R11);
		/* 821A7240h case    3:*/		return 0x821A7244;
		  /* 821A7244h */ case    4:  		/* addi R11, R10, -16648 */
		/* 821A7244h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFBEF8);
		/* 821A7244h case    4:*/		return 0x821A7248;
		  /* 821A7248h */ case    5:  		/* subf R10, R21, R9 */
		/* 821A7248h case    5:*/		cpu::op::subf<0>(regs,&regs.R10,regs.R21,regs.R9);
		/* 821A7248h case    5:*/		return 0x821A724C;
		  /* 821A724Ch */ case    6:  		/* li R4, 8 */
		/* 821A724Ch case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x8);
		/* 821A724Ch case    6:*/		return 0x821A7250;
		  /* 821A7250h */ case    7:  		/* add R11, R10, R11 */
		/* 821A7250h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A7250h case    7:*/		return 0x821A7254;
		  /* 821A7254h */ case    8:  		/* mr R3, R27 */
		/* 821A7254h case    8:*/		regs.R3 = regs.R27;
		/* 821A7254h case    8:*/		return 0x821A7258;
		  /* 821A7258h */ case    9:  		/* lbz R22, <#[R11 - 1]> */
		/* 821A7258h case    9:*/		cpu::mem::load8z( regs, &regs.R22, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821A7258h case    9:*/		return 0x821A725C;
		  /* 821A725Ch */ case   10:  		/* bl -272748 */
		/* 821A725Ch case   10:*/		regs.LR = 0x821A7260; return 0x821648F0;
		/* 821A725Ch case   10:*/		return 0x821A7260;
		  /* 821A7260h */ case   11:  		/* addi R20, R3, 4 */
		/* 821A7260h case   11:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R3,0x4);
		/* 821A7260h case   11:*/		return 0x821A7264;
		  /* 821A7264h */ case   12:  		/* ori R11, R3, 1 */
		/* 821A7264h case   12:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R3,0x1);
		/* 821A7264h case   12:*/		return 0x821A7268;
		  /* 821A7268h */ case   13:  		/* ori R10, R20, 1 */
		/* 821A7268h case   13:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R20,0x1);
		/* 821A7268h case   13:*/		return 0x821A726C;
		  /* 821A726Ch */ case   14:  		/* stw R11, <#[R3 + 4]> */
		/* 821A726Ch case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A726Ch case   14:*/		return 0x821A7270;
		  /* 821A7270h */ case   15:  		/* mr R24, R3 */
		/* 821A7270h case   15:*/		regs.R24 = regs.R3;
		/* 821A7270h case   15:*/		return 0x821A7274;
		  /* 821A7274h */ case   16:  		/* stw R10, <#[R3]> */
		/* 821A7274h case   16:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821A7274h case   16:*/		return 0x821A7278;
		  /* 821A7278h */ case   17:  		/* lwz R31, <#[R19 + 4]> */
		/* 821A7278h case   17:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R19 + 0x00000004) );
		/* 821A7278h case   17:*/		return 0x821A727C;
		  /* 821A727Ch */ case   18:  		/* cmplwi CR6, R31, 0 */
		/* 821A727Ch case   18:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A727Ch case   18:*/		return 0x821A7280;
		  /* 821A7280h */ case   19:  		/* bc 12, CR6_EQ, 120 */
		/* 821A7280h case   19:*/		if ( regs.CR[6].eq ) { return 0x821A72F8;  }
		/* 821A7280h case   19:*/		return 0x821A7284;
		  /* 821A7284h */ case   20:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A7284h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A7284h case   20:*/		return 0x821A7288;
		  /* 821A7288h */ case   21:  		/* cmplwi CR6, R11, 0 */
		/* 821A7288h case   21:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A7288h case   21:*/		return 0x821A728C;
		  /* 821A728Ch */ case   22:  		/* bc 12, CR6_EQ, 100 */
		/* 821A728Ch case   22:*/		if ( regs.CR[6].eq ) { return 0x821A72F0;  }
		/* 821A728Ch case   22:*/		return 0x821A7290;
		  /* 821A7290h */ case   23:  		/* lwz R11, <#[R31]> */
		/* 821A7290h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A7290h case   23:*/		return 0x821A7294;
		  /* 821A7294h */ case   24:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821A7294h case   24:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821A7294h case   24:*/		return 0x821A7298;
		  /* 821A7298h */ case   25:  		/* bc 12, CR0_EQ, 88 */
		/* 821A7298h case   25:*/		if ( regs.CR[0].eq ) { return 0x821A72F0;  }
		/* 821A7298h case   25:*/		return 0x821A729C;
		  /* 821A729Ch */ case   26:  		/* lwz R11, <#[R20]> */
		/* 821A729Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A729Ch case   26:*/		return 0x821A72A0;
		  /* 821A72A0h */ case   27:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A72A0h case   27:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A72A0h case   27:*/		return 0x821A72A4;
		  /* 821A72A4h */ case   28:  		/* bc 4, CR0_EQ, 40 */
		/* 821A72A4h case   28:*/		if ( !regs.CR[0].eq ) { return 0x821A72CC;  }
		/* 821A72A4h case   28:*/		return 0x821A72A8;
		  /* 821A72A8h */ case   29:  		/* lwz R11, <#[R24]> */
		/* 821A72A8h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A72A8h case   29:*/		return 0x821A72AC;
		  /* 821A72ACh */ case   30:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A72ACh case   30:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A72ACh case   30:*/		return 0x821A72B0;
		  /* 821A72B0h */ case   31:  		/* addic. R3, R11, -4 */
		/* 821A72B0h case   31:*/		cpu::op::addic<1>(regs,&regs.R3,regs.R11,0xFFFFFFFC);
		/* 821A72B0h case   31:*/		return 0x821A72B4;
		  /* 821A72B4h */ case   32:  		/* bc 12, CR0_EQ, 24 */
		/* 821A72B4h case   32:*/		if ( regs.CR[0].eq ) { return 0x821A72CC;  }
		/* 821A72B4h case   32:*/		return 0x821A72B8;
		  /* 821A72B8h */ case   33:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A72B8h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A72B8h case   33:*/		return 0x821A72BC;
		  /* 821A72BCh */ case   34:  		/* lwz R10, <#[R3 + 12]> */
		/* 821A72BCh case   34:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A72BCh case   34:*/		return 0x821A72C0;
		  /* 821A72C0h */ case   35:  		/* addi R11, R11, 1 */
		/* 821A72C0h case   35:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A72C0h case   35:*/		return 0x821A72C4;
		  /* 821A72C4h */ case   36:  		/* cmplw CR6, R11, R10 */
		/* 821A72C4h case   36:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R10);
		/* 821A72C4h case   36:*/		return 0x821A72C8;
		  /* 821A72C8h */ case   37:  		/* bc 4, CR6_GT, 16 */
		/* 821A72C8h case   37:*/		if ( !regs.CR[6].gt ) { return 0x821A72D8;  }
		/* 821A72C8h case   37:*/		return 0x821A72CC;
	}
	return 0x821A72CC;
} // Block from 821A7234h-821A72CCh (38 instructions)

//////////////////////////////////////////////////////
// Block at 821A72CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A72CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A72CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A72CC);
		  /* 821A72CCh */ case    0:  		/* li R4, 1 */
		/* 821A72CCh case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A72CCh case    0:*/		return 0x821A72D0;
		  /* 821A72D0h */ case    1:  		/* mr R3, R24 */
		/* 821A72D0h case    1:*/		regs.R3 = regs.R24;
		/* 821A72D0h case    1:*/		return 0x821A72D4;
		  /* 821A72D4h */ case    2:  		/* bl -107020 */
		/* 821A72D4h case    2:*/		regs.LR = 0x821A72D8; return 0x8218D0C8;
		/* 821A72D4h case    2:*/		return 0x821A72D8;
	}
	return 0x821A72D8;
} // Block from 821A72CCh-821A72D8h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A72D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A72D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A72D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A72D8);
		  /* 821A72D8h */ case    0:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A72D8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A72D8h case    0:*/		return 0x821A72DC;
		  /* 821A72DCh */ case    1:  		/* addi R10, R11, 4 */
		/* 821A72DCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821A72DCh case    1:*/		return 0x821A72E0;
		  /* 821A72E0h */ case    2:  		/* addi R9, R11, 1 */
		/* 821A72E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x1);
		/* 821A72E0h case    2:*/		return 0x821A72E4;
		  /* 821A72E4h */ case    3:  		/* rlwinm R11, R10, 2, 0, 29 */
		/* 821A72E4h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R10);
		/* 821A72E4h case    3:*/		return 0x821A72E8;
		  /* 821A72E8h */ case    4:  		/* stw R9, <#[R3 + 8]> */
		/* 821A72E8h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R3 + 0x00000008) );
		/* 821A72E8h case    4:*/		return 0x821A72EC;
		  /* 821A72ECh */ case    5:  		/* stwx R31, <#[R11 + R3]> */
		/* 821A72ECh case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + regs.R3 + 0x00000000) );
		/* 821A72ECh case    5:*/		return 0x821A72F0;
	}
	return 0x821A72F0;
} // Block from 821A72D8h-821A72F0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A72F0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A72F0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A72F0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A72F0);
		  /* 821A72F0h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821A72F0h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821A72F0h case    0:*/		return 0x821A72F4;
		  /* 821A72F4h */ case    1:  		/* b -120 */
		/* 821A72F4h case    1:*/		return 0x821A727C;
		/* 821A72F4h case    1:*/		return 0x821A72F8;
	}
	return 0x821A72F8;
} // Block from 821A72F0h-821A72F8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A72F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A72F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A72F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A72F8);
		  /* 821A72F8h */ case    0:  		/* lwz R23, <#[R1 + 80]> */
		/* 821A72F8h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000050) );
		/* 821A72F8h case    0:*/		return 0x821A72FC;
		  /* 821A72FCh */ case    1:  		/* lwz R11, <#[R20]> */
		/* 821A72FCh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000000) );
		/* 821A72FCh case    1:*/		return 0x821A7300;
		  /* 821A7300h */ case    2:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821A7300h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821A7300h case    2:*/		return 0x821A7304;
		  /* 821A7304h */ case    3:  		/* bc 4, CR0_EQ, 1080 */
		/* 821A7304h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A773C;  }
		/* 821A7304h case    3:*/		return 0x821A7308;
		  /* 821A7308h */ case    4:  		/* cmplwi CR0, R11, 0 */
		/* 821A7308h case    4:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A7308h case    4:*/		return 0x821A730C;
		  /* 821A730Ch */ case    5:  		/* bc 12, CR0_EQ, 1072 */
		/* 821A730Ch case    5:*/		if ( regs.CR[0].eq ) { return 0x821A773C;  }
		/* 821A730Ch case    5:*/		return 0x821A7310;
		  /* 821A7310h */ case    6:  		/* lwz R11, <#[R24]> */
		/* 821A7310h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A7310h case    6:*/		return 0x821A7314;
		  /* 821A7314h */ case    7:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A7314h case    7:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A7314h case    7:*/		return 0x821A7318;
		  /* 821A7318h */ case    8:  		/* addi R4, R11, -4 */
		/* 821A7318h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R11,0xFFFFFFFC);
		/* 821A7318h case    8:*/		return 0x821A731C;
		  /* 821A731Ch */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 821A731Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821A731Ch case    9:*/		return 0x821A7320;
		  /* 821A7320h */ case   10:  		/* addi R10, R11, 3 */
		/* 821A7320h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821A7320h case   10:*/		return 0x821A7324;
		  /* 821A7324h */ case   11:  		/* addic. R11, R11, -1 */
		/* 821A7324h case   11:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A7324h case   11:*/		return 0x821A7328;
		  /* 821A7328h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821A7328h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821A7328h case   12:*/		return 0x821A732C;
		  /* 821A732Ch */ case   13:  		/* lwzx R28, <#[R10 + R4]> */
		/* 821A732Ch case   13:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R10 + regs.R4 + 0x00000000) );
		/* 821A732Ch case   13:*/		return 0x821A7330;
		  /* 821A7330h */ case   14:  		/* stw R11, <#[R4 + 8]> */
		/* 821A7330h case   14:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A7330h case   14:*/		return 0x821A7334;
		  /* 821A7334h */ case   15:  		/* bc 4, CR0_EQ, 60 */
		/* 821A7334h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821A7370;  }
		/* 821A7334h case   15:*/		return 0x821A7338;
		  /* 821A7338h */ case   16:  		/* rlwinm R11, R4, 0, 0, 30 */
		/* 821A7338h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R4);
		/* 821A7338h case   16:*/		return 0x821A733C;
		  /* 821A733Ch */ case   17:  		/* mr R3, R24 */
		/* 821A733Ch case   17:*/		regs.R3 = regs.R24;
		/* 821A733Ch case   17:*/		return 0x821A7340;
		  /* 821A7340h */ case   18:  		/* lwz R10, <#[R11 + 4]> */
		/* 821A7340h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A7340h case   18:*/		return 0x821A7344;
		  /* 821A7344h */ case   19:  		/* lwz R9, <#[R11]> */
		/* 821A7344h case   19:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7344h case   19:*/		return 0x821A7348;
		  /* 821A7348h */ case   20:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821A7348h case   20:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821A7348h case   20:*/		return 0x821A734C;
		  /* 821A734Ch */ case   21:  		/* stw R9, <#[R10]> */
		/* 821A734Ch case   21:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A734Ch case   21:*/		return 0x821A7350;
		  /* 821A7350h */ case   22:  		/* lwz R10, <#[R11]> */
		/* 821A7350h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7350h case   22:*/		return 0x821A7354;
		  /* 821A7354h */ case   23:  		/* lwz R11, <#[R11 + 4]> */
		/* 821A7354h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821A7354h case   23:*/		return 0x821A7358;
		  /* 821A7358h */ case   24:  		/* rlwinm R10, R10, 0, 0, 30 */
		/* 821A7358h case   24:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R10);
		/* 821A7358h case   24:*/		return 0x821A735C;
		  /* 821A735Ch */ case   25:  		/* stw R11, <#[R10]> */
		/* 821A735Ch case   25:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821A735Ch case   25:*/		return 0x821A7360;
		  /* 821A7360h */ case   26:  		/* lwz R11, <#[R4 + 12]> */
		/* 821A7360h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000000C) );
		/* 821A7360h case   26:*/		return 0x821A7364;
		  /* 821A7364h */ case   27:  		/* addi R11, R11, 4 */
		/* 821A7364h case   27:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A7364h case   27:*/		return 0x821A7368;
		  /* 821A7368h */ case   28:  		/* rlwinm R5, R11, 2, 0, 29 */
		/* 821A7368h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R5,regs.R11);
		/* 821A7368h case   28:*/		return 0x821A736C;
		  /* 821A736Ch */ case   29:  		/* bl -349540 */
		/* 821A736Ch case   29:*/		regs.LR = 0x821A7370; return 0x82151E08;
		/* 821A736Ch case   29:*/		return 0x821A7370;
	}
	return 0x821A7370;
} // Block from 821A72F8h-821A7370h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821A7370h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7370( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7370) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7370);
		  /* 821A7370h */ case    0:  		/* lwz R10, <#[R28]> */
		/* 821A7370h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821A7370h case    0:*/		return 0x821A7374;
		  /* 821A7374h */ case    1:  		/* li R8, 0 */
		/* 821A7374h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A7374h case    1:*/		return 0x821A7378;
		  /* 821A7378h */ case    2:  		/* li R9, 0 */
		/* 821A7378h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A7378h case    2:*/		return 0x821A737C;
		  /* 821A737Ch */ case    3:  		/* rlwinm. R11, R10, 0, 4, 6 */
		/* 821A737Ch case    3:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R10);
		/* 821A737Ch case    3:*/		return 0x821A7380;
		  /* 821A7380h */ case    4:  		/* bc 12, CR0_EQ, 56 */
		/* 821A7380h case    4:*/		if ( regs.CR[0].eq ) { return 0x821A73B8;  }
		/* 821A7380h case    4:*/		return 0x821A7384;
		  /* 821A7384h */ case    5:  		/* rlwinm R6, R10, 0, 0, 31 */
		/* 821A7384h case    5:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R6,regs.R10);
		/* 821A7384h case    5:*/		return 0x821A7388;
		  /* 821A7388h */ case    6:  		/* rlwinm R7, R10, 27, 24, 31 */
		/* 821A7388h case    6:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R7,regs.R10);
		/* 821A7388h case    6:*/		return 0x821A738C;
		  /* 821A738Ch */ case    7:  		/* li R11, 0 */
		/* 821A738Ch case    7:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A738Ch case    7:*/		return 0x821A7390;
		  /* 821A7390h */ case    8:  		/* rlwinm R6, R6, 7, 29, 31 */
		/* 821A7390h case    8:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R6,regs.R6);
		/* 821A7390h case    8:*/		return 0x821A7394;
		  /* 821A7394h */ case    9:  		/* srw R5, R7, R11 */
		/* 821A7394h case    9:*/		cpu::op::srw<0>(regs,&regs.R5,regs.R7,regs.R11);
		/* 821A7394h case    9:*/		return 0x821A7398;
		  /* 821A7398h */ case   10:  		/* rlwinm R5, R5, 0, 30, 31 */
		/* 821A7398h case   10:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R5);
		/* 821A7398h case   10:*/		return 0x821A739C;
		  /* 821A739Ch */ case   11:  		/* li R4, 1 */
		/* 821A739Ch case   11:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A739Ch case   11:*/		return 0x821A73A0;
		  /* 821A73A0h */ case   12:  		/* addi R9, R9, 1 */
		/* 821A73A0h case   12:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821A73A0h case   12:*/		return 0x821A73A4;
		  /* 821A73A4h */ case   13:  		/* slw R5, R4, R5 */
		/* 821A73A4h case   13:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R4,regs.R5);
		/* 821A73A4h case   13:*/		return 0x821A73A8;
		  /* 821A73A8h */ case   14:  		/* or R8, R5, R8 */
		/* 821A73A8h case   14:*/		cpu::op::or<0>(regs,&regs.R8,regs.R5,regs.R8);
		/* 821A73A8h case   14:*/		return 0x821A73AC;
		  /* 821A73ACh */ case   15:  		/* addi R11, R11, 2 */
		/* 821A73ACh case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A73ACh case   15:*/		return 0x821A73B0;
		  /* 821A73B0h */ case   16:  		/* cmplw CR6, R9, R6 */
		/* 821A73B0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 821A73B0h case   16:*/		return 0x821A73B4;
		  /* 821A73B4h */ case   17:  		/* bc 12, CR6_LT, -32 */
		/* 821A73B4h case   17:*/		if ( regs.CR[6].lt ) { return 0x821A7394;  }
		/* 821A73B4h case   17:*/		return 0x821A73B8;
	}
	return 0x821A73B8;
} // Block from 821A7370h-821A73B8h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A73B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A73B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A73B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A73B8);
		  /* 821A73B8h */ case    0:  		/* and. R29, R8, R21 */
		/* 821A73B8h case    0:*/		cpu::op::and<1>(regs,&regs.R29,regs.R8,regs.R21);
		/* 821A73B8h case    0:*/		return 0x821A73BC;
		  /* 821A73BCh */ case    1:  		/* bc 12, CR0_EQ, 812 */
		/* 821A73BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821A76E8;  }
		/* 821A73BCh case    1:*/		return 0x821A73C0;
		  /* 821A73C0h */ case    2:  		/* andc. R30, R8, R21 */
		/* 821A73C0h case    2:*/		cpu::op::andc<1>(regs,&regs.R30,regs.R8,regs.R21);
		/* 821A73C0h case    2:*/		return 0x821A73C4;
		  /* 821A73C4h */ case    3:  		/* bc 12, CR0_EQ, 672 */
		/* 821A73C4h case    3:*/		if ( regs.CR[0].eq ) { return 0x821A7664;  }
		/* 821A73C4h case    3:*/		return 0x821A73C8;
		  /* 821A73C8h */ case    4:  		/* addi R11, R1, 96 */
		/* 821A73C8h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A73C8h case    4:*/		return 0x821A73CC;
		  /* 821A73CCh */ case    5:  		/* li R31, 0 */
		/* 821A73CCh case    5:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A73CCh case    5:*/		return 0x821A73D0;
		  /* 821A73D0h */ case    6:  		/* li R27, 0 */
		/* 821A73D0h case    6:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A73D0h case    6:*/		return 0x821A73D4;
		  /* 821A73D4h */ case    7:  		/* addi R26, R11, -4 */
		/* 821A73D4h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFFFFC);
		/* 821A73D4h case    7:*/		return 0x821A73D8;
		  /* 821A73D8h */ case    8:  		/* cmplwi CR6, R29, 0 */
		/* 821A73D8h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A73D8h case    8:*/		return 0x821A73DC;
		  /* 821A73DCh */ case    9:  		/* bc 12, CR6_EQ, 124 */
		/* 821A73DCh case    9:*/		if ( regs.CR[6].eq ) { return 0x821A7458;  }
		/* 821A73DCh case    9:*/		return 0x821A73E0;
		  /* 821A73E0h */ case   10:  		/* addi R11, R29, -1 */
		/* 821A73E0h case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821A73E0h case   10:*/		return 0x821A73E4;
		  /* 821A73E4h */ case   11:  		/* lwz R10, <#[R28]> */
		/* 821A73E4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821A73E4h case   11:*/		return 0x821A73E8;
		  /* 821A73E8h */ case   12:  		/* li R9, 3 */
		/* 821A73E8h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821A73E8h case   12:*/		return 0x821A73EC;
		  /* 821A73ECh */ case   13:  		/* lwz R3, <#[R1 + 308]> */
		/* 821A73ECh case   13:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000134) );
		/* 821A73ECh case   13:*/		return 0x821A73F0;
		  /* 821A73F0h */ case   14:  		/* andc R11, R29, R11 */
		/* 821A73F0h case   14:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821A73F0h case   14:*/		return 0x821A73F4;
		  /* 821A73F4h */ case   15:  		/* rlwinm R6, R10, 0, 27, 31 */
		/* 821A73F4h case   15:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R10);
		/* 821A73F4h case   15:*/		return 0x821A73F8;
		  /* 821A73F8h */ case   16:  		/* cntlzw R11, R11 */
		/* 821A73F8h case   16:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A73F8h case   16:*/		return 0x821A73FC;
		  /* 821A73FCh */ case   17:  		/* mr R4, R25 */
		/* 821A73FCh case   17:*/		regs.R4 = regs.R25;
		/* 821A73FCh case   17:*/		return 0x821A7400;
		  /* 821A7400h */ case   18:  		/* subfic R11, R11, 31 */
		/* 821A7400h case   18:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821A7400h case   18:*/		return 0x821A7404;
		  /* 821A7404h */ case   19:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821A7404h case   19:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821A7404h case   19:*/		return 0x821A7408;
		  /* 821A7408h */ case   20:  		/* slw R10, R9, R11 */
		/* 821A7408h case   20:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 821A7408h case   20:*/		return 0x821A740C;
		  /* 821A740Ch */ case   21:  		/* srw R9, R23, R11 */
		/* 821A740Ch case   21:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R11);
		/* 821A740Ch case   21:*/		return 0x821A7410;
		  /* 821A7410h */ case   22:  		/* andc R10, R27, R10 */
		/* 821A7410h case   22:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821A7410h case   22:*/		return 0x821A7414;
		  /* 821A7414h */ case   23:  		/* slw R11, R31, R11 */
		/* 821A7414h case   23:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821A7414h case   23:*/		return 0x821A7418;
		  /* 821A7418h */ case   24:  		/* rlwinm R5, R9, 0, 30, 31 */
		/* 821A7418h case   24:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R9);
		/* 821A7418h case   24:*/		return 0x821A741C;
		  /* 821A741Ch */ case   25:  		/* or R27, R10, R11 */
		/* 821A741Ch case   25:*/		cpu::op::or<0>(regs,&regs.R27,regs.R10,regs.R11);
		/* 821A741Ch case   25:*/		return 0x821A7420;
		  /* 821A7420h */ case   26:  		/* bl -193208 */
		/* 821A7420h case   26:*/		regs.LR = 0x821A7424; return 0x82178168;
		/* 821A7420h case   26:*/		return 0x821A7424;
		  /* 821A7424h */ case   27:  		/* mr R11, R3 */
		/* 821A7424h case   27:*/		regs.R11 = regs.R3;
		/* 821A7424h case   27:*/		return 0x821A7428;
		  /* 821A7428h */ case   28:  		/* mr R5, R25 */
		/* 821A7428h case   28:*/		regs.R5 = regs.R25;
		/* 821A7428h case   28:*/		return 0x821A742C;
		  /* 821A742Ch */ case   29:  		/* lwz R3, <#[R1 + 308]> */
		/* 821A742Ch case   29:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000134) );
		/* 821A742Ch case   29:*/		return 0x821A7430;
		  /* 821A7430h */ case   30:  		/* mr R7, R11 */
		/* 821A7430h case   30:*/		regs.R7 = regs.R11;
		/* 821A7430h case   30:*/		return 0x821A7434;
		  /* 821A7434h */ case   31:  		/* mr R6, R11 */
		/* 821A7434h case   31:*/		regs.R6 = regs.R11;
		/* 821A7434h case   31:*/		return 0x821A7438;
		  /* 821A7438h */ case   32:  		/* li R4, 1 */
		/* 821A7438h case   32:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A7438h case   32:*/		return 0x821A743C;
		  /* 821A743Ch */ case   33:  		/* bl -38276 */
		/* 821A743Ch case   33:*/		regs.LR = 0x821A7440; return 0x8219DEB8;
		/* 821A743Ch case   33:*/		return 0x821A7440;
		  /* 821A7440h */ case   34:  		/* addi R11, R29, -1 */
		/* 821A7440h case   34:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R29,0xFFFFFFFF);
		/* 821A7440h case   34:*/		return 0x821A7444;
		  /* 821A7444h */ case   35:  		/* stwu R3, <#[R26 + 4]> */
		/* 821A7444h case   35:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 821A7444h case   35:*/		return 0x821A7448;
		  /* 821A7448h */ case   36:  		/* addi R31, R31, 1 */
		/* 821A7448h case   36:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A7448h case   36:*/		return 0x821A744C;
		  /* 821A744Ch */ case   37:  		/* andc R11, R29, R11 */
		/* 821A744Ch case   37:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R29,regs.R11);
		/* 821A744Ch case   37:*/		return 0x821A7450;
		  /* 821A7450h */ case   38:  		/* subf R29, R11, R29 */
		/* 821A7450h case   38:*/		cpu::op::subf<0>(regs,&regs.R29,regs.R11,regs.R29);
		/* 821A7450h case   38:*/		return 0x821A7454;
		  /* 821A7454h */ case   39:  		/* b -124 */
		/* 821A7454h case   39:*/		return 0x821A73D8;
		/* 821A7454h case   39:*/		return 0x821A7458;
	}
	return 0x821A7458;
} // Block from 821A73B8h-821A7458h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821A7458h
// Function '?CombineOperandPair@Compiler@D3DXShader@@AAA_NPAVInstruction@2@PAVDependency@2@10110PAPAV42@2PAUCombineDependenciesState@2@3@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7458( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7458) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7458);
		  /* 821A7458h */ case    0:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 821A7458h case    0:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 821A7458h case    0:*/		return 0x821A745C;
		  /* 821A745Ch */ case    1:  		/* addi R11, R1, 96 */
		/* 821A745Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A745Ch case    1:*/		return 0x821A7460;
		  /* 821A7460h */ case    2:  		/* add R11, R10, R11 */
		/* 821A7460h case    2:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A7460h case    2:*/		return 0x821A7464;
		  /* 821A7464h */ case    3:  		/* addi R29, R11, -4 */
		/* 821A7464h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R11,0xFFFFFFFC);
		/* 821A7464h case    3:*/		return 0x821A7468;
		  /* 821A7468h */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821A7468h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A7468h case    4:*/		return 0x821A746C;
		  /* 821A746Ch */ case    5:  		/* bc 12, CR6_EQ, 124 */
		/* 821A746Ch case    5:*/		if ( regs.CR[6].eq ) { return 0x821A74E8;  }
		/* 821A746Ch case    5:*/		return 0x821A7470;
		  /* 821A7470h */ case    6:  		/* addi R11, R30, -1 */
		/* 821A7470h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 821A7470h case    6:*/		return 0x821A7474;
		  /* 821A7474h */ case    7:  		/* lwz R10, <#[R28]> */
		/* 821A7474h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821A7474h case    7:*/		return 0x821A7478;
		  /* 821A7478h */ case    8:  		/* li R9, 3 */
		/* 821A7478h case    8:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821A7478h case    8:*/		return 0x821A747C;
		  /* 821A747Ch */ case    9:  		/* lwz R26, <#[R1 + 308]> */
		/* 821A747Ch case    9:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000134) );
		/* 821A747Ch case    9:*/		return 0x821A7480;
		  /* 821A7480h */ case   10:  		/* andc R11, R30, R11 */
		/* 821A7480h case   10:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 821A7480h case   10:*/		return 0x821A7484;
		  /* 821A7484h */ case   11:  		/* rlwinm R6, R10, 0, 27, 31 */
		/* 821A7484h case   11:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R10);
		/* 821A7484h case   11:*/		return 0x821A7488;
		  /* 821A7488h */ case   12:  		/* cntlzw R11, R11 */
		/* 821A7488h case   12:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A7488h case   12:*/		return 0x821A748C;
		  /* 821A748Ch */ case   13:  		/* mr R3, R26 */
		/* 821A748Ch case   13:*/		regs.R3 = regs.R26;
		/* 821A748Ch case   13:*/		return 0x821A7490;
		  /* 821A7490h */ case   14:  		/* subfic R11, R11, 31 */
		/* 821A7490h case   14:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821A7490h case   14:*/		return 0x821A7494;
		  /* 821A7494h */ case   15:  		/* mr R4, R19 */
		/* 821A7494h case   15:*/		regs.R4 = regs.R19;
		/* 821A7494h case   15:*/		return 0x821A7498;
		  /* 821A7498h */ case   16:  		/* rlwinm R11, R11, 1, 0, 30 */
		/* 821A7498h case   16:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R11);
		/* 821A7498h case   16:*/		return 0x821A749C;
		  /* 821A749Ch */ case   17:  		/* slw R10, R9, R11 */
		/* 821A749Ch case   17:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R9,regs.R11);
		/* 821A749Ch case   17:*/		return 0x821A74A0;
		  /* 821A74A0h */ case   18:  		/* srw R9, R22, R11 */
		/* 821A74A0h case   18:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R22,regs.R11);
		/* 821A74A0h case   18:*/		return 0x821A74A4;
		  /* 821A74A4h */ case   19:  		/* andc R10, R27, R10 */
		/* 821A74A4h case   19:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821A74A4h case   19:*/		return 0x821A74A8;
		  /* 821A74A8h */ case   20:  		/* slw R11, R31, R11 */
		/* 821A74A8h case   20:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821A74A8h case   20:*/		return 0x821A74AC;
		  /* 821A74ACh */ case   21:  		/* rlwinm R5, R9, 0, 30, 31 */
		/* 821A74ACh case   21:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R5,regs.R9);
		/* 821A74ACh case   21:*/		return 0x821A74B0;
		  /* 821A74B0h */ case   22:  		/* or R27, R10, R11 */
		/* 821A74B0h case   22:*/		cpu::op::or<0>(regs,&regs.R27,regs.R10,regs.R11);
		/* 821A74B0h case   22:*/		return 0x821A74B4;
		  /* 821A74B4h */ case   23:  		/* bl -193356 */
		/* 821A74B4h case   23:*/		regs.LR = 0x821A74B8; return 0x82178168;
		/* 821A74B4h case   23:*/		return 0x821A74B8;
		  /* 821A74B8h */ case   24:  		/* mr R7, R3 */
		/* 821A74B8h case   24:*/		regs.R7 = regs.R3;
		/* 821A74B8h case   24:*/		return 0x821A74BC;
		  /* 821A74BCh */ case   25:  		/* mr R6, R3 */
		/* 821A74BCh case   25:*/		regs.R6 = regs.R3;
		/* 821A74BCh case   25:*/		return 0x821A74C0;
		  /* 821A74C0h */ case   26:  		/* mr R5, R19 */
		/* 821A74C0h case   26:*/		regs.R5 = regs.R19;
		/* 821A74C0h case   26:*/		return 0x821A74C4;
		  /* 821A74C4h */ case   27:  		/* li R4, 1 */
		/* 821A74C4h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A74C4h case   27:*/		return 0x821A74C8;
		  /* 821A74C8h */ case   28:  		/* mr R3, R26 */
		/* 821A74C8h case   28:*/		regs.R3 = regs.R26;
		/* 821A74C8h case   28:*/		return 0x821A74CC;
		  /* 821A74CCh */ case   29:  		/* bl -38420 */
		/* 821A74CCh case   29:*/		regs.LR = 0x821A74D0; return 0x8219DEB8;
		/* 821A74CCh case   29:*/		return 0x821A74D0;
		  /* 821A74D0h */ case   30:  		/* addi R11, R30, -1 */
		/* 821A74D0h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R30,0xFFFFFFFF);
		/* 821A74D0h case   30:*/		return 0x821A74D4;
		  /* 821A74D4h */ case   31:  		/* stwu R3, <#[R29 + 4]> */
		/* 821A74D4h case   31:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R29 + 0x00000004) );
		regs.R29 = (uint32)(regs.R29 + 0x00000004);
		/* 821A74D4h case   31:*/		return 0x821A74D8;
		  /* 821A74D8h */ case   32:  		/* addi R31, R31, 1 */
		/* 821A74D8h case   32:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A74D8h case   32:*/		return 0x821A74DC;
		  /* 821A74DCh */ case   33:  		/* andc R11, R30, R11 */
		/* 821A74DCh case   33:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 821A74DCh case   33:*/		return 0x821A74E0;
		  /* 821A74E0h */ case   34:  		/* subf R30, R11, R30 */
		/* 821A74E0h case   34:*/		cpu::op::subf<0>(regs,&regs.R30,regs.R11,regs.R30);
		/* 821A74E0h case   34:*/		return 0x821A74E4;
		  /* 821A74E4h */ case   35:  		/* b -124 */
		/* 821A74E4h case   35:*/		return 0x821A7468;
		/* 821A74E4h case   35:*/		return 0x821A74E8;
	}
	return 0x821A74E8;
} // Block from 821A7458h-821A74E8h (36 instructions)

//////////////////////////////////////////////////////
// Block at 821A74E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A74E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A74E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A74E8);
		  /* 821A74E8h */ case    0:  		/* cmplwi CR6, R31, 0 */
		/* 821A74E8h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A74E8h case    0:*/		return 0x821A74EC;
		  /* 821A74ECh */ case    1:  		/* bc 12, CR6_EQ, 580 */
		/* 821A74ECh case    1:*/		if ( regs.CR[6].eq ) { return 0x821A7730;  }
		/* 821A74ECh case    1:*/		return 0x821A74F0;
		  /* 821A74F0h */ case    2:  		/* cmplwi CR6, R31, 4 */
		/* 821A74F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 821A74F0h case    2:*/		return 0x821A74F4;
		  /* 821A74F4h */ case    3:  		/* bc 12, CR6_GT, 572 */
		/* 821A74F4h case    3:*/		if ( regs.CR[6].gt ) { return 0x821A7730;  }
		/* 821A74F4h case    3:*/		return 0x821A74F8;
		  /* 821A74F8h */ case    4:  		/* rlwinm R10, R31, 2, 0, 29 */
		/* 821A74F8h case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R31);
		/* 821A74F8h case    4:*/		return 0x821A74FC;
		  /* 821A74FCh */ case    5:  		/* lwz R3, <#[R1 + 308]> */
		/* 821A74FCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000134) );
		/* 821A74FCh case    5:*/		return 0x821A7500;
		  /* 821A7500h */ case    6:  		/* addi R11, R1, 96 */
		/* 821A7500h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A7500h case    6:*/		return 0x821A7504;
		  /* 821A7504h */ case    7:  		/* mr R6, R31 */
		/* 821A7504h case    7:*/		regs.R6 = regs.R31;
		/* 821A7504h case    7:*/		return 0x821A7508;
		  /* 821A7508h */ case    8:  		/* add R11, R10, R11 */
		/* 821A7508h case    8:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A7508h case    8:*/		return 0x821A750C;
		  /* 821A750Ch */ case    9:  		/* li R5, 0 */
		/* 821A750Ch case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A750Ch case    9:*/		return 0x821A7510;
		  /* 821A7510h */ case   10:  		/* lwz R30, <#[R11 - 4]> */
		/* 821A7510h case   10:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + 0xFFFFFFFC) );
		/* 821A7510h case   10:*/		return 0x821A7514;
		  /* 821A7514h */ case   11:  		/* lwz R4, <#[R30 + 28]> */
		/* 821A7514h case   11:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000001C) );
		/* 821A7514h case   11:*/		return 0x821A7518;
		  /* 821A7518h */ case   12:  		/* bl 513512 */
		/* 821A7518h case   12:*/		regs.LR = 0x821A751C; return 0x82224B00;
		/* 821A7518h case   12:*/		return 0x821A751C;
		  /* 821A751Ch */ case   13:  		/* rlwinm R11, R30, 0, 0, 30 */
		/* 821A751Ch case   13:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R30);
		/* 821A751Ch case   13:*/		return 0x821A7520;
		  /* 821A7520h */ case   14:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A7520h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A7520h case   14:*/		return 0x821A7524;
		  /* 821A7524h */ case   15:  		/* addi R11, R11, 36 */
		/* 821A7524h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A7524h case   15:*/		return 0x821A7528;
		  /* 821A7528h */ case   16:  		/* addi R10, R10, 36 */
		/* 821A7528h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A7528h case   16:*/		return 0x821A752C;
		  /* 821A752Ch */ case   17:  		/* addi R9, R11, 4 */
		/* 821A752Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0x4);
		/* 821A752Ch case   17:*/		return 0x821A7530;
		  /* 821A7530h */ case   18:  		/* addi R8, R10, 4 */
		/* 821A7530h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x4);
		/* 821A7530h case   18:*/		return 0x821A7534;
		  /* 821A7534h */ case   19:  		/* addi R6, R10, -36 */
		/* 821A7534h case   19:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A7534h case   19:*/		return 0x821A7538;
		  /* 821A7538h */ case   20:  		/* lwz R7, <#[R11 + 4]> */
		/* 821A7538h case   20:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821A7538h case   20:*/		return 0x821A753C;
		  /* 821A753Ch */ case   21:  		/* mr R30, R3 */
		/* 821A753Ch case   21:*/		regs.R30 = regs.R3;
		/* 821A753Ch case   21:*/		return 0x821A7540;
		  /* 821A7540h */ case   22:  		/* cmplwi CR6, R31, 0 */
		/* 821A7540h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A7540h case   22:*/		return 0x821A7544;
		  /* 821A7544h */ case   23:  		/* stw R7, <#[R10 + 4]> */
		/* 821A7544h case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000004) );
		/* 821A7544h case   23:*/		return 0x821A7548;
		  /* 821A7548h */ case   24:  		/* lwz R7, <#[R11 + 4]> */
		/* 821A7548h case   24:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000004) );
		/* 821A7548h case   24:*/		return 0x821A754C;
		  /* 821A754Ch */ case   25:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A754Ch case   25:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A754Ch case   25:*/		return 0x821A7550;
		  /* 821A7550h */ case   26:  		/* stw R8, <#[R7 + 36]> */
		/* 821A7550h case   26:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000024) );
		/* 821A7550h case   26:*/		return 0x821A7554;
		  /* 821A7554h */ case   27:  		/* stw R9, <#[R10]> */
		/* 821A7554h case   27:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A7554h case   27:*/		return 0x821A7558;
		  /* 821A7558h */ case   28:  		/* stw R6, <#[R11 + 4]> */
		/* 821A7558h case   28:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R11 + 0x00000004) );
		/* 821A7558h case   28:*/		return 0x821A755C;
		  /* 821A755Ch */ case   29:  		/* bc 12, CR6_EQ, 80 */
		/* 821A755Ch case   29:*/		if ( regs.CR[6].eq ) { return 0x821A75AC;  }
		/* 821A755Ch case   29:*/		return 0x821A7560;
		  /* 821A7560h */ case   30:  		/* addi R11, R1, 96 */
		/* 821A7560h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A7560h case   30:*/		return 0x821A7564;
		  /* 821A7564h */ case   31:  		/* addi R25, R3, 40 */
		/* 821A7564h case   31:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R3,0x28);
		/* 821A7564h case   31:*/		return 0x821A7568;
		  /* 821A7568h */ case   32:  		/* addi R26, R11, -4 */
		/* 821A7568h case   32:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R11,0xFFFFFFFC);
		/* 821A7568h case   32:*/		return 0x821A756C;
		  /* 821A756Ch */ case   33:  		/* lwzu R29, <#[R26 + 4]> */
		/* 821A756Ch case   33:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 821A756Ch case   33:*/		return 0x821A7570;
		  /* 821A7570h */ case   34:  		/* lwz R3, <#[R1 + 308]> */
		/* 821A7570h case   34:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000134) );
		/* 821A7570h case   34:*/		return 0x821A7574;
		  /* 821A7574h */ case   35:  		/* mr R4, R29 */
		/* 821A7574h case   35:*/		regs.R4 = regs.R29;
		/* 821A7574h case   35:*/		return 0x821A7578;
		  /* 821A7578h */ case   36:  		/* bl -193912 */
		/* 821A7578h case   36:*/		regs.LR = 0x821A757C; return 0x82178000;
		/* 821A7578h case   36:*/		return 0x821A757C;
		  /* 821A757Ch */ case   37:  		/* mr R4, R3 */
		/* 821A757Ch case   37:*/		regs.R4 = regs.R3;
		/* 821A757Ch case   37:*/		return 0x821A7580;
		  /* 821A7580h */ case   38:  		/* mr R3, R30 */
		/* 821A7580h case   38:*/		regs.R3 = regs.R30;
		/* 821A7580h case   38:*/		return 0x821A7584;
		  /* 821A7584h */ case   39:  		/* bl -193468 */
		/* 821A7584h case   39:*/		regs.LR = 0x821A7588; return 0x821781C8;
		/* 821A7584h case   39:*/		return 0x821A7588;
		  /* 821A7588h */ case   40:  		/* mr R11, R3 */
		/* 821A7588h case   40:*/		regs.R11 = regs.R3;
		/* 821A7588h case   40:*/		return 0x821A758C;
		  /* 821A758Ch */ case   41:  		/* mr R3, R29 */
		/* 821A758Ch case   41:*/		regs.R3 = regs.R29;
		/* 821A758Ch case   41:*/		return 0x821A7590;
		  /* 821A7590h */ case   42:  		/* stwu R11, <#[R25 + 4]> */
		/* 821A7590h case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000004) );
		regs.R25 = (uint32)(regs.R25 + 0x00000004);
		/* 821A7590h case   42:*/		return 0x821A7594;
		  /* 821A7594h */ case   43:  		/* bl -193052 */
		/* 821A7594h case   43:*/		regs.LR = 0x821A7598; return 0x82178378;
		/* 821A7594h case   43:*/		return 0x821A7598;
		  /* 821A7598h */ case   44:  		/* lwz R11, <#[R29 + 8]> */
		/* 821A7598h case   44:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A7598h case   44:*/		return 0x821A759C;
		  /* 821A759Ch */ case   45:  		/* addic. R31, R31, -1 */
		/* 821A759Ch case   45:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821A759Ch case   45:*/		return 0x821A75A0;
		  /* 821A75A0h */ case   46:  		/* oris R11, R11, 256 */
		/* 821A75A0h case   46:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A75A0h case   46:*/		return 0x821A75A4;
		  /* 821A75A4h */ case   47:  		/* stw R11, <#[R29 + 8]> */
		/* 821A75A4h case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A75A4h case   47:*/		return 0x821A75A8;
		  /* 821A75A8h */ case   48:  		/* bc 4, CR0_EQ, -60 */
		/* 821A75A8h case   48:*/		if ( !regs.CR[0].eq ) { return 0x821A756C;  }
		/* 821A75A8h case   48:*/		return 0x821A75AC;
	}
	return 0x821A75AC;
} // Block from 821A74E8h-821A75ACh (49 instructions)

//////////////////////////////////////////////////////
// Block at 821A75ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A75AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A75AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A75AC);
		  /* 821A75ACh */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821A75ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A75ACh case    0:*/		return 0x821A75B0;
		  /* 821A75B0h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A75B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A75B0h case    1:*/		return 0x821A75B4;
		  /* 821A75B4h */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A75B4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A75B4h case    2:*/		return 0x821A75B8;
		  /* 821A75B8h */ case    3:  		/* b 12 */
		/* 821A75B8h case    3:*/		return 0x821A75C4;
		/* 821A75B8h case    3:*/		return 0x821A75BC;
		  /* 821A75BCh */ case    4:  		/* addi R11, R10, 8 */
		/* 821A75BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A75BCh case    4:*/		return 0x821A75C0;
		  /* 821A75C0h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A75C0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A75C0h case    5:*/		return 0x821A75C4;
	}
	return 0x821A75C4;
} // Block from 821A75ACh-821A75C4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A75C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A75C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A75C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A75C4);
		  /* 821A75C4h */ case    0:  		/* cmplw CR6, R10, R28 */
		/* 821A75C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 821A75C4h case    0:*/		return 0x821A75C8;
		  /* 821A75C8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A75C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A75BC;  }
		/* 821A75C8h case    1:*/		return 0x821A75CC;
		  /* 821A75CCh */ case    2:  		/* lwz R10, <#[R28 + 8]> */
		/* 821A75CCh case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821A75CCh case    2:*/		return 0x821A75D0;
		  /* 821A75D0h */ case    3:  		/* mr R4, R30 */
		/* 821A75D0h case    3:*/		regs.R4 = regs.R30;
		/* 821A75D0h case    3:*/		return 0x821A75D4;
		  /* 821A75D4h */ case    4:  		/* lwz R31, <#[R1 + 308]> */
		/* 821A75D4h case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x00000134) );
		/* 821A75D4h case    4:*/		return 0x821A75D8;
		  /* 821A75D8h */ case    5:  		/* mr R3, R31 */
		/* 821A75D8h case    5:*/		regs.R3 = regs.R31;
		/* 821A75D8h case    5:*/		return 0x821A75DC;
		  /* 821A75DCh */ case    6:  		/* stw R10, <#[R11]> */
		/* 821A75DCh case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A75DCh case    6:*/		return 0x821A75E0;
		  /* 821A75E0h */ case    7:  		/* lwz R11, <#[R30 + 4]> */
		/* 821A75E0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821A75E0h case    7:*/		return 0x821A75E4;
		  /* 821A75E4h */ case    8:  		/* stw R11, <#[R28 + 8]> */
		/* 821A75E4h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A75E4h case    8:*/		return 0x821A75E8;
		  /* 821A75E8h */ case    9:  		/* stw R28, <#[R30 + 4]> */
		/* 821A75E8h case    9:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R30 + 0x00000004) );
		/* 821A75E8h case    9:*/		return 0x821A75EC;
		  /* 821A75ECh */ case   10:  		/* stw R30, <#[R28 + 12]> */
		/* 821A75ECh case   10:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A75ECh case   10:*/		return 0x821A75F0;
		  /* 821A75F0h */ case   11:  		/* lwz R11, <#[R28]> */
		/* 821A75F0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A75F0h case   11:*/		return 0x821A75F4;
		  /* 821A75F4h */ case   12:  		/* rlwinm R11, R11, 0, 0, 26 */
		/* 821A75F4h case   12:*/		cpu::op::rlwinm<0,0,0,26>(regs,&regs.R11,regs.R11);
		/* 821A75F4h case   12:*/		return 0x821A75F8;
		  /* 821A75F8h */ case   13:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821A75F8h case   13:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821A75F8h case   13:*/		return 0x821A75FC;
		  /* 821A75FCh */ case   14:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821A75FCh case   14:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821A75FCh case   14:*/		return 0x821A7600;
		  /* 821A7600h */ case   15:  		/* srw R10, R27, R10 */
		/* 821A7600h case   15:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821A7600h case   15:*/		return 0x821A7604;
		  /* 821A7604h */ case   16:  		/* srw R9, R27, R9 */
		/* 821A7604h case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R9);
		/* 821A7604h case   16:*/		return 0x821A7608;
		  /* 821A7608h */ case   17:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821A7608h case   17:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821A7608h case   17:*/		return 0x821A760C;
		  /* 821A760Ch */ case   18:  		/* rlwinm R10, R11, 26, 29, 30 */
		/* 821A760Ch case   18:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R10,regs.R11);
		/* 821A760Ch case   18:*/		return 0x821A7610;
		  /* 821A7610h */ case   19:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A7610h case   19:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A7610h case   19:*/		return 0x821A7614;
		  /* 821A7614h */ case   20:  		/* srw R10, R27, R10 */
		/* 821A7614h case   20:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R27,regs.R10);
		/* 821A7614h case   20:*/		return 0x821A7618;
		  /* 821A7618h */ case   21:  		/* rlwinm R8, R11, 28, 29, 30 */
		/* 821A7618h case   21:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R8,regs.R11);
		/* 821A7618h case   21:*/		return 0x821A761C;
		  /* 821A761Ch */ case   22:  		/* rlwimi R10, R9, 2, 0, 29 */
		/* 821A761Ch case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A761Ch case   22:*/		return 0x821A7620;
		  /* 821A7620h */ case   23:  		/* srw R9, R27, R8 */
		/* 821A7620h case   23:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R27,regs.R8);
		/* 821A7620h case   23:*/		return 0x821A7624;
		  /* 821A7624h */ case   24:  		/* rlwimi R9, R10, 2, 0, 29 */
		/* 821A7624h case   24:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R10);
		/* 821A7624h case   24:*/		return 0x821A7628;
		  /* 821A7628h */ case   25:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821A7628h case   25:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821A7628h case   25:*/		return 0x821A762C;
		  /* 821A762Ch */ case   26:  		/* rlwinm R10, R9, 5, 0, 26 */
		/* 821A762Ch case   26:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R9);
		/* 821A762Ch case   26:*/		return 0x821A7630;
		  /* 821A7630h */ case   27:  		/* or R11, R10, R11 */
		/* 821A7630h case   27:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A7630h case   27:*/		return 0x821A7634;
		  /* 821A7634h */ case   28:  		/* stw R11, <#[R28]> */
		/* 821A7634h case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A7634h case   28:*/		return 0x821A7638;
		  /* 821A7638h */ case   29:  		/* bl 60848 */
		/* 821A7638h case   29:*/		regs.LR = 0x821A763C; return 0x821B63E8;
		/* 821A7638h case   29:*/		return 0x821A763C;
		  /* 821A763Ch */ case   30:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A763Ch case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A763Ch case   30:*/		return 0x821A7640;
		  /* 821A7640h */ case   31:  		/* mr R4, R30 */
		/* 821A7640h case   31:*/		regs.R4 = regs.R30;
		/* 821A7640h case   31:*/		return 0x821A7644;
		  /* 821A7644h */ case   32:  		/* oris R11, R11, 256 */
		/* 821A7644h case   32:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A7644h case   32:*/		return 0x821A7648;
		  /* 821A7648h */ case   33:  		/* mr R3, R31 */
		/* 821A7648h case   33:*/		regs.R3 = regs.R31;
		/* 821A7648h case   33:*/		return 0x821A764C;
		  /* 821A764Ch */ case   34:  		/* stw R11, <#[R30 + 8]> */
		/* 821A764Ch case   34:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A764Ch case   34:*/		return 0x821A7650;
		  /* 821A7650h */ case   35:  		/* bl -27544 */
		/* 821A7650h case   35:*/		regs.LR = 0x821A7654; return 0x821A0AB8;
		/* 821A7650h case   35:*/		return 0x821A7654;
		  /* 821A7654h */ case   36:  		/* lwz R25, <#[R1 + 316]> */
		/* 821A7654h case   36:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x0000013C) );
		/* 821A7654h case   36:*/		return 0x821A7658;
		  /* 821A7658h */ case   37:  		/* lwz R26, <#[R1 + 324]> */
		/* 821A7658h case   37:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000144) );
		/* 821A7658h case   37:*/		return 0x821A765C;
		  /* 821A765Ch */ case   38:  		/* mr R27, R31 */
		/* 821A765Ch case   38:*/		regs.R27 = regs.R31;
		/* 821A765Ch case   38:*/		return 0x821A7660;
	}
	return 0x821A7660;
} // Block from 821A75C4h-821A7660h (39 instructions)

//////////////////////////////////////////////////////
// Block at 821A7660h
// Function '?Combine@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@0PAUCombineInstructionsState@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7660( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7660) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7660);
		  /* 821A7660h */ case    0:  		/* b 200 */
		/* 821A7660h case    0:*/		return 0x821A7728;
		/* 821A7660h case    0:*/		return 0x821A7664;
	}
	return 0x821A7664;
} // Block from 821A7660h-821A7664h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A7664h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7664( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7664) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7664);
		  /* 821A7664h */ case    0:  		/* lwz R11, <#[R28 + 12]> */
		/* 821A7664h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A7664h case    0:*/		return 0x821A7668;
		  /* 821A7668h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A7668h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A7668h case    1:*/		return 0x821A766C;
		  /* 821A766Ch */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A766Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A766Ch case    2:*/		return 0x821A7670;
		  /* 821A7670h */ case    3:  		/* b 12 */
		/* 821A7670h case    3:*/		return 0x821A767C;
		/* 821A7670h case    3:*/		return 0x821A7674;
		  /* 821A7674h */ case    4:  		/* addi R11, R10, 8 */
		/* 821A7674h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A7674h case    4:*/		return 0x821A7678;
		  /* 821A7678h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A7678h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A7678h case    5:*/		return 0x821A767C;
	}
	return 0x821A767C;
} // Block from 821A7664h-821A767Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A767Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A767C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A767C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A767C);
		  /* 821A767Ch */ case    0:  		/* cmplw CR6, R10, R28 */
		/* 821A767Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R28);
		/* 821A767Ch case    0:*/		return 0x821A7680;
		  /* 821A7680h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A7680h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A7674;  }
		/* 821A7680h case    1:*/		return 0x821A7684;
		  /* 821A7684h */ case    2:  		/* lwz R10, <#[R28 + 8]> */
		/* 821A7684h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821A7684h case    2:*/		return 0x821A7688;
		  /* 821A7688h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A7688h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7688h case    3:*/		return 0x821A768C;
		  /* 821A768Ch */ case    4:  		/* addi R11, R25, 4 */
		/* 821A768Ch case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x4);
		/* 821A768Ch case    4:*/		return 0x821A7690;
		  /* 821A7690h */ case    5:  		/* lwz R10, <#[R25 + 4]> */
		/* 821A7690h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R25 + 0x00000004) );
		/* 821A7690h case    5:*/		return 0x821A7694;
		  /* 821A7694h */ case    6:  		/* stw R10, <#[R28 + 8]> */
		/* 821A7694h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821A7694h case    6:*/		return 0x821A7698;
		  /* 821A7698h */ case    7:  		/* stw R28, <#[R25 + 4]> */
		/* 821A7698h case    7:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R25 + 0x00000004) );
		/* 821A7698h case    7:*/		return 0x821A769C;
		  /* 821A769Ch */ case    8:  		/* stw R25, <#[R28 + 12]> */
		/* 821A769Ch case    8:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R28 + 0x0000000C) );
		/* 821A769Ch case    8:*/		return 0x821A76A0;
		  /* 821A76A0h */ case    9:  		/* lwz R10, <#[R28]> */
		/* 821A76A0h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821A76A0h case    9:*/		return 0x821A76A4;
		  /* 821A76A4h */ case   10:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821A76A4h case   10:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821A76A4h case   10:*/		return 0x821A76A8;
		  /* 821A76A8h */ case   11:  		/* rlwinm R8, R10, 24, 29, 30 */
		/* 821A76A8h case   11:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R10);
		/* 821A76A8h case   11:*/		return 0x821A76AC;
		  /* 821A76ACh */ case   12:  		/* srw R9, R23, R9 */
		/* 821A76ACh case   12:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821A76ACh case   12:*/		return 0x821A76B0;
		  /* 821A76B0h */ case   13:  		/* srw R8, R23, R8 */
		/* 821A76B0h case   13:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R23,regs.R8);
		/* 821A76B0h case   13:*/		return 0x821A76B4;
		  /* 821A76B4h */ case   14:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821A76B4h case   14:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821A76B4h case   14:*/		return 0x821A76B8;
		  /* 821A76B8h */ case   15:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821A76B8h case   15:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821A76B8h case   15:*/		return 0x821A76BC;
		  /* 821A76BCh */ case   16:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821A76BCh case   16:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821A76BCh case   16:*/		return 0x821A76C0;
		  /* 821A76C0h */ case   17:  		/* srw R9, R23, R9 */
		/* 821A76C0h case   17:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821A76C0h case   17:*/		return 0x821A76C4;
		  /* 821A76C4h */ case   18:  		/* rlwinm R7, R10, 28, 29, 30 */
		/* 821A76C4h case   18:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R7,regs.R10);
		/* 821A76C4h case   18:*/		return 0x821A76C8;
		  /* 821A76C8h */ case   19:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 821A76C8h case   19:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821A76C8h case   19:*/		return 0x821A76CC;
		  /* 821A76CCh */ case   20:  		/* srw R8, R23, R7 */
		/* 821A76CCh case   20:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R23,regs.R7);
		/* 821A76CCh case   20:*/		return 0x821A76D0;
		  /* 821A76D0h */ case   21:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821A76D0h case   21:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821A76D0h case   21:*/		return 0x821A76D4;
		  /* 821A76D4h */ case   22:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A76D4h case   22:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A76D4h case   22:*/		return 0x821A76D8;
		  /* 821A76D8h */ case   23:  		/* rlwinm R9, R8, 5, 0, 26 */
		/* 821A76D8h case   23:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R8);
		/* 821A76D8h case   23:*/		return 0x821A76DC;
		  /* 821A76DCh */ case   24:  		/* or R10, R9, R10 */
		/* 821A76DCh case   24:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A76DCh case   24:*/		return 0x821A76E0;
		  /* 821A76E0h */ case   25:  		/* stw R10, <#[R28]> */
		/* 821A76E0h case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821A76E0h case   25:*/		return 0x821A76E4;
		  /* 821A76E4h */ case   26:  		/* b 68 */
		/* 821A76E4h case   26:*/		return 0x821A7728;
		/* 821A76E4h case   26:*/		return 0x821A76E8;
	}
	return 0x821A76E8;
} // Block from 821A767Ch-821A76E8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A76E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A76E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A76E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A76E8);
		  /* 821A76E8h */ case    0:  		/* rlwinm R11, R10, 22, 29, 30 */
		/* 821A76E8h case    0:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R11,regs.R10);
		/* 821A76E8h case    0:*/		return 0x821A76EC;
		  /* 821A76ECh */ case    1:  		/* rlwinm R9, R10, 24, 29, 30 */
		/* 821A76ECh case    1:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R10);
		/* 821A76ECh case    1:*/		return 0x821A76F0;
		  /* 821A76F0h */ case    2:  		/* srw R11, R22, R11 */
		/* 821A76F0h case    2:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 821A76F0h case    2:*/		return 0x821A76F4;
		  /* 821A76F4h */ case    3:  		/* srw R9, R22, R9 */
		/* 821A76F4h case    3:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R22,regs.R9);
		/* 821A76F4h case    3:*/		return 0x821A76F8;
		  /* 821A76F8h */ case    4:  		/* rlwimi R9, R11, 2, 28, 29 */
		/* 821A76F8h case    4:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R11);
		/* 821A76F8h case    4:*/		return 0x821A76FC;
		  /* 821A76FCh */ case    5:  		/* rlwinm R11, R10, 26, 29, 30 */
		/* 821A76FCh case    5:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R11,regs.R10);
		/* 821A76FCh case    5:*/		return 0x821A7700;
		  /* 821A7700h */ case    6:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A7700h case    6:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A7700h case    6:*/		return 0x821A7704;
		  /* 821A7704h */ case    7:  		/* srw R11, R22, R11 */
		/* 821A7704h case    7:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 821A7704h case    7:*/		return 0x821A7708;
		  /* 821A7708h */ case    8:  		/* rlwinm R8, R10, 28, 29, 30 */
		/* 821A7708h case    8:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R8,regs.R10);
		/* 821A7708h case    8:*/		return 0x821A770C;
		  /* 821A770Ch */ case    9:  		/* rlwimi R11, R9, 2, 0, 29 */
		/* 821A770Ch case    9:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 821A770Ch case    9:*/		return 0x821A7710;
		  /* 821A7710h */ case   10:  		/* srw R9, R22, R8 */
		/* 821A7710h case   10:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R22,regs.R8);
		/* 821A7710h case   10:*/		return 0x821A7714;
		  /* 821A7714h */ case   11:  		/* rlwimi R9, R11, 2, 0, 29 */
		/* 821A7714h case   11:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R11);
		/* 821A7714h case   11:*/		return 0x821A7718;
		  /* 821A7718h */ case   12:  		/* rlwinm R11, R10, 0, 27, 18 */
		/* 821A7718h case   12:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R10);
		/* 821A7718h case   12:*/		return 0x821A771C;
		  /* 821A771Ch */ case   13:  		/* rlwinm R10, R9, 5, 0, 26 */
		/* 821A771Ch case   13:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R9);
		/* 821A771Ch case   13:*/		return 0x821A7720;
		  /* 821A7720h */ case   14:  		/* or R11, R10, R11 */
		/* 821A7720h case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A7720h case   14:*/		return 0x821A7724;
		  /* 821A7724h */ case   15:  		/* stw R11, <#[R28]> */
		/* 821A7724h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A7724h case   15:*/		return 0x821A7728;
	}
	return 0x821A7728;
} // Block from 821A76E8h-821A7728h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A7728h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7728( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7728) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7728);
		  /* 821A7728h */ case    0:  		/* lwz R28, <#[R1 + 88]> */
		/* 821A7728h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000058) );
		/* 821A7728h case    0:*/		return 0x821A772C;
		  /* 821A772Ch */ case    1:  		/* b -1072 */
		/* 821A772Ch case    1:*/		return 0x821A72FC;
		/* 821A772Ch case    1:*/		return 0x821A7730;
	}
	return 0x821A7730;
} // Block from 821A7728h-821A7730h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A7730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7730);
		  /* 821A7730h */ case    0:  		/* li R4, 4800 */
		/* 821A7730h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821A7730h case    0:*/		return 0x821A7734;
		  /* 821A7734h */ case    1:  		/* lwz R3, <#[R1 + 308]> */
		/* 821A7734h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000134) );
		/* 821A7734h case    1:*/		return 0x821A7738;
		  /* 821A7738h */ case    2:  		/* bl -350416 */
		/* 821A7738h case    2:*/		regs.LR = 0x821A773C; return 0x82151E68;
		/* 821A7738h case    2:*/		return 0x821A773C;
	}
	return 0x821A773C;
} // Block from 821A7730h-821A773Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A773Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A773C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A773C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A773C);
		  /* 821A773Ch */ case    0:  		/* lwz R10, <#[R27 + 976]> */
		/* 821A773Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x000003D0) );
		/* 821A773Ch case    0:*/		return 0x821A7740;
		  /* 821A7740h */ case    1:  		/* addi R11, R27, 972 */
		/* 821A7740h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0x3CC);
		/* 821A7740h case    1:*/		return 0x821A7744;
		  /* 821A7744h */ case    2:  		/* lwz R4, <#[R1 + 84]> */
		/* 821A7744h case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821A7744h case    2:*/		return 0x821A7748;
		  /* 821A7748h */ case    3:  		/* cmplwi CR6, R4, 0 */
		/* 821A7748h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A7748h case    3:*/		return 0x821A774C;
		  /* 821A774Ch */ case    4:  		/* stw R10, <#[R24]> */
		/* 821A774Ch case    4:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 821A774Ch case    4:*/		return 0x821A7750;
		  /* 821A7750h */ case    5:  		/* stw R24, <#[R27 + 976]> */
		/* 821A7750h case    5:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R27 + 0x000003D0) );
		/* 821A7750h case    5:*/		return 0x821A7754;
		  /* 821A7754h */ case    6:  		/* lbz R11, <#[R18 - 1]> */
		/* 821A7754h case    6:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R18 + 0xFFFFFFFF) );
		/* 821A7754h case    6:*/		return 0x821A7758;
		  /* 821A7758h */ case    7:  		/* stw R11, <#[R1 + 80]> */
		/* 821A7758h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A7758h case    7:*/		return 0x821A775C;
		  /* 821A775Ch */ case    8:  		/* bc 12, CR6_EQ, 100 */
		/* 821A775Ch case    8:*/		if ( regs.CR[6].eq ) { return 0x821A77C0;  }
		/* 821A775Ch case    8:*/		return 0x821A7760;
		  /* 821A7760h */ case    9:  		/* li R10, 0 */
		/* 821A7760h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A7760h case    9:*/		return 0x821A7764;
		  /* 821A7764h */ case   10:  		/* li R9, 0 */
		/* 821A7764h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A7764h case   10:*/		return 0x821A7768;
		  /* 821A7768h */ case   11:  		/* mr R8, R26 */
		/* 821A7768h case   11:*/		regs.R8 = regs.R26;
		/* 821A7768h case   11:*/		return 0x821A776C;
		  /* 821A776Ch */ case   12:  		/* mr R7, R28 */
		/* 821A776Ch case   12:*/		regs.R7 = regs.R28;
		/* 821A776Ch case   12:*/		return 0x821A7770;
		  /* 821A7770h */ case   13:  		/* mr R6, R14 */
		/* 821A7770h case   13:*/		regs.R6 = regs.R14;
		/* 821A7770h case   13:*/		return 0x821A7774;
		  /* 821A7774h */ case   14:  		/* mr R5, R25 */
		/* 821A7774h case   14:*/		regs.R5 = regs.R25;
		/* 821A7774h case   14:*/		return 0x821A7778;
		  /* 821A7778h */ case   15:  		/* mr R3, R27 */
		/* 821A7778h case   15:*/		regs.R3 = regs.R27;
		/* 821A7778h case   15:*/		return 0x821A777C;
		  /* 821A777Ch */ case   16:  		/* bl -21292 */
		/* 821A777Ch case   16:*/		regs.LR = 0x821A7780; return 0x821A2450;
		/* 821A777Ch case   16:*/		return 0x821A7780;
		  /* 821A7780h */ case   17:  		/* addi R11, R25, 4 */
		/* 821A7780h case   17:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x4);
		/* 821A7780h case   17:*/		return 0x821A7784;
		  /* 821A7784h */ case   18:  		/* lwz R11, <#[R25 + 4]> */
		/* 821A7784h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821A7784h case   18:*/		return 0x821A7788;
		  /* 821A7788h */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821A7788h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A7788h case   19:*/		return 0x821A778C;
		  /* 821A778Ch */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 821A778Ch case   20:*/		if ( regs.CR[6].eq ) { return 0x821A77C0;  }
		/* 821A778Ch case   20:*/		return 0x821A7790;
		  /* 821A7790h */ case   21:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A7790h case   21:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A7790h case   21:*/		return 0x821A7794;
		  /* 821A7794h */ case   22:  		/* cmplwi CR6, R10, 0 */
		/* 821A7794h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A7794h case   22:*/		return 0x821A7798;
		  /* 821A7798h */ case   23:  		/* bc 12, CR6_EQ, 32 */
		/* 821A7798h case   23:*/		if ( regs.CR[6].eq ) { return 0x821A77B8;  }
		/* 821A7798h case   23:*/		return 0x821A779C;
		  /* 821A779Ch */ case   24:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A779Ch case   24:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A779Ch case   24:*/		return 0x821A77A0;
		  /* 821A77A0h */ case   25:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821A77A0h case   25:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821A77A0h case   25:*/		return 0x821A77A4;
		  /* 821A77A4h */ case   26:  		/* cmplwi CR6, R10, 14080 */
		/* 821A77A4h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821A77A4h case   26:*/		return 0x821A77A8;
		  /* 821A77A8h */ case   27:  		/* bc 4, CR6_EQ, 16 */
		/* 821A77A8h case   27:*/		if ( !regs.CR[6].eq ) { return 0x821A77B8;  }
		/* 821A77A8h case   27:*/		return 0x821A77AC;
		  /* 821A77ACh */ case   28:  		/* lwz R10, <#[R11]> */
		/* 821A77ACh case   28:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A77ACh case   28:*/		return 0x821A77B0;
		  /* 821A77B0h */ case   29:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821A77B0h case   29:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821A77B0h case   29:*/		return 0x821A77B4;
		  /* 821A77B4h */ case   30:  		/* bc 4, CR0_EQ, 12 */
		/* 821A77B4h case   30:*/		if ( !regs.CR[0].eq ) { return 0x821A77C0;  }
		/* 821A77B4h case   30:*/		return 0x821A77B8;
	}
	return 0x821A77B8;
} // Block from 821A773Ch-821A77B8h (31 instructions)

//////////////////////////////////////////////////////
// Block at 821A77B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A77B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A77B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A77B8);
		  /* 821A77B8h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A77B8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A77B8h case    0:*/		return 0x821A77BC;
		  /* 821A77BCh */ case    1:  		/* b -52 */
		/* 821A77BCh case    1:*/		return 0x821A7788;
		/* 821A77BCh case    1:*/		return 0x821A77C0;
	}
	return 0x821A77C0;
} // Block from 821A77B8h-821A77C0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A77C0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A77C0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A77C0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A77C0);
		  /* 821A77C0h */ case    0:  		/* li R21, 0 */
		/* 821A77C0h case    0:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821A77C0h case    0:*/		return 0x821A77C4;
	}
	return 0x821A77C4;
} // Block from 821A77C0h-821A77C4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A77C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A77C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A77C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A77C4);
		  /* 821A77C4h */ case    0:  		/* mr R26, R19 */
		/* 821A77C4h case    0:*/		regs.R26 = regs.R19;
		/* 821A77C4h case    0:*/		return 0x821A77C8;
		  /* 821A77C8h */ case    1:  		/* stw R19, <#[R1 + 324]> */
		/* 821A77C8h case    1:*/		cpu::mem::store32( regs, regs.R19, (uint32)(regs.R1 + 0x00000144) );
		/* 821A77C8h case    1:*/		return 0x821A77CC;
	}
	return 0x821A77CC;
} // Block from 821A77C4h-821A77CCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A77CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A77CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A77CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A77CC);
		  /* 821A77CCh */ case    0:  		/* addi R11, R1, 96 */
		/* 821A77CCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A77CCh case    0:*/		return 0x821A77D0;
		  /* 821A77D0h */ case    1:  		/* li R8, 0 */
		/* 821A77D0h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A77D0h case    1:*/		return 0x821A77D4;
		  /* 821A77D4h */ case    2:  		/* li R7, 0 */
		/* 821A77D4h case    2:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A77D4h case    2:*/		return 0x821A77D8;
		  /* 821A77D8h */ case    3:  		/* addi R6, R1, 96 */
		/* 821A77D8h case    3:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821A77D8h case    3:*/		return 0x821A77DC;
		  /* 821A77DCh */ case    4:  		/* mr R5, R26 */
		/* 821A77DCh case    4:*/		regs.R5 = regs.R26;
		/* 821A77DCh case    4:*/		return 0x821A77E0;
		  /* 821A77E0h */ case    5:  		/* std R21, <#[R11]> */
		/* 821A77E0h case    5:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000000) );
		/* 821A77E0h case    5:*/		return 0x821A77E4;
		  /* 821A77E4h */ case    6:  		/* mr R4, R25 */
		/* 821A77E4h case    6:*/		regs.R4 = regs.R25;
		/* 821A77E4h case    6:*/		return 0x821A77E8;
		  /* 821A77E8h */ case    7:  		/* std R21, <#[R11 + 8]> */
		/* 821A77E8h case    7:*/		cpu::mem::store64( regs, regs.R21, (uint32)(regs.R11 + 0x00000008) );
		/* 821A77E8h case    7:*/		return 0x821A77EC;
		  /* 821A77ECh */ case    8:  		/* mr R3, R27 */
		/* 821A77ECh case    8:*/		regs.R3 = regs.R27;
		/* 821A77ECh case    8:*/		return 0x821A77F0;
		  /* 821A77F0h */ case    9:  		/* bl -43712 */
		/* 821A77F0h case    9:*/		regs.LR = 0x821A77F4; return 0x8219CD30;
		/* 821A77F0h case    9:*/		return 0x821A77F4;
		  /* 821A77F4h */ case   10:  		/* li R9, 0 */
		/* 821A77F4h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A77F4h case   10:*/		return 0x821A77F8;
		  /* 821A77F8h */ case   11:  		/* li R8, 0 */
		/* 821A77F8h case   11:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A77F8h case   11:*/		return 0x821A77FC;
		  /* 821A77FCh */ case   12:  		/* li R7, 0 */
		/* 821A77FCh case   12:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A77FCh case   12:*/		return 0x821A7800;
		  /* 821A7800h */ case   13:  		/* mr R6, R25 */
		/* 821A7800h case   13:*/		regs.R6 = regs.R25;
		/* 821A7800h case   13:*/		return 0x821A7804;
		  /* 821A7804h */ case   14:  		/* mr R5, R26 */
		/* 821A7804h case   14:*/		regs.R5 = regs.R26;
		/* 821A7804h case   14:*/		return 0x821A7808;
		  /* 821A7808h */ case   15:  		/* mr R4, R25 */
		/* 821A7808h case   15:*/		regs.R4 = regs.R25;
		/* 821A7808h case   15:*/		return 0x821A780C;
		  /* 821A780Ch */ case   16:  		/* mr R3, R27 */
		/* 821A780Ch case   16:*/		regs.R3 = regs.R27;
		/* 821A780Ch case   16:*/		return 0x821A7810;
		  /* 821A7810h */ case   17:  		/* bl -27568 */
		/* 821A7810h case   17:*/		regs.LR = 0x821A7814; return 0x821A0C60;
		/* 821A7810h case   17:*/		return 0x821A7814;
		  /* 821A7814h */ case   18:  		/* cmpwi CR6, R3, -1 */
		/* 821A7814h case   18:*/		cpu::op::cmpwi<6>(regs,regs.R3,0xFFFFFFFF);
		/* 821A7814h case   18:*/		return 0x821A7818;
		  /* 821A7818h */ case   19:  		/* mr R3, R27 */
		/* 821A7818h case   19:*/		regs.R3 = regs.R27;
		/* 821A7818h case   19:*/		return 0x821A781C;
		  /* 821A781Ch */ case   20:  		/* bc 4, CR6_EQ, 12 */
		/* 821A781Ch case   20:*/		if ( !regs.CR[6].eq ) { return 0x821A7828;  }
		/* 821A781Ch case   20:*/		return 0x821A7820;
		  /* 821A7820h */ case   21:  		/* li R4, 4800 */
		/* 821A7820h case   21:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821A7820h case   21:*/		return 0x821A7824;
		  /* 821A7824h */ case   22:  		/* bl -350652 */
		/* 821A7824h case   22:*/		regs.LR = 0x821A7828; return 0x82151E68;
		/* 821A7824h case   22:*/		return 0x821A7828;
	}
	return 0x821A7828;
} // Block from 821A77CCh-821A7828h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A7828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7828);
		  /* 821A7828h */ case    0:  		/* mr R4, R25 */
		/* 821A7828h case    0:*/		regs.R4 = regs.R25;
		/* 821A7828h case    0:*/		return 0x821A782C;
		  /* 821A782Ch */ case    1:  		/* bl 512884 */
		/* 821A782Ch case    1:*/		regs.LR = 0x821A7830; return 0x82224BA0;
		/* 821A782Ch case    1:*/		return 0x821A7830;
		  /* 821A7830h */ case    2:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A7830h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A7830h case    2:*/		return 0x821A7834;
		  /* 821A7834h */ case    3:  		/* lwz R10, <#[R3 + 16]> */
		/* 821A7834h case    3:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 821A7834h case    3:*/		return 0x821A7838;
		  /* 821A7838h */ case    4:  		/* mr R23, R3 */
		/* 821A7838h case    4:*/		regs.R23 = regs.R3;
		/* 821A7838h case    4:*/		return 0x821A783C;
		  /* 821A783Ch */ case    5:  		/* rlwimi R11, R17, 14, 15, 17 */
		/* 821A783Ch case    5:*/		cpu::op::rlwimi<0,14,15,17>(regs,&regs.R11,regs.R17);
		/* 821A783Ch case    5:*/		return 0x821A7840;
		  /* 821A7840h */ case    6:  		/* lwz R9, <#[R3 + 12]> */
		/* 821A7840h case    6:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A7840h case    6:*/		return 0x821A7844;
		  /* 821A7844h */ case    7:  		/* rlwinm R10, R10, 0, 16, 12 */
		/* 821A7844h case    7:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R10,regs.R10);
		/* 821A7844h case    7:*/		return 0x821A7848;
		  /* 821A7848h */ case    8:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821A7848h case    8:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821A7848h case    8:*/		return 0x821A784C;
		  /* 821A784Ch */ case    9:  		/* stw R10, <#[R3 + 16]> */
		/* 821A784Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000010) );
		/* 821A784Ch case    9:*/		return 0x821A7850;
		  /* 821A7850h */ case   10:  		/* rlwinm R9, R9, 0, 0, 15 */
		/* 821A7850h case   10:*/		cpu::op::rlwinm<0,0,0,15>(regs,&regs.R9,regs.R9);
		/* 821A7850h case   10:*/		return 0x821A7854;
		  /* 821A7854h */ case   11:  		/* rlwinm R11, R11, 0, 2, 0 */
		/* 821A7854h case   11:*/		cpu::op::rlwinm<0,0,2,0>(regs,&regs.R11,regs.R11);
		/* 821A7854h case   11:*/		return 0x821A7858;
		  /* 821A7858h */ case   12:  		/* stw R11, <#[R3 + 8]> */
		/* 821A7858h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A7858h case   12:*/		return 0x821A785C;
		  /* 821A785Ch */ case   13:  		/* lhz R11, <#[R25 + 14]> */
		/* 821A785Ch case   13:*/		cpu::mem::load16z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000E) );
		/* 821A785Ch case   13:*/		return 0x821A7860;
		  /* 821A7860h */ case   14:  		/* or R11, R11, R9 */
		/* 821A7860h case   14:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A7860h case   14:*/		return 0x821A7864;
		  /* 821A7864h */ case   15:  		/* rlwinm. R10, R11, 0, 16, 31 */
		/* 821A7864h case   15:*/		cpu::op::rlwinm<1,0,16,31>(regs,&regs.R10,regs.R11);
		/* 821A7864h case   15:*/		return 0x821A7868;
		  /* 821A7868h */ case   16:  		/* stw R11, <#[R3 + 12]> */
		/* 821A7868h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A7868h case   16:*/		return 0x821A786C;
		  /* 821A786Ch */ case   17:  		/* bc 12, CR0_EQ, 80 */
		/* 821A786Ch case   17:*/		if ( regs.CR[0].eq ) { return 0x821A78BC;  }
		/* 821A786Ch case   17:*/		return 0x821A7870;
		  /* 821A7870h */ case   18:  		/* cmplwi CR6, R16, 0 */
		/* 821A7870h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R16,0x00000000);
		/* 821A7870h case   18:*/		return 0x821A7874;
		  /* 821A7874h */ case   19:  		/* bc 12, CR6_EQ, 72 */
		/* 821A7874h case   19:*/		if ( regs.CR[6].eq ) { return 0x821A78BC;  }
		/* 821A7874h case   19:*/		return 0x821A7878;
		  /* 821A7878h */ case   20:  		/* mr R30, R21 */
		/* 821A7878h case   20:*/		regs.R30 = regs.R21;
		/* 821A7878h case   20:*/		return 0x821A787C;
		  /* 821A787Ch */ case   21:  		/* mr R31, R21 */
		/* 821A787Ch case   21:*/		regs.R31 = regs.R21;
		/* 821A787Ch case   21:*/		return 0x821A7880;
		  /* 821A7880h */ case   22:  		/* mr R29, R16 */
		/* 821A7880h case   22:*/		regs.R29 = regs.R16;
		/* 821A7880h case   22:*/		return 0x821A7884;
		  /* 821A7884h */ case   23:  		/* lwz R11, <#[R1 + 80]> */
		/* 821A7884h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000050) );
		/* 821A7884h case   23:*/		return 0x821A7888;
		  /* 821A7888h */ case   24:  		/* srw R11, R11, R31 */
		/* 821A7888h case   24:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821A7888h case   24:*/		return 0x821A788C;
		  /* 821A788Ch */ case   25:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 821A788Ch case   25:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 821A788Ch case   25:*/		return 0x821A7890;
		  /* 821A7890h */ case   26:  		/* cmplw CR6, R4, R14 */
		/* 821A7890h case   26:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R14);
		/* 821A7890h case   26:*/		return 0x821A7894;
		  /* 821A7894h */ case   27:  		/* bc 12, CR6_LT, 24 */
		/* 821A7894h case   27:*/		if ( regs.CR[6].lt ) { return 0x821A78AC;  }
		/* 821A7894h case   27:*/		return 0x821A7898;
		  /* 821A7898h */ case   28:  		/* srw R11, R15, R30 */
		/* 821A7898h case   28:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R15,regs.R30);
		/* 821A7898h case   28:*/		return 0x821A789C;
		  /* 821A789Ch */ case   29:  		/* rlwinm R6, R11, 0, 28, 31 */
		/* 821A789Ch case   29:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R6,regs.R11);
		/* 821A789Ch case   29:*/		return 0x821A78A0;
		  /* 821A78A0h */ case   30:  		/* li R5, 15 */
		/* 821A78A0h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0xF);
		/* 821A78A0h case   30:*/		return 0x821A78A4;
		  /* 821A78A4h */ case   31:  		/* mr R3, R23 */
		/* 821A78A4h case   31:*/		regs.R3 = regs.R23;
		/* 821A78A4h case   31:*/		return 0x821A78A8;
		  /* 821A78A8h */ case   32:  		/* bl 88024 */
		/* 821A78A8h case   32:*/		regs.LR = 0x821A78AC; return 0x821BD080;
		/* 821A78A8h case   32:*/		return 0x821A78AC;
	}
	return 0x821A78AC;
} // Block from 821A7828h-821A78ACh (33 instructions)

//////////////////////////////////////////////////////
// Block at 821A78ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A78AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A78AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A78AC);
		  /* 821A78ACh */ case    0:  		/* addic. R29, R29, -1 */
		/* 821A78ACh case    0:*/		cpu::op::addic<1>(regs,&regs.R29,regs.R29,0xFFFFFFFF);
		/* 821A78ACh case    0:*/		return 0x821A78B0;
		  /* 821A78B0h */ case    1:  		/* addi R31, R31, 2 */
		/* 821A78B0h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 821A78B0h case    1:*/		return 0x821A78B4;
		  /* 821A78B4h */ case    2:  		/* addi R30, R30, 4 */
		/* 821A78B4h case    2:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A78B4h case    2:*/		return 0x821A78B8;
		  /* 821A78B8h */ case    3:  		/* bc 4, CR0_EQ, -52 */
		/* 821A78B8h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A7884;  }
		/* 821A78B8h case    3:*/		return 0x821A78BC;
	}
	return 0x821A78BC;
} // Block from 821A78ACh-821A78BCh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A78BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A78BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A78BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A78BC);
		  /* 821A78BCh */ case    0:  		/* mr R4, R26 */
		/* 821A78BCh case    0:*/		regs.R4 = regs.R26;
		/* 821A78BCh case    0:*/		return 0x821A78C0;
		  /* 821A78C0h */ case    1:  		/* mr R3, R25 */
		/* 821A78C0h case    1:*/		regs.R3 = regs.R25;
		/* 821A78C0h case    1:*/		return 0x821A78C4;
		  /* 821A78C4h */ case    2:  		/* mr R20, R25 */
		/* 821A78C4h case    2:*/		regs.R20 = regs.R25;
		/* 821A78C4h case    2:*/		return 0x821A78C8;
		  /* 821A78C8h */ case    3:  		/* bl 518136 */
		/* 821A78C8h case    3:*/		regs.LR = 0x821A78CC; return 0x822260C0;
		/* 821A78C8h case    3:*/		return 0x821A78CC;
		  /* 821A78CCh */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A78CCh case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A78CCh case    4:*/		return 0x821A78D0;
		  /* 821A78D0h */ case    5:  		/* bc 12, CR0_EQ, 8 */
		/* 821A78D0h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A78D8;  }
		/* 821A78D0h case    5:*/		return 0x821A78D4;
		  /* 821A78D4h */ case    6:  		/* mr R20, R26 */
		/* 821A78D4h case    6:*/		regs.R20 = regs.R26;
		/* 821A78D4h case    6:*/		return 0x821A78D8;
	}
	return 0x821A78D8;
} // Block from 821A78BCh-821A78D8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A78D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A78D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A78D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A78D8);
		  /* 821A78D8h */ case    0:  		/* rlwinm R11, R20, 0, 0, 30 */
		/* 821A78D8h case    0:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R20);
		/* 821A78D8h case    0:*/		return 0x821A78DC;
		  /* 821A78DCh */ case    1:  		/* rlwinm R10, R23, 0, 0, 30 */
		/* 821A78DCh case    1:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R23);
		/* 821A78DCh case    1:*/		return 0x821A78E0;
		  /* 821A78E0h */ case    2:  		/* addi R11, R11, 36 */
		/* 821A78E0h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A78E0h case    2:*/		return 0x821A78E4;
		  /* 821A78E4h */ case    3:  		/* addi R10, R10, 36 */
		/* 821A78E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A78E4h case    3:*/		return 0x821A78E8;
		  /* 821A78E8h */ case    4:  		/* addi R8, R11, -36 */
		/* 821A78E8h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A78E8h case    4:*/		return 0x821A78EC;
		  /* 821A78ECh */ case    5:  		/* addi R7, R10, -36 */
		/* 821A78ECh case    5:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821A78ECh case    5:*/		return 0x821A78F0;
		  /* 821A78F0h */ case    6:  		/* addi R9, R10, 4 */
		/* 821A78F0h case    6:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A78F0h case    6:*/		return 0x821A78F4;
		  /* 821A78F4h */ case    7:  		/* lwz R6, <#[R11]> */
		/* 821A78F4h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A78F4h case    7:*/		return 0x821A78F8;
		  /* 821A78F8h */ case    8:  		/* addi R5, R1, 88 */
		/* 821A78F8h case    8:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x58);
		/* 821A78F8h case    8:*/		return 0x821A78FC;
		  /* 821A78FCh */ case    9:  		/* li R28, 0 */
		/* 821A78FCh case    9:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A78FCh case    9:*/		return 0x821A7900;
		  /* 821A7900h */ case   10:  		/* subf R22, R26, R25 */
		/* 821A7900h case   10:*/		cpu::op::subf<0>(regs,&regs.R22,regs.R26,regs.R25);
		/* 821A7900h case   10:*/		return 0x821A7904;
		  /* 821A7904h */ case   11:  		/* mr R27, R28 */
		/* 821A7904h case   11:*/		regs.R27 = regs.R28;
		/* 821A7904h case   11:*/		return 0x821A7908;
		  /* 821A7908h */ case   12:  		/* addi R31, R26, 44 */
		/* 821A7908h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R26,0x2C);
		/* 821A7908h case   12:*/		return 0x821A790C;
		  /* 821A790Ch */ case   13:  		/* stw R6, <#[R10]> */
		/* 821A790Ch case   13:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821A790Ch case   13:*/		return 0x821A7910;
		  /* 821A7910h */ case   14:  		/* lwz R6, <#[R11]> */
		/* 821A7910h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7910h case   14:*/		return 0x821A7914;
		  /* 821A7914h */ case   15:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821A7914h case   15:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821A7914h case   15:*/		return 0x821A7918;
		  /* 821A7918h */ case   16:  		/* stw R7, <#[R6]> */
		/* 821A7918h case   16:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821A7918h case   16:*/		return 0x821A791C;
		  /* 821A791Ch */ case   17:  		/* stw R8, <#[R10 + 4]> */
		/* 821A791Ch case   17:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A791Ch case   17:*/		return 0x821A7920;
		  /* 821A7920h */ case   18:  		/* stw R9, <#[R11]> */
		/* 821A7920h case   18:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7920h case   18:*/		return 0x821A7924;
		  /* 821A7924h */ case   19:  		/* lwz R10, <#[R23 + 16]> */
		/* 821A7924h case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000010) );
		/* 821A7924h case   19:*/		return 0x821A7928;
		  /* 821A7928h */ case   20:  		/* lwz R11, <#[R23 + 20]> */
		/* 821A7928h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 821A7928h case   20:*/		return 0x821A792C;
		  /* 821A792Ch */ case   21:  		/* rlwinm R11, R11, 0, 0, 28 */
		/* 821A792Ch case   21:*/		cpu::op::rlwinm<0,0,0,28>(regs,&regs.R11,regs.R11);
		/* 821A792Ch case   21:*/		return 0x821A7930;
		  /* 821A7930h */ case   22:  		/* rlwinm R10, R10, 0, 1, 31 */
		/* 821A7930h case   22:*/		cpu::op::rlwinm<0,0,1,31>(regs,&regs.R10,regs.R10);
		/* 821A7930h case   22:*/		return 0x821A7934;
		  /* 821A7934h */ case   23:  		/* stw R28, <#[R5]> */
		/* 821A7934h case   23:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R5 + 0x00000000) );
		/* 821A7934h case   23:*/		return 0x821A7938;
		  /* 821A7938h */ case   24:  		/* stw R11, <#[R23 + 20]> */
		/* 821A7938h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000014) );
		/* 821A7938h case   24:*/		return 0x821A793C;
		  /* 821A793Ch */ case   25:  		/* stw R10, <#[R23 + 16]> */
		/* 821A793Ch case   25:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000010) );
		/* 821A793Ch case   25:*/		return 0x821A7940;
		  /* 821A7940h */ case   26:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A7940h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A7940h case   26:*/		return 0x821A7944;
		  /* 821A7944h */ case   27:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A7944h case   27:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A7944h case   27:*/		return 0x821A7948;
		  /* 821A7948h */ case   28:  		/* cmplw CR6, R27, R11 */
		/* 821A7948h case   28:*/		cpu::op::cmplw<6>(regs,regs.R27,regs.R11);
		/* 821A7948h case   28:*/		return 0x821A794C;
		  /* 821A794Ch */ case   29:  		/* bc 4, CR6_LT, 260 */
		/* 821A794Ch case   29:*/		if ( !regs.CR[6].lt ) { return 0x821A7A50;  }
		/* 821A794Ch case   29:*/		return 0x821A7950;
		  /* 821A7950h */ case   30:  		/* add R11, R28, R31 */
		/* 821A7950h case   30:*/		cpu::op::add<0>(regs,&regs.R11,regs.R28,regs.R31);
		/* 821A7950h case   30:*/		return 0x821A7954;
		  /* 821A7954h */ case   31:  		/* lwzx R25, <#[R28 + R31]> */
		/* 821A7954h case   31:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R28 + regs.R31 + 0x00000000) );
		/* 821A7954h case   31:*/		return 0x821A7958;
		  /* 821A7958h */ case   32:  		/* lwzx R26, <#[R11 + R22]> */
		/* 821A7958h case   32:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + regs.R22 + 0x00000000) );
		/* 821A7958h case   32:*/		return 0x821A795C;
		  /* 821A795Ch */ case   33:  		/* lwz R4, <#[R26 + 12]> */
		/* 821A795Ch case   33:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R26 + 0x0000000C) );
		/* 821A795Ch case   33:*/		return 0x821A7960;
		  /* 821A7960h */ case   34:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A7960h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A7960h case   34:*/		return 0x821A7964;
		  /* 821A7964h */ case   35:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A7964h case   35:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A7964h case   35:*/		return 0x821A7968;
		  /* 821A7968h */ case   36:  		/* cmplwi CR6, R11, 1 */
		/* 821A7968h case   36:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821A7968h case   36:*/		return 0x821A796C;
		  /* 821A796Ch */ case   37:  		/* bc 12, CR6_LT, 16 */
		/* 821A796Ch case   37:*/		if ( regs.CR[6].lt ) { return 0x821A797C;  }
		/* 821A796Ch case   37:*/		return 0x821A7970;
		  /* 821A7970h */ case   38:  		/* cmplwi CR6, R11, 102 */
		/* 821A7970h case   38:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821A7970h case   38:*/		return 0x821A7974;
		  /* 821A7974h */ case   39:  		/* li R11, 1 */
		/* 821A7974h case   39:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A7974h case   39:*/		return 0x821A7978;
		  /* 821A7978h */ case   40:  		/* bc 4, CR6_GT, 8 */
		/* 821A7978h case   40:*/		if ( !regs.CR[6].gt ) { return 0x821A7980;  }
		/* 821A7978h case   40:*/		return 0x821A797C;
	}
	return 0x821A797C;
} // Block from 821A78D8h-821A797Ch (41 instructions)

//////////////////////////////////////////////////////
// Block at 821A797Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A797C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A797C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A797C);
		  /* 821A797Ch */ case    0:  		/* li R11, 0 */
		/* 821A797Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A797Ch case    0:*/		return 0x821A7980;
	}
	return 0x821A7980;
} // Block from 821A797Ch-821A7980h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A7980h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7980( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7980) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7980);
		  /* 821A7980h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A7980h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A7980h case    0:*/		return 0x821A7984;
		  /* 821A7984h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821A7984h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A7994;  }
		/* 821A7984h case    1:*/		return 0x821A7988;
		  /* 821A7988h */ case    2:  		/* mr R3, R23 */
		/* 821A7988h case    2:*/		regs.R3 = regs.R23;
		/* 821A7988h case    2:*/		return 0x821A798C;
		  /* 821A798Ch */ case    3:  		/* lwz R5, <#[R1 + 308]> */
		/* 821A798Ch case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000134) );
		/* 821A798Ch case    3:*/		return 0x821A7990;
		  /* 821A7990h */ case    4:  		/* bl -194304 */
		/* 821A7990h case    4:*/		regs.LR = 0x821A7994; return 0x82178290;
		/* 821A7990h case    4:*/		return 0x821A7994;
	}
	return 0x821A7994;
} // Block from 821A7980h-821A7994h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A7994h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7994( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7994) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7994);
		  /* 821A7994h */ case    0:  		/* lwz R4, <#[R25 + 12]> */
		/* 821A7994h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x0000000C) );
		/* 821A7994h case    0:*/		return 0x821A7998;
		  /* 821A7998h */ case    1:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A7998h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A7998h case    1:*/		return 0x821A799C;
		  /* 821A799Ch */ case    2:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A799Ch case    2:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A799Ch case    2:*/		return 0x821A79A0;
		  /* 821A79A0h */ case    3:  		/* cmplwi CR6, R11, 1 */
		/* 821A79A0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821A79A0h case    3:*/		return 0x821A79A4;
		  /* 821A79A4h */ case    4:  		/* bc 12, CR6_LT, 16 */
		/* 821A79A4h case    4:*/		if ( regs.CR[6].lt ) { return 0x821A79B4;  }
		/* 821A79A4h case    4:*/		return 0x821A79A8;
		  /* 821A79A8h */ case    5:  		/* cmplwi CR6, R11, 102 */
		/* 821A79A8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821A79A8h case    5:*/		return 0x821A79AC;
		  /* 821A79ACh */ case    6:  		/* li R11, 1 */
		/* 821A79ACh case    6:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A79ACh case    6:*/		return 0x821A79B0;
		  /* 821A79B0h */ case    7:  		/* bc 4, CR6_GT, 8 */
		/* 821A79B0h case    7:*/		if ( !regs.CR[6].gt ) { return 0x821A79B8;  }
		/* 821A79B0h case    7:*/		return 0x821A79B4;
	}
	return 0x821A79B4;
} // Block from 821A7994h-821A79B4h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A79B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A79B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A79B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A79B4);
		  /* 821A79B4h */ case    0:  		/* li R11, 0 */
		/* 821A79B4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A79B4h case    0:*/		return 0x821A79B8;
	}
	return 0x821A79B8;
} // Block from 821A79B4h-821A79B8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A79B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A79B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A79B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A79B8);
		  /* 821A79B8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A79B8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A79B8h case    0:*/		return 0x821A79BC;
		  /* 821A79BCh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821A79BCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821A79CC;  }
		/* 821A79BCh case    1:*/		return 0x821A79C0;
		  /* 821A79C0h */ case    2:  		/* mr R3, R23 */
		/* 821A79C0h case    2:*/		regs.R3 = regs.R23;
		/* 821A79C0h case    2:*/		return 0x821A79C4;
		  /* 821A79C4h */ case    3:  		/* lwz R5, <#[R1 + 308]> */
		/* 821A79C4h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000134) );
		/* 821A79C4h case    3:*/		return 0x821A79C8;
		  /* 821A79C8h */ case    4:  		/* bl -194360 */
		/* 821A79C8h case    4:*/		regs.LR = 0x821A79CC; return 0x82178290;
		/* 821A79C8h case    4:*/		return 0x821A79CC;
	}
	return 0x821A79CC;
} // Block from 821A79B8h-821A79CCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A79CCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A79CC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A79CC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A79CC);
		  /* 821A79CCh */ case    0:  		/* li R29, 0 */
		/* 821A79CCh case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A79CCh case    0:*/		return 0x821A79D0;
		  /* 821A79D0h */ case    1:  		/* cmplwi CR6, R27, 0 */
		/* 821A79D0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821A79D0h case    1:*/		return 0x821A79D4;
		  /* 821A79D4h */ case    2:  		/* bc 12, CR6_EQ, 104 */
		/* 821A79D4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A7A3C;  }
		/* 821A79D4h case    2:*/		return 0x821A79D8;
		  /* 821A79D8h */ case    3:  		/* mr R30, R31 */
		/* 821A79D8h case    3:*/		regs.R30 = regs.R31;
		/* 821A79D8h case    3:*/		return 0x821A79DC;
		  /* 821A79DCh */ case    4:  		/* mr R3, R26 */
		/* 821A79DCh case    4:*/		regs.R3 = regs.R26;
		/* 821A79DCh case    4:*/		return 0x821A79E0;
		  /* 821A79E0h */ case    5:  		/* lwzx R4, <#[R22 + R30]> */
		/* 821A79E0h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R22 + regs.R30 + 0x00000000) );
		/* 821A79E0h case    5:*/		return 0x821A79E4;
		  /* 821A79E4h */ case    6:  		/* bl -276316 */
		/* 821A79E4h case    6:*/		regs.LR = 0x821A79E8; return 0x82164288;
		/* 821A79E4h case    6:*/		return 0x821A79E8;
		  /* 821A79E8h */ case    7:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A79E8h case    7:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A79E8h case    7:*/		return 0x821A79EC;
		  /* 821A79ECh */ case    8:  		/* bc 12, CR0_EQ, 24 */
		/* 821A79ECh case    8:*/		if ( regs.CR[0].eq ) { return 0x821A7A04;  }
		/* 821A79ECh case    8:*/		return 0x821A79F0;
		  /* 821A79F0h */ case    9:  		/* mr R3, R25 */
		/* 821A79F0h case    9:*/		regs.R3 = regs.R25;
		/* 821A79F0h case    9:*/		return 0x821A79F4;
		  /* 821A79F4h */ case   10:  		/* lwz R4, <#[R30]> */
		/* 821A79F4h case   10:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x00000000) );
		/* 821A79F4h case   10:*/		return 0x821A79F8;
		  /* 821A79F8h */ case   11:  		/* bl -276336 */
		/* 821A79F8h case   11:*/		regs.LR = 0x821A79FC; return 0x82164288;
		/* 821A79F8h case   11:*/		return 0x821A79FC;
		  /* 821A79FCh */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A79FCh case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A79FCh case   12:*/		return 0x821A7A00;
		  /* 821A7A00h */ case   13:  		/* bc 4, CR0_EQ, 20 */
		/* 821A7A00h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821A7A14;  }
		/* 821A7A00h case   13:*/		return 0x821A7A04;
	}
	return 0x821A7A04;
} // Block from 821A79CCh-821A7A04h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A7A04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7A04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7A04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7A04);
		  /* 821A7A04h */ case    0:  		/* addi R29, R29, 1 */
		/* 821A7A04h case    0:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821A7A04h case    0:*/		return 0x821A7A08;
		  /* 821A7A08h */ case    1:  		/* addi R30, R30, 4 */
		/* 821A7A08h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A7A08h case    1:*/		return 0x821A7A0C;
		  /* 821A7A0Ch */ case    2:  		/* cmplw CR6, R29, R27 */
		/* 821A7A0Ch case    2:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 821A7A0Ch case    2:*/		return 0x821A7A10;
		  /* 821A7A10h */ case    3:  		/* bc 12, CR6_LT, -52 */
		/* 821A7A10h case    3:*/		if ( regs.CR[6].lt ) { return 0x821A79DC;  }
		/* 821A7A10h case    3:*/		return 0x821A7A14;
	}
	return 0x821A7A14;
} // Block from 821A7A04h-821A7A14h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A7A14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7A14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7A14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7A14);
		  /* 821A7A14h */ case    0:  		/* cmplw CR6, R29, R27 */
		/* 821A7A14h case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R27);
		/* 821A7A14h case    0:*/		return 0x821A7A18;
		  /* 821A7A18h */ case    1:  		/* bc 4, CR6_LT, 36 */
		/* 821A7A18h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821A7A3C;  }
		/* 821A7A18h case    1:*/		return 0x821A7A1C;
		  /* 821A7A1Ch */ case    2:  		/* rlwinm R10, R28, 29, 3, 29 */
		/* 821A7A1Ch case    2:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R28);
		/* 821A7A1Ch case    2:*/		return 0x821A7A20;
		  /* 821A7A20h */ case    3:  		/* addi R11, R1, 88 */
		/* 821A7A20h case    3:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x58);
		/* 821A7A20h case    3:*/		return 0x821A7A24;
		  /* 821A7A24h */ case    4:  		/* addi R8, R29, 1 */
		/* 821A7A24h case    4:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R29,0x1);
		/* 821A7A24h case    4:*/		return 0x821A7A28;
		  /* 821A7A28h */ case    5:  		/* rlwinm R9, R28, 0, 27, 31 */
		/* 821A7A28h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R9,regs.R28);
		/* 821A7A28h case    5:*/		return 0x821A7A2C;
		  /* 821A7A2Ch */ case    6:  		/* slw R9, R8, R9 */
		/* 821A7A2Ch case    6:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821A7A2Ch case    6:*/		return 0x821A7A30;
		  /* 821A7A30h */ case    7:  		/* lwzx R8, <#[R10 + R11]> */
		/* 821A7A30h case    7:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A7A30h case    7:*/		return 0x821A7A34;
		  /* 821A7A34h */ case    8:  		/* or R9, R9, R8 */
		/* 821A7A34h case    8:*/		cpu::op::or<0>(regs,&regs.R9,regs.R9,regs.R8);
		/* 821A7A34h case    8:*/		return 0x821A7A38;
		  /* 821A7A38h */ case    9:  		/* stwx R9, <#[R10 + R11]> */
		/* 821A7A38h case    9:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A7A38h case    9:*/		return 0x821A7A3C;
	}
	return 0x821A7A3C;
} // Block from 821A7A14h-821A7A3Ch (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A7A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7A3C);
		  /* 821A7A3Ch */ case    0:  		/* lwz R25, <#[R1 + 316]> */
		/* 821A7A3Ch case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x0000013C) );
		/* 821A7A3Ch case    0:*/		return 0x821A7A40;
		  /* 821A7A40h */ case    1:  		/* addi R27, R27, 1 */
		/* 821A7A40h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x1);
		/* 821A7A40h case    1:*/		return 0x821A7A44;
		  /* 821A7A44h */ case    2:  		/* lwz R26, <#[R1 + 324]> */
		/* 821A7A44h case    2:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000144) );
		/* 821A7A44h case    2:*/		return 0x821A7A48;
		  /* 821A7A48h */ case    3:  		/* addi R28, R28, 4 */
		/* 821A7A48h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821A7A48h case    3:*/		return 0x821A7A4C;
		  /* 821A7A4Ch */ case    4:  		/* b -268 */
		/* 821A7A4Ch case    4:*/		return 0x821A7940;
		/* 821A7A4Ch case    4:*/		return 0x821A7A50;
	}
	return 0x821A7A50;
} // Block from 821A7A3Ch-821A7A50h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A7A50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7A50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7A50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7A50);
		  /* 821A7A50h */ case    0:  		/* lwz R30, <#[R25 + 4]> */
		/* 821A7A50h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000004) );
		/* 821A7A50h case    0:*/		return 0x821A7A54;
		  /* 821A7A54h */ case    1:  		/* addi R11, R25, 4 */
		/* 821A7A54h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0x4);
		/* 821A7A54h case    1:*/		return 0x821A7A58;
		  /* 821A7A58h */ case    2:  		/* lwz R29, <#[R1 + 308]> */
		/* 821A7A58h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000134) );
		/* 821A7A58h case    2:*/		return 0x821A7A5C;
		  /* 821A7A5Ch */ case    3:  		/* cmplwi CR6, R30, 0 */
		/* 821A7A5Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A7A5Ch case    3:*/		return 0x821A7A60;
		  /* 821A7A60h */ case    4:  		/* bc 12, CR6_EQ, 96 */
		/* 821A7A60h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A7AC0;  }
		/* 821A7A60h case    4:*/		return 0x821A7A64;
		  /* 821A7A64h */ case    5:  		/* lwz R3, <#[R30 + 16]> */
		/* 821A7A64h case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821A7A64h case    5:*/		return 0x821A7A68;
		  /* 821A7A68h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 821A7A68h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821A7A68h case    6:*/		return 0x821A7A6C;
		  /* 821A7A6Ch */ case    7:  		/* bc 12, CR6_EQ, 76 */
		/* 821A7A6Ch case    7:*/		if ( regs.CR[6].eq ) { return 0x821A7AB8;  }
		/* 821A7A6Ch case    7:*/		return 0x821A7A70;
		  /* 821A7A70h */ case    8:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A7A70h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A7A70h case    8:*/		return 0x821A7A74;
		  /* 821A7A74h */ case    9:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A7A74h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A7A74h case    9:*/		return 0x821A7A78;
		  /* 821A7A78h */ case   10:  		/* cmplwi CR6, R11, 1 */
		/* 821A7A78h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821A7A78h case   10:*/		return 0x821A7A7C;
		  /* 821A7A7Ch */ case   11:  		/* bc 12, CR6_LT, 16 */
		/* 821A7A7Ch case   11:*/		if ( regs.CR[6].lt ) { return 0x821A7A8C;  }
		/* 821A7A7Ch case   11:*/		return 0x821A7A80;
		  /* 821A7A80h */ case   12:  		/* cmplwi CR6, R11, 102 */
		/* 821A7A80h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821A7A80h case   12:*/		return 0x821A7A84;
		  /* 821A7A84h */ case   13:  		/* li R11, 1 */
		/* 821A7A84h case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A7A84h case   13:*/		return 0x821A7A88;
		  /* 821A7A88h */ case   14:  		/* bc 4, CR6_GT, 8 */
		/* 821A7A88h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821A7A90;  }
		/* 821A7A88h case   14:*/		return 0x821A7A8C;
	}
	return 0x821A7A8C;
} // Block from 821A7A50h-821A7A8Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A7A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7A8C);
		  /* 821A7A8Ch */ case    0:  		/* li R11, 0 */
		/* 821A7A8Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A7A8Ch case    0:*/		return 0x821A7A90;
	}
	return 0x821A7A90;
} // Block from 821A7A8Ch-821A7A90h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A7A90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7A90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7A90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7A90);
		  /* 821A7A90h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A7A90h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A7A90h case    0:*/		return 0x821A7A94;
		  /* 821A7A94h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 821A7A94h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A7AB8;  }
		/* 821A7A94h case    1:*/		return 0x821A7A98;
		  /* 821A7A98h */ case    2:  		/* mr R4, R23 */
		/* 821A7A98h case    2:*/		regs.R4 = regs.R23;
		/* 821A7A98h case    2:*/		return 0x821A7A9C;
		  /* 821A7A9Ch */ case    3:  		/* bl 517668 */
		/* 821A7A9Ch case    3:*/		regs.LR = 0x821A7AA0; return 0x822260C0;
		/* 821A7A9Ch case    3:*/		return 0x821A7AA0;
		  /* 821A7AA0h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A7AA0h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A7AA0h case    4:*/		return 0x821A7AA4;
		  /* 821A7AA4h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 821A7AA4h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A7AB8;  }
		/* 821A7AA4h case    5:*/		return 0x821A7AA8;
		  /* 821A7AA8h */ case    6:  		/* mr R5, R29 */
		/* 821A7AA8h case    6:*/		regs.R5 = regs.R29;
		/* 821A7AA8h case    6:*/		return 0x821A7AAC;
		  /* 821A7AACh */ case    7:  		/* lwz R3, <#[R30 + 16]> */
		/* 821A7AACh case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821A7AACh case    7:*/		return 0x821A7AB0;
		  /* 821A7AB0h */ case    8:  		/* mr R4, R23 */
		/* 821A7AB0h case    8:*/		regs.R4 = regs.R23;
		/* 821A7AB0h case    8:*/		return 0x821A7AB4;
		  /* 821A7AB4h */ case    9:  		/* bl -194596 */
		/* 821A7AB4h case    9:*/		regs.LR = 0x821A7AB8; return 0x82178290;
		/* 821A7AB4h case    9:*/		return 0x821A7AB8;
	}
	return 0x821A7AB8;
} // Block from 821A7A90h-821A7AB8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A7AB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7AB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7AB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7AB8);
		  /* 821A7AB8h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821A7AB8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821A7AB8h case    0:*/		return 0x821A7ABC;
		  /* 821A7ABCh */ case    1:  		/* b -96 */
		/* 821A7ABCh case    1:*/		return 0x821A7A5C;
		/* 821A7ABCh case    1:*/		return 0x821A7AC0;
	}
	return 0x821A7AC0;
} // Block from 821A7AB8h-821A7AC0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A7AC0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7AC0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7AC0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7AC0);
		  /* 821A7AC0h */ case    0:  		/* lwz R30, <#[R26 + 4]> */
		/* 821A7AC0h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R26 + 0x00000004) );
		/* 821A7AC0h case    0:*/		return 0x821A7AC4;
		  /* 821A7AC4h */ case    1:  		/* addi R21, R26, 4 */
		/* 821A7AC4h case    1:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R26,0x4);
		/* 821A7AC4h case    1:*/		return 0x821A7AC8;
		  /* 821A7AC8h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821A7AC8h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A7AC8h case    2:*/		return 0x821A7ACC;
		  /* 821A7ACCh */ case    3:  		/* bc 12, CR6_EQ, 96 */
		/* 821A7ACCh case    3:*/		if ( regs.CR[6].eq ) { return 0x821A7B2C;  }
		/* 821A7ACCh case    3:*/		return 0x821A7AD0;
		  /* 821A7AD0h */ case    4:  		/* lwz R3, <#[R30 + 16]> */
		/* 821A7AD0h case    4:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821A7AD0h case    4:*/		return 0x821A7AD4;
		  /* 821A7AD4h */ case    5:  		/* cmplwi CR6, R3, 0 */
		/* 821A7AD4h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821A7AD4h case    5:*/		return 0x821A7AD8;
		  /* 821A7AD8h */ case    6:  		/* bc 12, CR6_EQ, 76 */
		/* 821A7AD8h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A7B24;  }
		/* 821A7AD8h case    6:*/		return 0x821A7ADC;
		  /* 821A7ADCh */ case    7:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A7ADCh case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A7ADCh case    7:*/		return 0x821A7AE0;
		  /* 821A7AE0h */ case    8:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A7AE0h case    8:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A7AE0h case    8:*/		return 0x821A7AE4;
		  /* 821A7AE4h */ case    9:  		/* cmplwi CR6, R11, 1 */
		/* 821A7AE4h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821A7AE4h case    9:*/		return 0x821A7AE8;
		  /* 821A7AE8h */ case   10:  		/* bc 12, CR6_LT, 16 */
		/* 821A7AE8h case   10:*/		if ( regs.CR[6].lt ) { return 0x821A7AF8;  }
		/* 821A7AE8h case   10:*/		return 0x821A7AEC;
		  /* 821A7AECh */ case   11:  		/* cmplwi CR6, R11, 102 */
		/* 821A7AECh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821A7AECh case   11:*/		return 0x821A7AF0;
		  /* 821A7AF0h */ case   12:  		/* li R11, 1 */
		/* 821A7AF0h case   12:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A7AF0h case   12:*/		return 0x821A7AF4;
		  /* 821A7AF4h */ case   13:  		/* bc 4, CR6_GT, 8 */
		/* 821A7AF4h case   13:*/		if ( !regs.CR[6].gt ) { return 0x821A7AFC;  }
		/* 821A7AF4h case   13:*/		return 0x821A7AF8;
	}
	return 0x821A7AF8;
} // Block from 821A7AC0h-821A7AF8h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A7AF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7AF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7AF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7AF8);
		  /* 821A7AF8h */ case    0:  		/* li R11, 0 */
		/* 821A7AF8h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A7AF8h case    0:*/		return 0x821A7AFC;
	}
	return 0x821A7AFC;
} // Block from 821A7AF8h-821A7AFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A7AFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7AFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7AFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7AFC);
		  /* 821A7AFCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A7AFCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A7AFCh case    0:*/		return 0x821A7B00;
		  /* 821A7B00h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 821A7B00h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A7B24;  }
		/* 821A7B00h case    1:*/		return 0x821A7B04;
		  /* 821A7B04h */ case    2:  		/* mr R4, R23 */
		/* 821A7B04h case    2:*/		regs.R4 = regs.R23;
		/* 821A7B04h case    2:*/		return 0x821A7B08;
		  /* 821A7B08h */ case    3:  		/* bl 517560 */
		/* 821A7B08h case    3:*/		regs.LR = 0x821A7B0C; return 0x822260C0;
		/* 821A7B08h case    3:*/		return 0x821A7B0C;
		  /* 821A7B0Ch */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A7B0Ch case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A7B0Ch case    4:*/		return 0x821A7B10;
		  /* 821A7B10h */ case    5:  		/* bc 12, CR0_EQ, 20 */
		/* 821A7B10h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A7B24;  }
		/* 821A7B10h case    5:*/		return 0x821A7B14;
		  /* 821A7B14h */ case    6:  		/* mr R5, R29 */
		/* 821A7B14h case    6:*/		regs.R5 = regs.R29;
		/* 821A7B14h case    6:*/		return 0x821A7B18;
		  /* 821A7B18h */ case    7:  		/* lwz R3, <#[R30 + 16]> */
		/* 821A7B18h case    7:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R30 + 0x00000010) );
		/* 821A7B18h case    7:*/		return 0x821A7B1C;
		  /* 821A7B1Ch */ case    8:  		/* mr R4, R23 */
		/* 821A7B1Ch case    8:*/		regs.R4 = regs.R23;
		/* 821A7B1Ch case    8:*/		return 0x821A7B20;
		  /* 821A7B20h */ case    9:  		/* bl -194704 */
		/* 821A7B20h case    9:*/		regs.LR = 0x821A7B24; return 0x82178290;
		/* 821A7B20h case    9:*/		return 0x821A7B24;
	}
	return 0x821A7B24;
} // Block from 821A7AFCh-821A7B24h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A7B24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7B24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7B24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7B24);
		  /* 821A7B24h */ case    0:  		/* lwz R30, <#[R30 + 8]> */
		/* 821A7B24h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R30 + 0x00000008) );
		/* 821A7B24h case    0:*/		return 0x821A7B28;
		  /* 821A7B28h */ case    1:  		/* b -96 */
		/* 821A7B28h case    1:*/		return 0x821A7AC8;
		/* 821A7B28h case    1:*/		return 0x821A7B2C;
	}
	return 0x821A7B2C;
} // Block from 821A7B24h-821A7B2Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A7B2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7B2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7B2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7B2C);
		  /* 821A7B2Ch */ case    0:  		/* lwz R19, <#[R1 + 324]> */
		/* 821A7B2Ch case    0:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x00000144) );
		/* 821A7B2Ch case    0:*/		return 0x821A7B30;
		  /* 821A7B30h */ case    1:  		/* li R26, 0 */
		/* 821A7B30h case    1:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821A7B30h case    1:*/		return 0x821A7B34;
		  /* 821A7B34h */ case    2:  		/* lwz R17, <#[R1 + 316]> */
		/* 821A7B34h case    2:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x0000013C) );
		/* 821A7B34h case    2:*/		return 0x821A7B38;
		  /* 821A7B38h */ case    3:  		/* li R24, 0 */
		/* 821A7B38h case    3:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821A7B38h case    3:*/		return 0x821A7B3C;
		  /* 821A7B3Ch */ case    4:  		/* subfic R28, R19, -41 */
		/* 821A7B3Ch case    4:*/		cpu::op::subfic<0>(regs,&regs.R28,regs.R19,0xFFFFFFD7);
		/* 821A7B3Ch case    4:*/		return 0x821A7B40;
		  /* 821A7B40h */ case    5:  		/* lwz R18, <#[R1 + 308]> */
		/* 821A7B40h case    5:*/		cpu::mem::load32z( regs, &regs.R18, (uint32)(regs.R1 + 0x00000134) );
		/* 821A7B40h case    5:*/		return 0x821A7B44;
		  /* 821A7B44h */ case    6:  		/* subf R25, R19, R23 */
		/* 821A7B44h case    6:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R19,regs.R23);
		/* 821A7B44h case    6:*/		return 0x821A7B48;
		  /* 821A7B48h */ case    7:  		/* subfic R27, R19, -44 */
		/* 821A7B48h case    7:*/		cpu::op::subfic<0>(regs,&regs.R27,regs.R19,0xFFFFFFD4);
		/* 821A7B48h case    7:*/		return 0x821A7B4C;
		  /* 821A7B4Ch */ case    8:  		/* lwz R11, <#[R17 + 8]> */
		/* 821A7B4Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821A7B4Ch case    8:*/		return 0x821A7B50;
		  /* 821A7B50h */ case    9:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A7B50h case    9:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A7B50h case    9:*/		return 0x821A7B54;
		  /* 821A7B54h */ case   10:  		/* cmplw CR6, R24, R11 */
		/* 821A7B54h case   10:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R11);
		/* 821A7B54h case   10:*/		return 0x821A7B58;
		  /* 821A7B58h */ case   11:  		/* bc 4, CR6_LT, 288 */
		/* 821A7B58h case   11:*/		if ( !regs.CR[6].lt ) { return 0x821A7C78;  }
		/* 821A7B58h case   11:*/		return 0x821A7B5C;
		  /* 821A7B5Ch */ case   12:  		/* add R11, R31, R27 */
		/* 821A7B5Ch case   12:*/		cpu::op::add<0>(regs,&regs.R11,regs.R31,regs.R27);
		/* 821A7B5Ch case   12:*/		return 0x821A7B60;
		  /* 821A7B60h */ case   13:  		/* lwzx R30, <#[R31 + R22]> */
		/* 821A7B60h case   13:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + regs.R22 + 0x00000000) );
		/* 821A7B60h case   13:*/		return 0x821A7B64;
		  /* 821A7B64h */ case   14:  		/* add R10, R31, R28 */
		/* 821A7B64h case   14:*/		cpu::op::add<0>(regs,&regs.R10,regs.R31,regs.R28);
		/* 821A7B64h case   14:*/		return 0x821A7B68;
		  /* 821A7B68h */ case   15:  		/* lwz R29, <#[R31]> */
		/* 821A7B68h case   15:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000000) );
		/* 821A7B68h case   15:*/		return 0x821A7B6C;
		  /* 821A7B6Ch */ case   16:  		/* rlwinm R9, R11, 29, 3, 29 */
		/* 821A7B6Ch case   16:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R11);
		/* 821A7B6Ch case   16:*/		return 0x821A7B70;
		  /* 821A7B70h */ case   17:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821A7B70h case   17:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821A7B70h case   17:*/		return 0x821A7B74;
		  /* 821A7B74h */ case   18:  		/* addi R8, R1, 88 */
		/* 821A7B74h case   18:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x58);
		/* 821A7B74h case   18:*/		return 0x821A7B78;
		  /* 821A7B78h */ case   19:  		/* li R7, 2 */
		/* 821A7B78h case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x2);
		/* 821A7B78h case   19:*/		return 0x821A7B7C;
		  /* 821A7B7Ch */ case   20:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821A7B7Ch case   20:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821A7B7Ch case   20:*/		return 0x821A7B80;
		  /* 821A7B80h */ case   21:  		/* slw R10, R7, R10 */
		/* 821A7B80h case   21:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R7,regs.R10);
		/* 821A7B80h case   21:*/		return 0x821A7B84;
		  /* 821A7B84h */ case   22:  		/* lwzx R9, <#[R9 + R8]> */
		/* 821A7B84h case   22:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + regs.R8 + 0x00000000) );
		/* 821A7B84h case   22:*/		return 0x821A7B88;
		  /* 821A7B88h */ case   23:  		/* addi R10, R10, -1 */
		/* 821A7B88h case   23:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821A7B88h case   23:*/		return 0x821A7B8C;
		  /* 821A7B8Ch */ case   24:  		/* li R8, -1 */
		/* 821A7B8Ch case   24:*/		cpu::op::li<0>(regs,&regs.R8,0xFFFFFFFF);
		/* 821A7B8Ch case   24:*/		return 0x821A7B90;
		  /* 821A7B90h */ case   25:  		/* and R10, R10, R9 */
		/* 821A7B90h case   25:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821A7B90h case   25:*/		return 0x821A7B94;
		  /* 821A7B94h */ case   26:  		/* slw R9, R8, R11 */
		/* 821A7B94h case   26:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R8,regs.R11);
		/* 821A7B94h case   26:*/		return 0x821A7B98;
		  /* 821A7B98h */ case   27:  		/* and R10, R10, R9 */
		/* 821A7B98h case   27:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R9);
		/* 821A7B98h case   27:*/		return 0x821A7B9C;
		  /* 821A7B9Ch */ case   28:  		/* srw. R11, R10, R11 */
		/* 821A7B9Ch case   28:*/		cpu::op::srw<1>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A7B9Ch case   28:*/		return 0x821A7BA0;
		  /* 821A7BA0h */ case   29:  		/* bc 12, CR0_EQ, 20 */
		/* 821A7BA0h case   29:*/		if ( regs.CR[0].eq ) { return 0x821A7BB4;  }
		/* 821A7BA0h case   29:*/		return 0x821A7BA4;
		  /* 821A7BA4h */ case   30:  		/* addi R11, R11, 10 */
		/* 821A7BA4h case   30:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xA);
		/* 821A7BA4h case   30:*/		return 0x821A7BA8;
		  /* 821A7BA8h */ case   31:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A7BA8h case   31:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A7BA8h case   31:*/		return 0x821A7BAC;
		  /* 821A7BACh */ case   32:  		/* lwzx R30, <#[R11 + R23]> */
		/* 821A7BACh case   32:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R11 + regs.R23 + 0x00000000) );
		/* 821A7BACh case   32:*/		return 0x821A7BB0;
		  /* 821A7BB0h */ case   33:  		/* b 88 */
		/* 821A7BB0h case   33:*/		return 0x821A7C08;
		/* 821A7BB0h case   33:*/		return 0x821A7BB4;
	}
	return 0x821A7BB4;
} // Block from 821A7B2Ch-821A7BB4h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821A7BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7BB4);
		  /* 821A7BB4h */ case    0:  		/* li R10, 1 */
		/* 821A7BB4h case    0:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821A7BB4h case    0:*/		return 0x821A7BB8;
		  /* 821A7BB8h */ case    1:  		/* addi R9, R1, 96 */
		/* 821A7BB8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x60);
		/* 821A7BB8h case    1:*/		return 0x821A7BBC;
		  /* 821A7BBCh */ case    2:  		/* mr R8, R20 */
		/* 821A7BBCh case    2:*/		regs.R8 = regs.R20;
		/* 821A7BBCh case    2:*/		return 0x821A7BC0;
		  /* 821A7BC0h */ case    3:  		/* mr R7, R29 */
		/* 821A7BC0h case    3:*/		regs.R7 = regs.R29;
		/* 821A7BC0h case    3:*/		return 0x821A7BC4;
		  /* 821A7BC4h */ case    4:  		/* mr R6, R19 */
		/* 821A7BC4h case    4:*/		regs.R6 = regs.R19;
		/* 821A7BC4h case    4:*/		return 0x821A7BC8;
		  /* 821A7BC8h */ case    5:  		/* mr R5, R30 */
		/* 821A7BC8h case    5:*/		regs.R5 = regs.R30;
		/* 821A7BC8h case    5:*/		return 0x821A7BCC;
		  /* 821A7BCCh */ case    6:  		/* mr R4, R17 */
		/* 821A7BCCh case    6:*/		regs.R4 = regs.R17;
		/* 821A7BCCh case    6:*/		return 0x821A7BD0;
		  /* 821A7BD0h */ case    7:  		/* mr R3, R18 */
		/* 821A7BD0h case    7:*/		regs.R3 = regs.R18;
		/* 821A7BD0h case    7:*/		return 0x821A7BD4;
		  /* 821A7BD4h */ case    8:  		/* bl -32060 */
		/* 821A7BD4h case    8:*/		regs.LR = 0x821A7BD8; return 0x8219FE98;
		/* 821A7BD4h case    8:*/		return 0x821A7BD8;
		  /* 821A7BD8h */ case    9:  		/* cmpwi CR0, R3, 0 */
		/* 821A7BD8h case    9:*/		cpu::op::cmpwi<0>(regs,regs.R3,0x00000000);
		/* 821A7BD8h case    9:*/		return 0x821A7BDC;
		  /* 821A7BDCh */ case   10:  		/* mr R3, R18 */
		/* 821A7BDCh case   10:*/		regs.R3 = regs.R18;
		/* 821A7BDCh case   10:*/		return 0x821A7BE0;
		  /* 821A7BE0h */ case   11:  		/* bc 4, CR0_EQ, 144 */
		/* 821A7BE0h case   11:*/		if ( !regs.CR[0].eq ) { return 0x821A7C70;  }
		/* 821A7BE0h case   11:*/		return 0x821A7BE4;
		  /* 821A7BE4h */ case   12:  		/* addi R10, R1, 96 */
		/* 821A7BE4h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x60);
		/* 821A7BE4h case   12:*/		return 0x821A7BE8;
		  /* 821A7BE8h */ case   13:  		/* lwz R8, <#[R23 + 28]> */
		/* 821A7BE8h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x0000001C) );
		/* 821A7BE8h case   13:*/		return 0x821A7BEC;
		  /* 821A7BECh */ case   14:  		/* mr R9, R23 */
		/* 821A7BECh case   14:*/		regs.R9 = regs.R23;
		/* 821A7BECh case   14:*/		return 0x821A7BF0;
		  /* 821A7BF0h */ case   15:  		/* mr R7, R29 */
		/* 821A7BF0h case   15:*/		regs.R7 = regs.R29;
		/* 821A7BF0h case   15:*/		return 0x821A7BF4;
		  /* 821A7BF4h */ case   16:  		/* mr R6, R19 */
		/* 821A7BF4h case   16:*/		regs.R6 = regs.R19;
		/* 821A7BF4h case   16:*/		return 0x821A7BF8;
		  /* 821A7BF8h */ case   17:  		/* mr R5, R30 */
		/* 821A7BF8h case   17:*/		regs.R5 = regs.R30;
		/* 821A7BF8h case   17:*/		return 0x821A7BFC;
		  /* 821A7BFCh */ case   18:  		/* mr R4, R17 */
		/* 821A7BFCh case   18:*/		regs.R4 = regs.R17;
		/* 821A7BFCh case   18:*/		return 0x821A7C00;
		  /* 821A7C00h */ case   19:  		/* bl -20744 */
		/* 821A7C00h case   19:*/		regs.LR = 0x821A7C04; return 0x821A2AF8;
		/* 821A7C00h case   19:*/		return 0x821A7C04;
		  /* 821A7C04h */ case   20:  		/* mr R30, R3 */
		/* 821A7C04h case   20:*/		regs.R30 = regs.R3;
		/* 821A7C04h case   20:*/		return 0x821A7C08;
	}
	return 0x821A7C08;
} // Block from 821A7BB4h-821A7C08h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821A7C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7C08);
		  /* 821A7C08h */ case    0:  		/* mr R4, R30 */
		/* 821A7C08h case    0:*/		regs.R4 = regs.R30;
		/* 821A7C08h case    0:*/		return 0x821A7C0C;
		  /* 821A7C0Ch */ case    1:  		/* mr R3, R23 */
		/* 821A7C0Ch case    1:*/		regs.R3 = regs.R23;
		/* 821A7C0Ch case    1:*/		return 0x821A7C10;
		  /* 821A7C10h */ case    2:  		/* bl -195144 */
		/* 821A7C10h case    2:*/		regs.LR = 0x821A7C14; return 0x821781C8;
		/* 821A7C10h case    2:*/		return 0x821A7C14;
		  /* 821A7C14h */ case    3:  		/* stwx R3, <#[R31 + R25]> */
		/* 821A7C14h case    3:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R31 + regs.R25 + 0x00000000) );
		/* 821A7C14h case    3:*/		return 0x821A7C18;
		  /* 821A7C18h */ case    4:  		/* lwz R4, <#[R30 + 12]> */
		/* 821A7C18h case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R30 + 0x0000000C) );
		/* 821A7C18h case    4:*/		return 0x821A7C1C;
		  /* 821A7C1Ch */ case    5:  		/* lwz R11, <#[R4 + 8]> */
		/* 821A7C1Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A7C1Ch case    5:*/		return 0x821A7C20;
		  /* 821A7C20h */ case    6:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A7C20h case    6:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A7C20h case    6:*/		return 0x821A7C24;
		  /* 821A7C24h */ case    7:  		/* cmplwi CR6, R11, 125 */
		/* 821A7C24h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821A7C24h case    7:*/		return 0x821A7C28;
		  /* 821A7C28h */ case    8:  		/* bc 12, CR6_EQ, 16 */
		/* 821A7C28h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A7C38;  }
		/* 821A7C28h case    8:*/		return 0x821A7C2C;
		  /* 821A7C2Ch */ case    9:  		/* cmplwi CR6, R11, 124 */
		/* 821A7C2Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821A7C2Ch case    9:*/		return 0x821A7C30;
		  /* 821A7C30h */ case   10:  		/* li R11, 0 */
		/* 821A7C30h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A7C30h case   10:*/		return 0x821A7C34;
		  /* 821A7C34h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821A7C34h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821A7C3C;  }
		/* 821A7C34h case   11:*/		return 0x821A7C38;
	}
	return 0x821A7C38;
} // Block from 821A7C08h-821A7C38h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A7C38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7C38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7C38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7C38);
		  /* 821A7C38h */ case    0:  		/* li R11, 1 */
		/* 821A7C38h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A7C38h case    0:*/		return 0x821A7C3C;
	}
	return 0x821A7C3C;
} // Block from 821A7C38h-821A7C3Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A7C3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7C3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7C3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7C3C);
		  /* 821A7C3Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A7C3Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A7C3Ch case    0:*/		return 0x821A7C40;
		  /* 821A7C40h */ case    1:  		/* bc 12, CR0_EQ, 36 */
		/* 821A7C40h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A7C64;  }
		/* 821A7C40h case    1:*/		return 0x821A7C44;
		  /* 821A7C44h */ case    2:  		/* lwz R11, <#[R30]> */
		/* 821A7C44h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A7C44h case    2:*/		return 0x821A7C48;
		  /* 821A7C48h */ case    3:  		/* addi R8, R1, 112 */
		/* 821A7C48h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x70);
		/* 821A7C48h case    3:*/		return 0x821A7C4C;
		  /* 821A7C4Ch */ case    4:  		/* mr R3, R18 */
		/* 821A7C4Ch case    4:*/		regs.R3 = regs.R18;
		/* 821A7C4Ch case    4:*/		return 0x821A7C50;
		  /* 821A7C50h */ case    5:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821A7C50h case    5:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821A7C50h case    5:*/		return 0x821A7C54;
		  /* 821A7C54h */ case    6:  		/* rlwinm R6, R11, 27, 24, 31 */
		/* 821A7C54h case    6:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R11);
		/* 821A7C54h case    6:*/		return 0x821A7C58;
		  /* 821A7C58h */ case    7:  		/* rlwinm R5, R11, 7, 29, 31 */
		/* 821A7C58h case    7:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R5,regs.R11);
		/* 821A7C58h case    7:*/		return 0x821A7C5C;
		  /* 821A7C5Ch */ case    8:  		/* bl -51676 */
		/* 821A7C5Ch case    8:*/		regs.LR = 0x821A7C60; return 0x8219B280;
		/* 821A7C5Ch case    8:*/		return 0x821A7C60;
		  /* 821A7C60h */ case    9:  		/* or R26, R3, R26 */
		/* 821A7C60h case    9:*/		cpu::op::or<0>(regs,&regs.R26,regs.R3,regs.R26);
		/* 821A7C60h case    9:*/		return 0x821A7C64;
	}
	return 0x821A7C64;
} // Block from 821A7C3Ch-821A7C64h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A7C64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7C64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7C64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7C64);
		  /* 821A7C64h */ case    0:  		/* addi R24, R24, 1 */
		/* 821A7C64h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821A7C64h case    0:*/		return 0x821A7C68;
		  /* 821A7C68h */ case    1:  		/* addi R31, R31, 4 */
		/* 821A7C68h case    1:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x4);
		/* 821A7C68h case    1:*/		return 0x821A7C6C;
		  /* 821A7C6Ch */ case    2:  		/* b -288 */
		/* 821A7C6Ch case    2:*/		return 0x821A7B4C;
		/* 821A7C6Ch case    2:*/		return 0x821A7C70;
	}
	return 0x821A7C70;
} // Block from 821A7C64h-821A7C70h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A7C70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7C70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7C70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7C70);
		  /* 821A7C70h */ case    0:  		/* li R4, 4800 */
		/* 821A7C70h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821A7C70h case    0:*/		return 0x821A7C74;
		  /* 821A7C74h */ case    1:  		/* bl -351756 */
		/* 821A7C74h case    1:*/		regs.LR = 0x821A7C78; return 0x82151E68;
		/* 821A7C74h case    1:*/		return 0x821A7C78;
	}
	return 0x821A7C78;
} // Block from 821A7C70h-821A7C78h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A7C78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7C78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7C78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7C78);
		  /* 821A7C78h */ case    0:  		/* mr R5, R26 */
		/* 821A7C78h case    0:*/		regs.R5 = regs.R26;
		/* 821A7C78h case    0:*/		return 0x821A7C7C;
		  /* 821A7C7Ch */ case    1:  		/* mr R4, R23 */
		/* 821A7C7Ch case    1:*/		regs.R4 = regs.R23;
		/* 821A7C7Ch case    1:*/		return 0x821A7C80;
		  /* 821A7C80h */ case    2:  		/* mr R3, R18 */
		/* 821A7C80h case    2:*/		regs.R3 = regs.R18;
		/* 821A7C80h case    2:*/		return 0x821A7C84;
		  /* 821A7C84h */ case    3:  		/* bl -43236 */
		/* 821A7C84h case    3:*/		regs.LR = 0x821A7C88; return 0x8219D3A0;
		/* 821A7C84h case    3:*/		return 0x821A7C88;
		  /* 821A7C88h */ case    4:  		/* mr R30, R23 */
		/* 821A7C88h case    4:*/		regs.R30 = regs.R23;
		/* 821A7C88h case    4:*/		return 0x821A7C8C;
		  /* 821A7C8Ch */ case    5:  		/* lwz R31, <#[R30]> */
		/* 821A7C8Ch case    5:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821A7C8Ch case    5:*/		return 0x821A7C90;
		  /* 821A7C90h */ case    6:  		/* cmplwi CR6, R31, 0 */
		/* 821A7C90h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A7C90h case    6:*/		return 0x821A7C94;
		  /* 821A7C94h */ case    7:  		/* bc 12, CR6_EQ, 52 */
		/* 821A7C94h case    7:*/		if ( regs.CR[6].eq ) { return 0x821A7CC8;  }
		/* 821A7C94h case    7:*/		return 0x821A7C98;
		  /* 821A7C98h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821A7C98h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A7C98h case    8:*/		return 0x821A7C9C;
		  /* 821A7C9Ch */ case    9:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821A7C9Ch case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821A7C9Ch case    9:*/		return 0x821A7CA0;
		  /* 821A7CA0h */ case   10:  		/* bc 4, CR0_EQ, 20 */
		/* 821A7CA0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821A7CB4;  }
		/* 821A7CA0h case   10:*/		return 0x821A7CA4;
		  /* 821A7CA4h */ case   11:  		/* mr R5, R18 */
		/* 821A7CA4h case   11:*/		regs.R5 = regs.R18;
		/* 821A7CA4h case   11:*/		return 0x821A7CA8;
		  /* 821A7CA8h */ case   12:  		/* mr R4, R31 */
		/* 821A7CA8h case   12:*/		regs.R4 = regs.R31;
		/* 821A7CA8h case   12:*/		return 0x821A7CAC;
		  /* 821A7CACh */ case   13:  		/* mr R3, R23 */
		/* 821A7CACh case   13:*/		regs.R3 = regs.R23;
		/* 821A7CACh case   13:*/		return 0x821A7CB0;
		  /* 821A7CB0h */ case   14:  		/* bl -193440 */
		/* 821A7CB0h case   14:*/		regs.LR = 0x821A7CB4; return 0x82178910;
		/* 821A7CB0h case   14:*/		return 0x821A7CB4;
	}
	return 0x821A7CB4;
} // Block from 821A7C78h-821A7CB4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A7CB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7CB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7CB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7CB4);
		  /* 821A7CB4h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821A7CB4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A7CB4h case    0:*/		return 0x821A7CB8;
		  /* 821A7CB8h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A7CB8h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A7CB8h case    1:*/		return 0x821A7CBC;
		  /* 821A7CBCh */ case    2:  		/* bc 4, CR6_EQ, -48 */
		/* 821A7CBCh case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A7C8C;  }
		/* 821A7CBCh case    2:*/		return 0x821A7CC0;
		  /* 821A7CC0h */ case    3:  		/* addi R30, R31, 4 */
		/* 821A7CC0h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x4);
		/* 821A7CC0h case    3:*/		return 0x821A7CC4;
		  /* 821A7CC4h */ case    4:  		/* b -56 */
		/* 821A7CC4h case    4:*/		return 0x821A7C8C;
		/* 821A7CC4h case    4:*/		return 0x821A7CC8;
	}
	return 0x821A7CC8;
} // Block from 821A7CB4h-821A7CC8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A7CC8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7CC8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7CC8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7CC8);
		  /* 821A7CC8h */ case    0:  		/* addi R24, R23, 4 */
		/* 821A7CC8h case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R23,0x4);
		/* 821A7CC8h case    0:*/		return 0x821A7CCC;
		  /* 821A7CCCh */ case    1:  		/* mr R30, R24 */
		/* 821A7CCCh case    1:*/		regs.R30 = regs.R24;
		/* 821A7CCCh case    1:*/		return 0x821A7CD0;
		  /* 821A7CD0h */ case    2:  		/* lwz R31, <#[R30]> */
		/* 821A7CD0h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821A7CD0h case    2:*/		return 0x821A7CD4;
		  /* 821A7CD4h */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821A7CD4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A7CD4h case    3:*/		return 0x821A7CD8;
		  /* 821A7CD8h */ case    4:  		/* bc 12, CR6_EQ, 60 */
		/* 821A7CD8h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A7D14;  }
		/* 821A7CD8h case    4:*/		return 0x821A7CDC;
		  /* 821A7CDCh */ case    5:  		/* lwz R3, <#[R31 + 16]> */
		/* 821A7CDCh case    5:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000010) );
		/* 821A7CDCh case    5:*/		return 0x821A7CE0;
		  /* 821A7CE0h */ case    6:  		/* cmplwi CR6, R3, 0 */
		/* 821A7CE0h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000000);
		/* 821A7CE0h case    6:*/		return 0x821A7CE4;
		  /* 821A7CE4h */ case    7:  		/* bc 12, CR6_EQ, 28 */
		/* 821A7CE4h case    7:*/		if ( regs.CR[6].eq ) { return 0x821A7D00;  }
		/* 821A7CE4h case    7:*/		return 0x821A7CE8;
		  /* 821A7CE8h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821A7CE8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A7CE8h case    8:*/		return 0x821A7CEC;
		  /* 821A7CECh */ case    9:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821A7CECh case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821A7CECh case    9:*/		return 0x821A7CF0;
		  /* 821A7CF0h */ case   10:  		/* bc 4, CR0_EQ, 16 */
		/* 821A7CF0h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821A7D00;  }
		/* 821A7CF0h case   10:*/		return 0x821A7CF4;
		  /* 821A7CF4h */ case   11:  		/* mr R5, R18 */
		/* 821A7CF4h case   11:*/		regs.R5 = regs.R18;
		/* 821A7CF4h case   11:*/		return 0x821A7CF8;
		  /* 821A7CF8h */ case   12:  		/* mr R4, R31 */
		/* 821A7CF8h case   12:*/		regs.R4 = regs.R31;
		/* 821A7CF8h case   12:*/		return 0x821A7CFC;
		  /* 821A7CFCh */ case   13:  		/* bl -193516 */
		/* 821A7CFCh case   13:*/		regs.LR = 0x821A7D00; return 0x82178910;
		/* 821A7CFCh case   13:*/		return 0x821A7D00;
	}
	return 0x821A7D00;
} // Block from 821A7CC8h-821A7D00h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A7D00h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7D00( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7D00) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7D00);
		  /* 821A7D00h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821A7D00h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A7D00h case    0:*/		return 0x821A7D04;
		  /* 821A7D04h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A7D04h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A7D04h case    1:*/		return 0x821A7D08;
		  /* 821A7D08h */ case    2:  		/* bc 4, CR6_EQ, -56 */
		/* 821A7D08h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A7CD0;  }
		/* 821A7D08h case    2:*/		return 0x821A7D0C;
		  /* 821A7D0Ch */ case    3:  		/* addi R30, R31, 8 */
		/* 821A7D0Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 821A7D0Ch case    3:*/		return 0x821A7D10;
		  /* 821A7D10h */ case    4:  		/* b -64 */
		/* 821A7D10h case    4:*/		return 0x821A7CD0;
		/* 821A7D10h case    4:*/		return 0x821A7D14;
	}
	return 0x821A7D14;
} // Block from 821A7D00h-821A7D14h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A7D14h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7D14( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7D14) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7D14);
		  /* 821A7D14h */ case    0:  		/* mr R8, R20 */
		/* 821A7D14h case    0:*/		regs.R8 = regs.R20;
		/* 821A7D14h case    0:*/		return 0x821A7D18;
		  /* 821A7D18h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821A7D18h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A7D18h case    1:*/		return 0x821A7D1C;
		  /* 821A7D1Ch */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A7D1Ch case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A7D1Ch case    2:*/		return 0x821A7D20;
		  /* 821A7D20h */ case    3:  		/* bc 12, CR6_EQ, 88 */
		/* 821A7D20h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A7D78;  }
		/* 821A7D20h case    3:*/		return 0x821A7D24;
		  /* 821A7D24h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821A7D24h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7D24h case    4:*/		return 0x821A7D28;
		  /* 821A7D28h */ case    5:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821A7D28h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821A7D28h case    5:*/		return 0x821A7D2C;
		  /* 821A7D2Ch */ case    6:  		/* bc 4, CR0_EQ, 56 */
		/* 821A7D2Ch case    6:*/		if ( !regs.CR[0].eq ) { return 0x821A7D64;  }
		/* 821A7D2Ch case    6:*/		return 0x821A7D30;
		  /* 821A7D30h */ case    7:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A7D30h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A7D30h case    7:*/		return 0x821A7D34;
		  /* 821A7D34h */ case    8:  		/* lwz R9, <#[R10]> */
		/* 821A7D34h case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A7D34h case    8:*/		return 0x821A7D38;
		  /* 821A7D38h */ case    9:  		/* b 12 */
		/* 821A7D38h case    9:*/		return 0x821A7D44;
		/* 821A7D38h case    9:*/		return 0x821A7D3C;
		  /* 821A7D3Ch */ case   10:  		/* addi R10, R9, 4 */
		/* 821A7D3Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821A7D3Ch case   10:*/		return 0x821A7D40;
		  /* 821A7D40h */ case   11:  		/* lwz R9, <#[R9 + 4]> */
		/* 821A7D40h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821A7D40h case   11:*/		return 0x821A7D44;
	}
	return 0x821A7D44;
} // Block from 821A7D14h-821A7D44h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A7D44h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7D44( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7D44) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7D44);
		  /* 821A7D44h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A7D44h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A7D44h case    0:*/		return 0x821A7D48;
		  /* 821A7D48h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A7D48h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A7D3C;  }
		/* 821A7D48h case    1:*/		return 0x821A7D4C;
		  /* 821A7D4Ch */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821A7D4Ch case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821A7D4Ch case    2:*/		return 0x821A7D50;
		  /* 821A7D50h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A7D50h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A7D50h case    3:*/		return 0x821A7D54;
		  /* 821A7D54h */ case    4:  		/* lwz R10, <#[R23]> */
		/* 821A7D54h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000000) );
		/* 821A7D54h case    4:*/		return 0x821A7D58;
		  /* 821A7D58h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821A7D58h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A7D58h case    5:*/		return 0x821A7D5C;
		  /* 821A7D5Ch */ case    6:  		/* stw R11, <#[R23]> */
		/* 821A7D5Ch case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821A7D5Ch case    6:*/		return 0x821A7D60;
		  /* 821A7D60h */ case    7:  		/* stw R23, <#[R11 + 16]> */
		/* 821A7D60h case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000010) );
		/* 821A7D60h case    7:*/		return 0x821A7D64;
	}
	return 0x821A7D64;
} // Block from 821A7D44h-821A7D64h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A7D64h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7D64( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7D64) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7D64);
		  /* 821A7D64h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A7D64h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A7D64h case    0:*/		return 0x821A7D68;
		  /* 821A7D68h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A7D68h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A7D68h case    1:*/		return 0x821A7D6C;
		  /* 821A7D6Ch */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821A7D6Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A7D18;  }
		/* 821A7D6Ch case    2:*/		return 0x821A7D70;
		  /* 821A7D70h */ case    3:  		/* addi R8, R11, 4 */
		/* 821A7D70h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821A7D70h case    3:*/		return 0x821A7D74;
		  /* 821A7D74h */ case    4:  		/* b -92 */
		/* 821A7D74h case    4:*/		return 0x821A7D18;
		/* 821A7D74h case    4:*/		return 0x821A7D78;
	}
	return 0x821A7D78;
} // Block from 821A7D64h-821A7D78h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A7D78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7D78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7D78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7D78);
		  /* 821A7D78h */ case    0:  		/* addi R8, R17, 4 */
		/* 821A7D78h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R17,0x4);
		/* 821A7D78h case    0:*/		return 0x821A7D7C;
		  /* 821A7D7Ch */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821A7D7Ch case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A7D7Ch case    1:*/		return 0x821A7D80;
		  /* 821A7D80h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A7D80h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A7D80h case    2:*/		return 0x821A7D84;
		  /* 821A7D84h */ case    3:  		/* bc 12, CR6_EQ, 92 */
		/* 821A7D84h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A7DE0;  }
		/* 821A7D84h case    3:*/		return 0x821A7D88;
		  /* 821A7D88h */ case    4:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A7D88h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A7D88h case    4:*/		return 0x821A7D8C;
		  /* 821A7D8Ch */ case    5:  		/* cmplwi CR6, R10, 0 */
		/* 821A7D8Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A7D8Ch case    5:*/		return 0x821A7D90;
		  /* 821A7D90h */ case    6:  		/* bc 12, CR6_EQ, 60 */
		/* 821A7D90h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A7DCC;  }
		/* 821A7D90h case    6:*/		return 0x821A7D94;
		  /* 821A7D94h */ case    7:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A7D94h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A7D94h case    7:*/		return 0x821A7D98;
		  /* 821A7D98h */ case    8:  		/* addi R10, R10, 4 */
		/* 821A7D98h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A7D98h case    8:*/		return 0x821A7D9C;
		  /* 821A7D9Ch */ case    9:  		/* lwz R9, <#[R10]> */
		/* 821A7D9Ch case    9:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A7D9Ch case    9:*/		return 0x821A7DA0;
		  /* 821A7DA0h */ case   10:  		/* b 12 */
		/* 821A7DA0h case   10:*/		return 0x821A7DAC;
		/* 821A7DA0h case   10:*/		return 0x821A7DA4;
		  /* 821A7DA4h */ case   11:  		/* addi R10, R9, 8 */
		/* 821A7DA4h case   11:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A7DA4h case   11:*/		return 0x821A7DA8;
		  /* 821A7DA8h */ case   12:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A7DA8h case   12:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A7DA8h case   12:*/		return 0x821A7DAC;
	}
	return 0x821A7DAC;
} // Block from 821A7D78h-821A7DACh (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A7DACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7DAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7DAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7DAC);
		  /* 821A7DACh */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A7DACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A7DACh case    0:*/		return 0x821A7DB0;
		  /* 821A7DB0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A7DB0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A7DA4;  }
		/* 821A7DB0h case    1:*/		return 0x821A7DB4;
		  /* 821A7DB4h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A7DB4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7DB4h case    2:*/		return 0x821A7DB8;
		  /* 821A7DB8h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A7DB8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A7DB8h case    3:*/		return 0x821A7DBC;
		  /* 821A7DBCh */ case    4:  		/* lwz R10, <#[R24]> */
		/* 821A7DBCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000000) );
		/* 821A7DBCh case    4:*/		return 0x821A7DC0;
		  /* 821A7DC0h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A7DC0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7DC0h case    5:*/		return 0x821A7DC4;
		  /* 821A7DC4h */ case    6:  		/* stw R11, <#[R24]> */
		/* 821A7DC4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A7DC4h case    6:*/		return 0x821A7DC8;
		  /* 821A7DC8h */ case    7:  		/* stw R23, <#[R11 + 12]> */
		/* 821A7DC8h case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A7DC8h case    7:*/		return 0x821A7DCC;
	}
	return 0x821A7DCC;
} // Block from 821A7DACh-821A7DCCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A7DCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7DCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7DCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7DCC);
		  /* 821A7DCCh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A7DCCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A7DCCh case    0:*/		return 0x821A7DD0;
		  /* 821A7DD0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A7DD0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A7DD0h case    1:*/		return 0x821A7DD4;
		  /* 821A7DD4h */ case    2:  		/* bc 4, CR6_EQ, -88 */
		/* 821A7DD4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A7D7C;  }
		/* 821A7DD4h case    2:*/		return 0x821A7DD8;
		  /* 821A7DD8h */ case    3:  		/* addi R8, R11, 8 */
		/* 821A7DD8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821A7DD8h case    3:*/		return 0x821A7DDC;
		  /* 821A7DDCh */ case    4:  		/* b -96 */
		/* 821A7DDCh case    4:*/		return 0x821A7D7C;
		/* 821A7DDCh case    4:*/		return 0x821A7DE0;
	}
	return 0x821A7DE0;
} // Block from 821A7DCCh-821A7DE0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A7DE0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7DE0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7DE0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7DE0);
		  /* 821A7DE0h */ case    0:  		/* lwz R29, <#[R1 + 80]> */
		/* 821A7DE0h case    0:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R1 + 0x00000050) );
		/* 821A7DE0h case    0:*/		return 0x821A7DE4;
		  /* 821A7DE4h */ case    1:  		/* mr R30, R21 */
		/* 821A7DE4h case    1:*/		regs.R30 = regs.R21;
		/* 821A7DE4h case    1:*/		return 0x821A7DE8;
		  /* 821A7DE8h */ case    2:  		/* lwz R31, <#[R30]> */
		/* 821A7DE8h case    2:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821A7DE8h case    2:*/		return 0x821A7DEC;
		  /* 821A7DECh */ case    3:  		/* cmplwi CR6, R31, 0 */
		/* 821A7DECh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A7DECh case    3:*/		return 0x821A7DF0;
		  /* 821A7DF0h */ case    4:  		/* bc 12, CR6_EQ, 176 */
		/* 821A7DF0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A7EA0;  }
		/* 821A7DF0h case    4:*/		return 0x821A7DF4;
		  /* 821A7DF4h */ case    5:  		/* lwz R4, <#[R31 + 16]> */
		/* 821A7DF4h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821A7DF4h case    5:*/		return 0x821A7DF8;
		  /* 821A7DF8h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 821A7DF8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A7DF8h case    6:*/		return 0x821A7DFC;
		  /* 821A7DFCh */ case    7:  		/* bc 12, CR6_EQ, 144 */
		/* 821A7DFCh case    7:*/		if ( regs.CR[6].eq ) { return 0x821A7E8C;  }
		/* 821A7DFCh case    7:*/		return 0x821A7E00;
		  /* 821A7E00h */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821A7E00h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A7E00h case    8:*/		return 0x821A7E04;
		  /* 821A7E04h */ case    9:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821A7E04h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821A7E04h case    9:*/		return 0x821A7E08;
		  /* 821A7E08h */ case   10:  		/* bc 12, CR0_EQ, 76 */
		/* 821A7E08h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A7E54;  }
		/* 821A7E08h case   10:*/		return 0x821A7E0C;
		  /* 821A7E0Ch */ case   11:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821A7E0Ch case   11:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821A7E0Ch case   11:*/		return 0x821A7E10;
		  /* 821A7E10h */ case   12:  		/* rlwinm R9, R11, 24, 29, 30 */
		/* 821A7E10h case   12:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R9,regs.R11);
		/* 821A7E10h case   12:*/		return 0x821A7E14;
		  /* 821A7E14h */ case   13:  		/* srw R10, R29, R10 */
		/* 821A7E14h case   13:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 821A7E14h case   13:*/		return 0x821A7E18;
		  /* 821A7E18h */ case   14:  		/* srw R9, R29, R9 */
		/* 821A7E18h case   14:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R29,regs.R9);
		/* 821A7E18h case   14:*/		return 0x821A7E1C;
		  /* 821A7E1Ch */ case   15:  		/* rlwimi R9, R10, 2, 28, 29 */
		/* 821A7E1Ch case   15:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R9,regs.R10);
		/* 821A7E1Ch case   15:*/		return 0x821A7E20;
		  /* 821A7E20h */ case   16:  		/* rlwinm R8, R11, 26, 29, 30 */
		/* 821A7E20h case   16:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R8,regs.R11);
		/* 821A7E20h case   16:*/		return 0x821A7E24;
		  /* 821A7E24h */ case   17:  		/* rlwinm R10, R11, 28, 29, 30 */
		/* 821A7E24h case   17:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R10,regs.R11);
		/* 821A7E24h case   17:*/		return 0x821A7E28;
		  /* 821A7E28h */ case   18:  		/* rlwinm R9, R9, 0, 28, 31 */
		/* 821A7E28h case   18:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R9,regs.R9);
		/* 821A7E28h case   18:*/		return 0x821A7E2C;
		  /* 821A7E2Ch */ case   19:  		/* srw R8, R29, R8 */
		/* 821A7E2Ch case   19:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R29,regs.R8);
		/* 821A7E2Ch case   19:*/		return 0x821A7E30;
		  /* 821A7E30h */ case   20:  		/* srw R10, R29, R10 */
		/* 821A7E30h case   20:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 821A7E30h case   20:*/		return 0x821A7E34;
		  /* 821A7E34h */ case   21:  		/* rlwimi R8, R9, 2, 0, 29 */
		/* 821A7E34h case   21:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R9);
		/* 821A7E34h case   21:*/		return 0x821A7E38;
		  /* 821A7E38h */ case   22:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821A7E38h case   22:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821A7E38h case   22:*/		return 0x821A7E3C;
		  /* 821A7E3Ch */ case   23:  		/* rlwimi R10, R8, 2, 0, 29 */
		/* 821A7E3Ch case   23:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R10,regs.R8);
		/* 821A7E3Ch case   23:*/		return 0x821A7E40;
		  /* 821A7E40h */ case   24:  		/* mr R3, R18 */
		/* 821A7E40h case   24:*/		regs.R3 = regs.R18;
		/* 821A7E40h case   24:*/		return 0x821A7E44;
		  /* 821A7E44h */ case   25:  		/* rlwinm R10, R10, 5, 0, 26 */
		/* 821A7E44h case   25:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R10,regs.R10);
		/* 821A7E44h case   25:*/		return 0x821A7E48;
		  /* 821A7E48h */ case   26:  		/* or R11, R10, R11 */
		/* 821A7E48h case   26:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A7E48h case   26:*/		return 0x821A7E4C;
		  /* 821A7E4Ch */ case   27:  		/* stw R11, <#[R31]> */
		/* 821A7E4Ch case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A7E4Ch case   27:*/		return 0x821A7E50;
		  /* 821A7E50h */ case   28:  		/* bl -29592 */
		/* 821A7E50h case   28:*/		regs.LR = 0x821A7E54; return 0x821A0AB8;
		/* 821A7E50h case   28:*/		return 0x821A7E54;
	}
	return 0x821A7E54;
} // Block from 821A7DE0h-821A7E54h (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A7E54h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7E54( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7E54) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7E54);
		  /* 821A7E54h */ case    0:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A7E54h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A7E54h case    0:*/		return 0x821A7E58;
		  /* 821A7E58h */ case    1:  		/* addi R11, R11, 4 */
		/* 821A7E58h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A7E58h case    1:*/		return 0x821A7E5C;
		  /* 821A7E5Ch */ case    2:  		/* lwz R10, <#[R11]> */
		/* 821A7E5Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7E5Ch case    2:*/		return 0x821A7E60;
		  /* 821A7E60h */ case    3:  		/* b 12 */
		/* 821A7E60h case    3:*/		return 0x821A7E6C;
		/* 821A7E60h case    3:*/		return 0x821A7E64;
		  /* 821A7E64h */ case    4:  		/* addi R11, R10, 8 */
		/* 821A7E64h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A7E64h case    4:*/		return 0x821A7E68;
		  /* 821A7E68h */ case    5:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A7E68h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A7E68h case    5:*/		return 0x821A7E6C;
	}
	return 0x821A7E6C;
} // Block from 821A7E54h-821A7E6Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A7E6Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7E6C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7E6C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7E6C);
		  /* 821A7E6Ch */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A7E6Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A7E6Ch case    0:*/		return 0x821A7E70;
		  /* 821A7E70h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A7E70h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A7E64;  }
		/* 821A7E70h case    1:*/		return 0x821A7E74;
		  /* 821A7E74h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A7E74h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A7E74h case    2:*/		return 0x821A7E78;
		  /* 821A7E78h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A7E78h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7E78h case    3:*/		return 0x821A7E7C;
		  /* 821A7E7Ch */ case    4:  		/* lwz R11, <#[R24]> */
		/* 821A7E7Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A7E7Ch case    4:*/		return 0x821A7E80;
		  /* 821A7E80h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821A7E80h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A7E80h case    5:*/		return 0x821A7E84;
		  /* 821A7E84h */ case    6:  		/* stw R31, <#[R24]> */
		/* 821A7E84h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 821A7E84h case    6:*/		return 0x821A7E88;
		  /* 821A7E88h */ case    7:  		/* stw R23, <#[R31 + 12]> */
		/* 821A7E88h case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A7E88h case    7:*/		return 0x821A7E8C;
	}
	return 0x821A7E8C;
} // Block from 821A7E6Ch-821A7E8Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A7E8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7E8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7E8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7E8C);
		  /* 821A7E8Ch */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821A7E8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821A7E8Ch case    0:*/		return 0x821A7E90;
		  /* 821A7E90h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A7E90h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A7E90h case    1:*/		return 0x821A7E94;
		  /* 821A7E94h */ case    2:  		/* bc 4, CR6_EQ, -172 */
		/* 821A7E94h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A7DE8;  }
		/* 821A7E94h case    2:*/		return 0x821A7E98;
		  /* 821A7E98h */ case    3:  		/* addi R30, R31, 8 */
		/* 821A7E98h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x8);
		/* 821A7E98h case    3:*/		return 0x821A7E9C;
		  /* 821A7E9Ch */ case    4:  		/* b -180 */
		/* 821A7E9Ch case    4:*/		return 0x821A7DE8;
		/* 821A7E9Ch case    4:*/		return 0x821A7EA0;
	}
	return 0x821A7EA0;
} // Block from 821A7E8Ch-821A7EA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A7EA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7EA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7EA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7EA0);
		  /* 821A7EA0h */ case    0:  		/* mr R3, R23 */
		/* 821A7EA0h case    0:*/		regs.R3 = regs.R23;
		/* 821A7EA0h case    0:*/		return 0x821A7EA4;
		  /* 821A7EA4h */ case    1:  		/* bl -195372 */
		/* 821A7EA4h case    1:*/		regs.LR = 0x821A7EA8; return 0x82178378;
		/* 821A7EA4h case    1:*/		return 0x821A7EA8;
		  /* 821A7EA8h */ case    2:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A7EA8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A7EA8h case    2:*/		return 0x821A7EAC;
		  /* 821A7EACh */ case    3:  		/* oris R11, R11, 256 */
		/* 821A7EACh case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A7EACh case    3:*/		return 0x821A7EB0;
		  /* 821A7EB0h */ case    4:  		/* stw R11, <#[R23 + 8]> */
		/* 821A7EB0h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A7EB0h case    4:*/		return 0x821A7EB4;
		  /* 821A7EB4h */ case    5:  		/* lwz R11, <#[R17 + 8]> */
		/* 821A7EB4h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821A7EB4h case    5:*/		return 0x821A7EB8;
		  /* 821A7EB8h */ case    6:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A7EB8h case    6:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A7EB8h case    6:*/		return 0x821A7EBC;
		  /* 821A7EBCh */ case    7:  		/* bc 12, CR0_EQ, 196 */
		/* 821A7EBCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821A7F80;  }
		/* 821A7EBCh case    7:*/		return 0x821A7EC0;
		  /* 821A7EC0h */ case    8:  		/* mr R4, R17 */
		/* 821A7EC0h case    8:*/		regs.R4 = regs.R17;
		/* 821A7EC0h case    8:*/		return 0x821A7EC4;
		  /* 821A7EC4h */ case    9:  		/* mr R3, R18 */
		/* 821A7EC4h case    9:*/		regs.R3 = regs.R18;
		/* 821A7EC4h case    9:*/		return 0x821A7EC8;
		  /* 821A7EC8h */ case   10:  		/* bl -147184 */
		/* 821A7EC8h case   10:*/		regs.LR = 0x821A7ECC; return 0x82183FD8;
		/* 821A7EC8h case   10:*/		return 0x821A7ECC;
		  /* 821A7ECCh */ case   11:  		/* mr R31, R3 */
		/* 821A7ECCh case   11:*/		regs.R31 = regs.R3;
		/* 821A7ECCh case   11:*/		return 0x821A7ED0;
		  /* 821A7ED0h */ case   12:  		/* mr R4, R19 */
		/* 821A7ED0h case   12:*/		regs.R4 = regs.R19;
		/* 821A7ED0h case   12:*/		return 0x821A7ED4;
		  /* 821A7ED4h */ case   13:  		/* mr R3, R18 */
		/* 821A7ED4h case   13:*/		regs.R3 = regs.R18;
		/* 821A7ED4h case   13:*/		return 0x821A7ED8;
		  /* 821A7ED8h */ case   14:  		/* bl -147200 */
		/* 821A7ED8h case   14:*/		regs.LR = 0x821A7EDC; return 0x82183FD8;
		/* 821A7ED8h case   14:*/		return 0x821A7EDC;
		  /* 821A7EDCh */ case   15:  		/* mr R5, R3 */
		/* 821A7EDCh case   15:*/		regs.R5 = regs.R3;
		/* 821A7EDCh case   15:*/		return 0x821A7EE0;
		  /* 821A7EE0h */ case   16:  		/* cmplw CR6, R31, R3 */
		/* 821A7EE0h case   16:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R3);
		/* 821A7EE0h case   16:*/		return 0x821A7EE4;
		  /* 821A7EE4h */ case   17:  		/* bc 12, CR6_EQ, 44 */
		/* 821A7EE4h case   17:*/		if ( regs.CR[6].eq ) { return 0x821A7F10;  }
		/* 821A7EE4h case   17:*/		return 0x821A7EE8;
		  /* 821A7EE8h */ case   18:  		/* addi R11, R1, 88 */
		/* 821A7EE8h case   18:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x58);
		/* 821A7EE8h case   18:*/		return 0x821A7EEC;
		  /* 821A7EECh */ case   19:  		/* li R7, 0 */
		/* 821A7EECh case   19:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A7EECh case   19:*/		return 0x821A7EF0;
		  /* 821A7EF0h */ case   20:  		/* li R10, 0 */
		/* 821A7EF0h case   20:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A7EF0h case   20:*/		return 0x821A7EF4;
		  /* 821A7EF4h */ case   21:  		/* li R9, 0 */
		/* 821A7EF4h case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A7EF4h case   21:*/		return 0x821A7EF8;
		  /* 821A7EF8h */ case   22:  		/* li R8, 0 */
		/* 821A7EF8h case   22:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A7EF8h case   22:*/		return 0x821A7EFC;
		  /* 821A7EFCh */ case   23:  		/* stw R7, <#[R11]> */
		/* 821A7EFCh case   23:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A7EFCh case   23:*/		return 0x821A7F00;
		  /* 821A7F00h */ case   24:  		/* mr R4, R31 */
		/* 821A7F00h case   24:*/		regs.R4 = regs.R31;
		/* 821A7F00h case   24:*/		return 0x821A7F04;
		  /* 821A7F04h */ case   25:  		/* mr R3, R18 */
		/* 821A7F04h case   25:*/		regs.R3 = regs.R18;
		/* 821A7F04h case   25:*/		return 0x821A7F08;
		  /* 821A7F08h */ case   26:  		/* lwz R6, <#[R1 + 88]> */
		/* 821A7F08h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 821A7F08h case   26:*/		return 0x821A7F0C;
		  /* 821A7F0Ch */ case   27:  		/* bl -136852 */
		/* 821A7F0Ch case   27:*/		regs.LR = 0x821A7F10; return 0x82186878;
		/* 821A7F0Ch case   27:*/		return 0x821A7F10;
	}
	return 0x821A7F10;
} // Block from 821A7EA0h-821A7F10h (28 instructions)

//////////////////////////////////////////////////////
// Block at 821A7F10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7F10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7F10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7F10);
		  /* 821A7F10h */ case    0:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A7F10h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A7F10h case    0:*/		return 0x821A7F14;
		  /* 821A7F14h */ case    1:  		/* mr R3, R17 */
		/* 821A7F14h case    1:*/		regs.R3 = regs.R17;
		/* 821A7F14h case    1:*/		return 0x821A7F18;
		  /* 821A7F18h */ case    2:  		/* oris R11, R11, 128 */
		/* 821A7F18h case    2:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A7F18h case    2:*/		return 0x821A7F1C;
		  /* 821A7F1Ch */ case    3:  		/* stw R11, <#[R23 + 8]> */
		/* 821A7F1Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A7F1Ch case    3:*/		return 0x821A7F20;
		  /* 821A7F20h */ case    4:  		/* bl -149048 */
		/* 821A7F20h case    4:*/		regs.LR = 0x821A7F24; return 0x821838E8;
		/* 821A7F20h case    4:*/		return 0x821A7F24;
		  /* 821A7F24h */ case    5:  		/* sth R3, <#[R23 + 18]> */
		/* 821A7F24h case    5:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R23 + 0x00000012) );
		/* 821A7F24h case    5:*/		return 0x821A7F28;
		  /* 821A7F28h */ case    6:  		/* lwz R3, <#[R18 + 660]> */
		/* 821A7F28h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R18 + 0x00000294) );
		/* 821A7F28h case    6:*/		return 0x821A7F2C;
		  /* 821A7F2Ch */ case    7:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A7F2Ch case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A7F2Ch case    7:*/		return 0x821A7F30;
		  /* 821A7F30h */ case    8:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A7F30h case    8:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A7F30h case    8:*/		return 0x821A7F34;
		  /* 821A7F34h */ case    9:  		/* bc 4, CR0_EQ, 40 */
		/* 821A7F34h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821A7F5C;  }
		/* 821A7F34h case    9:*/		return 0x821A7F38;
		  /* 821A7F38h */ case   10:  		/* lwz R11, <#[R3]> */
		/* 821A7F38h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A7F38h case   10:*/		return 0x821A7F3C;
		  /* 821A7F3Ch */ case   11:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A7F3Ch case   11:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A7F3Ch case   11:*/		return 0x821A7F40;
		  /* 821A7F40h */ case   12:  		/* addic. R11, R11, -4 */
		/* 821A7F40h case   12:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A7F40h case   12:*/		return 0x821A7F44;
		  /* 821A7F44h */ case   13:  		/* bc 12, CR0_EQ, 24 */
		/* 821A7F44h case   13:*/		if ( regs.CR[0].eq ) { return 0x821A7F5C;  }
		/* 821A7F44h case   13:*/		return 0x821A7F48;
		  /* 821A7F48h */ case   14:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A7F48h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7F48h case   14:*/		return 0x821A7F4C;
		  /* 821A7F4Ch */ case   15:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A7F4Ch case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A7F4Ch case   15:*/		return 0x821A7F50;
		  /* 821A7F50h */ case   16:  		/* addi R10, R10, 1 */
		/* 821A7F50h case   16:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A7F50h case   16:*/		return 0x821A7F54;
		  /* 821A7F54h */ case   17:  		/* cmplw CR6, R10, R9 */
		/* 821A7F54h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A7F54h case   17:*/		return 0x821A7F58;
		  /* 821A7F58h */ case   18:  		/* bc 4, CR6_GT, 16 */
		/* 821A7F58h case   18:*/		if ( !regs.CR[6].gt ) { return 0x821A7F68;  }
		/* 821A7F58h case   18:*/		return 0x821A7F5C;
	}
	return 0x821A7F5C;
} // Block from 821A7F10h-821A7F5Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A7F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7F5C);
		  /* 821A7F5Ch */ case    0:  		/* li R4, 1 */
		/* 821A7F5Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A7F5Ch case    0:*/		return 0x821A7F60;
		  /* 821A7F60h */ case    1:  		/* bl -110232 */
		/* 821A7F60h case    1:*/		regs.LR = 0x821A7F64; return 0x8218D0C8;
		/* 821A7F60h case    1:*/		return 0x821A7F64;
		  /* 821A7F64h */ case    2:  		/* mr R11, R3 */
		/* 821A7F64h case    2:*/		regs.R11 = regs.R3;
		/* 821A7F64h case    2:*/		return 0x821A7F68;
	}
	return 0x821A7F68;
} // Block from 821A7F5Ch-821A7F68h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A7F68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7F68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7F68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7F68);
		  /* 821A7F68h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A7F68h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7F68h case    0:*/		return 0x821A7F6C;
		  /* 821A7F6Ch */ case    1:  		/* addi R9, R10, 4 */
		/* 821A7F6Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A7F6Ch case    1:*/		return 0x821A7F70;
		  /* 821A7F70h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A7F70h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A7F70h case    2:*/		return 0x821A7F74;
		  /* 821A7F74h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A7F74h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A7F74h case    3:*/		return 0x821A7F78;
		  /* 821A7F78h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A7F78h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7F78h case    4:*/		return 0x821A7F7C;
		  /* 821A7F7Ch */ case    5:  		/* stwx R23, <#[R10 + R11]> */
		/* 821A7F7Ch case    5:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A7F7Ch case    5:*/		return 0x821A7F80;
	}
	return 0x821A7F80;
} // Block from 821A7F68h-821A7F80h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A7F80h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7F80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7F80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7F80);
		  /* 821A7F80h */ case    0:  		/* mr R5, R23 */
		/* 821A7F80h case    0:*/		regs.R5 = regs.R23;
		/* 821A7F80h case    0:*/		return 0x821A7F84;
		  /* 821A7F84h */ case    1:  		/* mr R4, R17 */
		/* 821A7F84h case    1:*/		regs.R4 = regs.R17;
		/* 821A7F84h case    1:*/		return 0x821A7F88;
		  /* 821A7F88h */ case    2:  		/* mr R3, R18 */
		/* 821A7F88h case    2:*/		regs.R3 = regs.R18;
		/* 821A7F88h case    2:*/		return 0x821A7F8C;
		  /* 821A7F8Ch */ case    3:  		/* bl -50268 */
		/* 821A7F8Ch case    3:*/		regs.LR = 0x821A7F90; return 0x8219BB30;
		/* 821A7F8Ch case    3:*/		return 0x821A7F90;
		  /* 821A7F90h */ case    4:  		/* mr R4, R19 */
		/* 821A7F90h case    4:*/		regs.R4 = regs.R19;
		/* 821A7F90h case    4:*/		return 0x821A7F94;
		  /* 821A7F94h */ case    5:  		/* mr R3, R18 */
		/* 821A7F94h case    5:*/		regs.R3 = regs.R18;
		/* 821A7F94h case    5:*/		return 0x821A7F98;
		  /* 821A7F98h */ case    6:  		/* bl -50280 */
		/* 821A7F98h case    6:*/		regs.LR = 0x821A7F9C; return 0x8219BB30;
		/* 821A7F98h case    6:*/		return 0x821A7F9C;
		  /* 821A7F9Ch */ case    7:  		/* mr R4, R23 */
		/* 821A7F9Ch case    7:*/		regs.R4 = regs.R23;
		/* 821A7F9Ch case    7:*/		return 0x821A7FA0;
		  /* 821A7FA0h */ case    8:  		/* mr R3, R18 */
		/* 821A7FA0h case    8:*/		regs.R3 = regs.R18;
		/* 821A7FA0h case    8:*/		return 0x821A7FA4;
		  /* 821A7FA4h */ case    9:  		/* bl -29932 */
		/* 821A7FA4h case    9:*/		regs.LR = 0x821A7FA8; return 0x821A0AB8;
		/* 821A7FA4h case    9:*/		return 0x821A7FA8;
		  /* 821A7FA8h */ case   10:  		/* lwz R11, <#[R1 + 332]> */
		/* 821A7FA8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000014C) );
		/* 821A7FA8h case   10:*/		return 0x821A7FAC;
		  /* 821A7FACh */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821A7FACh case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A7FACh case   11:*/		return 0x821A7FB0;
		  /* 821A7FB0h */ case   12:  		/* bc 12, CR6_EQ, 28 */
		/* 821A7FB0h case   12:*/		if ( regs.CR[6].eq ) { return 0x821A7FCC;  }
		/* 821A7FB0h case   12:*/		return 0x821A7FB4;
		  /* 821A7FB4h */ case   13:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A7FB4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A7FB4h case   13:*/		return 0x821A7FB8;
		  /* 821A7FB8h */ case   14:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821A7FB8h case   14:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821A7FB8h case   14:*/		return 0x821A7FBC;
		  /* 821A7FBCh */ case   15:  		/* bc 12, CR0_EQ, 16 */
		/* 821A7FBCh case   15:*/		if ( regs.CR[0].eq ) { return 0x821A7FCC;  }
		/* 821A7FBCh case   15:*/		return 0x821A7FC0;
		  /* 821A7FC0h */ case   16:  		/* mr R4, R19 */
		/* 821A7FC0h case   16:*/		regs.R4 = regs.R19;
		/* 821A7FC0h case   16:*/		return 0x821A7FC4;
		  /* 821A7FC4h */ case   17:  		/* mr R3, R18 */
		/* 821A7FC4h case   17:*/		regs.R3 = regs.R18;
		/* 821A7FC4h case   17:*/		return 0x821A7FC8;
		  /* 821A7FC8h */ case   18:  		/* bl -29816 */
		/* 821A7FC8h case   18:*/		regs.LR = 0x821A7FCC; return 0x821A0B50;
		/* 821A7FC8h case   18:*/		return 0x821A7FCC;
	}
	return 0x821A7FCC;
} // Block from 821A7F80h-821A7FCCh (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A7FCCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A7FCC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A7FCC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A7FCC);
		  /* 821A7FCCh */ case    0:  		/* mr R4, R17 */
		/* 821A7FCCh case    0:*/		regs.R4 = regs.R17;
		/* 821A7FCCh case    0:*/		return 0x821A7FD0;
		  /* 821A7FD0h */ case    1:  		/* mr R3, R18 */
		/* 821A7FD0h case    1:*/		regs.R3 = regs.R18;
		/* 821A7FD0h case    1:*/		return 0x821A7FD4;
		  /* 821A7FD4h */ case    2:  		/* bl 538236 */
		/* 821A7FD4h case    2:*/		regs.LR = 0x821A7FD8; return 0x8222B650;
		/* 821A7FD4h case    2:*/		return 0x821A7FD8;
		  /* 821A7FD8h */ case    3:  		/* mr R4, R19 */
		/* 821A7FD8h case    3:*/		regs.R4 = regs.R19;
		/* 821A7FD8h case    3:*/		return 0x821A7FDC;
		  /* 821A7FDCh */ case    4:  		/* mr R3, R18 */
		/* 821A7FDCh case    4:*/		regs.R3 = regs.R18;
		/* 821A7FDCh case    4:*/		return 0x821A7FE0;
		  /* 821A7FE0h */ case    5:  		/* bl 538224 */
		/* 821A7FE0h case    5:*/		regs.LR = 0x821A7FE4; return 0x8222B650;
		/* 821A7FE0h case    5:*/		return 0x821A7FE4;
		  /* 821A7FE4h */ case    6:  		/* mr R25, R24 */
		/* 821A7FE4h case    6:*/		regs.R25 = regs.R24;
		/* 821A7FE4h case    6:*/		return 0x821A7FE8;
		  /* 821A7FE8h */ case    7:  		/* lwz R26, <#[R25]> */
		/* 821A7FE8h case    7:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R25 + 0x00000000) );
		/* 821A7FE8h case    7:*/		return 0x821A7FEC;
		  /* 821A7FECh */ case    8:  		/* cmplwi CR6, R26, 0 */
		/* 821A7FECh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821A7FECh case    8:*/		return 0x821A7FF0;
		  /* 821A7FF0h */ case    9:  		/* bc 12, CR6_EQ, 392 */
		/* 821A7FF0h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A8178;  }
		/* 821A7FF0h case    9:*/		return 0x821A7FF4;
		  /* 821A7FF4h */ case   10:  		/* lwz R27, <#[R26 + 16]> */
		/* 821A7FF4h case   10:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R26 + 0x00000010) );
		/* 821A7FF4h case   10:*/		return 0x821A7FF8;
		  /* 821A7FF8h */ case   11:  		/* cmplwi CR6, R27, 0 */
		/* 821A7FF8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R27,0x00000000);
		/* 821A7FF8h case   11:*/		return 0x821A7FFC;
		  /* 821A7FFCh */ case   12:  		/* bc 12, CR6_EQ, 360 */
		/* 821A7FFCh case   12:*/		if ( regs.CR[6].eq ) { return 0x821A8164;  }
		/* 821A7FFCh case   12:*/		return 0x821A8000;
		  /* 821A8000h */ case   13:  		/* lwz R11, <#[R27 + 8]> */
		/* 821A8000h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821A8000h case   13:*/		return 0x821A8004;
		  /* 821A8004h */ case   14:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821A8004h case   14:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821A8004h case   14:*/		return 0x821A8008;
		  /* 821A8008h */ case   15:  		/* cmplwi CR6, R10, 14080 */
		/* 821A8008h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821A8008h case   15:*/		return 0x821A800C;
		  /* 821A800Ch */ case   16:  		/* bc 4, CR6_EQ, 344 */
		/* 821A800Ch case   16:*/		if ( !regs.CR[6].eq ) { return 0x821A8164;  }
		/* 821A800Ch case   16:*/		return 0x821A8010;
		  /* 821A8010h */ case   17:  		/* addi R7, R27, 44 */
		/* 821A8010h case   17:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R27,0x2C);
		/* 821A8010h case   17:*/		return 0x821A8014;
		  /* 821A8014h */ case   18:  		/* rlwinm R6, R11, 13, 29, 31 */
		/* 821A8014h case   18:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R6,regs.R11);
		/* 821A8014h case   18:*/		return 0x821A8018;
		  /* 821A8018h */ case   19:  		/* li R30, 0 */
		/* 821A8018h case   19:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A8018h case   19:*/		return 0x821A801C;
		  /* 821A801Ch */ case   20:  		/* li R9, 0 */
		/* 821A801Ch case   20:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A801Ch case   20:*/		return 0x821A8020;
		  /* 821A8020h */ case   21:  		/* li R11, 0 */
		/* 821A8020h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A8020h case   21:*/		return 0x821A8024;
		  /* 821A8024h */ case   22:  		/* mr R10, R7 */
		/* 821A8024h case   22:*/		regs.R10 = regs.R7;
		/* 821A8024h case   22:*/		return 0x821A8028;
		  /* 821A8028h */ case   23:  		/* cmplw CR6, R9, R6 */
		/* 821A8028h case   23:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R6);
		/* 821A8028h case   23:*/		return 0x821A802C;
		  /* 821A802Ch */ case   24:  		/* bc 4, CR6_LT, 64 */
		/* 821A802Ch case   24:*/		if ( !regs.CR[6].lt ) { return 0x821A806C;  }
		/* 821A802Ch case   24:*/		return 0x821A8030;
		  /* 821A8030h */ case   25:  		/* lwz R8, <#[R10]> */
		/* 821A8030h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821A8030h case   25:*/		return 0x821A8034;
		  /* 821A8034h */ case   26:  		/* lwz R5, <#[R8 + 12]> */
		/* 821A8034h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x0000000C) );
		/* 821A8034h case   26:*/		return 0x821A8038;
		  /* 821A8038h */ case   27:  		/* cmplw CR6, R5, R23 */
		/* 821A8038h case   27:*/		cpu::op::cmplw<6>(regs,regs.R5,regs.R23);
		/* 821A8038h case   27:*/		return 0x821A803C;
		  /* 821A803Ch */ case   28:  		/* bc 4, CR6_EQ, 296 */
		/* 821A803Ch case   28:*/		if ( !regs.CR[6].eq ) { return 0x821A8164;  }
		/* 821A803Ch case   28:*/		return 0x821A8040;
		  /* 821A8040h */ case   29:  		/* lwz R8, <#[R8]> */
		/* 821A8040h case   29:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + 0x00000000) );
		/* 821A8040h case   29:*/		return 0x821A8044;
		  /* 821A8044h */ case   30:  		/* li R5, 3 */
		/* 821A8044h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x3);
		/* 821A8044h case   30:*/		return 0x821A8048;
		  /* 821A8048h */ case   31:  		/* addi R9, R9, 1 */
		/* 821A8048h case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821A8048h case   31:*/		return 0x821A804C;
		  /* 821A804Ch */ case   32:  		/* slw R5, R5, R11 */
		/* 821A804Ch case   32:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R5,regs.R11);
		/* 821A804Ch case   32:*/		return 0x821A8050;
		  /* 821A8050h */ case   33:  		/* rlwinm R8, R8, 27, 30, 31 */
		/* 821A8050h case   33:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R8,regs.R8);
		/* 821A8050h case   33:*/		return 0x821A8054;
		  /* 821A8054h */ case   34:  		/* andc R5, R30, R5 */
		/* 821A8054h case   34:*/		cpu::op::andc<0>(regs,&regs.R5,regs.R30,regs.R5);
		/* 821A8054h case   34:*/		return 0x821A8058;
		  /* 821A8058h */ case   35:  		/* slw R8, R8, R11 */
		/* 821A8058h case   35:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 821A8058h case   35:*/		return 0x821A805C;
		  /* 821A805Ch */ case   36:  		/* or R30, R8, R5 */
		/* 821A805Ch case   36:*/		cpu::op::or<0>(regs,&regs.R30,regs.R8,regs.R5);
		/* 821A805Ch case   36:*/		return 0x821A8060;
		  /* 821A8060h */ case   37:  		/* addi R10, R10, 4 */
		/* 821A8060h case   37:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A8060h case   37:*/		return 0x821A8064;
		  /* 821A8064h */ case   38:  		/* addi R11, R11, 2 */
		/* 821A8064h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A8064h case   38:*/		return 0x821A8068;
		  /* 821A8068h */ case   39:  		/* b -64 */
		/* 821A8068h case   39:*/		return 0x821A8028;
		/* 821A8068h case   39:*/		return 0x821A806C;
	}
	return 0x821A806C;
} // Block from 821A7FCCh-821A806Ch (40 instructions)

//////////////////////////////////////////////////////
// Block at 821A806Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A806C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A806C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A806C);
		  /* 821A806Ch */ case    0:  		/* lwz R11, <#[R7]> */
		/* 821A806Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821A806Ch case    0:*/		return 0x821A8070;
		  /* 821A8070h */ case    1:  		/* addi R28, R27, 4 */
		/* 821A8070h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R27,0x4);
		/* 821A8070h case    1:*/		return 0x821A8074;
		  /* 821A8074h */ case    2:  		/* lwz R11, <#[R11]> */
		/* 821A8074h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8074h case    2:*/		return 0x821A8078;
		  /* 821A8078h */ case    3:  		/* rlwinm R29, R11, 0, 31, 31 */
		/* 821A8078h case    3:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R29,regs.R11);
		/* 821A8078h case    3:*/		return 0x821A807C;
		  /* 821A807Ch */ case    4:  		/* lwz R31, <#[R28]> */
		/* 821A807Ch case    4:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000000) );
		/* 821A807Ch case    4:*/		return 0x821A8080;
		  /* 821A8080h */ case    5:  		/* cmplwi CR6, R31, 0 */
		/* 821A8080h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A8080h case    5:*/		return 0x821A8084;
		  /* 821A8084h */ case    6:  		/* bc 12, CR6_EQ, 204 */
		/* 821A8084h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A8150;  }
		/* 821A8084h case    6:*/		return 0x821A8088;
		  /* 821A8088h */ case    7:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A8088h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A8088h case    7:*/		return 0x821A808C;
		  /* 821A808Ch */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821A808Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A808Ch case    8:*/		return 0x821A8090;
		  /* 821A8090h */ case    9:  		/* bc 12, CR6_EQ, 172 */
		/* 821A8090h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A813C;  }
		/* 821A8090h case    9:*/		return 0x821A8094;
		  /* 821A8094h */ case   10:  		/* lwz R11, <#[R31 + 12]> */
		/* 821A8094h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A8094h case   10:*/		return 0x821A8098;
		  /* 821A8098h */ case   11:  		/* addi R11, R11, 4 */
		/* 821A8098h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A8098h case   11:*/		return 0x821A809C;
		  /* 821A809Ch */ case   12:  		/* lwz R10, <#[R11]> */
		/* 821A809Ch case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A809Ch case   12:*/		return 0x821A80A0;
		  /* 821A80A0h */ case   13:  		/* b 12 */
		/* 821A80A0h case   13:*/		return 0x821A80AC;
		/* 821A80A0h case   13:*/		return 0x821A80A4;
		  /* 821A80A4h */ case   14:  		/* addi R11, R10, 8 */
		/* 821A80A4h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821A80A4h case   14:*/		return 0x821A80A8;
		  /* 821A80A8h */ case   15:  		/* lwz R10, <#[R10 + 8]> */
		/* 821A80A8h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821A80A8h case   15:*/		return 0x821A80AC;
	}
	return 0x821A80AC;
} // Block from 821A806Ch-821A80ACh (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A80ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A80AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A80AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A80AC);
		  /* 821A80ACh */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821A80ACh case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821A80ACh case    0:*/		return 0x821A80B0;
		  /* 821A80B0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A80B0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A80A4;  }
		/* 821A80B0h case    1:*/		return 0x821A80B4;
		  /* 821A80B4h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A80B4h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A80B4h case    2:*/		return 0x821A80B8;
		  /* 821A80B8h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821A80B8h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A80B8h case    3:*/		return 0x821A80BC;
		  /* 821A80BCh */ case    4:  		/* lwz R11, <#[R24]> */
		/* 821A80BCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821A80BCh case    4:*/		return 0x821A80C0;
		  /* 821A80C0h */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821A80C0h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A80C0h case    5:*/		return 0x821A80C4;
		  /* 821A80C4h */ case    6:  		/* stw R31, <#[R24]> */
		/* 821A80C4h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R24 + 0x00000000) );
		/* 821A80C4h case    6:*/		return 0x821A80C8;
		  /* 821A80C8h */ case    7:  		/* stw R23, <#[R31 + 12]> */
		/* 821A80C8h case    7:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A80C8h case    7:*/		return 0x821A80CC;
		  /* 821A80CCh */ case    8:  		/* lwz R11, <#[R31]> */
		/* 821A80CCh case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A80CCh case    8:*/		return 0x821A80D0;
		  /* 821A80D0h */ case    9:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821A80D0h case    9:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821A80D0h case    9:*/		return 0x821A80D4;
		  /* 821A80D4h */ case   10:  		/* bc 12, CR0_EQ, 92 */
		/* 821A80D4h case   10:*/		if ( regs.CR[0].eq ) { return 0x821A8130;  }
		/* 821A80D4h case   10:*/		return 0x821A80D8;
		  /* 821A80D8h */ case   11:  		/* rlwinm R10, R11, 22, 29, 30 */
		/* 821A80D8h case   11:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R10,regs.R11);
		/* 821A80D8h case   11:*/		return 0x821A80DC;
		  /* 821A80DCh */ case   12:  		/* rlwinm R8, R11, 24, 29, 30 */
		/* 821A80DCh case   12:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R8,regs.R11);
		/* 821A80DCh case   12:*/		return 0x821A80E0;
		  /* 821A80E0h */ case   13:  		/* srw R10, R30, R10 */
		/* 821A80E0h case   13:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R30,regs.R10);
		/* 821A80E0h case   13:*/		return 0x821A80E4;
		  /* 821A80E4h */ case   14:  		/* srw R8, R30, R8 */
		/* 821A80E4h case   14:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R30,regs.R8);
		/* 821A80E4h case   14:*/		return 0x821A80E8;
		  /* 821A80E8h */ case   15:  		/* rlwimi R8, R10, 2, 28, 29 */
		/* 821A80E8h case   15:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R10);
		/* 821A80E8h case   15:*/		return 0x821A80EC;
		  /* 821A80ECh */ case   16:  		/* rlwinm R7, R11, 26, 29, 30 */
		/* 821A80ECh case   16:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R7,regs.R11);
		/* 821A80ECh case   16:*/		return 0x821A80F0;
		  /* 821A80F0h */ case   17:  		/* rlwinm R9, R11, 0, 0, 31 */
		/* 821A80F0h case   17:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R9,regs.R11);
		/* 821A80F0h case   17:*/		return 0x821A80F4;
		  /* 821A80F4h */ case   18:  		/* rlwinm R10, R8, 0, 28, 31 */
		/* 821A80F4h case   18:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R10,regs.R8);
		/* 821A80F4h case   18:*/		return 0x821A80F8;
		  /* 821A80F8h */ case   19:  		/* rlwinm R11, R11, 28, 29, 30 */
		/* 821A80F8h case   19:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R11,regs.R11);
		/* 821A80F8h case   19:*/		return 0x821A80FC;
		  /* 821A80FCh */ case   20:  		/* srw R8, R30, R7 */
		/* 821A80FCh case   20:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R30,regs.R7);
		/* 821A80FCh case   20:*/		return 0x821A8100;
		  /* 821A8100h */ case   21:  		/* srw R11, R30, R11 */
		/* 821A8100h case   21:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 821A8100h case   21:*/		return 0x821A8104;
		  /* 821A8104h */ case   22:  		/* rlwimi R8, R10, 2, 0, 29 */
		/* 821A8104h case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 821A8104h case   22:*/		return 0x821A8108;
		  /* 821A8108h */ case   23:  		/* rlwinm R10, R9, 0, 27, 18 */
		/* 821A8108h case   23:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R9);
		/* 821A8108h case   23:*/		return 0x821A810C;
		  /* 821A810Ch */ case   24:  		/* rlwimi R11, R8, 2, 0, 29 */
		/* 821A810Ch case   24:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R8);
		/* 821A810Ch case   24:*/		return 0x821A8110;
		  /* 821A8110h */ case   25:  		/* cmplwi CR6, R29, 0 */
		/* 821A8110h case   25:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A8110h case   25:*/		return 0x821A8114;
		  /* 821A8114h */ case   26:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821A8114h case   26:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821A8114h case   26:*/		return 0x821A8118;
		  /* 821A8118h */ case   27:  		/* or R11, R11, R10 */
		/* 821A8118h case   27:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A8118h case   27:*/		return 0x821A811C;
		  /* 821A811Ch */ case   28:  		/* stw R11, <#[R31]> */
		/* 821A811Ch case   28:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A811Ch case   28:*/		return 0x821A8120;
		  /* 821A8120h */ case   29:  		/* bc 12, CR6_EQ, 16 */
		/* 821A8120h case   29:*/		if ( regs.CR[6].eq ) { return 0x821A8130;  }
		/* 821A8120h case   29:*/		return 0x821A8124;
		  /* 821A8124h */ case   30:  		/* rlwinm R10, R29, 0, 27, 31 */
		/* 821A8124h case   30:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R29);
		/* 821A8124h case   30:*/		return 0x821A8128;
		  /* 821A8128h */ case   31:  		/* or R11, R10, R11 */
		/* 821A8128h case   31:*/		cpu::op::or<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A8128h case   31:*/		return 0x821A812C;
		  /* 821A812Ch */ case   32:  		/* stw R11, <#[R31]> */
		/* 821A812Ch case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A812Ch case   32:*/		return 0x821A8130;
	}
	return 0x821A8130;
} // Block from 821A80ACh-821A8130h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821A8130h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8130( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8130) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8130);
		  /* 821A8130h */ case    0:  		/* mr R3, R18 */
		/* 821A8130h case    0:*/		regs.R3 = regs.R18;
		/* 821A8130h case    0:*/		return 0x821A8134;
		  /* 821A8134h */ case    1:  		/* lwz R4, <#[R31 + 16]> */
		/* 821A8134h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821A8134h case    1:*/		return 0x821A8138;
		  /* 821A8138h */ case    2:  		/* bl -30336 */
		/* 821A8138h case    2:*/		regs.LR = 0x821A813C; return 0x821A0AB8;
		/* 821A8138h case    2:*/		return 0x821A813C;
	}
	return 0x821A813C;
} // Block from 821A8130h-821A813Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A813Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A813C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A813C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A813C);
		  /* 821A813Ch */ case    0:  		/* lwz R11, <#[R28]> */
		/* 821A813Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A813Ch case    0:*/		return 0x821A8140;
		  /* 821A8140h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821A8140h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A8140h case    1:*/		return 0x821A8144;
		  /* 821A8144h */ case    2:  		/* bc 4, CR6_EQ, -200 */
		/* 821A8144h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A807C;  }
		/* 821A8144h case    2:*/		return 0x821A8148;
		  /* 821A8148h */ case    3:  		/* addi R28, R31, 8 */
		/* 821A8148h case    3:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R31,0x8);
		/* 821A8148h case    3:*/		return 0x821A814C;
		  /* 821A814Ch */ case    4:  		/* b -208 */
		/* 821A814Ch case    4:*/		return 0x821A807C;
		/* 821A814Ch case    4:*/		return 0x821A8150;
	}
	return 0x821A8150;
} // Block from 821A813Ch-821A8150h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A8150h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8150( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8150) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8150);
		  /* 821A8150h */ case    0:  		/* li R6, 1 */
		/* 821A8150h case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A8150h case    0:*/		return 0x821A8154;
		  /* 821A8154h */ case    1:  		/* lwz R5, <#[R18 + 652]> */
		/* 821A8154h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R18 + 0x0000028C) );
		/* 821A8154h case    1:*/		return 0x821A8158;
		  /* 821A8158h */ case    2:  		/* mr R4, R27 */
		/* 821A8158h case    2:*/		regs.R4 = regs.R27;
		/* 821A8158h case    2:*/		return 0x821A815C;
		  /* 821A815Ch */ case    3:  		/* mr R3, R18 */
		/* 821A815Ch case    3:*/		regs.R3 = regs.R18;
		/* 821A815Ch case    3:*/		return 0x821A8160;
		  /* 821A8160h */ case    4:  		/* bl 537192 */
		/* 821A8160h case    4:*/		regs.LR = 0x821A8164; return 0x8222B3C8;
		/* 821A8160h case    4:*/		return 0x821A8164;
	}
	return 0x821A8164;
} // Block from 821A8150h-821A8164h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A8164h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8164( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8164) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8164);
		  /* 821A8164h */ case    0:  		/* lwz R11, <#[R25]> */
		/* 821A8164h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A8164h case    0:*/		return 0x821A8168;
		  /* 821A8168h */ case    1:  		/* cmplw CR6, R11, R26 */
		/* 821A8168h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R26);
		/* 821A8168h case    1:*/		return 0x821A816C;
		  /* 821A816Ch */ case    2:  		/* bc 4, CR6_EQ, -388 */
		/* 821A816Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A7FE8;  }
		/* 821A816Ch case    2:*/		return 0x821A8170;
		  /* 821A8170h */ case    3:  		/* addi R25, R26, 8 */
		/* 821A8170h case    3:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R26,0x8);
		/* 821A8170h case    3:*/		return 0x821A8174;
		  /* 821A8174h */ case    4:  		/* b -396 */
		/* 821A8174h case    4:*/		return 0x821A7FE8;
		/* 821A8174h case    4:*/		return 0x821A8178;
	}
	return 0x821A8178;
} // Block from 821A8164h-821A8178h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A8178h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8178( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8178) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8178);
		  /* 821A8178h */ case    0:  		/* mr R3, R23 */
		/* 821A8178h case    0:*/		regs.R3 = regs.R23;
		/* 821A8178h case    0:*/		return 0x821A817C;
	}
	return 0x821A817C;
} // Block from 821A8178h-821A817Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A817Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A817C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A817C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A817C);
		  /* 821A817Ch */ case    0:  		/* addi R1, R1, 288 */
		/* 821A817Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x120);
		/* 821A817Ch case    0:*/		return 0x821A8180;
		  /* 821A8180h */ case    1:  		/* b -1142544 */
		/* 821A8180h case    1:*/		return 0x82091270;
		/* 821A8180h case    1:*/		return 0x821A8184;
		  /* 821A8184h */ case    2:  		/* nop */
		/* 821A8184h case    2:*/		cpu::op::nop();
		/* 821A8184h case    2:*/		return 0x821A8188;
	}
	return 0x821A8188;
} // Block from 821A817Ch-821A8188h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A8188h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8188( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8188) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8188);
		  /* 821A8188h */ case    0:  		/* mfspr R12, LR */
		/* 821A8188h case    0:*/		regs.R12 = regs.LR;
		/* 821A8188h case    0:*/		return 0x821A818C;
		  /* 821A818Ch */ case    1:  		/* bl -1142592 */
		/* 821A818Ch case    1:*/		regs.LR = 0x821A8190; return 0x8209124C;
		/* 821A818Ch case    1:*/		return 0x821A8190;
		  /* 821A8190h */ case    2:  		/* stwu R1, <#[R1 - 144]> */
		/* 821A8190h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF70) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF70);
		/* 821A8190h case    2:*/		return 0x821A8194;
		  /* 821A8194h */ case    3:  		/* mr R28, R4 */
		/* 821A8194h case    3:*/		regs.R28 = regs.R4;
		/* 821A8194h case    3:*/		return 0x821A8198;
		  /* 821A8198h */ case    4:  		/* mr R4, R6 */
		/* 821A8198h case    4:*/		regs.R4 = regs.R6;
		/* 821A8198h case    4:*/		return 0x821A819C;
		  /* 821A819Ch */ case    5:  		/* mr R27, R3 */
		/* 821A819Ch case    5:*/		regs.R27 = regs.R3;
		/* 821A819Ch case    5:*/		return 0x821A81A0;
		  /* 821A81A0h */ case    6:  		/* mr R31, R5 */
		/* 821A81A0h case    6:*/		regs.R31 = regs.R5;
		/* 821A81A0h case    6:*/		return 0x821A81A4;
		  /* 821A81A4h */ case    7:  		/* bl 479772 */
		/* 821A81A4h case    7:*/		regs.LR = 0x821A81A8; return 0x8221D3C0;
		/* 821A81A4h case    7:*/		return 0x821A81A8;
		  /* 821A81A8h */ case    8:  		/* lwz R10, <#[R28 + 8]> */
		/* 821A81A8h case    8:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000008) );
		/* 821A81A8h case    8:*/		return 0x821A81AC;
		  /* 821A81ACh */ case    9:  		/* rlwinm R11, R10, 25, 25, 31 */
		/* 821A81ACh case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R10);
		/* 821A81ACh case    9:*/		return 0x821A81B0;
		  /* 821A81B0h */ case   10:  		/* cmplwi CR6, R11, 32 */
		/* 821A81B0h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 821A81B0h case   10:*/		return 0x821A81B4;
		  /* 821A81B4h */ case   11:  		/* bc 12, CR6_LT, 16 */
		/* 821A81B4h case   11:*/		if ( regs.CR[6].lt ) { return 0x821A81C4;  }
		/* 821A81B4h case   11:*/		return 0x821A81B8;
		  /* 821A81B8h */ case   12:  		/* cmplwi CR6, R11, 82 */
		/* 821A81B8h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 821A81B8h case   12:*/		return 0x821A81BC;
		  /* 821A81BCh */ case   13:  		/* li R11, 1 */
		/* 821A81BCh case   13:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A81BCh case   13:*/		return 0x821A81C0;
		  /* 821A81C0h */ case   14:  		/* bc 4, CR6_GT, 8 */
		/* 821A81C0h case   14:*/		if ( !regs.CR[6].gt ) { return 0x821A81C8;  }
		/* 821A81C0h case   14:*/		return 0x821A81C4;
	}
	return 0x821A81C4;
} // Block from 821A8188h-821A81C4h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A81C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A81C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A81C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A81C4);
		  /* 821A81C4h */ case    0:  		/* li R11, 0 */
		/* 821A81C4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A81C4h case    0:*/		return 0x821A81C8;
	}
	return 0x821A81C8;
} // Block from 821A81C4h-821A81C8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A81C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A81C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A81C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A81C8);
		  /* 821A81C8h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A81C8h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A81C8h case    0:*/		return 0x821A81CC;
		  /* 821A81CCh */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821A81CCh case    1:*/		if ( regs.CR[0].eq ) { return 0x821A81DC;  }
		/* 821A81CCh case    1:*/		return 0x821A81D0;
		  /* 821A81D0h */ case    2:  		/* rlwinm R11, R10, 0, 15, 17 */
		/* 821A81D0h case    2:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R10);
		/* 821A81D0h case    2:*/		return 0x821A81D4;
		  /* 821A81D4h */ case    3:  		/* cmplwi CR6, R11, 16384 */
		/* 821A81D4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 821A81D4h case    3:*/		return 0x821A81D8;
		  /* 821A81D8h */ case    4:  		/* bc 12, CR6_GT, 556 */
		/* 821A81D8h case    4:*/		if ( regs.CR[6].gt ) { return 0x821A8404;  }
		/* 821A81D8h case    4:*/		return 0x821A81DC;
	}
	return 0x821A81DC;
} // Block from 821A81C8h-821A81DCh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A81DCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A81DC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A81DC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A81DC);
		  /* 821A81DCh */ case    0:  		/* lwz R25, <#[R31 + 4]> */
		/* 821A81DCh case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R31 + 0x00000004) );
		/* 821A81DCh case    0:*/		return 0x821A81E0;
		  /* 821A81E0h */ case    1:  		/* cmplwi CR6, R25, 0 */
		/* 821A81E0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821A81E0h case    1:*/		return 0x821A81E4;
		  /* 821A81E4h */ case    2:  		/* bc 12, CR6_EQ, 544 */
		/* 821A81E4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A8404;  }
		/* 821A81E4h case    2:*/		return 0x821A81E8;
		  /* 821A81E8h */ case    3:  		/* lwz R30, <#[R25 + 16]> */
		/* 821A81E8h case    3:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000010) );
		/* 821A81E8h case    3:*/		return 0x821A81EC;
		  /* 821A81ECh */ case    4:  		/* cmplwi CR6, R30, 0 */
		/* 821A81ECh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A81ECh case    4:*/		return 0x821A81F0;
		  /* 821A81F0h */ case    5:  		/* bc 12, CR6_EQ, 392 */
		/* 821A81F0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A8378;  }
		/* 821A81F0h case    5:*/		return 0x821A81F4;
		  /* 821A81F4h */ case    6:  		/* cmplw CR6, R28, R30 */
		/* 821A81F4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R30);
		/* 821A81F4h case    6:*/		return 0x821A81F8;
		  /* 821A81F8h */ case    7:  		/* bc 12, CR6_EQ, 384 */
		/* 821A81F8h case    7:*/		if ( regs.CR[6].eq ) { return 0x821A8378;  }
		/* 821A81F8h case    7:*/		return 0x821A81FC;
		  /* 821A81FCh */ case    8:  		/* lwz R31, <#[R28 + 8]> */
		/* 821A81FCh case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R28 + 0x00000008) );
		/* 821A81FCh case    8:*/		return 0x821A8200;
		  /* 821A8200h */ case    9:  		/* lwz R29, <#[R30 + 8]> */
		/* 821A8200h case    9:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x00000008) );
		/* 821A8200h case    9:*/		return 0x821A8204;
		  /* 821A8204h */ case   10:  		/* xor R11, R29, R31 */
		/* 821A8204h case   10:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R29,regs.R31);
		/* 821A8204h case   10:*/		return 0x821A8208;
		  /* 821A8208h */ case   11:  		/* rlwinm. R11, R11, 0, 18, 24 */
		/* 821A8208h case   11:*/		cpu::op::rlwinm<1,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A8208h case   11:*/		return 0x821A820C;
		  /* 821A820Ch */ case   12:  		/* bc 4, CR0_EQ, 364 */
		/* 821A820Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A8378;  }
		/* 821A820Ch case   12:*/		return 0x821A8210;
		  /* 821A8210h */ case   13:  		/* mr R4, R30 */
		/* 821A8210h case   13:*/		regs.R4 = regs.R30;
		/* 821A8210h case   13:*/		return 0x821A8214;
		  /* 821A8214h */ case   14:  		/* mr R3, R27 */
		/* 821A8214h case   14:*/		regs.R3 = regs.R27;
		/* 821A8214h case   14:*/		return 0x821A8218;
		  /* 821A8218h */ case   15:  		/* bl -49792 */
		/* 821A8218h case   15:*/		regs.LR = 0x821A821C; return 0x8219BF98;
		/* 821A8218h case   15:*/		return 0x821A821C;
		  /* 821A821Ch */ case   16:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A821Ch case   16:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A821Ch case   16:*/		return 0x821A8220;
		  /* 821A8220h */ case   17:  		/* bc 4, CR0_EQ, 344 */
		/* 821A8220h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821A8378;  }
		/* 821A8220h case   17:*/		return 0x821A8224;
		  /* 821A8224h */ case   18:  		/* xor R11, R29, R31 */
		/* 821A8224h case   18:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R29,regs.R31);
		/* 821A8224h case   18:*/		return 0x821A8228;
		  /* 821A8228h */ case   19:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A8228h case   19:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A8228h case   19:*/		return 0x821A822C;
		  /* 821A822Ch */ case   20:  		/* bc 4, CR0_EQ, 332 */
		/* 821A822Ch case   20:*/		if ( !regs.CR[0].eq ) { return 0x821A8378;  }
		/* 821A822Ch case   20:*/		return 0x821A8230;
		  /* 821A8230h */ case   21:  		/* rlwinm. R11, R31, 9, 31, 31 */
		/* 821A8230h case   21:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R31);
		/* 821A8230h case   21:*/		return 0x821A8234;
		  /* 821A8234h */ case   22:  		/* bc 4, CR0_EQ, 12 */
		/* 821A8234h case   22:*/		if ( !regs.CR[0].eq ) { return 0x821A8240;  }
		/* 821A8234h case   22:*/		return 0x821A8238;
		  /* 821A8238h */ case   23:  		/* rlwinm. R11, R29, 9, 31, 31 */
		/* 821A8238h case   23:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R29);
		/* 821A8238h case   23:*/		return 0x821A823C;
		  /* 821A823Ch */ case   24:  		/* bc 4, CR0_EQ, 316 */
		/* 821A823Ch case   24:*/		if ( !regs.CR[0].eq ) { return 0x821A8378;  }
		/* 821A823Ch case   24:*/		return 0x821A8240;
	}
	return 0x821A8240;
} // Block from 821A81DCh-821A8240h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821A8240h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8240( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8240) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8240);
		  /* 821A8240h */ case    0:  		/* mr R5, R27 */
		/* 821A8240h case    0:*/		regs.R5 = regs.R27;
		/* 821A8240h case    0:*/		return 0x821A8244;
		  /* 821A8244h */ case    1:  		/* mr R4, R30 */
		/* 821A8244h case    1:*/		regs.R4 = regs.R30;
		/* 821A8244h case    1:*/		return 0x821A8248;
		  /* 821A8248h */ case    2:  		/* mr R3, R28 */
		/* 821A8248h case    2:*/		regs.R3 = regs.R28;
		/* 821A8248h case    2:*/		return 0x821A824C;
		  /* 821A824Ch */ case    3:  		/* bl 514764 */
		/* 821A824Ch case    3:*/		regs.LR = 0x821A8250; return 0x82225D18;
		/* 821A824Ch case    3:*/		return 0x821A8250;
		  /* 821A8250h */ case    4:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A8250h case    4:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A8250h case    4:*/		return 0x821A8254;
		  /* 821A8254h */ case    5:  		/* bc 12, CR0_EQ, 292 */
		/* 821A8254h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A8378;  }
		/* 821A8254h case    5:*/		return 0x821A8258;
		  /* 821A8258h */ case    6:  		/* li R7, 1 */
		/* 821A8258h case    6:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A8258h case    6:*/		return 0x821A825C;
		  /* 821A825Ch */ case    7:  		/* li R6, 1 */
		/* 821A825Ch case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A825Ch case    7:*/		return 0x821A8260;
		  /* 821A8260h */ case    8:  		/* mr R5, R30 */
		/* 821A8260h case    8:*/		regs.R5 = regs.R30;
		/* 821A8260h case    8:*/		return 0x821A8264;
		  /* 821A8264h */ case    9:  		/* mr R4, R28 */
		/* 821A8264h case    9:*/		regs.R4 = regs.R28;
		/* 821A8264h case    9:*/		return 0x821A8268;
		  /* 821A8268h */ case   10:  		/* mr R3, R27 */
		/* 821A8268h case   10:*/		regs.R3 = regs.R27;
		/* 821A8268h case   10:*/		return 0x821A826C;
		  /* 821A826Ch */ case   11:  		/* bl 546820 */
		/* 821A826Ch case   11:*/		regs.LR = 0x821A8270; return 0x8222DA70;
		/* 821A826Ch case   11:*/		return 0x821A8270;
		  /* 821A8270h */ case   12:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A8270h case   12:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A8270h case   12:*/		return 0x821A8274;
		  /* 821A8274h */ case   13:  		/* bc 12, CR0_EQ, 260 */
		/* 821A8274h case   13:*/		if ( regs.CR[0].eq ) { return 0x821A8378;  }
		/* 821A8274h case   13:*/		return 0x821A8278;
		  /* 821A8278h */ case   14:  		/* lwz R26, <#[R30 + 8]> */
		/* 821A8278h case   14:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R30 + 0x00000008) );
		/* 821A8278h case   14:*/		return 0x821A827C;
		  /* 821A827Ch */ case   15:  		/* rlwinm R11, R26, 25, 25, 31 */
		/* 821A827Ch case   15:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R26);
		/* 821A827Ch case   15:*/		return 0x821A8280;
		  /* 821A8280h */ case   16:  		/* cmplwi CR6, R11, 32 */
		/* 821A8280h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000020);
		/* 821A8280h case   16:*/		return 0x821A8284;
		  /* 821A8284h */ case   17:  		/* bc 12, CR6_LT, 16 */
		/* 821A8284h case   17:*/		if ( regs.CR[6].lt ) { return 0x821A8294;  }
		/* 821A8284h case   17:*/		return 0x821A8288;
		  /* 821A8288h */ case   18:  		/* cmplwi CR6, R11, 82 */
		/* 821A8288h case   18:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000052);
		/* 821A8288h case   18:*/		return 0x821A828C;
		  /* 821A828Ch */ case   19:  		/* li R11, 1 */
		/* 821A828Ch case   19:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A828Ch case   19:*/		return 0x821A8290;
		  /* 821A8290h */ case   20:  		/* bc 4, CR6_GT, 8 */
		/* 821A8290h case   20:*/		if ( !regs.CR[6].gt ) { return 0x821A8298;  }
		/* 821A8290h case   20:*/		return 0x821A8294;
	}
	return 0x821A8294;
} // Block from 821A8240h-821A8294h (21 instructions)

//////////////////////////////////////////////////////
// Block at 821A8294h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8294( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8294) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8294);
		  /* 821A8294h */ case    0:  		/* li R11, 0 */
		/* 821A8294h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A8294h case    0:*/		return 0x821A8298;
	}
	return 0x821A8298;
} // Block from 821A8294h-821A8298h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A8298h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8298( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8298) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8298);
		  /* 821A8298h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A8298h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A8298h case    0:*/		return 0x821A829C;
		  /* 821A829Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821A829Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821A82AC;  }
		/* 821A829Ch case    1:*/		return 0x821A82A0;
		  /* 821A82A0h */ case    2:  		/* rlwinm R11, R26, 0, 15, 17 */
		/* 821A82A0h case    2:*/		cpu::op::rlwinm<0,0,15,17>(regs,&regs.R11,regs.R26);
		/* 821A82A0h case    2:*/		return 0x821A82A4;
		  /* 821A82A4h */ case    3:  		/* cmplwi CR6, R11, 16384 */
		/* 821A82A4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00004000);
		/* 821A82A4h case    3:*/		return 0x821A82A8;
		  /* 821A82A8h */ case    4:  		/* bc 12, CR6_GT, 348 */
		/* 821A82A8h case    4:*/		if ( regs.CR[6].gt ) { return 0x821A8404;  }
		/* 821A82A8h case    4:*/		return 0x821A82AC;
	}
	return 0x821A82AC;
} // Block from 821A8298h-821A82ACh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A82ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A82AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A82AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A82AC);
		  /* 821A82ACh */ case    0:  		/* lwz R11, <#[R28 + 4]> */
		/* 821A82ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000004) );
		/* 821A82ACh case    0:*/		return 0x821A82B0;
		  /* 821A82B0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A82B0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A82B0h case    1:*/		return 0x821A82B4;
		  /* 821A82B4h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821A82B4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A82E8;  }
		/* 821A82B4h case    2:*/		return 0x821A82B8;
		  /* 821A82B8h */ case    3:  		/* lwz R29, <#[R11 + 16]> */
		/* 821A82B8h case    3:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x00000010) );
		/* 821A82B8h case    3:*/		return 0x821A82BC;
		  /* 821A82BCh */ case    4:  		/* cmplwi CR6, R29, 0 */
		/* 821A82BCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A82BCh case    4:*/		return 0x821A82C0;
		  /* 821A82C0h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821A82C0h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A82E0;  }
		/* 821A82C0h case    5:*/		return 0x821A82C4;
		  /* 821A82C4h */ case    6:  		/* lwz R10, <#[R29 + 8]> */
		/* 821A82C4h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R29 + 0x00000008) );
		/* 821A82C4h case    6:*/		return 0x821A82C8;
		  /* 821A82C8h */ case    7:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821A82C8h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821A82C8h case    7:*/		return 0x821A82CC;
		  /* 821A82CCh */ case    8:  		/* cmplwi CR6, R10, 14080 */
		/* 821A82CCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821A82CCh case    8:*/		return 0x821A82D0;
		  /* 821A82D0h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821A82D0h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821A82E0;  }
		/* 821A82D0h case    9:*/		return 0x821A82D4;
		  /* 821A82D4h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821A82D4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A82D4h case   10:*/		return 0x821A82D8;
		  /* 821A82D8h */ case   11:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821A82D8h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821A82D8h case   11:*/		return 0x821A82DC;
		  /* 821A82DCh */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821A82DCh case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A82EC;  }
		/* 821A82DCh case   12:*/		return 0x821A82E0;
	}
	return 0x821A82E0;
} // Block from 821A82ACh-821A82E0h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A82E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A82E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A82E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A82E0);
		  /* 821A82E0h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A82E0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A82E0h case    0:*/		return 0x821A82E4;
		  /* 821A82E4h */ case    1:  		/* b -52 */
		/* 821A82E4h case    1:*/		return 0x821A82B0;
		/* 821A82E4h case    1:*/		return 0x821A82E8;
	}
	return 0x821A82E8;
} // Block from 821A82E0h-821A82E8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A82E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A82E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A82E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A82E8);
		  /* 821A82E8h */ case    0:  		/* li R29, 0 */
		/* 821A82E8h case    0:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821A82E8h case    0:*/		return 0x821A82EC;
	}
	return 0x821A82EC;
} // Block from 821A82E8h-821A82ECh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A82ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A82EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A82EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A82EC);
		  /* 821A82ECh */ case    0:  		/* lwz R11, <#[R30 + 4]> */
		/* 821A82ECh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		/* 821A82ECh case    0:*/		return 0x821A82F0;
		  /* 821A82F0h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A82F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A82F0h case    1:*/		return 0x821A82F4;
		  /* 821A82F4h */ case    2:  		/* bc 12, CR6_EQ, 52 */
		/* 821A82F4h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A8328;  }
		/* 821A82F4h case    2:*/		return 0x821A82F8;
		  /* 821A82F8h */ case    3:  		/* lwz R31, <#[R11 + 16]> */
		/* 821A82F8h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821A82F8h case    3:*/		return 0x821A82FC;
		  /* 821A82FCh */ case    4:  		/* cmplwi CR6, R31, 0 */
		/* 821A82FCh case    4:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A82FCh case    4:*/		return 0x821A8300;
		  /* 821A8300h */ case    5:  		/* bc 12, CR6_EQ, 32 */
		/* 821A8300h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A8320;  }
		/* 821A8300h case    5:*/		return 0x821A8304;
		  /* 821A8304h */ case    6:  		/* lwz R10, <#[R31 + 8]> */
		/* 821A8304h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821A8304h case    6:*/		return 0x821A8308;
		  /* 821A8308h */ case    7:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821A8308h case    7:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821A8308h case    7:*/		return 0x821A830C;
		  /* 821A830Ch */ case    8:  		/* cmplwi CR6, R10, 14080 */
		/* 821A830Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00003700);
		/* 821A830Ch case    8:*/		return 0x821A8310;
		  /* 821A8310h */ case    9:  		/* bc 4, CR6_EQ, 16 */
		/* 821A8310h case    9:*/		if ( !regs.CR[6].eq ) { return 0x821A8320;  }
		/* 821A8310h case    9:*/		return 0x821A8314;
		  /* 821A8314h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821A8314h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8314h case   10:*/		return 0x821A8318;
		  /* 821A8318h */ case   11:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821A8318h case   11:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821A8318h case   11:*/		return 0x821A831C;
		  /* 821A831Ch */ case   12:  		/* bc 4, CR0_EQ, 16 */
		/* 821A831Ch case   12:*/		if ( !regs.CR[0].eq ) { return 0x821A832C;  }
		/* 821A831Ch case   12:*/		return 0x821A8320;
	}
	return 0x821A8320;
} // Block from 821A82ECh-821A8320h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A8320h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8320);
		  /* 821A8320h */ case    0:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A8320h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A8320h case    0:*/		return 0x821A8324;
		  /* 821A8324h */ case    1:  		/* b -52 */
		/* 821A8324h case    1:*/		return 0x821A82F0;
		/* 821A8324h case    1:*/		return 0x821A8328;
	}
	return 0x821A8328;
} // Block from 821A8320h-821A8328h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A8328h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8328( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8328) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8328);
		  /* 821A8328h */ case    0:  		/* li R31, 0 */
		/* 821A8328h case    0:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A8328h case    0:*/		return 0x821A832C;
	}
	return 0x821A832C;
} // Block from 821A8328h-821A832Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A832Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A832C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A832C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A832C);
		  /* 821A832Ch */ case    0:  		/* cmplw CR6, R29, R31 */
		/* 821A832Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R31);
		/* 821A832Ch case    0:*/		return 0x821A8330;
		  /* 821A8330h */ case    1:  		/* bc 12, CR6_EQ, 80 */
		/* 821A8330h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A8380;  }
		/* 821A8330h case    1:*/		return 0x821A8334;
		  /* 821A8334h */ case    2:  		/* mr R7, R30 */
		/* 821A8334h case    2:*/		regs.R7 = regs.R30;
		/* 821A8334h case    2:*/		return 0x821A8338;
		  /* 821A8338h */ case    3:  		/* mr R6, R31 */
		/* 821A8338h case    3:*/		regs.R6 = regs.R31;
		/* 821A8338h case    3:*/		return 0x821A833C;
		  /* 821A833Ch */ case    4:  		/* mr R5, R28 */
		/* 821A833Ch case    4:*/		regs.R5 = regs.R28;
		/* 821A833Ch case    4:*/		return 0x821A8340;
		  /* 821A8340h */ case    5:  		/* mr R4, R29 */
		/* 821A8340h case    5:*/		regs.R4 = regs.R29;
		/* 821A8340h case    5:*/		return 0x821A8344;
		  /* 821A8344h */ case    6:  		/* mr R3, R27 */
		/* 821A8344h case    6:*/		regs.R3 = regs.R27;
		/* 821A8344h case    6:*/		return 0x821A8348;
		  /* 821A8348h */ case    7:  		/* bl -52720 */
		/* 821A8348h case    7:*/		regs.LR = 0x821A834C; return 0x8219B558;
		/* 821A8348h case    7:*/		return 0x821A834C;
		  /* 821A834Ch */ case    8:  		/* cmplwi CR6, R3, 4 */
		/* 821A834Ch case    8:*/		cpu::op::cmplwi<6>(regs,regs.R3,0x00000004);
		/* 821A834Ch case    8:*/		return 0x821A8350;
		  /* 821A8350h */ case    9:  		/* bc 12, CR6_GT, 40 */
		/* 821A8350h case    9:*/		if ( regs.CR[6].gt ) { return 0x821A8378;  }
		/* 821A8350h case    9:*/		return 0x821A8354;
		  /* 821A8354h */ case   10:  		/* cmplwi CR6, R29, 0 */
		/* 821A8354h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A8354h case   10:*/		return 0x821A8358;
		  /* 821A8358h */ case   11:  		/* bc 12, CR6_EQ, 12 */
		/* 821A8358h case   11:*/		if ( regs.CR[6].eq ) { return 0x821A8364;  }
		/* 821A8358h case   11:*/		return 0x821A835C;
		  /* 821A835Ch */ case   12:  		/* cmplwi CR6, R31, 0 */
		/* 821A835Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A835Ch case   12:*/		return 0x821A8360;
		  /* 821A8360h */ case   13:  		/* bc 4, CR6_EQ, 24 */
		/* 821A8360h case   13:*/		if ( !regs.CR[6].eq ) { return 0x821A8378;  }
		/* 821A8360h case   13:*/		return 0x821A8364;
	}
	return 0x821A8364;
} // Block from 821A832Ch-821A8364h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A8364h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8364( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8364) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8364);
		  /* 821A8364h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A8364h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A8364h case    0:*/		return 0x821A8368;
		  /* 821A8368h */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A8368h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A8368h case    1:*/		return 0x821A836C;
		  /* 821A836Ch */ case    2:  		/* bc 12, CR0_EQ, 20 */
		/* 821A836Ch case    2:*/		if ( regs.CR[0].eq ) { return 0x821A8380;  }
		/* 821A836Ch case    2:*/		return 0x821A8370;
		  /* 821A8370h */ case    3:  		/* rlwinm. R11, R26, 9, 31, 31 */
		/* 821A8370h case    3:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R26);
		/* 821A8370h case    3:*/		return 0x821A8374;
		  /* 821A8374h */ case    4:  		/* bc 12, CR0_EQ, 12 */
		/* 821A8374h case    4:*/		if ( regs.CR[0].eq ) { return 0x821A8380;  }
		/* 821A8374h case    4:*/		return 0x821A8378;
	}
	return 0x821A8378;
} // Block from 821A8364h-821A8378h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A8378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8378);
		  /* 821A8378h */ case    0:  		/* lwz R25, <#[R25 + 8]> */
		/* 821A8378h case    0:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R25 + 0x00000008) );
		/* 821A8378h case    0:*/		return 0x821A837C;
		  /* 821A837Ch */ case    1:  		/* b -412 */
		/* 821A837Ch case    1:*/		return 0x821A81E0;
		/* 821A837Ch case    1:*/		return 0x821A8380;
	}
	return 0x821A8380;
} // Block from 821A8378h-821A8380h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A8380h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8380( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8380) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8380);
		  /* 821A8380h */ case    0:  		/* li R7, 1 */
		/* 821A8380h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A8380h case    0:*/		return 0x821A8384;
		  /* 821A8384h */ case    1:  		/* li R6, 1 */
		/* 821A8384h case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A8384h case    1:*/		return 0x821A8388;
		  /* 821A8388h */ case    2:  		/* mr R5, R30 */
		/* 821A8388h case    2:*/		regs.R5 = regs.R30;
		/* 821A8388h case    2:*/		return 0x821A838C;
		  /* 821A838Ch */ case    3:  		/* mr R4, R28 */
		/* 821A838Ch case    3:*/		regs.R4 = regs.R28;
		/* 821A838Ch case    3:*/		return 0x821A8390;
		  /* 821A8390h */ case    4:  		/* mr R3, R27 */
		/* 821A8390h case    4:*/		regs.R3 = regs.R27;
		/* 821A8390h case    4:*/		return 0x821A8394;
		  /* 821A8394h */ case    5:  		/* bl 546804 */
		/* 821A8394h case    5:*/		regs.LR = 0x821A8398; return 0x8222DB88;
		/* 821A8394h case    5:*/		return 0x821A8398;
		  /* 821A8398h */ case    6:  		/* cmplwi CR6, R29, 0 */
		/* 821A8398h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000000);
		/* 821A8398h case    6:*/		return 0x821A839C;
		  /* 821A839Ch */ case    7:  		/* bc 4, CR6_EQ, 12 */
		/* 821A839Ch case    7:*/		if ( !regs.CR[6].eq ) { return 0x821A83A8;  }
		/* 821A839Ch case    7:*/		return 0x821A83A0;
		  /* 821A83A0h */ case    8:  		/* cmplwi CR6, R31, 0 */
		/* 821A83A0h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A83A0h case    8:*/		return 0x821A83A4;
		  /* 821A83A4h */ case    9:  		/* bc 12, CR6_EQ, 60 */
		/* 821A83A4h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A83E0;  }
		/* 821A83A4h case    9:*/		return 0x821A83A8;
	}
	return 0x821A83A8;
} // Block from 821A8380h-821A83A8h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A83A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A83A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A83A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A83A8);
		  /* 821A83A8h */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821A83A8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821A83A8h case    0:*/		return 0x821A83AC;
		  /* 821A83ACh */ case    1:  		/* lis R10, -32252 */
		/* 821A83ACh case    1:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8204);
		/* 821A83ACh case    1:*/		return 0x821A83B0;
		  /* 821A83B0h */ case    2:  		/* lwz R9, <#[R30 + 8]> */
		/* 821A83B0h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + 0x00000008) );
		/* 821A83B0h case    2:*/		return 0x821A83B4;
		  /* 821A83B4h */ case    3:  		/* mr R8, R30 */
		/* 821A83B4h case    3:*/		regs.R8 = regs.R30;
		/* 821A83B4h case    3:*/		return 0x821A83B8;
		  /* 821A83B8h */ case    4:  		/* rlwinm R6, R11, 18, 29, 31 */
		/* 821A83B8h case    4:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R6,regs.R11);
		/* 821A83B8h case    4:*/		return 0x821A83BC;
		  /* 821A83BCh */ case    5:  		/* addi R11, R10, -16632 */
		/* 821A83BCh case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0xFFFFBF08);
		/* 821A83BCh case    5:*/		return 0x821A83C0;
		  /* 821A83C0h */ case    6:  		/* rlwinm R10, R9, 18, 29, 31 */
		/* 821A83C0h case    6:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R10,regs.R9);
		/* 821A83C0h case    6:*/		return 0x821A83C4;
		  /* 821A83C4h */ case    7:  		/* add R11, R6, R11 */
		/* 821A83C4h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R6,regs.R11);
		/* 821A83C4h case    7:*/		return 0x821A83C8;
		  /* 821A83C8h */ case    8:  		/* mr R7, R31 */
		/* 821A83C8h case    8:*/		regs.R7 = regs.R31;
		/* 821A83C8h case    8:*/		return 0x821A83CC;
		  /* 821A83CCh */ case    9:  		/* mr R5, R28 */
		/* 821A83CCh case    9:*/		regs.R5 = regs.R28;
		/* 821A83CCh case    9:*/		return 0x821A83D0;
		  /* 821A83D0h */ case   10:  		/* mr R4, R29 */
		/* 821A83D0h case   10:*/		regs.R4 = regs.R29;
		/* 821A83D0h case   10:*/		return 0x821A83D4;
		  /* 821A83D4h */ case   11:  		/* mr R3, R27 */
		/* 821A83D4h case   11:*/		regs.R3 = regs.R27;
		/* 821A83D4h case   11:*/		return 0x821A83D8;
		  /* 821A83D8h */ case   12:  		/* lbz R9, <#[R11 - 1]> */
		/* 821A83D8h case   12:*/		cpu::mem::load8z( regs, &regs.R9, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821A83D8h case   12:*/		return 0x821A83DC;
		  /* 821A83DCh */ case   13:  		/* bl -24460 */
		/* 821A83DCh case   13:*/		regs.LR = 0x821A83E0; return 0x821A2450;
		/* 821A83DCh case   13:*/		return 0x821A83E0;
	}
	return 0x821A83E0;
} // Block from 821A83A8h-821A83E0h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A83E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A83E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A83E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A83E0);
		  /* 821A83E0h */ case    0:  		/* li R8, 1 */
		/* 821A83E0h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821A83E0h case    0:*/		return 0x821A83E4;
		  /* 821A83E4h */ case    1:  		/* li R7, 1 */
		/* 821A83E4h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A83E4h case    1:*/		return 0x821A83E8;
		  /* 821A83E8h */ case    2:  		/* li R6, 228 */
		/* 821A83E8h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821A83E8h case    2:*/		return 0x821A83EC;
		  /* 821A83ECh */ case    3:  		/* mr R5, R30 */
		/* 821A83ECh case    3:*/		regs.R5 = regs.R30;
		/* 821A83ECh case    3:*/		return 0x821A83F0;
		  /* 821A83F0h */ case    4:  		/* mr R4, R28 */
		/* 821A83F0h case    4:*/		regs.R4 = regs.R28;
		/* 821A83F0h case    4:*/		return 0x821A83F4;
		  /* 821A83F4h */ case    5:  		/* mr R3, R27 */
		/* 821A83F4h case    5:*/		regs.R3 = regs.R27;
		/* 821A83F4h case    5:*/		return 0x821A83F8;
		  /* 821A83F8h */ case    6:  		/* bl -14232 */
		/* 821A83F8h case    6:*/		regs.LR = 0x821A83FC; return 0x821A4C60;
		/* 821A83F8h case    6:*/		return 0x821A83FC;
		  /* 821A83FCh */ case    7:  		/* li R3, 1 */
		/* 821A83FCh case    7:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821A83FCh case    7:*/		return 0x821A8400;
		  /* 821A8400h */ case    8:  		/* b 8 */
		/* 821A8400h case    8:*/		return 0x821A8408;
		/* 821A8400h case    8:*/		return 0x821A8404;
	}
	return 0x821A8404;
} // Block from 821A83E0h-821A8404h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A8404h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8404( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8404) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8404);
		  /* 821A8404h */ case    0:  		/* li R3, 0 */
		/* 821A8404h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A8404h case    0:*/		return 0x821A8408;
	}
	return 0x821A8408;
} // Block from 821A8404h-821A8408h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A8408h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8408( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8408) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8408);
		  /* 821A8408h */ case    0:  		/* addi R1, R1, 144 */
		/* 821A8408h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x90);
		/* 821A8408h case    0:*/		return 0x821A840C;
		  /* 821A840Ch */ case    1:  		/* b -1143152 */
		/* 821A840Ch case    1:*/		return 0x8209129C;
		/* 821A840Ch case    1:*/		return 0x821A8410;
	}
	return 0x821A8410;
} // Block from 821A8408h-821A8410h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A8410h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8410( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8410) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8410);
		  /* 821A8410h */ case    0:  		/* mfspr R12, LR */
		/* 821A8410h case    0:*/		regs.R12 = regs.LR;
		/* 821A8410h case    0:*/		return 0x821A8414;
		  /* 821A8414h */ case    1:  		/* bl -1143272 */
		/* 821A8414h case    1:*/		regs.LR = 0x821A8418; return 0x8209122C;
		/* 821A8414h case    1:*/		return 0x821A8418;
		  /* 821A8418h */ case    2:  		/* stwu R1, <#[R1 - 352]> */
		/* 821A8418h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 821A8418h case    2:*/		return 0x821A841C;
		  /* 821A841Ch */ case    3:  		/* li R7, 1 */
		/* 821A841Ch case    3:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A841Ch case    3:*/		return 0x821A8420;
		  /* 821A8420h */ case    4:  		/* li R6, 1 */
		/* 821A8420h case    4:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A8420h case    4:*/		return 0x821A8424;
		  /* 821A8424h */ case    5:  		/* mr R19, R3 */
		/* 821A8424h case    5:*/		regs.R19 = regs.R3;
		/* 821A8424h case    5:*/		return 0x821A8428;
		  /* 821A8428h */ case    6:  		/* mr R22, R4 */
		/* 821A8428h case    6:*/		regs.R22 = regs.R4;
		/* 821A8428h case    6:*/		return 0x821A842C;
		  /* 821A842Ch */ case    7:  		/* mr R20, R5 */
		/* 821A842Ch case    7:*/		regs.R20 = regs.R5;
		/* 821A842Ch case    7:*/		return 0x821A8430;
		  /* 821A8430h */ case    8:  		/* bl 546368 */
		/* 821A8430h case    8:*/		regs.LR = 0x821A8434; return 0x8222DA70;
		/* 821A8430h case    8:*/		return 0x821A8434;
		  /* 821A8434h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A8434h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A8434h case    9:*/		return 0x821A8438;
		  /* 821A8438h */ case   10:  		/* bc 4, CR0_EQ, 12 */
		/* 821A8438h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821A8444;  }
		/* 821A8438h case   10:*/		return 0x821A843C;
		  /* 821A843Ch */ case   11:  		/* li R3, 0 */
		/* 821A843Ch case   11:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A843Ch case   11:*/		return 0x821A8440;
		  /* 821A8440h */ case   12:  		/* b 1636 */
		/* 821A8440h case   12:*/		return 0x821A8AA4;
		/* 821A8440h case   12:*/		return 0x821A8444;
	}
	return 0x821A8444;
} // Block from 821A8410h-821A8444h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A8444h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8444( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8444) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8444);
		  /* 821A8444h */ case    0:  		/* lwz R11, <#[R22 + 8]> */
		/* 821A8444h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A8444h case    0:*/		return 0x821A8448;
		  /* 821A8448h */ case    1:  		/* addi R6, R1, 176 */
		/* 821A8448h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xB0);
		/* 821A8448h case    1:*/		return 0x821A844C;
		  /* 821A844Ch */ case    2:  		/* lwz R10, <#[R20 + 8]> */
		/* 821A844Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 821A844Ch case    2:*/		return 0x821A8450;
		  /* 821A8450h */ case    3:  		/* addi R5, R1, 160 */
		/* 821A8450h case    3:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xA0);
		/* 821A8450h case    3:*/		return 0x821A8454;
		  /* 821A8454h */ case    4:  		/* addi R4, R1, 128 */
		/* 821A8454h case    4:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 821A8454h case    4:*/		return 0x821A8458;
		  /* 821A8458h */ case    5:  		/* mr R3, R22 */
		/* 821A8458h case    5:*/		regs.R3 = regs.R22;
		/* 821A8458h case    5:*/		return 0x821A845C;
		  /* 821A845Ch */ case    6:  		/* rlwinm R18, R11, 13, 29, 31 */
		/* 821A845Ch case    6:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R18,regs.R11);
		/* 821A845Ch case    6:*/		return 0x821A8460;
		  /* 821A8460h */ case    7:  		/* rlwinm R31, R10, 13, 29, 31 */
		/* 821A8460h case    7:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R31,regs.R10);
		/* 821A8460h case    7:*/		return 0x821A8464;
		  /* 821A8464h */ case    8:  		/* bl -52372 */
		/* 821A8464h case    8:*/		regs.LR = 0x821A8468; return 0x8219B7D0;
		/* 821A8464h case    8:*/		return 0x821A8468;
		  /* 821A8468h */ case    9:  		/* addi R6, R1, 192 */
		/* 821A8468h case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xC0);
		/* 821A8468h case    9:*/		return 0x821A846C;
		  /* 821A846Ch */ case   10:  		/* addi R5, R1, 208 */
		/* 821A846Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 821A846Ch case   10:*/		return 0x821A8470;
		  /* 821A8470h */ case   11:  		/* addi R4, R1, 144 */
		/* 821A8470h case   11:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x90);
		/* 821A8470h case   11:*/		return 0x821A8474;
		  /* 821A8474h */ case   12:  		/* mr R3, R20 */
		/* 821A8474h case   12:*/		regs.R3 = regs.R20;
		/* 821A8474h case   12:*/		return 0x821A8478;
		  /* 821A8478h */ case   13:  		/* bl -52392 */
		/* 821A8478h case   13:*/		regs.LR = 0x821A847C; return 0x8219B7D0;
		/* 821A8478h case   13:*/		return 0x821A847C;
		  /* 821A847Ch */ case   14:  		/* addi R9, R1, 112 */
		/* 821A847Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 821A847Ch case   14:*/		return 0x821A8480;
		  /* 821A8480h */ case   15:  		/* addi R8, R1, 192 */
		/* 821A8480h case   15:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xC0);
		/* 821A8480h case   15:*/		return 0x821A8484;
		  /* 821A8484h */ case   16:  		/* addi R11, R1, 116 */
		/* 821A8484h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x74);
		/* 821A8484h case   16:*/		return 0x821A8488;
		  /* 821A8488h */ case   17:  		/* stw R9, <#[R1 + 92]> */
		/* 821A8488h case   17:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A8488h case   17:*/		return 0x821A848C;
		  /* 821A848Ch */ case   18:  		/* stw R8, <#[R1 + 84]> */
		/* 821A848Ch case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 821A848Ch case   18:*/		return 0x821A8490;
		  /* 821A8490h */ case   19:  		/* addi R10, R1, 208 */
		/* 821A8490h case   19:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 821A8490h case   19:*/		return 0x821A8494;
		  /* 821A8494h */ case   20:  		/* addi R9, R1, 144 */
		/* 821A8494h case   20:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 821A8494h case   20:*/		return 0x821A8498;
		  /* 821A8498h */ case   21:  		/* stw R11, <#[R1 + 100]> */
		/* 821A8498h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821A8498h case   21:*/		return 0x821A849C;
		  /* 821A849Ch */ case   22:  		/* mr R8, R31 */
		/* 821A849Ch case   22:*/		regs.R8 = regs.R31;
		/* 821A849Ch case   22:*/		return 0x821A84A0;
		  /* 821A84A0h */ case   23:  		/* addi R7, R1, 176 */
		/* 821A84A0h case   23:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB0);
		/* 821A84A0h case   23:*/		return 0x821A84A4;
		  /* 821A84A4h */ case   24:  		/* addi R6, R1, 160 */
		/* 821A84A4h case   24:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xA0);
		/* 821A84A4h case   24:*/		return 0x821A84A8;
		  /* 821A84A8h */ case   25:  		/* addi R5, R1, 128 */
		/* 821A84A8h case   25:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x80);
		/* 821A84A8h case   25:*/		return 0x821A84AC;
		  /* 821A84ACh */ case   26:  		/* mr R4, R18 */
		/* 821A84ACh case   26:*/		regs.R4 = regs.R18;
		/* 821A84ACh case   26:*/		return 0x821A84B0;
		  /* 821A84B0h */ case   27:  		/* mr R3, R19 */
		/* 821A84B0h case   27:*/		regs.R3 = regs.R19;
		/* 821A84B0h case   27:*/		return 0x821A84B4;
		  /* 821A84B4h */ case   28:  		/* bl -52348 */
		/* 821A84B4h case   28:*/		regs.LR = 0x821A84B8; return 0x8219B838;
		/* 821A84B4h case   28:*/		return 0x821A84B8;
		  /* 821A84B8h */ case   29:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A84B8h case   29:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A84B8h case   29:*/		return 0x821A84BC;
		  /* 821A84BCh */ case   30:  		/* bc 12, CR0_EQ, -128 */
		/* 821A84BCh case   30:*/		if ( regs.CR[0].eq ) { return 0x821A843C;  }
		/* 821A84BCh case   30:*/		return 0x821A84C0;
		  /* 821A84C0h */ case   31:  		/* lwz R17, <#[R1 + 116]> */
		/* 821A84C0h case   31:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x00000074) );
		/* 821A84C0h case   31:*/		return 0x821A84C4;
		  /* 821A84C4h */ case   32:  		/* cmplwi CR6, R17, 0 */
		/* 821A84C4h case   32:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821A84C4h case   32:*/		return 0x821A84C8;
		  /* 821A84C8h */ case   33:  		/* bc 12, CR6_EQ, 1196 */
		/* 821A84C8h case   33:*/		if ( regs.CR[6].eq ) { return 0x821A8974;  }
		/* 821A84C8h case   33:*/		return 0x821A84CC;
		  /* 821A84CCh */ case   34:  		/* lis R11, -28311 */
		/* 821A84CCh case   34:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821A84CCh case   34:*/		return 0x821A84D0;
		  /* 821A84D0h */ case   35:  		/* lis R10, 0 */
		/* 821A84D0h case   35:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 821A84D0h case   35:*/		return 0x821A84D4;
		  /* 821A84D4h */ case   36:  		/* ori R11, R11, 5192 */
		/* 821A84D4h case   36:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821A84D4h case   36:*/		return 0x821A84D8;
		  /* 821A84D8h */ case   37:  		/* ori R10, R10, 36262 */
		/* 821A84D8h case   37:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8DA6);
		/* 821A84D8h case   37:*/		return 0x821A84DC;
		  /* 821A84DCh */ case   38:  		/* rldicl R9, R17, 0, 32 */
		/* 821A84DCh case   38:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R17);
		/* 821A84DCh case   38:*/		return 0x821A84E0;
		  /* 821A84E0h */ case   39:  		/* rldimi R11, R10, 32, 0 */
		/* 821A84E0h case   39:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R10);
		/* 821A84E0h case   39:*/		return 0x821A84E4;
		  /* 821A84E4h */ case   40:  		/* srd R11, R11, R9 */
		/* 821A84E4h case   40:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A84E4h case   40:*/		return 0x821A84E8;
		  /* 821A84E8h */ case   41:  		/* srd R11, R11, R9 */
		/* 821A84E8h case   41:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A84E8h case   41:*/		return 0x821A84EC;
		  /* 821A84ECh */ case   42:  		/* srd R11, R11, R9 */
		/* 821A84ECh case   42:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821A84ECh case   42:*/		return 0x821A84F0;
		  /* 821A84F0h */ case   43:  		/* rlwinm R11, R11, 0, 29, 31 */
		/* 821A84F0h case   43:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R11,regs.R11);
		/* 821A84F0h case   43:*/		return 0x821A84F4;
		  /* 821A84F4h */ case   44:  		/* add R31, R11, R18 */
		/* 821A84F4h case   44:*/		cpu::op::add<0>(regs,&regs.R31,regs.R11,regs.R18);
		/* 821A84F4h case   44:*/		return 0x821A84F8;
		  /* 821A84F8h */ case   45:  		/* cmplwi CR6, R31, 4 */
		/* 821A84F8h case   45:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000004);
		/* 821A84F8h case   45:*/		return 0x821A84FC;
		  /* 821A84FCh */ case   46:  		/* bc 12, CR6_GT, -192 */
		/* 821A84FCh case   46:*/		if ( regs.CR[6].gt ) { return 0x821A843C;  }
		/* 821A84FCh case   46:*/		return 0x821A8500;
		  /* 821A8500h */ case   47:  		/* lwz R11, <#[R22 + 8]> */
		/* 821A8500h case   47:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A8500h case   47:*/		return 0x821A8504;
		  /* 821A8504h */ case   48:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A8504h case   48:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A8504h case   48:*/		return 0x821A8508;
		  /* 821A8508h */ case   49:  		/* bc 12, CR0_EQ, 92 */
		/* 821A8508h case   49:*/		if ( regs.CR[0].eq ) { return 0x821A8564;  }
		/* 821A8508h case   49:*/		return 0x821A850C;
		  /* 821A850Ch */ case   50:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A850Ch case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A850Ch case   50:*/		return 0x821A8510;
		  /* 821A8510h */ case   51:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A8510h case   51:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A8510h case   51:*/		return 0x821A8514;
		  /* 821A8514h */ case   52:  		/* bc 12, CR0_EQ, 80 */
		/* 821A8514h case   52:*/		if ( regs.CR[0].eq ) { return 0x821A8564;  }
		/* 821A8514h case   52:*/		return 0x821A8518;
		  /* 821A8518h */ case   53:  		/* mr R3, R22 */
		/* 821A8518h case   53:*/		regs.R3 = regs.R22;
		/* 821A8518h case   53:*/		return 0x821A851C;
		  /* 821A851Ch */ case   54:  		/* bl -150580 */
		/* 821A851Ch case   54:*/		regs.LR = 0x821A8520; return 0x821838E8;
		/* 821A851Ch case   54:*/		return 0x821A8520;
		  /* 821A8520h */ case   55:  		/* mr R4, R3 */
		/* 821A8520h case   55:*/		regs.R4 = regs.R3;
		/* 821A8520h case   55:*/		return 0x821A8524;
		  /* 821A8524h */ case   56:  		/* mr R3, R19 */
		/* 821A8524h case   56:*/		regs.R3 = regs.R19;
		/* 821A8524h case   56:*/		return 0x821A8528;
		  /* 821A8528h */ case   57:  		/* bl -150472 */
		/* 821A8528h case   57:*/		regs.LR = 0x821A852C; return 0x82183960;
		/* 821A8528h case   57:*/		return 0x821A852C;
		  /* 821A852Ch */ case   58:  		/* mr R4, R3 */
		/* 821A852Ch case   58:*/		regs.R4 = regs.R3;
		/* 821A852Ch case   58:*/		return 0x821A8530;
		  /* 821A8530h */ case   59:  		/* mr R3, R19 */
		/* 821A8530h case   59:*/		regs.R3 = regs.R19;
		/* 821A8530h case   59:*/		return 0x821A8534;
		  /* 821A8534h */ case   60:  		/* bl -149356 */
		/* 821A8534h case   60:*/		regs.LR = 0x821A8538; return 0x82183DC8;
		/* 821A8534h case   60:*/		return 0x821A8538;
		  /* 821A8538h */ case   61:  		/* mr R30, R3 */
		/* 821A8538h case   61:*/		regs.R30 = regs.R3;
		/* 821A8538h case   61:*/		return 0x821A853C;
		  /* 821A853Ch */ case   62:  		/* mr R3, R20 */
		/* 821A853Ch case   62:*/		regs.R3 = regs.R20;
		/* 821A853Ch case   62:*/		return 0x821A8540;
		  /* 821A8540h */ case   63:  		/* bl -150616 */
		/* 821A8540h case   63:*/		regs.LR = 0x821A8544; return 0x821838E8;
		/* 821A8540h case   63:*/		return 0x821A8544;
		  /* 821A8544h */ case   64:  		/* mr R4, R3 */
		/* 821A8544h case   64:*/		regs.R4 = regs.R3;
		/* 821A8544h case   64:*/		return 0x821A8548;
		  /* 821A8548h */ case   65:  		/* mr R3, R19 */
		/* 821A8548h case   65:*/		regs.R3 = regs.R19;
		/* 821A8548h case   65:*/		return 0x821A854C;
		  /* 821A854Ch */ case   66:  		/* bl -150508 */
		/* 821A854Ch case   66:*/		regs.LR = 0x821A8550; return 0x82183960;
		/* 821A854Ch case   66:*/		return 0x821A8550;
		  /* 821A8550h */ case   67:  		/* mr R4, R3 */
		/* 821A8550h case   67:*/		regs.R4 = regs.R3;
		/* 821A8550h case   67:*/		return 0x821A8554;
		  /* 821A8554h */ case   68:  		/* mr R3, R19 */
		/* 821A8554h case   68:*/		regs.R3 = regs.R19;
		/* 821A8554h case   68:*/		return 0x821A8558;
		  /* 821A8558h */ case   69:  		/* bl -149392 */
		/* 821A8558h case   69:*/		regs.LR = 0x821A855C; return 0x82183DC8;
		/* 821A8558h case   69:*/		return 0x821A855C;
		  /* 821A855Ch */ case   70:  		/* cmplw CR6, R30, R3 */
		/* 821A855Ch case   70:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R3);
		/* 821A855Ch case   70:*/		return 0x821A8560;
		  /* 821A8560h */ case   71:  		/* bc 4, CR6_EQ, -292 */
		/* 821A8560h case   71:*/		if ( !regs.CR[6].eq ) { return 0x821A843C;  }
		/* 821A8560h case   71:*/		return 0x821A8564;
	}
	return 0x821A8564;
} // Block from 821A8444h-821A8564h (72 instructions)

//////////////////////////////////////////////////////
// Block at 821A8564h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8564( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8564) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8564);
		  /* 821A8564h */ case    0:  		/* lwz R10, <#[R22 + 8]> */
		/* 821A8564h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000008) );
		/* 821A8564h case    0:*/		return 0x821A8568;
		  /* 821A8568h */ case    1:  		/* li R11, 0 */
		/* 821A8568h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A8568h case    1:*/		return 0x821A856C;
		  /* 821A856Ch */ case    2:  		/* addi R9, R1, 128 */
		/* 821A856Ch case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x80);
		/* 821A856Ch case    2:*/		return 0x821A8570;
		  /* 821A8570h */ case    3:  		/* rlwinm R8, R10, 13, 29, 31 */
		/* 821A8570h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R8,regs.R10);
		/* 821A8570h case    3:*/		return 0x821A8574;
		  /* 821A8574h */ case    4:  		/* addi R10, R22, 44 */
		/* 821A8574h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R22,0x2C);
		/* 821A8574h case    4:*/		return 0x821A8578;
		  /* 821A8578h */ case    5:  		/* cmplw CR6, R11, R8 */
		/* 821A8578h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821A8578h case    5:*/		return 0x821A857C;
		  /* 821A857Ch */ case    6:  		/* bc 4, CR6_LT, 40 */
		/* 821A857Ch case    6:*/		if ( !regs.CR[6].lt ) { return 0x821A85A4;  }
		/* 821A857Ch case    6:*/		return 0x821A8580;
		  /* 821A8580h */ case    7:  		/* lwz R7, <#[R10]> */
		/* 821A8580h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A8580h case    7:*/		return 0x821A8584;
		  /* 821A8584h */ case    8:  		/* lwz R6, <#[R9]> */
		/* 821A8584h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000000) );
		/* 821A8584h case    8:*/		return 0x821A8588;
		  /* 821A8588h */ case    9:  		/* lwz R7, <#[R7 + 12]> */
		/* 821A8588h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x0000000C) );
		/* 821A8588h case    9:*/		return 0x821A858C;
		  /* 821A858Ch */ case   10:  		/* cmplw CR6, R7, R6 */
		/* 821A858Ch case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 821A858Ch case   10:*/		return 0x821A8590;
		  /* 821A8590h */ case   11:  		/* bc 4, CR6_EQ, -340 */
		/* 821A8590h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821A843C;  }
		/* 821A8590h case   11:*/		return 0x821A8594;
		  /* 821A8594h */ case   12:  		/* addi R11, R11, 1 */
		/* 821A8594h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A8594h case   12:*/		return 0x821A8598;
		  /* 821A8598h */ case   13:  		/* addi R10, R10, 4 */
		/* 821A8598h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A8598h case   13:*/		return 0x821A859C;
		  /* 821A859Ch */ case   14:  		/* addi R9, R9, 4 */
		/* 821A859Ch case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821A859Ch case   14:*/		return 0x821A85A0;
		  /* 821A85A0h */ case   15:  		/* b -40 */
		/* 821A85A0h case   15:*/		return 0x821A8578;
		/* 821A85A0h case   15:*/		return 0x821A85A4;
	}
	return 0x821A85A4;
} // Block from 821A8564h-821A85A4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A85A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A85A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A85A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A85A4);
		  /* 821A85A4h */ case    0:  		/* lwz R10, <#[R20 + 8]> */
		/* 821A85A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R20 + 0x00000008) );
		/* 821A85A4h case    0:*/		return 0x821A85A8;
		  /* 821A85A8h */ case    1:  		/* li R11, 0 */
		/* 821A85A8h case    1:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A85A8h case    1:*/		return 0x821A85AC;
		  /* 821A85ACh */ case    2:  		/* addi R9, R1, 144 */
		/* 821A85ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x90);
		/* 821A85ACh case    2:*/		return 0x821A85B0;
		  /* 821A85B0h */ case    3:  		/* rlwinm R8, R10, 13, 29, 31 */
		/* 821A85B0h case    3:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R8,regs.R10);
		/* 821A85B0h case    3:*/		return 0x821A85B4;
		  /* 821A85B4h */ case    4:  		/* addi R10, R20, 44 */
		/* 821A85B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R20,0x2C);
		/* 821A85B4h case    4:*/		return 0x821A85B8;
		  /* 821A85B8h */ case    5:  		/* cmplw CR6, R11, R8 */
		/* 821A85B8h case    5:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821A85B8h case    5:*/		return 0x821A85BC;
		  /* 821A85BCh */ case    6:  		/* bc 4, CR6_LT, 40 */
		/* 821A85BCh case    6:*/		if ( !regs.CR[6].lt ) { return 0x821A85E4;  }
		/* 821A85BCh case    6:*/		return 0x821A85C0;
		  /* 821A85C0h */ case    7:  		/* lwz R7, <#[R10]> */
		/* 821A85C0h case    7:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A85C0h case    7:*/		return 0x821A85C4;
		  /* 821A85C4h */ case    8:  		/* lwz R6, <#[R9]> */
		/* 821A85C4h case    8:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000000) );
		/* 821A85C4h case    8:*/		return 0x821A85C8;
		  /* 821A85C8h */ case    9:  		/* lwz R7, <#[R7 + 12]> */
		/* 821A85C8h case    9:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x0000000C) );
		/* 821A85C8h case    9:*/		return 0x821A85CC;
		  /* 821A85CCh */ case   10:  		/* cmplw CR6, R7, R6 */
		/* 821A85CCh case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R6);
		/* 821A85CCh case   10:*/		return 0x821A85D0;
		  /* 821A85D0h */ case   11:  		/* bc 4, CR6_EQ, -404 */
		/* 821A85D0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821A843C;  }
		/* 821A85D0h case   11:*/		return 0x821A85D4;
		  /* 821A85D4h */ case   12:  		/* addi R11, R11, 1 */
		/* 821A85D4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A85D4h case   12:*/		return 0x821A85D8;
		  /* 821A85D8h */ case   13:  		/* addi R10, R10, 4 */
		/* 821A85D8h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A85D8h case   13:*/		return 0x821A85DC;
		  /* 821A85DCh */ case   14:  		/* addi R9, R9, 4 */
		/* 821A85DCh case   14:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x4);
		/* 821A85DCh case   14:*/		return 0x821A85E0;
		  /* 821A85E0h */ case   15:  		/* b -40 */
		/* 821A85E0h case   15:*/		return 0x821A85B8;
		/* 821A85E0h case   15:*/		return 0x821A85E4;
	}
	return 0x821A85E4;
} // Block from 821A85A4h-821A85E4h (16 instructions)

//////////////////////////////////////////////////////
// Block at 821A85E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A85E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A85E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A85E4);
		  /* 821A85E4h */ case    0:  		/* mr R6, R31 */
		/* 821A85E4h case    0:*/		regs.R6 = regs.R31;
		/* 821A85E4h case    0:*/		return 0x821A85E8;
		  /* 821A85E8h */ case    1:  		/* lwz R4, <#[R22 + 28]> */
		/* 821A85E8h case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R22 + 0x0000001C) );
		/* 821A85E8h case    1:*/		return 0x821A85EC;
		  /* 821A85ECh */ case    2:  		/* li R5, 0 */
		/* 821A85ECh case    2:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A85ECh case    2:*/		return 0x821A85F0;
		  /* 821A85F0h */ case    3:  		/* mr R3, R19 */
		/* 821A85F0h case    3:*/		regs.R3 = regs.R19;
		/* 821A85F0h case    3:*/		return 0x821A85F4;
		  /* 821A85F4h */ case    4:  		/* bl 509196 */
		/* 821A85F4h case    4:*/		regs.LR = 0x821A85F8; return 0x82224B00;
		/* 821A85F4h case    4:*/		return 0x821A85F8;
		  /* 821A85F8h */ case    5:  		/* rlwinm R11, R22, 0, 0, 30 */
		/* 821A85F8h case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R22);
		/* 821A85F8h case    5:*/		return 0x821A85FC;
		  /* 821A85FCh */ case    6:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A85FCh case    6:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A85FCh case    6:*/		return 0x821A8600;
		  /* 821A8600h */ case    7:  		/* addi R11, R11, 36 */
		/* 821A8600h case    7:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A8600h case    7:*/		return 0x821A8604;
		  /* 821A8604h */ case    8:  		/* addi R10, R10, 36 */
		/* 821A8604h case    8:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A8604h case    8:*/		return 0x821A8608;
		  /* 821A8608h */ case    9:  		/* addi R8, R11, -36 */
		/* 821A8608h case    9:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A8608h case    9:*/		return 0x821A860C;
		  /* 821A860Ch */ case   10:  		/* addi R6, R10, -36 */
		/* 821A860Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A860Ch case   10:*/		return 0x821A8610;
		  /* 821A8610h */ case   11:  		/* addi R9, R10, 4 */
		/* 821A8610h case   11:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A8610h case   11:*/		return 0x821A8614;
		  /* 821A8614h */ case   12:  		/* lwz R7, <#[R11]> */
		/* 821A8614h case   12:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8614h case   12:*/		return 0x821A8618;
		  /* 821A8618h */ case   13:  		/* mr R29, R3 */
		/* 821A8618h case   13:*/		regs.R29 = regs.R3;
		/* 821A8618h case   13:*/		return 0x821A861C;
		  /* 821A861Ch */ case   14:  		/* stw R7, <#[R10]> */
		/* 821A861Ch case   14:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A861Ch case   14:*/		return 0x821A8620;
		  /* 821A8620h */ case   15:  		/* lwz R7, <#[R11]> */
		/* 821A8620h case   15:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8620h case   15:*/		return 0x821A8624;
		  /* 821A8624h */ case   16:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A8624h case   16:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A8624h case   16:*/		return 0x821A8628;
		  /* 821A8628h */ case   17:  		/* stw R6, <#[R7]> */
		/* 821A8628h case   17:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821A8628h case   17:*/		return 0x821A862C;
		  /* 821A862Ch */ case   18:  		/* stw R8, <#[R10 + 4]> */
		/* 821A862Ch case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A862Ch case   18:*/		return 0x821A8630;
		  /* 821A8630h */ case   19:  		/* stw R9, <#[R11]> */
		/* 821A8630h case   19:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8630h case   19:*/		return 0x821A8634;
		  /* 821A8634h */ case   20:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A8634h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A8634h case   20:*/		return 0x821A8638;
		  /* 821A8638h */ case   21:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A8638h case   21:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A8638h case   21:*/		return 0x821A863C;
		  /* 821A863Ch */ case   22:  		/* bc 12, CR0_EQ, 128 */
		/* 821A863Ch case   22:*/		if ( regs.CR[0].eq ) { return 0x821A86BC;  }
		/* 821A863Ch case   22:*/		return 0x821A8640;
		  /* 821A8640h */ case   23:  		/* lwz R11, <#[R22 + 8]> */
		/* 821A8640h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A8640h case   23:*/		return 0x821A8644;
		  /* 821A8644h */ case   24:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A8644h case   24:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A8644h case   24:*/		return 0x821A8648;
		  /* 821A8648h */ case   25:  		/* bc 4, CR0_EQ, 116 */
		/* 821A8648h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821A86BC;  }
		/* 821A8648h case   25:*/		return 0x821A864C;
		  /* 821A864Ch */ case   26:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A864Ch case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A864Ch case   26:*/		return 0x821A8650;
		  /* 821A8650h */ case   27:  		/* mr R3, R20 */
		/* 821A8650h case   27:*/		regs.R3 = regs.R20;
		/* 821A8650h case   27:*/		return 0x821A8654;
		  /* 821A8654h */ case   28:  		/* oris R11, R11, 128 */
		/* 821A8654h case   28:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A8654h case   28:*/		return 0x821A8658;
		  /* 821A8658h */ case   29:  		/* stw R11, <#[R29 + 8]> */
		/* 821A8658h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A8658h case   29:*/		return 0x821A865C;
		  /* 821A865Ch */ case   30:  		/* bl -150900 */
		/* 821A865Ch case   30:*/		regs.LR = 0x821A8660; return 0x821838E8;
		/* 821A865Ch case   30:*/		return 0x821A8660;
		  /* 821A8660h */ case   31:  		/* sth R3, <#[R29 + 18]> */
		/* 821A8660h case   31:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R29 + 0x00000012) );
		/* 821A8660h case   31:*/		return 0x821A8664;
		  /* 821A8664h */ case   32:  		/* lwz R3, <#[R19 + 660]> */
		/* 821A8664h case   32:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R19 + 0x00000294) );
		/* 821A8664h case   32:*/		return 0x821A8668;
		  /* 821A8668h */ case   33:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A8668h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A8668h case   33:*/		return 0x821A866C;
		  /* 821A866Ch */ case   34:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A866Ch case   34:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A866Ch case   34:*/		return 0x821A8670;
		  /* 821A8670h */ case   35:  		/* bc 4, CR0_EQ, 40 */
		/* 821A8670h case   35:*/		if ( !regs.CR[0].eq ) { return 0x821A8698;  }
		/* 821A8670h case   35:*/		return 0x821A8674;
		  /* 821A8674h */ case   36:  		/* lwz R11, <#[R3]> */
		/* 821A8674h case   36:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A8674h case   36:*/		return 0x821A8678;
		  /* 821A8678h */ case   37:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A8678h case   37:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A8678h case   37:*/		return 0x821A867C;
		  /* 821A867Ch */ case   38:  		/* addic. R11, R11, -4 */
		/* 821A867Ch case   38:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A867Ch case   38:*/		return 0x821A8680;
		  /* 821A8680h */ case   39:  		/* bc 12, CR0_EQ, 24 */
		/* 821A8680h case   39:*/		if ( regs.CR[0].eq ) { return 0x821A8698;  }
		/* 821A8680h case   39:*/		return 0x821A8684;
		  /* 821A8684h */ case   40:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A8684h case   40:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A8684h case   40:*/		return 0x821A8688;
		  /* 821A8688h */ case   41:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A8688h case   41:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A8688h case   41:*/		return 0x821A868C;
		  /* 821A868Ch */ case   42:  		/* addi R10, R10, 1 */
		/* 821A868Ch case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A868Ch case   42:*/		return 0x821A8690;
		  /* 821A8690h */ case   43:  		/* cmplw CR6, R10, R9 */
		/* 821A8690h case   43:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A8690h case   43:*/		return 0x821A8694;
		  /* 821A8694h */ case   44:  		/* bc 4, CR6_GT, 16 */
		/* 821A8694h case   44:*/		if ( !regs.CR[6].gt ) { return 0x821A86A4;  }
		/* 821A8694h case   44:*/		return 0x821A8698;
	}
	return 0x821A8698;
} // Block from 821A85E4h-821A8698h (45 instructions)

//////////////////////////////////////////////////////
// Block at 821A8698h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8698( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8698) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8698);
		  /* 821A8698h */ case    0:  		/* li R4, 1 */
		/* 821A8698h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A8698h case    0:*/		return 0x821A869C;
		  /* 821A869Ch */ case    1:  		/* bl -112084 */
		/* 821A869Ch case    1:*/		regs.LR = 0x821A86A0; return 0x8218D0C8;
		/* 821A869Ch case    1:*/		return 0x821A86A0;
		  /* 821A86A0h */ case    2:  		/* mr R11, R3 */
		/* 821A86A0h case    2:*/		regs.R11 = regs.R3;
		/* 821A86A0h case    2:*/		return 0x821A86A4;
	}
	return 0x821A86A4;
} // Block from 821A8698h-821A86A4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A86A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A86A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A86A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A86A4);
		  /* 821A86A4h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A86A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A86A4h case    0:*/		return 0x821A86A8;
		  /* 821A86A8h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A86A8h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A86A8h case    1:*/		return 0x821A86AC;
		  /* 821A86ACh */ case    2:  		/* addi R8, R10, 1 */
		/* 821A86ACh case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A86ACh case    2:*/		return 0x821A86B0;
		  /* 821A86B0h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A86B0h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A86B0h case    3:*/		return 0x821A86B4;
		  /* 821A86B4h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A86B4h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A86B4h case    4:*/		return 0x821A86B8;
		  /* 821A86B8h */ case    5:  		/* stwx R29, <#[R10 + R11]> */
		/* 821A86B8h case    5:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A86B8h case    5:*/		return 0x821A86BC;
	}
	return 0x821A86BC;
} // Block from 821A86A4h-821A86BCh (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A86BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A86BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A86BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A86BC);
		  /* 821A86BCh */ case    0:  		/* addi R21, R29, 44 */
		/* 821A86BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R29,0x2C);
		/* 821A86BCh case    0:*/		return 0x821A86C0;
		  /* 821A86C0h */ case    1:  		/* li R28, 0 */
		/* 821A86C0h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A86C0h case    1:*/		return 0x821A86C4;
		  /* 821A86C4h */ case    2:  		/* mr R30, R21 */
		/* 821A86C4h case    2:*/		regs.R30 = regs.R21;
		/* 821A86C4h case    2:*/		return 0x821A86C8;
		  /* 821A86C8h */ case    3:  		/* subf R27, R29, R22 */
		/* 821A86C8h case    3:*/		cpu::op::subf<0>(regs,&regs.R27,regs.R29,regs.R22);
		/* 821A86C8h case    3:*/		return 0x821A86CC;
		  /* 821A86CCh */ case    4:  		/* lwz R11, <#[R22 + 8]> */
		/* 821A86CCh case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A86CCh case    4:*/		return 0x821A86D0;
		  /* 821A86D0h */ case    5:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A86D0h case    5:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A86D0h case    5:*/		return 0x821A86D4;
		  /* 821A86D4h */ case    6:  		/* cmplw CR6, R28, R11 */
		/* 821A86D4h case    6:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821A86D4h case    6:*/		return 0x821A86D8;
		  /* 821A86D8h */ case    7:  		/* bc 4, CR6_LT, 184 */
		/* 821A86D8h case    7:*/		if ( !regs.CR[6].lt ) { return 0x821A8790;  }
		/* 821A86D8h case    7:*/		return 0x821A86DC;
		  /* 821A86DCh */ case    8:  		/* lwzx R31, <#[R27 + R30]> */
		/* 821A86DCh case    8:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R27 + regs.R30 + 0x00000000) );
		/* 821A86DCh case    8:*/		return 0x821A86E0;
		  /* 821A86E0h */ case    9:  		/* mr R3, R29 */
		/* 821A86E0h case    9:*/		regs.R3 = regs.R29;
		/* 821A86E0h case    9:*/		return 0x821A86E4;
		  /* 821A86E4h */ case   10:  		/* mr R4, R31 */
		/* 821A86E4h case   10:*/		regs.R4 = regs.R31;
		/* 821A86E4h case   10:*/		return 0x821A86E8;
		  /* 821A86E8h */ case   11:  		/* bl -197920 */
		/* 821A86E8h case   11:*/		regs.LR = 0x821A86EC; return 0x821781C8;
		/* 821A86E8h case   11:*/		return 0x821A86EC;
		  /* 821A86ECh */ case   12:  		/* stw R3, <#[R30]> */
		/* 821A86ECh case   12:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R30 + 0x00000000) );
		/* 821A86ECh case   12:*/		return 0x821A86F0;
		  /* 821A86F0h */ case   13:  		/* lwz R11, <#[R29 + 8]> */
		/* 821A86F0h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821A86F0h case   13:*/		return 0x821A86F4;
		  /* 821A86F4h */ case   14:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A86F4h case   14:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A86F4h case   14:*/		return 0x821A86F8;
		  /* 821A86F8h */ case   15:  		/* bc 12, CR0_EQ, 140 */
		/* 821A86F8h case   15:*/		if ( regs.CR[0].eq ) { return 0x821A8784;  }
		/* 821A86F8h case   15:*/		return 0x821A86FC;
		  /* 821A86FCh */ case   16:  		/* lwz R31, <#[R31 + 12]> */
		/* 821A86FCh case   16:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x0000000C) );
		/* 821A86FCh case   16:*/		return 0x821A8700;
		  /* 821A8700h */ case   17:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A8700h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A8700h case   17:*/		return 0x821A8704;
		  /* 821A8704h */ case   18:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A8704h case   18:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A8704h case   18:*/		return 0x821A8708;
		  /* 821A8708h */ case   19:  		/* bc 4, CR0_EQ, 124 */
		/* 821A8708h case   19:*/		if ( !regs.CR[0].eq ) { return 0x821A8784;  }
		/* 821A8708h case   19:*/		return 0x821A870C;
		  /* 821A870Ch */ case   20:  		/* oris R11, R11, 128 */
		/* 821A870Ch case   20:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A870Ch case   20:*/		return 0x821A8710;
		  /* 821A8710h */ case   21:  		/* mr R3, R20 */
		/* 821A8710h case   21:*/		regs.R3 = regs.R20;
		/* 821A8710h case   21:*/		return 0x821A8714;
		  /* 821A8714h */ case   22:  		/* stw R11, <#[R31 + 8]> */
		/* 821A8714h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A8714h case   22:*/		return 0x821A8718;
		  /* 821A8718h */ case   23:  		/* bl -151088 */
		/* 821A8718h case   23:*/		regs.LR = 0x821A871C; return 0x821838E8;
		/* 821A8718h case   23:*/		return 0x821A871C;
		  /* 821A871Ch */ case   24:  		/* sth R3, <#[R31 + 18]> */
		/* 821A871Ch case   24:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 821A871Ch case   24:*/		return 0x821A8720;
		  /* 821A8720h */ case   25:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A8720h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A8720h case   25:*/		return 0x821A8724;
		  /* 821A8724h */ case   26:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 821A8724h case   26:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 821A8724h case   26:*/		return 0x821A8728;
		  /* 821A8728h */ case   27:  		/* stw R11, <#[R31 + 16]> */
		/* 821A8728h case   27:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A8728h case   27:*/		return 0x821A872C;
		  /* 821A872Ch */ case   28:  		/* lwz R3, <#[R19 + 660]> */
		/* 821A872Ch case   28:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R19 + 0x00000294) );
		/* 821A872Ch case   28:*/		return 0x821A8730;
		  /* 821A8730h */ case   29:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A8730h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A8730h case   29:*/		return 0x821A8734;
		  /* 821A8734h */ case   30:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A8734h case   30:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A8734h case   30:*/		return 0x821A8738;
		  /* 821A8738h */ case   31:  		/* bc 4, CR0_EQ, 40 */
		/* 821A8738h case   31:*/		if ( !regs.CR[0].eq ) { return 0x821A8760;  }
		/* 821A8738h case   31:*/		return 0x821A873C;
		  /* 821A873Ch */ case   32:  		/* lwz R11, <#[R3]> */
		/* 821A873Ch case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A873Ch case   32:*/		return 0x821A8740;
		  /* 821A8740h */ case   33:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A8740h case   33:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A8740h case   33:*/		return 0x821A8744;
		  /* 821A8744h */ case   34:  		/* addic. R11, R11, -4 */
		/* 821A8744h case   34:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A8744h case   34:*/		return 0x821A8748;
		  /* 821A8748h */ case   35:  		/* bc 12, CR0_EQ, 24 */
		/* 821A8748h case   35:*/		if ( regs.CR[0].eq ) { return 0x821A8760;  }
		/* 821A8748h case   35:*/		return 0x821A874C;
		  /* 821A874Ch */ case   36:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A874Ch case   36:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A874Ch case   36:*/		return 0x821A8750;
		  /* 821A8750h */ case   37:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A8750h case   37:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A8750h case   37:*/		return 0x821A8754;
		  /* 821A8754h */ case   38:  		/* addi R10, R10, 1 */
		/* 821A8754h case   38:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A8754h case   38:*/		return 0x821A8758;
		  /* 821A8758h */ case   39:  		/* cmplw CR6, R10, R9 */
		/* 821A8758h case   39:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A8758h case   39:*/		return 0x821A875C;
		  /* 821A875Ch */ case   40:  		/* bc 4, CR6_GT, 16 */
		/* 821A875Ch case   40:*/		if ( !regs.CR[6].gt ) { return 0x821A876C;  }
		/* 821A875Ch case   40:*/		return 0x821A8760;
	}
	return 0x821A8760;
} // Block from 821A86BCh-821A8760h (41 instructions)

//////////////////////////////////////////////////////
// Block at 821A8760h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8760( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8760) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8760);
		  /* 821A8760h */ case    0:  		/* li R4, 1 */
		/* 821A8760h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A8760h case    0:*/		return 0x821A8764;
		  /* 821A8764h */ case    1:  		/* bl -112284 */
		/* 821A8764h case    1:*/		regs.LR = 0x821A8768; return 0x8218D0C8;
		/* 821A8764h case    1:*/		return 0x821A8768;
		  /* 821A8768h */ case    2:  		/* mr R11, R3 */
		/* 821A8768h case    2:*/		regs.R11 = regs.R3;
		/* 821A8768h case    2:*/		return 0x821A876C;
	}
	return 0x821A876C;
} // Block from 821A8760h-821A876Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A876Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A876C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A876C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A876C);
		  /* 821A876Ch */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A876Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A876Ch case    0:*/		return 0x821A8770;
		  /* 821A8770h */ case    1:  		/* addi R9, R10, 4 */
		/* 821A8770h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A8770h case    1:*/		return 0x821A8774;
		  /* 821A8774h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A8774h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A8774h case    2:*/		return 0x821A8778;
		  /* 821A8778h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A8778h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A8778h case    3:*/		return 0x821A877C;
		  /* 821A877Ch */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A877Ch case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A877Ch case    4:*/		return 0x821A8780;
		  /* 821A8780h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A8780h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A8780h case    5:*/		return 0x821A8784;
	}
	return 0x821A8784;
} // Block from 821A876Ch-821A8784h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A8784h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8784( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8784) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8784);
		  /* 821A8784h */ case    0:  		/* addi R28, R28, 1 */
		/* 821A8784h case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821A8784h case    0:*/		return 0x821A8788;
		  /* 821A8788h */ case    1:  		/* addi R30, R30, 4 */
		/* 821A8788h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A8788h case    1:*/		return 0x821A878C;
		  /* 821A878Ch */ case    2:  		/* b -192 */
		/* 821A878Ch case    2:*/		return 0x821A86CC;
		/* 821A878Ch case    2:*/		return 0x821A8790;
	}
	return 0x821A8790;
} // Block from 821A8784h-821A8790h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A8790h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8790( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8790) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8790);
		  /* 821A8790h */ case    0:  		/* addi R11, R18, 10 */
		/* 821A8790h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R18,0xA);
		/* 821A8790h case    0:*/		return 0x821A8794;
		  /* 821A8794h */ case    1:  		/* lwz R23, <#[R1 + 112]> */
		/* 821A8794h case    1:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000070) );
		/* 821A8794h case    1:*/		return 0x821A8798;
		  /* 821A8798h */ case    2:  		/* mr R26, R18 */
		/* 821A8798h case    2:*/		regs.R26 = regs.R18;
		/* 821A8798h case    2:*/		return 0x821A879C;
		  /* 821A879Ch */ case    3:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A879Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A879Ch case    3:*/		return 0x821A87A0;
		  /* 821A87A0h */ case    4:  		/* mr R25, R17 */
		/* 821A87A0h case    4:*/		regs.R25 = regs.R17;
		/* 821A87A0h case    4:*/		return 0x821A87A4;
		  /* 821A87A4h */ case    5:  		/* add R24, R11, R29 */
		/* 821A87A4h case    5:*/		cpu::op::add<0>(regs,&regs.R24,regs.R11,regs.R29);
		/* 821A87A4h case    5:*/		return 0x821A87A8;
		  /* 821A87A8h */ case    6:  		/* cmplwi CR6, R25, 0 */
		/* 821A87A8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821A87A8h case    6:*/		return 0x821A87AC;
		  /* 821A87ACh */ case    7:  		/* bc 12, CR6_EQ, 420 */
		/* 821A87ACh case    7:*/		if ( regs.CR[6].eq ) { return 0x821A8950;  }
		/* 821A87ACh case    7:*/		return 0x821A87B0;
		  /* 821A87B0h */ case    8:  		/* addi R11, R25, -1 */
		/* 821A87B0h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821A87B0h case    8:*/		return 0x821A87B4;
		  /* 821A87B4h */ case    9:  		/* mr R3, R29 */
		/* 821A87B4h case    9:*/		regs.R3 = regs.R29;
		/* 821A87B4h case    9:*/		return 0x821A87B8;
		  /* 821A87B8h */ case   10:  		/* andc R11, R25, R11 */
		/* 821A87B8h case   10:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821A87B8h case   10:*/		return 0x821A87BC;
		  /* 821A87BCh */ case   11:  		/* cntlzw R11, R11 */
		/* 821A87BCh case   11:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A87BCh case   11:*/		return 0x821A87C0;
		  /* 821A87C0h */ case   12:  		/* subfic R31, R11, 31 */
		/* 821A87C0h case   12:*/		cpu::op::subfic<0>(regs,&regs.R31,regs.R11,0x1F);
		/* 821A87C0h case   12:*/		return 0x821A87C4;
		  /* 821A87C4h */ case   13:  		/* addi R11, R31, 11 */
		/* 821A87C4h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xB);
		/* 821A87C4h case   13:*/		return 0x821A87C8;
		  /* 821A87C8h */ case   14:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A87C8h case   14:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A87C8h case   14:*/		return 0x821A87CC;
		  /* 821A87CCh */ case   15:  		/* lwzx R4, <#[R11 + R20]> */
		/* 821A87CCh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R20 + 0x00000000) );
		/* 821A87CCh case   15:*/		return 0x821A87D0;
		  /* 821A87D0h */ case   16:  		/* bl -198152 */
		/* 821A87D0h case   16:*/		regs.LR = 0x821A87D4; return 0x821781C8;
		/* 821A87D0h case   16:*/		return 0x821A87D4;
		  /* 821A87D4h */ case   17:  		/* stwu R3, <#[R24 + 4]> */
		/* 821A87D4h case   17:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R24 + 0x00000004) );
		regs.R24 = (uint32)(regs.R24 + 0x00000004);
		/* 821A87D4h case   17:*/		return 0x821A87D8;
		  /* 821A87D8h */ case   18:  		/* rlwinm R11, R31, 1, 0, 30 */
		/* 821A87D8h case   18:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R31);
		/* 821A87D8h case   18:*/		return 0x821A87DC;
		  /* 821A87DCh */ case   19:  		/* li R10, 3 */
		/* 821A87DCh case   19:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821A87DCh case   19:*/		return 0x821A87E0;
		  /* 821A87E0h */ case   20:  		/* slw R9, R26, R11 */
		/* 821A87E0h case   20:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R26,regs.R11);
		/* 821A87E0h case   20:*/		return 0x821A87E4;
		  /* 821A87E4h */ case   21:  		/* slw R11, R10, R11 */
		/* 821A87E4h case   21:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A87E4h case   21:*/		return 0x821A87E8;
		  /* 821A87E8h */ case   22:  		/* andc R11, R23, R11 */
		/* 821A87E8h case   22:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 821A87E8h case   22:*/		return 0x821A87EC;
		  /* 821A87ECh */ case   23:  		/* lwz R31, <#[R3 + 12]> */
		/* 821A87ECh case   23:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R3 + 0x0000000C) );
		/* 821A87ECh case   23:*/		return 0x821A87F0;
		  /* 821A87F0h */ case   24:  		/* addi R26, R26, 1 */
		/* 821A87F0h case   24:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821A87F0h case   24:*/		return 0x821A87F4;
		  /* 821A87F4h */ case   25:  		/* or R23, R11, R9 */
		/* 821A87F4h case   25:*/		cpu::op::or<0>(regs,&regs.R23,regs.R11,regs.R9);
		/* 821A87F4h case   25:*/		return 0x821A87F8;
		  /* 821A87F8h */ case   26:  		/* cmplwi CR6, R18, 0 */
		/* 821A87F8h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821A87F8h case   26:*/		return 0x821A87FC;
		  /* 821A87FCh */ case   27:  		/* bc 12, CR6_EQ, 180 */
		/* 821A87FCh case   27:*/		if ( regs.CR[6].eq ) { return 0x821A88B0;  }
		/* 821A87FCh case   27:*/		return 0x821A8800;
		  /* 821A8800h */ case   28:  		/* mr R28, R21 */
		/* 821A8800h case   28:*/		regs.R28 = regs.R21;
		/* 821A8800h case   28:*/		return 0x821A8804;
		  /* 821A8804h */ case   29:  		/* li R30, 0 */
		/* 821A8804h case   29:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A8804h case   29:*/		return 0x821A8808;
		  /* 821A8808h */ case   30:  		/* mr R27, R18 */
		/* 821A8808h case   30:*/		regs.R27 = regs.R18;
		/* 821A8808h case   30:*/		return 0x821A880C;
		  /* 821A880Ch */ case   31:  		/* addi R11, R1, 128 */
		/* 821A880Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 821A880Ch case   31:*/		return 0x821A8810;
		  /* 821A8810h */ case   32:  		/* lwzx R11, <#[R30 + R11]> */
		/* 821A8810h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + regs.R11 + 0x00000000) );
		/* 821A8810h case   32:*/		return 0x821A8814;
		  /* 821A8814h */ case   33:  		/* cmplw CR6, R11, R31 */
		/* 821A8814h case   33:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821A8814h case   33:*/		return 0x821A8818;
		  /* 821A8818h */ case   34:  		/* bc 4, CR6_EQ, 136 */
		/* 821A8818h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821A88A0;  }
		/* 821A8818h case   34:*/		return 0x821A881C;
		  /* 821A881Ch */ case   35:  		/* lwz R11, <#[R28]> */
		/* 821A881Ch case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821A881Ch case   35:*/		return 0x821A8820;
		  /* 821A8820h */ case   36:  		/* lwz R4, <#[R11 + 12]> */
		/* 821A8820h case   36:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A8820h case   36:*/		return 0x821A8824;
		  /* 821A8824h */ case   37:  		/* cmplw CR6, R4, R31 */
		/* 821A8824h case   37:*/		cpu::op::cmplw<6>(regs,regs.R4,regs.R31);
		/* 821A8824h case   37:*/		return 0x821A8828;
		  /* 821A8828h */ case   38:  		/* bc 12, CR6_EQ, 120 */
		/* 821A8828h case   38:*/		if ( regs.CR[6].eq ) { return 0x821A88A0;  }
		/* 821A8828h case   38:*/		return 0x821A882C;
		  /* 821A882Ch */ case   39:  		/* lwz R9, <#[R4 + 4]> */
		/* 821A882Ch case   39:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R4 + 0x00000004) );
		/* 821A882Ch case   39:*/		return 0x821A8830;
		  /* 821A8830h */ case   40:  		/* addi R10, R4, 4 */
		/* 821A8830h case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R4,0x4);
		/* 821A8830h case   40:*/		return 0x821A8834;
		  /* 821A8834h */ case   41:  		/* b 12 */
		/* 821A8834h case   41:*/		return 0x821A8840;
		/* 821A8834h case   41:*/		return 0x821A8838;
		  /* 821A8838h */ case   42:  		/* addi R10, R9, 8 */
		/* 821A8838h case   42:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A8838h case   42:*/		return 0x821A883C;
		  /* 821A883Ch */ case   43:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A883Ch case   43:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A883Ch case   43:*/		return 0x821A8840;
	}
	return 0x821A8840;
} // Block from 821A8790h-821A8840h (44 instructions)

//////////////////////////////////////////////////////
// Block at 821A8840h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8840( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8840) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8840);
		  /* 821A8840h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A8840h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A8840h case    0:*/		return 0x821A8844;
		  /* 821A8844h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A8844h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A8838;  }
		/* 821A8844h case    1:*/		return 0x821A8848;
		  /* 821A8848h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A8848h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A8848h case    2:*/		return 0x821A884C;
		  /* 821A884Ch */ case    3:  		/* addi R8, R1, 160 */
		/* 821A884Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0xA0);
		/* 821A884Ch case    3:*/		return 0x821A8850;
		  /* 821A8850h */ case    4:  		/* addi R7, R1, 176 */
		/* 821A8850h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xB0);
		/* 821A8850h case    4:*/		return 0x821A8854;
		  /* 821A8854h */ case    5:  		/* mr R3, R19 */
		/* 821A8854h case    5:*/		regs.R3 = regs.R19;
		/* 821A8854h case    5:*/		return 0x821A8858;
		  /* 821A8858h */ case    6:  		/* stw R9, <#[R10]> */
		/* 821A8858h case    6:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A8858h case    6:*/		return 0x821A885C;
		  /* 821A885Ch */ case    7:  		/* lwz R10, <#[R31 + 4]> */
		/* 821A885Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821A885Ch case    7:*/		return 0x821A8860;
		  /* 821A8860h */ case    8:  		/* stw R10, <#[R11 + 8]> */
		/* 821A8860h case    8:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A8860h case    8:*/		return 0x821A8864;
		  /* 821A8864h */ case    9:  		/* stw R11, <#[R31 + 4]> */
		/* 821A8864h case    9:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821A8864h case    9:*/		return 0x821A8868;
		  /* 821A8868h */ case   10:  		/* stw R31, <#[R11 + 12]> */
		/* 821A8868h case   10:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A8868h case   10:*/		return 0x821A886C;
		  /* 821A886Ch */ case   11:  		/* lwzx R9, <#[R30 + R8]> */
		/* 821A886Ch case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R8 + 0x00000000) );
		/* 821A886Ch case   11:*/		return 0x821A8870;
		  /* 821A8870h */ case   12:  		/* rlwinm R9, R9, 5, 22, 26 */
		/* 821A8870h case   12:*/		cpu::op::rlwinm<0,5,22,26>(regs,&regs.R9,regs.R9);
		/* 821A8870h case   12:*/		return 0x821A8874;
		  /* 821A8874h */ case   13:  		/* lwz R10, <#[R11]> */
		/* 821A8874h case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8874h case   13:*/		return 0x821A8878;
		  /* 821A8878h */ case   14:  		/* rlwinm R9, R9, 0, 25, 23 */
		/* 821A8878h case   14:*/		cpu::op::rlwinm<0,0,25,23>(regs,&regs.R9,regs.R9);
		/* 821A8878h case   14:*/		return 0x821A887C;
		  /* 821A887Ch */ case   15:  		/* rlwinm R10, R10, 0, 27, 24 */
		/* 821A887Ch case   15:*/		cpu::op::rlwinm<0,0,27,24>(regs,&regs.R10,regs.R10);
		/* 821A887Ch case   15:*/		return 0x821A8880;
		  /* 821A8880h */ case   16:  		/* ori R9, R9, 7296 */
		/* 821A8880h case   16:*/		cpu::op::ori<0>(regs,&regs.R9,regs.R9,0x1C80);
		/* 821A8880h case   16:*/		return 0x821A8884;
		  /* 821A8884h */ case   17:  		/* rlwinm R10, R10, 0, 24, 21 */
		/* 821A8884h case   17:*/		cpu::op::rlwinm<0,0,24,21>(regs,&regs.R10,regs.R10);
		/* 821A8884h case   17:*/		return 0x821A8888;
		  /* 821A8888h */ case   18:  		/* or R10, R9, R10 */
		/* 821A8888h case   18:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A8888h case   18:*/		return 0x821A888C;
		  /* 821A888Ch */ case   19:  		/* stw R10, <#[R11]> */
		/* 821A888Ch case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A888Ch case   19:*/		return 0x821A8890;
		  /* 821A8890h */ case   20:  		/* lwzx R9, <#[R30 + R7]> */
		/* 821A8890h case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R30 + regs.R7 + 0x00000000) );
		/* 821A8890h case   20:*/		return 0x821A8894;
		  /* 821A8894h */ case   21:  		/* rlwimi R9, R10, 0, 0, 26 */
		/* 821A8894h case   21:*/		cpu::op::rlwimi<0,0,0,26>(regs,&regs.R9,regs.R10);
		/* 821A8894h case   21:*/		return 0x821A8898;
		  /* 821A8898h */ case   22:  		/* stw R9, <#[R11]> */
		/* 821A8898h case   22:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8898h case   22:*/		return 0x821A889C;
		  /* 821A889Ch */ case   23:  		/* bl -32228 */
		/* 821A889Ch case   23:*/		regs.LR = 0x821A88A0; return 0x821A0AB8;
		/* 821A889Ch case   23:*/		return 0x821A88A0;
	}
	return 0x821A88A0;
} // Block from 821A8840h-821A88A0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821A88A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A88A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A88A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A88A0);
		  /* 821A88A0h */ case    0:  		/* addic. R27, R27, -1 */
		/* 821A88A0h case    0:*/		cpu::op::addic<1>(regs,&regs.R27,regs.R27,0xFFFFFFFF);
		/* 821A88A0h case    0:*/		return 0x821A88A4;
		  /* 821A88A4h */ case    1:  		/* addi R30, R30, 4 */
		/* 821A88A4h case    1:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x4);
		/* 821A88A4h case    1:*/		return 0x821A88A8;
		  /* 821A88A8h */ case    2:  		/* addi R28, R28, 4 */
		/* 821A88A8h case    2:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821A88A8h case    2:*/		return 0x821A88AC;
		  /* 821A88ACh */ case    3:  		/* bc 4, CR0_EQ, -160 */
		/* 821A88ACh case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A880C;  }
		/* 821A88ACh case    3:*/		return 0x821A88B0;
	}
	return 0x821A88B0;
} // Block from 821A88A0h-821A88B0h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A88B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A88B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A88B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A88B0);
		  /* 821A88B0h */ case    0:  		/* lwz R11, <#[R22 + 8]> */
		/* 821A88B0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A88B0h case    0:*/		return 0x821A88B4;
		  /* 821A88B4h */ case    1:  		/* rlwinm. R11, R11, 9, 31, 31 */
		/* 821A88B4h case    1:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R11);
		/* 821A88B4h case    1:*/		return 0x821A88B8;
		  /* 821A88B8h */ case    2:  		/* bc 12, CR0_EQ, 136 */
		/* 821A88B8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A8940;  }
		/* 821A88B8h case    2:*/		return 0x821A88BC;
		  /* 821A88BCh */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A88BCh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A88BCh case    3:*/		return 0x821A88C0;
		  /* 821A88C0h */ case    4:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821A88C0h case    4:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821A88C0h case    4:*/		return 0x821A88C4;
		  /* 821A88C4h */ case    5:  		/* bc 4, CR0_EQ, 124 */
		/* 821A88C4h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821A8940;  }
		/* 821A88C4h case    5:*/		return 0x821A88C8;
		  /* 821A88C8h */ case    6:  		/* oris R11, R11, 128 */
		/* 821A88C8h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x80);
		/* 821A88C8h case    6:*/		return 0x821A88CC;
		  /* 821A88CCh */ case    7:  		/* mr R3, R22 */
		/* 821A88CCh case    7:*/		regs.R3 = regs.R22;
		/* 821A88CCh case    7:*/		return 0x821A88D0;
		  /* 821A88D0h */ case    8:  		/* stw R11, <#[R31 + 8]> */
		/* 821A88D0h case    8:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A88D0h case    8:*/		return 0x821A88D4;
		  /* 821A88D4h */ case    9:  		/* bl -151532 */
		/* 821A88D4h case    9:*/		regs.LR = 0x821A88D8; return 0x821838E8;
		/* 821A88D4h case    9:*/		return 0x821A88D8;
		  /* 821A88D8h */ case   10:  		/* sth R3, <#[R31 + 18]> */
		/* 821A88D8h case   10:*/		cpu::mem::store16( regs, regs.R3, (uint32)(regs.R31 + 0x00000012) );
		/* 821A88D8h case   10:*/		return 0x821A88DC;
		  /* 821A88DCh */ case   11:  		/* lwz R11, <#[R31 + 16]> */
		/* 821A88DCh case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A88DCh case   11:*/		return 0x821A88E0;
		  /* 821A88E0h */ case   12:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 821A88E0h case   12:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 821A88E0h case   12:*/		return 0x821A88E4;
		  /* 821A88E4h */ case   13:  		/* stw R11, <#[R31 + 16]> */
		/* 821A88E4h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821A88E4h case   13:*/		return 0x821A88E8;
		  /* 821A88E8h */ case   14:  		/* lwz R3, <#[R19 + 660]> */
		/* 821A88E8h case   14:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R19 + 0x00000294) );
		/* 821A88E8h case   14:*/		return 0x821A88EC;
		  /* 821A88ECh */ case   15:  		/* lwz R11, <#[R3 + 4]> */
		/* 821A88ECh case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821A88ECh case   15:*/		return 0x821A88F0;
		  /* 821A88F0h */ case   16:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A88F0h case   16:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A88F0h case   16:*/		return 0x821A88F4;
		  /* 821A88F4h */ case   17:  		/* bc 4, CR0_EQ, 40 */
		/* 821A88F4h case   17:*/		if ( !regs.CR[0].eq ) { return 0x821A891C;  }
		/* 821A88F4h case   17:*/		return 0x821A88F8;
		  /* 821A88F8h */ case   18:  		/* lwz R11, <#[R3]> */
		/* 821A88F8h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A88F8h case   18:*/		return 0x821A88FC;
		  /* 821A88FCh */ case   19:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821A88FCh case   19:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821A88FCh case   19:*/		return 0x821A8900;
		  /* 821A8900h */ case   20:  		/* addic. R11, R11, -4 */
		/* 821A8900h case   20:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821A8900h case   20:*/		return 0x821A8904;
		  /* 821A8904h */ case   21:  		/* bc 12, CR0_EQ, 24 */
		/* 821A8904h case   21:*/		if ( regs.CR[0].eq ) { return 0x821A891C;  }
		/* 821A8904h case   21:*/		return 0x821A8908;
		  /* 821A8908h */ case   22:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A8908h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A8908h case   22:*/		return 0x821A890C;
		  /* 821A890Ch */ case   23:  		/* lwz R9, <#[R11 + 12]> */
		/* 821A890Ch case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A890Ch case   23:*/		return 0x821A8910;
		  /* 821A8910h */ case   24:  		/* addi R10, R10, 1 */
		/* 821A8910h case   24:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A8910h case   24:*/		return 0x821A8914;
		  /* 821A8914h */ case   25:  		/* cmplw CR6, R10, R9 */
		/* 821A8914h case   25:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821A8914h case   25:*/		return 0x821A8918;
		  /* 821A8918h */ case   26:  		/* bc 4, CR6_GT, 16 */
		/* 821A8918h case   26:*/		if ( !regs.CR[6].gt ) { return 0x821A8928;  }
		/* 821A8918h case   26:*/		return 0x821A891C;
	}
	return 0x821A891C;
} // Block from 821A88B0h-821A891Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A891Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A891C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A891C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A891C);
		  /* 821A891Ch */ case    0:  		/* li R4, 1 */
		/* 821A891Ch case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A891Ch case    0:*/		return 0x821A8920;
		  /* 821A8920h */ case    1:  		/* bl -112728 */
		/* 821A8920h case    1:*/		regs.LR = 0x821A8924; return 0x8218D0C8;
		/* 821A8920h case    1:*/		return 0x821A8924;
		  /* 821A8924h */ case    2:  		/* mr R11, R3 */
		/* 821A8924h case    2:*/		regs.R11 = regs.R3;
		/* 821A8924h case    2:*/		return 0x821A8928;
	}
	return 0x821A8928;
} // Block from 821A891Ch-821A8928h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A8928h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8928( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8928) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8928);
		  /* 821A8928h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821A8928h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A8928h case    0:*/		return 0x821A892C;
		  /* 821A892Ch */ case    1:  		/* addi R9, R10, 4 */
		/* 821A892Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A892Ch case    1:*/		return 0x821A8930;
		  /* 821A8930h */ case    2:  		/* addi R8, R10, 1 */
		/* 821A8930h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821A8930h case    2:*/		return 0x821A8934;
		  /* 821A8934h */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821A8934h case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821A8934h case    3:*/		return 0x821A8938;
		  /* 821A8938h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821A8938h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821A8938h case    4:*/		return 0x821A893C;
		  /* 821A893Ch */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821A893Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A893Ch case    5:*/		return 0x821A8940;
	}
	return 0x821A8940;
} // Block from 821A8928h-821A8940h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A8940h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8940( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8940) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8940);
		  /* 821A8940h */ case    0:  		/* addi R11, R25, -1 */
		/* 821A8940h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R25,0xFFFFFFFF);
		/* 821A8940h case    0:*/		return 0x821A8944;
		  /* 821A8944h */ case    1:  		/* andc R11, R25, R11 */
		/* 821A8944h case    1:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R25,regs.R11);
		/* 821A8944h case    1:*/		return 0x821A8948;
		  /* 821A8948h */ case    2:  		/* subf R25, R11, R25 */
		/* 821A8948h case    2:*/		cpu::op::subf<0>(regs,&regs.R25,regs.R11,regs.R25);
		/* 821A8948h case    2:*/		return 0x821A894C;
		  /* 821A894Ch */ case    3:  		/* b -420 */
		/* 821A894Ch case    3:*/		return 0x821A87A8;
		/* 821A894Ch case    3:*/		return 0x821A8950;
	}
	return 0x821A8950;
} // Block from 821A8940h-821A8950h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A8950h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8950( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8950) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8950);
		  /* 821A8950h */ case    0:  		/* li R8, 0 */
		/* 821A8950h case    0:*/		cpu::op::li<0>(regs,&regs.R8,0x0);
		/* 821A8950h case    0:*/		return 0x821A8954;
		  /* 821A8954h */ case    1:  		/* li R7, 1 */
		/* 821A8954h case    1:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A8954h case    1:*/		return 0x821A8958;
		  /* 821A8958h */ case    2:  		/* li R6, 228 */
		/* 821A8958h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0xE4);
		/* 821A8958h case    2:*/		return 0x821A895C;
		  /* 821A895Ch */ case    3:  		/* mr R5, R29 */
		/* 821A895Ch case    3:*/		regs.R5 = regs.R29;
		/* 821A895Ch case    3:*/		return 0x821A8960;
		  /* 821A8960h */ case    4:  		/* mr R4, R22 */
		/* 821A8960h case    4:*/		regs.R4 = regs.R22;
		/* 821A8960h case    4:*/		return 0x821A8964;
		  /* 821A8964h */ case    5:  		/* mr R3, R19 */
		/* 821A8964h case    5:*/		regs.R3 = regs.R19;
		/* 821A8964h case    5:*/		return 0x821A8968;
		  /* 821A8968h */ case    6:  		/* bl -15624 */
		/* 821A8968h case    6:*/		regs.LR = 0x821A896C; return 0x821A4C60;
		/* 821A8968h case    6:*/		return 0x821A896C;
		  /* 821A896Ch */ case    7:  		/* mr R22, R29 */
		/* 821A896Ch case    7:*/		regs.R22 = regs.R29;
		/* 821A896Ch case    7:*/		return 0x821A8970;
		  /* 821A8970h */ case    8:  		/* b 8 */
		/* 821A8970h case    8:*/		return 0x821A8978;
		/* 821A8970h case    8:*/		return 0x821A8974;
	}
	return 0x821A8974;
} // Block from 821A8950h-821A8974h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A8974h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8974( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8974) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8974);
		  /* 821A8974h */ case    0:  		/* lwz R23, <#[R1 + 112]> */
		/* 821A8974h case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x00000070) );
		/* 821A8974h case    0:*/		return 0x821A8978;
	}
	return 0x821A8978;
} // Block from 821A8974h-821A8978h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A8978h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8978( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8978) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8978);
		  /* 821A8978h */ case    0:  		/* li R7, 0 */
		/* 821A8978h case    0:*/		cpu::op::li<0>(regs,&regs.R7,0x0);
		/* 821A8978h case    0:*/		return 0x821A897C;
		  /* 821A897Ch */ case    1:  		/* li R6, 1 */
		/* 821A897Ch case    1:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A897Ch case    1:*/		return 0x821A8980;
		  /* 821A8980h */ case    2:  		/* mr R5, R20 */
		/* 821A8980h case    2:*/		regs.R5 = regs.R20;
		/* 821A8980h case    2:*/		return 0x821A8984;
		  /* 821A8984h */ case    3:  		/* mr R4, R22 */
		/* 821A8984h case    3:*/		regs.R4 = regs.R22;
		/* 821A8984h case    3:*/		return 0x821A8988;
		  /* 821A8988h */ case    4:  		/* mr R3, R19 */
		/* 821A8988h case    4:*/		regs.R3 = regs.R19;
		/* 821A8988h case    4:*/		return 0x821A898C;
		  /* 821A898Ch */ case    5:  		/* bl 545276 */
		/* 821A898Ch case    5:*/		regs.LR = 0x821A8990; return 0x8222DB88;
		/* 821A898Ch case    5:*/		return 0x821A8990;
		  /* 821A8990h */ case    6:  		/* addi R8, R20, 4 */
		/* 821A8990h case    6:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R20,0x4);
		/* 821A8990h case    6:*/		return 0x821A8994;
		  /* 821A8994h */ case    7:  		/* lwz R11, <#[R8]> */
		/* 821A8994h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A8994h case    7:*/		return 0x821A8998;
		  /* 821A8998h */ case    8:  		/* cmplwi CR6, R11, 0 */
		/* 821A8998h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A8998h case    8:*/		return 0x821A899C;
		  /* 821A899Ch */ case    9:  		/* bc 12, CR6_EQ, 160 */
		/* 821A899Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821A8A3C;  }
		/* 821A899Ch case    9:*/		return 0x821A89A0;
		  /* 821A89A0h */ case   10:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A89A0h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A89A0h case   10:*/		return 0x821A89A4;
		  /* 821A89A4h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821A89A4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A89A4h case   11:*/		return 0x821A89A8;
		  /* 821A89A8h */ case   12:  		/* bc 12, CR6_EQ, 128 */
		/* 821A89A8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821A8A28;  }
		/* 821A89A8h case   12:*/		return 0x821A89AC;
		  /* 821A89ACh */ case   13:  		/* lwz R10, <#[R11 + 12]> */
		/* 821A89ACh case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A89ACh case   13:*/		return 0x821A89B0;
		  /* 821A89B0h */ case   14:  		/* addi R10, R10, 4 */
		/* 821A89B0h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A89B0h case   14:*/		return 0x821A89B4;
		  /* 821A89B4h */ case   15:  		/* lwz R9, <#[R10]> */
		/* 821A89B4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A89B4h case   15:*/		return 0x821A89B8;
		  /* 821A89B8h */ case   16:  		/* b 12 */
		/* 821A89B8h case   16:*/		return 0x821A89C4;
		/* 821A89B8h case   16:*/		return 0x821A89BC;
		  /* 821A89BCh */ case   17:  		/* addi R10, R9, 8 */
		/* 821A89BCh case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821A89BCh case   17:*/		return 0x821A89C0;
		  /* 821A89C0h */ case   18:  		/* lwz R9, <#[R9 + 8]> */
		/* 821A89C0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821A89C0h case   18:*/		return 0x821A89C4;
	}
	return 0x821A89C4;
} // Block from 821A8978h-821A89C4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A89C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A89C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A89C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A89C4);
		  /* 821A89C4h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821A89C4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821A89C4h case    0:*/		return 0x821A89C8;
		  /* 821A89C8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821A89C8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A89BC;  }
		/* 821A89C8h case    1:*/		return 0x821A89CC;
		  /* 821A89CCh */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821A89CCh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821A89CCh case    2:*/		return 0x821A89D0;
		  /* 821A89D0h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821A89D0h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821A89D0h case    3:*/		return 0x821A89D4;
		  /* 821A89D4h */ case    4:  		/* lwz R10, <#[R22 + 4]> */
		/* 821A89D4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R22 + 0x00000004) );
		/* 821A89D4h case    4:*/		return 0x821A89D8;
		  /* 821A89D8h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821A89D8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821A89D8h case    5:*/		return 0x821A89DC;
		  /* 821A89DCh */ case    6:  		/* stw R11, <#[R22 + 4]> */
		/* 821A89DCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000004) );
		/* 821A89DCh case    6:*/		return 0x821A89E0;
		  /* 821A89E0h */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821A89E0h case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A89E0h case    7:*/		return 0x821A89E4;
		  /* 821A89E4h */ case    8:  		/* rlwinm R9, R10, 22, 29, 30 */
		/* 821A89E4h case    8:*/		cpu::op::rlwinm<0,22,29,30>(regs,&regs.R9,regs.R10);
		/* 821A89E4h case    8:*/		return 0x821A89E8;
		  /* 821A89E8h */ case    9:  		/* rlwinm R7, R10, 24, 29, 30 */
		/* 821A89E8h case    9:*/		cpu::op::rlwinm<0,24,29,30>(regs,&regs.R7,regs.R10);
		/* 821A89E8h case    9:*/		return 0x821A89EC;
		  /* 821A89ECh */ case   10:  		/* stw R22, <#[R11 + 12]> */
		/* 821A89ECh case   10:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A89ECh case   10:*/		return 0x821A89F0;
		  /* 821A89F0h */ case   11:  		/* srw R9, R23, R9 */
		/* 821A89F0h case   11:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821A89F0h case   11:*/		return 0x821A89F4;
		  /* 821A89F4h */ case   12:  		/* srw R7, R23, R7 */
		/* 821A89F4h case   12:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R7);
		/* 821A89F4h case   12:*/		return 0x821A89F8;
	}
	return 0x821A89F8;
} // Block from 821A89C4h-821A89F8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A89F8h
// Function '?VectorizeIdenticalDependents@Compiler@D3DXShader@@AAA_NPAVInstruction@2@0PAVBlock@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A89F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A89F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A89F8);
		  /* 821A89F8h */ case    0:  		/* rlwimi R7, R9, 2, 28, 29 */
		/* 821A89F8h case    0:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R7,regs.R9);
		/* 821A89F8h case    0:*/		return 0x821A89FC;
		  /* 821A89FCh */ case    1:  		/* rlwinm R9, R10, 26, 29, 30 */
		/* 821A89FCh case    1:*/		cpu::op::rlwinm<0,26,29,30>(regs,&regs.R9,regs.R10);
		/* 821A89FCh case    1:*/		return 0x821A8A00;
		  /* 821A8A00h */ case    2:  		/* rlwinm R7, R7, 0, 28, 31 */
		/* 821A8A00h case    2:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R7,regs.R7);
		/* 821A8A00h case    2:*/		return 0x821A8A04;
		  /* 821A8A04h */ case    3:  		/* srw R9, R23, R9 */
		/* 821A8A04h case    3:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R23,regs.R9);
		/* 821A8A04h case    3:*/		return 0x821A8A08;
		  /* 821A8A08h */ case    4:  		/* rlwinm R6, R10, 28, 29, 30 */
		/* 821A8A08h case    4:*/		cpu::op::rlwinm<0,28,29,30>(regs,&regs.R6,regs.R10);
		/* 821A8A08h case    4:*/		return 0x821A8A0C;
		  /* 821A8A0Ch */ case    5:  		/* rlwimi R9, R7, 2, 0, 29 */
		/* 821A8A0Ch case    5:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R7);
		/* 821A8A0Ch case    5:*/		return 0x821A8A10;
		  /* 821A8A10h */ case    6:  		/* srw R7, R23, R6 */
		/* 821A8A10h case    6:*/		cpu::op::srw<0>(regs,&regs.R7,regs.R23,regs.R6);
		/* 821A8A10h case    6:*/		return 0x821A8A14;
		  /* 821A8A14h */ case    7:  		/* rlwimi R7, R9, 2, 0, 29 */
		/* 821A8A14h case    7:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R7,regs.R9);
		/* 821A8A14h case    7:*/		return 0x821A8A18;
		  /* 821A8A18h */ case    8:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A8A18h case    8:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A8A18h case    8:*/		return 0x821A8A1C;
		  /* 821A8A1Ch */ case    9:  		/* rlwinm R9, R7, 5, 0, 26 */
		/* 821A8A1Ch case    9:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R9,regs.R7);
		/* 821A8A1Ch case    9:*/		return 0x821A8A20;
		  /* 821A8A20h */ case   10:  		/* or R10, R9, R10 */
		/* 821A8A20h case   10:*/		cpu::op::or<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A8A20h case   10:*/		return 0x821A8A24;
		  /* 821A8A24h */ case   11:  		/* stw R10, <#[R11]> */
		/* 821A8A24h case   11:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8A24h case   11:*/		return 0x821A8A28;
	}
	return 0x821A8A28;
} // Block from 821A89F8h-821A8A28h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A8A28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8A28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8A28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8A28);
		  /* 821A8A28h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821A8A28h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A8A28h case    0:*/		return 0x821A8A2C;
		  /* 821A8A2Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821A8A2Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821A8A2Ch case    1:*/		return 0x821A8A30;
		  /* 821A8A30h */ case    2:  		/* bc 4, CR6_EQ, -156 */
		/* 821A8A30h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A8994;  }
		/* 821A8A30h case    2:*/		return 0x821A8A34;
		  /* 821A8A34h */ case    3:  		/* addi R8, R11, 8 */
		/* 821A8A34h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x8);
		/* 821A8A34h case    3:*/		return 0x821A8A38;
		  /* 821A8A38h */ case    4:  		/* b -164 */
		/* 821A8A38h case    4:*/		return 0x821A8994;
		/* 821A8A38h case    4:*/		return 0x821A8A3C;
	}
	return 0x821A8A3C;
} // Block from 821A8A28h-821A8A3Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A8A3Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8A3C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8A3C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8A3C);
		  /* 821A8A3Ch */ case    0:  		/* li R6, 1 */
		/* 821A8A3Ch case    0:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821A8A3Ch case    0:*/		return 0x821A8A40;
		  /* 821A8A40h */ case    1:  		/* lwz R5, <#[R19 + 652]> */
		/* 821A8A40h case    1:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x0000028C) );
		/* 821A8A40h case    1:*/		return 0x821A8A44;
		  /* 821A8A44h */ case    2:  		/* mr R4, R20 */
		/* 821A8A44h case    2:*/		regs.R4 = regs.R20;
		/* 821A8A44h case    2:*/		return 0x821A8A48;
		  /* 821A8A48h */ case    3:  		/* mr R3, R19 */
		/* 821A8A48h case    3:*/		regs.R3 = regs.R19;
		/* 821A8A48h case    3:*/		return 0x821A8A4C;
		  /* 821A8A4Ch */ case    4:  		/* bl 534908 */
		/* 821A8A4Ch case    4:*/		regs.LR = 0x821A8A50; return 0x8222B3C8;
		/* 821A8A4Ch case    4:*/		return 0x821A8A50;
		  /* 821A8A50h */ case    5:  		/* cmplwi CR6, R17, 0 */
		/* 821A8A50h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821A8A50h case    5:*/		return 0x821A8A54;
		  /* 821A8A54h */ case    6:  		/* bc 12, CR6_EQ, 76 */
		/* 821A8A54h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A8AA0;  }
		/* 821A8A54h case    6:*/		return 0x821A8A58;
		  /* 821A8A58h */ case    7:  		/* li R31, 0 */
		/* 821A8A58h case    7:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A8A58h case    7:*/		return 0x821A8A5C;
		  /* 821A8A5Ch */ case    8:  		/* addi R30, R22, 40 */
		/* 821A8A5Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R22,0x28);
		/* 821A8A5Ch case    8:*/		return 0x821A8A60;
		  /* 821A8A60h */ case    9:  		/* lwz R11, <#[R22 + 8]> */
		/* 821A8A60h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A8A60h case    9:*/		return 0x821A8A64;
		  /* 821A8A64h */ case   10:  		/* mr R3, R19 */
		/* 821A8A64h case   10:*/		regs.R3 = regs.R19;
		/* 821A8A64h case   10:*/		return 0x821A8A68;
		  /* 821A8A68h */ case   11:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821A8A68h case   11:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821A8A68h case   11:*/		return 0x821A8A6C;
		  /* 821A8A6Ch */ case   12:  		/* cmplw CR6, R31, R11 */
		/* 821A8A6Ch case   12:*/		cpu::op::cmplw<6>(regs,regs.R31,regs.R11);
		/* 821A8A6Ch case   12:*/		return 0x821A8A70;
		  /* 821A8A70h */ case   13:  		/* bc 4, CR6_LT, 28 */
		/* 821A8A70h case   13:*/		if ( !regs.CR[6].lt ) { return 0x821A8A8C;  }
		/* 821A8A70h case   13:*/		return 0x821A8A74;
		  /* 821A8A74h */ case   14:  		/* lwzu R11, <#[R30 + 4]> */
		/* 821A8A74h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000004) );
		regs.R30 = (uint32)(regs.R30 + 0x00000004);
		/* 821A8A74h case   14:*/		return 0x821A8A78;
		  /* 821A8A78h */ case   15:  		/* lwz R5, <#[R19 + 660]> */
		/* 821A8A78h case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x00000294) );
		/* 821A8A78h case   15:*/		return 0x821A8A7C;
		  /* 821A8A7Ch */ case   16:  		/* lwz R4, <#[R11 + 12]> */
		/* 821A8A7Ch case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A8A7Ch case   16:*/		return 0x821A8A80;
		  /* 821A8A80h */ case   17:  		/* bl 81624 */
		/* 821A8A80h case   17:*/		regs.LR = 0x821A8A84; return 0x821BC958;
		/* 821A8A80h case   17:*/		return 0x821A8A84;
		  /* 821A8A84h */ case   18:  		/* addi R31, R31, 1 */
		/* 821A8A84h case   18:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x1);
		/* 821A8A84h case   18:*/		return 0x821A8A88;
		  /* 821A8A88h */ case   19:  		/* b -40 */
		/* 821A8A88h case   19:*/		return 0x821A8A60;
		/* 821A8A88h case   19:*/		return 0x821A8A8C;
	}
	return 0x821A8A8C;
} // Block from 821A8A3Ch-821A8A8Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821A8A8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8A8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8A8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8A8C);
		  /* 821A8A8Ch */ case    0:  		/* mr R4, R22 */
		/* 821A8A8Ch case    0:*/		regs.R4 = regs.R22;
		/* 821A8A8Ch case    0:*/		return 0x821A8A90;
		  /* 821A8A90h */ case    1:  		/* bl 55640 */
		/* 821A8A90h case    1:*/		regs.LR = 0x821A8A94; return 0x821B63E8;
		/* 821A8A90h case    1:*/		return 0x821A8A94;
		  /* 821A8A94h */ case    2:  		/* lwz R11, <#[R22 + 8]> */
		/* 821A8A94h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A8A94h case    2:*/		return 0x821A8A98;
		  /* 821A8A98h */ case    3:  		/* oris R11, R11, 256 */
		/* 821A8A98h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A8A98h case    3:*/		return 0x821A8A9C;
		  /* 821A8A9Ch */ case    4:  		/* stw R11, <#[R22 + 8]> */
		/* 821A8A9Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R22 + 0x00000008) );
		/* 821A8A9Ch case    4:*/		return 0x821A8AA0;
	}
	return 0x821A8AA0;
} // Block from 821A8A8Ch-821A8AA0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A8AA0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8AA0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8AA0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8AA0);
		  /* 821A8AA0h */ case    0:  		/* li R3, 1 */
		/* 821A8AA0h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x1);
		/* 821A8AA0h case    0:*/		return 0x821A8AA4;
	}
	return 0x821A8AA4;
} // Block from 821A8AA0h-821A8AA4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A8AA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8AA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8AA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8AA4);
		  /* 821A8AA4h */ case    0:  		/* addi R1, R1, 352 */
		/* 821A8AA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 821A8AA4h case    0:*/		return 0x821A8AA8;
		  /* 821A8AA8h */ case    1:  		/* b -1144876 */
		/* 821A8AA8h case    1:*/		return 0x8209127C;
		/* 821A8AA8h case    1:*/		return 0x821A8AAC;
		  /* 821A8AACh */ case    2:  		/* nop */
		/* 821A8AACh case    2:*/		cpu::op::nop();
		/* 821A8AACh case    2:*/		return 0x821A8AB0;
	}
	return 0x821A8AB0;
} // Block from 821A8AA4h-821A8AB0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A8AB0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8AB0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8AB0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8AB0);
		  /* 821A8AB0h */ case    0:  		/* mfspr R12, LR */
		/* 821A8AB0h case    0:*/		regs.R12 = regs.LR;
		/* 821A8AB0h case    0:*/		return 0x821A8AB4;
		  /* 821A8AB4h */ case    1:  		/* bl -1144960 */
		/* 821A8AB4h case    1:*/		regs.LR = 0x821A8AB8; return 0x82091234;
		/* 821A8AB4h case    1:*/		return 0x821A8AB8;
		  /* 821A8AB8h */ case    2:  		/* stfd FR31, <#[R1 - 120]> */
		/* 821A8AB8h case    2:*/		cpu::mem::store64f( regs, regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 821A8AB8h case    2:*/		return 0x821A8ABC;
		  /* 821A8ABCh */ case    3:  		/* stwu R1, <#[R1 - 352]> */
		/* 821A8ABCh case    3:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFEA0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFEA0);
		/* 821A8ABCh case    3:*/		return 0x821A8AC0;
		  /* 821A8AC0h */ case    4:  		/* lbz R11, <#[R4 + 205]> */
		/* 821A8AC0h case    4:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R4 + 0x000000CD) );
		/* 821A8AC0h case    4:*/		return 0x821A8AC4;
		  /* 821A8AC4h */ case    5:  		/* mr R28, R3 */
		/* 821A8AC4h case    5:*/		regs.R28 = regs.R3;
		/* 821A8AC4h case    5:*/		return 0x821A8AC8;
		  /* 821A8AC8h */ case    6:  		/* lwz R23, <#[R4 + 164]> */
		/* 821A8AC8h case    6:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R4 + 0x000000A4) );
		/* 821A8AC8h case    6:*/		return 0x821A8ACC;
		  /* 821A8ACCh */ case    7:  		/* mr R27, R4 */
		/* 821A8ACCh case    7:*/		regs.R27 = regs.R4;
		/* 821A8ACCh case    7:*/		return 0x821A8AD0;
		  /* 821A8AD0h */ case    8:  		/* mr R22, R5 */
		/* 821A8AD0h case    8:*/		regs.R22 = regs.R5;
		/* 821A8AD0h case    8:*/		return 0x821A8AD4;
		  /* 821A8AD4h */ case    9:  		/* li R24, 0 */
		/* 821A8AD4h case    9:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821A8AD4h case    9:*/		return 0x821A8AD8;
		  /* 821A8AD8h */ case   10:  		/* cmplwi CR0, R11, 0 */
		/* 821A8AD8h case   10:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821A8AD8h case   10:*/		return 0x821A8ADC;
		  /* 821A8ADCh */ case   11:  		/* bc 12, CR0_EQ, 564 */
		/* 821A8ADCh case   11:*/		if ( regs.CR[0].eq ) { return 0x821A8D10;  }
		/* 821A8ADCh case   11:*/		return 0x821A8AE0;
		  /* 821A8AE0h */ case   12:  		/* addi R31, R4, 32 */
		/* 821A8AE0h case   12:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R4,0x20);
		/* 821A8AE0h case   12:*/		return 0x821A8AE4;
		  /* 821A8AE4h */ case   13:  		/* addi R3, R1, 96 */
		/* 821A8AE4h case   13:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x60);
		/* 821A8AE4h case   13:*/		return 0x821A8AE8;
		  /* 821A8AE8h */ case   14:  		/* li R5, 132 */
		/* 821A8AE8h case   14:*/		cpu::op::li<0>(regs,&regs.R5,0x84);
		/* 821A8AE8h case   14:*/		return 0x821A8AEC;
		  /* 821A8AECh */ case   15:  		/* mr R4, R31 */
		/* 821A8AECh case   15:*/		regs.R4 = regs.R31;
		/* 821A8AECh case   15:*/		return 0x821A8AF0;
		  /* 821A8AF0h */ case   16:  		/* bl -1143104 */
		/* 821A8AF0h case   16:*/		regs.LR = 0x821A8AF4; return 0x820919B0;
		/* 821A8AF0h case   16:*/		return 0x821A8AF4;
		  /* 821A8AF4h */ case   17:  		/* lwz R11, <#[R27 + 28]> */
		/* 821A8AF4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A8AF4h case   17:*/		return 0x821A8AF8;
		  /* 821A8AF8h */ case   18:  		/* stw R24, <#[R27 + 160]> */
		/* 821A8AF8h case   18:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R27 + 0x000000A0) );
		/* 821A8AF8h case   18:*/		return 0x821A8AFC;
		  /* 821A8AFCh */ case   19:  		/* cmplwi CR6, R11, 0 */
		/* 821A8AFCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A8AFCh case   19:*/		return 0x821A8B00;
		  /* 821A8B00h */ case   20:  		/* bc 12, CR6_EQ, 124 */
		/* 821A8B00h case   20:*/		if ( regs.CR[6].eq ) { return 0x821A8B7C;  }
		/* 821A8B00h case   20:*/		return 0x821A8B04;
		  /* 821A8B04h */ case   21:  		/* addi R11, R27, 12 */
		/* 821A8B04h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xC);
		/* 821A8B04h case   21:*/		return 0x821A8B08;
		  /* 821A8B08h */ case   22:  		/* stw R24, <#[R1 + 92]> */
		/* 821A8B08h case   22:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A8B08h case   22:*/		return 0x821A8B0C;
		  /* 821A8B0Ch */ case   23:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A8B0Ch case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A8B0Ch case   23:*/		return 0x821A8B10;
		  /* 821A8B10h */ case   24:  		/* addi R9, R1, 80 */
		/* 821A8B10h case   24:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821A8B10h case   24:*/		return 0x821A8B14;
		  /* 821A8B14h */ case   25:  		/* lwz R8, <#[R27]> */
		/* 821A8B14h case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x00000000) );
		/* 821A8B14h case   25:*/		return 0x821A8B18;
		  /* 821A8B18h */ case   26:  		/* addi R10, R10, -1 */
		/* 821A8B18h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821A8B18h case   26:*/		return 0x821A8B1C;
		  /* 821A8B1Ch */ case   27:  		/* stw R10, <#[R11 + 16]> */
		/* 821A8B1Ch case   27:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A8B1Ch case   27:*/		return 0x821A8B20;
		  /* 821A8B20h */ case   28:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821A8B20h case   28:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821A8B20h case   28:*/		return 0x821A8B24;
		  /* 821A8B24h */ case   29:  		/* lwz R7, <#[R31 + 128]> */
		/* 821A8B24h case   29:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R31 + 0x00000080) );
		/* 821A8B24h case   29:*/		return 0x821A8B28;
		  /* 821A8B28h */ case   30:  		/* stw R8, <#[R1 + 80]> */
		/* 821A8B28h case   30:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000050) );
		/* 821A8B28h case   30:*/		return 0x821A8B2C;
		  /* 821A8B2Ch */ case   31:  		/* lwz R6, <#[R27 + 4]> */
		/* 821A8B2Ch case   31:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000004) );
		/* 821A8B2Ch case   31:*/		return 0x821A8B30;
		  /* 821A8B30h */ case   32:  		/* stw R6, <#[R1 + 88]> */
		/* 821A8B30h case   32:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 821A8B30h case   32:*/		return 0x821A8B34;
		  /* 821A8B34h */ case   33:  		/* lwzx R8, <#[R10 + R11]> */
		/* 821A8B34h case   33:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A8B34h case   33:*/		return 0x821A8B38;
		  /* 821A8B38h */ case   34:  		/* rlwinm R10, R7, 4, 0, 27 */
		/* 821A8B38h case   34:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R7);
		/* 821A8B38h case   34:*/		return 0x821A8B3C;
		  /* 821A8B3Ch */ case   35:  		/* stw R8, <#[R1 + 84]> */
		/* 821A8B3Ch case   35:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R1 + 0x00000054) );
		/* 821A8B3Ch case   35:*/		return 0x821A8B40;
		  /* 821A8B40h */ case   36:  		/* add R7, R10, R31 */
		/* 821A8B40h case   36:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R31);
		/* 821A8B40h case   36:*/		return 0x821A8B44;
		  /* 821A8B44h */ case   37:  		/* lwz R8, <#[R9 + 4]> */
		/* 821A8B44h case   37:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000004) );
		/* 821A8B44h case   37:*/		return 0x821A8B48;
		  /* 821A8B48h */ case   38:  		/* lwz R6, <#[R9 + 8]> */
		/* 821A8B48h case   38:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + 0x00000008) );
		/* 821A8B48h case   38:*/		return 0x821A8B4C;
		  /* 821A8B4Ch */ case   39:  		/* lwz R5, <#[R9 + 12]> */
		/* 821A8B4Ch case   39:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A8B4Ch case   39:*/		return 0x821A8B50;
		  /* 821A8B50h */ case   40:  		/* lwz R9, <#[R9]> */
		/* 821A8B50h case   40:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000000) );
		/* 821A8B50h case   40:*/		return 0x821A8B54;
		  /* 821A8B54h */ case   41:  		/* stwx R9, <#[R10 + R31]> */
		/* 821A8B54h case   41:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R31 + 0x00000000) );
		/* 821A8B54h case   41:*/		return 0x821A8B58;
		  /* 821A8B58h */ case   42:  		/* stw R8, <#[R7 + 4]> */
		/* 821A8B58h case   42:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R7 + 0x00000004) );
		/* 821A8B58h case   42:*/		return 0x821A8B5C;
		  /* 821A8B5Ch */ case   43:  		/* stw R6, <#[R7 + 8]> */
		/* 821A8B5Ch case   43:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000008) );
		/* 821A8B5Ch case   43:*/		return 0x821A8B60;
		  /* 821A8B60h */ case   44:  		/* stw R5, <#[R7 + 12]> */
		/* 821A8B60h case   44:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R7 + 0x0000000C) );
		/* 821A8B60h case   44:*/		return 0x821A8B64;
		  /* 821A8B64h */ case   45:  		/* lwz R10, <#[R31 + 128]> */
		/* 821A8B64h case   45:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000080) );
		/* 821A8B64h case   45:*/		return 0x821A8B68;
		  /* 821A8B68h */ case   46:  		/* addi R10, R10, 1 */
		/* 821A8B68h case   46:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821A8B68h case   46:*/		return 0x821A8B6C;
		  /* 821A8B6Ch */ case   47:  		/* stw R10, <#[R31 + 128]> */
		/* 821A8B6Ch case   47:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R31 + 0x00000080) );
		/* 821A8B6Ch case   47:*/		return 0x821A8B70;
		  /* 821A8B70h */ case   48:  		/* lwz R10, <#[R27 + 28]> */
		/* 821A8B70h case   48:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A8B70h case   48:*/		return 0x821A8B74;
		  /* 821A8B74h */ case   49:  		/* cmplwi CR6, R10, 0 */
		/* 821A8B74h case   49:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A8B74h case   49:*/		return 0x821A8B78;
		  /* 821A8B78h */ case   50:  		/* bc 4, CR6_EQ, -108 */
		/* 821A8B78h case   50:*/		if ( !regs.CR[6].eq ) { return 0x821A8B0C;  }
		/* 821A8B78h case   50:*/		return 0x821A8B7C;
	}
	return 0x821A8B7C;
} // Block from 821A8AB0h-821A8B7Ch (51 instructions)

//////////////////////////////////////////////////////
// Block at 821A8B7Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8B7C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8B7C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8B7C);
		  /* 821A8B7Ch */ case    0:  		/* lwz R30, <#[R1 + 224]> */
		/* 821A8B7Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000000E0) );
		/* 821A8B7Ch case    0:*/		return 0x821A8B80;
		  /* 821A8B80h */ case    1:  		/* mr R6, R24 */
		/* 821A8B80h case    1:*/		regs.R6 = regs.R24;
		/* 821A8B80h case    1:*/		return 0x821A8B84;
		  /* 821A8B84h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821A8B84h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A8B84h case    2:*/		return 0x821A8B88;
		  /* 821A8B88h */ case    3:  		/* bc 12, CR6_EQ, 128 */
		/* 821A8B88h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A8C08;  }
		/* 821A8B88h case    3:*/		return 0x821A8B8C;
		  /* 821A8B8Ch */ case    4:  		/* rlwinm R10, R30, 4, 0, 27 */
		/* 821A8B8Ch case    4:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R30);
		/* 821A8B8Ch case    4:*/		return 0x821A8B90;
		  /* 821A8B90h */ case    5:  		/* addi R11, R1, 96 */
		/* 821A8B90h case    5:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A8B90h case    5:*/		return 0x821A8B94;
		  /* 821A8B94h */ case    6:  		/* mr R7, R30 */
		/* 821A8B94h case    6:*/		regs.R7 = regs.R30;
		/* 821A8B94h case    6:*/		return 0x821A8B98;
		  /* 821A8B98h */ case    7:  		/* add R11, R10, R11 */
		/* 821A8B98h case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A8B98h case    7:*/		return 0x821A8B9C;
		  /* 821A8B9Ch */ case    8:  		/* addi R8, R11, -16 */
		/* 821A8B9Ch case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFF0);
		/* 821A8B9Ch case    8:*/		return 0x821A8BA0;
		  /* 821A8BA0h */ case    9:  		/* cmplwi CR6, R6, 4 */
		/* 821A8BA0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R6,0x00000004);
		/* 821A8BA0h case    9:*/		return 0x821A8BA4;
		  /* 821A8BA4h */ case   10:  		/* bc 4, CR6_LT, 32 */
		/* 821A8BA4h case   10:*/		if ( !regs.CR[6].lt ) { return 0x821A8BC4;  }
		/* 821A8BA4h case   10:*/		return 0x821A8BA8;
		  /* 821A8BA8h */ case   11:  		/* ld R3, <#[R8]> */
		/* 821A8BA8h case   11:*/		cpu::mem::load64( regs, &regs.R3, (uint32)(regs.R8 + 0x00000000) );
		/* 821A8BA8h case   11:*/		return 0x821A8BAC;
		  /* 821A8BACh */ case   12:  		/* ld R4, <#[R8 + 8]> */
		/* 821A8BACh case   12:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R8 + 0x00000008) );
		/* 821A8BACh case   12:*/		return 0x821A8BB0;
		  /* 821A8BB0h */ case   13:  		/* bl -52080 */
		/* 821A8BB0h case   13:*/		regs.LR = 0x821A8BB4; return 0x8219C040;
		/* 821A8BB0h case   13:*/		return 0x821A8BB4;
		  /* 821A8BB4h */ case   14:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A8BB4h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A8BB4h case   14:*/		return 0x821A8BB8;
		  /* 821A8BB8h */ case   15:  		/* bc 12, CR0_EQ, 12 */
		/* 821A8BB8h case   15:*/		if ( regs.CR[0].eq ) { return 0x821A8BC4;  }
		/* 821A8BB8h case   15:*/		return 0x821A8BBC;
		  /* 821A8BBCh */ case   16:  		/* addi R6, R6, 1 */
		/* 821A8BBCh case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821A8BBCh case   16:*/		return 0x821A8BC0;
		  /* 821A8BC0h */ case   17:  		/* b 60 */
		/* 821A8BC0h case   17:*/		return 0x821A8BFC;
		/* 821A8BC0h case   17:*/		return 0x821A8BC4;
	}
	return 0x821A8BC4;
} // Block from 821A8B7Ch-821A8BC4h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821A8BC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8BC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8BC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8BC4);
		  /* 821A8BC4h */ case    0:  		/* lwz R11, <#[R31 + 128]> */
		/* 821A8BC4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 821A8BC4h case    0:*/		return 0x821A8BC8;
		  /* 821A8BC8h */ case    1:  		/* lwz R10, <#[R8]> */
		/* 821A8BC8h case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821A8BC8h case    1:*/		return 0x821A8BCC;
		  /* 821A8BCCh */ case    2:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 821A8BCCh case    2:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 821A8BCCh case    2:*/		return 0x821A8BD0;
		  /* 821A8BD0h */ case    3:  		/* lwz R9, <#[R8 + 4]> */
		/* 821A8BD0h case    3:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R8 + 0x00000004) );
		/* 821A8BD0h case    3:*/		return 0x821A8BD4;
		  /* 821A8BD4h */ case    4:  		/* lwz R5, <#[R8 + 8]> */
		/* 821A8BD4h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R8 + 0x00000008) );
		/* 821A8BD4h case    4:*/		return 0x821A8BD8;
		  /* 821A8BD8h */ case    5:  		/* add R4, R11, R31 */
		/* 821A8BD8h case    5:*/		cpu::op::add<0>(regs,&regs.R4,regs.R11,regs.R31);
		/* 821A8BD8h case    5:*/		return 0x821A8BDC;
		  /* 821A8BDCh */ case    6:  		/* lwz R3, <#[R8 + 12]> */
		/* 821A8BDCh case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R8 + 0x0000000C) );
		/* 821A8BDCh case    6:*/		return 0x821A8BE0;
		  /* 821A8BE0h */ case    7:  		/* stwx R10, <#[R11 + R31]> */
		/* 821A8BE0h case    7:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + regs.R31 + 0x00000000) );
		/* 821A8BE0h case    7:*/		return 0x821A8BE4;
		  /* 821A8BE4h */ case    8:  		/* stw R9, <#[R4 + 4]> */
		/* 821A8BE4h case    8:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R4 + 0x00000004) );
		/* 821A8BE4h case    8:*/		return 0x821A8BE8;
		  /* 821A8BE8h */ case    9:  		/* stw R5, <#[R4 + 8]> */
		/* 821A8BE8h case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R4 + 0x00000008) );
		/* 821A8BE8h case    9:*/		return 0x821A8BEC;
		  /* 821A8BECh */ case   10:  		/* stw R3, <#[R4 + 12]> */
		/* 821A8BECh case   10:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R4 + 0x0000000C) );
		/* 821A8BECh case   10:*/		return 0x821A8BF0;
		  /* 821A8BF0h */ case   11:  		/* lwz R11, <#[R31 + 128]> */
		/* 821A8BF0h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 821A8BF0h case   11:*/		return 0x821A8BF4;
		  /* 821A8BF4h */ case   12:  		/* addi R11, R11, 1 */
		/* 821A8BF4h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A8BF4h case   12:*/		return 0x821A8BF8;
		  /* 821A8BF8h */ case   13:  		/* stw R11, <#[R31 + 128]> */
		/* 821A8BF8h case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000080) );
		/* 821A8BF8h case   13:*/		return 0x821A8BFC;
	}
	return 0x821A8BFC;
} // Block from 821A8BC4h-821A8BFCh (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A8BFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8BFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8BFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8BFC);
		  /* 821A8BFCh */ case    0:  		/* addic. R7, R7, -1 */
		/* 821A8BFCh case    0:*/		cpu::op::addic<1>(regs,&regs.R7,regs.R7,0xFFFFFFFF);
		/* 821A8BFCh case    0:*/		return 0x821A8C00;
		  /* 821A8C00h */ case    1:  		/* addi R8, R8, -16 */
		/* 821A8C00h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFF0);
		/* 821A8C00h case    1:*/		return 0x821A8C04;
		  /* 821A8C04h */ case    2:  		/* bc 4, CR0_EQ, -100 */
		/* 821A8C04h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A8BA0;  }
		/* 821A8C04h case    2:*/		return 0x821A8C08;
	}
	return 0x821A8C08;
} // Block from 821A8BFCh-821A8C08h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A8C08h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8C08( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8C08) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8C08);
		  /* 821A8C08h */ case    0:  		/* li R5, 0 */
		/* 821A8C08h case    0:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A8C08h case    0:*/		return 0x821A8C0C;
		  /* 821A8C0Ch */ case    1:  		/* lwz R4, <#[R23 + 28]> */
		/* 821A8C0Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x0000001C) );
		/* 821A8C0Ch case    1:*/		return 0x821A8C10;
		  /* 821A8C10h */ case    2:  		/* mr R3, R28 */
		/* 821A8C10h case    2:*/		regs.R3 = regs.R28;
		/* 821A8C10h case    2:*/		return 0x821A8C14;
		  /* 821A8C14h */ case    3:  		/* bl 507628 */
		/* 821A8C14h case    3:*/		regs.LR = 0x821A8C18; return 0x82224B00;
		/* 821A8C14h case    3:*/		return 0x821A8C18;
		  /* 821A8C18h */ case    4:  		/* rlwinm R11, R23, 0, 0, 30 */
		/* 821A8C18h case    4:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R23);
		/* 821A8C18h case    4:*/		return 0x821A8C1C;
		  /* 821A8C1Ch */ case    5:  		/* rlwinm R10, R3, 0, 0, 30 */
		/* 821A8C1Ch case    5:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R3);
		/* 821A8C1Ch case    5:*/		return 0x821A8C20;
		  /* 821A8C20h */ case    6:  		/* addi R11, R11, 36 */
		/* 821A8C20h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821A8C20h case    6:*/		return 0x821A8C24;
		  /* 821A8C24h */ case    7:  		/* addi R10, R10, 36 */
		/* 821A8C24h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821A8C24h case    7:*/		return 0x821A8C28;
		  /* 821A8C28h */ case    8:  		/* addi R8, R11, -36 */
		/* 821A8C28h case    8:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821A8C28h case    8:*/		return 0x821A8C2C;
		  /* 821A8C2Ch */ case    9:  		/* addi R6, R10, -36 */
		/* 821A8C2Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R10,0xFFFFFFDC);
		/* 821A8C2Ch case    9:*/		return 0x821A8C30;
		  /* 821A8C30h */ case   10:  		/* addi R9, R10, 4 */
		/* 821A8C30h case   10:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A8C30h case   10:*/		return 0x821A8C34;
		  /* 821A8C34h */ case   11:  		/* lwz R7, <#[R11]> */
		/* 821A8C34h case   11:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8C34h case   11:*/		return 0x821A8C38;
		  /* 821A8C38h */ case   12:  		/* mr R31, R3 */
		/* 821A8C38h case   12:*/		regs.R31 = regs.R3;
		/* 821A8C38h case   12:*/		return 0x821A8C3C;
		  /* 821A8C3Ch */ case   13:  		/* mr R29, R24 */
		/* 821A8C3Ch case   13:*/		regs.R29 = regs.R24;
		/* 821A8C3Ch case   13:*/		return 0x821A8C40;
		  /* 821A8C40h */ case   14:  		/* cmplwi CR6, R30, 0 */
		/* 821A8C40h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A8C40h case   14:*/		return 0x821A8C44;
		  /* 821A8C44h */ case   15:  		/* stw R7, <#[R10]> */
		/* 821A8C44h case   15:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000000) );
		/* 821A8C44h case   15:*/		return 0x821A8C48;
		  /* 821A8C48h */ case   16:  		/* lwz R7, <#[R11]> */
		/* 821A8C48h case   16:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8C48h case   16:*/		return 0x821A8C4C;
		  /* 821A8C4Ch */ case   17:  		/* rlwinm R7, R7, 0, 0, 30 */
		/* 821A8C4Ch case   17:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R7,regs.R7);
		/* 821A8C4Ch case   17:*/		return 0x821A8C50;
		  /* 821A8C50h */ case   18:  		/* stw R6, <#[R7]> */
		/* 821A8C50h case   18:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R7 + 0x00000000) );
		/* 821A8C50h case   18:*/		return 0x821A8C54;
		  /* 821A8C54h */ case   19:  		/* stw R8, <#[R10 + 4]> */
		/* 821A8C54h case   19:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A8C54h case   19:*/		return 0x821A8C58;
		  /* 821A8C58h */ case   20:  		/* stw R9, <#[R11]> */
		/* 821A8C58h case   20:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821A8C58h case   20:*/		return 0x821A8C5C;
		  /* 821A8C5Ch */ case   21:  		/* bc 12, CR6_EQ, 168 */
		/* 821A8C5Ch case   21:*/		if ( regs.CR[6].eq ) { return 0x821A8D04;  }
		/* 821A8C5Ch case   21:*/		return 0x821A8C60;
		  /* 821A8C60h */ case   22:  		/* rlwinm R10, R30, 4, 0, 27 */
		/* 821A8C60h case   22:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R30);
		/* 821A8C60h case   22:*/		return 0x821A8C64;
		  /* 821A8C64h */ case   23:  		/* addi R11, R1, 96 */
		/* 821A8C64h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x60);
		/* 821A8C64h case   23:*/		return 0x821A8C68;
		  /* 821A8C68h */ case   24:  		/* addi R26, R3, 40 */
		/* 821A8C68h case   24:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R3,0x28);
		/* 821A8C68h case   24:*/		return 0x821A8C6C;
		  /* 821A8C6Ch */ case   25:  		/* add R11, R10, R11 */
		/* 821A8C6Ch case   25:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A8C6Ch case   25:*/		return 0x821A8C70;
		  /* 821A8C70h */ case   26:  		/* addi R25, R11, -16 */
		/* 821A8C70h case   26:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R11,0xFFFFFFF0);
		/* 821A8C70h case   26:*/		return 0x821A8C74;
		  /* 821A8C74h */ case   27:  		/* lwz R11, <#[R25]> */
		/* 821A8C74h case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A8C74h case   27:*/		return 0x821A8C78;
		  /* 821A8C78h */ case   28:  		/* addi R10, R1, 80 */
		/* 821A8C78h case   28:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 821A8C78h case   28:*/		return 0x821A8C7C;
		  /* 821A8C7Ch */ case   29:  		/* lwz R9, <#[R25 + 4]> */
		/* 821A8C7Ch case   29:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R25 + 0x00000004) );
		/* 821A8C7Ch case   29:*/		return 0x821A8C80;
	}
	return 0x821A8C80;
} // Block from 821A8C08h-821A8C80h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821A8C80h
// Function '?CombineMERGEs@Compiler@D3DXShader@@AAA_NPAVInstruction@2@0@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8C80( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8C80) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8C80);
		  /* 821A8C80h */ case    0:  		/* cmplwi CR6, R29, 4 */
		/* 821A8C80h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000004);
		/* 821A8C80h case    0:*/		return 0x821A8C84;
		  /* 821A8C84h */ case    1:  		/* lwz R8, <#[R25 + 8]> */
		/* 821A8C84h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x00000008) );
		/* 821A8C84h case    1:*/		return 0x821A8C88;
		  /* 821A8C88h */ case    2:  		/* lwz R7, <#[R25 + 12]> */
		/* 821A8C88h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x0000000C) );
		/* 821A8C88h case    2:*/		return 0x821A8C8C;
		  /* 821A8C8Ch */ case    3:  		/* stw R11, <#[R10]> */
		/* 821A8C8Ch case    3:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821A8C8Ch case    3:*/		return 0x821A8C90;
		  /* 821A8C90h */ case    4:  		/* stw R9, <#[R10 + 4]> */
		/* 821A8C90h case    4:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000004) );
		/* 821A8C90h case    4:*/		return 0x821A8C94;
		  /* 821A8C94h */ case    5:  		/* stw R8, <#[R10 + 8]> */
		/* 821A8C94h case    5:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000008) );
		/* 821A8C94h case    5:*/		return 0x821A8C98;
		  /* 821A8C98h */ case    6:  		/* stw R7, <#[R10 + 12]> */
		/* 821A8C98h case    6:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x0000000C) );
		/* 821A8C98h case    6:*/		return 0x821A8C9C;
		  /* 821A8C9Ch */ case    7:  		/* bc 4, CR6_LT, 92 */
		/* 821A8C9Ch case    7:*/		if ( !regs.CR[6].lt ) { return 0x821A8CF8;  }
		/* 821A8C9Ch case    7:*/		return 0x821A8CA0;
		  /* 821A8CA0h */ case    8:  		/* ld R3, <#[R25]> */
		/* 821A8CA0h case    8:*/		cpu::mem::load64( regs, &regs.R3, (uint32)(regs.R25 + 0x00000000) );
		/* 821A8CA0h case    8:*/		return 0x821A8CA4;
		  /* 821A8CA4h */ case    9:  		/* ld R4, <#[R25 + 8]> */
		/* 821A8CA4h case    9:*/		cpu::mem::load64( regs, &regs.R4, (uint32)(regs.R25 + 0x00000008) );
		/* 821A8CA4h case    9:*/		return 0x821A8CA8;
		  /* 821A8CA8h */ case   10:  		/* bl -52328 */
		/* 821A8CA8h case   10:*/		regs.LR = 0x821A8CAC; return 0x8219C040;
		/* 821A8CA8h case   10:*/		return 0x821A8CAC;
		  /* 821A8CACh */ case   11:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A8CACh case   11:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A8CACh case   11:*/		return 0x821A8CB0;
		  /* 821A8CB0h */ case   12:  		/* bc 12, CR0_EQ, 72 */
		/* 821A8CB0h case   12:*/		if ( regs.CR[0].eq ) { return 0x821A8CF8;  }
		/* 821A8CB0h case   12:*/		return 0x821A8CB4;
		  /* 821A8CB4h */ case   13:  		/* mr R3, R28 */
		/* 821A8CB4h case   13:*/		regs.R3 = regs.R28;
		/* 821A8CB4h case   13:*/		return 0x821A8CB8;
		  /* 821A8CB8h */ case   14:  		/* lwz R6, <#[R1 + 88]> */
		/* 821A8CB8h case   14:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000058) );
		/* 821A8CB8h case   14:*/		return 0x821A8CBC;
		  /* 821A8CBCh */ case   15:  		/* lwz R5, <#[R1 + 84]> */
		/* 821A8CBCh case   15:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A8CBCh case   15:*/		return 0x821A8CC0;
		  /* 821A8CC0h */ case   16:  		/* lwz R4, <#[R1 + 80]> */
		/* 821A8CC0h case   16:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821A8CC0h case   16:*/		return 0x821A8CC4;
		  /* 821A8CC4h */ case   17:  		/* bl -199516 */
		/* 821A8CC4h case   17:*/		regs.LR = 0x821A8CC8; return 0x82178168;
		/* 821A8CC4h case   17:*/		return 0x821A8CC8;
		  /* 821A8CC8h */ case   18:  		/* mr R4, R3 */
		/* 821A8CC8h case   18:*/		regs.R4 = regs.R3;
		/* 821A8CC8h case   18:*/		return 0x821A8CCC;
		  /* 821A8CCCh */ case   19:  		/* mr R3, R31 */
		/* 821A8CCCh case   19:*/		regs.R3 = regs.R31;
		/* 821A8CCCh case   19:*/		return 0x821A8CD0;
		  /* 821A8CD0h */ case   20:  		/* bl -199432 */
		/* 821A8CD0h case   20:*/		regs.LR = 0x821A8CD4; return 0x821781C8;
		/* 821A8CD0h case   20:*/		return 0x821A8CD4;
		  /* 821A8CD4h */ case   21:  		/* stwu R3, <#[R26 + 4]> */
		/* 821A8CD4h case   21:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R26 + 0x00000004) );
		regs.R26 = (uint32)(regs.R26 + 0x00000004);
		/* 821A8CD4h case   21:*/		return 0x821A8CD8;
		  /* 821A8CD8h */ case   22:  		/* addi R11, R27, 12 */
		/* 821A8CD8h case   22:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xC);
		/* 821A8CD8h case   22:*/		return 0x821A8CDC;
		  /* 821A8CDCh */ case   23:  		/* lwz R10, <#[R27 + 28]> */
		/* 821A8CDCh case   23:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A8CDCh case   23:*/		return 0x821A8CE0;
		  /* 821A8CE0h */ case   24:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821A8CE0h case   24:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821A8CE0h case   24:*/		return 0x821A8CE4;
		  /* 821A8CE4h */ case   25:  		/* stwx R29, <#[R10 + R11]> */
		/* 821A8CE4h case   25:*/		cpu::mem::store32( regs, regs.R29, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A8CE4h case   25:*/		return 0x821A8CE8;
		  /* 821A8CE8h */ case   26:  		/* addi R29, R29, 1 */
		/* 821A8CE8h case   26:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821A8CE8h case   26:*/		return 0x821A8CEC;
		  /* 821A8CECh */ case   27:  		/* lwz R10, <#[R27 + 28]> */
		/* 821A8CECh case   27:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A8CECh case   27:*/		return 0x821A8CF0;
		  /* 821A8CF0h */ case   28:  		/* addi R11, R10, 1 */
		/* 821A8CF0h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x1);
		/* 821A8CF0h case   28:*/		return 0x821A8CF4;
		  /* 821A8CF4h */ case   29:  		/* stw R11, <#[R27 + 28]> */
		/* 821A8CF4h case   29:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A8CF4h case   29:*/		return 0x821A8CF8;
	}
	return 0x821A8CF8;
} // Block from 821A8C80h-821A8CF8h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821A8CF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8CF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8CF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8CF8);
		  /* 821A8CF8h */ case    0:  		/* addic. R30, R30, -1 */
		/* 821A8CF8h case    0:*/		cpu::op::addic<1>(regs,&regs.R30,regs.R30,0xFFFFFFFF);
		/* 821A8CF8h case    0:*/		return 0x821A8CFC;
		  /* 821A8CFCh */ case    1:  		/* addi R25, R25, -16 */
		/* 821A8CFCh case    1:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0xFFFFFFF0);
		/* 821A8CFCh case    1:*/		return 0x821A8D00;
		  /* 821A8D00h */ case    2:  		/* bc 4, CR0_EQ, -140 */
		/* 821A8D00h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A8C74;  }
		/* 821A8D00h case    2:*/		return 0x821A8D04;
	}
	return 0x821A8D04;
} // Block from 821A8CF8h-821A8D04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A8D04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8D04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8D04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8D04);
		  /* 821A8D04h */ case    0:  		/* stw R31, <#[R27]> */
		/* 821A8D04h case    0:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R27 + 0x00000000) );
		/* 821A8D04h case    0:*/		return 0x821A8D08;
		  /* 821A8D08h */ case    1:  		/* stw R24, <#[R27 + 4]> */
		/* 821A8D08h case    1:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R27 + 0x00000004) );
		/* 821A8D08h case    1:*/		return 0x821A8D0C;
		  /* 821A8D0Ch */ case    2:  		/* stw R24, <#[R27 + 8]> */
		/* 821A8D0Ch case    2:*/		cpu::mem::store32( regs, regs.R24, (uint32)(regs.R27 + 0x00000008) );
		/* 821A8D0Ch case    2:*/		return 0x821A8D10;
	}
	return 0x821A8D10;
} // Block from 821A8D04h-821A8D10h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A8D10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8D10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8D10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8D10);
		  /* 821A8D10h */ case    0:  		/* lwz R26, <#[R27 + 28]> */
		/* 821A8D10h case    0:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A8D10h case    0:*/		return 0x821A8D14;
		  /* 821A8D14h */ case    1:  		/* mr R30, R24 */
		/* 821A8D14h case    1:*/		regs.R30 = regs.R24;
		/* 821A8D14h case    1:*/		return 0x821A8D18;
		  /* 821A8D18h */ case    2:  		/* cmplwi CR6, R26, 0 */
		/* 821A8D18h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821A8D18h case    2:*/		return 0x821A8D1C;
		  /* 821A8D1Ch */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 821A8D1Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821A8D4C;  }
		/* 821A8D1Ch case    3:*/		return 0x821A8D20;
		  /* 821A8D20h */ case    4:  		/* addi R11, R27, 12 */
		/* 821A8D20h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xC);
		/* 821A8D20h case    4:*/		return 0x821A8D24;
		  /* 821A8D24h */ case    5:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A8D24h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A8D24h case    5:*/		return 0x821A8D28;
		  /* 821A8D28h */ case    6:  		/* rlwinm R9, R30, 2, 0, 29 */
		/* 821A8D28h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 821A8D28h case    6:*/		return 0x821A8D2C;
		  /* 821A8D2Ch */ case    7:  		/* addi R10, R10, -1 */
		/* 821A8D2Ch case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821A8D2Ch case    7:*/		return 0x821A8D30;
		  /* 821A8D30h */ case    8:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 821A8D30h case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 821A8D30h case    8:*/		return 0x821A8D34;
		  /* 821A8D34h */ case    9:  		/* stw R10, <#[R11 + 16]> */
		/* 821A8D34h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A8D34h case    9:*/		return 0x821A8D38;
		  /* 821A8D38h */ case   10:  		/* lwz R10, <#[R27 + 28]> */
		/* 821A8D38h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A8D38h case   10:*/		return 0x821A8D3C;
		  /* 821A8D3Ch */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821A8D3Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A8D3Ch case   11:*/		return 0x821A8D40;
		  /* 821A8D40h */ case   12:  		/* lwzx R10, <#[R8 + R11]> */
		/* 821A8D40h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 821A8D40h case   12:*/		return 0x821A8D44;
		  /* 821A8D44h */ case   13:  		/* or R30, R10, R9 */
		/* 821A8D44h case   13:*/		cpu::op::or<0>(regs,&regs.R30,regs.R10,regs.R9);
		/* 821A8D44h case   13:*/		return 0x821A8D48;
		  /* 821A8D48h */ case   14:  		/* bc 4, CR6_EQ, -36 */
		/* 821A8D48h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821A8D24;  }
		/* 821A8D48h case   14:*/		return 0x821A8D4C;
	}
	return 0x821A8D4C;
} // Block from 821A8D10h-821A8D4Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A8D4Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8D4C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8D4C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8D4C);
		  /* 821A8D4Ch */ case    0:  		/* lis R11, -32256 */
		/* 821A8D4Ch case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821A8D4Ch case    0:*/		return 0x821A8D50;
		  /* 821A8D50h */ case    1:  		/* lbz R10, <#[R27 + 204]> */
		/* 821A8D50h case    1:*/		cpu::mem::load8z( regs, &regs.R10, (uint32)(regs.R27 + 0x000000CC) );
		/* 821A8D50h case    1:*/		return 0x821A8D54;
		  /* 821A8D54h */ case    2:  		/* mr R3, R28 */
		/* 821A8D54h case    2:*/		regs.R3 = regs.R28;
		/* 821A8D54h case    2:*/		return 0x821A8D58;
		  /* 821A8D58h */ case    3:  		/* cmplwi CR0, R10, 0 */
		/* 821A8D58h case    3:*/		cpu::op::cmplwi<0>(regs,regs.R10,0x00000000);
		/* 821A8D58h case    3:*/		return 0x821A8D5C;
		  /* 821A8D5Ch */ case    4:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 821A8D5Ch case    4:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 821A8D5Ch case    4:*/		return 0x821A8D60;
		  /* 821A8D60h */ case    5:  		/* bc 12, CR0_EQ, 304 */
		/* 821A8D60h case    5:*/		if ( regs.CR[0].eq ) { return 0x821A8E90;  }
		/* 821A8D60h case    5:*/		return 0x821A8D64;
		  /* 821A8D64h */ case    6:  		/* lwz R11, <#[R27]> */
		/* 821A8D64h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A8D64h case    6:*/		return 0x821A8D68;
		  /* 821A8D68h */ case    7:  		/* lwz R4, <#[R11 + 44]> */
		/* 821A8D68h case    7:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x0000002C) );
		/* 821A8D68h case    7:*/		return 0x821A8D6C;
		  /* 821A8D6Ch */ case    8:  		/* lwz R5, <#[R4 + 12]> */
		/* 821A8D6Ch case    8:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821A8D6Ch case    8:*/		return 0x821A8D70;
		  /* 821A8D70h */ case    9:  		/* bl -228480 */
		/* 821A8D70h case    9:*/		regs.LR = 0x821A8D74; return 0x821710F0;
		/* 821A8D70h case    9:*/		return 0x821A8D74;
		  /* 821A8D74h */ case   10:  		/* lwz R11, <#[R3]> */
		/* 821A8D74h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A8D74h case   10:*/		return 0x821A8D78;
		  /* 821A8D78h */ case   11:  		/* rlwinm R25, R30, 27, 29, 30 */
		/* 821A8D78h case   11:*/		cpu::op::rlwinm<0,27,29,30>(regs,&regs.R25,regs.R30);
		/* 821A8D78h case   11:*/		return 0x821A8D7C;
		  /* 821A8D7Ch */ case   12:  		/* rlwinm R21, R30, 29, 29, 30 */
		/* 821A8D7Ch case   12:*/		cpu::op::rlwinm<0,29,29,30>(regs,&regs.R21,regs.R30);
		/* 821A8D7Ch case   12:*/		return 0x821A8D80;
		  /* 821A8D80h */ case   13:  		/* mr R10, R11 */
		/* 821A8D80h case   13:*/		regs.R10 = regs.R11;
		/* 821A8D80h case   13:*/		return 0x821A8D84;
		  /* 821A8D84h */ case   14:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821A8D84h case   14:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821A8D84h case   14:*/		return 0x821A8D88;
		  /* 821A8D88h */ case   15:  		/* rlwinm R20, R30, 31, 29, 30 */
		/* 821A8D88h case   15:*/		cpu::op::rlwinm<0,31,29,30>(regs,&regs.R20,regs.R30);
		/* 821A8D88h case   15:*/		return 0x821A8D8C;
		  /* 821A8D8Ch */ case   16:  		/* srw R9, R11, R25 */
		/* 821A8D8Ch case   16:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R11,regs.R25);
		/* 821A8D8Ch case   16:*/		return 0x821A8D90;
		  /* 821A8D90h */ case   17:  		/* srw R8, R11, R21 */
		/* 821A8D90h case   17:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R11,regs.R21);
		/* 821A8D90h case   17:*/		return 0x821A8D94;
		  /* 821A8D94h */ case   18:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821A8D94h case   18:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821A8D94h case   18:*/		return 0x821A8D98;
		  /* 821A8D98h */ case   19:  		/* srw R9, R11, R20 */
		/* 821A8D98h case   19:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R11,regs.R20);
		/* 821A8D98h case   19:*/		return 0x821A8D9C;
		  /* 821A8D9Ch */ case   20:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821A8D9Ch case   20:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821A8D9Ch case   20:*/		return 0x821A8DA0;
		  /* 821A8DA0h */ case   21:  		/* rlwinm R30, R30, 1, 29, 30 */
		/* 821A8DA0h case   21:*/		cpu::op::rlwinm<0,1,29,30>(regs,&regs.R30,regs.R30);
		/* 821A8DA0h case   21:*/		return 0x821A8DA4;
		  /* 821A8DA4h */ case   22:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 821A8DA4h case   22:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821A8DA4h case   22:*/		return 0x821A8DA8;
		  /* 821A8DA8h */ case   23:  		/* srw R11, R11, R30 */
		/* 821A8DA8h case   23:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821A8DA8h case   23:*/		return 0x821A8DAC;
		  /* 821A8DACh */ case   24:  		/* rlwimi R11, R9, 2, 0, 29 */
		/* 821A8DACh case   24:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 821A8DACh case   24:*/		return 0x821A8DB0;
		  /* 821A8DB0h */ case   25:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A8DB0h case   25:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A8DB0h case   25:*/		return 0x821A8DB4;
		  /* 821A8DB4h */ case   26:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821A8DB4h case   26:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821A8DB4h case   26:*/		return 0x821A8DB8;
		  /* 821A8DB8h */ case   27:  		/* rlwinm R10, R10, 0, 7, 3 */
		/* 821A8DB8h case   27:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R10,regs.R10);
		/* 821A8DB8h case   27:*/		return 0x821A8DBC;
		  /* 821A8DBCh */ case   28:  		/* mr R29, R3 */
		/* 821A8DBCh case   28:*/		regs.R29 = regs.R3;
		/* 821A8DBCh case   28:*/		return 0x821A8DC0;
		  /* 821A8DC0h */ case   29:  		/* or R11, R11, R10 */
		/* 821A8DC0h case   29:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A8DC0h case   29:*/		return 0x821A8DC4;
		  /* 821A8DC4h */ case   30:  		/* rlwinm R19, R26, 25, 4, 6 */
		/* 821A8DC4h case   30:*/		cpu::op::rlwinm<0,25,4,6>(regs,&regs.R19,regs.R26);
		/* 821A8DC4h case   30:*/		return 0x821A8DC8;
		  /* 821A8DC8h */ case   31:  		/* mr R3, R28 */
		/* 821A8DC8h case   31:*/		regs.R3 = regs.R28;
		/* 821A8DC8h case   31:*/		return 0x821A8DCC;
		  /* 821A8DCCh */ case   32:  		/* or R11, R11, R19 */
		/* 821A8DCCh case   32:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R19);
		/* 821A8DCCh case   32:*/		return 0x821A8DD0;
		  /* 821A8DD0h */ case   33:  		/* stw R11, <#[R29]> */
		/* 821A8DD0h case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A8DD0h case   33:*/		return 0x821A8DD4;
		  /* 821A8DD4h */ case   34:  		/* lwz R11, <#[R27]> */
		/* 821A8DD4h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A8DD4h case   34:*/		return 0x821A8DD8;
		  /* 821A8DD8h */ case   35:  		/* lwz R4, <#[R11 + 48]> */
		/* 821A8DD8h case   35:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + 0x00000030) );
		/* 821A8DD8h case   35:*/		return 0x821A8DDC;
		  /* 821A8DDCh */ case   36:  		/* lwz R5, <#[R4 + 12]> */
		/* 821A8DDCh case   36:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + 0x0000000C) );
		/* 821A8DDCh case   36:*/		return 0x821A8DE0;
		  /* 821A8DE0h */ case   37:  		/* bl -228592 */
		/* 821A8DE0h case   37:*/		regs.LR = 0x821A8DE4; return 0x821710F0;
		/* 821A8DE0h case   37:*/		return 0x821A8DE4;
		  /* 821A8DE4h */ case   38:  		/* lwz R11, <#[R3]> */
		/* 821A8DE4h case   38:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A8DE4h case   38:*/		return 0x821A8DE8;
		  /* 821A8DE8h */ case   39:  		/* mr R10, R11 */
		/* 821A8DE8h case   39:*/		regs.R10 = regs.R11;
		/* 821A8DE8h case   39:*/		return 0x821A8DEC;
		  /* 821A8DECh */ case   40:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821A8DECh case   40:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821A8DECh case   40:*/		return 0x821A8DF0;
		  /* 821A8DF0h */ case   41:  		/* rlwinm R10, R10, 0, 27, 18 */
		/* 821A8DF0h case   41:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R10,regs.R10);
		/* 821A8DF0h case   41:*/		return 0x821A8DF4;
		  /* 821A8DF4h */ case   42:  		/* srw R9, R11, R25 */
		/* 821A8DF4h case   42:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R11,regs.R25);
		/* 821A8DF4h case   42:*/		return 0x821A8DF8;
		  /* 821A8DF8h */ case   43:  		/* srw R8, R11, R21 */
		/* 821A8DF8h case   43:*/		cpu::op::srw<0>(regs,&regs.R8,regs.R11,regs.R21);
		/* 821A8DF8h case   43:*/		return 0x821A8DFC;
		  /* 821A8DFCh */ case   44:  		/* rlwimi R8, R9, 2, 28, 29 */
		/* 821A8DFCh case   44:*/		cpu::op::rlwimi<0,2,28,29>(regs,&regs.R8,regs.R9);
		/* 821A8DFCh case   44:*/		return 0x821A8E00;
		  /* 821A8E00h */ case   45:  		/* srw R9, R11, R20 */
		/* 821A8E00h case   45:*/		cpu::op::srw<0>(regs,&regs.R9,regs.R11,regs.R20);
		/* 821A8E00h case   45:*/		return 0x821A8E04;
		  /* 821A8E04h */ case   46:  		/* rlwinm R8, R8, 0, 28, 31 */
		/* 821A8E04h case   46:*/		cpu::op::rlwinm<0,0,28,31>(regs,&regs.R8,regs.R8);
		/* 821A8E04h case   46:*/		return 0x821A8E08;
		  /* 821A8E08h */ case   47:  		/* srw R11, R11, R30 */
		/* 821A8E08h case   47:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R30);
		/* 821A8E08h case   47:*/		return 0x821A8E0C;
		  /* 821A8E0Ch */ case   48:  		/* rlwimi R9, R8, 2, 0, 29 */
		/* 821A8E0Ch case   48:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R9,regs.R8);
		/* 821A8E0Ch case   48:*/		return 0x821A8E10;
		  /* 821A8E10h */ case   49:  		/* rlwinm R10, R10, 0, 7, 3 */
		/* 821A8E10h case   49:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R10,regs.R10);
		/* 821A8E10h case   49:*/		return 0x821A8E14;
		  /* 821A8E14h */ case   50:  		/* rlwimi R11, R9, 2, 0, 29 */
		/* 821A8E14h case   50:*/		cpu::op::rlwimi<0,2,0,29>(regs,&regs.R11,regs.R9);
		/* 821A8E14h case   50:*/		return 0x821A8E18;
		  /* 821A8E18h */ case   51:  		/* mr R31, R3 */
		/* 821A8E18h case   51:*/		regs.R31 = regs.R3;
		/* 821A8E18h case   51:*/		return 0x821A8E1C;
		  /* 821A8E1Ch */ case   52:  		/* rlwinm R11, R11, 5, 0, 26 */
		/* 821A8E1Ch case   52:*/		cpu::op::rlwinm<0,5,0,26>(regs,&regs.R11,regs.R11);
		/* 821A8E1Ch case   52:*/		return 0x821A8E20;
		  /* 821A8E20h */ case   53:  		/* or R11, R11, R10 */
		/* 821A8E20h case   53:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821A8E20h case   53:*/		return 0x821A8E24;
		  /* 821A8E24h */ case   54:  		/* or R11, R11, R19 */
		/* 821A8E24h case   54:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R19);
		/* 821A8E24h case   54:*/		return 0x821A8E28;
		  /* 821A8E28h */ case   55:  		/* stw R11, <#[R3]> */
		/* 821A8E28h case   55:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A8E28h case   55:*/		return 0x821A8E2C;
		  /* 821A8E2Ch */ case   56:  		/* lwz R11, <#[R29]> */
		/* 821A8E2Ch case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A8E2Ch case   56:*/		return 0x821A8E30;
		  /* 821A8E30h */ case   57:  		/* rlwinm R11, R11, 0, 27, 31 */
		/* 821A8E30h case   57:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821A8E30h case   57:*/		return 0x821A8E34;
		  /* 821A8E34h */ case   58:  		/* lwz R4, <#[R27 + 4]> */
		/* 821A8E34h case   58:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000004) );
		/* 821A8E34h case   58:*/		return 0x821A8E38;
		  /* 821A8E38h */ case   59:  		/* rlwinm. R10, R11, 0, 27, 28 */
		/* 821A8E38h case   59:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R11);
		/* 821A8E38h case   59:*/		return 0x821A8E3C;
		  /* 821A8E3Ch */ case   60:  		/* bc 12, CR0_EQ, 20 */
		/* 821A8E3Ch case   60:*/		if ( regs.CR[0].eq ) { return 0x821A8E50;  }
		/* 821A8E3Ch case   60:*/		return 0x821A8E40;
		  /* 821A8E40h */ case   61:  		/* rlwinm. R10, R4, 0, 27, 28 */
		/* 821A8E40h case   61:*/		cpu::op::rlwinm<1,0,27,28>(regs,&regs.R10,regs.R4);
		/* 821A8E40h case   61:*/		return 0x821A8E44;
		  /* 821A8E44h */ case   62:  		/* bc 12, CR0_EQ, 12 */
		/* 821A8E44h case   62:*/		if ( regs.CR[0].eq ) { return 0x821A8E50;  }
		/* 821A8E44h case   62:*/		return 0x821A8E48;
		  /* 821A8E48h */ case   63:  		/* mr R11, R24 */
		/* 821A8E48h case   63:*/		regs.R11 = regs.R24;
		/* 821A8E48h case   63:*/		return 0x821A8E4C;
		  /* 821A8E4Ch */ case   64:  		/* b 44 */
		/* 821A8E4Ch case   64:*/		return 0x821A8E78;
		/* 821A8E4Ch case   64:*/		return 0x821A8E50;
	}
	return 0x821A8E50;
} // Block from 821A8D4Ch-821A8E50h (65 instructions)

//////////////////////////////////////////////////////
// Block at 821A8E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8E50);
		  /* 821A8E50h */ case    0:  		/* rlwinm. R10, R11, 0, 30, 30 */
		/* 821A8E50h case    0:*/		cpu::op::rlwinm<1,0,30,30>(regs,&regs.R10,regs.R11);
		/* 821A8E50h case    0:*/		return 0x821A8E54;
		  /* 821A8E54h */ case    1:  		/* bc 12, CR0_EQ, 12 */
		/* 821A8E54h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A8E60;  }
		/* 821A8E54h case    1:*/		return 0x821A8E58;
		  /* 821A8E58h */ case    2:  		/* rlwinm. R10, R4, 0, 31, 31 */
		/* 821A8E58h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R4);
		/* 821A8E58h case    2:*/		return 0x821A8E5C;
		  /* 821A8E5Ch */ case    3:  		/* bc 4, CR0_EQ, -20 */
		/* 821A8E5Ch case    3:*/		if ( !regs.CR[0].eq ) { return 0x821A8E48;  }
		/* 821A8E5Ch case    3:*/		return 0x821A8E60;
	}
	return 0x821A8E60;
} // Block from 821A8E50h-821A8E60h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A8E60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8E60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8E60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8E60);
		  /* 821A8E60h */ case    0:  		/* rlwinm. R11, R11, 0, 29, 29 */
		/* 821A8E60h case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R11);
		/* 821A8E60h case    0:*/		return 0x821A8E64;
		  /* 821A8E64h */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821A8E64h case    1:*/		if ( regs.CR[0].eq ) { return 0x821A8E74;  }
		/* 821A8E64h case    1:*/		return 0x821A8E68;
		  /* 821A8E68h */ case    2:  		/* rlwinm. R11, R4, 0, 31, 31 */
		/* 821A8E68h case    2:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R4);
		/* 821A8E68h case    2:*/		return 0x821A8E6C;
		  /* 821A8E6Ch */ case    3:  		/* mr R11, R24 */
		/* 821A8E6Ch case    3:*/		regs.R11 = regs.R24;
		/* 821A8E6Ch case    3:*/		return 0x821A8E70;
		  /* 821A8E70h */ case    4:  		/* bc 4, CR0_EQ, 8 */
		/* 821A8E70h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A8E78;  }
		/* 821A8E70h case    4:*/		return 0x821A8E74;
	}
	return 0x821A8E74;
} // Block from 821A8E60h-821A8E74h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A8E74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8E74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8E74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8E74);
		  /* 821A8E74h */ case    0:  		/* li R11, 1 */
		/* 821A8E74h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A8E74h case    0:*/		return 0x821A8E78;
	}
	return 0x821A8E78;
} // Block from 821A8E74h-821A8E78h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A8E78h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8E78( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8E78) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8E78);
		  /* 821A8E78h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821A8E78h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821A8E78h case    0:*/		return 0x821A8E7C;
		  /* 821A8E7Ch */ case    1:  		/* mr R3, R29 */
		/* 821A8E7Ch case    1:*/		regs.R3 = regs.R29;
		/* 821A8E7Ch case    1:*/		return 0x821A8E80;
		  /* 821A8E80h */ case    2:  		/* bc 4, CR0_EQ, 8 */
		/* 821A8E80h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A8E88;  }
		/* 821A8E80h case    2:*/		return 0x821A8E84;
		  /* 821A8E84h */ case    3:  		/* mr R3, R31 */
		/* 821A8E84h case    3:*/		regs.R3 = regs.R31;
		/* 821A8E84h case    3:*/		return 0x821A8E88;
	}
	return 0x821A8E88;
} // Block from 821A8E78h-821A8E88h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A8E88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8E88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8E88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8E88);
		  /* 821A8E88h */ case    0:  		/* bl -201672 */
		/* 821A8E88h case    0:*/		regs.LR = 0x821A8E8C; return 0x82177AC0;
		/* 821A8E88h case    0:*/		return 0x821A8E8C;
		  /* 821A8E8Ch */ case    1:  		/* b 172 */
		/* 821A8E8Ch case    1:*/		return 0x821A8F38;
		/* 821A8E8Ch case    1:*/		return 0x821A8E90;
	}
	return 0x821A8E90;
} // Block from 821A8E88h-821A8E90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A8E90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8E90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8E90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8E90);
		  /* 821A8E90h */ case    0:  		/* lis R11, -32256 */
		/* 821A8E90h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821A8E90h case    0:*/		return 0x821A8E94;
		  /* 821A8E94h */ case    1:  		/* fmr FR4, FR31 */
		/* 821A8E94h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821A8E94h case    1:*/		return 0x821A8E98;
		  /* 821A8E98h */ case    2:  		/* li R4, 1 */
		/* 821A8E98h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A8E98h case    2:*/		return 0x821A8E9C;
		  /* 821A8E9Ch */ case    3:  		/* fmr FR3, FR31 */
		/* 821A8E9Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821A8E9Ch case    3:*/		return 0x821A8EA0;
		  /* 821A8EA0h */ case    4:  		/* fmr FR2, FR31 */
		/* 821A8EA0h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821A8EA0h case    4:*/		return 0x821A8EA4;
		  /* 821A8EA4h */ case    5:  		/* lfs FR1, <#[R11 + 1792]> */
		/* 821A8EA4h case    5:*/		cpu::mem::load32f( regs, &regs.FR1, (uint32)(regs.R11 + 0x00000700) );
		/* 821A8EA4h case    5:*/		return 0x821A8EA8;
		  /* 821A8EA8h */ case    6:  		/* bl 531632 */
		/* 821A8EA8h case    6:*/		regs.LR = 0x821A8EAC; return 0x8222AB58;
		/* 821A8EA8h case    6:*/		return 0x821A8EAC;
		  /* 821A8EACh */ case    7:  		/* mr R25, R3 */
		/* 821A8EACh case    7:*/		regs.R25 = regs.R3;
		/* 821A8EACh case    7:*/		return 0x821A8EB0;
		  /* 821A8EB0h */ case    8:  		/* lwz R4, <#[R27]> */
		/* 821A8EB0h case    8:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 821A8EB0h case    8:*/		return 0x821A8EB4;
		  /* 821A8EB4h */ case    9:  		/* mr R3, R28 */
		/* 821A8EB4h case    9:*/		regs.R3 = regs.R28;
		/* 821A8EB4h case    9:*/		return 0x821A8EB8;
		  /* 821A8EB8h */ case   10:  		/* lwz R29, <#[R27 + 4]> */
		/* 821A8EB8h case   10:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R27 + 0x00000004) );
		/* 821A8EB8h case   10:*/		return 0x821A8EBC;
		  /* 821A8EBCh */ case   11:  		/* bl -200380 */
		/* 821A8EBCh case   11:*/		regs.LR = 0x821A8EC0; return 0x82178000;
		/* 821A8EBCh case   11:*/		return 0x821A8EC0;
		  /* 821A8EC0h */ case   12:  		/* lwz R11, <#[R3]> */
		/* 821A8EC0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A8EC0h case   12:*/		return 0x821A8EC4;
		  /* 821A8EC4h */ case   13:  		/* rlwinm R24, R26, 25, 4, 6 */
		/* 821A8EC4h case   13:*/		cpu::op::rlwinm<0,25,4,6>(regs,&regs.R24,regs.R26);
		/* 821A8EC4h case   13:*/		return 0x821A8EC8;
		  /* 821A8EC8h */ case   14:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 821A8EC8h case   14:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 821A8EC8h case   14:*/		return 0x821A8ECC;
		  /* 821A8ECCh */ case   15:  		/* mr R4, R29 */
		/* 821A8ECCh case   15:*/		regs.R4 = regs.R29;
		/* 821A8ECCh case   15:*/		return 0x821A8ED0;
		  /* 821A8ED0h */ case   16:  		/* or R11, R11, R24 */
		/* 821A8ED0h case   16:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821A8ED0h case   16:*/		return 0x821A8ED4;
		  /* 821A8ED4h */ case   17:  		/* mr R31, R3 */
		/* 821A8ED4h case   17:*/		regs.R31 = regs.R3;
		/* 821A8ED4h case   17:*/		return 0x821A8ED8;
		  /* 821A8ED8h */ case   18:  		/* stw R11, <#[R3]> */
		/* 821A8ED8h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A8ED8h case   18:*/		return 0x821A8EDC;
		  /* 821A8EDCh */ case   19:  		/* bl -201756 */
		/* 821A8EDCh case   19:*/		regs.LR = 0x821A8EE0; return 0x82177AC0;
		/* 821A8EDCh case   19:*/		return 0x821A8EE0;
		  /* 821A8EE0h */ case   20:  		/* lwz R11, <#[R31]> */
		/* 821A8EE0h case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A8EE0h case   20:*/		return 0x821A8EE4;
		  /* 821A8EE4h */ case   21:  		/* mr R4, R25 */
		/* 821A8EE4h case   21:*/		regs.R4 = regs.R25;
		/* 821A8EE4h case   21:*/		return 0x821A8EE8;
		  /* 821A8EE8h */ case   22:  		/* rlwimi R11, R30, 5, 19, 26 */
		/* 821A8EE8h case   22:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R30);
		/* 821A8EE8h case   22:*/		return 0x821A8EEC;
		  /* 821A8EECh */ case   23:  		/* mr R3, R28 */
		/* 821A8EECh case   23:*/		regs.R3 = regs.R28;
		/* 821A8EECh case   23:*/		return 0x821A8EF0;
		  /* 821A8EF0h */ case   24:  		/* stw R11, <#[R31]> */
		/* 821A8EF0h case   24:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A8EF0h case   24:*/		return 0x821A8EF4;
		  /* 821A8EF4h */ case   25:  		/* mr R29, R31 */
		/* 821A8EF4h case   25:*/		regs.R29 = regs.R31;
		/* 821A8EF4h case   25:*/		return 0x821A8EF8;
		  /* 821A8EF8h */ case   26:  		/* bl -200440 */
		/* 821A8EF8h case   26:*/		regs.LR = 0x821A8EFC; return 0x82178000;
		/* 821A8EF8h case   26:*/		return 0x821A8EFC;
		  /* 821A8EFCh */ case   27:  		/* lwz R11, <#[R3]> */
		/* 821A8EFCh case   27:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A8EFCh case   27:*/		return 0x821A8F00;
		  /* 821A8F00h */ case   28:  		/* li R4, 0 */
		/* 821A8F00h case   28:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A8F00h case   28:*/		return 0x821A8F04;
		  /* 821A8F04h */ case   29:  		/* rlwinm R11, R11, 0, 7, 3 */
		/* 821A8F04h case   29:*/		cpu::op::rlwinm<0,0,7,3>(regs,&regs.R11,regs.R11);
		/* 821A8F04h case   29:*/		return 0x821A8F08;
		  /* 821A8F08h */ case   30:  		/* mr R31, R3 */
		/* 821A8F08h case   30:*/		regs.R31 = regs.R3;
		/* 821A8F08h case   30:*/		return 0x821A8F0C;
		  /* 821A8F0Ch */ case   31:  		/* or R11, R11, R24 */
		/* 821A8F0Ch case   31:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821A8F0Ch case   31:*/		return 0x821A8F10;
		  /* 821A8F10h */ case   32:  		/* stw R11, <#[R3]> */
		/* 821A8F10h case   32:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A8F10h case   32:*/		return 0x821A8F14;
		  /* 821A8F14h */ case   33:  		/* bl -201812 */
		/* 821A8F14h case   33:*/		regs.LR = 0x821A8F18; return 0x82177AC0;
		/* 821A8F14h case   33:*/		return 0x821A8F18;
		  /* 821A8F18h */ case   34:  		/* lwz R11, <#[R31]> */
		/* 821A8F18h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A8F18h case   34:*/		return 0x821A8F1C;
		  /* 821A8F1Ch */ case   35:  		/* mr R3, R25 */
		/* 821A8F1Ch case   35:*/		regs.R3 = regs.R25;
		/* 821A8F1Ch case   35:*/		return 0x821A8F20;
		  /* 821A8F20h */ case   36:  		/* rlwinm R11, R11, 0, 27, 18 */
		/* 821A8F20h case   36:*/		cpu::op::rlwinm<0,0,27,18>(regs,&regs.R11,regs.R11);
		/* 821A8F20h case   36:*/		return 0x821A8F24;
		  /* 821A8F24h */ case   37:  		/* stw R11, <#[R31]> */
		/* 821A8F24h case   37:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821A8F24h case   37:*/		return 0x821A8F28;
		  /* 821A8F28h */ case   38:  		/* bl -76664 */
		/* 821A8F28h case   38:*/		regs.LR = 0x821A8F2C; return 0x821963B0;
		/* 821A8F28h case   38:*/		return 0x821A8F2C;
		  /* 821A8F2Ch */ case   39:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A8F2Ch case   39:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A8F2Ch case   39:*/		return 0x821A8F30;
		  /* 821A8F30h */ case   40:  		/* oris R11, R11, 256 */
		/* 821A8F30h case   40:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A8F30h case   40:*/		return 0x821A8F34;
		  /* 821A8F34h */ case   41:  		/* stw R11, <#[R25 + 8]> */
		/* 821A8F34h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A8F34h case   41:*/		return 0x821A8F38;
	}
	return 0x821A8F38;
} // Block from 821A8E90h-821A8F38h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821A8F38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8F38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8F38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8F38);
		  /* 821A8F38h */ case    0:  		/* cmplwi CR6, R26, 2 */
		/* 821A8F38h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000002);
		/* 821A8F38h case    0:*/		return 0x821A8F3C;
		  /* 821A8F3Ch */ case    1:  		/* mr R3, R28 */
		/* 821A8F3Ch case    1:*/		regs.R3 = regs.R28;
		/* 821A8F3Ch case    1:*/		return 0x821A8F40;
		  /* 821A8F40h */ case    2:  		/* bc 12, CR6_EQ, 80 */
		/* 821A8F40h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A8F90;  }
		/* 821A8F40h case    2:*/		return 0x821A8F44;
		  /* 821A8F44h */ case    3:  		/* cmplwi CR6, R26, 3 */
		/* 821A8F44h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000003);
		/* 821A8F44h case    3:*/		return 0x821A8F48;
		  /* 821A8F48h */ case    4:  		/* bc 12, CR6_EQ, 44 */
		/* 821A8F48h case    4:*/		if ( regs.CR[6].eq ) { return 0x821A8F74;  }
		/* 821A8F48h case    4:*/		return 0x821A8F4C;
		  /* 821A8F4Ch */ case    5:  		/* cmplwi CR6, R26, 4 */
		/* 821A8F4Ch case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 821A8F4Ch case    5:*/		return 0x821A8F50;
		  /* 821A8F50h */ case    6:  		/* bc 12, CR6_EQ, 12 */
		/* 821A8F50h case    6:*/		if ( regs.CR[6].eq ) { return 0x821A8F5C;  }
		/* 821A8F50h case    6:*/		return 0x821A8F54;
		  /* 821A8F54h */ case    7:  		/* li R4, 4800 */
		/* 821A8F54h case    7:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821A8F54h case    7:*/		return 0x821A8F58;
		  /* 821A8F58h */ case    8:  		/* bl -356592 */
		/* 821A8F58h case    8:*/		regs.LR = 0x821A8F5C; return 0x82151E68;
		/* 821A8F58h case    8:*/		return 0x821A8F5C;
	}
	return 0x821A8F5C;
} // Block from 821A8F38h-821A8F5Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A8F5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8F5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8F5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8F5C);
		  /* 821A8F5Ch */ case    0:  		/* mr R7, R31 */
		/* 821A8F5Ch case    0:*/		regs.R7 = regs.R31;
		/* 821A8F5Ch case    0:*/		return 0x821A8F60;
		  /* 821A8F60h */ case    1:  		/* mr R6, R29 */
		/* 821A8F60h case    1:*/		regs.R6 = regs.R29;
		/* 821A8F60h case    1:*/		return 0x821A8F64;
		  /* 821A8F64h */ case    2:  		/* mr R5, R23 */
		/* 821A8F64h case    2:*/		regs.R5 = regs.R23;
		/* 821A8F64h case    2:*/		return 0x821A8F68;
		  /* 821A8F68h */ case    3:  		/* li R4, 0 */
		/* 821A8F68h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A8F68h case    3:*/		return 0x821A8F6C;
		  /* 821A8F6Ch */ case    4:  		/* bl -43636 */
		/* 821A8F6Ch case    4:*/		regs.LR = 0x821A8F70; return 0x8219E4F8;
		/* 821A8F6Ch case    4:*/		return 0x821A8F70;
		  /* 821A8F70h */ case    5:  		/* b 24 */
		/* 821A8F70h case    5:*/		return 0x821A8F88;
		/* 821A8F70h case    5:*/		return 0x821A8F74;
	}
	return 0x821A8F74;
} // Block from 821A8F5Ch-821A8F74h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A8F74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8F74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8F74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8F74);
		  /* 821A8F74h */ case    0:  		/* mr R7, R31 */
		/* 821A8F74h case    0:*/		regs.R7 = regs.R31;
		/* 821A8F74h case    0:*/		return 0x821A8F78;
		  /* 821A8F78h */ case    1:  		/* mr R6, R29 */
		/* 821A8F78h case    1:*/		regs.R6 = regs.R29;
		/* 821A8F78h case    1:*/		return 0x821A8F7C;
		  /* 821A8F7Ch */ case    2:  		/* mr R5, R23 */
		/* 821A8F7Ch case    2:*/		regs.R5 = regs.R23;
		/* 821A8F7Ch case    2:*/		return 0x821A8F80;
		  /* 821A8F80h */ case    3:  		/* li R4, 0 */
		/* 821A8F80h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A8F80h case    3:*/		return 0x821A8F84;
		  /* 821A8F84h */ case    4:  		/* bl -43460 */
		/* 821A8F84h case    4:*/		regs.LR = 0x821A8F88; return 0x8219E5C0;
		/* 821A8F84h case    4:*/		return 0x821A8F88;
	}
	return 0x821A8F88;
} // Block from 821A8F74h-821A8F88h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A8F88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8F88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8F88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8F88);
		  /* 821A8F88h */ case    0:  		/* mr R31, R3 */
		/* 821A8F88h case    0:*/		regs.R31 = regs.R3;
		/* 821A8F88h case    0:*/		return 0x821A8F8C;
		  /* 821A8F8Ch */ case    1:  		/* b 100 */
		/* 821A8F8Ch case    1:*/		return 0x821A8FF0;
		/* 821A8F8Ch case    1:*/		return 0x821A8F90;
	}
	return 0x821A8F90;
} // Block from 821A8F88h-821A8F90h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A8F90h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8F90( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8F90) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8F90);
		  /* 821A8F90h */ case    0:  		/* li R4, 1 */
		/* 821A8F90h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A8F90h case    0:*/		return 0x821A8F94;
		  /* 821A8F94h */ case    1:  		/* fmr FR4, FR31 */
		/* 821A8F94h case    1:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821A8F94h case    1:*/		return 0x821A8F98;
		  /* 821A8F98h */ case    2:  		/* fmr FR3, FR31 */
		/* 821A8F98h case    2:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821A8F98h case    2:*/		return 0x821A8F9C;
		  /* 821A8F9Ch */ case    3:  		/* fmr FR2, FR31 */
		/* 821A8F9Ch case    3:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821A8F9Ch case    3:*/		return 0x821A8FA0;
		  /* 821A8FA0h */ case    4:  		/* fmr FR1, FR31 */
		/* 821A8FA0h case    4:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821A8FA0h case    4:*/		return 0x821A8FA4;
		  /* 821A8FA4h */ case    5:  		/* bl 531380 */
		/* 821A8FA4h case    5:*/		regs.LR = 0x821A8FA8; return 0x8222AB58;
		/* 821A8FA4h case    5:*/		return 0x821A8FA8;
		  /* 821A8FA8h */ case    6:  		/* mr R30, R3 */
		/* 821A8FA8h case    6:*/		regs.R30 = regs.R3;
		/* 821A8FA8h case    6:*/		return 0x821A8FAC;
		  /* 821A8FACh */ case    7:  		/* mr R4, R3 */
		/* 821A8FACh case    7:*/		regs.R4 = regs.R3;
		/* 821A8FACh case    7:*/		return 0x821A8FB0;
		  /* 821A8FB0h */ case    8:  		/* li R5, 0 */
		/* 821A8FB0h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A8FB0h case    8:*/		return 0x821A8FB4;
		  /* 821A8FB4h */ case    9:  		/* mr R3, R28 */
		/* 821A8FB4h case    9:*/		regs.R3 = regs.R28;
		/* 821A8FB4h case    9:*/		return 0x821A8FB8;
		  /* 821A8FB8h */ case   10:  		/* bl -200360 */
		/* 821A8FB8h case   10:*/		regs.LR = 0x821A8FBC; return 0x82178110;
		/* 821A8FB8h case   10:*/		return 0x821A8FBC;
		  /* 821A8FBCh */ case   11:  		/* mr R8, R3 */
		/* 821A8FBCh case   11:*/		regs.R8 = regs.R3;
		/* 821A8FBCh case   11:*/		return 0x821A8FC0;
		  /* 821A8FC0h */ case   12:  		/* mr R7, R31 */
		/* 821A8FC0h case   12:*/		regs.R7 = regs.R31;
		/* 821A8FC0h case   12:*/		return 0x821A8FC4;
		  /* 821A8FC4h */ case   13:  		/* mr R6, R29 */
		/* 821A8FC4h case   13:*/		regs.R6 = regs.R29;
		/* 821A8FC4h case   13:*/		return 0x821A8FC8;
		  /* 821A8FC8h */ case   14:  		/* mr R5, R23 */
		/* 821A8FC8h case   14:*/		regs.R5 = regs.R23;
		/* 821A8FC8h case   14:*/		return 0x821A8FCC;
		  /* 821A8FCCh */ case   15:  		/* li R4, 0 */
		/* 821A8FCCh case   15:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A8FCCh case   15:*/		return 0x821A8FD0;
		  /* 821A8FD0h */ case   16:  		/* mr R3, R28 */
		/* 821A8FD0h case   16:*/		regs.R3 = regs.R28;
		/* 821A8FD0h case   16:*/		return 0x821A8FD4;
		  /* 821A8FD4h */ case   17:  		/* bl -43340 */
		/* 821A8FD4h case   17:*/		regs.LR = 0x821A8FD8; return 0x8219E688;
		/* 821A8FD4h case   17:*/		return 0x821A8FD8;
		  /* 821A8FD8h */ case   18:  		/* mr R31, R3 */
		/* 821A8FD8h case   18:*/		regs.R31 = regs.R3;
		/* 821A8FD8h case   18:*/		return 0x821A8FDC;
		  /* 821A8FDCh */ case   19:  		/* mr R3, R30 */
		/* 821A8FDCh case   19:*/		regs.R3 = regs.R30;
		/* 821A8FDCh case   19:*/		return 0x821A8FE0;
		  /* 821A8FE0h */ case   20:  		/* bl -76848 */
		/* 821A8FE0h case   20:*/		regs.LR = 0x821A8FE4; return 0x821963B0;
		/* 821A8FE0h case   20:*/		return 0x821A8FE4;
		  /* 821A8FE4h */ case   21:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A8FE4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A8FE4h case   21:*/		return 0x821A8FE8;
		  /* 821A8FE8h */ case   22:  		/* oris R11, R11, 256 */
		/* 821A8FE8h case   22:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A8FE8h case   22:*/		return 0x821A8FEC;
		  /* 821A8FECh */ case   23:  		/* stw R11, <#[R30 + 8]> */
		/* 821A8FECh case   23:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A8FECh case   23:*/		return 0x821A8FF0;
	}
	return 0x821A8FF0;
} // Block from 821A8F90h-821A8FF0h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821A8FF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A8FF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A8FF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A8FF0);
		  /* 821A8FF0h */ case    0:  		/* lwz R4, <#[R27 + 8]> */
		/* 821A8FF0h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000008) );
		/* 821A8FF0h case    0:*/		return 0x821A8FF4;
		  /* 821A8FF4h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821A8FF4h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A8FF4h case    1:*/		return 0x821A8FF8;
		  /* 821A8FF8h */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821A8FF8h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A9014;  }
		/* 821A8FF8h case    2:*/		return 0x821A8FFC;
		  /* 821A8FFCh */ case    3:  		/* li R5, 0 */
		/* 821A8FFCh case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A8FFCh case    3:*/		return 0x821A9000;
		  /* 821A9000h */ case    4:  		/* mr R3, R28 */
		/* 821A9000h case    4:*/		regs.R3 = regs.R28;
		/* 821A9000h case    4:*/		return 0x821A9004;
		  /* 821A9004h */ case    5:  		/* bl -231604 */
		/* 821A9004h case    5:*/		regs.LR = 0x821A9008; return 0x82170750;
		/* 821A9004h case    5:*/		return 0x821A9008;
		  /* 821A9008h */ case    6:  		/* mr R4, R3 */
		/* 821A9008h case    6:*/		regs.R4 = regs.R3;
		/* 821A9008h case    6:*/		return 0x821A900C;
		  /* 821A900Ch */ case    7:  		/* mr R3, R31 */
		/* 821A900Ch case    7:*/		regs.R3 = regs.R31;
		/* 821A900Ch case    7:*/		return 0x821A9010;
		  /* 821A9010h */ case    8:  		/* bl -200264 */
		/* 821A9010h case    8:*/		regs.LR = 0x821A9014; return 0x821781C8;
		/* 821A9010h case    8:*/		return 0x821A9014;
	}
	return 0x821A9014;
} // Block from 821A8FF0h-821A9014h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A9014h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9014( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9014) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9014);
		  /* 821A9014h */ case    0:  		/* mr R4, R31 */
		/* 821A9014h case    0:*/		regs.R4 = regs.R31;
		/* 821A9014h case    0:*/		return 0x821A9018;
		  /* 821A9018h */ case    1:  		/* mr R3, R28 */
		/* 821A9018h case    1:*/		regs.R3 = regs.R28;
		/* 821A9018h case    1:*/		return 0x821A901C;
		  /* 821A901Ch */ case    2:  		/* bl -47844 */
		/* 821A901Ch case    2:*/		regs.LR = 0x821A9020; return 0x8219D538;
		/* 821A901Ch case    2:*/		return 0x821A9020;
		  /* 821A9020h */ case    3:  		/* lwz R11, <#[R27 + 160]> */
		/* 821A9020h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000A0) );
		/* 821A9020h case    3:*/		return 0x821A9024;
		  /* 821A9024h */ case    4:  		/* cmplwi CR6, R11, 0 */
		/* 821A9024h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A9024h case    4:*/		return 0x821A9028;
		  /* 821A9028h */ case    5:  		/* bc 12, CR6_EQ, 256 */
		/* 821A9028h case    5:*/		if ( regs.CR[6].eq ) { return 0x821A9128;  }
		/* 821A9028h case    5:*/		return 0x821A902C;
		  /* 821A902Ch */ case    6:  		/* addi R29, R27, 32 */
		/* 821A902Ch case    6:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R27,0x20);
		/* 821A902Ch case    6:*/		return 0x821A9030;
		  /* 821A9030h */ case    7:  		/* lwz R11, <#[R29 + 128]> */
		/* 821A9030h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000080) );
		/* 821A9030h case    7:*/		return 0x821A9034;
		  /* 821A9034h */ case    8:  		/* addi R9, R1, 80 */
		/* 821A9034h case    8:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821A9034h case    8:*/		return 0x821A9038;
		  /* 821A9038h */ case    9:  		/* mr R3, R28 */
		/* 821A9038h case    9:*/		regs.R3 = regs.R28;
		/* 821A9038h case    9:*/		return 0x821A903C;
		  /* 821A903Ch */ case   10:  		/* addi R11, R11, -1 */
		/* 821A903Ch case   10:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A903Ch case   10:*/		return 0x821A9040;
		  /* 821A9040h */ case   11:  		/* rlwinm R10, R11, 4, 0, 27 */
		/* 821A9040h case   11:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R11);
		/* 821A9040h case   11:*/		return 0x821A9044;
		  /* 821A9044h */ case   12:  		/* stw R11, <#[R29 + 128]> */
		/* 821A9044h case   12:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R29 + 0x00000080) );
		/* 821A9044h case   12:*/		return 0x821A9048;
		  /* 821A9048h */ case   13:  		/* add R11, R10, R29 */
		/* 821A9048h case   13:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R29);
		/* 821A9048h case   13:*/		return 0x821A904C;
		  /* 821A904Ch */ case   14:  		/* lwzx R10, <#[R10 + R29]> */
		/* 821A904Ch case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R29 + 0x00000000) );
		/* 821A904Ch case   14:*/		return 0x821A9050;
		  /* 821A9050h */ case   15:  		/* stw R10, <#[R9]> */
		/* 821A9050h case   15:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821A9050h case   15:*/		return 0x821A9054;
		  /* 821A9054h */ case   16:  		/* lwz R10, <#[R11 + 4]> */
		/* 821A9054h case   16:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821A9054h case   16:*/		return 0x821A9058;
		  /* 821A9058h */ case   17:  		/* lwz R8, <#[R11 + 12]> */
		/* 821A9058h case   17:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A9058h case   17:*/		return 0x821A905C;
		  /* 821A905Ch */ case   18:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A905Ch case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A905Ch case   18:*/		return 0x821A9060;
		  /* 821A9060h */ case   19:  		/* stw R10, <#[R9 + 4]> */
		/* 821A9060h case   19:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000004) );
		/* 821A9060h case   19:*/		return 0x821A9064;
		  /* 821A9064h */ case   20:  		/* stw R8, <#[R9 + 12]> */
		/* 821A9064h case   20:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A9064h case   20:*/		return 0x821A9068;
		  /* 821A9068h */ case   21:  		/* stw R11, <#[R9 + 8]> */
		/* 821A9068h case   21:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000008) );
		/* 821A9068h case   21:*/		return 0x821A906C;
		  /* 821A906Ch */ case   22:  		/* lwz R5, <#[R1 + 84]> */
		/* 821A906Ch case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A906Ch case   22:*/		return 0x821A9070;
		  /* 821A9070h */ case   23:  		/* lwz R4, <#[R1 + 80]> */
		/* 821A9070h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821A9070h case   23:*/		return 0x821A9074;
		  /* 821A9074h */ case   24:  		/* lwz R26, <#[R1 + 88]> */
		/* 821A9074h case   24:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000058) );
		/* 821A9074h case   24:*/		return 0x821A9078;
		  /* 821A9078h */ case   25:  		/* mr R6, R26 */
		/* 821A9078h case   25:*/		regs.R6 = regs.R26;
		/* 821A9078h case   25:*/		return 0x821A907C;
		  /* 821A907Ch */ case   26:  		/* bl -200468 */
		/* 821A907Ch case   26:*/		regs.LR = 0x821A9080; return 0x82178168;
		/* 821A907Ch case   26:*/		return 0x821A9080;
		  /* 821A9080h */ case   27:  		/* mr R30, R3 */
		/* 821A9080h case   27:*/		regs.R30 = regs.R3;
		/* 821A9080h case   27:*/		return 0x821A9084;
		  /* 821A9084h */ case   28:  		/* li R5, 0 */
		/* 821A9084h case   28:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A9084h case   28:*/		return 0x821A9088;
		  /* 821A9088h */ case   29:  		/* mr R4, R31 */
		/* 821A9088h case   29:*/		regs.R4 = regs.R31;
		/* 821A9088h case   29:*/		return 0x821A908C;
		  /* 821A908Ch */ case   30:  		/* mr R3, R28 */
		/* 821A908Ch case   30:*/		regs.R3 = regs.R28;
		/* 821A908Ch case   30:*/		return 0x821A9090;
		  /* 821A9090h */ case   31:  		/* bl -200576 */
		/* 821A9090h case   31:*/		regs.LR = 0x821A9094; return 0x82178110;
		/* 821A9090h case   31:*/		return 0x821A9094;
		  /* 821A9094h */ case   32:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A9094h case   32:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A9094h case   32:*/		return 0x821A9098;
		  /* 821A9098h */ case   33:  		/* mr R7, R3 */
		/* 821A9098h case   33:*/		regs.R7 = regs.R3;
		/* 821A9098h case   33:*/		return 0x821A909C;
		  /* 821A909Ch */ case   34:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A909Ch case   34:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A909Ch case   34:*/		return 0x821A90A0;
		  /* 821A90A0h */ case   35:  		/* cmplwi CR6, R11, 128 */
		/* 821A90A0h case   35:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821A90A0h case   35:*/		return 0x821A90A4;
		  /* 821A90A4h */ case   36:  		/* bc 4, CR6_EQ, 16 */
		/* 821A90A4h case   36:*/		if ( !regs.CR[6].eq ) { return 0x821A90B4;  }
		/* 821A90A4h case   36:*/		return 0x821A90A8;
		  /* 821A90A8h */ case   37:  		/* mr R11, R30 */
		/* 821A90A8h case   37:*/		regs.R11 = regs.R30;
		/* 821A90A8h case   37:*/		return 0x821A90AC;
		  /* 821A90ACh */ case   38:  		/* mr R30, R3 */
		/* 821A90ACh case   38:*/		regs.R30 = regs.R3;
		/* 821A90ACh case   38:*/		return 0x821A90B0;
		  /* 821A90B0h */ case   39:  		/* mr R7, R11 */
		/* 821A90B0h case   39:*/		regs.R7 = regs.R11;
		/* 821A90B0h case   39:*/		return 0x821A90B4;
	}
	return 0x821A90B4;
} // Block from 821A9014h-821A90B4h (40 instructions)

//////////////////////////////////////////////////////
// Block at 821A90B4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A90B4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A90B4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A90B4);
		  /* 821A90B4h */ case    0:  		/* mr R6, R30 */
		/* 821A90B4h case    0:*/		regs.R6 = regs.R30;
		/* 821A90B4h case    0:*/		return 0x821A90B8;
		  /* 821A90B8h */ case    1:  		/* mr R5, R23 */
		/* 821A90B8h case    1:*/		regs.R5 = regs.R23;
		/* 821A90B8h case    1:*/		return 0x821A90BC;
		  /* 821A90BCh */ case    2:  		/* li R4, 0 */
		/* 821A90BCh case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A90BCh case    2:*/		return 0x821A90C0;
		  /* 821A90C0h */ case    3:  		/* mr R3, R28 */
		/* 821A90C0h case    3:*/		regs.R3 = regs.R28;
		/* 821A90C0h case    3:*/		return 0x821A90C4;
		  /* 821A90C4h */ case    4:  		/* bl -45788 */
		/* 821A90C4h case    4:*/		regs.LR = 0x821A90C8; return 0x8219DDE8;
		/* 821A90C4h case    4:*/		return 0x821A90C8;
		  /* 821A90C8h */ case    5:  		/* rlwinm. R11, R26, 0, 28, 28 */
		/* 821A90C8h case    5:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R26);
		/* 821A90C8h case    5:*/		return 0x821A90CC;
		  /* 821A90CCh */ case    6:  		/* mr R30, R3 */
		/* 821A90CCh case    6:*/		regs.R30 = regs.R3;
		/* 821A90CCh case    6:*/		return 0x821A90D0;
		  /* 821A90D0h */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 821A90D0h case    7:*/		if ( regs.CR[0].eq ) { return 0x821A90F8;  }
		/* 821A90D0h case    7:*/		return 0x821A90D4;
		  /* 821A90D4h */ case    8:  		/* lwz R3, <#[R1 + 92]> */
		/* 821A90D4h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A90D4h case    8:*/		return 0x821A90D8;
		  /* 821A90D8h */ case    9:  		/* bl -202176 */
		/* 821A90D8h case    9:*/		regs.LR = 0x821A90DC; return 0x82177B18;
		/* 821A90D8h case    9:*/		return 0x821A90DC;
		  /* 821A90DCh */ case   10:  		/* mr R4, R3 */
		/* 821A90DCh case   10:*/		regs.R4 = regs.R3;
		/* 821A90DCh case   10:*/		return 0x821A90E0;
		  /* 821A90E0h */ case   11:  		/* mr R3, R28 */
		/* 821A90E0h case   11:*/		regs.R3 = regs.R28;
		/* 821A90E0h case   11:*/		return 0x821A90E4;
		  /* 821A90E4h */ case   12:  		/* li R5, 0 */
		/* 821A90E4h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A90E4h case   12:*/		return 0x821A90E8;
		  /* 821A90E8h */ case   13:  		/* bl -231832 */
		/* 821A90E8h case   13:*/		regs.LR = 0x821A90EC; return 0x82170750;
		/* 821A90E8h case   13:*/		return 0x821A90EC;
		  /* 821A90ECh */ case   14:  		/* mr R4, R3 */
		/* 821A90ECh case   14:*/		regs.R4 = regs.R3;
		/* 821A90ECh case   14:*/		return 0x821A90F0;
		  /* 821A90F0h */ case   15:  		/* mr R3, R30 */
		/* 821A90F0h case   15:*/		regs.R3 = regs.R30;
		/* 821A90F0h case   15:*/		return 0x821A90F4;
		  /* 821A90F4h */ case   16:  		/* bl -200492 */
		/* 821A90F4h case   16:*/		regs.LR = 0x821A90F8; return 0x821781C8;
		/* 821A90F4h case   16:*/		return 0x821A90F8;
	}
	return 0x821A90F8;
} // Block from 821A90B4h-821A90F8h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A90F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A90F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A90F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A90F8);
		  /* 821A90F8h */ case    0:  		/* mr R3, R31 */
		/* 821A90F8h case    0:*/		regs.R3 = regs.R31;
		/* 821A90F8h case    0:*/		return 0x821A90FC;
		  /* 821A90FCh */ case    1:  		/* bl -200068 */
		/* 821A90FCh case    1:*/		regs.LR = 0x821A9100; return 0x82178378;
		/* 821A90FCh case    1:*/		return 0x821A9100;
		  /* 821A9100h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A9100h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A9100h case    2:*/		return 0x821A9104;
		  /* 821A9104h */ case    3:  		/* mr R4, R31 */
		/* 821A9104h case    3:*/		regs.R4 = regs.R31;
		/* 821A9104h case    3:*/		return 0x821A9108;
		  /* 821A9108h */ case    4:  		/* oris R11, R11, 256 */
		/* 821A9108h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A9108h case    4:*/		return 0x821A910C;
		  /* 821A910Ch */ case    5:  		/* mr R3, R28 */
		/* 821A910Ch case    5:*/		regs.R3 = regs.R28;
		/* 821A910Ch case    5:*/		return 0x821A9110;
		  /* 821A9110h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821A9110h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A9110h case    6:*/		return 0x821A9114;
		  /* 821A9114h */ case    7:  		/* bl -34396 */
		/* 821A9114h case    7:*/		regs.LR = 0x821A9118; return 0x821A0AB8;
		/* 821A9114h case    7:*/		return 0x821A9118;
		  /* 821A9118h */ case    8:  		/* lwz R11, <#[R27 + 160]> */
		/* 821A9118h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x000000A0) );
		/* 821A9118h case    8:*/		return 0x821A911C;
		  /* 821A911Ch */ case    9:  		/* mr R31, R30 */
		/* 821A911Ch case    9:*/		regs.R31 = regs.R30;
		/* 821A911Ch case    9:*/		return 0x821A9120;
		  /* 821A9120h */ case   10:  		/* cmplwi CR6, R11, 0 */
		/* 821A9120h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A9120h case   10:*/		return 0x821A9124;
		  /* 821A9124h */ case   11:  		/* bc 4, CR6_EQ, -244 */
		/* 821A9124h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821A9030;  }
		/* 821A9124h case   11:*/		return 0x821A9128;
	}
	return 0x821A9128;
} // Block from 821A90F8h-821A9128h (12 instructions)

//////////////////////////////////////////////////////
// Block at 821A9128h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9128( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9128) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9128);
		  /* 821A9128h */ case    0:  		/* lwz R11, <#[R23 + 8]> */
		/* 821A9128h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821A9128h case    0:*/		return 0x821A912C;
		  /* 821A912Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A912Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A912Ch case    1:*/		return 0x821A9130;
		  /* 821A9130h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821A9130h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A9140;  }
		/* 821A9130h case    2:*/		return 0x821A9134;
		  /* 821A9134h */ case    3:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A9134h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A9134h case    3:*/		return 0x821A9138;
		  /* 821A9138h */ case    4:  		/* ori R11, R11, 1 */
		/* 821A9138h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A9138h case    4:*/		return 0x821A913C;
		  /* 821A913Ch */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821A913Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A913Ch case    5:*/		return 0x821A9140;
	}
	return 0x821A9140;
} // Block from 821A9128h-821A9140h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A9140h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9140( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9140) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9140);
		  /* 821A9140h */ case    0:  		/* mr R6, R31 */
		/* 821A9140h case    0:*/		regs.R6 = regs.R31;
		/* 821A9140h case    0:*/		return 0x821A9144;
		  /* 821A9144h */ case    1:  		/* mr R5, R22 */
		/* 821A9144h case    1:*/		regs.R5 = regs.R22;
		/* 821A9144h case    1:*/		return 0x821A9148;
		  /* 821A9148h */ case    2:  		/* mr R4, R23 */
		/* 821A9148h case    2:*/		regs.R4 = regs.R23;
		/* 821A9148h case    2:*/		return 0x821A914C;
		  /* 821A914Ch */ case    3:  		/* mr R3, R28 */
		/* 821A914Ch case    3:*/		regs.R3 = regs.R28;
		/* 821A914Ch case    3:*/		return 0x821A9150;
		  /* 821A9150h */ case    4:  		/* bl -16944 */
		/* 821A9150h case    4:*/		regs.LR = 0x821A9154; return 0x821A4F20;
		/* 821A9150h case    4:*/		return 0x821A9154;
		  /* 821A9154h */ case    5:  		/* mr R3, R31 */
		/* 821A9154h case    5:*/		regs.R3 = regs.R31;
		/* 821A9154h case    5:*/		return 0x821A9158;
		  /* 821A9158h */ case    6:  		/* addi R1, R1, 352 */
		/* 821A9158h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x160);
		/* 821A9158h case    6:*/		return 0x821A915C;
		  /* 821A915Ch */ case    7:  		/* lfd FR31, <#[R1 - 120]> */
		/* 821A915Ch case    7:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R1 + 0xFFFFFF88) );
		/* 821A915Ch case    7:*/		return 0x821A9160;
		  /* 821A9160h */ case    8:  		/* b -1146588 */
		/* 821A9160h case    8:*/		return 0x82091284;
		/* 821A9160h case    8:*/		return 0x821A9164;
		  /* 821A9164h */ case    9:  		/* nop */
		/* 821A9164h case    9:*/		cpu::op::nop();
		/* 821A9164h case    9:*/		return 0x821A9168;
	}
	return 0x821A9168;
} // Block from 821A9140h-821A9168h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A9168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9168);
		  /* 821A9168h */ case    0:  		/* mfspr R12, LR */
		/* 821A9168h case    0:*/		regs.R12 = regs.LR;
		/* 821A9168h case    0:*/		return 0x821A916C;
		  /* 821A916Ch */ case    1:  		/* bl -1146656 */
		/* 821A916Ch case    1:*/		regs.LR = 0x821A9170; return 0x8209124C;
		/* 821A916Ch case    1:*/		return 0x821A9170;
		  /* 821A9170h */ case    2:  		/* stwu R1, <#[R1 - 160]> */
		/* 821A9170h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF60) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF60);
		/* 821A9170h case    2:*/		return 0x821A9174;
		  /* 821A9174h */ case    3:  		/* lwz R11, <#[R5 + 28]> */
		/* 821A9174h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x0000001C) );
		/* 821A9174h case    3:*/		return 0x821A9178;
		  /* 821A9178h */ case    4:  		/* mr R28, R3 */
		/* 821A9178h case    4:*/		regs.R28 = regs.R3;
		/* 821A9178h case    4:*/		return 0x821A917C;
		  /* 821A917Ch */ case    5:  		/* mr R25, R4 */
		/* 821A917Ch case    5:*/		regs.R25 = regs.R4;
		/* 821A917Ch case    5:*/		return 0x821A9180;
		  /* 821A9180h */ case    6:  		/* mr R31, R5 */
		/* 821A9180h case    6:*/		regs.R31 = regs.R5;
		/* 821A9180h case    6:*/		return 0x821A9184;
		  /* 821A9184h */ case    7:  		/* cmplwi CR6, R11, 3 */
		/* 821A9184h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821A9184h case    7:*/		return 0x821A9188;
		  /* 821A9188h */ case    8:  		/* bc 4, CR6_EQ, 36 */
		/* 821A9188h case    8:*/		if ( !regs.CR[6].eq ) { return 0x821A91AC;  }
		/* 821A9188h case    8:*/		return 0x821A918C;
		  /* 821A918Ch */ case    9:  		/* rlwinm R10, R11, 0, 0, 31 */
		/* 821A918Ch case    9:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R10,regs.R11);
		/* 821A918Ch case    9:*/		return 0x821A9190;
		  /* 821A9190h */ case   10:  		/* lwz R9, <#[R5 + 212]> */
		/* 821A9190h case   10:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R5 + 0x000000D4) );
		/* 821A9190h case   10:*/		return 0x821A9194;
		  /* 821A9194h */ case   11:  		/* addi R11, R5, 12 */
		/* 821A9194h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R5,0xC);
		/* 821A9194h case   11:*/		return 0x821A9198;
		  /* 821A9198h */ case   12:  		/* rlwinm R10, R10, 2, 0, 29 */
		/* 821A9198h case   12:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R10);
		/* 821A9198h case   12:*/		return 0x821A919C;
		  /* 821A919Ch */ case   13:  		/* stwx R9, <#[R10 + R11]> */
		/* 821A919Ch case   13:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821A919Ch case   13:*/		return 0x821A91A0;
		  /* 821A91A0h */ case   14:  		/* lwz R10, <#[R5 + 28]> */
		/* 821A91A0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R5 + 0x0000001C) );
		/* 821A91A0h case   14:*/		return 0x821A91A4;
		  /* 821A91A4h */ case   15:  		/* addi R11, R10, 1 */
		/* 821A91A4h case   15:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x1);
		/* 821A91A4h case   15:*/		return 0x821A91A8;
		  /* 821A91A8h */ case   16:  		/* stw R11, <#[R5 + 28]> */
		/* 821A91A8h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R5 + 0x0000001C) );
		/* 821A91A8h case   16:*/		return 0x821A91AC;
	}
	return 0x821A91AC;
} // Block from 821A9168h-821A91ACh (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A91ACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A91AC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A91AC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A91AC);
		  /* 821A91ACh */ case    0:  		/* lwz R11, <#[R31 + 28]> */
		/* 821A91ACh case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000001C) );
		/* 821A91ACh case    0:*/		return 0x821A91B0;
		  /* 821A91B0h */ case    1:  		/* li R30, 0 */
		/* 821A91B0h case    1:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A91B0h case    1:*/		return 0x821A91B4;
		  /* 821A91B4h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821A91B4h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A91B4h case    2:*/		return 0x821A91B8;
		  /* 821A91B8h */ case    3:  		/* bc 12, CR6_EQ, 48 */
		/* 821A91B8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A91E8;  }
		/* 821A91B8h case    3:*/		return 0x821A91BC;
		  /* 821A91BCh */ case    4:  		/* addi R11, R31, 12 */
		/* 821A91BCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xC);
		/* 821A91BCh case    4:*/		return 0x821A91C0;
		  /* 821A91C0h */ case    5:  		/* lwz R10, <#[R11 + 16]> */
		/* 821A91C0h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A91C0h case    5:*/		return 0x821A91C4;
		  /* 821A91C4h */ case    6:  		/* rlwinm R9, R30, 2, 0, 29 */
		/* 821A91C4h case    6:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R9,regs.R30);
		/* 821A91C4h case    6:*/		return 0x821A91C8;
		  /* 821A91C8h */ case    7:  		/* addi R10, R10, -1 */
		/* 821A91C8h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821A91C8h case    7:*/		return 0x821A91CC;
		  /* 821A91CCh */ case    8:  		/* rlwinm R8, R10, 2, 0, 29 */
		/* 821A91CCh case    8:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R8,regs.R10);
		/* 821A91CCh case    8:*/		return 0x821A91D0;
		  /* 821A91D0h */ case    9:  		/* stw R10, <#[R11 + 16]> */
		/* 821A91D0h case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821A91D0h case    9:*/		return 0x821A91D4;
		  /* 821A91D4h */ case   10:  		/* lwz R10, <#[R31 + 28]> */
		/* 821A91D4h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x0000001C) );
		/* 821A91D4h case   10:*/		return 0x821A91D8;
		  /* 821A91D8h */ case   11:  		/* cmplwi CR6, R10, 0 */
		/* 821A91D8h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821A91D8h case   11:*/		return 0x821A91DC;
		  /* 821A91DCh */ case   12:  		/* lwzx R10, <#[R8 + R11]> */
		/* 821A91DCh case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + regs.R11 + 0x00000000) );
		/* 821A91DCh case   12:*/		return 0x821A91E0;
		  /* 821A91E0h */ case   13:  		/* or R30, R10, R9 */
		/* 821A91E0h case   13:*/		cpu::op::or<0>(regs,&regs.R30,regs.R10,regs.R9);
		/* 821A91E0h case   13:*/		return 0x821A91E4;
		  /* 821A91E4h */ case   14:  		/* bc 4, CR6_EQ, -36 */
		/* 821A91E4h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821A91C0;  }
		/* 821A91E4h case   14:*/		return 0x821A91E8;
	}
	return 0x821A91E8;
} // Block from 821A91ACh-821A91E8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A91E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A91E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A91E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A91E8);
		  /* 821A91E8h */ case    0:  		/* mr R3, R28 */
		/* 821A91E8h case    0:*/		regs.R3 = regs.R28;
		/* 821A91E8h case    0:*/		return 0x821A91EC;
		  /* 821A91ECh */ case    1:  		/* lwz R4, <#[R31]> */
		/* 821A91ECh case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000000) );
		/* 821A91ECh case    1:*/		return 0x821A91F0;
		  /* 821A91F0h */ case    2:  		/* lwz R29, <#[R31 + 4]> */
		/* 821A91F0h case    2:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R31 + 0x00000004) );
		/* 821A91F0h case    2:*/		return 0x821A91F4;
		  /* 821A91F4h */ case    3:  		/* bl -201204 */
		/* 821A91F4h case    3:*/		regs.LR = 0x821A91F8; return 0x82178000;
		/* 821A91F4h case    3:*/		return 0x821A91F8;
		  /* 821A91F8h */ case    4:  		/* lwz R10, <#[R3]> */
		/* 821A91F8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821A91F8h case    4:*/		return 0x821A91FC;
		  /* 821A91FCh */ case    5:  		/* li R11, 1 */
		/* 821A91FCh case    5:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821A91FCh case    5:*/		return 0x821A9200;
		  /* 821A9200h */ case    6:  		/* mr R4, R29 */
		/* 821A9200h case    6:*/		regs.R4 = regs.R29;
		/* 821A9200h case    6:*/		return 0x821A9204;
		  /* 821A9204h */ case    7:  		/* rlwimi R10, R11, 27, 4, 6 */
		/* 821A9204h case    7:*/		cpu::op::rlwimi<0,27,4,6>(regs,&regs.R10,regs.R11);
		/* 821A9204h case    7:*/		return 0x821A9208;
		  /* 821A9208h */ case    8:  		/* mr R27, R3 */
		/* 821A9208h case    8:*/		regs.R27 = regs.R3;
		/* 821A9208h case    8:*/		return 0x821A920C;
		  /* 821A920Ch */ case    9:  		/* stw R10, <#[R3]> */
		/* 821A920Ch case    9:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R3 + 0x00000000) );
		/* 821A920Ch case    9:*/		return 0x821A9210;
		  /* 821A9210h */ case   10:  		/* bl -202576 */
		/* 821A9210h case   10:*/		regs.LR = 0x821A9214; return 0x82177AC0;
		/* 821A9210h case   10:*/		return 0x821A9214;
		  /* 821A9214h */ case   11:  		/* lwz R11, <#[R27]> */
		/* 821A9214h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A9214h case   11:*/		return 0x821A9218;
		  /* 821A9218h */ case   12:  		/* mr R5, R25 */
		/* 821A9218h case   12:*/		regs.R5 = regs.R25;
		/* 821A9218h case   12:*/		return 0x821A921C;
		  /* 821A921Ch */ case   13:  		/* rlwimi R11, R30, 5, 19, 26 */
		/* 821A921Ch case   13:*/		cpu::op::rlwimi<0,5,19,26>(regs,&regs.R11,regs.R30);
		/* 821A921Ch case   13:*/		return 0x821A9220;
		  /* 821A9220h */ case   14:  		/* li R4, 0 */
		/* 821A9220h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A9220h case   14:*/		return 0x821A9224;
		  /* 821A9224h */ case   15:  		/* stw R11, <#[R27]> */
		/* 821A9224h case   15:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A9224h case   15:*/		return 0x821A9228;
		  /* 821A9228h */ case   16:  		/* mr R3, R28 */
		/* 821A9228h case   16:*/		regs.R3 = regs.R28;
		/* 821A9228h case   16:*/		return 0x821A922C;
		  /* 821A922Ch */ case   17:  		/* mr R6, R27 */
		/* 821A922Ch case   17:*/		regs.R6 = regs.R27;
		/* 821A922Ch case   17:*/		return 0x821A9230;
		  /* 821A9230h */ case   18:  		/* bl -43696 */
		/* 821A9230h case   18:*/		regs.LR = 0x821A9234; return 0x8219E780;
		/* 821A9230h case   18:*/		return 0x821A9234;
		  /* 821A9234h */ case   19:  		/* lwz R4, <#[R31 + 8]> */
		/* 821A9234h case   19:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000008) );
		/* 821A9234h case   19:*/		return 0x821A9238;
		  /* 821A9238h */ case   20:  		/* mr R30, R3 */
		/* 821A9238h case   20:*/		regs.R30 = regs.R3;
		/* 821A9238h case   20:*/		return 0x821A923C;
		  /* 821A923Ch */ case   21:  		/* cmplwi CR6, R4, 0 */
		/* 821A923Ch case   21:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A923Ch case   21:*/		return 0x821A9240;
		  /* 821A9240h */ case   22:  		/* bc 12, CR6_EQ, 28 */
		/* 821A9240h case   22:*/		if ( regs.CR[6].eq ) { return 0x821A925C;  }
		/* 821A9240h case   22:*/		return 0x821A9244;
		  /* 821A9244h */ case   23:  		/* li R5, 0 */
		/* 821A9244h case   23:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A9244h case   23:*/		return 0x821A9248;
		  /* 821A9248h */ case   24:  		/* mr R3, R28 */
		/* 821A9248h case   24:*/		regs.R3 = regs.R28;
		/* 821A9248h case   24:*/		return 0x821A924C;
		  /* 821A924Ch */ case   25:  		/* bl -232188 */
		/* 821A924Ch case   25:*/		regs.LR = 0x821A9250; return 0x82170750;
		/* 821A924Ch case   25:*/		return 0x821A9250;
		  /* 821A9250h */ case   26:  		/* mr R4, R3 */
		/* 821A9250h case   26:*/		regs.R4 = regs.R3;
		/* 821A9250h case   26:*/		return 0x821A9254;
		  /* 821A9254h */ case   27:  		/* mr R3, R30 */
		/* 821A9254h case   27:*/		regs.R3 = regs.R30;
		/* 821A9254h case   27:*/		return 0x821A9258;
		  /* 821A9258h */ case   28:  		/* bl -200848 */
		/* 821A9258h case   28:*/		regs.LR = 0x821A925C; return 0x821781C8;
		/* 821A9258h case   28:*/		return 0x821A925C;
	}
	return 0x821A925C;
} // Block from 821A91E8h-821A925Ch (29 instructions)

//////////////////////////////////////////////////////
// Block at 821A925Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A925C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A925C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A925C);
		  /* 821A925Ch */ case    0:  		/* lwz R11, <#[R31 + 160]> */
		/* 821A925Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A0) );
		/* 821A925Ch case    0:*/		return 0x821A9260;
		  /* 821A9260h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A9260h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A9260h case    1:*/		return 0x821A9264;
		  /* 821A9264h */ case    2:  		/* bc 12, CR6_EQ, 276 */
		/* 821A9264h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A9378;  }
		/* 821A9264h case    2:*/		return 0x821A9268;
		  /* 821A9268h */ case    3:  		/* addi R26, R31, 32 */
		/* 821A9268h case    3:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R31,0x20);
		/* 821A9268h case    3:*/		return 0x821A926C;
		  /* 821A926Ch */ case    4:  		/* lwz R11, <#[R26 + 128]> */
		/* 821A926Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000080) );
		/* 821A926Ch case    4:*/		return 0x821A9270;
		  /* 821A9270h */ case    5:  		/* addi R9, R1, 80 */
		/* 821A9270h case    5:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x50);
		/* 821A9270h case    5:*/		return 0x821A9274;
		  /* 821A9274h */ case    6:  		/* addi R11, R11, -1 */
		/* 821A9274h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A9274h case    6:*/		return 0x821A9278;
		  /* 821A9278h */ case    7:  		/* stw R11, <#[R26 + 128]> */
		/* 821A9278h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000080) );
		/* 821A9278h case    7:*/		return 0x821A927C;
		  /* 821A927Ch */ case    8:  		/* rlwinm R10, R11, 4, 0, 27 */
		/* 821A927Ch case    8:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R10,regs.R11);
		/* 821A927Ch case    8:*/		return 0x821A9280;
		  /* 821A9280h */ case    9:  		/* lwz R8, <#[R31 + 160]> */
		/* 821A9280h case    9:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x000000A0) );
		/* 821A9280h case    9:*/		return 0x821A9284;
		  /* 821A9284h */ case   10:  		/* add R7, R10, R26 */
		/* 821A9284h case   10:*/		cpu::op::add<0>(regs,&regs.R7,regs.R10,regs.R26);
		/* 821A9284h case   10:*/		return 0x821A9288;
		  /* 821A9288h */ case   11:  		/* lwzx R10, <#[R10 + R26]> */
		/* 821A9288h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + regs.R26 + 0x00000000) );
		/* 821A9288h case   11:*/		return 0x821A928C;
		  /* 821A928Ch */ case   12:  		/* lwz R11, <#[R31 + 208]> */
		/* 821A928Ch case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000D0) );
		/* 821A928Ch case   12:*/		return 0x821A9290;
		  /* 821A9290h */ case   13:  		/* addi R11, R11, -1 */
		/* 821A9290h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A9290h case   13:*/		return 0x821A9294;
		  /* 821A9294h */ case   14:  		/* cmplw CR6, R8, R11 */
		/* 821A9294h case   14:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R11);
		/* 821A9294h case   14:*/		return 0x821A9298;
		  /* 821A9298h */ case   15:  		/* lwz R11, <#[R7 + 4]> */
		/* 821A9298h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000004) );
		/* 821A9298h case   15:*/		return 0x821A929C;
		  /* 821A929Ch */ case   16:  		/* lwz R8, <#[R7 + 8]> */
		/* 821A929Ch case   16:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R7 + 0x00000008) );
		/* 821A929Ch case   16:*/		return 0x821A92A0;
		  /* 821A92A0h */ case   17:  		/* lwz R7, <#[R7 + 12]> */
		/* 821A92A0h case   17:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R7 + 0x0000000C) );
		/* 821A92A0h case   17:*/		return 0x821A92A4;
		  /* 821A92A4h */ case   18:  		/* stw R8, <#[R9 + 8]> */
		/* 821A92A4h case   18:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R9 + 0x00000008) );
		/* 821A92A4h case   18:*/		return 0x821A92A8;
		  /* 821A92A8h */ case   19:  		/* stw R7, <#[R9 + 12]> */
		/* 821A92A8h case   19:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A92A8h case   19:*/		return 0x821A92AC;
		  /* 821A92ACh */ case   20:  		/* stw R11, <#[R9 + 4]> */
		/* 821A92ACh case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821A92ACh case   20:*/		return 0x821A92B0;
		  /* 821A92B0h */ case   21:  		/* stw R10, <#[R9]> */
		/* 821A92B0h case   21:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R9 + 0x00000000) );
		/* 821A92B0h case   21:*/		return 0x821A92B4;
		  /* 821A92B4h */ case   22:  		/* bc 12, CR6_EQ, 184 */
		/* 821A92B4h case   22:*/		if ( regs.CR[6].eq ) { return 0x821A936C;  }
		/* 821A92B4h case   22:*/		return 0x821A92B8;
		  /* 821A92B8h */ case   23:  		/* lwz R27, <#[R1 + 88]> */
		/* 821A92B8h case   23:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x00000058) );
		/* 821A92B8h case   23:*/		return 0x821A92BC;
		  /* 821A92BCh */ case   24:  		/* mr R3, R28 */
		/* 821A92BCh case   24:*/		regs.R3 = regs.R28;
		/* 821A92BCh case   24:*/		return 0x821A92C0;
		  /* 821A92C0h */ case   25:  		/* lwz R5, <#[R1 + 84]> */
		/* 821A92C0h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A92C0h case   25:*/		return 0x821A92C4;
		  /* 821A92C4h */ case   26:  		/* mr R6, R27 */
		/* 821A92C4h case   26:*/		regs.R6 = regs.R27;
		/* 821A92C4h case   26:*/		return 0x821A92C8;
		  /* 821A92C8h */ case   27:  		/* lwz R4, <#[R1 + 80]> */
		/* 821A92C8h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000050) );
		/* 821A92C8h case   27:*/		return 0x821A92CC;
		  /* 821A92CCh */ case   28:  		/* bl -201060 */
		/* 821A92CCh case   28:*/		regs.LR = 0x821A92D0; return 0x82178168;
		/* 821A92CCh case   28:*/		return 0x821A92D0;
		  /* 821A92D0h */ case   29:  		/* mr R29, R3 */
		/* 821A92D0h case   29:*/		regs.R29 = regs.R3;
		/* 821A92D0h case   29:*/		return 0x821A92D4;
		  /* 821A92D4h */ case   30:  		/* li R5, 0 */
		/* 821A92D4h case   30:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A92D4h case   30:*/		return 0x821A92D8;
		  /* 821A92D8h */ case   31:  		/* mr R4, R30 */
		/* 821A92D8h case   31:*/		regs.R4 = regs.R30;
		/* 821A92D8h case   31:*/		return 0x821A92DC;
		  /* 821A92DCh */ case   32:  		/* mr R3, R28 */
		/* 821A92DCh case   32:*/		regs.R3 = regs.R28;
		/* 821A92DCh case   32:*/		return 0x821A92E0;
		  /* 821A92E0h */ case   33:  		/* bl -201168 */
		/* 821A92E0h case   33:*/		regs.LR = 0x821A92E4; return 0x82178110;
		/* 821A92E0h case   33:*/		return 0x821A92E4;
		  /* 821A92E4h */ case   34:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A92E4h case   34:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A92E4h case   34:*/		return 0x821A92E8;
		  /* 821A92E8h */ case   35:  		/* mr R7, R3 */
		/* 821A92E8h case   35:*/		regs.R7 = regs.R3;
		/* 821A92E8h case   35:*/		return 0x821A92EC;
		  /* 821A92ECh */ case   36:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A92ECh case   36:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A92ECh case   36:*/		return 0x821A92F0;
		  /* 821A92F0h */ case   37:  		/* cmplwi CR6, R11, 384 */
		/* 821A92F0h case   37:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821A92F0h case   37:*/		return 0x821A92F4;
		  /* 821A92F4h */ case   38:  		/* bc 4, CR6_EQ, 16 */
		/* 821A92F4h case   38:*/		if ( !regs.CR[6].eq ) { return 0x821A9304;  }
		/* 821A92F4h case   38:*/		return 0x821A92F8;
		  /* 821A92F8h */ case   39:  		/* mr R11, R29 */
		/* 821A92F8h case   39:*/		regs.R11 = regs.R29;
		/* 821A92F8h case   39:*/		return 0x821A92FC;
		  /* 821A92FCh */ case   40:  		/* mr R29, R3 */
		/* 821A92FCh case   40:*/		regs.R29 = regs.R3;
		/* 821A92FCh case   40:*/		return 0x821A9300;
		  /* 821A9300h */ case   41:  		/* mr R7, R11 */
		/* 821A9300h case   41:*/		regs.R7 = regs.R11;
		/* 821A9300h case   41:*/		return 0x821A9304;
	}
	return 0x821A9304;
} // Block from 821A925Ch-821A9304h (42 instructions)

//////////////////////////////////////////////////////
// Block at 821A9304h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9304( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9304) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9304);
		  /* 821A9304h */ case    0:  		/* mr R6, R29 */
		/* 821A9304h case    0:*/		regs.R6 = regs.R29;
		/* 821A9304h case    0:*/		return 0x821A9308;
		  /* 821A9308h */ case    1:  		/* mr R5, R25 */
		/* 821A9308h case    1:*/		regs.R5 = regs.R25;
		/* 821A9308h case    1:*/		return 0x821A930C;
		  /* 821A930Ch */ case    2:  		/* li R4, 0 */
		/* 821A930Ch case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A930Ch case    2:*/		return 0x821A9310;
		  /* 821A9310h */ case    3:  		/* mr R3, R28 */
		/* 821A9310h case    3:*/		regs.R3 = regs.R28;
		/* 821A9310h case    3:*/		return 0x821A9314;
		  /* 821A9314h */ case    4:  		/* bl -46172 */
		/* 821A9314h case    4:*/		regs.LR = 0x821A9318; return 0x8219DEB8;
		/* 821A9314h case    4:*/		return 0x821A9318;
		  /* 821A9318h */ case    5:  		/* rlwinm. R11, R27, 0, 28, 28 */
		/* 821A9318h case    5:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R27);
		/* 821A9318h case    5:*/		return 0x821A931C;
		  /* 821A931Ch */ case    6:  		/* mr R29, R3 */
		/* 821A931Ch case    6:*/		regs.R29 = regs.R3;
		/* 821A931Ch case    6:*/		return 0x821A9320;
	}
	return 0x821A9320;
} // Block from 821A9304h-821A9320h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A9320h
// Function '?ReplaceAddChainWithDotProduct@Compiler@D3DXShader@@AAAPAVInstruction@2@PAUAddChainInfo@2@W4Component@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9320( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9320) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9320);
		  /* 821A9320h */ case    0:  		/* bc 12, CR0_EQ, 40 */
		/* 821A9320h case    0:*/		if ( regs.CR[0].eq ) { return 0x821A9348;  }
		/* 821A9320h case    0:*/		return 0x821A9324;
		  /* 821A9324h */ case    1:  		/* lwz R3, <#[R1 + 92]> */
		/* 821A9324h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A9324h case    1:*/		return 0x821A9328;
		  /* 821A9328h */ case    2:  		/* bl -202768 */
		/* 821A9328h case    2:*/		regs.LR = 0x821A932C; return 0x82177B18;
		/* 821A9328h case    2:*/		return 0x821A932C;
		  /* 821A932Ch */ case    3:  		/* mr R4, R3 */
		/* 821A932Ch case    3:*/		regs.R4 = regs.R3;
		/* 821A932Ch case    3:*/		return 0x821A9330;
		  /* 821A9330h */ case    4:  		/* mr R3, R28 */
		/* 821A9330h case    4:*/		regs.R3 = regs.R28;
		/* 821A9330h case    4:*/		return 0x821A9334;
		  /* 821A9334h */ case    5:  		/* li R5, 0 */
		/* 821A9334h case    5:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A9334h case    5:*/		return 0x821A9338;
		  /* 821A9338h */ case    6:  		/* bl -232424 */
		/* 821A9338h case    6:*/		regs.LR = 0x821A933C; return 0x82170750;
		/* 821A9338h case    6:*/		return 0x821A933C;
		  /* 821A933Ch */ case    7:  		/* mr R4, R3 */
		/* 821A933Ch case    7:*/		regs.R4 = regs.R3;
		/* 821A933Ch case    7:*/		return 0x821A9340;
		  /* 821A9340h */ case    8:  		/* mr R3, R29 */
		/* 821A9340h case    8:*/		regs.R3 = regs.R29;
		/* 821A9340h case    8:*/		return 0x821A9344;
		  /* 821A9344h */ case    9:  		/* bl -201084 */
		/* 821A9344h case    9:*/		regs.LR = 0x821A9348; return 0x821781C8;
		/* 821A9344h case    9:*/		return 0x821A9348;
	}
	return 0x821A9348;
} // Block from 821A9320h-821A9348h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A9348h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9348( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9348) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9348);
		  /* 821A9348h */ case    0:  		/* mr R3, R30 */
		/* 821A9348h case    0:*/		regs.R3 = regs.R30;
		/* 821A9348h case    0:*/		return 0x821A934C;
		  /* 821A934Ch */ case    1:  		/* bl -200660 */
		/* 821A934Ch case    1:*/		regs.LR = 0x821A9350; return 0x82178378;
		/* 821A934Ch case    1:*/		return 0x821A9350;
		  /* 821A9350h */ case    2:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A9350h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A9350h case    2:*/		return 0x821A9354;
		  /* 821A9354h */ case    3:  		/* mr R4, R30 */
		/* 821A9354h case    3:*/		regs.R4 = regs.R30;
		/* 821A9354h case    3:*/		return 0x821A9358;
		  /* 821A9358h */ case    4:  		/* oris R11, R11, 256 */
		/* 821A9358h case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A9358h case    4:*/		return 0x821A935C;
		  /* 821A935Ch */ case    5:  		/* mr R3, R28 */
		/* 821A935Ch case    5:*/		regs.R3 = regs.R28;
		/* 821A935Ch case    5:*/		return 0x821A9360;
		  /* 821A9360h */ case    6:  		/* stw R11, <#[R30 + 8]> */
		/* 821A9360h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A9360h case    6:*/		return 0x821A9364;
		  /* 821A9364h */ case    7:  		/* bl -34988 */
		/* 821A9364h case    7:*/		regs.LR = 0x821A9368; return 0x821A0AB8;
		/* 821A9364h case    7:*/		return 0x821A9368;
		  /* 821A9368h */ case    8:  		/* mr R30, R29 */
		/* 821A9368h case    8:*/		regs.R30 = regs.R29;
		/* 821A9368h case    8:*/		return 0x821A936C;
	}
	return 0x821A936C;
} // Block from 821A9348h-821A936Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A936Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A936C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A936C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A936C);
		  /* 821A936Ch */ case    0:  		/* lwz R11, <#[R31 + 160]> */
		/* 821A936Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x000000A0) );
		/* 821A936Ch case    0:*/		return 0x821A9370;
		  /* 821A9370h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A9370h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A9370h case    1:*/		return 0x821A9374;
		  /* 821A9374h */ case    2:  		/* bc 4, CR6_EQ, -264 */
		/* 821A9374h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821A926C;  }
		/* 821A9374h case    2:*/		return 0x821A9378;
	}
	return 0x821A9378;
} // Block from 821A936Ch-821A9378h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A9378h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9378( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9378) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9378);
		  /* 821A9378h */ case    0:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A9378h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A9378h case    0:*/		return 0x821A937C;
		  /* 821A937Ch */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A937Ch case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A937Ch case    1:*/		return 0x821A9380;
		  /* 821A9380h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821A9380h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A9390;  }
		/* 821A9380h case    2:*/		return 0x821A9384;
		  /* 821A9384h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A9384h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A9384h case    3:*/		return 0x821A9388;
		  /* 821A9388h */ case    4:  		/* ori R11, R11, 1 */
		/* 821A9388h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A9388h case    4:*/		return 0x821A938C;
		  /* 821A938Ch */ case    5:  		/* stw R11, <#[R30 + 8]> */
		/* 821A938Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A938Ch case    5:*/		return 0x821A9390;
	}
	return 0x821A9390;
} // Block from 821A9378h-821A9390h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A9390h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9390( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9390) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9390);
		  /* 821A9390h */ case    0:  		/* mr R6, R30 */
		/* 821A9390h case    0:*/		regs.R6 = regs.R30;
		/* 821A9390h case    0:*/		return 0x821A9394;
		  /* 821A9394h */ case    1:  		/* li R5, 0 */
		/* 821A9394h case    1:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A9394h case    1:*/		return 0x821A9398;
		  /* 821A9398h */ case    2:  		/* mr R4, R25 */
		/* 821A9398h case    2:*/		regs.R4 = regs.R25;
		/* 821A9398h case    2:*/		return 0x821A939C;
		  /* 821A939Ch */ case    3:  		/* mr R3, R28 */
		/* 821A939Ch case    3:*/		regs.R3 = regs.R28;
		/* 821A939Ch case    3:*/		return 0x821A93A0;
		  /* 821A93A0h */ case    4:  		/* bl -17536 */
		/* 821A93A0h case    4:*/		regs.LR = 0x821A93A4; return 0x821A4F20;
		/* 821A93A0h case    4:*/		return 0x821A93A4;
		  /* 821A93A4h */ case    5:  		/* mr R3, R30 */
		/* 821A93A4h case    5:*/		regs.R3 = regs.R30;
		/* 821A93A4h case    5:*/		return 0x821A93A8;
		  /* 821A93A8h */ case    6:  		/* addi R1, R1, 160 */
		/* 821A93A8h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xA0);
		/* 821A93A8h case    6:*/		return 0x821A93AC;
		  /* 821A93ACh */ case    7:  		/* b -1147152 */
		/* 821A93ACh case    7:*/		return 0x8209129C;
		/* 821A93ACh case    7:*/		return 0x821A93B0;
	}
	return 0x821A93B0;
} // Block from 821A9390h-821A93B0h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A93B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A93B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A93B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A93B0);
		  /* 821A93B0h */ case    0:  		/* mfspr R12, LR */
		/* 821A93B0h case    0:*/		regs.R12 = regs.LR;
		/* 821A93B0h case    0:*/		return 0x821A93B4;
		  /* 821A93B4h */ case    1:  		/* bl -1147268 */
		/* 821A93B4h case    1:*/		regs.LR = 0x821A93B8; return 0x82091230;
		/* 821A93B4h case    1:*/		return 0x821A93B8;
		  /* 821A93B8h */ case    2:  		/* stwu R1, <#[R1 - 224]> */
		/* 821A93B8h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFF20) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFF20);
		/* 821A93B8h case    2:*/		return 0x821A93BC;
		  /* 821A93BCh */ case    3:  		/* lis R11, -32256 */
		/* 821A93BCh case    3:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821A93BCh case    3:*/		return 0x821A93C0;
		  /* 821A93C0h */ case    4:  		/* lwz R20, <#[R4 + 164]> */
		/* 821A93C0h case    4:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R4 + 0x000000A4) );
		/* 821A93C0h case    4:*/		return 0x821A93C4;
		  /* 821A93C4h */ case    5:  		/* mr R27, R4 */
		/* 821A93C4h case    5:*/		regs.R27 = regs.R4;
		/* 821A93C4h case    5:*/		return 0x821A93C8;
		  /* 821A93C8h */ case    6:  		/* li R4, 1 */
		/* 821A93C8h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821A93C8h case    6:*/		return 0x821A93CC;
		  /* 821A93CCh */ case    7:  		/* mr R31, R3 */
		/* 821A93CCh case    7:*/		regs.R31 = regs.R3;
		/* 821A93CCh case    7:*/		return 0x821A93D0;
		  /* 821A93D0h */ case    8:  		/* mr R23, R5 */
		/* 821A93D0h case    8:*/		regs.R23 = regs.R5;
		/* 821A93D0h case    8:*/		return 0x821A93D4;
		  /* 821A93D4h */ case    9:  		/* lfs FR4, <#[R11 + 1816]> */
		/* 821A93D4h case    9:*/		cpu::mem::load32f( regs, &regs.FR4, (uint32)(regs.R11 + 0x00000718) );
		/* 821A93D4h case    9:*/		return 0x821A93D8;
		  /* 821A93D8h */ case   10:  		/* mr R18, R6 */
		/* 821A93D8h case   10:*/		regs.R18 = regs.R6;
		/* 821A93D8h case   10:*/		return 0x821A93DC;
		  /* 821A93DCh */ case   11:  		/* fmr FR3, FR4 */
		/* 821A93DCh case   11:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR4);
		/* 821A93DCh case   11:*/		return 0x821A93E0;
		  /* 821A93E0h */ case   12:  		/* fmr FR2, FR4 */
		/* 821A93E0h case   12:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR4);
		/* 821A93E0h case   12:*/		return 0x821A93E4;
		  /* 821A93E4h */ case   13:  		/* fmr FR1, FR4 */
		/* 821A93E4h case   13:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR4);
		/* 821A93E4h case   13:*/		return 0x821A93E8;
		  /* 821A93E8h */ case   14:  		/* bl 530288 */
		/* 821A93E8h case   14:*/		regs.LR = 0x821A93EC; return 0x8222AB58;
		/* 821A93E8h case   14:*/		return 0x821A93EC;
		  /* 821A93ECh */ case   15:  		/* mr R30, R3 */
		/* 821A93ECh case   15:*/		regs.R30 = regs.R3;
		/* 821A93ECh case   15:*/		return 0x821A93F0;
		  /* 821A93F0h */ case   16:  		/* li R21, 1 */
		/* 821A93F0h case   16:*/		cpu::op::li<0>(regs,&regs.R21,0x1);
		/* 821A93F0h case   16:*/		return 0x821A93F4;
		  /* 821A93F4h */ case   17:  		/* lwz R19, <#[R27 + 160]> */
		/* 821A93F4h case   17:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R27 + 0x000000A0) );
		/* 821A93F4h case   17:*/		return 0x821A93F8;
		  /* 821A93F8h */ case   18:  		/* li R24, 0 */
		/* 821A93F8h case   18:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821A93F8h case   18:*/		return 0x821A93FC;
		  /* 821A93FCh */ case   19:  		/* cmplwi CR6, R19, 0 */
		/* 821A93FCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000000);
		/* 821A93FCh case   19:*/		return 0x821A9400;
		  /* 821A9400h */ case   20:  		/* bc 12, CR6_EQ, 312 */
		/* 821A9400h case   20:*/		if ( regs.CR[6].eq ) { return 0x821A9538;  }
		/* 821A9400h case   20:*/		return 0x821A9404;
		  /* 821A9404h */ case   21:  		/* addi R11, R21, -1 */
		/* 821A9404h case   21:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R21,0xFFFFFFFF);
		/* 821A9404h case   21:*/		return 0x821A9408;
		  /* 821A9408h */ case   22:  		/* addi R25, R27, 32 */
		/* 821A9408h case   22:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R27,0x20);
		/* 821A9408h case   22:*/		return 0x821A940C;
		  /* 821A940Ch */ case   23:  		/* cntlzw R11, R11 */
		/* 821A940Ch case   23:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A940Ch case   23:*/		return 0x821A9410;
		  /* 821A9410h */ case   24:  		/* rlwinm R22, R11, 27, 31, 31 */
		/* 821A9410h case   24:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R22,regs.R11);
		/* 821A9410h case   24:*/		return 0x821A9414;
		  /* 821A9414h */ case   25:  		/* lwz R11, <#[R25 + 128]> */
		/* 821A9414h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000080) );
		/* 821A9414h case   25:*/		return 0x821A9418;
		  /* 821A9418h */ case   26:  		/* addi R10, R1, 80 */
		/* 821A9418h case   26:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x50);
		/* 821A9418h case   26:*/		return 0x821A941C;
		  /* 821A941Ch */ case   27:  		/* subf R11, R24, R11 */
		/* 821A941Ch case   27:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 821A941Ch case   27:*/		return 0x821A9420;
		  /* 821A9420h */ case   28:  		/* addi R11, R11, -1 */
		/* 821A9420h case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A9420h case   28:*/		return 0x821A9424;
		  /* 821A9424h */ case   29:  		/* rlwinm R11, R11, 4, 0, 27 */
		/* 821A9424h case   29:*/		cpu::op::rlwinm<0,4,0,27>(regs,&regs.R11,regs.R11);
		/* 821A9424h case   29:*/		return 0x821A9428;
		  /* 821A9428h */ case   30:  		/* add R9, R11, R25 */
		/* 821A9428h case   30:*/		cpu::op::add<0>(regs,&regs.R9,regs.R11,regs.R25);
		/* 821A9428h case   30:*/		return 0x821A942C;
		  /* 821A942Ch */ case   31:  		/* lwzx R11, <#[R11 + R25]> */
		/* 821A942Ch case   31:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 821A942Ch case   31:*/		return 0x821A9430;
		  /* 821A9430h */ case   32:  		/* lwz R8, <#[R9 + 4]> */
		/* 821A9430h case   32:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R9 + 0x00000004) );
		/* 821A9430h case   32:*/		return 0x821A9434;
		  /* 821A9434h */ case   33:  		/* lwz R7, <#[R9 + 8]> */
		/* 821A9434h case   33:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R9 + 0x00000008) );
		/* 821A9434h case   33:*/		return 0x821A9438;
		  /* 821A9438h */ case   34:  		/* lwz R9, <#[R9 + 12]> */
		/* 821A9438h case   34:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x0000000C) );
		/* 821A9438h case   34:*/		return 0x821A943C;
		  /* 821A943Ch */ case   35:  		/* stw R11, <#[R10]> */
		/* 821A943Ch case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821A943Ch case   35:*/		return 0x821A9440;
		  /* 821A9440h */ case   36:  		/* stw R8, <#[R10 + 4]> */
		/* 821A9440h case   36:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821A9440h case   36:*/		return 0x821A9444;
		  /* 821A9444h */ case   37:  		/* stw R7, <#[R10 + 8]> */
		/* 821A9444h case   37:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R10 + 0x00000008) );
		/* 821A9444h case   37:*/		return 0x821A9448;
		  /* 821A9448h */ case   38:  		/* stw R9, <#[R10 + 12]> */
		/* 821A9448h case   38:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x0000000C) );
		/* 821A9448h case   38:*/		return 0x821A944C;
		  /* 821A944Ch */ case   39:  		/* lwz R28, <#[R1 + 80]> */
		/* 821A944Ch case   39:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x00000050) );
		/* 821A944Ch case   39:*/		return 0x821A9450;
		  /* 821A9450h */ case   40:  		/* subf R11, R28, R23 */
		/* 821A9450h case   40:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R28,regs.R23);
		/* 821A9450h case   40:*/		return 0x821A9454;
		  /* 821A9454h */ case   41:  		/* cntlzw R11, R11 */
		/* 821A9454h case   41:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A9454h case   41:*/		return 0x821A9458;
		  /* 821A9458h */ case   42:  		/* rlwinm R11, R11, 27, 31, 31 */
		/* 821A9458h case   42:*/		cpu::op::rlwinm<0,27,31,31>(regs,&regs.R11,regs.R11);
		/* 821A9458h case   42:*/		return 0x821A945C;
		  /* 821A945Ch */ case   43:  		/* cmpw CR6, R11, R22 */
		/* 821A945Ch case   43:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R22);
		/* 821A945Ch case   43:*/		return 0x821A9460;
		  /* 821A9460h */ case   44:  		/* bc 12, CR6_EQ, 204 */
		/* 821A9460h case   44:*/		if ( regs.CR[6].eq ) { return 0x821A952C;  }
		/* 821A9460h case   44:*/		return 0x821A9464;
		  /* 821A9464h */ case   45:  		/* li R5, 0 */
		/* 821A9464h case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A9464h case   45:*/		return 0x821A9468;
		  /* 821A9468h */ case   46:  		/* mr R4, R30 */
		/* 821A9468h case   46:*/		regs.R4 = regs.R30;
		/* 821A9468h case   46:*/		return 0x821A946C;
		  /* 821A946Ch */ case   47:  		/* mr R3, R31 */
		/* 821A946Ch case   47:*/		regs.R3 = regs.R31;
		/* 821A946Ch case   47:*/		return 0x821A9470;
		  /* 821A9470h */ case   48:  		/* bl -201568 */
		/* 821A9470h case   48:*/		regs.LR = 0x821A9474; return 0x82178110;
		/* 821A9470h case   48:*/		return 0x821A9474;
		  /* 821A9474h */ case   49:  		/* lwz R26, <#[R1 + 88]> */
		/* 821A9474h case   49:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x00000058) );
		/* 821A9474h case   49:*/		return 0x821A9478;
		  /* 821A9478h */ case   50:  		/* mr R29, R3 */
		/* 821A9478h case   50:*/		regs.R29 = regs.R3;
		/* 821A9478h case   50:*/		return 0x821A947C;
		  /* 821A947Ch */ case   51:  		/* lwz R5, <#[R1 + 84]> */
		/* 821A947Ch case   51:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000054) );
		/* 821A947Ch case   51:*/		return 0x821A9480;
		  /* 821A9480h */ case   52:  		/* mr R6, R26 */
		/* 821A9480h case   52:*/		regs.R6 = regs.R26;
		/* 821A9480h case   52:*/		return 0x821A9484;
		  /* 821A9484h */ case   53:  		/* mr R4, R28 */
		/* 821A9484h case   53:*/		regs.R4 = regs.R28;
		/* 821A9484h case   53:*/		return 0x821A9488;
		  /* 821A9488h */ case   54:  		/* mr R3, R31 */
		/* 821A9488h case   54:*/		regs.R3 = regs.R31;
		/* 821A9488h case   54:*/		return 0x821A948C;
		  /* 821A948Ch */ case   55:  		/* bl -201508 */
		/* 821A948Ch case   55:*/		regs.LR = 0x821A9490; return 0x82178168;
		/* 821A948Ch case   55:*/		return 0x821A9490;
		  /* 821A9490h */ case   56:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A9490h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A9490h case   56:*/		return 0x821A9494;
		  /* 821A9494h */ case   57:  		/* mr R7, R3 */
		/* 821A9494h case   57:*/		regs.R7 = regs.R3;
		/* 821A9494h case   57:*/		return 0x821A9498;
		  /* 821A9498h */ case   58:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A9498h case   58:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A9498h case   58:*/		return 0x821A949C;
		  /* 821A949Ch */ case   59:  		/* cmplwi CR6, R11, 128 */
		/* 821A949Ch case   59:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821A949Ch case   59:*/		return 0x821A94A0;
		  /* 821A94A0h */ case   60:  		/* bc 12, CR6_EQ, 16 */
		/* 821A94A0h case   60:*/		if ( regs.CR[6].eq ) { return 0x821A94B0;  }
		/* 821A94A0h case   60:*/		return 0x821A94A4;
		  /* 821A94A4h */ case   61:  		/* mr R11, R29 */
		/* 821A94A4h case   61:*/		regs.R11 = regs.R29;
		/* 821A94A4h case   61:*/		return 0x821A94A8;
		  /* 821A94A8h */ case   62:  		/* mr R29, R3 */
		/* 821A94A8h case   62:*/		regs.R29 = regs.R3;
		/* 821A94A8h case   62:*/		return 0x821A94AC;
		  /* 821A94ACh */ case   63:  		/* mr R7, R11 */
		/* 821A94ACh case   63:*/		regs.R7 = regs.R11;
		/* 821A94ACh case   63:*/		return 0x821A94B0;
	}
	return 0x821A94B0;
} // Block from 821A93B0h-821A94B0h (64 instructions)

//////////////////////////////////////////////////////
// Block at 821A94B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A94B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A94B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A94B0);
		  /* 821A94B0h */ case    0:  		/* mr R6, R29 */
		/* 821A94B0h case    0:*/		regs.R6 = regs.R29;
		/* 821A94B0h case    0:*/		return 0x821A94B4;
		  /* 821A94B4h */ case    1:  		/* mr R5, R20 */
		/* 821A94B4h case    1:*/		regs.R5 = regs.R20;
		/* 821A94B4h case    1:*/		return 0x821A94B8;
		  /* 821A94B8h */ case    2:  		/* li R4, 0 */
		/* 821A94B8h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A94B8h case    2:*/		return 0x821A94BC;
		  /* 821A94BCh */ case    3:  		/* mr R3, R31 */
		/* 821A94BCh case    3:*/		regs.R3 = regs.R31;
		/* 821A94BCh case    3:*/		return 0x821A94C0;
		  /* 821A94C0h */ case    4:  		/* bl -46808 */
		/* 821A94C0h case    4:*/		regs.LR = 0x821A94C4; return 0x8219DDE8;
		/* 821A94C0h case    4:*/		return 0x821A94C4;
		  /* 821A94C4h */ case    5:  		/* rlwinm. R11, R26, 0, 28, 28 */
		/* 821A94C4h case    5:*/		cpu::op::rlwinm<1,0,28,28>(regs,&regs.R11,regs.R26);
		/* 821A94C4h case    5:*/		return 0x821A94C8;
		  /* 821A94C8h */ case    6:  		/* mr R29, R3 */
		/* 821A94C8h case    6:*/		regs.R29 = regs.R3;
		/* 821A94C8h case    6:*/		return 0x821A94CC;
		  /* 821A94CCh */ case    7:  		/* bc 12, CR0_EQ, 40 */
		/* 821A94CCh case    7:*/		if ( regs.CR[0].eq ) { return 0x821A94F4;  }
		/* 821A94CCh case    7:*/		return 0x821A94D0;
		  /* 821A94D0h */ case    8:  		/* lwz R3, <#[R1 + 92]> */
		/* 821A94D0h case    8:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A94D0h case    8:*/		return 0x821A94D4;
		  /* 821A94D4h */ case    9:  		/* bl -203196 */
		/* 821A94D4h case    9:*/		regs.LR = 0x821A94D8; return 0x82177B18;
		/* 821A94D4h case    9:*/		return 0x821A94D8;
		  /* 821A94D8h */ case   10:  		/* mr R4, R3 */
		/* 821A94D8h case   10:*/		regs.R4 = regs.R3;
		/* 821A94D8h case   10:*/		return 0x821A94DC;
		  /* 821A94DCh */ case   11:  		/* mr R3, R31 */
		/* 821A94DCh case   11:*/		regs.R3 = regs.R31;
		/* 821A94DCh case   11:*/		return 0x821A94E0;
		  /* 821A94E0h */ case   12:  		/* li R5, 0 */
		/* 821A94E0h case   12:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A94E0h case   12:*/		return 0x821A94E4;
		  /* 821A94E4h */ case   13:  		/* bl -232852 */
		/* 821A94E4h case   13:*/		regs.LR = 0x821A94E8; return 0x82170750;
		/* 821A94E4h case   13:*/		return 0x821A94E8;
		  /* 821A94E8h */ case   14:  		/* mr R4, R3 */
		/* 821A94E8h case   14:*/		regs.R4 = regs.R3;
		/* 821A94E8h case   14:*/		return 0x821A94EC;
		  /* 821A94ECh */ case   15:  		/* mr R3, R29 */
		/* 821A94ECh case   15:*/		regs.R3 = regs.R29;
		/* 821A94ECh case   15:*/		return 0x821A94F0;
		  /* 821A94F0h */ case   16:  		/* bl -201512 */
		/* 821A94F0h case   16:*/		regs.LR = 0x821A94F4; return 0x821781C8;
		/* 821A94F0h case   16:*/		return 0x821A94F4;
	}
	return 0x821A94F4;
} // Block from 821A94B0h-821A94F4h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A94F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A94F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A94F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A94F4);
		  /* 821A94F4h */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A94F4h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A94F4h case    0:*/		return 0x821A94F8;
		  /* 821A94F8h */ case    1:  		/* mr R4, R30 */
		/* 821A94F8h case    1:*/		regs.R4 = regs.R30;
		/* 821A94F8h case    1:*/		return 0x821A94FC;
		  /* 821A94FCh */ case    2:  		/* mr R3, R31 */
		/* 821A94FCh case    2:*/		regs.R3 = regs.R31;
		/* 821A94FCh case    2:*/		return 0x821A9500;
		  /* 821A9500h */ case    3:  		/* oris R11, R11, 256 */
		/* 821A9500h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A9500h case    3:*/		return 0x821A9504;
		  /* 821A9504h */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 821A9504h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A9504h case    4:*/		return 0x821A9508;
		  /* 821A9508h */ case    5:  		/* lwz R5, <#[R31 + 660]> */
		/* 821A9508h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000294) );
		/* 821A9508h case    5:*/		return 0x821A950C;
		  /* 821A950Ch */ case    6:  		/* bl 80124 */
		/* 821A950Ch case    6:*/		regs.LR = 0x821A9510; return 0x821BCE08;
		/* 821A950Ch case    6:*/		return 0x821A9510;
		  /* 821A9510h */ case    7:  		/* mr R4, R29 */
		/* 821A9510h case    7:*/		regs.R4 = regs.R29;
		/* 821A9510h case    7:*/		return 0x821A9514;
		  /* 821A9514h */ case    8:  		/* mr R3, R31 */
		/* 821A9514h case    8:*/		regs.R3 = regs.R31;
		/* 821A9514h case    8:*/		return 0x821A9518;
		  /* 821A9518h */ case    9:  		/* bl -49120 */
		/* 821A9518h case    9:*/		regs.LR = 0x821A951C; return 0x8219D538;
		/* 821A9518h case    9:*/		return 0x821A951C;
		  /* 821A951Ch */ case   10:  		/* mr R4, R30 */
		/* 821A951Ch case   10:*/		regs.R4 = regs.R30;
		/* 821A951Ch case   10:*/		return 0x821A9520;
		  /* 821A9520h */ case   11:  		/* mr R3, R31 */
		/* 821A9520h case   11:*/		regs.R3 = regs.R31;
		/* 821A9520h case   11:*/		return 0x821A9524;
		  /* 821A9524h */ case   12:  		/* bl -35436 */
		/* 821A9524h case   12:*/		regs.LR = 0x821A9528; return 0x821A0AB8;
		/* 821A9524h case   12:*/		return 0x821A9528;
		  /* 821A9528h */ case   13:  		/* mr R30, R29 */
		/* 821A9528h case   13:*/		regs.R30 = regs.R29;
		/* 821A9528h case   13:*/		return 0x821A952C;
	}
	return 0x821A952C;
} // Block from 821A94F4h-821A952Ch (14 instructions)

//////////////////////////////////////////////////////
// Block at 821A952Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A952C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A952C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A952C);
		  /* 821A952Ch */ case    0:  		/* addi R24, R24, 1 */
		/* 821A952Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R24,0x1);
		/* 821A952Ch case    0:*/		return 0x821A9530;
		  /* 821A9530h */ case    1:  		/* cmplw CR6, R24, R19 */
		/* 821A9530h case    1:*/		cpu::op::cmplw<6>(regs,regs.R24,regs.R19);
		/* 821A9530h case    1:*/		return 0x821A9534;
		  /* 821A9534h */ case    2:  		/* bc 12, CR6_LT, -288 */
		/* 821A9534h case    2:*/		if ( regs.CR[6].lt ) { return 0x821A9414;  }
		/* 821A9534h case    2:*/		return 0x821A9538;
	}
	return 0x821A9538;
} // Block from 821A952Ch-821A9538h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A9538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9538);
		  /* 821A9538h */ case    0:  		/* addi R21, R21, 1 */
		/* 821A9538h case    0:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 821A9538h case    0:*/		return 0x821A953C;
		  /* 821A953Ch */ case    1:  		/* cmpwi CR6, R21, 2 */
		/* 821A953Ch case    1:*/		cpu::op::cmpwi<6>(regs,regs.R21,0x00000002);
		/* 821A953Ch case    1:*/		return 0x821A9540;
		  /* 821A9540h */ case    2:  		/* bc 4, CR6_GT, -332 */
		/* 821A9540h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821A93F4;  }
		/* 821A9540h case    2:*/		return 0x821A9544;
		  /* 821A9544h */ case    3:  		/* li R5, 0 */
		/* 821A9544h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A9544h case    3:*/		return 0x821A9548;
		  /* 821A9548h */ case    4:  		/* mr R4, R23 */
		/* 821A9548h case    4:*/		regs.R4 = regs.R23;
		/* 821A9548h case    4:*/		return 0x821A954C;
		  /* 821A954Ch */ case    5:  		/* mr R3, R31 */
		/* 821A954Ch case    5:*/		regs.R3 = regs.R31;
		/* 821A954Ch case    5:*/		return 0x821A9550;
		  /* 821A9550h */ case    6:  		/* bl -201792 */
		/* 821A9550h case    6:*/		regs.LR = 0x821A9554; return 0x82178110;
		/* 821A9550h case    6:*/		return 0x821A9554;
		  /* 821A9554h */ case    7:  		/* mr R29, R3 */
		/* 821A9554h case    7:*/		regs.R29 = regs.R3;
		/* 821A9554h case    7:*/		return 0x821A9558;
		  /* 821A9558h */ case    8:  		/* li R5, 0 */
		/* 821A9558h case    8:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A9558h case    8:*/		return 0x821A955C;
		  /* 821A955Ch */ case    9:  		/* mr R4, R30 */
		/* 821A955Ch case    9:*/		regs.R4 = regs.R30;
		/* 821A955Ch case    9:*/		return 0x821A9560;
		  /* 821A9560h */ case   10:  		/* mr R3, R31 */
		/* 821A9560h case   10:*/		regs.R3 = regs.R31;
		/* 821A9560h case   10:*/		return 0x821A9564;
		  /* 821A9564h */ case   11:  		/* bl -201812 */
		/* 821A9564h case   11:*/		regs.LR = 0x821A9568; return 0x82178110;
		/* 821A9564h case   11:*/		return 0x821A9568;
		  /* 821A9568h */ case   12:  		/* mr R6, R3 */
		/* 821A9568h case   12:*/		regs.R6 = regs.R3;
		/* 821A9568h case   12:*/		return 0x821A956C;
		  /* 821A956Ch */ case   13:  		/* mr R5, R20 */
		/* 821A956Ch case   13:*/		regs.R5 = regs.R20;
		/* 821A956Ch case   13:*/		return 0x821A9570;
		  /* 821A9570h */ case   14:  		/* li R4, 0 */
		/* 821A9570h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A9570h case   14:*/		return 0x821A9574;
		  /* 821A9574h */ case   15:  		/* mr R3, R31 */
		/* 821A9574h case   15:*/		regs.R3 = regs.R31;
		/* 821A9574h case   15:*/		return 0x821A9578;
		  /* 821A9578h */ case   16:  		/* mr R7, R29 */
		/* 821A9578h case   16:*/		regs.R7 = regs.R29;
		/* 821A9578h case   16:*/		return 0x821A957C;
		  /* 821A957Ch */ case   17:  		/* bl -46996 */
		/* 821A957Ch case   17:*/		regs.LR = 0x821A9580; return 0x8219DDE8;
		/* 821A957Ch case   17:*/		return 0x821A9580;
		  /* 821A9580h */ case   18:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A9580h case   18:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A9580h case   18:*/		return 0x821A9584;
		  /* 821A9584h */ case   19:  		/* mr R29, R3 */
		/* 821A9584h case   19:*/		regs.R29 = regs.R3;
		/* 821A9584h case   19:*/		return 0x821A9588;
		  /* 821A9588h */ case   20:  		/* oris R11, R11, 256 */
		/* 821A9588h case   20:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A9588h case   20:*/		return 0x821A958C;
		  /* 821A958Ch */ case   21:  		/* mr R4, R30 */
		/* 821A958Ch case   21:*/		regs.R4 = regs.R30;
		/* 821A958Ch case   21:*/		return 0x821A9590;
		  /* 821A9590h */ case   22:  		/* stw R11, <#[R30 + 8]> */
		/* 821A9590h case   22:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A9590h case   22:*/		return 0x821A9594;
		  /* 821A9594h */ case   23:  		/* mr R3, R31 */
		/* 821A9594h case   23:*/		regs.R3 = regs.R31;
		/* 821A9594h case   23:*/		return 0x821A9598;
		  /* 821A9598h */ case   24:  		/* lwz R5, <#[R31 + 660]> */
		/* 821A9598h case   24:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000294) );
		/* 821A9598h case   24:*/		return 0x821A959C;
		  /* 821A959Ch */ case   25:  		/* bl 79980 */
		/* 821A959Ch case   25:*/		regs.LR = 0x821A95A0; return 0x821BCE08;
		/* 821A959Ch case   25:*/		return 0x821A95A0;
		  /* 821A95A0h */ case   26:  		/* mr R4, R30 */
		/* 821A95A0h case   26:*/		regs.R4 = regs.R30;
		/* 821A95A0h case   26:*/		return 0x821A95A4;
		  /* 821A95A4h */ case   27:  		/* mr R3, R31 */
		/* 821A95A4h case   27:*/		regs.R3 = regs.R31;
		/* 821A95A4h case   27:*/		return 0x821A95A8;
		  /* 821A95A8h */ case   28:  		/* bl -35568 */
		/* 821A95A8h case   28:*/		regs.LR = 0x821A95AC; return 0x821A0AB8;
		/* 821A95A8h case   28:*/		return 0x821A95AC;
		  /* 821A95ACh */ case   29:  		/* lwz R11, <#[R27 + 28]> */
		/* 821A95ACh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x0000001C) );
		/* 821A95ACh case   29:*/		return 0x821A95B0;
		  /* 821A95B0h */ case   30:  		/* mr R30, R29 */
		/* 821A95B0h case   30:*/		regs.R30 = regs.R29;
		/* 821A95B0h case   30:*/		return 0x821A95B4;
		  /* 821A95B4h */ case   31:  		/* li R28, 0 */
		/* 821A95B4h case   31:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A95B4h case   31:*/		return 0x821A95B8;
		  /* 821A95B8h */ case   32:  		/* addic. R26, R11, -1 */
		/* 821A95B8h case   32:*/		cpu::op::addic<1>(regs,&regs.R26,regs.R11,0xFFFFFFFF);
		/* 821A95B8h case   32:*/		return 0x821A95BC;
		  /* 821A95BCh */ case   33:  		/* bc 12, CR0_EQ, 228 */
		/* 821A95BCh case   33:*/		if ( regs.CR[0].eq ) { return 0x821A96A0;  }
		/* 821A95BCh case   33:*/		return 0x821A95C0;
		  /* 821A95C0h */ case   34:  		/* addi R25, R27, 12 */
		/* 821A95C0h case   34:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R27,0xC);
		/* 821A95C0h case   34:*/		return 0x821A95C4;
		  /* 821A95C4h */ case   35:  		/* lwz R11, <#[R25 + 16]> */
		/* 821A95C4h case   35:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000010) );
		/* 821A95C4h case   35:*/		return 0x821A95C8;
		  /* 821A95C8h */ case   36:  		/* li R5, 0 */
		/* 821A95C8h case   36:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A95C8h case   36:*/		return 0x821A95CC;
		  /* 821A95CCh */ case   37:  		/* mr R4, R30 */
		/* 821A95CCh case   37:*/		regs.R4 = regs.R30;
		/* 821A95CCh case   37:*/		return 0x821A95D0;
		  /* 821A95D0h */ case   38:  		/* subf R11, R28, R11 */
		/* 821A95D0h case   38:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R28,regs.R11);
		/* 821A95D0h case   38:*/		return 0x821A95D4;
		  /* 821A95D4h */ case   39:  		/* mr R3, R31 */
		/* 821A95D4h case   39:*/		regs.R3 = regs.R31;
		/* 821A95D4h case   39:*/		return 0x821A95D8;
		  /* 821A95D8h */ case   40:  		/* addi R11, R11, -1 */
		/* 821A95D8h case   40:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A95D8h case   40:*/		return 0x821A95DC;
		  /* 821A95DCh */ case   41:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A95DCh case   41:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A95DCh case   41:*/		return 0x821A95E0;
		  /* 821A95E0h */ case   42:  		/* lwzx R24, <#[R11 + R25]> */
		/* 821A95E0h case   42:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + regs.R25 + 0x00000000) );
		/* 821A95E0h case   42:*/		return 0x821A95E4;
		  /* 821A95E4h */ case   43:  		/* bl -201940 */
		/* 821A95E4h case   43:*/		regs.LR = 0x821A95E8; return 0x82178110;
		/* 821A95E4h case   43:*/		return 0x821A95E8;
		  /* 821A95E8h */ case   44:  		/* mr R29, R3 */
		/* 821A95E8h case   44:*/		regs.R29 = regs.R3;
		/* 821A95E8h case   44:*/		return 0x821A95EC;
		  /* 821A95ECh */ case   45:  		/* lwz R6, <#[R27 + 4]> */
		/* 821A95ECh case   45:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R27 + 0x00000004) );
		/* 821A95ECh case   45:*/		return 0x821A95F0;
		  /* 821A95F0h */ case   46:  		/* mr R5, R24 */
		/* 821A95F0h case   46:*/		regs.R5 = regs.R24;
		/* 821A95F0h case   46:*/		return 0x821A95F4;
		  /* 821A95F4h */ case   47:  		/* lwz R4, <#[R27]> */
		/* 821A95F4h case   47:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000000) );
		/* 821A95F4h case   47:*/		return 0x821A95F8;
		  /* 821A95F8h */ case   48:  		/* mr R3, R31 */
		/* 821A95F8h case   48:*/		regs.R3 = regs.R31;
		/* 821A95F8h case   48:*/		return 0x821A95FC;
		  /* 821A95FCh */ case   49:  		/* bl -201876 */
		/* 821A95FCh case   49:*/		regs.LR = 0x821A9600; return 0x82178168;
		/* 821A95FCh case   49:*/		return 0x821A9600;
		  /* 821A9600h */ case   50:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A9600h case   50:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A9600h case   50:*/		return 0x821A9604;
		  /* 821A9604h */ case   51:  		/* mr R7, R3 */
		/* 821A9604h case   51:*/		regs.R7 = regs.R3;
		/* 821A9604h case   51:*/		return 0x821A9608;
		  /* 821A9608h */ case   52:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A9608h case   52:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A9608h case   52:*/		return 0x821A960C;
		  /* 821A960Ch */ case   53:  		/* cmplwi CR6, R11, 128 */
		/* 821A960Ch case   53:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821A960Ch case   53:*/		return 0x821A9610;
		  /* 821A9610h */ case   54:  		/* bc 12, CR6_EQ, 16 */
		/* 821A9610h case   54:*/		if ( regs.CR[6].eq ) { return 0x821A9620;  }
		/* 821A9610h case   54:*/		return 0x821A9614;
		  /* 821A9614h */ case   55:  		/* mr R11, R29 */
		/* 821A9614h case   55:*/		regs.R11 = regs.R29;
		/* 821A9614h case   55:*/		return 0x821A9618;
		  /* 821A9618h */ case   56:  		/* mr R29, R3 */
		/* 821A9618h case   56:*/		regs.R29 = regs.R3;
		/* 821A9618h case   56:*/		return 0x821A961C;
		  /* 821A961Ch */ case   57:  		/* mr R7, R11 */
		/* 821A961Ch case   57:*/		regs.R7 = regs.R11;
		/* 821A961Ch case   57:*/		return 0x821A9620;
	}
	return 0x821A9620;
} // Block from 821A9538h-821A9620h (58 instructions)

//////////////////////////////////////////////////////
// Block at 821A9620h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9620( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9620) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9620);
		  /* 821A9620h */ case    0:  		/* mr R6, R29 */
		/* 821A9620h case    0:*/		regs.R6 = regs.R29;
		/* 821A9620h case    0:*/		return 0x821A9624;
		  /* 821A9624h */ case    1:  		/* mr R5, R20 */
		/* 821A9624h case    1:*/		regs.R5 = regs.R20;
		/* 821A9624h case    1:*/		return 0x821A9628;
		  /* 821A9628h */ case    2:  		/* li R4, 0 */
		/* 821A9628h case    2:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A9628h case    2:*/		return 0x821A962C;
		  /* 821A962Ch */ case    3:  		/* mr R3, R31 */
		/* 821A962Ch case    3:*/		regs.R3 = regs.R31;
		/* 821A962Ch case    3:*/		return 0x821A9630;
		  /* 821A9630h */ case    4:  		/* bl -47176 */
		/* 821A9630h case    4:*/		regs.LR = 0x821A9634; return 0x8219DDE8;
		/* 821A9630h case    4:*/		return 0x821A9634;
		  /* 821A9634h */ case    5:  		/* lwz R4, <#[R27 + 8]> */
		/* 821A9634h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R27 + 0x00000008) );
		/* 821A9634h case    5:*/		return 0x821A9638;
		  /* 821A9638h */ case    6:  		/* mr R29, R3 */
		/* 821A9638h case    6:*/		regs.R29 = regs.R3;
		/* 821A9638h case    6:*/		return 0x821A963C;
		  /* 821A963Ch */ case    7:  		/* cmplwi CR6, R4, 0 */
		/* 821A963Ch case    7:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821A963Ch case    7:*/		return 0x821A9640;
		  /* 821A9640h */ case    8:  		/* bc 12, CR6_EQ, 28 */
		/* 821A9640h case    8:*/		if ( regs.CR[6].eq ) { return 0x821A965C;  }
		/* 821A9640h case    8:*/		return 0x821A9644;
		  /* 821A9644h */ case    9:  		/* li R5, 0 */
		/* 821A9644h case    9:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821A9644h case    9:*/		return 0x821A9648;
		  /* 821A9648h */ case   10:  		/* mr R3, R31 */
		/* 821A9648h case   10:*/		regs.R3 = regs.R31;
		/* 821A9648h case   10:*/		return 0x821A964C;
		  /* 821A964Ch */ case   11:  		/* bl -233212 */
		/* 821A964Ch case   11:*/		regs.LR = 0x821A9650; return 0x82170750;
		/* 821A964Ch case   11:*/		return 0x821A9650;
		  /* 821A9650h */ case   12:  		/* mr R4, R3 */
		/* 821A9650h case   12:*/		regs.R4 = regs.R3;
		/* 821A9650h case   12:*/		return 0x821A9654;
		  /* 821A9654h */ case   13:  		/* mr R3, R29 */
		/* 821A9654h case   13:*/		regs.R3 = regs.R29;
		/* 821A9654h case   13:*/		return 0x821A9658;
		  /* 821A9658h */ case   14:  		/* bl -201872 */
		/* 821A9658h case   14:*/		regs.LR = 0x821A965C; return 0x821781C8;
		/* 821A9658h case   14:*/		return 0x821A965C;
	}
	return 0x821A965C;
} // Block from 821A9620h-821A965Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A965Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A965C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A965C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A965C);
		  /* 821A965Ch */ case    0:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A965Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A965Ch case    0:*/		return 0x821A9660;
		  /* 821A9660h */ case    1:  		/* mr R4, R30 */
		/* 821A9660h case    1:*/		regs.R4 = regs.R30;
		/* 821A9660h case    1:*/		return 0x821A9664;
		  /* 821A9664h */ case    2:  		/* mr R3, R31 */
		/* 821A9664h case    2:*/		regs.R3 = regs.R31;
		/* 821A9664h case    2:*/		return 0x821A9668;
		  /* 821A9668h */ case    3:  		/* oris R11, R11, 256 */
		/* 821A9668h case    3:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A9668h case    3:*/		return 0x821A966C;
		  /* 821A966Ch */ case    4:  		/* stw R11, <#[R30 + 8]> */
		/* 821A966Ch case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A966Ch case    4:*/		return 0x821A9670;
		  /* 821A9670h */ case    5:  		/* lwz R5, <#[R31 + 660]> */
		/* 821A9670h case    5:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R31 + 0x00000294) );
		/* 821A9670h case    5:*/		return 0x821A9674;
		  /* 821A9674h */ case    6:  		/* bl 79764 */
		/* 821A9674h case    6:*/		regs.LR = 0x821A9678; return 0x821BCE08;
		/* 821A9674h case    6:*/		return 0x821A9678;
		  /* 821A9678h */ case    7:  		/* mr R4, R29 */
		/* 821A9678h case    7:*/		regs.R4 = regs.R29;
		/* 821A9678h case    7:*/		return 0x821A967C;
		  /* 821A967Ch */ case    8:  		/* mr R3, R31 */
		/* 821A967Ch case    8:*/		regs.R3 = regs.R31;
		/* 821A967Ch case    8:*/		return 0x821A9680;
		  /* 821A9680h */ case    9:  		/* bl -49480 */
		/* 821A9680h case    9:*/		regs.LR = 0x821A9684; return 0x8219D538;
		/* 821A9680h case    9:*/		return 0x821A9684;
		  /* 821A9684h */ case   10:  		/* mr R4, R30 */
		/* 821A9684h case   10:*/		regs.R4 = regs.R30;
		/* 821A9684h case   10:*/		return 0x821A9688;
		  /* 821A9688h */ case   11:  		/* mr R3, R31 */
		/* 821A9688h case   11:*/		regs.R3 = regs.R31;
		/* 821A9688h case   11:*/		return 0x821A968C;
		  /* 821A968Ch */ case   12:  		/* bl -35796 */
		/* 821A968Ch case   12:*/		regs.LR = 0x821A9690; return 0x821A0AB8;
		/* 821A968Ch case   12:*/		return 0x821A9690;
		  /* 821A9690h */ case   13:  		/* addi R28, R28, 1 */
		/* 821A9690h case   13:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821A9690h case   13:*/		return 0x821A9694;
		  /* 821A9694h */ case   14:  		/* mr R30, R29 */
		/* 821A9694h case   14:*/		regs.R30 = regs.R29;
		/* 821A9694h case   14:*/		return 0x821A9698;
		  /* 821A9698h */ case   15:  		/* cmplw CR6, R28, R26 */
		/* 821A9698h case   15:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R26);
		/* 821A9698h case   15:*/		return 0x821A969C;
		  /* 821A969Ch */ case   16:  		/* bc 12, CR6_LT, -216 */
		/* 821A969Ch case   16:*/		if ( regs.CR[6].lt ) { return 0x821A95C4;  }
		/* 821A969Ch case   16:*/		return 0x821A96A0;
	}
	return 0x821A96A0;
} // Block from 821A965Ch-821A96A0h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A96A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A96A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A96A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A96A0);
		  /* 821A96A0h */ case    0:  		/* lwz R11, <#[R20 + 8]> */
		/* 821A96A0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x00000008) );
		/* 821A96A0h case    0:*/		return 0x821A96A4;
		  /* 821A96A4h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821A96A4h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821A96A4h case    1:*/		return 0x821A96A8;
		  /* 821A96A8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821A96A8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A96B8;  }
		/* 821A96A8h case    2:*/		return 0x821A96AC;
		  /* 821A96ACh */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821A96ACh case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A96ACh case    3:*/		return 0x821A96B0;
		  /* 821A96B0h */ case    4:  		/* ori R11, R11, 1 */
		/* 821A96B0h case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A96B0h case    4:*/		return 0x821A96B4;
		  /* 821A96B4h */ case    5:  		/* stw R11, <#[R30 + 8]> */
		/* 821A96B4h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821A96B4h case    5:*/		return 0x821A96B8;
	}
	return 0x821A96B8;
} // Block from 821A96A0h-821A96B8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A96B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A96B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A96B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A96B8);
		  /* 821A96B8h */ case    0:  		/* mr R6, R30 */
		/* 821A96B8h case    0:*/		regs.R6 = regs.R30;
		/* 821A96B8h case    0:*/		return 0x821A96BC;
		  /* 821A96BCh */ case    1:  		/* mr R5, R18 */
		/* 821A96BCh case    1:*/		regs.R5 = regs.R18;
		/* 821A96BCh case    1:*/		return 0x821A96C0;
		  /* 821A96C0h */ case    2:  		/* mr R4, R20 */
		/* 821A96C0h case    2:*/		regs.R4 = regs.R20;
		/* 821A96C0h case    2:*/		return 0x821A96C4;
		  /* 821A96C4h */ case    3:  		/* mr R3, R31 */
		/* 821A96C4h case    3:*/		regs.R3 = regs.R31;
		/* 821A96C4h case    3:*/		return 0x821A96C8;
		  /* 821A96C8h */ case    4:  		/* bl -18344 */
		/* 821A96C8h case    4:*/		regs.LR = 0x821A96CC; return 0x821A4F20;
		/* 821A96C8h case    4:*/		return 0x821A96CC;
		  /* 821A96CCh */ case    5:  		/* mr R3, R30 */
		/* 821A96CCh case    5:*/		regs.R3 = regs.R30;
		/* 821A96CCh case    5:*/		return 0x821A96D0;
		  /* 821A96D0h */ case    6:  		/* addi R1, R1, 224 */
		/* 821A96D0h case    6:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0xE0);
		/* 821A96D0h case    6:*/		return 0x821A96D4;
		  /* 821A96D4h */ case    7:  		/* b -1147988 */
		/* 821A96D4h case    7:*/		return 0x82091280;
		/* 821A96D4h case    7:*/		return 0x821A96D8;
	}
	return 0x821A96D8;
} // Block from 821A96B8h-821A96D8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821A96D8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A96D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A96D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A96D8);
		  /* 821A96D8h */ case    0:  		/* mfspr R12, LR */
		/* 821A96D8h case    0:*/		regs.R12 = regs.LR;
		/* 821A96D8h case    0:*/		return 0x821A96DC;
		  /* 821A96DCh */ case    1:  		/* bl -1148048 */
		/* 821A96DCh case    1:*/		regs.LR = 0x821A96E0; return 0x8209124C;
		/* 821A96DCh case    1:*/		return 0x821A96E0;
		  /* 821A96E0h */ case    2:  		/* stwu R1, <#[R1 - 1088]> */
		/* 821A96E0h case    2:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFBC0) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFBC0);
		/* 821A96E0h case    2:*/		return 0x821A96E4;
		  /* 821A96E4h */ case    3:  		/* mr R28, R3 */
		/* 821A96E4h case    3:*/		regs.R28 = regs.R3;
		/* 821A96E4h case    3:*/		return 0x821A96E8;
		  /* 821A96E8h */ case    4:  		/* lwz R8, <#[R5 + 28]> */
		/* 821A96E8h case    4:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R5 + 0x0000001C) );
		/* 821A96E8h case    4:*/		return 0x821A96EC;
		  /* 821A96ECh */ case    5:  		/* mr R30, R4 */
		/* 821A96ECh case    5:*/		regs.R30 = regs.R4;
		/* 821A96ECh case    5:*/		return 0x821A96F0;
		  /* 821A96F0h */ case    6:  		/* lwz R3, <#[R5 + 44]> */
		/* 821A96F0h case    6:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R5 + 0x0000002C) );
		/* 821A96F0h case    6:*/		return 0x821A96F4;
		  /* 821A96F4h */ case    7:  		/* mr R31, R5 */
		/* 821A96F4h case    7:*/		regs.R31 = regs.R5;
		/* 821A96F4h case    7:*/		return 0x821A96F8;
		  /* 821A96F8h */ case    8:  		/* mr R26, R6 */
		/* 821A96F8h case    8:*/		regs.R26 = regs.R6;
		/* 821A96F8h case    8:*/		return 0x821A96FC;
		  /* 821A96FCh */ case    9:  		/* mr R4, R6 */
		/* 821A96FCh case    9:*/		regs.R4 = regs.R6;
		/* 821A96FCh case    9:*/		return 0x821A9700;
		  /* 821A9700h */ case   10:  		/* li R10, 1 */
		/* 821A9700h case   10:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821A9700h case   10:*/		return 0x821A9704;
		  /* 821A9704h */ case   11:  		/* li R9, 0 */
		/* 821A9704h case   11:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A9704h case   11:*/		return 0x821A9708;
		  /* 821A9708h */ case   12:  		/* addi R7, R1, 108 */
		/* 821A9708h case   12:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x6C);
		/* 821A9708h case   12:*/		return 0x821A970C;
		  /* 821A970Ch */ case   13:  		/* addi R6, R1, 104 */
		/* 821A970Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x68);
		/* 821A970Ch case   13:*/		return 0x821A9710;
		  /* 821A9710h */ case   14:  		/* addi R5, R1, 116 */
		/* 821A9710h case   14:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x74);
		/* 821A9710h case   14:*/		return 0x821A9714;
		  /* 821A9714h */ case   15:  		/* bl 499132 */
		/* 821A9714h case   15:*/		regs.LR = 0x821A9718; return 0x822234D0;
		/* 821A9714h case   15:*/		return 0x821A9718;
		  /* 821A9718h */ case   16:  		/* li R10, 1 */
		/* 821A9718h case   16:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821A9718h case   16:*/		return 0x821A971C;
		  /* 821A971Ch */ case   17:  		/* li R9, 0 */
		/* 821A971Ch case   17:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A971Ch case   17:*/		return 0x821A9720;
		  /* 821A9720h */ case   18:  		/* lwz R8, <#[R31 + 28]> */
		/* 821A9720h case   18:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000001C) );
		/* 821A9720h case   18:*/		return 0x821A9724;
		  /* 821A9724h */ case   19:  		/* addi R7, R1, 112 */
		/* 821A9724h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 821A9724h case   19:*/		return 0x821A9728;
		  /* 821A9728h */ case   20:  		/* lwz R3, <#[R31 + 48]> */
		/* 821A9728h case   20:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R31 + 0x00000030) );
		/* 821A9728h case   20:*/		return 0x821A972C;
		  /* 821A972Ch */ case   21:  		/* addi R6, R1, 96 */
		/* 821A972Ch case   21:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x60);
		/* 821A972Ch case   21:*/		return 0x821A9730;
		  /* 821A9730h */ case   22:  		/* addi R5, R1, 100 */
		/* 821A9730h case   22:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x64);
		/* 821A9730h case   22:*/		return 0x821A9734;
		  /* 821A9734h */ case   23:  		/* mr R4, R26 */
		/* 821A9734h case   23:*/		regs.R4 = regs.R26;
		/* 821A9734h case   23:*/		return 0x821A9738;
		  /* 821A9738h */ case   24:  		/* bl 499096 */
		/* 821A9738h case   24:*/		regs.LR = 0x821A973C; return 0x822234D0;
		/* 821A9738h case   24:*/		return 0x821A973C;
		  /* 821A973Ch */ case   25:  		/* addi R10, R1, 804 */
		/* 821A973Ch case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x324);
		/* 821A973Ch case   25:*/		return 0x821A9740;
		  /* 821A9740h */ case   26:  		/* addi R9, R1, 356 */
		/* 821A9740h case   26:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x164);
		/* 821A9740h case   26:*/		return 0x821A9744;
		  /* 821A9744h */ case   27:  		/* lwz R7, <#[R1 + 108]> */
		/* 821A9744h case   27:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000006C) );
		/* 821A9744h case   27:*/		return 0x821A9748;
		  /* 821A9748h */ case   28:  		/* addi R8, R1, 580 */
		/* 821A9748h case   28:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x244);
		/* 821A9748h case   28:*/		return 0x821A974C;
		  /* 821A974Ch */ case   29:  		/* addi R6, R1, 132 */
		/* 821A974Ch case   29:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x84);
		/* 821A974Ch case   29:*/		return 0x821A9750;
		  /* 821A9750h */ case   30:  		/* li R11, 0 */
		/* 821A9750h case   30:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A9750h case   30:*/		return 0x821A9754;
		  /* 821A9754h */ case   31:  		/* addi R5, R1, 1000 */
		/* 821A9754h case   31:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x3E8);
		/* 821A9754h case   31:*/		return 0x821A9758;
		  /* 821A9758h */ case   32:  		/* addi R4, R1, 552 */
		/* 821A9758h case   32:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x228);
		/* 821A9758h case   32:*/		return 0x821A975C;
		  /* 821A975Ch */ case   33:  		/* stw R11, <#[R1 + 800]> */
		/* 821A975Ch case   33:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000320) );
		/* 821A975Ch case   33:*/		return 0x821A9760;
		  /* 821A9760h */ case   34:  		/* addi R3, R1, 776 */
		/* 821A9760h case   34:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R1,0x308);
		/* 821A9760h case   34:*/		return 0x821A9764;
		  /* 821A9764h */ case   35:  		/* stw R11, <#[R1 + 352]> */
		/* 821A9764h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000160) );
		/* 821A9764h case   35:*/		return 0x821A9768;
		  /* 821A9768h */ case   36:  		/* stw R11, <#[R1 + 576]> */
		/* 821A9768h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000240) );
		/* 821A9768h case   36:*/		return 0x821A976C;
		  /* 821A976Ch */ case   37:  		/* addi R25, R1, 328 */
		/* 821A976Ch case   37:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R1,0x148);
		/* 821A976Ch case   37:*/		return 0x821A9770;
		  /* 821A9770h */ case   38:  		/* stw R11, <#[R10]> */
		/* 821A9770h case   38:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821A9770h case   38:*/		return 0x821A9774;
		  /* 821A9774h */ case   39:  		/* rlwinm. R29, R7, 0, 30, 28 */
		/* 821A9774h case   39:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R29,regs.R7);
		/* 821A9774h case   39:*/		return 0x821A9778;
		  /* 821A9778h */ case   40:  		/* stw R11, <#[R9]> */
		/* 821A9778h case   40:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000000) );
		/* 821A9778h case   40:*/		return 0x821A977C;
		  /* 821A977Ch */ case   41:  		/* stw R11, <#[R8]> */
		/* 821A977Ch case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821A977Ch case   41:*/		return 0x821A9780;
		  /* 821A9780h */ case   42:  		/* stw R11, <#[R1 + 128]> */
		/* 821A9780h case   42:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000080) );
		/* 821A9780h case   42:*/		return 0x821A9784;
		  /* 821A9784h */ case   43:  		/* stw R11, <#[R10 + 4]> */
		/* 821A9784h case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821A9784h case   43:*/		return 0x821A9788;
		  /* 821A9788h */ case   44:  		/* stw R11, <#[R9 + 4]> */
		/* 821A9788h case   44:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R9 + 0x00000004) );
		/* 821A9788h case   44:*/		return 0x821A978C;
		  /* 821A978Ch */ case   45:  		/* stw R11, <#[R8 + 4]> */
		/* 821A978Ch case   45:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821A978Ch case   45:*/		return 0x821A9790;
		  /* 821A9790h */ case   46:  		/* stw R11, <#[R6]> */
		/* 821A9790h case   46:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000000) );
		/* 821A9790h case   46:*/		return 0x821A9794;
		  /* 821A9794h */ case   47:  		/* stw R11, <#[R6 + 4]> */
		/* 821A9794h case   47:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R6 + 0x00000004) );
		/* 821A9794h case   47:*/		return 0x821A9798;
		  /* 821A9798h */ case   48:  		/* stw R11, <#[R1 + 828]> */
		/* 821A9798h case   48:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000033C) );
		/* 821A9798h case   48:*/		return 0x821A979C;
		  /* 821A979Ch */ case   49:  		/* stw R11, <#[R1 + 960]> */
		/* 821A979Ch case   49:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000003C0) );
		/* 821A979Ch case   49:*/		return 0x821A97A0;
		  /* 821A97A0h */ case   50:  		/* stw R11, <#[R1 + 996]> */
		/* 821A97A0h case   50:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000003E4) );
		/* 821A97A0h case   50:*/		return 0x821A97A4;
		  /* 821A97A4h */ case   51:  		/* stw R11, <#[R1 + 380]> */
		/* 821A97A4h case   51:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000017C) );
		/* 821A97A4h case   51:*/		return 0x821A97A8;
		  /* 821A97A8h */ case   52:  		/* stw R11, <#[R1 + 512]> */
		/* 821A97A8h case   52:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000200) );
		/* 821A97A8h case   52:*/		return 0x821A97AC;
		  /* 821A97ACh */ case   53:  		/* stw R11, <#[R1 + 548]> */
		/* 821A97ACh case   53:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000224) );
		/* 821A97ACh case   53:*/		return 0x821A97B0;
		  /* 821A97B0h */ case   54:  		/* stw R11, <#[R1 + 604]> */
		/* 821A97B0h case   54:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000025C) );
		/* 821A97B0h case   54:*/		return 0x821A97B4;
		  /* 821A97B4h */ case   55:  		/* stw R11, <#[R1 + 736]> */
		/* 821A97B4h case   55:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x000002E0) );
		/* 821A97B4h case   55:*/		return 0x821A97B8;
		  /* 821A97B8h */ case   56:  		/* stw R11, <#[R1 + 772]> */
		/* 821A97B8h case   56:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000304) );
		/* 821A97B8h case   56:*/		return 0x821A97BC;
		  /* 821A97BCh */ case   57:  		/* std R11, <#[R5]> */
		/* 821A97BCh case   57:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R5 + 0x00000000) );
		/* 821A97BCh case   57:*/		return 0x821A97C0;
		  /* 821A97C0h */ case   58:  		/* std R11, <#[R4]> */
		/* 821A97C0h case   58:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R4 + 0x00000000) );
		/* 821A97C0h case   58:*/		return 0x821A97C4;
		  /* 821A97C4h */ case   59:  		/* stw R11, <#[R1 + 156]> */
		/* 821A97C4h case   59:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000009C) );
		/* 821A97C4h case   59:*/		return 0x821A97C8;
		  /* 821A97C8h */ case   60:  		/* stw R11, <#[R1 + 288]> */
		/* 821A97C8h case   60:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000120) );
		/* 821A97C8h case   60:*/		return 0x821A97CC;
		  /* 821A97CCh */ case   61:  		/* stw R11, <#[R1 + 324]> */
		/* 821A97CCh case   61:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000144) );
		/* 821A97CCh case   61:*/		return 0x821A97D0;
		  /* 821A97D0h */ case   62:  		/* std R11, <#[R3]> */
		/* 821A97D0h case   62:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821A97D0h case   62:*/		return 0x821A97D4;
		  /* 821A97D4h */ case   63:  		/* std R11, <#[R5 + 8]> */
		/* 821A97D4h case   63:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821A97D4h case   63:*/		return 0x821A97D8;
		  /* 821A97D8h */ case   64:  		/* std R11, <#[R4 + 8]> */
		/* 821A97D8h case   64:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821A97D8h case   64:*/		return 0x821A97DC;
		  /* 821A97DCh */ case   65:  		/* std R11, <#[R25]> */
		/* 821A97DCh case   65:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821A97DCh case   65:*/		return 0x821A97E0;
		  /* 821A97E0h */ case   66:  		/* std R11, <#[R3 + 8]> */
		/* 821A97E0h case   66:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A97E0h case   66:*/		return 0x821A97E4;
		  /* 821A97E4h */ case   67:  		/* lwz R29, <#[R30 + 44]> */
		/* 821A97E4h case   67:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R30 + 0x0000002C) );
		/* 821A97E4h case   67:*/		return 0x821A97E8;
		  /* 821A97E8h */ case   68:  		/* lwz R27, <#[R30 + 48]> */
		/* 821A97E8h case   68:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R30 + 0x00000030) );
		/* 821A97E8h case   68:*/		return 0x821A97EC;
		  /* 821A97ECh */ case   69:  		/* std R11, <#[R25 + 8]> */
		/* 821A97ECh case   69:*/		cpu::mem::store64( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A97ECh case   69:*/		return 0x821A97F0;
		  /* 821A97F0h */ case   70:  		/* bc 4, CR0_EQ, 120 */
		/* 821A97F0h case   70:*/		if ( !regs.CR[0].eq ) { return 0x821A9868;  }
		/* 821A97F0h case   70:*/		return 0x821A97F4;
		  /* 821A97F4h */ case   71:  		/* lwz R5, <#[R1 + 116]> */
		/* 821A97F4h case   71:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000074) );
		/* 821A97F4h case   71:*/		return 0x821A97F8;
		  /* 821A97F8h */ case   72:  		/* lwz R11, <#[R5 + 8]> */
		/* 821A97F8h case   72:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821A97F8h case   72:*/		return 0x821A97FC;
		  /* 821A97FCh */ case   73:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A97FCh case   73:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A97FCh case   73:*/		return 0x821A9800;
		  /* 821A9800h */ case   74:  		/* cmplwi CR6, R11, 128 */
		/* 821A9800h case   74:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821A9800h case   74:*/		return 0x821A9804;
		  /* 821A9804h */ case   75:  		/* bc 4, CR6_EQ, 100 */
		/* 821A9804h case   75:*/		if ( !regs.CR[6].eq ) { return 0x821A9868;  }
		/* 821A9804h case   75:*/		return 0x821A9808;
		  /* 821A9808h */ case   76:  		/* addi R4, R1, 800 */
		/* 821A9808h case   76:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x320);
		/* 821A9808h case   76:*/		return 0x821A980C;
		  /* 821A980Ch */ case   77:  		/* lwz R11, <#[R29]> */
		/* 821A980Ch case   77:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A980Ch case   77:*/		return 0x821A9810;
		  /* 821A9810h */ case   78:  		/* li R9, 0 */
		/* 821A9810h case   78:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A9810h case   78:*/		return 0x821A9814;
		  /* 821A9814h */ case   79:  		/* lwz R8, <#[R29 + 12]> */
		/* 821A9814h case   79:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A9814h case   79:*/		return 0x821A9818;
		  /* 821A9818h */ case   80:  		/* stw R4, <#[R1 + 92]> */
		/* 821A9818h case   80:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A9818h case   80:*/		return 0x821A981C;
		  /* 821A981Ch */ case   81:  		/* rlwinm R10, R11, 0, 27, 31 */
		/* 821A981Ch case   81:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821A981Ch case   81:*/		return 0x821A9820;
		  /* 821A9820h */ case   82:  		/* mr R4, R31 */
		/* 821A9820h case   82:*/		regs.R4 = regs.R31;
		/* 821A9820h case   82:*/		return 0x821A9824;
		  /* 821A9824h */ case   83:  		/* lwz R6, <#[R1 + 104]> */
		/* 821A9824h case   83:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000068) );
		/* 821A9824h case   83:*/		return 0x821A9828;
		  /* 821A9828h */ case   84:  		/* mr R3, R28 */
		/* 821A9828h case   84:*/		regs.R3 = regs.R28;
		/* 821A9828h case   84:*/		return 0x821A982C;
		  /* 821A982Ch */ case   85:  		/* stw R30, <#[R1 + 84]> */
		/* 821A982Ch case   85:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 821A982Ch case   85:*/		return 0x821A9830;
		  /* 821A9830h */ case   86:  		/* bl -49736 */
		/* 821A9830h case   86:*/		regs.LR = 0x821A9834; return 0x8219D5E8;
		/* 821A9830h case   86:*/		return 0x821A9834;
		  /* 821A9834h */ case   87:  		/* addi R11, R1, 352 */
		/* 821A9834h case   87:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x160);
		/* 821A9834h case   87:*/		return 0x821A9838;
		  /* 821A9838h */ case   88:  		/* stw R11, <#[R1 + 92]> */
		/* 821A9838h case   88:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A9838h case   88:*/		return 0x821A983C;
		  /* 821A983Ch */ case   89:  		/* li R9, 0 */
		/* 821A983Ch case   89:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A983Ch case   89:*/		return 0x821A9840;
		  /* 821A9840h */ case   90:  		/* mr R4, R31 */
		/* 821A9840h case   90:*/		regs.R4 = regs.R31;
		/* 821A9840h case   90:*/		return 0x821A9844;
		  /* 821A9844h */ case   91:  		/* lwz R7, <#[R1 + 108]> */
		/* 821A9844h case   91:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x0000006C) );
		/* 821A9844h case   91:*/		return 0x821A9848;
		  /* 821A9848h */ case   92:  		/* mr R3, R28 */
		/* 821A9848h case   92:*/		regs.R3 = regs.R28;
		/* 821A9848h case   92:*/		return 0x821A984C;
		  /* 821A984Ch */ case   93:  		/* lwz R8, <#[R27 + 12]> */
		/* 821A984Ch case   93:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x0000000C) );
		/* 821A984Ch case   93:*/		return 0x821A9850;
		  /* 821A9850h */ case   94:  		/* lwz R6, <#[R1 + 104]> */
		/* 821A9850h case   94:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000068) );
		/* 821A9850h case   94:*/		return 0x821A9854;
		  /* 821A9854h */ case   95:  		/* lwz R5, <#[R1 + 116]> */
		/* 821A9854h case   95:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000074) );
		/* 821A9854h case   95:*/		return 0x821A9858;
		  /* 821A9858h */ case   96:  		/* stw R30, <#[R1 + 84]> */
		/* 821A9858h case   96:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 821A9858h case   96:*/		return 0x821A985C;
		  /* 821A985Ch */ case   97:  		/* lwz R11, <#[R27]> */
		/* 821A985Ch case   97:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A985Ch case   97:*/		return 0x821A9860;
		  /* 821A9860h */ case   98:  		/* rlwinm R10, R11, 0, 27, 31 */
		/* 821A9860h case   98:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821A9860h case   98:*/		return 0x821A9864;
		  /* 821A9864h */ case   99:  		/* bl -49788 */
		/* 821A9864h case   99:*/		regs.LR = 0x821A9868; return 0x8219D5E8;
		/* 821A9864h case   99:*/		return 0x821A9868;
	}
	return 0x821A9868;
} // Block from 821A96D8h-821A9868h (100 instructions)

//////////////////////////////////////////////////////
// Block at 821A9868h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9868( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9868) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9868);
		  /* 821A9868h */ case    0:  		/* lwz R7, <#[R1 + 112]> */
		/* 821A9868h case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000070) );
		/* 821A9868h case    0:*/		return 0x821A986C;
		  /* 821A986Ch */ case    1:  		/* rlwinm. R11, R7, 0, 30, 28 */
		/* 821A986Ch case    1:*/		cpu::op::rlwinm<1,0,30,28>(regs,&regs.R11,regs.R7);
		/* 821A986Ch case    1:*/		return 0x821A9870;
		  /* 821A9870h */ case    2:  		/* bc 4, CR0_EQ, 120 */
		/* 821A9870h case    2:*/		if ( !regs.CR[0].eq ) { return 0x821A98E8;  }
		/* 821A9870h case    2:*/		return 0x821A9874;
		  /* 821A9874h */ case    3:  		/* lwz R5, <#[R1 + 100]> */
		/* 821A9874h case    3:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 821A9874h case    3:*/		return 0x821A9878;
		  /* 821A9878h */ case    4:  		/* lwz R11, <#[R5 + 8]> */
		/* 821A9878h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R5 + 0x00000008) );
		/* 821A9878h case    4:*/		return 0x821A987C;
		  /* 821A987Ch */ case    5:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821A987Ch case    5:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821A987Ch case    5:*/		return 0x821A9880;
		  /* 821A9880h */ case    6:  		/* cmplwi CR6, R11, 128 */
		/* 821A9880h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821A9880h case    6:*/		return 0x821A9884;
		  /* 821A9884h */ case    7:  		/* bc 4, CR6_EQ, 100 */
		/* 821A9884h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821A98E8;  }
		/* 821A9884h case    7:*/		return 0x821A9888;
		  /* 821A9888h */ case    8:  		/* addi R4, R1, 576 */
		/* 821A9888h case    8:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x240);
		/* 821A9888h case    8:*/		return 0x821A988C;
		  /* 821A988Ch */ case    9:  		/* lwz R11, <#[R29]> */
		/* 821A988Ch case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A988Ch case    9:*/		return 0x821A9890;
		  /* 821A9890h */ case   10:  		/* li R9, 0 */
		/* 821A9890h case   10:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A9890h case   10:*/		return 0x821A9894;
		  /* 821A9894h */ case   11:  		/* lwz R8, <#[R29 + 12]> */
		/* 821A9894h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R29 + 0x0000000C) );
		/* 821A9894h case   11:*/		return 0x821A9898;
		  /* 821A9898h */ case   12:  		/* stw R4, <#[R1 + 92]> */
		/* 821A9898h case   12:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A9898h case   12:*/		return 0x821A989C;
		  /* 821A989Ch */ case   13:  		/* rlwinm R10, R11, 0, 27, 31 */
		/* 821A989Ch case   13:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821A989Ch case   13:*/		return 0x821A98A0;
		  /* 821A98A0h */ case   14:  		/* mr R4, R31 */
		/* 821A98A0h case   14:*/		regs.R4 = regs.R31;
		/* 821A98A0h case   14:*/		return 0x821A98A4;
		  /* 821A98A4h */ case   15:  		/* lwz R6, <#[R1 + 96]> */
		/* 821A98A4h case   15:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000060) );
		/* 821A98A4h case   15:*/		return 0x821A98A8;
		  /* 821A98A8h */ case   16:  		/* mr R3, R28 */
		/* 821A98A8h case   16:*/		regs.R3 = regs.R28;
		/* 821A98A8h case   16:*/		return 0x821A98AC;
		  /* 821A98ACh */ case   17:  		/* stw R30, <#[R1 + 84]> */
		/* 821A98ACh case   17:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 821A98ACh case   17:*/		return 0x821A98B0;
		  /* 821A98B0h */ case   18:  		/* bl -49864 */
		/* 821A98B0h case   18:*/		regs.LR = 0x821A98B4; return 0x8219D5E8;
		/* 821A98B0h case   18:*/		return 0x821A98B4;
		  /* 821A98B4h */ case   19:  		/* addi R11, R1, 128 */
		/* 821A98B4h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x80);
		/* 821A98B4h case   19:*/		return 0x821A98B8;
		  /* 821A98B8h */ case   20:  		/* stw R11, <#[R1 + 92]> */
		/* 821A98B8h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000005C) );
		/* 821A98B8h case   20:*/		return 0x821A98BC;
		  /* 821A98BCh */ case   21:  		/* li R9, 0 */
		/* 821A98BCh case   21:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821A98BCh case   21:*/		return 0x821A98C0;
		  /* 821A98C0h */ case   22:  		/* mr R4, R31 */
		/* 821A98C0h case   22:*/		regs.R4 = regs.R31;
		/* 821A98C0h case   22:*/		return 0x821A98C4;
		  /* 821A98C4h */ case   23:  		/* lwz R7, <#[R1 + 112]> */
		/* 821A98C4h case   23:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000070) );
		/* 821A98C4h case   23:*/		return 0x821A98C8;
		  /* 821A98C8h */ case   24:  		/* mr R3, R28 */
		/* 821A98C8h case   24:*/		regs.R3 = regs.R28;
		/* 821A98C8h case   24:*/		return 0x821A98CC;
		  /* 821A98CCh */ case   25:  		/* lwz R8, <#[R27 + 12]> */
		/* 821A98CCh case   25:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R27 + 0x0000000C) );
		/* 821A98CCh case   25:*/		return 0x821A98D0;
		  /* 821A98D0h */ case   26:  		/* lwz R6, <#[R1 + 96]> */
		/* 821A98D0h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000060) );
		/* 821A98D0h case   26:*/		return 0x821A98D4;
		  /* 821A98D4h */ case   27:  		/* lwz R5, <#[R1 + 100]> */
		/* 821A98D4h case   27:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000064) );
		/* 821A98D4h case   27:*/		return 0x821A98D8;
		  /* 821A98D8h */ case   28:  		/* stw R30, <#[R1 + 84]> */
		/* 821A98D8h case   28:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000054) );
		/* 821A98D8h case   28:*/		return 0x821A98DC;
		  /* 821A98DCh */ case   29:  		/* lwz R11, <#[R27]> */
		/* 821A98DCh case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821A98DCh case   29:*/		return 0x821A98E0;
		  /* 821A98E0h */ case   30:  		/* rlwinm R10, R11, 0, 27, 31 */
		/* 821A98E0h case   30:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R11);
		/* 821A98E0h case   30:*/		return 0x821A98E4;
		  /* 821A98E4h */ case   31:  		/* bl -49916 */
		/* 821A98E4h case   31:*/		regs.LR = 0x821A98E8; return 0x8219D5E8;
		/* 821A98E4h case   31:*/		return 0x821A98E8;
	}
	return 0x821A98E8;
} // Block from 821A9868h-821A98E8h (32 instructions)

//////////////////////////////////////////////////////
// Block at 821A98E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A98E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A98E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A98E8);
		  /* 821A98E8h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821A98E8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821A98E8h case    0:*/		return 0x821A98EC;
		  /* 821A98ECh */ case    1:  		/* lwz R10, <#[R1 + 828]> */
		/* 821A98ECh case    1:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000033C) );
		/* 821A98ECh case    1:*/		return 0x821A98F0;
		  /* 821A98F0h */ case    2:  		/* rlwinm R11, R11, 7, 29, 31 */
		/* 821A98F0h case    2:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R11,regs.R11);
		/* 821A98F0h case    2:*/		return 0x821A98F4;
		  /* 821A98F4h */ case    3:  		/* cmplwi CR6, R10, 1 */
		/* 821A98F4h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821A98F4h case    3:*/		return 0x821A98F8;
		  /* 821A98F8h */ case    4:  		/* bc 4, CR6_GT, 172 */
		/* 821A98F8h case    4:*/		if ( !regs.CR[6].gt ) { return 0x821A99A4;  }
		/* 821A98F8h case    4:*/		return 0x821A98FC;
		  /* 821A98FCh */ case    5:  		/* add R10, R10, R11 */
		/* 821A98FCh case    5:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A98FCh case    5:*/		return 0x821A9900;
		  /* 821A9900h */ case    6:  		/* addi R10, R10, -1 */
		/* 821A9900h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821A9900h case    6:*/		return 0x821A9904;
		  /* 821A9904h */ case    7:  		/* cmplwi CR6, R10, 4 */
		/* 821A9904h case    7:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821A9904h case    7:*/		return 0x821A9908;
		  /* 821A9908h */ case    8:  		/* bc 12, CR6_GT, 156 */
		/* 821A9908h case    8:*/		if ( regs.CR[6].gt ) { return 0x821A99A4;  }
		/* 821A9908h case    8:*/		return 0x821A990C;
		  /* 821A990Ch */ case    9:  		/* addi R4, R1, 800 */
		/* 821A990Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x320);
		/* 821A990Ch case    9:*/		return 0x821A9910;
		  /* 821A9910h */ case   10:  		/* mr R6, R26 */
		/* 821A9910h case   10:*/		regs.R6 = regs.R26;
		/* 821A9910h case   10:*/		return 0x821A9914;
		  /* 821A9914h */ case   11:  		/* mr R5, R30 */
		/* 821A9914h case   11:*/		regs.R5 = regs.R30;
		/* 821A9914h case   11:*/		return 0x821A9918;
		  /* 821A9918h */ case   12:  		/* mr R3, R28 */
		/* 821A9918h case   12:*/		regs.R3 = regs.R28;
		/* 821A9918h case   12:*/		return 0x821A991C;
		  /* 821A991Ch */ case   13:  		/* bl -1388 */
		/* 821A991Ch case   13:*/		regs.LR = 0x821A9920; return 0x821A93B0;
		/* 821A991Ch case   13:*/		return 0x821A9920;
		  /* 821A9920h */ case   14:  		/* cmplwi CR0, R3, 0 */
		/* 821A9920h case   14:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821A9920h case   14:*/		return 0x821A9924;
		  /* 821A9924h */ case   15:  		/* bc 4, CR0_EQ, 120 */
		/* 821A9924h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821A999C;  }
		/* 821A9924h case   15:*/		return 0x821A9928;
		  /* 821A9928h */ case   16:  		/* lwz R11, <#[R1 + 336]> */
		/* 821A9928h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000150) );
		/* 821A9928h case   16:*/		return 0x821A992C;
		  /* 821A992Ch */ case   17:  		/* cmplwi CR6, R11, 0 */
		/* 821A992Ch case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A992Ch case   17:*/		return 0x821A9930;
		  /* 821A9930h */ case   18:  		/* bc 12, CR6_EQ, 20 */
		/* 821A9930h case   18:*/		if ( regs.CR[6].eq ) { return 0x821A9944;  }
		/* 821A9930h case   18:*/		return 0x821A9934;
		  /* 821A9934h */ case   19:  		/* mr R3, R28 */
		/* 821A9934h case   19:*/		regs.R3 = regs.R28;
		/* 821A9934h case   19:*/		return 0x821A9938;
		  /* 821A9938h */ case   20:  		/* lwz R5, <#[R1 + 340]> */
		/* 821A9938h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000154) );
		/* 821A9938h case   20:*/		return 0x821A993C;
		  /* 821A993Ch */ case   21:  		/* lwz R4, <#[R1 + 128]> */
		/* 821A993Ch case   21:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000080) );
		/* 821A993Ch case   21:*/		return 0x821A9940;
		  /* 821A9940h */ case   22:  		/* bl 538600 */
		/* 821A9940h case   22:*/		regs.LR = 0x821A9944; return 0x8222D128;
		/* 821A9940h case   22:*/		return 0x821A9944;
	}
	return 0x821A9944;
} // Block from 821A98E8h-821A9944h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821A9944h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9944( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9944) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9944);
		  /* 821A9944h */ case    0:  		/* lwz R11, <#[R1 + 784]> */
		/* 821A9944h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000310) );
		/* 821A9944h case    0:*/		return 0x821A9948;
		  /* 821A9948h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A9948h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A9948h case    1:*/		return 0x821A994C;
		  /* 821A994Ch */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821A994Ch case    2:*/		if ( regs.CR[6].eq ) { return 0x821A9960;  }
		/* 821A994Ch case    2:*/		return 0x821A9950;
		  /* 821A9950h */ case    3:  		/* mr R3, R28 */
		/* 821A9950h case    3:*/		regs.R3 = regs.R28;
		/* 821A9950h case    3:*/		return 0x821A9954;
		  /* 821A9954h */ case    4:  		/* lwz R5, <#[R1 + 788]> */
		/* 821A9954h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000314) );
		/* 821A9954h case    4:*/		return 0x821A9958;
		  /* 821A9958h */ case    5:  		/* lwz R4, <#[R1 + 576]> */
		/* 821A9958h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000240) );
		/* 821A9958h case    5:*/		return 0x821A995C;
		  /* 821A995Ch */ case    6:  		/* bl 538572 */
		/* 821A995Ch case    6:*/		regs.LR = 0x821A9960; return 0x8222D128;
		/* 821A995Ch case    6:*/		return 0x821A9960;
	}
	return 0x821A9960;
} // Block from 821A9944h-821A9960h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A9960h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9960( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9960) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9960);
		  /* 821A9960h */ case    0:  		/* lwz R11, <#[R1 + 560]> */
		/* 821A9960h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000230) );
		/* 821A9960h case    0:*/		return 0x821A9964;
		  /* 821A9964h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A9964h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A9964h case    1:*/		return 0x821A9968;
		  /* 821A9968h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821A9968h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A997C;  }
		/* 821A9968h case    2:*/		return 0x821A996C;
		  /* 821A996Ch */ case    3:  		/* mr R3, R28 */
		/* 821A996Ch case    3:*/		regs.R3 = regs.R28;
		/* 821A996Ch case    3:*/		return 0x821A9970;
		  /* 821A9970h */ case    4:  		/* lwz R5, <#[R1 + 564]> */
		/* 821A9970h case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x00000234) );
		/* 821A9970h case    4:*/		return 0x821A9974;
		  /* 821A9974h */ case    5:  		/* lwz R4, <#[R1 + 352]> */
		/* 821A9974h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000160) );
		/* 821A9974h case    5:*/		return 0x821A9978;
		  /* 821A9978h */ case    6:  		/* bl 538544 */
		/* 821A9978h case    6:*/		regs.LR = 0x821A997C; return 0x8222D128;
		/* 821A9978h case    6:*/		return 0x821A997C;
	}
	return 0x821A997C;
} // Block from 821A9960h-821A997Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A997Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A997C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A997C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A997C);
		  /* 821A997Ch */ case    0:  		/* lwz R11, <#[R1 + 1008]> */
		/* 821A997Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000003F0) );
		/* 821A997Ch case    0:*/		return 0x821A9980;
		  /* 821A9980h */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821A9980h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A9980h case    1:*/		return 0x821A9984;
		  /* 821A9984h */ case    2:  		/* bc 12, CR6_EQ, 20 */
		/* 821A9984h case    2:*/		if ( regs.CR[6].eq ) { return 0x821A9998;  }
		/* 821A9984h case    2:*/		return 0x821A9988;
		  /* 821A9988h */ case    3:  		/* mr R3, R28 */
		/* 821A9988h case    3:*/		regs.R3 = regs.R28;
		/* 821A9988h case    3:*/		return 0x821A998C;
		  /* 821A998Ch */ case    4:  		/* lwz R5, <#[R1 + 1012]> */
		/* 821A998Ch case    4:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000003F4) );
		/* 821A998Ch case    4:*/		return 0x821A9990;
		  /* 821A9990h */ case    5:  		/* lwz R4, <#[R1 + 800]> */
		/* 821A9990h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000320) );
		/* 821A9990h case    5:*/		return 0x821A9994;
		  /* 821A9994h */ case    6:  		/* bl 538516 */
		/* 821A9994h case    6:*/		regs.LR = 0x821A9998; return 0x8222D128;
		/* 821A9994h case    6:*/		return 0x821A9998;
	}
	return 0x821A9998;
} // Block from 821A997Ch-821A9998h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A9998h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9998( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9998) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9998);
		  /* 821A9998h */ case    0:  		/* li R3, 0 */
		/* 821A9998h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821A9998h case    0:*/		return 0x821A999C;
	}
	return 0x821A999C;
} // Block from 821A9998h-821A999Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A999Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A999C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A999C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A999C);
		  /* 821A999Ch */ case    0:  		/* addi R1, R1, 1088 */
		/* 821A999Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x440);
		/* 821A999Ch case    0:*/		return 0x821A99A0;
		  /* 821A99A0h */ case    1:  		/* b -1148676 */
		/* 821A99A0h case    1:*/		return 0x8209129C;
		/* 821A99A0h case    1:*/		return 0x821A99A4;
	}
	return 0x821A99A4;
} // Block from 821A999Ch-821A99A4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A99A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A99A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A99A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A99A4);
		  /* 821A99A4h */ case    0:  		/* lwz R10, <#[R1 + 380]> */
		/* 821A99A4h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000017C) );
		/* 821A99A4h case    0:*/		return 0x821A99A8;
		  /* 821A99A8h */ case    1:  		/* cmplwi CR6, R10, 1 */
		/* 821A99A8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821A99A8h case    1:*/		return 0x821A99AC;
		  /* 821A99ACh */ case    2:  		/* bc 4, CR6_GT, 28 */
		/* 821A99ACh case    2:*/		if ( !regs.CR[6].gt ) { return 0x821A99C8;  }
		/* 821A99ACh case    2:*/		return 0x821A99B0;
		  /* 821A99B0h */ case    3:  		/* add R10, R10, R11 */
		/* 821A99B0h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A99B0h case    3:*/		return 0x821A99B4;
		  /* 821A99B4h */ case    4:  		/* addi R10, R10, -1 */
		/* 821A99B4h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821A99B4h case    4:*/		return 0x821A99B8;
		  /* 821A99B8h */ case    5:  		/* cmplwi CR6, R10, 4 */
		/* 821A99B8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821A99B8h case    5:*/		return 0x821A99BC;
		  /* 821A99BCh */ case    6:  		/* bc 12, CR6_GT, 12 */
		/* 821A99BCh case    6:*/		if ( regs.CR[6].gt ) { return 0x821A99C8;  }
		/* 821A99BCh case    6:*/		return 0x821A99C0;
		  /* 821A99C0h */ case    7:  		/* addi R4, R1, 352 */
		/* 821A99C0h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x160);
		/* 821A99C0h case    7:*/		return 0x821A99C4;
		  /* 821A99C4h */ case    8:  		/* b -180 */
		/* 821A99C4h case    8:*/		return 0x821A9910;
		/* 821A99C4h case    8:*/		return 0x821A99C8;
	}
	return 0x821A99C8;
} // Block from 821A99A4h-821A99C8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A99C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A99C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A99C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A99C8);
		  /* 821A99C8h */ case    0:  		/* lwz R10, <#[R1 + 604]> */
		/* 821A99C8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000025C) );
		/* 821A99C8h case    0:*/		return 0x821A99CC;
		  /* 821A99CCh */ case    1:  		/* cmplwi CR6, R10, 1 */
		/* 821A99CCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821A99CCh case    1:*/		return 0x821A99D0;
		  /* 821A99D0h */ case    2:  		/* bc 4, CR6_GT, 28 */
		/* 821A99D0h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821A99EC;  }
		/* 821A99D0h case    2:*/		return 0x821A99D4;
		  /* 821A99D4h */ case    3:  		/* add R10, R10, R11 */
		/* 821A99D4h case    3:*/		cpu::op::add<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A99D4h case    3:*/		return 0x821A99D8;
	}
	return 0x821A99D8;
} // Block from 821A99C8h-821A99D8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A99D8h
// Function '?ReplaceMaxChainWithMax4@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@PAUAddChainInfo@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A99D8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A99D8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A99D8);
		  /* 821A99D8h */ case    0:  		/* addi R10, R10, -1 */
		/* 821A99D8h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821A99D8h case    0:*/		return 0x821A99DC;
		  /* 821A99DCh */ case    1:  		/* cmplwi CR6, R10, 4 */
		/* 821A99DCh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000004);
		/* 821A99DCh case    1:*/		return 0x821A99E0;
		  /* 821A99E0h */ case    2:  		/* bc 12, CR6_GT, 12 */
		/* 821A99E0h case    2:*/		if ( regs.CR[6].gt ) { return 0x821A99EC;  }
		/* 821A99E0h case    2:*/		return 0x821A99E4;
		  /* 821A99E4h */ case    3:  		/* addi R4, R1, 576 */
		/* 821A99E4h case    3:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x240);
		/* 821A99E4h case    3:*/		return 0x821A99E8;
		  /* 821A99E8h */ case    4:  		/* b -216 */
		/* 821A99E8h case    4:*/		return 0x821A9910;
		/* 821A99E8h case    4:*/		return 0x821A99EC;
	}
	return 0x821A99EC;
} // Block from 821A99D8h-821A99ECh (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A99ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A99EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A99EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A99EC);
		  /* 821A99ECh */ case    0:  		/* lwz R10, <#[R1 + 156]> */
		/* 821A99ECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R1 + 0x0000009C) );
		/* 821A99ECh case    0:*/		return 0x821A99F0;
		  /* 821A99F0h */ case    1:  		/* cmplwi CR6, R10, 1 */
		/* 821A99F0h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821A99F0h case    1:*/		return 0x821A99F4;
		  /* 821A99F4h */ case    2:  		/* bc 4, CR6_GT, -204 */
		/* 821A99F4h case    2:*/		if ( !regs.CR[6].gt ) { return 0x821A9928;  }
		/* 821A99F4h case    2:*/		return 0x821A99F8;
		  /* 821A99F8h */ case    3:  		/* add R11, R10, R11 */
		/* 821A99F8h case    3:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821A99F8h case    3:*/		return 0x821A99FC;
		  /* 821A99FCh */ case    4:  		/* addi R11, R11, -1 */
		/* 821A99FCh case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFFFFF);
		/* 821A99FCh case    4:*/		return 0x821A9A00;
		  /* 821A9A00h */ case    5:  		/* cmplwi CR6, R11, 4 */
		/* 821A9A00h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000004);
		/* 821A9A00h case    5:*/		return 0x821A9A04;
		  /* 821A9A04h */ case    6:  		/* bc 12, CR6_GT, -220 */
		/* 821A9A04h case    6:*/		if ( regs.CR[6].gt ) { return 0x821A9928;  }
		/* 821A9A04h case    6:*/		return 0x821A9A08;
		  /* 821A9A08h */ case    7:  		/* addi R4, R1, 128 */
		/* 821A9A08h case    7:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x80);
		/* 821A9A08h case    7:*/		return 0x821A9A0C;
		  /* 821A9A0Ch */ case    8:  		/* b -252 */
		/* 821A9A0Ch case    8:*/		return 0x821A9910;
		/* 821A9A0Ch case    8:*/		return 0x821A9A10;
	}
	return 0x821A9A10;
} // Block from 821A99ECh-821A9A10h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A9A10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9A10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9A10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9A10);
		  /* 821A9A10h */ case    0:  		/* mfspr R12, LR */
		/* 821A9A10h case    0:*/		regs.R12 = regs.LR;
		/* 821A9A10h case    0:*/		return 0x821A9A14;
		  /* 821A9A14h */ case    1:  		/* bl -1148916 */
		/* 821A9A14h case    1:*/		regs.LR = 0x821A9A18; return 0x82091220;
		/* 821A9A14h case    1:*/		return 0x821A9A18;
		  /* 821A9A18h */ case    2:  		/* addi R12, R1, -152 */
		/* 821A9A18h case    2:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 821A9A18h case    2:*/		return 0x821A9A1C;
		  /* 821A9A1Ch */ case    3:  		/* bl -1148420 */
		/* 821A9A1Ch case    3:*/		regs.LR = 0x821A9A20; return 0x82091418;
		/* 821A9A1Ch case    3:*/		return 0x821A9A20;
		  /* 821A9A20h */ case    4:  		/* stwu R1, <#[R1 - 1216]> */
		/* 821A9A20h case    4:*/		cpu::mem::store32( regs, regs.R1, (uint32)(regs.R1 + 0xFFFFFB40) );
		regs.R1 = (uint32)(regs.R1 + 0xFFFFFB40);
		/* 821A9A20h case    4:*/		return 0x821A9A24;
		  /* 821A9A24h */ case    5:  		/* lwz R8, <#[R4 + 8]> */
		/* 821A9A24h case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R4 + 0x00000008) );
		/* 821A9A24h case    5:*/		return 0x821A9A28;
		  /* 821A9A28h */ case    6:  		/* mr R20, R3 */
		/* 821A9A28h case    6:*/		regs.R20 = regs.R3;
		/* 821A9A28h case    6:*/		return 0x821A9A2C;
		  /* 821A9A2Ch */ case    7:  		/* stw R3, <#[R1 + 1236]> */
		/* 821A9A2Ch case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000004D4) );
		/* 821A9A2Ch case    7:*/		return 0x821A9A30;
		  /* 821A9A30h */ case    8:  		/* mr R25, R4 */
		/* 821A9A30h case    8:*/		regs.R25 = regs.R4;
		/* 821A9A30h case    8:*/		return 0x821A9A34;
		  /* 821A9A34h */ case    9:  		/* rlwinm R11, R8, 25, 25, 31 */
		/* 821A9A34h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R8);
		/* 821A9A34h case    9:*/		return 0x821A9A38;
		  /* 821A9A38h */ case   10:  		/* stw R4, <#[R1 + 1244]> */
		/* 821A9A38h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x000004DC) );
		/* 821A9A38h case   10:*/		return 0x821A9A3C;
		  /* 821A9A3Ch */ case   11:  		/* stw R5, <#[R1 + 1252]> */
		/* 821A9A3Ch case   11:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x000004E4) );
		/* 821A9A3Ch case   11:*/		return 0x821A9A40;
		  /* 821A9A40h */ case   12:  		/* cmpwi CR6, R11, 1 */
		/* 821A9A40h case   12:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000001);
		/* 821A9A40h case   12:*/		return 0x821A9A44;
		  /* 821A9A44h */ case   13:  		/* bc 12, CR6_EQ, 13852 */
		/* 821A9A44h case   13:*/		if ( regs.CR[6].eq ) { return 0x821AD060;  }
		/* 821A9A44h case   13:*/		return 0x821A9A48;
		  /* 821A9A48h */ case   14:  		/* cmpwi CR6, R11, 3 */
		/* 821A9A48h case   14:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000003);
		/* 821A9A48h case   14:*/		return 0x821A9A4C;
		  /* 821A9A4Ch */ case   15:  		/* bc 12, CR6_EQ, 11664 */
		/* 821A9A4Ch case   15:*/		if ( regs.CR[6].eq ) { return 0x821AC7DC;  }
		/* 821A9A4Ch case   15:*/		return 0x821A9A50;
		  /* 821A9A50h */ case   16:  		/* cmpwi CR6, R11, 13 */
		/* 821A9A50h case   16:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000000D);
		/* 821A9A50h case   16:*/		return 0x821A9A54;
		  /* 821A9A54h */ case   17:  		/* bc 12, CR6_EQ, 6980 */
		/* 821A9A54h case   17:*/		if ( regs.CR[6].eq ) { return 0x821AB598;  }
		/* 821A9A54h case   17:*/		return 0x821A9A58;
		  /* 821A9A58h */ case   18:  		/* li R30, 0 */
		/* 821A9A58h case   18:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A9A58h case   18:*/		return 0x821A9A5C;
		  /* 821A9A5Ch */ case   19:  		/* cmpwi CR6, R11, 17 */
		/* 821A9A5Ch case   19:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000011);
		/* 821A9A5Ch case   19:*/		return 0x821A9A60;
		  /* 821A9A60h */ case   20:  		/* bc 12, CR6_EQ, 5916 */
		/* 821A9A60h case   20:*/		if ( regs.CR[6].eq ) { return 0x821AB17C;  }
		/* 821A9A60h case   20:*/		return 0x821A9A64;
		  /* 821A9A64h */ case   21:  		/* cmpwi CR6, R11, 18 */
		/* 821A9A64h case   21:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x00000012);
		/* 821A9A64h case   21:*/		return 0x821A9A68;
		  /* 821A9A68h */ case   22:  		/* bc 12, CR6_EQ, 4772 */
		/* 821A9A68h case   22:*/		if ( regs.CR[6].eq ) { return 0x821AAD0C;  }
		/* 821A9A68h case   22:*/		return 0x821A9A6C;
		  /* 821A9A6Ch */ case   23:  		/* cmpwi CR6, R11, 110 */
		/* 821A9A6Ch case   23:*/		cpu::op::cmpwi<6>(regs,regs.R11,0x0000006E);
		/* 821A9A6Ch case   23:*/		return 0x821A9A70;
		  /* 821A9A70h */ case   24:  		/* bc 4, CR6_EQ, 3956 */
		/* 821A9A70h case   24:*/		if ( !regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821A9A70h case   24:*/		return 0x821A9A74;
		  /* 821A9A74h */ case   25:  		/* bl -32788 */
		/* 821A9A74h case   25:*/		regs.LR = 0x821A9A78; return 0x821A1A60;
		/* 821A9A74h case   25:*/		return 0x821A9A78;
		  /* 821A9A78h */ case   26:  		/* cmplwi CR0, R3, 0 */
		/* 821A9A78h case   26:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821A9A78h case   26:*/		return 0x821A9A7C;
		  /* 821A9A7Ch */ case   27:  		/* bc 4, CR0_EQ, 3948 */
		/* 821A9A7Ch case   27:*/		if ( !regs.CR[0].eq ) { return 0x821AA9E8;  }
		/* 821A9A7Ch case   27:*/		return 0x821A9A80;
		  /* 821A9A80h */ case   28:  		/* addi R6, R1, 272 */
		/* 821A9A80h case   28:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x110);
		/* 821A9A80h case   28:*/		return 0x821A9A84;
		  /* 821A9A84h */ case   29:  		/* addi R5, R1, 208 */
		/* 821A9A84h case   29:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 821A9A84h case   29:*/		return 0x821A9A88;
		  /* 821A9A88h */ case   30:  		/* addi R4, R1, 336 */
		/* 821A9A88h case   30:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0x150);
		/* 821A9A88h case   30:*/		return 0x821A9A8C;
		  /* 821A9A8Ch */ case   31:  		/* mr R3, R25 */
		/* 821A9A8Ch case   31:*/		regs.R3 = regs.R25;
		/* 821A9A8Ch case   31:*/		return 0x821A9A90;
		  /* 821A9A90h */ case   32:  		/* bl -58048 */
		/* 821A9A90h case   32:*/		regs.LR = 0x821A9A94; return 0x8219B7D0;
		/* 821A9A90h case   32:*/		return 0x821A9A94;
		  /* 821A9A94h */ case   33:  		/* lwz R11, <#[R25 + 8]> */
		/* 821A9A94h case   33:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821A9A94h case   33:*/		return 0x821A9A98;
		  /* 821A9A98h */ case   34:  		/* li R20, 0 */
		/* 821A9A98h case   34:*/		cpu::op::li<0>(regs,&regs.R20,0x0);
		/* 821A9A98h case   34:*/		return 0x821A9A9C;
		  /* 821A9A9Ch */ case   35:  		/* li R21, 0 */
		/* 821A9A9Ch case   35:*/		cpu::op::li<0>(regs,&regs.R21,0x0);
		/* 821A9A9Ch case   35:*/		return 0x821A9AA0;
		  /* 821A9AA0h */ case   36:  		/* li R26, 0 */
		/* 821A9AA0h case   36:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821A9AA0h case   36:*/		return 0x821A9AA4;
		  /* 821A9AA4h */ case   37:  		/* li R19, 0 */
		/* 821A9AA4h case   37:*/		cpu::op::li<0>(regs,&regs.R19,0x0);
		/* 821A9AA4h case   37:*/		return 0x821A9AA8;
		  /* 821A9AA8h */ case   38:  		/* li R31, 0 */
		/* 821A9AA8h case   38:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821A9AA8h case   38:*/		return 0x821A9AAC;
		  /* 821A9AACh */ case   39:  		/* li R27, 0 */
		/* 821A9AACh case   39:*/		cpu::op::li<0>(regs,&regs.R27,0x0);
		/* 821A9AACh case   39:*/		return 0x821A9AB0;
		  /* 821A9AB0h */ case   40:  		/* li R18, 0 */
		/* 821A9AB0h case   40:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821A9AB0h case   40:*/		return 0x821A9AB4;
		  /* 821A9AB4h */ case   41:  		/* li R17, 0 */
		/* 821A9AB4h case   41:*/		cpu::op::li<0>(regs,&regs.R17,0x0);
		/* 821A9AB4h case   41:*/		return 0x821A9AB8;
		  /* 821A9AB8h */ case   42:  		/* li R15, 0 */
		/* 821A9AB8h case   42:*/		cpu::op::li<0>(regs,&regs.R15,0x0);
		/* 821A9AB8h case   42:*/		return 0x821A9ABC;
		  /* 821A9ABCh */ case   43:  		/* rlwinm. R14, R11, 13, 29, 31 */
		/* 821A9ABCh case   43:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R14,regs.R11);
		/* 821A9ABCh case   43:*/		return 0x821A9AC0;
		  /* 821A9AC0h */ case   44:  		/* bc 12, CR0_EQ, 3272 */
		/* 821A9AC0h case   44:*/		if ( regs.CR[0].eq ) { return 0x821AA788;  }
		/* 821A9AC0h case   44:*/		return 0x821A9AC4;
		  /* 821A9AC4h */ case   45:  		/* rlwinm R11, R25, 0, 0, 31 */
		/* 821A9AC4h case   45:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R11,regs.R25);
		/* 821A9AC4h case   45:*/		return 0x821A9AC8;
		  /* 821A9AC8h */ case   46:  		/* li R28, 0 */
		/* 821A9AC8h case   46:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A9AC8h case   46:*/		return 0x821A9ACC;
		  /* 821A9ACCh */ case   47:  		/* addi R16, R11, 44 */
		/* 821A9ACCh case   47:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R11,0x2C);
		/* 821A9ACCh case   47:*/		return 0x821A9AD0;
		  /* 821A9AD0h */ case   48:  		/* li R25, 1 */
		/* 821A9AD0h case   48:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821A9AD0h case   48:*/		return 0x821A9AD4;
		  /* 821A9AD4h */ case   49:  		/* mr R10, R25 */
		/* 821A9AD4h case   49:*/		regs.R10 = regs.R25;
		/* 821A9AD4h case   49:*/		return 0x821A9AD8;
		  /* 821A9AD8h */ case   50:  		/* cmplwi CR6, R30, 0 */
		/* 821A9AD8h case   50:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A9AD8h case   50:*/		return 0x821A9ADC;
		  /* 821A9ADCh */ case   51:  		/* bc 12, CR6_EQ, 76 */
		/* 821A9ADCh case   51:*/		if ( regs.CR[6].eq ) { return 0x821A9B28;  }
		/* 821A9ADCh case   51:*/		return 0x821A9AE0;
		  /* 821A9AE0h */ case   52:  		/* li R11, 0 */
		/* 821A9AE0h case   52:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A9AE0h case   52:*/		return 0x821A9AE4;
		  /* 821A9AE4h */ case   53:  		/* mtspr CTR, R30 */
		/* 821A9AE4h case   53:*/		regs.CTR = regs.R30;
		/* 821A9AE4h case   53:*/		return 0x821A9AE8;
		  /* 821A9AE8h */ case   54:  		/* addi R9, R1, 336 */
		/* 821A9AE8h case   54:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x150);
		/* 821A9AE8h case   54:*/		return 0x821A9AEC;
		  /* 821A9AECh */ case   55:  		/* addi R8, R1, 336 */
		/* 821A9AECh case   55:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x150);
		/* 821A9AECh case   55:*/		return 0x821A9AF0;
		  /* 821A9AF0h */ case   56:  		/* lwzx R9, <#[R28 + R9]> */
		/* 821A9AF0h case   56:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + regs.R9 + 0x00000000) );
		/* 821A9AF0h case   56:*/		return 0x821A9AF4;
		  /* 821A9AF4h */ case   57:  		/* lwzx R8, <#[R11 + R8]> */
		/* 821A9AF4h case   57:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821A9AF4h case   57:*/		return 0x821A9AF8;
		  /* 821A9AF8h */ case   58:  		/* cmplw CR6, R8, R9 */
		/* 821A9AF8h case   58:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R9);
		/* 821A9AF8h case   58:*/		return 0x821A9AFC;
		  /* 821A9AFCh */ case   59:  		/* bc 4, CR6_EQ, 36 */
		/* 821A9AFCh case   59:*/		if ( !regs.CR[6].eq ) { return 0x821A9B20;  }
		/* 821A9AFCh case   59:*/		return 0x821A9B00;
		  /* 821A9B00h */ case   60:  		/* addi R9, R1, 272 */
		/* 821A9B00h case   60:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x110);
		/* 821A9B00h case   60:*/		return 0x821A9B04;
		  /* 821A9B04h */ case   61:  		/* addi R8, R1, 272 */
		/* 821A9B04h case   61:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x110);
		/* 821A9B04h case   61:*/		return 0x821A9B08;
		  /* 821A9B08h */ case   62:  		/* lwzx R9, <#[R28 + R9]> */
		/* 821A9B08h case   62:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R28 + regs.R9 + 0x00000000) );
		/* 821A9B08h case   62:*/		return 0x821A9B0C;
		  /* 821A9B0Ch */ case   63:  		/* lwzx R8, <#[R11 + R8]> */
		/* 821A9B0Ch case   63:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821A9B0Ch case   63:*/		return 0x821A9B10;
		  /* 821A9B10h */ case   64:  		/* subf R9, R8, R9 */
		/* 821A9B10h case   64:*/		cpu::op::subf<0>(regs,&regs.R9,regs.R8,regs.R9);
		/* 821A9B10h case   64:*/		return 0x821A9B14;
		  /* 821A9B14h */ case   65:  		/* subfic R9, R9, 0 */
		/* 821A9B14h case   65:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x0);
		/* 821A9B14h case   65:*/		return 0x821A9B18;
		  /* 821A9B18h */ case   66:  		/* subfe R9, R9, R9 */
		/* 821A9B18h case   66:*/		cpu::op::subfe<0>(regs,&regs.R9,regs.R9,regs.R9);
		/* 821A9B18h case   66:*/		return 0x821A9B1C;
		  /* 821A9B1Ch */ case   67:  		/* and R10, R9, R10 */
		/* 821A9B1Ch case   67:*/		cpu::op::and<0>(regs,&regs.R10,regs.R9,regs.R10);
		/* 821A9B1Ch case   67:*/		return 0x821A9B20;
	}
	return 0x821A9B20;
} // Block from 821A9A10h-821A9B20h (68 instructions)

//////////////////////////////////////////////////////
// Block at 821A9B20h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9B20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9B20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9B20);
		  /* 821A9B20h */ case    0:  		/* addi R11, R11, 4 */
		/* 821A9B20h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821A9B20h case    0:*/		return 0x821A9B24;
		  /* 821A9B24h */ case    1:  		/* bc 16, CR0_LT, -60 */
		/* 821A9B24h case    1:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A9AE8;  }
		/* 821A9B24h case    1:*/		return 0x821A9B28;
	}
	return 0x821A9B28;
} // Block from 821A9B20h-821A9B28h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821A9B28h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9B28( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9B28) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9B28);
		  /* 821A9B28h */ case    0:  		/* rlwinm. R11, R10, 0, 24, 31 */
		/* 821A9B28h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R10);
		/* 821A9B28h case    0:*/		return 0x821A9B2C;
		  /* 821A9B2Ch */ case    1:  		/* bc 12, CR0_EQ, 48 */
		/* 821A9B2Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821A9B5C;  }
		/* 821A9B2Ch case    1:*/		return 0x821A9B30;
		  /* 821A9B30h */ case    2:  		/* addi R11, R1, 336 */
		/* 821A9B30h case    2:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x150);
		/* 821A9B30h case    2:*/		return 0x821A9B34;
		  /* 821A9B34h */ case    3:  		/* slw R10, R25, R30 */
		/* 821A9B34h case    3:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R25,regs.R30);
		/* 821A9B34h case    3:*/		return 0x821A9B38;
		  /* 821A9B38h */ case    4:  		/* lwzx R11, <#[R28 + R11]> */
		/* 821A9B38h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 821A9B38h case    4:*/		return 0x821A9B3C;
		  /* 821A9B3Ch */ case    5:  		/* or R19, R10, R19 */
		/* 821A9B3Ch case    5:*/		cpu::op::or<0>(regs,&regs.R19,regs.R10,regs.R19);
		/* 821A9B3Ch case    5:*/		return 0x821A9B40;
		  /* 821A9B40h */ case    6:  		/* lwz R11, <#[R11 + 8]> */
		/* 821A9B40h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821A9B40h case    6:*/		return 0x821A9B44;
		  /* 821A9B44h */ case    7:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821A9B44h case    7:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821A9B44h case    7:*/		return 0x821A9B48;
		  /* 821A9B48h */ case    8:  		/* cmplwi CR6, R11, 125 */
		/* 821A9B48h case    8:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007D);
		/* 821A9B48h case    8:*/		return 0x821A9B4C;
		  /* 821A9B4Ch */ case    9:  		/* bc 12, CR6_EQ, 16 */
		/* 821A9B4Ch case    9:*/		if ( regs.CR[6].eq ) { return 0x821A9B5C;  }
		/* 821A9B4Ch case    9:*/		return 0x821A9B50;
		  /* 821A9B50h */ case   10:  		/* cmplwi CR6, R11, 124 */
		/* 821A9B50h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x0000007C);
		/* 821A9B50h case   10:*/		return 0x821A9B54;
		  /* 821A9B54h */ case   11:  		/* bc 4, CR6_EQ, 8 */
		/* 821A9B54h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821A9B5C;  }
		/* 821A9B54h case   11:*/		return 0x821A9B58;
		  /* 821A9B58h */ case   12:  		/* addi R26, R26, 1 */
		/* 821A9B58h case   12:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821A9B58h case   12:*/		return 0x821A9B5C;
	}
	return 0x821A9B5C;
} // Block from 821A9B28h-821A9B5Ch (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A9B5Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9B5C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9B5C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9B5C);
		  /* 821A9B5Ch */ case    0:  		/* addi R11, R1, 336 */
		/* 821A9B5Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x150);
		/* 821A9B5Ch case    0:*/		return 0x821A9B60;
		  /* 821A9B60h */ case    1:  		/* lwzx R3, <#[R28 + R11]> */
		/* 821A9B60h case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R28 + regs.R11 + 0x00000000) );
		/* 821A9B60h case    1:*/		return 0x821A9B64;
		  /* 821A9B64h */ case    2:  		/* lwz R11, <#[R3 + 8]> */
		/* 821A9B64h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821A9B64h case    2:*/		return 0x821A9B68;
		  /* 821A9B68h */ case    3:  		/* rlwinm R29, R11, 25, 25, 31 */
		/* 821A9B68h case    3:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R29,regs.R11);
		/* 821A9B68h case    3:*/		return 0x821A9B6C;
		  /* 821A9B6Ch */ case    4:  		/* cmplwi CR6, R29, 125 */
		/* 821A9B6Ch case    4:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000007D);
		/* 821A9B6Ch case    4:*/		return 0x821A9B70;
		  /* 821A9B70h */ case    5:  		/* bc 4, CR6_EQ, 20 */
		/* 821A9B70h case    5:*/		if ( !regs.CR[6].eq ) { return 0x821A9B84;  }
		/* 821A9B70h case    5:*/		return 0x821A9B74;
		  /* 821A9B74h */ case    6:  		/* slw R11, R25, R30 */
		/* 821A9B74h case    6:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R25,regs.R30);
		/* 821A9B74h case    6:*/		return 0x821A9B78;
		  /* 821A9B78h */ case    7:  		/* addi R20, R20, 1 */
		/* 821A9B78h case    7:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x1);
		/* 821A9B78h case    7:*/		return 0x821A9B7C;
		  /* 821A9B7Ch */ case    8:  		/* or R31, R11, R31 */
		/* 821A9B7Ch case    8:*/		cpu::op::or<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821A9B7Ch case    8:*/		return 0x821A9B80;
		  /* 821A9B80h */ case    9:  		/* b 92 */
		/* 821A9B80h case    9:*/		return 0x821A9BDC;
		/* 821A9B80h case    9:*/		return 0x821A9B84;
	}
	return 0x821A9B84;
} // Block from 821A9B5Ch-821A9B84h (10 instructions)

//////////////////////////////////////////////////////
// Block at 821A9B84h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9B84( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9B84) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9B84);
		  /* 821A9B84h */ case    0:  		/* cmplwi CR6, R29, 124 */
		/* 821A9B84h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x0000007C);
		/* 821A9B84h case    0:*/		return 0x821A9B88;
		  /* 821A9B88h */ case    1:  		/* bc 4, CR6_EQ, 20 */
		/* 821A9B88h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A9B9C;  }
		/* 821A9B88h case    1:*/		return 0x821A9B8C;
		  /* 821A9B8Ch */ case    2:  		/* slw R11, R25, R30 */
		/* 821A9B8Ch case    2:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R25,regs.R30);
		/* 821A9B8Ch case    2:*/		return 0x821A9B90;
		  /* 821A9B90h */ case    3:  		/* addi R21, R21, 1 */
		/* 821A9B90h case    3:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R21,0x1);
		/* 821A9B90h case    3:*/		return 0x821A9B94;
		  /* 821A9B94h */ case    4:  		/* or R27, R11, R27 */
		/* 821A9B94h case    4:*/		cpu::op::or<0>(regs,&regs.R27,regs.R11,regs.R27);
		/* 821A9B94h case    4:*/		return 0x821A9B98;
		  /* 821A9B98h */ case    5:  		/* b 68 */
		/* 821A9B98h case    5:*/		return 0x821A9BDC;
		/* 821A9B98h case    5:*/		return 0x821A9B9C;
	}
	return 0x821A9B9C;
} // Block from 821A9B84h-821A9B9Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A9B9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9B9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9B9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9B9C);
		  /* 821A9B9Ch */ case    0:  		/* lwzx R11, <#[R28 + R16]> */
		/* 821A9B9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + regs.R16 + 0x00000000) );
		/* 821A9B9Ch case    0:*/		return 0x821A9BA0;
		  /* 821A9BA0h */ case    1:  		/* lwz R11, <#[R11 + 12]> */
		/* 821A9BA0h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x0000000C) );
		/* 821A9BA0h case    1:*/		return 0x821A9BA4;
		  /* 821A9BA4h */ case    2:  		/* cmplw CR6, R3, R11 */
		/* 821A9BA4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R3,regs.R11);
		/* 821A9BA4h case    2:*/		return 0x821A9BA8;
		  /* 821A9BA8h */ case    3:  		/* bc 12, CR6_EQ, 12 */
		/* 821A9BA8h case    3:*/		if ( regs.CR[6].eq ) { return 0x821A9BB4;  }
		/* 821A9BA8h case    3:*/		return 0x821A9BAC;
		  /* 821A9BACh */ case    4:  		/* addi R18, R18, 1 */
		/* 821A9BACh case    4:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 821A9BACh case    4:*/		return 0x821A9BB0;
		  /* 821A9BB0h */ case    5:  		/* b 44 */
		/* 821A9BB0h case    5:*/		return 0x821A9BDC;
		/* 821A9BB0h case    5:*/		return 0x821A9BB4;
	}
	return 0x821A9BB4;
} // Block from 821A9B9Ch-821A9BB4h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A9BB4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9BB4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9BB4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9BB4);
		  /* 821A9BB4h */ case    0:  		/* bl -57028 */
		/* 821A9BB4h case    0:*/		regs.LR = 0x821A9BB8; return 0x8219BCF0;
		/* 821A9BB4h case    0:*/		return 0x821A9BB8;
		  /* 821A9BB8h */ case    1:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821A9BB8h case    1:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821A9BB8h case    1:*/		return 0x821A9BBC;
		  /* 821A9BBCh */ case    2:  		/* bc 12, CR0_EQ, 32 */
		/* 821A9BBCh case    2:*/		if ( regs.CR[0].eq ) { return 0x821A9BDC;  }
		/* 821A9BBCh case    2:*/		return 0x821A9BC0;
		  /* 821A9BC0h */ case    3:  		/* cmplwi CR6, R29, 2 */
		/* 821A9BC0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000002);
		/* 821A9BC0h case    3:*/		return 0x821A9BC4;
		  /* 821A9BC4h */ case    4:  		/* bc 4, CR6_EQ, 12 */
		/* 821A9BC4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821A9BD0;  }
		/* 821A9BC4h case    4:*/		return 0x821A9BC8;
		  /* 821A9BC8h */ case    5:  		/* addi R17, R17, 1 */
		/* 821A9BC8h case    5:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R17,0x1);
		/* 821A9BC8h case    5:*/		return 0x821A9BCC;
		  /* 821A9BCCh */ case    6:  		/* b 16 */
		/* 821A9BCCh case    6:*/		return 0x821A9BDC;
		/* 821A9BCCh case    6:*/		return 0x821A9BD0;
	}
	return 0x821A9BD0;
} // Block from 821A9BB4h-821A9BD0h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A9BD0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9BD0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9BD0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9BD0);
		  /* 821A9BD0h */ case    0:  		/* cmplwi CR6, R29, 1 */
		/* 821A9BD0h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R29,0x00000001);
		/* 821A9BD0h case    0:*/		return 0x821A9BD4;
		  /* 821A9BD4h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821A9BD4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A9BDC;  }
		/* 821A9BD4h case    1:*/		return 0x821A9BD8;
		  /* 821A9BD8h */ case    2:  		/* addi R15, R15, 1 */
		/* 821A9BD8h case    2:*/		cpu::op::addi<0>(regs,&regs.R15,regs.R15,0x1);
		/* 821A9BD8h case    2:*/		return 0x821A9BDC;
	}
	return 0x821A9BDC;
} // Block from 821A9BD0h-821A9BDCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A9BDCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9BDC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9BDC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9BDC);
		  /* 821A9BDCh */ case    0:  		/* addi R30, R30, 1 */
		/* 821A9BDCh case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A9BDCh case    0:*/		return 0x821A9BE0;
		  /* 821A9BE0h */ case    1:  		/* addi R28, R28, 4 */
		/* 821A9BE0h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821A9BE0h case    1:*/		return 0x821A9BE4;
		  /* 821A9BE4h */ case    2:  		/* cmplw CR6, R30, R14 */
		/* 821A9BE4h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R14);
		/* 821A9BE4h case    2:*/		return 0x821A9BE8;
		  /* 821A9BE8h */ case    3:  		/* bc 12, CR6_LT, -276 */
		/* 821A9BE8h case    3:*/		if ( regs.CR[6].lt ) { return 0x821A9AD4;  }
		/* 821A9BE8h case    3:*/		return 0x821A9BEC;
		  /* 821A9BECh */ case    4:  		/* lis R11, -32256 */
		/* 821A9BECh case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821A9BECh case    4:*/		return 0x821A9BF0;
		  /* 821A9BF0h */ case    5:  		/* cmplwi CR6, R26, 1 */
		/* 821A9BF0h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000001);
		/* 821A9BF0h case    5:*/		return 0x821A9BF4;
		  /* 821A9BF4h */ case    6:  		/* lfs FR31, <#[R11 + 1816]> */
		/* 821A9BF4h case    6:*/		cpu::mem::load32f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000718) );
		/* 821A9BF4h case    6:*/		return 0x821A9BF8;
		  /* 821A9BF8h */ case    7:  		/* bc 4, CR6_EQ, 972 */
		/* 821A9BF8h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821A9FC4;  }
		/* 821A9BF8h case    7:*/		return 0x821A9BFC;
		  /* 821A9BFCh */ case    8:  		/* cmplwi CR6, R20, 0 */
		/* 821A9BFCh case    8:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821A9BFCh case    8:*/		return 0x821A9C00;
		  /* 821A9C00h */ case    9:  		/* bc 12, CR6_EQ, 964 */
		/* 821A9C00h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A9FC4;  }
		/* 821A9C00h case    9:*/		return 0x821A9C04;
		  /* 821A9C04h */ case   10:  		/* add R11, R21, R20 */
		/* 821A9C04h case   10:*/		cpu::op::add<0>(regs,&regs.R11,regs.R21,regs.R20);
		/* 821A9C04h case   10:*/		return 0x821A9C08;
		  /* 821A9C08h */ case   11:  		/* cmplw CR6, R11, R14 */
		/* 821A9C08h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R14);
		/* 821A9C08h case   11:*/		return 0x821A9C0C;
		  /* 821A9C0Ch */ case   12:  		/* bc 4, CR6_EQ, 952 */
		/* 821A9C0Ch case   12:*/		if ( !regs.CR[6].eq ) { return 0x821A9FC4;  }
		/* 821A9C0Ch case   12:*/		return 0x821A9C10;
		  /* 821A9C10h */ case   13:  		/* addi R11, R27, -1 */
		/* 821A9C10h case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R27,0xFFFFFFFF);
		/* 821A9C10h case   13:*/		return 0x821A9C14;
		  /* 821A9C14h */ case   14:  		/* addi R10, R1, 272 */
		/* 821A9C14h case   14:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x110);
		/* 821A9C14h case   14:*/		return 0x821A9C18;
		  /* 821A9C18h */ case   15:  		/* andc R11, R27, R11 */
		/* 821A9C18h case   15:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R27,regs.R11);
		/* 821A9C18h case   15:*/		return 0x821A9C1C;
		  /* 821A9C1Ch */ case   16:  		/* cntlzw R11, R11 */
		/* 821A9C1Ch case   16:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A9C1Ch case   16:*/		return 0x821A9C20;
	}
	return 0x821A9C20;
} // Block from 821A9BDCh-821A9C20h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821A9C20h
// Function '?CanonicalizeDotProductAddWorker@Compiler@D3DXShader@@AAAPAVInstruction@2@PAUAddChainInfo@2@PAV32@W4Component@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9C20( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9C20) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9C20);
		  /* 821A9C20h */ case    0:  		/* subfic R11, R11, 31 */
		/* 821A9C20h case    0:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821A9C20h case    0:*/		return 0x821A9C24;
		  /* 821A9C24h */ case    1:  		/* rlwinm R24, R11, 2, 0, 29 */
		/* 821A9C24h case    1:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R24,regs.R11);
		/* 821A9C24h case    1:*/		return 0x821A9C28;
		  /* 821A9C28h */ case    2:  		/* lwzx R7, <#[R24 + R10]> */
		/* 821A9C28h case    2:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R24 + regs.R10 + 0x00000000) );
		/* 821A9C28h case    2:*/		return 0x821A9C2C;
		  /* 821A9C2Ch */ case    3:  		/* rlwinm. R11, R7, 0, 31, 31 */
		/* 821A9C2Ch case    3:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R7);
		/* 821A9C2Ch case    3:*/		return 0x821A9C30;
		  /* 821A9C30h */ case    4:  		/* bc 4, CR0_EQ, 916 */
		/* 821A9C30h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821A9FC4;  }
		/* 821A9C30h case    4:*/		return 0x821A9C34;
		  /* 821A9C34h */ case    5:  		/* li R6, 0 */
		/* 821A9C34h case    5:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A9C34h case    5:*/		return 0x821A9C38;
		  /* 821A9C38h */ case    6:  		/* li R30, 0 */
		/* 821A9C38h case    6:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821A9C38h case    6:*/		return 0x821A9C3C;
		  /* 821A9C3Ch */ case    7:  		/* li R22, 0 */
		/* 821A9C3Ch case    7:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821A9C3Ch case    7:*/		return 0x821A9C40;
		  /* 821A9C40h */ case    8:  		/* mr R11, R27 */
		/* 821A9C40h case    8:*/		regs.R11 = regs.R27;
		/* 821A9C40h case    8:*/		return 0x821A9C44;
		  /* 821A9C44h */ case    9:  		/* li R10, 0 */
		/* 821A9C44h case    9:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A9C44h case    9:*/		return 0x821A9C48;
		  /* 821A9C48h */ case   10:  		/* li R8, 3 */
		/* 821A9C48h case   10:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 821A9C48h case   10:*/		return 0x821A9C4C;
		  /* 821A9C4Ch */ case   11:  		/* cmplwi CR6, R11, 0 */
		/* 821A9C4Ch case   11:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821A9C4Ch case   11:*/		return 0x821A9C50;
		  /* 821A9C50h */ case   12:  		/* bc 12, CR6_EQ, 92 */
		/* 821A9C50h case   12:*/		if ( regs.CR[6].eq ) { return 0x821A9CAC;  }
		/* 821A9C50h case   12:*/		return 0x821A9C54;
		  /* 821A9C54h */ case   13:  		/* addi R9, R11, -1 */
		/* 821A9C54h case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R11,0xFFFFFFFF);
		/* 821A9C54h case   13:*/		return 0x821A9C58;
		  /* 821A9C58h */ case   14:  		/* slw R4, R8, R10 */
		/* 821A9C58h case   14:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R8,regs.R10);
		/* 821A9C58h case   14:*/		return 0x821A9C5C;
		  /* 821A9C5Ch */ case   15:  		/* andc R9, R11, R9 */
		/* 821A9C5Ch case   15:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R11,regs.R9);
		/* 821A9C5Ch case   15:*/		return 0x821A9C60;
		  /* 821A9C60h */ case   16:  		/* andc R6, R6, R4 */
		/* 821A9C60h case   16:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R6,regs.R4);
		/* 821A9C60h case   16:*/		return 0x821A9C64;
		  /* 821A9C64h */ case   17:  		/* cntlzw R9, R9 */
		/* 821A9C64h case   17:*/		cpu::op::cntlzw<0>(regs,&regs.R9,regs.R9);
		/* 821A9C64h case   17:*/		return 0x821A9C68;
		  /* 821A9C68h */ case   18:  		/* addi R5, R1, 208 */
		/* 821A9C68h case   18:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0xD0);
		/* 821A9C68h case   18:*/		return 0x821A9C6C;
		  /* 821A9C6Ch */ case   19:  		/* subfic R9, R9, 31 */
		/* 821A9C6Ch case   19:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R9,0x1F);
		/* 821A9C6Ch case   19:*/		return 0x821A9C70;
		  /* 821A9C70h */ case   20:  		/* addi R3, R11, -1 */
		/* 821A9C70h case   20:*/		cpu::op::addi<0>(regs,&regs.R3,regs.R11,0xFFFFFFFF);
		/* 821A9C70h case   20:*/		return 0x821A9C74;
		  /* 821A9C74h */ case   21:  		/* rlwinm R4, R9, 2, 0, 29 */
		/* 821A9C74h case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R4,regs.R9);
		/* 821A9C74h case   21:*/		return 0x821A9C78;
		  /* 821A9C78h */ case   22:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 821A9C78h case   22:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 821A9C78h case   22:*/		return 0x821A9C7C;
		  /* 821A9C7Ch */ case   23:  		/* andc R3, R11, R3 */
		/* 821A9C7Ch case   23:*/		cpu::op::andc<0>(regs,&regs.R3,regs.R11,regs.R3);
		/* 821A9C7Ch case   23:*/		return 0x821A9C80;
		  /* 821A9C80h */ case   24:  		/* slw R29, R8, R9 */
		/* 821A9C80h case   24:*/		cpu::op::slw<0>(regs,&regs.R29,regs.R8,regs.R9);
		/* 821A9C80h case   24:*/		return 0x821A9C84;
		  /* 821A9C84h */ case   25:  		/* lwzx R5, <#[R4 + R5]> */
		/* 821A9C84h case   25:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R4 + regs.R5 + 0x00000000) );
		/* 821A9C84h case   25:*/		return 0x821A9C88;
		  /* 821A9C88h */ case   26:  		/* slw R9, R30, R9 */
		/* 821A9C88h case   26:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R30,regs.R9);
		/* 821A9C88h case   26:*/		return 0x821A9C8C;
		  /* 821A9C8Ch */ case   27:  		/* slw R5, R5, R10 */
		/* 821A9C8Ch case   27:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R5,regs.R10);
		/* 821A9C8Ch case   27:*/		return 0x821A9C90;
		  /* 821A9C90h */ case   28:  		/* andc R4, R22, R29 */
		/* 821A9C90h case   28:*/		cpu::op::andc<0>(regs,&regs.R4,regs.R22,regs.R29);
		/* 821A9C90h case   28:*/		return 0x821A9C94;
		  /* 821A9C94h */ case   29:  		/* or R6, R5, R6 */
		/* 821A9C94h case   29:*/		cpu::op::or<0>(regs,&regs.R6,regs.R5,regs.R6);
		/* 821A9C94h case   29:*/		return 0x821A9C98;
		  /* 821A9C98h */ case   30:  		/* or R22, R4, R9 */
		/* 821A9C98h case   30:*/		cpu::op::or<0>(regs,&regs.R22,regs.R4,regs.R9);
		/* 821A9C98h case   30:*/		return 0x821A9C9C;
		  /* 821A9C9Ch */ case   31:  		/* addi R30, R30, 1 */
		/* 821A9C9Ch case   31:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821A9C9Ch case   31:*/		return 0x821A9CA0;
		  /* 821A9CA0h */ case   32:  		/* addi R10, R10, 2 */
		/* 821A9CA0h case   32:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x2);
		/* 821A9CA0h case   32:*/		return 0x821A9CA4;
		  /* 821A9CA4h */ case   33:  		/* subf R11, R3, R11 */
		/* 821A9CA4h case   33:*/		cpu::op::subf<0>(regs,&regs.R11,regs.R3,regs.R11);
		/* 821A9CA4h case   33:*/		return 0x821A9CA8;
		  /* 821A9CA8h */ case   34:  		/* b -92 */
		/* 821A9CA8h case   34:*/		return 0x821A9C4C;
		/* 821A9CA8h case   34:*/		return 0x821A9CAC;
	}
	return 0x821A9CAC;
} // Block from 821A9C20h-821A9CACh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821A9CACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9CAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9CAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9CAC);
		  /* 821A9CACh */ case    0:  		/* cmplwi CR6, R30, 4 */
		/* 821A9CACh case    0:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 821A9CACh case    0:*/		return 0x821A9CB0;
		  /* 821A9CB0h */ case    1:  		/* bc 4, CR6_LT, 56 */
		/* 821A9CB0h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821A9CE8;  }
		/* 821A9CB0h case    1:*/		return 0x821A9CB4;
		  /* 821A9CB4h */ case    2:  		/* subfic R10, R30, 4 */
		/* 821A9CB4h case    2:*/		cpu::op::subfic<0>(regs,&regs.R10,regs.R30,0x4);
		/* 821A9CB4h case    2:*/		return 0x821A9CB8;
		  /* 821A9CB8h */ case    3:  		/* addi R9, R30, -1 */
		/* 821A9CB8h case    3:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R30,0xFFFFFFFF);
		/* 821A9CB8h case    3:*/		return 0x821A9CBC;
		  /* 821A9CBCh */ case    4:  		/* rlwinm R11, R30, 1, 0, 30 */
		/* 821A9CBCh case    4:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R30);
		/* 821A9CBCh case    4:*/		return 0x821A9CC0;
		  /* 821A9CC0h */ case    5:  		/* rlwinm R9, R9, 1, 0, 30 */
		/* 821A9CC0h case    5:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R9,regs.R9);
		/* 821A9CC0h case    5:*/		return 0x821A9CC4;
		  /* 821A9CC4h */ case    6:  		/* mtspr CTR, R10 */
		/* 821A9CC4h case    6:*/		regs.CTR = regs.R10;
		/* 821A9CC4h case    6:*/		return 0x821A9CC8;
		  /* 821A9CC8h */ case    7:  		/* srw R10, R6, R9 */
		/* 821A9CC8h case    7:*/		cpu::op::srw<0>(regs,&regs.R10,regs.R6,regs.R9);
		/* 821A9CC8h case    7:*/		return 0x821A9CCC;
		  /* 821A9CCCh */ case    8:  		/* slw R5, R8, R11 */
		/* 821A9CCCh case    8:*/		cpu::op::slw<0>(regs,&regs.R5,regs.R8,regs.R11);
		/* 821A9CCCh case    8:*/		return 0x821A9CD0;
		  /* 821A9CD0h */ case    9:  		/* rlwinm R10, R10, 0, 30, 31 */
		/* 821A9CD0h case    9:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R10,regs.R10);
		/* 821A9CD0h case    9:*/		return 0x821A9CD4;
		  /* 821A9CD4h */ case   10:  		/* andc R6, R6, R5 */
		/* 821A9CD4h case   10:*/		cpu::op::andc<0>(regs,&regs.R6,regs.R6,regs.R5);
		/* 821A9CD4h case   10:*/		return 0x821A9CD8;
		  /* 821A9CD8h */ case   11:  		/* slw R10, R10, R11 */
		/* 821A9CD8h case   11:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A9CD8h case   11:*/		return 0x821A9CDC;
		  /* 821A9CDCh */ case   12:  		/* addi R11, R11, 2 */
		/* 821A9CDCh case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A9CDCh case   12:*/		return 0x821A9CE0;
		  /* 821A9CE0h */ case   13:  		/* or R6, R10, R6 */
		/* 821A9CE0h case   13:*/		cpu::op::or<0>(regs,&regs.R6,regs.R10,regs.R6);
		/* 821A9CE0h case   13:*/		return 0x821A9CE4;
		  /* 821A9CE4h */ case   14:  		/* bc 16, CR0_LT, -28 */
		/* 821A9CE4h case   14:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A9CC8;  }
		/* 821A9CE4h case   14:*/		return 0x821A9CE8;
	}
	return 0x821A9CE8;
} // Block from 821A9CACh-821A9CE8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821A9CE8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9CE8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9CE8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9CE8);
		  /* 821A9CE8h */ case    0:  		/* addi R27, R1, 336 */
		/* 821A9CE8h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R1,0x150);
		/* 821A9CE8h case    0:*/		return 0x821A9CEC;
		  /* 821A9CECh */ case    1:  		/* lwz R3, <#[R1 + 1236]> */
		/* 821A9CECh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000004D4) );
		/* 821A9CECh case    1:*/		return 0x821A9CF0;
		  /* 821A9CF0h */ case    2:  		/* mr R5, R14 */
		/* 821A9CF0h case    2:*/		regs.R5 = regs.R14;
		/* 821A9CF0h case    2:*/		return 0x821A9CF4;
		  /* 821A9CF4h */ case    3:  		/* lwzx R4, <#[R24 + R27]> */
		/* 821A9CF4h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + regs.R27 + 0x00000000) );
		/* 821A9CF4h case    3:*/		return 0x821A9CF8;
		  /* 821A9CF8h */ case    4:  		/* bl -203832 */
		/* 821A9CF8h case    4:*/		regs.LR = 0x821A9CFC; return 0x821780C0;
		/* 821A9CF8h case    4:*/		return 0x821A9CFC;
		  /* 821A9CFCh */ case    5:  		/* mr R23, R3 */
		/* 821A9CFCh case    5:*/		regs.R23 = regs.R3;
		/* 821A9CFCh case    5:*/		return 0x821A9D00;
		  /* 821A9D00h */ case    6:  		/* li R26, 0 */
		/* 821A9D00h case    6:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821A9D00h case    6:*/		return 0x821A9D04;
		  /* 821A9D04h */ case    7:  		/* li R25, 2 */
		/* 821A9D04h case    7:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 821A9D04h case    7:*/		return 0x821A9D08;
		  /* 821A9D08h */ case    8:  		/* mr R29, R30 */
		/* 821A9D08h case    8:*/		regs.R29 = regs.R30;
		/* 821A9D08h case    8:*/		return 0x821A9D0C;
		  /* 821A9D0Ch */ case    9:  		/* addi R28, R1, 496 */
		/* 821A9D0Ch case    9:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R1,0x1F0);
		/* 821A9D0Ch case    9:*/		return 0x821A9D10;
		  /* 821A9D10h */ case   10:  		/* cmplwi CR6, R31, 0 */
		/* 821A9D10h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821A9D10h case   10:*/		return 0x821A9D14;
		  /* 821A9D14h */ case   11:  		/* bc 12, CR6_EQ, 120 */
		/* 821A9D14h case   11:*/		if ( regs.CR[6].eq ) { return 0x821A9D8C;  }
		/* 821A9D14h case   11:*/		return 0x821A9D18;
		  /* 821A9D18h */ case   12:  		/* addi R11, R31, -1 */
		/* 821A9D18h case   12:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821A9D18h case   12:*/		return 0x821A9D1C;
		  /* 821A9D1Ch */ case   13:  		/* addi R9, R1, 336 */
		/* 821A9D1Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x150);
		/* 821A9D1Ch case   13:*/		return 0x821A9D20;
		  /* 821A9D20h */ case   14:  		/* andc R11, R31, R11 */
		/* 821A9D20h case   14:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821A9D20h case   14:*/		return 0x821A9D24;
		  /* 821A9D24h */ case   15:  		/* li R10, 3 */
		/* 821A9D24h case   15:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821A9D24h case   15:*/		return 0x821A9D28;
		  /* 821A9D28h */ case   16:  		/* cntlzw R11, R11 */
		/* 821A9D28h case   16:*/		cpu::op::cntlzw<0>(regs,&regs.R11,regs.R11);
		/* 821A9D28h case   16:*/		return 0x821A9D2C;
		  /* 821A9D2Ch */ case   17:  		/* addi R8, R1, 272 */
		/* 821A9D2Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x110);
		/* 821A9D2Ch case   17:*/		return 0x821A9D30;
		  /* 821A9D30h */ case   18:  		/* subfic R11, R11, 31 */
		/* 821A9D30h case   18:*/		cpu::op::subfic<0>(regs,&regs.R11,regs.R11,0x1F);
		/* 821A9D30h case   18:*/		return 0x821A9D34;
		  /* 821A9D34h */ case   19:  		/* addi R7, R1, 208 */
		/* 821A9D34h case   19:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0xD0);
		/* 821A9D34h case   19:*/		return 0x821A9D38;
		  /* 821A9D38h */ case   20:  		/* rlwinm R6, R11, 1, 0, 30 */
		/* 821A9D38h case   20:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R6,regs.R11);
		/* 821A9D38h case   20:*/		return 0x821A9D3C;
		  /* 821A9D3Ch */ case   21:  		/* rlwinm R11, R11, 2, 0, 29 */
		/* 821A9D3Ch case   21:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R11);
		/* 821A9D3Ch case   21:*/		return 0x821A9D40;
		  /* 821A9D40h */ case   22:  		/* slw R10, R10, R6 */
		/* 821A9D40h case   22:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 821A9D40h case   22:*/		return 0x821A9D44;
		  /* 821A9D44h */ case   23:  		/* lwzx R3, <#[R11 + R9]> */
		/* 821A9D44h case   23:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R11 + regs.R9 + 0x00000000) );
		/* 821A9D44h case   23:*/		return 0x821A9D48;
		  /* 821A9D48h */ case   24:  		/* andc R10, R22, R10 */
		/* 821A9D48h case   24:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R22,regs.R10);
		/* 821A9D48h case   24:*/		return 0x821A9D4C;
		  /* 821A9D4Ch */ case   25:  		/* slw R9, R29, R6 */
		/* 821A9D4Ch case   25:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R29,regs.R6);
		/* 821A9D4Ch case   25:*/		return 0x821A9D50;
		  /* 821A9D50h */ case   26:  		/* lwzx R5, <#[R11 + R8]> */
		/* 821A9D50h case   26:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R11 + regs.R8 + 0x00000000) );
		/* 821A9D50h case   26:*/		return 0x821A9D54;
		  /* 821A9D54h */ case   27:  		/* lwzx R4, <#[R11 + R7]> */
		/* 821A9D54h case   27:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R11 + regs.R7 + 0x00000000) );
		/* 821A9D54h case   27:*/		return 0x821A9D58;
		  /* 821A9D58h */ case   28:  		/* or R22, R10, R9 */
		/* 821A9D58h case   28:*/		cpu::op::or<0>(regs,&regs.R22,regs.R10,regs.R9);
		/* 821A9D58h case   28:*/		return 0x821A9D5C;
		  /* 821A9D5Ch */ case   29:  		/* bl 489772 */
		/* 821A9D5Ch case   29:*/		regs.LR = 0x821A9D60; return 0x82221688;
		/* 821A9D5Ch case   29:*/		return 0x821A9D60;
		  /* 821A9D60h */ case   30:  		/* stfs FR1, <#[R28]> */
		/* 821A9D60h case   30:*/		cpu::mem::store32f( regs, regs.FR1, (uint32)(regs.R28 + 0x00000000) );
		/* 821A9D60h case   30:*/		return 0x821A9D64;
		  /* 821A9D64h */ case   31:  		/* fcmpu CR6, FR1, FR31 */
		/* 821A9D64h case   31:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821A9D64h case   31:*/		return 0x821A9D68;
		  /* 821A9D68h */ case   32:  		/* bc 4, CR6_LT, 8 */
		/* 821A9D68h case   32:*/		if ( !regs.CR[6].lt ) { return 0x821A9D70;  }
		/* 821A9D68h case   32:*/		return 0x821A9D6C;
		  /* 821A9D6Ch */ case   33:  		/* li R25, 1 */
		/* 821A9D6Ch case   33:*/		cpu::op::li<0>(regs,&regs.R25,0x1);
		/* 821A9D6Ch case   33:*/		return 0x821A9D70;
	}
	return 0x821A9D70;
} // Block from 821A9CE8h-821A9D70h (34 instructions)

//////////////////////////////////////////////////////
// Block at 821A9D70h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9D70( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9D70) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9D70);
		  /* 821A9D70h */ case    0:  		/* addi R11, R31, -1 */
		/* 821A9D70h case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R31,0xFFFFFFFF);
		/* 821A9D70h case    0:*/		return 0x821A9D74;
		  /* 821A9D74h */ case    1:  		/* addi R26, R26, 1 */
		/* 821A9D74h case    1:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821A9D74h case    1:*/		return 0x821A9D78;
		  /* 821A9D78h */ case    2:  		/* andc R11, R31, R11 */
		/* 821A9D78h case    2:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R31,regs.R11);
		/* 821A9D78h case    2:*/		return 0x821A9D7C;
		  /* 821A9D7Ch */ case    3:  		/* addi R29, R29, 1 */
		/* 821A9D7Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821A9D7Ch case    3:*/		return 0x821A9D80;
		  /* 821A9D80h */ case    4:  		/* addi R28, R28, 4 */
		/* 821A9D80h case    4:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821A9D80h case    4:*/		return 0x821A9D84;
		  /* 821A9D84h */ case    5:  		/* subf R31, R11, R31 */
		/* 821A9D84h case    5:*/		cpu::op::subf<0>(regs,&regs.R31,regs.R11,regs.R31);
		/* 821A9D84h case    5:*/		return 0x821A9D88;
		  /* 821A9D88h */ case    6:  		/* b -120 */
		/* 821A9D88h case    6:*/		return 0x821A9D10;
		/* 821A9D88h case    6:*/		return 0x821A9D8C;
	}
	return 0x821A9D8C;
} // Block from 821A9D70h-821A9D8Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A9D8Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9D8C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9D8C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9D8C);
		  /* 821A9D8Ch */ case    0:  		/* lwz R11, <#[R23]> */
		/* 821A9D8Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821A9D8Ch case    0:*/		return 0x821A9D90;
		  /* 821A9D90h */ case    1:  		/* addi R8, R1, 496 */
		/* 821A9D90h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R1,0x1F0);
		/* 821A9D90h case    1:*/		return 0x821A9D94;
		  /* 821A9D94h */ case    2:  		/* lwz R3, <#[R1 + 1236]> */
		/* 821A9D94h case    2:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000004D4) );
		/* 821A9D94h case    2:*/		return 0x821A9D98;
		  /* 821A9D98h */ case    3:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821A9D98h case    3:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821A9D98h case    3:*/		return 0x821A9D9C;
		  /* 821A9D9Ch */ case    4:  		/* lwzx R4, <#[R24 + R27]> */
		/* 821A9D9Ch case    4:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + regs.R27 + 0x00000000) );
		/* 821A9D9Ch case    4:*/		return 0x821A9DA0;
		  /* 821A9DA0h */ case    5:  		/* rlwinm R6, R11, 27, 24, 31 */
		/* 821A9DA0h case    5:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R6,regs.R11);
		/* 821A9DA0h case    5:*/		return 0x821A9DA4;
		  /* 821A9DA4h */ case    6:  		/* rlwinm R5, R11, 7, 29, 31 */
		/* 821A9DA4h case    6:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R5,regs.R11);
		/* 821A9DA4h case    6:*/		return 0x821A9DA8;
		  /* 821A9DA8h */ case    7:  		/* bl -60200 */
		/* 821A9DA8h case    7:*/		regs.LR = 0x821A9DAC; return 0x8219B280;
		/* 821A9DA8h case    7:*/		return 0x821A9DAC;
		  /* 821A9DACh */ case    8:  		/* or R11, R3, R25 */
		/* 821A9DACh case    8:*/		cpu::op::or<0>(regs,&regs.R11,regs.R3,regs.R25);
		/* 821A9DACh case    8:*/		return 0x821A9DB0;
		  /* 821A9DB0h */ case    9:  		/* cmplwi CR6, R11, 5 */
		/* 821A9DB0h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000005);
		/* 821A9DB0h case    9:*/		return 0x821A9DB4;
		  /* 821A9DB4h */ case   10:  		/* bc 12, CR6_EQ, 528 */
		/* 821A9DB4h case   10:*/		if ( regs.CR[6].eq ) { return 0x821A9FC4;  }
		/* 821A9DB4h case   10:*/		return 0x821A9DB8;
		  /* 821A9DB8h */ case   11:  		/* lis R10, -32256 */
		/* 821A9DB8h case   11:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821A9DB8h case   11:*/		return 0x821A9DBC;
		  /* 821A9DBCh */ case   12:  		/* li R25, 4 */
		/* 821A9DBCh case   12:*/		cpu::op::li<0>(regs,&regs.R25,0x4);
		/* 821A9DBCh case   12:*/		return 0x821A9DC0;
		  /* 821A9DC0h */ case   13:  		/* li R27, 4 */
		/* 821A9DC0h case   13:*/		cpu::op::li<0>(regs,&regs.R27,0x4);
		/* 821A9DC0h case   13:*/		return 0x821A9DC4;
		  /* 821A9DC4h */ case   14:  		/* li R11, 0 */
		/* 821A9DC4h case   14:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A9DC4h case   14:*/		return 0x821A9DC8;
		  /* 821A9DC8h */ case   15:  		/* cmplwi CR6, R26, 0 */
		/* 821A9DC8h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000000);
		/* 821A9DC8h case   15:*/		return 0x821A9DCC;
		  /* 821A9DCCh */ case   16:  		/* lfs FR13, <#[R10 + 1792]> */
		/* 821A9DCCh case   16:*/		cpu::mem::load32f( regs, &regs.FR13, (uint32)(regs.R10 + 0x00000700) );
		/* 821A9DCCh case   16:*/		return 0x821A9DD0;
		  /* 821A9DD0h */ case   17:  		/* bc 12, CR6_EQ, 64 */
		/* 821A9DD0h case   17:*/		if ( regs.CR[6].eq ) { return 0x821A9E10;  }
		/* 821A9DD0h case   17:*/		return 0x821A9DD4;
		  /* 821A9DD4h */ case   18:  		/* addi R10, R1, 496 */
		/* 821A9DD4h case   18:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1F0);
		/* 821A9DD4h case   18:*/		return 0x821A9DD8;
		  /* 821A9DD8h */ case   19:  		/* mtspr CTR, R26 */
		/* 821A9DD8h case   19:*/		regs.CTR = regs.R26;
		/* 821A9DD8h case   19:*/		return 0x821A9DDC;
		  /* 821A9DDCh */ case   20:  		/* lfs FR0, <#[R10]> */
		/* 821A9DDCh case   20:*/		cpu::mem::load32f( regs, &regs.FR0, (uint32)(regs.R10 + 0x00000000) );
		/* 821A9DDCh case   20:*/		return 0x821A9DE0;
		  /* 821A9DE0h */ case   21:  		/* fcmpu CR6, FR0, FR31 */
		/* 821A9DE0h case   21:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR31);
		/* 821A9DE0h case   21:*/		return 0x821A9DE4;
		  /* 821A9DE4h */ case   22:  		/* bc 4, CR6_EQ, 12 */
		/* 821A9DE4h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821A9DF0;  }
		/* 821A9DE4h case   22:*/		return 0x821A9DE8;
		  /* 821A9DE8h */ case   23:  		/* mr R25, R11 */
		/* 821A9DE8h case   23:*/		regs.R25 = regs.R11;
		/* 821A9DE8h case   23:*/		return 0x821A9DEC;
		  /* 821A9DECh */ case   24:  		/* b 16 */
		/* 821A9DECh case   24:*/		return 0x821A9DFC;
		/* 821A9DECh case   24:*/		return 0x821A9DF0;
	}
	return 0x821A9DF0;
} // Block from 821A9D8Ch-821A9DF0h (25 instructions)

//////////////////////////////////////////////////////
// Block at 821A9DF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9DF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9DF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9DF0);
		  /* 821A9DF0h */ case    0:  		/* fcmpu CR6, FR0, FR13 */
		/* 821A9DF0h case    0:*/		cpu::op::fcmpu<6>(regs,regs.FR0,regs.FR13);
		/* 821A9DF0h case    0:*/		return 0x821A9DF4;
		  /* 821A9DF4h */ case    1:  		/* bc 4, CR6_EQ, 8 */
		/* 821A9DF4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A9DFC;  }
		/* 821A9DF4h case    1:*/		return 0x821A9DF8;
		  /* 821A9DF8h */ case    2:  		/* mr R27, R11 */
		/* 821A9DF8h case    2:*/		regs.R27 = regs.R11;
		/* 821A9DF8h case    2:*/		return 0x821A9DFC;
	}
	return 0x821A9DFC;
} // Block from 821A9DF0h-821A9DFCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821A9DFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9DFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9DFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9DFC);
		  /* 821A9DFCh */ case    0:  		/* addi R11, R11, 1 */
		/* 821A9DFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821A9DFCh case    0:*/		return 0x821A9E00;
		  /* 821A9E00h */ case    1:  		/* addi R10, R10, 4 */
		/* 821A9E00h case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821A9E00h case    1:*/		return 0x821A9E04;
		  /* 821A9E04h */ case    2:  		/* bc 16, CR0_LT, -40 */
		/* 821A9E04h case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A9DDC;  }
		/* 821A9E04h case    2:*/		return 0x821A9E08;
		  /* 821A9E08h */ case    3:  		/* cmpwi CR6, R25, 4 */
		/* 821A9E08h case    3:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000004);
		/* 821A9E08h case    3:*/		return 0x821A9E0C;
		  /* 821A9E0Ch */ case    4:  		/* bc 4, CR6_EQ, 32 */
		/* 821A9E0Ch case    4:*/		if ( !regs.CR[6].eq ) { return 0x821A9E2C;  }
		/* 821A9E0Ch case    4:*/		return 0x821A9E10;
	}
	return 0x821A9E10;
} // Block from 821A9DFCh-821A9E10h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821A9E10h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9E10( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9E10) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9E10);
		  /* 821A9E10h */ case    0:  		/* cmplwi CR6, R26, 4 */
		/* 821A9E10h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 821A9E10h case    0:*/		return 0x821A9E14;
		  /* 821A9E14h */ case    1:  		/* bc 4, CR6_LT, 24 */
		/* 821A9E14h case    1:*/		if ( !regs.CR[6].lt ) { return 0x821A9E2C;  }
		/* 821A9E14h case    1:*/		return 0x821A9E18;
		  /* 821A9E18h */ case    2:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 821A9E18h case    2:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 821A9E18h case    2:*/		return 0x821A9E1C;
		  /* 821A9E1Ch */ case    3:  		/* addi R10, R1, 496 */
		/* 821A9E1Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1F0);
		/* 821A9E1Ch case    3:*/		return 0x821A9E20;
		  /* 821A9E20h */ case    4:  		/* mr R25, R26 */
		/* 821A9E20h case    4:*/		regs.R25 = regs.R26;
		/* 821A9E20h case    4:*/		return 0x821A9E24;
		  /* 821A9E24h */ case    5:  		/* addi R26, R26, 1 */
		/* 821A9E24h case    5:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821A9E24h case    5:*/		return 0x821A9E28;
		  /* 821A9E28h */ case    6:  		/* stfsx FR31, <#[R11 + R10]> */
		/* 821A9E28h case    6:*/		cpu::mem::store32f( regs, regs.FR31, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821A9E28h case    6:*/		return 0x821A9E2C;
	}
	return 0x821A9E2C;
} // Block from 821A9E10h-821A9E2Ch (7 instructions)

//////////////////////////////////////////////////////
// Block at 821A9E2Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9E2C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9E2C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9E2C);
		  /* 821A9E2Ch */ case    0:  		/* cmpwi CR6, R27, 4 */
		/* 821A9E2Ch case    0:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000004);
		/* 821A9E2Ch case    0:*/		return 0x821A9E30;
		  /* 821A9E30h */ case    1:  		/* bc 4, CR6_EQ, 32 */
		/* 821A9E30h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821A9E50;  }
		/* 821A9E30h case    1:*/		return 0x821A9E34;
		  /* 821A9E34h */ case    2:  		/* cmplwi CR6, R26, 4 */
		/* 821A9E34h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R26,0x00000004);
		/* 821A9E34h case    2:*/		return 0x821A9E38;
		  /* 821A9E38h */ case    3:  		/* bc 4, CR6_LT, 24 */
		/* 821A9E38h case    3:*/		if ( !regs.CR[6].lt ) { return 0x821A9E50;  }
		/* 821A9E38h case    3:*/		return 0x821A9E3C;
		  /* 821A9E3Ch */ case    4:  		/* rlwinm R11, R26, 2, 0, 29 */
		/* 821A9E3Ch case    4:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R11,regs.R26);
		/* 821A9E3Ch case    4:*/		return 0x821A9E40;
		  /* 821A9E40h */ case    5:  		/* addi R10, R1, 496 */
		/* 821A9E40h case    5:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x1F0);
		/* 821A9E40h case    5:*/		return 0x821A9E44;
		  /* 821A9E44h */ case    6:  		/* mr R27, R26 */
		/* 821A9E44h case    6:*/		regs.R27 = regs.R26;
		/* 821A9E44h case    6:*/		return 0x821A9E48;
		  /* 821A9E48h */ case    7:  		/* addi R26, R26, 1 */
		/* 821A9E48h case    7:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821A9E48h case    7:*/		return 0x821A9E4C;
		  /* 821A9E4Ch */ case    8:  		/* stfsx FR13, <#[R11 + R10]> */
		/* 821A9E4Ch case    8:*/		cpu::mem::store32f( regs, regs.FR13, (uint32)(regs.R11 + regs.R10 + 0x00000000) );
		/* 821A9E4Ch case    8:*/		return 0x821A9E50;
	}
	return 0x821A9E50;
} // Block from 821A9E2Ch-821A9E50h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821A9E50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9E50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9E50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9E50);
		  /* 821A9E50h */ case    0:  		/* cmpwi CR6, R25, 4 */
		/* 821A9E50h case    0:*/		cpu::op::cmpwi<6>(regs,regs.R25,0x00000004);
		/* 821A9E50h case    0:*/		return 0x821A9E54;
		  /* 821A9E54h */ case    1:  		/* bc 12, CR6_EQ, 368 */
		/* 821A9E54h case    1:*/		if ( regs.CR[6].eq ) { return 0x821A9FC4;  }
		/* 821A9E54h case    1:*/		return 0x821A9E58;
		  /* 821A9E58h */ case    2:  		/* cmpwi CR6, R27, 4 */
		/* 821A9E58h case    2:*/		cpu::op::cmpwi<6>(regs,regs.R27,0x00000004);
		/* 821A9E58h case    2:*/		return 0x821A9E5C;
		  /* 821A9E5Ch */ case    3:  		/* bc 12, CR6_EQ, 360 */
		/* 821A9E5Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821A9FC4;  }
		/* 821A9E5Ch case    3:*/		return 0x821A9E60;
		  /* 821A9E60h */ case    4:  		/* lis R11, -32252 */
		/* 821A9E60h case    4:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8204);
		/* 821A9E60h case    4:*/		return 0x821A9E64;
		  /* 821A9E64h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821A9E64h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A9E64h case    5:*/		return 0x821A9E68;
		  /* 821A9E68h */ case    6:  		/* addi R11, R11, -16628 */
		/* 821A9E68h case    6:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0xFFFFBF0C);
		/* 821A9E68h case    6:*/		return 0x821A9E6C;
		  /* 821A9E6Ch */ case    7:  		/* add R11, R30, R11 */
		/* 821A9E6Ch case    7:*/		cpu::op::add<0>(regs,&regs.R11,regs.R30,regs.R11);
		/* 821A9E6Ch case    7:*/		return 0x821A9E70;
		  /* 821A9E70h */ case    8:  		/* lbz R29, <#[R11 - 1]> */
		/* 821A9E70h case    8:*/		cpu::mem::load8z( regs, &regs.R29, (uint32)(regs.R11 + 0xFFFFFFFF) );
		/* 821A9E70h case    8:*/		return 0x821A9E74;
		  /* 821A9E74h */ case    9:  		/* bc 12, CR6_EQ, 40 */
		/* 821A9E74h case    9:*/		if ( regs.CR[6].eq ) { return 0x821A9E9C;  }
		/* 821A9E74h case    9:*/		return 0x821A9E78;
		  /* 821A9E78h */ case   10:  		/* li R11, 0 */
		/* 821A9E78h case   10:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A9E78h case   10:*/		return 0x821A9E7C;
		  /* 821A9E7Ch */ case   11:  		/* mtspr CTR, R30 */
		/* 821A9E7Ch case   11:*/		regs.CTR = regs.R30;
		/* 821A9E7Ch case   11:*/		return 0x821A9E80;
		  /* 821A9E80h */ case   12:  		/* li R10, 3 */
		/* 821A9E80h case   12:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821A9E80h case   12:*/		return 0x821A9E84;
		  /* 821A9E84h */ case   13:  		/* slw R9, R25, R11 */
		/* 821A9E84h case   13:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R25,regs.R11);
		/* 821A9E84h case   13:*/		return 0x821A9E88;
		  /* 821A9E88h */ case   14:  		/* slw R10, R10, R11 */
		/* 821A9E88h case   14:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A9E88h case   14:*/		return 0x821A9E8C;
		  /* 821A9E8Ch */ case   15:  		/* andc R10, R29, R10 */
		/* 821A9E8Ch case   15:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R29,regs.R10);
		/* 821A9E8Ch case   15:*/		return 0x821A9E90;
		  /* 821A9E90h */ case   16:  		/* addi R11, R11, 2 */
		/* 821A9E90h case   16:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A9E90h case   16:*/		return 0x821A9E94;
		  /* 821A9E94h */ case   17:  		/* or R29, R10, R9 */
		/* 821A9E94h case   17:*/		cpu::op::or<0>(regs,&regs.R29,regs.R10,regs.R9);
		/* 821A9E94h case   17:*/		return 0x821A9E98;
		  /* 821A9E98h */ case   18:  		/* bc 16, CR0_LT, -24 */
		/* 821A9E98h case   18:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A9E80;  }
		/* 821A9E98h case   18:*/		return 0x821A9E9C;
	}
	return 0x821A9E9C;
} // Block from 821A9E50h-821A9E9Ch (19 instructions)

//////////////////////////////////////////////////////
// Block at 821A9E9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9E9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9E9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9E9C);
		  /* 821A9E9Ch */ case    0:  		/* rlwinm. R11, R3, 0, 29, 29 */
		/* 821A9E9Ch case    0:*/		cpu::op::rlwinm<1,0,29,29>(regs,&regs.R11,regs.R3);
		/* 821A9E9Ch case    0:*/		return 0x821A9EA0;
		  /* 821A9EA0h */ case    1:  		/* li R28, 0 */
		/* 821A9EA0h case    1:*/		cpu::op::li<0>(regs,&regs.R28,0x0);
		/* 821A9EA0h case    1:*/		return 0x821A9EA4;
		  /* 821A9EA4h */ case    2:  		/* bc 12, CR0_EQ, 8 */
		/* 821A9EA4h case    2:*/		if ( regs.CR[0].eq ) { return 0x821A9EAC;  }
		/* 821A9EA4h case    2:*/		return 0x821A9EA8;
		  /* 821A9EA8h */ case    3:  		/* li R28, 2 */
		/* 821A9EA8h case    3:*/		cpu::op::li<0>(regs,&regs.R28,0x2);
		/* 821A9EA8h case    3:*/		return 0x821A9EAC;
	}
	return 0x821A9EAC;
} // Block from 821A9E9Ch-821A9EACh (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A9EACh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9EAC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9EAC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9EAC);
		  /* 821A9EACh */ case    0:  		/* addi R11, R1, 120 */
		/* 821A9EACh case    0:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x78);
		/* 821A9EACh case    0:*/		return 0x821A9EB0;
		  /* 821A9EB0h */ case    1:  		/* li R10, 0 */
		/* 821A9EB0h case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A9EB0h case    1:*/		return 0x821A9EB4;
		  /* 821A9EB4h */ case    2:  		/* mr R4, R26 */
		/* 821A9EB4h case    2:*/		regs.R4 = regs.R26;
		/* 821A9EB4h case    2:*/		return 0x821A9EB8;
		  /* 821A9EB8h */ case    3:  		/* lwz R26, <#[R1 + 1236]> */
		/* 821A9EB8h case    3:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R1 + 0x000004D4) );
		/* 821A9EB8h case    3:*/		return 0x821A9EBC;
		  /* 821A9EBCh */ case    4:  		/* addi R5, R1, 496 */
		/* 821A9EBCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x1F0);
		/* 821A9EBCh case    4:*/		return 0x821A9EC0;
		  /* 821A9EC0h */ case    5:  		/* mr R3, R26 */
		/* 821A9EC0h case    5:*/		regs.R3 = regs.R26;
		/* 821A9EC0h case    5:*/		return 0x821A9EC4;
		  /* 821A9EC4h */ case    6:  		/* stw R10, <#[R11]> */
		/* 821A9EC4h case    6:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821A9EC4h case    6:*/		return 0x821A9EC8;
		  /* 821A9EC8h */ case    7:  		/* lwz R6, <#[R1 + 120]> */
		/* 821A9EC8h case    7:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x00000078) );
		/* 821A9EC8h case    7:*/		return 0x821A9ECC;
		  /* 821A9ECCh */ case    8:  		/* bl 512364 */
		/* 821A9ECCh case    8:*/		regs.LR = 0x821A9ED0; return 0x82227038;
		/* 821A9ECCh case    8:*/		return 0x821A9ED0;
		  /* 821A9ED0h */ case    9:  		/* mr R31, R3 */
		/* 821A9ED0h case    9:*/		regs.R31 = regs.R3;
		/* 821A9ED0h case    9:*/		return 0x821A9ED4;
		  /* 821A9ED4h */ case   10:  		/* mr R4, R3 */
		/* 821A9ED4h case   10:*/		regs.R4 = regs.R3;
		/* 821A9ED4h case   10:*/		return 0x821A9ED8;
		  /* 821A9ED8h */ case   11:  		/* mr R7, R28 */
		/* 821A9ED8h case   11:*/		regs.R7 = regs.R28;
		/* 821A9ED8h case   11:*/		return 0x821A9EDC;
		  /* 821A9EDCh */ case   12:  		/* mr R6, R29 */
		/* 821A9EDCh case   12:*/		regs.R6 = regs.R29;
		/* 821A9EDCh case   12:*/		return 0x821A9EE0;
		  /* 821A9EE0h */ case   13:  		/* mr R5, R14 */
		/* 821A9EE0h case   13:*/		regs.R5 = regs.R14;
		/* 821A9EE0h case   13:*/		return 0x821A9EE4;
		  /* 821A9EE4h */ case   14:  		/* mr R3, R26 */
		/* 821A9EE4h case   14:*/		regs.R3 = regs.R26;
		/* 821A9EE4h case   14:*/		return 0x821A9EE8;
		  /* 821A9EE8h */ case   15:  		/* bl -204328 */
		/* 821A9EE8h case   15:*/		regs.LR = 0x821A9EEC; return 0x821780C0;
		/* 821A9EE8h case   15:*/		return 0x821A9EEC;
		  /* 821A9EECh */ case   16:  		/* mr R29, R3 */
		/* 821A9EECh case   16:*/		regs.R29 = regs.R3;
		/* 821A9EECh case   16:*/		return 0x821A9EF0;
		  /* 821A9EF0h */ case   17:  		/* li R6, 0 */
		/* 821A9EF0h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821A9EF0h case   17:*/		return 0x821A9EF4;
		  /* 821A9EF4h */ case   18:  		/* li R10, 0 */
		/* 821A9EF4h case   18:*/		cpu::op::li<0>(regs,&regs.R10,0x0);
		/* 821A9EF4h case   18:*/		return 0x821A9EF8;
		  /* 821A9EF8h */ case   19:  		/* cmplwi CR6, R30, 0 */
		/* 821A9EF8h case   19:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821A9EF8h case   19:*/		return 0x821A9EFC;
		  /* 821A9EFCh */ case   20:  		/* bc 12, CR6_EQ, 52 */
		/* 821A9EFCh case   20:*/		if ( regs.CR[6].eq ) { return 0x821A9F30;  }
		/* 821A9EFCh case   20:*/		return 0x821A9F00;
		  /* 821A9F00h */ case   21:  		/* li R11, 0 */
		/* 821A9F00h case   21:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821A9F00h case   21:*/		return 0x821A9F04;
		  /* 821A9F04h */ case   22:  		/* mtspr CTR, R30 */
		/* 821A9F04h case   22:*/		regs.CTR = regs.R30;
		/* 821A9F04h case   22:*/		return 0x821A9F08;
		  /* 821A9F08h */ case   23:  		/* mr R10, R30 */
		/* 821A9F08h case   23:*/		regs.R10 = regs.R30;
		/* 821A9F08h case   23:*/		return 0x821A9F0C;
		  /* 821A9F0Ch */ case   24:  		/* li R9, 3 */
		/* 821A9F0Ch case   24:*/		cpu::op::li<0>(regs,&regs.R9,0x3);
		/* 821A9F0Ch case   24:*/		return 0x821A9F10;
		  /* 821A9F10h */ case   25:  		/* slw R8, R27, R11 */
		/* 821A9F10h case   25:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R27,regs.R11);
		/* 821A9F10h case   25:*/		return 0x821A9F14;
		  /* 821A9F14h */ case   26:  		/* slw R9, R9, R11 */
		/* 821A9F14h case   26:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821A9F14h case   26:*/		return 0x821A9F18;
		  /* 821A9F18h */ case   27:  		/* andc R9, R6, R9 */
		/* 821A9F18h case   27:*/		cpu::op::andc<0>(regs,&regs.R9,regs.R6,regs.R9);
		/* 821A9F18h case   27:*/		return 0x821A9F1C;
		  /* 821A9F1Ch */ case   28:  		/* addi R11, R11, 2 */
		/* 821A9F1Ch case   28:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A9F1Ch case   28:*/		return 0x821A9F20;
		  /* 821A9F20h */ case   29:  		/* or R6, R9, R8 */
		/* 821A9F20h case   29:*/		cpu::op::or<0>(regs,&regs.R6,regs.R9,regs.R8);
		/* 821A9F20h case   29:*/		return 0x821A9F24;
		  /* 821A9F24h */ case   30:  		/* bc 16, CR0_LT, -24 */
		/* 821A9F24h case   30:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A9F0C;  }
		/* 821A9F24h case   30:*/		return 0x821A9F28;
		  /* 821A9F28h */ case   31:  		/* cmplwi CR6, R30, 4 */
		/* 821A9F28h case   31:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000004);
		/* 821A9F28h case   31:*/		return 0x821A9F2C;
		  /* 821A9F2Ch */ case   32:  		/* bc 4, CR6_LT, 44 */
		/* 821A9F2Ch case   32:*/		if ( !regs.CR[6].lt ) { return 0x821A9F58;  }
		/* 821A9F2Ch case   32:*/		return 0x821A9F30;
	}
	return 0x821A9F30;
} // Block from 821A9EACh-821A9F30h (33 instructions)

//////////////////////////////////////////////////////
// Block at 821A9F30h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9F30( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9F30) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9F30);
		  /* 821A9F30h */ case    0:  		/* subfic R9, R10, 4 */
		/* 821A9F30h case    0:*/		cpu::op::subfic<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821A9F30h case    0:*/		return 0x821A9F34;
		  /* 821A9F34h */ case    1:  		/* rlwinm R11, R10, 1, 0, 30 */
		/* 821A9F34h case    1:*/		cpu::op::rlwinm<0,1,0,30>(regs,&regs.R11,regs.R10);
		/* 821A9F34h case    1:*/		return 0x821A9F38;
		  /* 821A9F38h */ case    2:  		/* mtspr CTR, R9 */
		/* 821A9F38h case    2:*/		regs.CTR = regs.R9;
		/* 821A9F38h case    2:*/		return 0x821A9F3C;
		  /* 821A9F3Ch */ case    3:  		/* li R10, 3 */
		/* 821A9F3Ch case    3:*/		cpu::op::li<0>(regs,&regs.R10,0x3);
		/* 821A9F3Ch case    3:*/		return 0x821A9F40;
		  /* 821A9F40h */ case    4:  		/* slw R9, R25, R11 */
		/* 821A9F40h case    4:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R25,regs.R11);
		/* 821A9F40h case    4:*/		return 0x821A9F44;
		  /* 821A9F44h */ case    5:  		/* slw R10, R10, R11 */
		/* 821A9F44h case    5:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R10,regs.R11);
		/* 821A9F44h case    5:*/		return 0x821A9F48;
	}
	return 0x821A9F48;
} // Block from 821A9F30h-821A9F48h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821A9F48h
// Function '?CanonicalizeDotProductAdd@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@0W4Component@2@@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9F48( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9F48) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9F48);
		  /* 821A9F48h */ case    0:  		/* andc R10, R6, R10 */
		/* 821A9F48h case    0:*/		cpu::op::andc<0>(regs,&regs.R10,regs.R6,regs.R10);
		/* 821A9F48h case    0:*/		return 0x821A9F4C;
		  /* 821A9F4Ch */ case    1:  		/* addi R11, R11, 2 */
		/* 821A9F4Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821A9F4Ch case    1:*/		return 0x821A9F50;
		  /* 821A9F50h */ case    2:  		/* or R6, R10, R9 */
		/* 821A9F50h case    2:*/		cpu::op::or<0>(regs,&regs.R6,regs.R10,regs.R9);
		/* 821A9F50h case    2:*/		return 0x821A9F54;
		  /* 821A9F54h */ case    3:  		/* bc 16, CR0_LT, -24 */
		/* 821A9F54h case    3:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821A9F3C;  }
		/* 821A9F54h case    3:*/		return 0x821A9F58;
	}
	return 0x821A9F58;
} // Block from 821A9F48h-821A9F58h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821A9F58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9F58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9F58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9F58);
		  /* 821A9F58h */ case    0:  		/* mr R7, R28 */
		/* 821A9F58h case    0:*/		regs.R7 = regs.R28;
		/* 821A9F58h case    0:*/		return 0x821A9F5C;
		  /* 821A9F5Ch */ case    1:  		/* mr R5, R14 */
		/* 821A9F5Ch case    1:*/		regs.R5 = regs.R14;
		/* 821A9F5Ch case    1:*/		return 0x821A9F60;
		  /* 821A9F60h */ case    2:  		/* mr R4, R31 */
		/* 821A9F60h case    2:*/		regs.R4 = regs.R31;
		/* 821A9F60h case    2:*/		return 0x821A9F64;
		  /* 821A9F64h */ case    3:  		/* mr R3, R26 */
		/* 821A9F64h case    3:*/		regs.R3 = regs.R26;
		/* 821A9F64h case    3:*/		return 0x821A9F68;
		  /* 821A9F68h */ case    4:  		/* bl -204456 */
		/* 821A9F68h case    4:*/		regs.LR = 0x821A9F6C; return 0x821780C0;
		/* 821A9F68h case    4:*/		return 0x821A9F6C;
		  /* 821A9F6Ch */ case    5:  		/* lwz R30, <#[R1 + 1244]> */
		/* 821A9F6Ch case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000004DC) );
		/* 821A9F6Ch case    5:*/		return 0x821A9F70;
		  /* 821A9F70h */ case    6:  		/* mr R7, R3 */
		/* 821A9F70h case    6:*/		regs.R7 = regs.R3;
		/* 821A9F70h case    6:*/		return 0x821A9F74;
		  /* 821A9F74h */ case    7:  		/* mr R5, R30 */
		/* 821A9F74h case    7:*/		regs.R5 = regs.R30;
		/* 821A9F74h case    7:*/		return 0x821A9F78;
		  /* 821A9F78h */ case    8:  		/* mr R8, R29 */
		/* 821A9F78h case    8:*/		regs.R8 = regs.R29;
		/* 821A9F78h case    8:*/		return 0x821A9F7C;
		  /* 821A9F7Ch */ case    9:  		/* mr R6, R23 */
		/* 821A9F7Ch case    9:*/		regs.R6 = regs.R23;
		/* 821A9F7Ch case    9:*/		return 0x821A9F80;
		  /* 821A9F80h */ case   10:  		/* li R4, 0 */
		/* 821A9F80h case   10:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821A9F80h case   10:*/		return 0x821A9F84;
		  /* 821A9F84h */ case   11:  		/* mr R3, R26 */
		/* 821A9F84h case   11:*/		regs.R3 = regs.R26;
		/* 821A9F84h case   11:*/		return 0x821A9F88;
		  /* 821A9F88h */ case   12:  		/* bl -78280 */
		/* 821A9F88h case   12:*/		regs.LR = 0x821A9F8C; return 0x82196DC0;
		/* 821A9F88h case   12:*/		return 0x821A9F8C;
		  /* 821A9F8Ch */ case   13:  		/* mr R29, R3 */
		/* 821A9F8Ch case   13:*/		regs.R29 = regs.R3;
		/* 821A9F8Ch case   13:*/		return 0x821A9F90;
		  /* 821A9F90h */ case   14:  		/* mr R3, R31 */
		/* 821A9F90h case   14:*/		regs.R3 = regs.R31;
		/* 821A9F90h case   14:*/		return 0x821A9F94;
		  /* 821A9F94h */ case   15:  		/* bl -80868 */
		/* 821A9F94h case   15:*/		regs.LR = 0x821A9F98; return 0x821963B0;
		/* 821A9F94h case   15:*/		return 0x821A9F98;
		  /* 821A9F98h */ case   16:  		/* lwz R11, <#[R31 + 8]> */
		/* 821A9F98h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A9F98h case   16:*/		return 0x821A9F9C;
		  /* 821A9F9Ch */ case   17:  		/* mr R5, R29 */
		/* 821A9F9Ch case   17:*/		regs.R5 = regs.R29;
		/* 821A9F9Ch case   17:*/		return 0x821A9FA0;
		  /* 821A9FA0h */ case   18:  		/* oris R11, R11, 256 */
		/* 821A9FA0h case   18:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821A9FA0h case   18:*/		return 0x821A9FA4;
		  /* 821A9FA4h */ case   19:  		/* li R8, 1 */
		/* 821A9FA4h case   19:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821A9FA4h case   19:*/		return 0x821A9FA8;
		  /* 821A9FA8h */ case   20:  		/* stw R11, <#[R31 + 8]> */
		/* 821A9FA8h case   20:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821A9FA8h case   20:*/		return 0x821A9FAC;
		  /* 821A9FACh */ case   21:  		/* li R7, 1 */
		/* 821A9FACh case   21:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821A9FACh case   21:*/		return 0x821A9FB0;
		  /* 821A9FB0h */ case   22:  		/* mr R6, R22 */
		/* 821A9FB0h case   22:*/		regs.R6 = regs.R22;
		/* 821A9FB0h case   22:*/		return 0x821A9FB4;
		  /* 821A9FB4h */ case   23:  		/* mr R4, R30 */
		/* 821A9FB4h case   23:*/		regs.R4 = regs.R30;
		/* 821A9FB4h case   23:*/		return 0x821A9FB8;
		  /* 821A9FB8h */ case   24:  		/* mr R3, R26 */
		/* 821A9FB8h case   24:*/		regs.R3 = regs.R26;
		/* 821A9FB8h case   24:*/		return 0x821A9FBC;
		  /* 821A9FBCh */ case   25:  		/* bl -21340 */
		/* 821A9FBCh case   25:*/		regs.LR = 0x821A9FC0; return 0x821A4C60;
		/* 821A9FBCh case   25:*/		return 0x821A9FC0;
		  /* 821A9FC0h */ case   26:  		/* b 8188 */
		/* 821A9FC0h case   26:*/		return 0x821ABFBC;
		/* 821A9FC0h case   26:*/		return 0x821A9FC4;
	}
	return 0x821A9FC4;
} // Block from 821A9F58h-821A9FC4h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821A9FC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9FC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9FC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9FC4);
		  /* 821A9FC4h */ case    0:  		/* cmplwi CR6, R19, 1 */
		/* 821A9FC4h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R19,0x00000001);
		/* 821A9FC4h case    0:*/		return 0x821A9FC8;
		  /* 821A9FC8h */ case    1:  		/* bc 4, CR6_EQ, 148 */
		/* 821A9FC8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AA05C;  }
		/* 821A9FC8h case    1:*/		return 0x821A9FCC;
		  /* 821A9FCCh */ case    2:  		/* lwz R4, <#[R1 + 336]> */
		/* 821A9FCCh case    2:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000150) );
		/* 821A9FCCh case    2:*/		return 0x821A9FD0;
		  /* 821A9FD0h */ case    3:  		/* cmplwi CR6, R21, 0 */
		/* 821A9FD0h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R21,0x00000000);
		/* 821A9FD0h case    3:*/		return 0x821A9FD4;
		  /* 821A9FD4h */ case    4:  		/* bc 4, CR6_EQ, 36 */
		/* 821A9FD4h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821A9FF8;  }
		/* 821A9FD4h case    4:*/		return 0x821A9FD8;
		  /* 821A9FD8h */ case    5:  		/* cmplwi CR6, R20, 0 */
		/* 821A9FD8h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R20,0x00000000);
		/* 821A9FD8h case    5:*/		return 0x821A9FDC;
		  /* 821A9FDCh */ case    6:  		/* bc 4, CR6_EQ, 28 */
		/* 821A9FDCh case    6:*/		if ( !regs.CR[6].eq ) { return 0x821A9FF8;  }
		/* 821A9FDCh case    6:*/		return 0x821A9FE0;
		  /* 821A9FE0h */ case    7:  		/* lwz R30, <#[R1 + 1244]> */
		/* 821A9FE0h case    7:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000004DC) );
		/* 821A9FE0h case    7:*/		return 0x821A9FE4;
		  /* 821A9FE4h */ case    8:  		/* lwz R11, <#[R4 + 28]> */
		/* 821A9FE4h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x0000001C) );
		/* 821A9FE4h case    8:*/		return 0x821A9FE8;
		  /* 821A9FE8h */ case    9:  		/* lwz R10, <#[R30 + 28]> */
		/* 821A9FE8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x0000001C) );
		/* 821A9FE8h case    9:*/		return 0x821A9FEC;
		  /* 821A9FECh */ case   10:  		/* cmpw CR6, R11, R10 */
		/* 821A9FECh case   10:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R10);
		/* 821A9FECh case   10:*/		return 0x821A9FF0;
		  /* 821A9FF0h */ case   11:  		/* bc 4, CR6_EQ, 112 */
		/* 821A9FF0h case   11:*/		if ( !regs.CR[6].eq ) { return 0x821AA060;  }
		/* 821A9FF0h case   11:*/		return 0x821A9FF4;
		  /* 821A9FF4h */ case   12:  		/* b 8 */
		/* 821A9FF4h case   12:*/		return 0x821A9FFC;
		/* 821A9FF4h case   12:*/		return 0x821A9FF8;
	}
	return 0x821A9FF8;
} // Block from 821A9FC4h-821A9FF8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821A9FF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9FF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9FF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9FF8);
		  /* 821A9FF8h */ case    0:  		/* lwz R30, <#[R1 + 1244]> */
		/* 821A9FF8h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000004DC) );
		/* 821A9FF8h case    0:*/		return 0x821A9FFC;
	}
	return 0x821A9FFC;
} // Block from 821A9FF8h-821A9FFCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821A9FFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821A9FFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821A9FFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821A9FFC);
		  /* 821A9FFCh */ case    0:  		/* addi R10, R1, 204 */
		/* 821A9FFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xCC);
		/* 821A9FFCh case    0:*/		return 0x821AA000;
		  /* 821AA000h */ case    1:  		/* mtspr CTR, R14 */
		/* 821AA000h case    1:*/		regs.CTR = regs.R14;
		/* 821AA000h case    1:*/		return 0x821AA004;
		  /* 821AA004h */ case    2:  		/* li R6, 0 */
		/* 821AA004h case    2:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AA004h case    2:*/		return 0x821AA008;
		  /* 821AA008h */ case    3:  		/* li R11, 0 */
		/* 821AA008h case    3:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AA008h case    3:*/		return 0x821AA00C;
		  /* 821AA00Ch */ case    4:  		/* li R8, 3 */
		/* 821AA00Ch case    4:*/		cpu::op::li<0>(regs,&regs.R8,0x3);
		/* 821AA00Ch case    4:*/		return 0x821AA010;
		  /* 821AA010h */ case    5:  		/* lwzu R9, <#[R10 + 4]> */
		/* 821AA010h case    5:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000004) );
		regs.R10 = (uint32)(regs.R10 + 0x00000004);
		/* 821AA010h case    5:*/		return 0x821AA014;
		  /* 821AA014h */ case    6:  		/* slw R8, R8, R11 */
		/* 821AA014h case    6:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R8,regs.R11);
		/* 821AA014h case    6:*/		return 0x821AA018;
		  /* 821AA018h */ case    7:  		/* slw R9, R9, R11 */
		/* 821AA018h case    7:*/		cpu::op::slw<0>(regs,&regs.R9,regs.R9,regs.R11);
		/* 821AA018h case    7:*/		return 0x821AA01C;
		  /* 821AA01Ch */ case    8:  		/* andc R8, R6, R8 */
		/* 821AA01Ch case    8:*/		cpu::op::andc<0>(regs,&regs.R8,regs.R6,regs.R8);
		/* 821AA01Ch case    8:*/		return 0x821AA020;
		  /* 821AA020h */ case    9:  		/* addi R11, R11, 2 */
		/* 821AA020h case    9:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x2);
		/* 821AA020h case    9:*/		return 0x821AA024;
		  /* 821AA024h */ case   10:  		/* or R6, R8, R9 */
		/* 821AA024h case   10:*/		cpu::op::or<0>(regs,&regs.R6,regs.R8,regs.R9);
		/* 821AA024h case   10:*/		return 0x821AA028;
		  /* 821AA028h */ case   11:  		/* bc 16, CR0_LT, -28 */
		/* 821AA028h case   11:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821AA00C;  }
		/* 821AA028h case   11:*/		return 0x821AA02C;
		  /* 821AA02Ch */ case   12:  		/* lwz R31, <#[R1 + 1236]> */
		/* 821AA02Ch case   12:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AA02Ch case   12:*/		return 0x821AA030;
		  /* 821AA030h */ case   13:  		/* mr R5, R14 */
		/* 821AA030h case   13:*/		regs.R5 = regs.R14;
		/* 821AA030h case   13:*/		return 0x821AA034;
		  /* 821AA034h */ case   14:  		/* lwz R7, <#[R1 + 272]> */
		/* 821AA034h case   14:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000110) );
		/* 821AA034h case   14:*/		return 0x821AA038;
		  /* 821AA038h */ case   15:  		/* mr R3, R31 */
		/* 821AA038h case   15:*/		regs.R3 = regs.R31;
		/* 821AA038h case   15:*/		return 0x821AA03C;
		  /* 821AA03Ch */ case   16:  		/* bl -204668 */
		/* 821AA03Ch case   16:*/		regs.LR = 0x821AA040; return 0x821780C0;
		/* 821AA03Ch case   16:*/		return 0x821AA040;
		  /* 821AA040h */ case   17:  		/* mr R5, R3 */
		/* 821AA040h case   17:*/		regs.R5 = regs.R3;
		/* 821AA040h case   17:*/		return 0x821AA044;
		  /* 821AA044h */ case   18:  		/* li R6, 0 */
		/* 821AA044h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AA044h case   18:*/		return 0x821AA048;
		  /* 821AA048h */ case   19:  		/* mr R4, R30 */
		/* 821AA048h case   19:*/		regs.R4 = regs.R30;
		/* 821AA048h case   19:*/		return 0x821AA04C;
		  /* 821AA04Ch */ case   20:  		/* mr R3, R31 */
		/* 821AA04Ch case   20:*/		regs.R3 = regs.R31;
		/* 821AA04Ch case   20:*/		return 0x821AA050;
		  /* 821AA050h */ case   21:  		/* bl -19040 */
		/* 821AA050h case   21:*/		regs.LR = 0x821AA054; return 0x821A55F0;
		/* 821AA050h case   21:*/		return 0x821AA054;
		  /* 821AA054h */ case   22:  		/* lwz R3, <#[R1 + 336]> */
		/* 821AA054h case   22:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x00000150) );
		/* 821AA054h case   22:*/		return 0x821AA058;
		  /* 821AA058h */ case   23:  		/* b 2448 */
		/* 821AA058h case   23:*/		return 0x821AA9E8;
		/* 821AA058h case   23:*/		return 0x821AA05C;
	}
	return 0x821AA05C;
} // Block from 821A9FFCh-821AA05Ch (24 instructions)

//////////////////////////////////////////////////////
// Block at 821AA05Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA05C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA05C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA05C);
		  /* 821AA05Ch */ case    0:  		/* lwz R30, <#[R1 + 1244]> */
		/* 821AA05Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA05Ch case    0:*/		return 0x821AA060;
	}
	return 0x821AA060;
} // Block from 821AA05Ch-821AA060h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AA060h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA060( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA060) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA060);
		  /* 821AA060h */ case    0:  		/* cmplwi CR6, R18, 0 */
		/* 821AA060h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R18,0x00000000);
		/* 821AA060h case    0:*/		return 0x821AA064;
		  /* 821AA064h */ case    1:  		/* bc 12, CR6_EQ, 1828 */
		/* 821AA064h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AA788;  }
		/* 821AA064h case    1:*/		return 0x821AA068;
		  /* 821AA068h */ case    2:  		/* cmplwi CR6, R17, 0 */
		/* 821AA068h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R17,0x00000000);
		/* 821AA068h case    2:*/		return 0x821AA06C;
		  /* 821AA06Ch */ case    3:  		/* bc 12, CR6_EQ, 292 */
		/* 821AA06Ch case    3:*/		if ( regs.CR[6].eq ) { return 0x821AA190;  }
		/* 821AA06Ch case    3:*/		return 0x821AA070;
		  /* 821AA070h */ case    4:  		/* li R26, 0 */
		/* 821AA070h case    4:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821AA070h case    4:*/		return 0x821AA074;
		  /* 821AA074h */ case    5:  		/* mr R27, R16 */
		/* 821AA074h case    5:*/		regs.R27 = regs.R16;
		/* 821AA074h case    5:*/		return 0x821AA078;
		  /* 821AA078h */ case    6:  		/* lwz R11, <#[R27]> */
		/* 821AA078h case    6:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AA078h case    6:*/		return 0x821AA07C;
		  /* 821AA07Ch */ case    7:  		/* lwz R10, <#[R11]> */
		/* 821AA07Ch case    7:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AA07Ch case    7:*/		return 0x821AA080;
		  /* 821AA080h */ case    8:  		/* rlwinm. R10, R10, 0, 27, 31 */
		/* 821AA080h case    8:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821AA080h case    8:*/		return 0x821AA084;
		  /* 821AA084h */ case    9:  		/* bc 4, CR0_EQ, 248 */
		/* 821AA084h case    9:*/		if ( !regs.CR[0].eq ) { return 0x821AA17C;  }
		/* 821AA084h case    9:*/		return 0x821AA088;
		  /* 821AA088h */ case   10:  		/* lwz R24, <#[R11 + 12]> */
		/* 821AA088h case   10:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AA088h case   10:*/		return 0x821AA08C;
		  /* 821AA08Ch */ case   11:  		/* lwz R11, <#[R24 + 8]> */
		/* 821AA08Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821AA08Ch case   11:*/		return 0x821AA090;
		  /* 821AA090h */ case   12:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AA090h case   12:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AA090h case   12:*/		return 0x821AA094;
		  /* 821AA094h */ case   13:  		/* cmplwi CR6, R11, 256 */
		/* 821AA094h case   13:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821AA094h case   13:*/		return 0x821AA098;
		  /* 821AA098h */ case   14:  		/* bc 4, CR6_EQ, 228 */
		/* 821AA098h case   14:*/		if ( !regs.CR[6].eq ) { return 0x821AA17C;  }
		/* 821AA098h case   14:*/		return 0x821AA09C;
		  /* 821AA09Ch */ case   15:  		/* li R30, 0 */
		/* 821AA09Ch case   15:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821AA09Ch case   15:*/		return 0x821AA0A0;
		  /* 821AA0A0h */ case   16:  		/* mr R28, R16 */
		/* 821AA0A0h case   16:*/		regs.R28 = regs.R16;
		/* 821AA0A0h case   16:*/		return 0x821AA0A4;
		  /* 821AA0A4h */ case   17:  		/* lwz R11, <#[R28]> */
		/* 821AA0A4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821AA0A4h case   17:*/		return 0x821AA0A8;
		  /* 821AA0A8h */ case   18:  		/* lwz R31, <#[R11]> */
		/* 821AA0A8h case   18:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R11 + 0x00000000) );
		/* 821AA0A8h case   18:*/		return 0x821AA0AC;
		  /* 821AA0ACh */ case   19:  		/* rlwinm. R10, R31, 0, 27, 31 */
		/* 821AA0ACh case   19:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R10,regs.R31);
		/* 821AA0ACh case   19:*/		return 0x821AA0B0;
		  /* 821AA0B0h */ case   20:  		/* bc 4, CR0_EQ, 188 */
		/* 821AA0B0h case   20:*/		if ( !regs.CR[0].eq ) { return 0x821AA16C;  }
		/* 821AA0B0h case   20:*/		return 0x821AA0B4;
		  /* 821AA0B4h */ case   21:  		/* lwz R23, <#[R11 + 12]> */
		/* 821AA0B4h case   21:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AA0B4h case   21:*/		return 0x821AA0B8;
		  /* 821AA0B8h */ case   22:  		/* lwz R11, <#[R23 + 8]> */
		/* 821AA0B8h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821AA0B8h case   22:*/		return 0x821AA0BC;
		  /* 821AA0BCh */ case   23:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AA0BCh case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AA0BCh case   23:*/		return 0x821AA0C0;
		  /* 821AA0C0h */ case   24:  		/* cmplwi CR6, R11, 384 */
		/* 821AA0C0h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000180);
		/* 821AA0C0h case   24:*/		return 0x821AA0C4;
		  /* 821AA0C4h */ case   25:  		/* bc 4, CR6_EQ, 168 */
		/* 821AA0C4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821AA16C;  }
		/* 821AA0C4h case   25:*/		return 0x821AA0C8;
		  /* 821AA0C8h */ case   26:  		/* lwz R10, <#[R23 + 4]> */
		/* 821AA0C8h case   26:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 821AA0C8h case   26:*/		return 0x821AA0CC;
		  /* 821AA0CCh */ case   27:  		/* lwz R21, <#[R1 + 1244]> */
		/* 821AA0CCh case   27:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA0CCh case   27:*/		return 0x821AA0D0;
		  /* 821AA0D0h */ case   28:  		/* cmplwi CR6, R10, 0 */
		/* 821AA0D0h case   28:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AA0D0h case   28:*/		return 0x821AA0D4;
		  /* 821AA0D4h */ case   29:  		/* bc 12, CR6_EQ, 40 */
		/* 821AA0D4h case   29:*/		if ( regs.CR[6].eq ) { return 0x821AA0FC;  }
		/* 821AA0D4h case   29:*/		return 0x821AA0D8;
		  /* 821AA0D8h */ case   30:  		/* lwz R11, <#[R10 + 16]> */
		/* 821AA0D8h case   30:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821AA0D8h case   30:*/		return 0x821AA0DC;
		  /* 821AA0DCh */ case   31:  		/* cmplwi CR6, R11, 0 */
		/* 821AA0DCh case   31:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AA0DCh case   31:*/		return 0x821AA0E0;
		  /* 821AA0E0h */ case   32:  		/* bc 12, CR6_EQ, 12 */
		/* 821AA0E0h case   32:*/		if ( regs.CR[6].eq ) { return 0x821AA0EC;  }
		/* 821AA0E0h case   32:*/		return 0x821AA0E4;
		  /* 821AA0E4h */ case   33:  		/* cmplw CR6, R11, R21 */
		/* 821AA0E4h case   33:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R21);
		/* 821AA0E4h case   33:*/		return 0x821AA0E8;
		  /* 821AA0E8h */ case   34:  		/* bc 4, CR6_EQ, 12 */
		/* 821AA0E8h case   34:*/		if ( !regs.CR[6].eq ) { return 0x821AA0F4;  }
		/* 821AA0E8h case   34:*/		return 0x821AA0EC;
	}
	return 0x821AA0EC;
} // Block from 821AA060h-821AA0ECh (35 instructions)

//////////////////////////////////////////////////////
// Block at 821AA0ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA0EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA0EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA0EC);
		  /* 821AA0ECh */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AA0ECh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AA0ECh case    0:*/		return 0x821AA0F0;
		  /* 821AA0F0h */ case    1:  		/* b -32 */
		/* 821AA0F0h case    1:*/		return 0x821AA0D0;
		/* 821AA0F0h case    1:*/		return 0x821AA0F4;
	}
	return 0x821AA0F4;
} // Block from 821AA0ECh-821AA0F4h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA0F4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA0F4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA0F4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA0F4);
		  /* 821AA0F4h */ case    0:  		/* li R11, 1 */
		/* 821AA0F4h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AA0F4h case    0:*/		return 0x821AA0F8;
		  /* 821AA0F8h */ case    1:  		/* b 8 */
		/* 821AA0F8h case    1:*/		return 0x821AA100;
		/* 821AA0F8h case    1:*/		return 0x821AA0FC;
	}
	return 0x821AA0FC;
} // Block from 821AA0F4h-821AA0FCh (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA0FCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA0FC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA0FC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA0FC);
		  /* 821AA0FCh */ case    0:  		/* li R11, 0 */
		/* 821AA0FCh case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AA0FCh case    0:*/		return 0x821AA100;
	}
	return 0x821AA100;
} // Block from 821AA0FCh-821AA100h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AA100h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA100( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA100) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA100);
		  /* 821AA100h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AA100h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AA100h case    0:*/		return 0x821AA104;
		  /* 821AA104h */ case    1:  		/* bc 4, CR0_EQ, 104 */
		/* 821AA104h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AA16C;  }
		/* 821AA104h case    1:*/		return 0x821AA108;
		  /* 821AA108h */ case    2:  		/* lwz R25, <#[R23 + 44]> */
		/* 821AA108h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R23 + 0x0000002C) );
		/* 821AA108h case    2:*/		return 0x821AA10C;
		  /* 821AA10Ch */ case    3:  		/* lwz R4, <#[R23 + 48]> */
		/* 821AA10Ch case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R23 + 0x00000030) );
		/* 821AA10Ch case    3:*/		return 0x821AA110;
		  /* 821AA110h */ case    4:  		/* mr R3, R25 */
		/* 821AA110h case    4:*/		regs.R3 = regs.R25;
		/* 821AA110h case    4:*/		return 0x821AA114;
		  /* 821AA114h */ case    5:  		/* bl -286348 */
		/* 821AA114h case    5:*/		regs.LR = 0x821AA118; return 0x82164288;
		/* 821AA114h case    5:*/		return 0x821AA118;
		  /* 821AA118h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AA118h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AA118h case    6:*/		return 0x821AA11C;
		  /* 821AA11Ch */ case    7:  		/* bc 12, CR0_EQ, 80 */
		/* 821AA11Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821AA16C;  }
		/* 821AA11Ch case    7:*/		return 0x821AA120;
		  /* 821AA120h */ case    8:  		/* lwz R22, <#[R1 + 1236]> */
		/* 821AA120h case    8:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AA120h case    8:*/		return 0x821AA124;
		  /* 821AA124h */ case    9:  		/* rlwinm R5, R31, 27, 30, 31 */
		/* 821AA124h case    9:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R5,regs.R31);
		/* 821AA124h case    9:*/		return 0x821AA128;
		  /* 821AA128h */ case   10:  		/* mr R4, R25 */
		/* 821AA128h case   10:*/		regs.R4 = regs.R25;
		/* 821AA128h case   10:*/		return 0x821AA12C;
		  /* 821AA12Ch */ case   11:  		/* mr R3, R22 */
		/* 821AA12Ch case   11:*/		regs.R3 = regs.R22;
		/* 821AA12Ch case   11:*/		return 0x821AA130;
		  /* 821AA130h */ case   12:  		/* bl 276560 */
		/* 821AA130h case   12:*/		regs.LR = 0x821AA134; return 0x821ED980;
		/* 821AA130h case   12:*/		return 0x821AA134;
		  /* 821AA134h */ case   13:  		/* mr R29, R3 */
		/* 821AA134h case   13:*/		regs.R29 = regs.R3;
		/* 821AA134h case   13:*/		return 0x821AA138;
		  /* 821AA138h */ case   14:  		/* mr R5, R3 */
		/* 821AA138h case   14:*/		regs.R5 = regs.R3;
		/* 821AA138h case   14:*/		return 0x821AA13C;
		  /* 821AA13Ch */ case   15:  		/* li R8, 1 */
		/* 821AA13Ch case   15:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821AA13Ch case   15:*/		return 0x821AA140;
		  /* 821AA140h */ case   16:  		/* li R7, 1 */
		/* 821AA140h case   16:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821AA140h case   16:*/		return 0x821AA144;
		  /* 821AA144h */ case   17:  		/* addi R6, R1, 384 */
		/* 821AA144h case   17:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x180);
		/* 821AA144h case   17:*/		return 0x821AA148;
		  /* 821AA148h */ case   18:  		/* mr R4, R24 */
		/* 821AA148h case   18:*/		regs.R4 = regs.R24;
		/* 821AA148h case   18:*/		return 0x821AA14C;
		  /* 821AA14Ch */ case   19:  		/* mr R3, R22 */
		/* 821AA14Ch case   19:*/		regs.R3 = regs.R22;
		/* 821AA14Ch case   19:*/		return 0x821AA150;
		  /* 821AA150h */ case   20:  		/* bl -43736 */
		/* 821AA150h case   20:*/		regs.LR = 0x821AA154; return 0x8219F678;
		/* 821AA150h case   20:*/		return 0x821AA154;
		  /* 821AA154h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AA154h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AA154h case   21:*/		return 0x821AA158;
		  /* 821AA158h */ case   22:  		/* lwz R11, <#[R21 + 8]> */
		/* 821AA158h case   22:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821AA158h case   22:*/		return 0x821AA15C;
		  /* 821AA15Ch */ case   23:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AA15Ch case   23:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AA15Ch case   23:*/		return 0x821AA160;
		  /* 821AA160h */ case   24:  		/* cmplwi CR6, R11, 14720 */
		/* 821AA160h case   24:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821AA160h case   24:*/		return 0x821AA164;
		  /* 821AA164h */ case   25:  		/* bc 4, CR0_EQ, 156 */
		/* 821AA164h case   25:*/		if ( !regs.CR[0].eq ) { return 0x821AA200;  }
		/* 821AA164h case   25:*/		return 0x821AA168;
		  /* 821AA168h */ case   26:  		/* bc 12, CR6_EQ, 2172 */
		/* 821AA168h case   26:*/		if ( regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821AA168h case   26:*/		return 0x821AA16C;
	}
	return 0x821AA16C;
} // Block from 821AA100h-821AA16Ch (27 instructions)

//////////////////////////////////////////////////////
// Block at 821AA16Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA16C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA16C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA16C);
		  /* 821AA16Ch */ case    0:  		/* addi R30, R30, 1 */
		/* 821AA16Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821AA16Ch case    0:*/		return 0x821AA170;
		  /* 821AA170h */ case    1:  		/* addi R28, R28, 4 */
		/* 821AA170h case    1:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x4);
		/* 821AA170h case    1:*/		return 0x821AA174;
		  /* 821AA174h */ case    2:  		/* cmplw CR6, R30, R14 */
		/* 821AA174h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R14);
		/* 821AA174h case    2:*/		return 0x821AA178;
		  /* 821AA178h */ case    3:  		/* bc 12, CR6_LT, -212 */
		/* 821AA178h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AA0A4;  }
		/* 821AA178h case    3:*/		return 0x821AA17C;
	}
	return 0x821AA17C;
} // Block from 821AA16Ch-821AA17Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AA17Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA17C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA17C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA17C);
		  /* 821AA17Ch */ case    0:  		/* addi R26, R26, 1 */
		/* 821AA17Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821AA17Ch case    0:*/		return 0x821AA180;
		  /* 821AA180h */ case    1:  		/* addi R27, R27, 4 */
		/* 821AA180h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821AA180h case    1:*/		return 0x821AA184;
		  /* 821AA184h */ case    2:  		/* cmplw CR6, R26, R14 */
		/* 821AA184h case    2:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R14);
		/* 821AA184h case    2:*/		return 0x821AA188;
		  /* 821AA188h */ case    3:  		/* bc 12, CR6_LT, -272 */
		/* 821AA188h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AA078;  }
		/* 821AA188h case    3:*/		return 0x821AA18C;
		  /* 821AA18Ch */ case    4:  		/* lwz R30, <#[R1 + 1244]> */
		/* 821AA18Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA18Ch case    4:*/		return 0x821AA190;
	}
	return 0x821AA190;
} // Block from 821AA17Ch-821AA190h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AA190h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA190( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA190) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA190);
		  /* 821AA190h */ case    0:  		/* cmplwi CR6, R15, 0 */
		/* 821AA190h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R15,0x00000000);
		/* 821AA190h case    0:*/		return 0x821AA194;
		  /* 821AA194h */ case    1:  		/* bc 12, CR6_EQ, 1524 */
		/* 821AA194h case    1:*/		if ( regs.CR[6].eq ) { return 0x821AA788;  }
		/* 821AA194h case    1:*/		return 0x821AA198;
		  /* 821AA198h */ case    2:  		/* lwz R11, <#[R1 + 1236]> */
		/* 821AA198h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AA198h case    2:*/		return 0x821AA19C;
		  /* 821AA19Ch */ case    3:  		/* lwz R11, <#[R11 + 664]> */
		/* 821AA19Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000298) );
		/* 821AA19Ch case    3:*/		return 0x821AA1A0;
		  /* 821AA1A0h */ case    4:  		/* cmplwi CR6, R11, 3 */
		/* 821AA1A0h case    4:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000003);
		/* 821AA1A0h case    4:*/		return 0x821AA1A4;
		  /* 821AA1A4h */ case    5:  		/* bc 12, CR6_LT, 1508 */
		/* 821AA1A4h case    5:*/		if ( regs.CR[6].lt ) { return 0x821AA788;  }
		/* 821AA1A4h case    5:*/		return 0x821AA1A8;
		  /* 821AA1A8h */ case    6:  		/* li R16, 0 */
		/* 821AA1A8h case    6:*/		cpu::op::li<0>(regs,&regs.R16,0x0);
		/* 821AA1A8h case    6:*/		return 0x821AA1AC;
		  /* 821AA1ACh */ case    7:  		/* addi R17, R30, 44 */
		/* 821AA1ACh case    7:*/		cpu::op::addi<0>(regs,&regs.R17,regs.R30,0x2C);
		/* 821AA1ACh case    7:*/		return 0x821AA1B0;
		  /* 821AA1B0h */ case    8:  		/* li R18, 0 */
		/* 821AA1B0h case    8:*/		cpu::op::li<0>(regs,&regs.R18,0x0);
		/* 821AA1B0h case    8:*/		return 0x821AA1B4;
		  /* 821AA1B4h */ case    9:  		/* mr R19, R17 */
		/* 821AA1B4h case    9:*/		regs.R19 = regs.R17;
		/* 821AA1B4h case    9:*/		return 0x821AA1B8;
		  /* 821AA1B8h */ case   10:  		/* cmplw CR6, R18, R14 */
		/* 821AA1B8h case   10:*/		cpu::op::cmplw<6>(regs,regs.R18,regs.R14);
		/* 821AA1B8h case   10:*/		return 0x821AA1BC;
		  /* 821AA1BCh */ case   11:  		/* bc 4, CR6_LT, 1476 */
		/* 821AA1BCh case   11:*/		if ( !regs.CR[6].lt ) { return 0x821AA780;  }
		/* 821AA1BCh case   11:*/		return 0x821AA1C0;
		  /* 821AA1C0h */ case   12:  		/* lwz R11, <#[R19]> */
		/* 821AA1C0h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R19 + 0x00000000) );
		/* 821AA1C0h case   12:*/		return 0x821AA1C4;
		  /* 821AA1C4h */ case   13:  		/* lwz R21, <#[R11 + 12]> */
		/* 821AA1C4h case   13:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AA1C4h case   13:*/		return 0x821AA1C8;
		  /* 821AA1C8h */ case   14:  		/* lwz R9, <#[R21 + 8]> */
		/* 821AA1C8h case   14:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R21 + 0x00000008) );
		/* 821AA1C8h case   14:*/		return 0x821AA1CC;
		  /* 821AA1CCh */ case   15:  		/* rlwinm R11, R9, 0, 18, 24 */
		/* 821AA1CCh case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R9);
		/* 821AA1CCh case   15:*/		return 0x821AA1D0;
		  /* 821AA1D0h */ case   16:  		/* cmplwi CR6, R11, 128 */
		/* 821AA1D0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821AA1D0h case   16:*/		return 0x821AA1D4;
		  /* 821AA1D4h */ case   17:  		/* bc 4, CR6_EQ, 884 */
		/* 821AA1D4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821AA548;  }
		/* 821AA1D4h case   17:*/		return 0x821AA1D8;
		  /* 821AA1D8h */ case   18:  		/* lwz R10, <#[R21 + 4]> */
		/* 821AA1D8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000004) );
		/* 821AA1D8h case   18:*/		return 0x821AA1DC;
		  /* 821AA1DCh */ case   19:  		/* cmplwi CR6, R10, 0 */
		/* 821AA1DCh case   19:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AA1DCh case   19:*/		return 0x821AA1E0;
		  /* 821AA1E0h */ case   20:  		/* bc 12, CR6_EQ, 444 */
		/* 821AA1E0h case   20:*/		if ( regs.CR[6].eq ) { return 0x821AA39C;  }
		/* 821AA1E0h case   20:*/		return 0x821AA1E4;
		  /* 821AA1E4h */ case   21:  		/* lwz R11, <#[R10 + 16]> */
		/* 821AA1E4h case   21:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821AA1E4h case   21:*/		return 0x821AA1E8;
		  /* 821AA1E8h */ case   22:  		/* cmplwi CR6, R11, 0 */
		/* 821AA1E8h case   22:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AA1E8h case   22:*/		return 0x821AA1EC;
		  /* 821AA1ECh */ case   23:  		/* bc 12, CR6_EQ, 12 */
		/* 821AA1ECh case   23:*/		if ( regs.CR[6].eq ) { return 0x821AA1F8;  }
		/* 821AA1ECh case   23:*/		return 0x821AA1F0;
		  /* 821AA1F0h */ case   24:  		/* cmplw CR6, R11, R30 */
		/* 821AA1F0h case   24:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821AA1F0h case   24:*/		return 0x821AA1F4;
		  /* 821AA1F4h */ case   25:  		/* bc 4, CR6_EQ, 416 */
		/* 821AA1F4h case   25:*/		if ( !regs.CR[6].eq ) { return 0x821AA394;  }
		/* 821AA1F4h case   25:*/		return 0x821AA1F8;
	}
	return 0x821AA1F8;
} // Block from 821AA190h-821AA1F8h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821AA1F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA1F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA1F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA1F8);
		  /* 821AA1F8h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AA1F8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AA1F8h case    0:*/		return 0x821AA1FC;
		  /* 821AA1FCh */ case    1:  		/* b -32 */
		/* 821AA1FCh case    1:*/		return 0x821AA1DC;
		/* 821AA1FCh case    1:*/		return 0x821AA200;
	}
	return 0x821AA200;
} // Block from 821AA1F8h-821AA200h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA200h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA200( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA200) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA200);
		  /* 821AA200h */ case    0:  		/* bc 4, CR6_EQ, 124 */
		/* 821AA200h case    0:*/		if ( !regs.CR[6].eq ) { return 0x821AA27C;  }
		/* 821AA200h case    0:*/		return 0x821AA204;
		  /* 821AA204h */ case    1:  		/* mr R3, R24 */
		/* 821AA204h case    1:*/		regs.R3 = regs.R24;
		/* 821AA204h case    1:*/		return 0x821AA208;
		  /* 821AA208h */ case    2:  		/* bl -211336 */
		/* 821AA208h case    2:*/		regs.LR = 0x821AA20C; return 0x82176880;
		/* 821AA208h case    2:*/		return 0x821AA20C;
		  /* 821AA20Ch */ case    3:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AA20Ch case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AA20Ch case    3:*/		return 0x821AA210;
		  /* 821AA210h */ case    4:  		/* mr R21, R3 */
		/* 821AA210h case    4:*/		regs.R21 = regs.R3;
		/* 821AA210h case    4:*/		return 0x821AA214;
		  /* 821AA214h */ case    5:  		/* li R30, 0 */
		/* 821AA214h case    5:*/		cpu::op::li<0>(regs,&regs.R30,0x0);
		/* 821AA214h case    5:*/		return 0x821AA218;
		  /* 821AA218h */ case    6:  		/* rlwinm. R9, R11, 13, 29, 31 */
		/* 821AA218h case    6:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R9,regs.R11);
		/* 821AA218h case    6:*/		return 0x821AA21C;
		  /* 821AA21Ch */ case    7:  		/* bc 12, CR0_EQ, 84 */
		/* 821AA21Ch case    7:*/		if ( regs.CR[0].eq ) { return 0x821AA270;  }
		/* 821AA21Ch case    7:*/		return 0x821AA220;
		  /* 821AA220h */ case    8:  		/* addi R16, R3, 44 */
		/* 821AA220h case    8:*/		cpu::op::addi<0>(regs,&regs.R16,regs.R3,0x2C);
		/* 821AA220h case    8:*/		return 0x821AA224;
		  /* 821AA224h */ case    9:  		/* mr R11, R16 */
		/* 821AA224h case    9:*/		regs.R11 = regs.R16;
		/* 821AA224h case    9:*/		return 0x821AA228;
		  /* 821AA228h */ case   10:  		/* lwz R10, <#[R11]> */
		/* 821AA228h case   10:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AA228h case   10:*/		return 0x821AA22C;
		  /* 821AA22Ch */ case   11:  		/* lwz R8, <#[R10]> */
		/* 821AA22Ch case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R10 + 0x00000000) );
		/* 821AA22Ch case   11:*/		return 0x821AA230;
		  /* 821AA230h */ case   12:  		/* rlwinm. R8, R8, 0, 27, 31 */
		/* 821AA230h case   12:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R8,regs.R8);
		/* 821AA230h case   12:*/		return 0x821AA234;
		  /* 821AA234h */ case   13:  		/* bc 4, CR0_EQ, 36 */
		/* 821AA234h case   13:*/		if ( !regs.CR[0].eq ) { return 0x821AA258;  }
		/* 821AA234h case   13:*/		return 0x821AA238;
		  /* 821AA238h */ case   14:  		/* lwz R23, <#[R10 + 12]> */
		/* 821AA238h case   14:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R10 + 0x0000000C) );
		/* 821AA238h case   14:*/		return 0x821AA23C;
		  /* 821AA23Ch */ case   15:  		/* lwz R10, <#[R23 + 8]> */
		/* 821AA23Ch case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 821AA23Ch case   15:*/		return 0x821AA240;
		  /* 821AA240h */ case   16:  		/* rlwinm R10, R10, 0, 18, 24 */
		/* 821AA240h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R10);
		/* 821AA240h case   16:*/		return 0x821AA244;
		  /* 821AA244h */ case   17:  		/* cmplwi CR6, R10, 384 */
		/* 821AA244h case   17:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000180);
		/* 821AA244h case   17:*/		return 0x821AA248;
		  /* 821AA248h */ case   18:  		/* bc 4, CR6_EQ, 16 */
		/* 821AA248h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821AA258;  }
		/* 821AA248h case   18:*/		return 0x821AA24C;
		  /* 821AA24Ch */ case   19:  		/* lwz R10, <#[R23 + 44]> */
		/* 821AA24Ch case   19:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x0000002C) );
		/* 821AA24Ch case   19:*/		return 0x821AA250;
		  /* 821AA250h */ case   20:  		/* cmplw CR6, R25, R10 */
		/* 821AA250h case   20:*/		cpu::op::cmplw<6>(regs,regs.R25,regs.R10);
		/* 821AA250h case   20:*/		return 0x821AA254;
		  /* 821AA254h */ case   21:  		/* bc 12, CR6_EQ, 20 */
		/* 821AA254h case   21:*/		if ( regs.CR[6].eq ) { return 0x821AA268;  }
		/* 821AA254h case   21:*/		return 0x821AA258;
	}
	return 0x821AA258;
} // Block from 821AA200h-821AA258h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821AA258h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA258( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA258) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA258);
		  /* 821AA258h */ case    0:  		/* addi R30, R30, 1 */
		/* 821AA258h case    0:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821AA258h case    0:*/		return 0x821AA25C;
		  /* 821AA25Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 821AA25Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AA25Ch case    1:*/		return 0x821AA260;
		  /* 821AA260h */ case    2:  		/* cmplw CR6, R30, R9 */
		/* 821AA260h case    2:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R9);
		/* 821AA260h case    2:*/		return 0x821AA264;
		  /* 821AA264h */ case    3:  		/* bc 12, CR6_LT, -60 */
		/* 821AA264h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AA228;  }
		/* 821AA264h case    3:*/		return 0x821AA268;
	}
	return 0x821AA268;
} // Block from 821AA258h-821AA268h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AA268h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA268( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA268) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA268);
		  /* 821AA268h */ case    0:  		/* cmplw CR6, R30, R9 */
		/* 821AA268h case    0:*/		cpu::op::cmplw<6>(regs,regs.R30,regs.R9);
		/* 821AA268h case    0:*/		return 0x821AA26C;
		  /* 821AA26Ch */ case    1:  		/* bc 12, CR6_LT, 16 */
		/* 821AA26Ch case    1:*/		if ( regs.CR[6].lt ) { return 0x821AA27C;  }
		/* 821AA26Ch case    1:*/		return 0x821AA270;
	}
	return 0x821AA270;
} // Block from 821AA268h-821AA270h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA270h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA270( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA270) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA270);
		  /* 821AA270h */ case    0:  		/* li R4, 4800 */
		/* 821AA270h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821AA270h case    0:*/		return 0x821AA274;
		  /* 821AA274h */ case    1:  		/* mr R3, R22 */
		/* 821AA274h case    1:*/		regs.R3 = regs.R22;
		/* 821AA274h case    1:*/		return 0x821AA278;
		  /* 821AA278h */ case    2:  		/* bl -361488 */
		/* 821AA278h case    2:*/		regs.LR = 0x821AA27C; return 0x82151E68;
		/* 821AA278h case    2:*/		return 0x821AA27C;
	}
	return 0x821AA27C;
} // Block from 821AA270h-821AA27Ch (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA27Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA27C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA27C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA27C);
		  /* 821AA27Ch */ case    0:  		/* addi R7, R1, 384 */
		/* 821AA27Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x180);
		/* 821AA27Ch case    0:*/		return 0x821AA280;
	}
	return 0x821AA280;
} // Block from 821AA27Ch-821AA280h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AA280h
// Function '?Unsimplify@Compiler@D3DXShader@@AAAPAVInstruction@2@PAV32@I@Z'
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA280( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA280) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA280);
		  /* 821AA280h */ case    0:  		/* mr R6, R21 */
		/* 821AA280h case    0:*/		regs.R6 = regs.R21;
		/* 821AA280h case    0:*/		return 0x821AA284;
		  /* 821AA284h */ case    1:  		/* mr R5, R29 */
		/* 821AA284h case    1:*/		regs.R5 = regs.R29;
		/* 821AA284h case    1:*/		return 0x821AA288;
		  /* 821AA288h */ case    2:  		/* mr R4, R24 */
		/* 821AA288h case    2:*/		regs.R4 = regs.R24;
		/* 821AA288h case    2:*/		return 0x821AA28C;
		  /* 821AA28Ch */ case    3:  		/* mr R3, R22 */
		/* 821AA28Ch case    3:*/		regs.R3 = regs.R22;
		/* 821AA28Ch case    3:*/		return 0x821AA290;
		  /* 821AA290h */ case    4:  		/* bl -33976 */
		/* 821AA290h case    4:*/		regs.LR = 0x821AA294; return 0x821A1DD8;
		/* 821AA290h case    4:*/		return 0x821AA294;
		  /* 821AA294h */ case    5:  		/* mr R31, R3 */
		/* 821AA294h case    5:*/		regs.R31 = regs.R3;
		/* 821AA294h case    5:*/		return 0x821AA298;
		  /* 821AA298h */ case    6:  		/* mr R5, R3 */
		/* 821AA298h case    6:*/		regs.R5 = regs.R3;
		/* 821AA298h case    6:*/		return 0x821AA29C;
		  /* 821AA29Ch */ case    7:  		/* mr R6, R22 */
		/* 821AA29Ch case    7:*/		regs.R6 = regs.R22;
		/* 821AA29Ch case    7:*/		return 0x821AA2A0;
		  /* 821AA2A0h */ case    8:  		/* mr R4, R30 */
		/* 821AA2A0h case    8:*/		regs.R4 = regs.R30;
		/* 821AA2A0h case    8:*/		return 0x821AA2A4;
		  /* 821AA2A4h */ case    9:  		/* mr R3, R21 */
		/* 821AA2A4h case    9:*/		regs.R3 = regs.R21;
		/* 821AA2A4h case    9:*/		return 0x821AA2A8;
		  /* 821AA2A8h */ case   10:  		/* bl -197808 */
		/* 821AA2A8h case   10:*/		regs.LR = 0x821AA2AC; return 0x82179DF8;
		/* 821AA2A8h case   10:*/		return 0x821AA2AC;
		  /* 821AA2ACh */ case   11:  		/* li R6, 0 */
		/* 821AA2ACh case   11:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AA2ACh case   11:*/		return 0x821AA2B0;
		  /* 821AA2B0h */ case   12:  		/* mr R7, R16 */
		/* 821AA2B0h case   12:*/		regs.R7 = regs.R16;
		/* 821AA2B0h case   12:*/		return 0x821AA2B4;
		  /* 821AA2B4h */ case   13:  		/* lwz R11, <#[R21 + 8]> */
		/* 821AA2B4h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000008) );
		/* 821AA2B4h case   13:*/		return 0x821AA2B8;
		  /* 821AA2B8h */ case   14:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821AA2B8h case   14:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821AA2B8h case   14:*/		return 0x821AA2BC;
		  /* 821AA2BCh */ case   15:  		/* cmplw CR6, R6, R11 */
		/* 821AA2BCh case   15:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R11);
		/* 821AA2BCh case   15:*/		return 0x821AA2C0;
		  /* 821AA2C0h */ case   16:  		/* bc 4, CR6_LT, 88 */
		/* 821AA2C0h case   16:*/		if ( !regs.CR[6].lt ) { return 0x821AA318;  }
		/* 821AA2C0h case   16:*/		return 0x821AA2C4;
		  /* 821AA2C4h */ case   17:  		/* lwz R11, <#[R7]> */
		/* 821AA2C4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821AA2C4h case   17:*/		return 0x821AA2C8;
		  /* 821AA2C8h */ case   18:  		/* lwz R10, <#[R11 + 12]> */
		/* 821AA2C8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AA2C8h case   18:*/		return 0x821AA2CC;
		  /* 821AA2CCh */ case   19:  		/* cmplw CR6, R10, R24 */
		/* 821AA2CCh case   19:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R24);
		/* 821AA2CCh case   19:*/		return 0x821AA2D0;
		  /* 821AA2D0h */ case   20:  		/* bc 4, CR6_EQ, 60 */
		/* 821AA2D0h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821AA30C;  }
		/* 821AA2D0h case   20:*/		return 0x821AA2D4;
		  /* 821AA2D4h */ case   21:  		/* addi R10, R10, 4 */
		/* 821AA2D4h case   21:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x4);
		/* 821AA2D4h case   21:*/		return 0x821AA2D8;
		  /* 821AA2D8h */ case   22:  		/* lwz R8, <#[R31 + 12]> */
		/* 821AA2D8h case   22:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AA2D8h case   22:*/		return 0x821AA2DC;
		  /* 821AA2DCh */ case   23:  		/* lwz R9, <#[R10]> */
		/* 821AA2DCh case   23:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AA2DCh case   23:*/		return 0x821AA2E0;
		  /* 821AA2E0h */ case   24:  		/* b 12 */
		/* 821AA2E0h case   24:*/		return 0x821AA2EC;
		/* 821AA2E0h case   24:*/		return 0x821AA2E4;
		  /* 821AA2E4h */ case   25:  		/* addi R10, R9, 8 */
		/* 821AA2E4h case   25:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x8);
		/* 821AA2E4h case   25:*/		return 0x821AA2E8;
		  /* 821AA2E8h */ case   26:  		/* lwz R9, <#[R9 + 8]> */
		/* 821AA2E8h case   26:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821AA2E8h case   26:*/		return 0x821AA2EC;
	}
	return 0x821AA2EC;
} // Block from 821AA280h-821AA2ECh (27 instructions)

//////////////////////////////////////////////////////
// Block at 821AA2ECh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA2EC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA2EC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA2EC);
		  /* 821AA2ECh */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AA2ECh case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AA2ECh case    0:*/		return 0x821AA2F0;
		  /* 821AA2F0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AA2F0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AA2E4;  }
		/* 821AA2F0h case    1:*/		return 0x821AA2F4;
		  /* 821AA2F4h */ case    2:  		/* lwz R9, <#[R11 + 8]> */
		/* 821AA2F4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000008) );
		/* 821AA2F4h case    2:*/		return 0x821AA2F8;
		  /* 821AA2F8h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AA2F8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AA2F8h case    3:*/		return 0x821AA2FC;
		  /* 821AA2FCh */ case    4:  		/* lwz R10, <#[R8 + 4]> */
		/* 821AA2FCh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000004) );
		/* 821AA2FCh case    4:*/		return 0x821AA300;
		  /* 821AA300h */ case    5:  		/* stw R10, <#[R11 + 8]> */
		/* 821AA300h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AA300h case    5:*/		return 0x821AA304;
		  /* 821AA304h */ case    6:  		/* stw R11, <#[R8 + 4]> */
		/* 821AA304h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R8 + 0x00000004) );
		/* 821AA304h case    6:*/		return 0x821AA308;
		  /* 821AA308h */ case    7:  		/* stw R8, <#[R11 + 12]> */
		/* 821AA308h case    7:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AA308h case    7:*/		return 0x821AA30C;
	}
	return 0x821AA30C;
} // Block from 821AA2ECh-821AA30Ch (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AA30Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA30C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA30C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA30C);
		  /* 821AA30Ch */ case    0:  		/* addi R6, R6, 1 */
		/* 821AA30Ch case    0:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x1);
		/* 821AA30Ch case    0:*/		return 0x821AA310;
		  /* 821AA310h */ case    1:  		/* addi R7, R7, 4 */
		/* 821AA310h case    1:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821AA310h case    1:*/		return 0x821AA314;
		  /* 821AA314h */ case    2:  		/* b -96 */
		/* 821AA314h case    2:*/		return 0x821AA2B4;
		/* 821AA314h case    2:*/		return 0x821AA318;
	}
	return 0x821AA318;
} // Block from 821AA30Ch-821AA318h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA318h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA318( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA318) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA318);
		  /* 821AA318h */ case    0:  		/* lwz R11, <#[R29 + 16]> */
		/* 821AA318h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000010) );
		/* 821AA318h case    0:*/		return 0x821AA31C;
		  /* 821AA31Ch */ case    1:  		/* cmplwi CR6, R11, 0 */
		/* 821AA31Ch case    1:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AA31Ch case    1:*/		return 0x821AA320;
		  /* 821AA320h */ case    2:  		/* bc 4, CR6_EQ, 64 */
		/* 821AA320h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AA360;  }
		/* 821AA320h case    2:*/		return 0x821AA324;
		  /* 821AA324h */ case    3:  		/* lwz R11, <#[R25 + 12]> */
		/* 821AA324h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x0000000C) );
		/* 821AA324h case    3:*/		return 0x821AA328;
		  /* 821AA328h */ case    4:  		/* addi R10, R11, 4 */
		/* 821AA328h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AA328h case    4:*/		return 0x821AA32C;
		  /* 821AA32Ch */ case    5:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AA32Ch case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AA32Ch case    5:*/		return 0x821AA330;
		  /* 821AA330h */ case    6:  		/* b 12 */
		/* 821AA330h case    6:*/		return 0x821AA33C;
		/* 821AA330h case    6:*/		return 0x821AA334;
		  /* 821AA334h */ case    7:  		/* addi R10, R11, 8 */
		/* 821AA334h case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AA334h case    7:*/		return 0x821AA338;
		  /* 821AA338h */ case    8:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AA338h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AA338h case    8:*/		return 0x821AA33C;
	}
	return 0x821AA33C;
} // Block from 821AA318h-821AA33Ch (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AA33Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA33C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA33C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA33C);
		  /* 821AA33Ch */ case    0:  		/* cmplw CR6, R11, R29 */
		/* 821AA33Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821AA33Ch case    0:*/		return 0x821AA340;
		  /* 821AA340h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AA340h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AA334;  }
		/* 821AA340h case    1:*/		return 0x821AA344;
		  /* 821AA344h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AA344h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AA344h case    2:*/		return 0x821AA348;
		  /* 821AA348h */ case    3:  		/* li R6, 26 */
		/* 821AA348h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AA348h case    3:*/		return 0x821AA34C;
		  /* 821AA34Ch */ case    4:  		/* li R5, 20 */
		/* 821AA34Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AA34Ch case    4:*/		return 0x821AA350;
		  /* 821AA350h */ case    5:  		/* mr R4, R29 */
		/* 821AA350h case    5:*/		regs.R4 = regs.R29;
		/* 821AA350h case    5:*/		return 0x821AA354;
		  /* 821AA354h */ case    6:  		/* mr R3, R22 */
		/* 821AA354h case    6:*/		regs.R3 = regs.R22;
		/* 821AA354h case    6:*/		return 0x821AA358;
		  /* 821AA358h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821AA358h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AA358h case    7:*/		return 0x821AA35C;
		  /* 821AA35Ch */ case    8:  		/* bl -284356 */
		/* 821AA35Ch case    8:*/		regs.LR = 0x821AA360; return 0x82164C98;
		/* 821AA35Ch case    8:*/		return 0x821AA360;
	}
	return 0x821AA360;
} // Block from 821AA33Ch-821AA360h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AA360h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA360( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA360) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA360);
		  /* 821AA360h */ case    0:  		/* mr R3, R23 */
		/* 821AA360h case    0:*/		regs.R3 = regs.R23;
		/* 821AA360h case    0:*/		return 0x821AA364;
		  /* 821AA364h */ case    1:  		/* bl -204780 */
		/* 821AA364h case    1:*/		regs.LR = 0x821AA368; return 0x82178378;
		/* 821AA364h case    1:*/		return 0x821AA368;
		  /* 821AA368h */ case    2:  		/* mr R4, R21 */
		/* 821AA368h case    2:*/		regs.R4 = regs.R21;
		/* 821AA368h case    2:*/		return 0x821AA36C;
		  /* 821AA36Ch */ case    3:  		/* mr R3, R22 */
		/* 821AA36Ch case    3:*/		regs.R3 = regs.R22;
		/* 821AA36Ch case    3:*/		return 0x821AA370;
		  /* 821AA370h */ case    4:  		/* bl -39096 */
		/* 821AA370h case    4:*/		regs.LR = 0x821AA374; return 0x821A0AB8;
		/* 821AA370h case    4:*/		return 0x821AA374;
		  /* 821AA374h */ case    5:  		/* mr R4, R23 */
		/* 821AA374h case    5:*/		regs.R4 = regs.R23;
		/* 821AA374h case    5:*/		return 0x821AA378;
		  /* 821AA378h */ case    6:  		/* mr R3, R22 */
		/* 821AA378h case    6:*/		regs.R3 = regs.R22;
		/* 821AA378h case    6:*/		return 0x821AA37C;
		  /* 821AA37Ch */ case    7:  		/* bl -39108 */
		/* 821AA37Ch case    7:*/		regs.LR = 0x821AA380; return 0x821A0AB8;
		/* 821AA37Ch case    7:*/		return 0x821AA380;
		  /* 821AA380h */ case    8:  		/* mr R4, R24 */
		/* 821AA380h case    8:*/		regs.R4 = regs.R24;
		/* 821AA380h case    8:*/		return 0x821AA384;
		  /* 821AA384h */ case    9:  		/* mr R3, R22 */
		/* 821AA384h case    9:*/		regs.R3 = regs.R22;
		/* 821AA384h case    9:*/		return 0x821AA388;
		  /* 821AA388h */ case   10:  		/* bl -39120 */
		/* 821AA388h case   10:*/		regs.LR = 0x821AA38C; return 0x821A0AB8;
		/* 821AA388h case   10:*/		return 0x821AA38C;
		  /* 821AA38Ch */ case   11:  		/* mr R3, R21 */
		/* 821AA38Ch case   11:*/		regs.R3 = regs.R21;
		/* 821AA38Ch case   11:*/		return 0x821AA390;
		  /* 821AA390h */ case   12:  		/* b 1624 */
		/* 821AA390h case   12:*/		return 0x821AA9E8;
		/* 821AA390h case   12:*/		return 0x821AA394;
	}
	return 0x821AA394;
} // Block from 821AA360h-821AA394h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821AA394h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA394( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA394) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA394);
		  /* 821AA394h */ case    0:  		/* li R11, 1 */
		/* 821AA394h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AA394h case    0:*/		return 0x821AA398;
		  /* 821AA398h */ case    1:  		/* b 8 */
		/* 821AA398h case    1:*/		return 0x821AA3A0;
		/* 821AA398h case    1:*/		return 0x821AA39C;
	}
	return 0x821AA39C;
} // Block from 821AA394h-821AA39Ch (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA39Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA39C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA39C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA39C);
		  /* 821AA39Ch */ case    0:  		/* li R11, 0 */
		/* 821AA39Ch case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AA39Ch case    0:*/		return 0x821AA3A0;
	}
	return 0x821AA3A0;
} // Block from 821AA39Ch-821AA3A0h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AA3A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA3A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA3A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA3A0);
		  /* 821AA3A0h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AA3A0h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AA3A0h case    0:*/		return 0x821AA3A4;
		  /* 821AA3A4h */ case    1:  		/* bc 4, CR0_EQ, 420 */
		/* 821AA3A4h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AA548;  }
		/* 821AA3A4h case    1:*/		return 0x821AA3A8;
		  /* 821AA3A8h */ case    2:  		/* rlwinm R11, R9, 18, 29, 31 */
		/* 821AA3A8h case    2:*/		cpu::op::rlwinm<0,18,29,31>(regs,&regs.R11,regs.R9);
		/* 821AA3A8h case    2:*/		return 0x821AA3AC;
		  /* 821AA3ACh */ case    3:  		/* cmplw CR6, R11, R14 */
		/* 821AA3ACh case    3:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R14);
		/* 821AA3ACh case    3:*/		return 0x821AA3B0;
		  /* 821AA3B0h */ case    4:  		/* bc 4, CR6_LT, 408 */
		/* 821AA3B0h case    4:*/		if ( !regs.CR[6].lt ) { return 0x821AA548;  }
		/* 821AA3B0h case    4:*/		return 0x821AA3B4;
		  /* 821AA3B4h */ case    5:  		/* li R22, 0 */
		/* 821AA3B4h case    5:*/		cpu::op::li<0>(regs,&regs.R22,0x0);
		/* 821AA3B4h case    5:*/		return 0x821AA3B8;
		  /* 821AA3B8h */ case    6:  		/* cmplwi CR6, R14, 0 */
		/* 821AA3B8h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R14,0x00000000);
		/* 821AA3B8h case    6:*/		return 0x821AA3BC;
		  /* 821AA3BCh */ case    7:  		/* bc 12, CR6_EQ, 396 */
		/* 821AA3BCh case    7:*/		if ( regs.CR[6].eq ) { return 0x821AA548;  }
		/* 821AA3BCh case    7:*/		return 0x821AA3C0;
		  /* 821AA3C0h */ case    8:  		/* mr R20, R17 */
		/* 821AA3C0h case    8:*/		regs.R20 = regs.R17;
		/* 821AA3C0h case    8:*/		return 0x821AA3C4;
		  /* 821AA3C4h */ case    9:  		/* lwz R23, <#[R20]> */
		/* 821AA3C4h case    9:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R20 + 0x00000000) );
		/* 821AA3C4h case    9:*/		return 0x821AA3C8;
		  /* 821AA3C8h */ case   10:  		/* lwz R11, <#[R23]> */
		/* 821AA3C8h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821AA3C8h case   10:*/		return 0x821AA3CC;
		  /* 821AA3CCh */ case   11:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821AA3CCh case   11:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821AA3CCh case   11:*/		return 0x821AA3D0;
		  /* 821AA3D0h */ case   12:  		/* bc 4, CR0_EQ, 360 */
		/* 821AA3D0h case   12:*/		if ( !regs.CR[0].eq ) { return 0x821AA538;  }
		/* 821AA3D0h case   12:*/		return 0x821AA3D4;
		  /* 821AA3D4h */ case   13:  		/* lwz R24, <#[R23 + 12]> */
		/* 821AA3D4h case   13:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R23 + 0x0000000C) );
		/* 821AA3D4h case   13:*/		return 0x821AA3D8;
		  /* 821AA3D8h */ case   14:  		/* lwz R11, <#[R24 + 8]> */
		/* 821AA3D8h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000008) );
		/* 821AA3D8h case   14:*/		return 0x821AA3DC;
		  /* 821AA3DCh */ case   15:  		/* rlwinm R10, R11, 0, 18, 24 */
		/* 821AA3DCh case   15:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R10,regs.R11);
		/* 821AA3DCh case   15:*/		return 0x821AA3E0;
		  /* 821AA3E0h */ case   16:  		/* cmplwi CR6, R10, 384 */
		/* 821AA3E0h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000180);
		/* 821AA3E0h case   16:*/		return 0x821AA3E4;
		  /* 821AA3E4h */ case   17:  		/* bc 4, CR6_EQ, 340 */
		/* 821AA3E4h case   17:*/		if ( !regs.CR[6].eq ) { return 0x821AA538;  }
		/* 821AA3E4h case   17:*/		return 0x821AA3E8;
		  /* 821AA3E8h */ case   18:  		/* lwz R10, <#[R21 + 8]> */
		/* 821AA3E8h case   18:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R21 + 0x00000008) );
		/* 821AA3E8h case   18:*/		return 0x821AA3EC;
		  /* 821AA3ECh */ case   19:  		/* xor R11, R11, R10 */
		/* 821AA3ECh case   19:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AA3ECh case   19:*/		return 0x821AA3F0;
		  /* 821AA3F0h */ case   20:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AA3F0h case   20:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AA3F0h case   20:*/		return 0x821AA3F4;
		  /* 821AA3F4h */ case   21:  		/* bc 4, CR0_EQ, 324 */
		/* 821AA3F4h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821AA538;  }
		/* 821AA3F4h case   21:*/		return 0x821AA3F8;
		  /* 821AA3F8h */ case   22:  		/* lwz R10, <#[R24 + 4]> */
		/* 821AA3F8h case   22:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R24 + 0x00000004) );
		/* 821AA3F8h case   22:*/		return 0x821AA3FC;
		  /* 821AA3FCh */ case   23:  		/* cmplwi CR6, R10, 0 */
		/* 821AA3FCh case   23:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AA3FCh case   23:*/		return 0x821AA400;
		  /* 821AA400h */ case   24:  		/* bc 12, CR6_EQ, 40 */
		/* 821AA400h case   24:*/		if ( regs.CR[6].eq ) { return 0x821AA428;  }
		/* 821AA400h case   24:*/		return 0x821AA404;
		  /* 821AA404h */ case   25:  		/* lwz R11, <#[R10 + 16]> */
		/* 821AA404h case   25:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821AA404h case   25:*/		return 0x821AA408;
		  /* 821AA408h */ case   26:  		/* cmplwi CR6, R11, 0 */
		/* 821AA408h case   26:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AA408h case   26:*/		return 0x821AA40C;
		  /* 821AA40Ch */ case   27:  		/* bc 12, CR6_EQ, 12 */
		/* 821AA40Ch case   27:*/		if ( regs.CR[6].eq ) { return 0x821AA418;  }
		/* 821AA40Ch case   27:*/		return 0x821AA410;
		  /* 821AA410h */ case   28:  		/* cmplw CR6, R11, R30 */
		/* 821AA410h case   28:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821AA410h case   28:*/		return 0x821AA414;
		  /* 821AA414h */ case   29:  		/* bc 4, CR6_EQ, 12 */
		/* 821AA414h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821AA420;  }
		/* 821AA414h case   29:*/		return 0x821AA418;
	}
	return 0x821AA418;
} // Block from 821AA3A0h-821AA418h (30 instructions)

//////////////////////////////////////////////////////
// Block at 821AA418h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA418( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA418) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA418);
		  /* 821AA418h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AA418h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AA418h case    0:*/		return 0x821AA41C;
		  /* 821AA41Ch */ case    1:  		/* b -32 */
		/* 821AA41Ch case    1:*/		return 0x821AA3FC;
		/* 821AA41Ch case    1:*/		return 0x821AA420;
	}
	return 0x821AA420;
} // Block from 821AA418h-821AA420h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA420h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA420( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA420) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA420);
		  /* 821AA420h */ case    0:  		/* li R11, 1 */
		/* 821AA420h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AA420h case    0:*/		return 0x821AA424;
		  /* 821AA424h */ case    1:  		/* b 8 */
		/* 821AA424h case    1:*/		return 0x821AA42C;
		/* 821AA424h case    1:*/		return 0x821AA428;
	}
	return 0x821AA428;
} // Block from 821AA420h-821AA428h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA428);
		  /* 821AA428h */ case    0:  		/* li R11, 0 */
		/* 821AA428h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x0);
		/* 821AA428h case    0:*/		return 0x821AA42C;
	}
	return 0x821AA42C;
} // Block from 821AA428h-821AA42Ch (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AA42Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA42C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA42C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA42C);
		  /* 821AA42Ch */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AA42Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AA42Ch case    0:*/		return 0x821AA430;
		  /* 821AA430h */ case    1:  		/* bc 4, CR0_EQ, 264 */
		/* 821AA430h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AA538;  }
		/* 821AA430h case    1:*/		return 0x821AA434;
		  /* 821AA434h */ case    2:  		/* lwz R28, <#[R24 + 44]> */
		/* 821AA434h case    2:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R24 + 0x0000002C) );
		/* 821AA434h case    2:*/		return 0x821AA438;
		  /* 821AA438h */ case    3:  		/* lwz R4, <#[R24 + 48]> */
		/* 821AA438h case    3:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R24 + 0x00000030) );
		/* 821AA438h case    3:*/		return 0x821AA43C;
		  /* 821AA43Ch */ case    4:  		/* mr R3, R28 */
		/* 821AA43Ch case    4:*/		regs.R3 = regs.R28;
		/* 821AA43Ch case    4:*/		return 0x821AA440;
		  /* 821AA440h */ case    5:  		/* bl -287160 */
		/* 821AA440h case    5:*/		regs.LR = 0x821AA444; return 0x82164288;
		/* 821AA440h case    5:*/		return 0x821AA444;
		  /* 821AA444h */ case    6:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AA444h case    6:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AA444h case    6:*/		return 0x821AA448;
		  /* 821AA448h */ case    7:  		/* bc 12, CR0_EQ, 240 */
		/* 821AA448h case    7:*/		if ( regs.CR[0].eq ) { return 0x821AA538;  }
		/* 821AA448h case    7:*/		return 0x821AA44C;
		  /* 821AA44Ch */ case    8:  		/* lwz R11, <#[R28]> */
		/* 821AA44Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821AA44Ch case    8:*/		return 0x821AA450;
		  /* 821AA450h */ case    9:  		/* rlwinm. R11, R11, 0, 27, 30 */
		/* 821AA450h case    9:*/		cpu::op::rlwinm<1,0,27,30>(regs,&regs.R11,regs.R11);
		/* 821AA450h case    9:*/		return 0x821AA454;
		  /* 821AA454h */ case   10:  		/* bc 4, CR0_EQ, 228 */
		/* 821AA454h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821AA538;  }
		/* 821AA454h case   10:*/		return 0x821AA458;
		  /* 821AA458h */ case   11:  		/* li R25, 0 */
		/* 821AA458h case   11:*/		cpu::op::li<0>(regs,&regs.R25,0x0);
		/* 821AA458h case   11:*/		return 0x821AA45C;
		  /* 821AA45Ch */ case   12:  		/* addi R27, R21, 44 */
		/* 821AA45Ch case   12:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R21,0x2C);
		/* 821AA45Ch case   12:*/		return 0x821AA460;
		  /* 821AA460h */ case   13:  		/* addi R26, R21, 48 */
		/* 821AA460h case   13:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R21,0x30);
		/* 821AA460h case   13:*/		return 0x821AA464;
		  /* 821AA464h */ case   14:  		/* lwz R11, <#[R27]> */
		/* 821AA464h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AA464h case   14:*/		return 0x821AA468;
		  /* 821AA468h */ case   15:  		/* lwz R10, <#[R28 + 12]> */
		/* 821AA468h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x0000000C) );
		/* 821AA468h case   15:*/		return 0x821AA46C;
		  /* 821AA46Ch */ case   16:  		/* lwz R9, <#[R11 + 12]> */
		/* 821AA46Ch case   16:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AA46Ch case   16:*/		return 0x821AA470;
		  /* 821AA470h */ case   17:  		/* cmpw CR6, R9, R10 */
		/* 821AA470h case   17:*/		cpu::op::cmpw<6>(regs,regs.R9,regs.R10);
		/* 821AA470h case   17:*/		return 0x821AA474;
		  /* 821AA474h */ case   18:  		/* bc 4, CR6_EQ, 172 */
		/* 821AA474h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821AA520;  }
		/* 821AA474h case   18:*/		return 0x821AA478;
		  /* 821AA478h */ case   19:  		/* lwz R11, <#[R11]> */
		/* 821AA478h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000000) );
		/* 821AA478h case   19:*/		return 0x821AA47C;
		  /* 821AA47Ch */ case   20:  		/* lwz R10, <#[R28]> */
		/* 821AA47Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R28 + 0x00000000) );
		/* 821AA47Ch case   20:*/		return 0x821AA480;
		  /* 821AA480h */ case   21:  		/* xor R11, R10, R11 */
		/* 821AA480h case   21:*/		cpu::op::xor<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AA480h case   21:*/		return 0x821AA484;
		  /* 821AA484h */ case   22:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821AA484h case   22:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821AA484h case   22:*/		return 0x821AA488;
		  /* 821AA488h */ case   23:  		/* bc 4, CR0_EQ, 152 */
		/* 821AA488h case   23:*/		if ( !regs.CR[0].eq ) { return 0x821AA520;  }
		/* 821AA488h case   23:*/		return 0x821AA48C;
		  /* 821AA48Ch */ case   24:  		/* lwz R11, <#[R26]> */
		/* 821AA48Ch case   24:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000000) );
		/* 821AA48Ch case   24:*/		return 0x821AA490;
		  /* 821AA490h */ case   25:  		/* lwz R29, <#[R11 + 12]> */
		/* 821AA490h case   25:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AA490h case   25:*/		return 0x821AA494;
		  /* 821AA494h */ case   26:  		/* lwz R11, <#[R29 + 8]> */
		/* 821AA494h case   26:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000008) );
		/* 821AA494h case   26:*/		return 0x821AA498;
		  /* 821AA498h */ case   27:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AA498h case   27:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AA498h case   27:*/		return 0x821AA49C;
		  /* 821AA49Ch */ case   28:  		/* cmplwi CR6, R11, 256 */
		/* 821AA49Ch case   28:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000100);
		/* 821AA49Ch case   28:*/		return 0x821AA4A0;
		  /* 821AA4A0h */ case   29:  		/* bc 4, CR6_EQ, 128 */
		/* 821AA4A0h case   29:*/		if ( !regs.CR[6].eq ) { return 0x821AA520;  }
		/* 821AA4A0h case   29:*/		return 0x821AA4A4;
		  /* 821AA4A4h */ case   30:  		/* lwz R15, <#[R1 + 1236]> */
		/* 821AA4A4h case   30:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AA4A4h case   30:*/		return 0x821AA4A8;
		  /* 821AA4A8h */ case   31:  		/* li R4, 1 */
		/* 821AA4A8h case   31:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821AA4A8h case   31:*/		return 0x821AA4AC;
		  /* 821AA4ACh */ case   32:  		/* fmr FR4, FR31 */
		/* 821AA4ACh case   32:*/		cpu::op::fmr<0>(regs,&regs.FR4,regs.FR31);
		/* 821AA4ACh case   32:*/		return 0x821AA4B0;
		  /* 821AA4B0h */ case   33:  		/* mr R3, R15 */
		/* 821AA4B0h case   33:*/		regs.R3 = regs.R15;
		/* 821AA4B0h case   33:*/		return 0x821AA4B4;
		  /* 821AA4B4h */ case   34:  		/* fmr FR3, FR31 */
		/* 821AA4B4h case   34:*/		cpu::op::fmr<0>(regs,&regs.FR3,regs.FR31);
		/* 821AA4B4h case   34:*/		return 0x821AA4B8;
		  /* 821AA4B8h */ case   35:  		/* fmr FR2, FR31 */
		/* 821AA4B8h case   35:*/		cpu::op::fmr<0>(regs,&regs.FR2,regs.FR31);
		/* 821AA4B8h case   35:*/		return 0x821AA4BC;
		  /* 821AA4BCh */ case   36:  		/* fmr FR1, FR31 */
		/* 821AA4BCh case   36:*/		cpu::op::fmr<0>(regs,&regs.FR1,regs.FR31);
		/* 821AA4BCh case   36:*/		return 0x821AA4C0;
		  /* 821AA4C0h */ case   37:  		/* bl 525976 */
		/* 821AA4C0h case   37:*/		regs.LR = 0x821AA4C4; return 0x8222AB58;
		/* 821AA4C0h case   37:*/		return 0x821AA4C4;
		  /* 821AA4C4h */ case   38:  		/* mr R30, R3 */
		/* 821AA4C4h case   38:*/		regs.R30 = regs.R3;
		/* 821AA4C4h case   38:*/		return 0x821AA4C8;
		  /* 821AA4C8h */ case   39:  		/* mr R3, R15 */
		/* 821AA4C8h case   39:*/		regs.R3 = regs.R15;
		/* 821AA4C8h case   39:*/		return 0x821AA4CC;
		  /* 821AA4CCh */ case   40:  		/* li R5, 0 */
		/* 821AA4CCh case   40:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AA4CCh case   40:*/		return 0x821AA4D0;
		  /* 821AA4D0h */ case   41:  		/* mr R4, R30 */
		/* 821AA4D0h case   41:*/		regs.R4 = regs.R30;
		/* 821AA4D0h case   41:*/		return 0x821AA4D4;
		  /* 821AA4D4h */ case   42:  		/* bl -205764 */
		/* 821AA4D4h case   42:*/		regs.LR = 0x821AA4D8; return 0x82178110;
		/* 821AA4D4h case   42:*/		return 0x821AA4D8;
		  /* 821AA4D8h */ case   43:  		/* mr R31, R3 */
		/* 821AA4D8h case   43:*/		regs.R31 = regs.R3;
		/* 821AA4D8h case   43:*/		return 0x821AA4DC;
		  /* 821AA4DCh */ case   44:  		/* mr R5, R3 */
		/* 821AA4DCh case   44:*/		regs.R5 = regs.R3;
		/* 821AA4DCh case   44:*/		return 0x821AA4E0;
		  /* 821AA4E0h */ case   45:  		/* li R8, 1 */
		/* 821AA4E0h case   45:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821AA4E0h case   45:*/		return 0x821AA4E4;
		  /* 821AA4E4h */ case   46:  		/* li R7, 1 */
		/* 821AA4E4h case   46:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821AA4E4h case   46:*/		return 0x821AA4E8;
		  /* 821AA4E8h */ case   47:  		/* addi R6, R1, 384 */
		/* 821AA4E8h case   47:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x180);
		/* 821AA4E8h case   47:*/		return 0x821AA4EC;
		  /* 821AA4ECh */ case   48:  		/* mr R4, R29 */
		/* 821AA4ECh case   48:*/		regs.R4 = regs.R29;
		/* 821AA4ECh case   48:*/		return 0x821AA4F0;
		  /* 821AA4F0h */ case   49:  		/* mr R3, R15 */
		/* 821AA4F0h case   49:*/		regs.R3 = regs.R15;
		/* 821AA4F0h case   49:*/		return 0x821AA4F4;
		  /* 821AA4F4h */ case   50:  		/* bl -44668 */
		/* 821AA4F4h case   50:*/		regs.LR = 0x821AA4F8; return 0x8219F678;
		/* 821AA4F4h case   50:*/		return 0x821AA4F8;
		  /* 821AA4F8h */ case   51:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AA4F8h case   51:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AA4F8h case   51:*/		return 0x821AA4FC;
		  /* 821AA4FCh */ case   52:  		/* bc 4, CR0_EQ, 88 */
		/* 821AA4FCh case   52:*/		if ( !regs.CR[0].eq ) { return 0x821AA554;  }
		/* 821AA4FCh case   52:*/		return 0x821AA500;
		  /* 821AA500h */ case   53:  		/* lbz R11, <#[R30 + 8]> */
		/* 821AA500h case   53:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AA500h case   53:*/		return 0x821AA504;
		  /* 821AA504h */ case   54:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AA504h case   54:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AA504h case   54:*/		return 0x821AA508;
		  /* 821AA508h */ case   55:  		/* bc 4, CR0_EQ, 24 */
		/* 821AA508h case   55:*/		if ( !regs.CR[0].eq ) { return 0x821AA520;  }
		/* 821AA508h case   55:*/		return 0x821AA50C;
		  /* 821AA50Ch */ case   56:  		/* li R6, 1 */
		/* 821AA50Ch case   56:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AA50Ch case   56:*/		return 0x821AA510;
		  /* 821AA510h */ case   57:  		/* rlwinm R3, R15, 0, 0, 31 */
		/* 821AA510h case   57:*/		cpu::op::rlwinm<0,0,0,31>(regs,&regs.R3,regs.R15);
		/* 821AA510h case   57:*/		return 0x821AA514;
		  /* 821AA514h */ case   58:  		/* li R5, 0 */
		/* 821AA514h case   58:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AA514h case   58:*/		return 0x821AA518;
		  /* 821AA518h */ case   59:  		/* mr R4, R30 */
		/* 821AA518h case   59:*/		regs.R4 = regs.R30;
		/* 821AA518h case   59:*/		return 0x821AA51C;
		  /* 821AA51Ch */ case   60:  		/* bl 528044 */
		/* 821AA51Ch case   60:*/		regs.LR = 0x821AA520; return 0x8222B3C8;
		/* 821AA51Ch case   60:*/		return 0x821AA520;
	}
	return 0x821AA520;
} // Block from 821AA42Ch-821AA520h (61 instructions)

//////////////////////////////////////////////////////
// Block at 821AA520h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA520( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA520) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA520);
		  /* 821AA520h */ case    0:  		/* addi R25, R25, 1 */
		/* 821AA520h case    0:*/		cpu::op::addi<0>(regs,&regs.R25,regs.R25,0x1);
		/* 821AA520h case    0:*/		return 0x821AA524;
		  /* 821AA524h */ case    1:  		/* addi R27, R27, 4 */
		/* 821AA524h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821AA524h case    1:*/		return 0x821AA528;
		  /* 821AA528h */ case    2:  		/* addi R26, R26, -4 */
		/* 821AA528h case    2:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0xFFFFFFFC);
		/* 821AA528h case    2:*/		return 0x821AA52C;
		  /* 821AA52Ch */ case    3:  		/* cmplwi CR6, R25, 2 */
		/* 821AA52Ch case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000002);
		/* 821AA52Ch case    3:*/		return 0x821AA530;
		  /* 821AA530h */ case    4:  		/* bc 12, CR6_LT, -204 */
		/* 821AA530h case    4:*/		if ( regs.CR[6].lt ) { return 0x821AA464;  }
		/* 821AA530h case    4:*/		return 0x821AA534;
		  /* 821AA534h */ case    5:  		/* lwz R30, <#[R1 + 1244]> */
		/* 821AA534h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA534h case    5:*/		return 0x821AA538;
	}
	return 0x821AA538;
} // Block from 821AA520h-821AA538h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AA538h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA538( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA538) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA538);
		  /* 821AA538h */ case    0:  		/* addi R22, R22, 1 */
		/* 821AA538h case    0:*/		cpu::op::addi<0>(regs,&regs.R22,regs.R22,0x1);
		/* 821AA538h case    0:*/		return 0x821AA53C;
		  /* 821AA53Ch */ case    1:  		/* addi R20, R20, 4 */
		/* 821AA53Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R20,0x4);
		/* 821AA53Ch case    1:*/		return 0x821AA540;
		  /* 821AA540h */ case    2:  		/* cmplw CR6, R22, R14 */
		/* 821AA540h case    2:*/		cpu::op::cmplw<6>(regs,regs.R22,regs.R14);
		/* 821AA540h case    2:*/		return 0x821AA544;
		  /* 821AA544h */ case    3:  		/* bc 12, CR6_LT, -384 */
		/* 821AA544h case    3:*/		if ( regs.CR[6].lt ) { return 0x821AA3C4;  }
		/* 821AA544h case    3:*/		return 0x821AA548;
	}
	return 0x821AA548;
} // Block from 821AA538h-821AA548h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AA548h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA548( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA548) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA548);
		  /* 821AA548h */ case    0:  		/* addi R18, R18, 1 */
		/* 821AA548h case    0:*/		cpu::op::addi<0>(regs,&regs.R18,regs.R18,0x1);
		/* 821AA548h case    0:*/		return 0x821AA54C;
		  /* 821AA54Ch */ case    1:  		/* addi R19, R19, 4 */
		/* 821AA54Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R19,regs.R19,0x4);
		/* 821AA54Ch case    1:*/		return 0x821AA550;
		  /* 821AA550h */ case    2:  		/* b -920 */
		/* 821AA550h case    2:*/		return 0x821AA1B8;
		/* 821AA550h case    2:*/		return 0x821AA554;
	}
	return 0x821AA554;
} // Block from 821AA548h-821AA554h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA554h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA554( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA554) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA554);
		  /* 821AA554h */ case    0:  		/* lwz R27, <#[R1 + 1244]> */
		/* 821AA554h case    0:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA554h case    0:*/		return 0x821AA558;
		  /* 821AA558h */ case    1:  		/* lwz R11, <#[R27 + 8]> */
		/* 821AA558h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000008) );
		/* 821AA558h case    1:*/		return 0x821AA55C;
		  /* 821AA55Ch */ case    2:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AA55Ch case    2:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AA55Ch case    2:*/		return 0x821AA560;
		  /* 821AA560h */ case    3:  		/* cmplwi CR6, R11, 14720 */
		/* 821AA560h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003980);
		/* 821AA560h case    3:*/		return 0x821AA564;
		  /* 821AA564h */ case    4:  		/* bc 4, CR6_EQ, 88 */
		/* 821AA564h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821AA5BC;  }
		/* 821AA564h case    4:*/		return 0x821AA568;
		  /* 821AA568h */ case    5:  		/* mr R3, R21 */
		/* 821AA568h case    5:*/		regs.R3 = regs.R21;
		/* 821AA568h case    5:*/		return 0x821AA56C;
		  /* 821AA56Ch */ case    6:  		/* bl -212204 */
		/* 821AA56Ch case    6:*/		regs.LR = 0x821AA570; return 0x82176880;
		/* 821AA56Ch case    6:*/		return 0x821AA570;
		  /* 821AA570h */ case    7:  		/* stw R3, <#[R1 + 1244]> */
		/* 821AA570h case    7:*/		cpu::mem::store32( regs, regs.R3, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA570h case    7:*/		return 0x821AA574;
		  /* 821AA574h */ case    8:  		/* cmplwi CR0, R3, 0 */
		/* 821AA574h case    8:*/		cpu::op::cmplwi<0>(regs,regs.R3,0x00000000);
		/* 821AA574h case    8:*/		return 0x821AA578;
		  /* 821AA578h */ case    9:  		/* bc 12, CR0_EQ, 56 */
		/* 821AA578h case    9:*/		if ( regs.CR[0].eq ) { return 0x821AA5B0;  }
		/* 821AA578h case    9:*/		return 0x821AA57C;
		  /* 821AA57Ch */ case   10:  		/* lbz R11, <#[R30 + 8]> */
		/* 821AA57Ch case   10:*/		cpu::mem::load8z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AA57Ch case   10:*/		return 0x821AA580;
		  /* 821AA580h */ case   11:  		/* lwz R10, <#[R3 + 8]> */
		/* 821AA580h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R3 + 0x00000008) );
		/* 821AA580h case   11:*/		return 0x821AA584;
		  /* 821AA584h */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AA584h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AA584h case   12:*/		return 0x821AA588;
		  /* 821AA588h */ case   13:  		/* rlwinm R14, R10, 13, 29, 31 */
		/* 821AA588h case   13:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R14,regs.R10);
		/* 821AA588h case   13:*/		return 0x821AA58C;
		  /* 821AA58Ch */ case   14:  		/* bc 4, CR0_EQ, 24 */
		/* 821AA58Ch case   14:*/		if ( !regs.CR[0].eq ) { return 0x821AA5A4;  }
		/* 821AA58Ch case   14:*/		return 0x821AA590;
		  /* 821AA590h */ case   15:  		/* li R6, 1 */
		/* 821AA590h case   15:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AA590h case   15:*/		return 0x821AA594;
		  /* 821AA594h */ case   16:  		/* li R5, 0 */
		/* 821AA594h case   16:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AA594h case   16:*/		return 0x821AA598;
		  /* 821AA598h */ case   17:  		/* mr R4, R30 */
		/* 821AA598h case   17:*/		regs.R4 = regs.R30;
		/* 821AA598h case   17:*/		return 0x821AA59C;
		  /* 821AA59Ch */ case   18:  		/* mr R3, R15 */
		/* 821AA59Ch case   18:*/		regs.R3 = regs.R15;
		/* 821AA59Ch case   18:*/		return 0x821AA5A0;
		  /* 821AA5A0h */ case   19:  		/* bl 527912 */
		/* 821AA5A0h case   19:*/		regs.LR = 0x821AA5A4; return 0x8222B3C8;
		/* 821AA5A0h case   19:*/		return 0x821AA5A4;
	}
	return 0x821AA5A4;
} // Block from 821AA554h-821AA5A4h (20 instructions)

//////////////////////////////////////////////////////
// Block at 821AA5A4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA5A4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA5A4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA5A4);
		  /* 821AA5A4h */ case    0:  		/* lwz R30, <#[R1 + 1244]> */
		/* 821AA5A4h case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA5A4h case    0:*/		return 0x821AA5A8;
		  /* 821AA5A8h */ case    1:  		/* li R16, 1 */
		/* 821AA5A8h case    1:*/		cpu::op::li<0>(regs,&regs.R16,0x1);
		/* 821AA5A8h case    1:*/		return 0x821AA5AC;
		  /* 821AA5ACh */ case    2:  		/* b -1024 */
		/* 821AA5ACh case    2:*/		return 0x821AA1AC;
		/* 821AA5ACh case    2:*/		return 0x821AA5B0;
	}
	return 0x821AA5B0;
} // Block from 821AA5A4h-821AA5B0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA5B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA5B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA5B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA5B0);
		  /* 821AA5B0h */ case    0:  		/* li R4, 4800 */
		/* 821AA5B0h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821AA5B0h case    0:*/		return 0x821AA5B4;
		  /* 821AA5B4h */ case    1:  		/* mr R3, R15 */
		/* 821AA5B4h case    1:*/		regs.R3 = regs.R15;
		/* 821AA5B4h case    1:*/		return 0x821AA5B8;
		  /* 821AA5B8h */ case    2:  		/* bl -362320 */
		/* 821AA5B8h case    2:*/		regs.LR = 0x821AA5BC; return 0x82151E68;
		/* 821AA5B8h case    2:*/		return 0x821AA5BC;
	}
	return 0x821AA5BC;
} // Block from 821AA5B0h-821AA5BCh (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA5BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA5BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA5BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA5BC);
		  /* 821AA5BCh */ case    0:  		/* addi R7, R1, 384 */
		/* 821AA5BCh case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x180);
		/* 821AA5BCh case    0:*/		return 0x821AA5C0;
		  /* 821AA5C0h */ case    1:  		/* mr R6, R27 */
		/* 821AA5C0h case    1:*/		regs.R6 = regs.R27;
		/* 821AA5C0h case    1:*/		return 0x821AA5C4;
		  /* 821AA5C4h */ case    2:  		/* mr R5, R31 */
		/* 821AA5C4h case    2:*/		regs.R5 = regs.R31;
		/* 821AA5C4h case    2:*/		return 0x821AA5C8;
		  /* 821AA5C8h */ case    3:  		/* mr R4, R29 */
		/* 821AA5C8h case    3:*/		regs.R4 = regs.R29;
		/* 821AA5C8h case    3:*/		return 0x821AA5CC;
		  /* 821AA5CCh */ case    4:  		/* mr R3, R15 */
		/* 821AA5CCh case    4:*/		regs.R3 = regs.R15;
		/* 821AA5CCh case    4:*/		return 0x821AA5D0;
		  /* 821AA5D0h */ case    5:  		/* bl -34808 */
		/* 821AA5D0h case    5:*/		regs.LR = 0x821AA5D4; return 0x821A1DD8;
		/* 821AA5D0h case    5:*/		return 0x821AA5D4;
		  /* 821AA5D4h */ case    6:  		/* mr R29, R3 */
		/* 821AA5D4h case    6:*/		regs.R29 = regs.R3;
		/* 821AA5D4h case    6:*/		return 0x821AA5D8;
		  /* 821AA5D8h */ case    7:  		/* mr R4, R21 */
		/* 821AA5D8h case    7:*/		regs.R4 = regs.R21;
		/* 821AA5D8h case    7:*/		return 0x821AA5DC;
		  /* 821AA5DCh */ case    8:  		/* mr R3, R15 */
		/* 821AA5DCh case    8:*/		regs.R3 = regs.R15;
		/* 821AA5DCh case    8:*/		return 0x821AA5E0;
		  /* 821AA5E0h */ case    9:  		/* bl 501184 */
		/* 821AA5E0h case    9:*/		regs.LR = 0x821AA5E4; return 0x82224BA0;
		/* 821AA5E0h case    9:*/		return 0x821AA5E4;
		  /* 821AA5E4h */ case   10:  		/* lis R12, -17410 */
		/* 821AA5E4h case   10:*/		cpu::op::lis<0>(regs,&regs.R12,0xFFFFBBFE);
		/* 821AA5E4h case   10:*/		return 0x821AA5E8;
		  /* 821AA5E8h */ case   11:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AA5E8h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AA5E8h case   11:*/		return 0x821AA5EC;
		  /* 821AA5ECh */ case   12:  		/* mr R5, R29 */
		/* 821AA5ECh case   12:*/		regs.R5 = regs.R29;
		/* 821AA5ECh case   12:*/		return 0x821AA5F0;
		  /* 821AA5F0h */ case   13:  		/* ori R12, R12, 32739 */
		/* 821AA5F0h case   13:*/		cpu::op::ori<0>(regs,&regs.R12,regs.R12,0x7FE3);
		/* 821AA5F0h case   13:*/		return 0x821AA5F4;
		  /* 821AA5F4h */ case   14:  		/* li R4, 0 */
		/* 821AA5F4h case   14:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AA5F4h case   14:*/		return 0x821AA5F8;
		  /* 821AA5F8h */ case   15:  		/* and R11, R11, R12 */
		/* 821AA5F8h case   15:*/		cpu::op::and<0>(regs,&regs.R11,regs.R11,regs.R12);
		/* 821AA5F8h case   15:*/		return 0x821AA5FC;
		  /* 821AA5FCh */ case   16:  		/* mr R31, R3 */
		/* 821AA5FCh case   16:*/		regs.R31 = regs.R3;
		/* 821AA5FCh case   16:*/		return 0x821AA600;
		  /* 821AA600h */ case   17:  		/* ori R11, R11, 16386 */
		/* 821AA600h case   17:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x4002);
		/* 821AA600h case   17:*/		return 0x821AA604;
		  /* 821AA604h */ case   18:  		/* stw R11, <#[R3 + 8]> */
		/* 821AA604h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AA604h case   18:*/		return 0x821AA608;
		  /* 821AA608h */ case   19:  		/* bl -237400 */
		/* 821AA608h case   19:*/		regs.LR = 0x821AA60C; return 0x821706B0;
		/* 821AA608h case   19:*/		return 0x821AA60C;
		  /* 821AA60Ch */ case   20:  		/* lwz R11, <#[R23]> */
		/* 821AA60Ch case   20:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821AA60Ch case   20:*/		return 0x821AA610;
		  /* 821AA610h */ case   21:  		/* mr R4, R28 */
		/* 821AA610h case   21:*/		regs.R4 = regs.R28;
		/* 821AA610h case   21:*/		return 0x821AA614;
		  /* 821AA614h */ case   22:  		/* mr R3, R15 */
		/* 821AA614h case   22:*/		regs.R3 = regs.R15;
		/* 821AA614h case   22:*/		return 0x821AA618;
		  /* 821AA618h */ case   23:  		/* rlwinm R5, R11, 27, 30, 31 */
		/* 821AA618h case   23:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R5,regs.R11);
		/* 821AA618h case   23:*/		return 0x821AA61C;
		  /* 821AA61Ch */ case   24:  		/* bl 275300 */
		/* 821AA61Ch case   24:*/		regs.LR = 0x821AA620; return 0x821ED980;
		/* 821AA61Ch case   24:*/		return 0x821AA620;
		  /* 821AA620h */ case   25:  		/* mr R5, R3 */
		/* 821AA620h case   25:*/		regs.R5 = regs.R3;
		/* 821AA620h case   25:*/		return 0x821AA624;
		  /* 821AA624h */ case   26:  		/* li R4, 1 */
		/* 821AA624h case   26:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821AA624h case   26:*/		return 0x821AA628;
		  /* 821AA628h */ case   27:  		/* mr R3, R31 */
		/* 821AA628h case   27:*/		regs.R3 = regs.R31;
		/* 821AA628h case   27:*/		return 0x821AA62C;
		  /* 821AA62Ch */ case   28:  		/* bl -237436 */
		/* 821AA62Ch case   28:*/		regs.LR = 0x821AA630; return 0x821706B0;
		/* 821AA62Ch case   28:*/		return 0x821AA630;
		  /* 821AA630h */ case   29:  		/* lwz R11, <#[R23]> */
		/* 821AA630h case   29:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000000) );
		/* 821AA630h case   29:*/		return 0x821AA634;
		  /* 821AA634h */ case   30:  		/* mr R3, R24 */
		/* 821AA634h case   30:*/		regs.R3 = regs.R24;
		/* 821AA634h case   30:*/		return 0x821AA638;
		  /* 821AA638h */ case   31:  		/* rlwinm R4, R11, 27, 30, 31 */
		/* 821AA638h case   31:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R4,regs.R11);
		/* 821AA638h case   31:*/		return 0x821AA63C;
		  /* 821AA63Ch */ case   32:  		/* bl 76332 */
		/* 821AA63Ch case   32:*/		regs.LR = 0x821AA640; return 0x821BD068;
		/* 821AA63Ch case   32:*/		return 0x821AA640;
		  /* 821AA640h */ case   33:  		/* mr R5, R3 */
		/* 821AA640h case   33:*/		regs.R5 = regs.R3;
		/* 821AA640h case   33:*/		return 0x821AA644;
		  /* 821AA644h */ case   34:  		/* li R4, 0 */
		/* 821AA644h case   34:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AA644h case   34:*/		return 0x821AA648;
		  /* 821AA648h */ case   35:  		/* mr R3, R31 */
		/* 821AA648h case   35:*/		regs.R3 = regs.R31;
		/* 821AA648h case   35:*/		return 0x821AA64C;
		  /* 821AA64Ch */ case   36:  		/* bl 76476 */
		/* 821AA64Ch case   36:*/		regs.LR = 0x821AA650; return 0x821BD108;
		/* 821AA64Ch case   36:*/		return 0x821AA650;
		  /* 821AA650h */ case   37:  		/* rlwinm R11, R27, 0, 0, 30 */
		/* 821AA650h case   37:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R27);
		/* 821AA650h case   37:*/		return 0x821AA654;
		  /* 821AA654h */ case   38:  		/* rlwinm R10, R31, 0, 0, 30 */
		/* 821AA654h case   38:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R31);
		/* 821AA654h case   38:*/		return 0x821AA658;
		  /* 821AA658h */ case   39:  		/* addi R11, R11, 36 */
		/* 821AA658h case   39:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x24);
		/* 821AA658h case   39:*/		return 0x821AA65C;
		  /* 821AA65Ch */ case   40:  		/* addi R10, R10, 36 */
		/* 821AA65Ch case   40:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x24);
		/* 821AA65Ch case   40:*/		return 0x821AA660;
		  /* 821AA660h */ case   41:  		/* addi R8, R11, -36 */
		/* 821AA660h case   41:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0xFFFFFFDC);
		/* 821AA660h case   41:*/		return 0x821AA664;
		  /* 821AA664h */ case   42:  		/* addi R7, R10, -36 */
		/* 821AA664h case   42:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R10,0xFFFFFFDC);
		/* 821AA664h case   42:*/		return 0x821AA668;
		  /* 821AA668h */ case   43:  		/* addi R9, R10, 4 */
		/* 821AA668h case   43:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821AA668h case   43:*/		return 0x821AA66C;
		  /* 821AA66Ch */ case   44:  		/* lwz R6, <#[R11]> */
		/* 821AA66Ch case   44:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821AA66Ch case   44:*/		return 0x821AA670;
		  /* 821AA670h */ case   45:  		/* li R5, 0 */
		/* 821AA670h case   45:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AA670h case   45:*/		return 0x821AA674;
		  /* 821AA674h */ case   46:  		/* mr R4, R31 */
		/* 821AA674h case   46:*/		regs.R4 = regs.R31;
		/* 821AA674h case   46:*/		return 0x821AA678;
		  /* 821AA678h */ case   47:  		/* mr R3, R15 */
		/* 821AA678h case   47:*/		regs.R3 = regs.R15;
		/* 821AA678h case   47:*/		return 0x821AA67C;
		  /* 821AA67Ch */ case   48:  		/* stw R6, <#[R10]> */
		/* 821AA67Ch case   48:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R10 + 0x00000000) );
		/* 821AA67Ch case   48:*/		return 0x821AA680;
		  /* 821AA680h */ case   49:  		/* lwz R6, <#[R11]> */
		/* 821AA680h case   49:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R11 + 0x00000000) );
		/* 821AA680h case   49:*/		return 0x821AA684;
		  /* 821AA684h */ case   50:  		/* rlwinm R6, R6, 0, 0, 30 */
		/* 821AA684h case   50:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R6,regs.R6);
		/* 821AA684h case   50:*/		return 0x821AA688;
		  /* 821AA688h */ case   51:  		/* stw R7, <#[R6]> */
		/* 821AA688h case   51:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R6 + 0x00000000) );
		/* 821AA688h case   51:*/		return 0x821AA68C;
		  /* 821AA68Ch */ case   52:  		/* stw R8, <#[R10 + 4]> */
		/* 821AA68Ch case   52:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R10 + 0x00000004) );
		/* 821AA68Ch case   52:*/		return 0x821AA690;
		  /* 821AA690h */ case   53:  		/* stw R9, <#[R11]> */
		/* 821AA690h case   53:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821AA690h case   53:*/		return 0x821AA694;
		  /* 821AA694h */ case   54:  		/* bl -206212 */
		/* 821AA694h case   54:*/		regs.LR = 0x821AA698; return 0x82178110;
		/* 821AA694h case   54:*/		return 0x821AA698;
		  /* 821AA698h */ case   55:  		/* mr R5, R3 */
		/* 821AA698h case   55:*/		regs.R5 = regs.R3;
		/* 821AA698h case   55:*/		return 0x821AA69C;
		  /* 821AA69Ch */ case   56:  		/* mr R4, R22 */
		/* 821AA69Ch case   56:*/		regs.R4 = regs.R22;
		/* 821AA69Ch case   56:*/		return 0x821AA6A0;
		  /* 821AA6A0h */ case   57:  		/* mr R3, R27 */
		/* 821AA6A0h case   57:*/		regs.R3 = regs.R27;
		/* 821AA6A0h case   57:*/		return 0x821AA6A4;
		  /* 821AA6A4h */ case   58:  		/* mr R6, R15 */
		/* 821AA6A4h case   58:*/		regs.R6 = regs.R15;
		/* 821AA6A4h case   58:*/		return 0x821AA6A8;
		  /* 821AA6A8h */ case   59:  		/* bl -198832 */
		/* 821AA6A8h case   59:*/		regs.LR = 0x821AA6AC; return 0x82179DF8;
		/* 821AA6A8h case   59:*/		return 0x821AA6AC;
		  /* 821AA6ACh */ case   60:  		/* mr R3, R24 */
		/* 821AA6ACh case   60:*/		regs.R3 = regs.R24;
		/* 821AA6ACh case   60:*/		return 0x821AA6B0;
		  /* 821AA6B0h */ case   61:  		/* bl -205624 */
		/* 821AA6B0h case   61:*/		regs.LR = 0x821AA6B4; return 0x82178378;
		/* 821AA6B0h case   61:*/		return 0x821AA6B4;
		  /* 821AA6B4h */ case   62:  		/* mr R3, R30 */
		/* 821AA6B4h case   62:*/		regs.R3 = regs.R30;
		/* 821AA6B4h case   62:*/		return 0x821AA6B8;
		  /* 821AA6B8h */ case   63:  		/* bl -82696 */
		/* 821AA6B8h case   63:*/		regs.LR = 0x821AA6BC; return 0x821963B0;
		/* 821AA6B8h case   63:*/		return 0x821AA6BC;
		  /* 821AA6BCh */ case   64:  		/* lwz R11, <#[R30 + 8]> */
		/* 821AA6BCh case   64:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AA6BCh case   64:*/		return 0x821AA6C0;
		  /* 821AA6C0h */ case   65:  		/* mr R3, R31 */
		/* 821AA6C0h case   65:*/		regs.R3 = regs.R31;
		/* 821AA6C0h case   65:*/		return 0x821AA6C4;
		  /* 821AA6C4h */ case   66:  		/* oris R11, R11, 256 */
		/* 821AA6C4h case   66:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AA6C4h case   66:*/		return 0x821AA6C8;
		  /* 821AA6C8h */ case   67:  		/* stw R11, <#[R30 + 8]> */
		/* 821AA6C8h case   67:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AA6C8h case   67:*/		return 0x821AA6CC;
		  /* 821AA6CCh */ case   68:  		/* bl -205652 */
		/* 821AA6CCh case   68:*/		regs.LR = 0x821AA6D0; return 0x82178378;
		/* 821AA6CCh case   68:*/		return 0x821AA6D0;
		  /* 821AA6D0h */ case   69:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AA6D0h case   69:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AA6D0h case   69:*/		return 0x821AA6D4;
		  /* 821AA6D4h */ case   70:  		/* oris R11, R11, 256 */
		/* 821AA6D4h case   70:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AA6D4h case   70:*/		return 0x821AA6D8;
		  /* 821AA6D8h */ case   71:  		/* rlwinm. R10, R11, 9, 31, 31 */
		/* 821AA6D8h case   71:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R10,regs.R11);
		/* 821AA6D8h case   71:*/		return 0x821AA6DC;
		  /* 821AA6DCh */ case   72:  		/* stw R11, <#[R31 + 8]> */
		/* 821AA6DCh case   72:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AA6DCh case   72:*/		return 0x821AA6E0;
		  /* 821AA6E0h */ case   73:  		/* bc 12, CR0_EQ, 104 */
		/* 821AA6E0h case   73:*/		if ( regs.CR[0].eq ) { return 0x821AA748;  }
		/* 821AA6E0h case   73:*/		return 0x821AA6E4;
		  /* 821AA6E4h */ case   74:  		/* lwz R11, <#[R31 + 16]> */
		/* 821AA6E4h case   74:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821AA6E4h case   74:*/		return 0x821AA6E8;
		  /* 821AA6E8h */ case   75:  		/* rlwinm R11, R11, 0, 16, 12 */
		/* 821AA6E8h case   75:*/		cpu::op::rlwinm<0,0,16,12>(regs,&regs.R11,regs.R11);
		/* 821AA6E8h case   75:*/		return 0x821AA6EC;
		  /* 821AA6ECh */ case   76:  		/* stw R11, <#[R31 + 16]> */
		/* 821AA6ECh case   76:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821AA6ECh case   76:*/		return 0x821AA6F0;
		  /* 821AA6F0h */ case   77:  		/* lwz R3, <#[R15 + 660]> */
		/* 821AA6F0h case   77:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R15 + 0x00000294) );
		/* 821AA6F0h case   77:*/		return 0x821AA6F4;
		  /* 821AA6F4h */ case   78:  		/* lwz R11, <#[R3 + 4]> */
		/* 821AA6F4h case   78:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000004) );
		/* 821AA6F4h case   78:*/		return 0x821AA6F8;
		  /* 821AA6F8h */ case   79:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AA6F8h case   79:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AA6F8h case   79:*/		return 0x821AA6FC;
		  /* 821AA6FCh */ case   80:  		/* bc 4, CR0_EQ, 40 */
		/* 821AA6FCh case   80:*/		if ( !regs.CR[0].eq ) { return 0x821AA724;  }
		/* 821AA6FCh case   80:*/		return 0x821AA700;
		  /* 821AA700h */ case   81:  		/* lwz R11, <#[R3]> */
		/* 821AA700h case   81:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000000) );
		/* 821AA700h case   81:*/		return 0x821AA704;
		  /* 821AA704h */ case   82:  		/* rlwinm R11, R11, 0, 0, 30 */
		/* 821AA704h case   82:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R11,regs.R11);
		/* 821AA704h case   82:*/		return 0x821AA708;
		  /* 821AA708h */ case   83:  		/* addic. R11, R11, -4 */
		/* 821AA708h case   83:*/		cpu::op::addic<1>(regs,&regs.R11,regs.R11,0xFFFFFFFC);
		/* 821AA708h case   83:*/		return 0x821AA70C;
		  /* 821AA70Ch */ case   84:  		/* bc 12, CR0_EQ, 24 */
		/* 821AA70Ch case   84:*/		if ( regs.CR[0].eq ) { return 0x821AA724;  }
		/* 821AA70Ch case   84:*/		return 0x821AA710;
		  /* 821AA710h */ case   85:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AA710h case   85:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AA710h case   85:*/		return 0x821AA714;
		  /* 821AA714h */ case   86:  		/* lwz R9, <#[R11 + 12]> */
		/* 821AA714h case   86:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x0000000C) );
		/* 821AA714h case   86:*/		return 0x821AA718;
		  /* 821AA718h */ case   87:  		/* addi R10, R10, 1 */
		/* 821AA718h case   87:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0x1);
		/* 821AA718h case   87:*/		return 0x821AA71C;
		  /* 821AA71Ch */ case   88:  		/* cmplw CR6, R10, R9 */
		/* 821AA71Ch case   88:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R9);
		/* 821AA71Ch case   88:*/		return 0x821AA720;
		  /* 821AA720h */ case   89:  		/* bc 4, CR6_GT, 16 */
		/* 821AA720h case   89:*/		if ( !regs.CR[6].gt ) { return 0x821AA730;  }
		/* 821AA720h case   89:*/		return 0x821AA724;
	}
	return 0x821AA724;
} // Block from 821AA5BCh-821AA724h (90 instructions)

//////////////////////////////////////////////////////
// Block at 821AA724h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA724( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA724) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA724);
		  /* 821AA724h */ case    0:  		/* li R4, 1 */
		/* 821AA724h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821AA724h case    0:*/		return 0x821AA728;
		  /* 821AA728h */ case    1:  		/* bl -120416 */
		/* 821AA728h case    1:*/		regs.LR = 0x821AA72C; return 0x8218D0C8;
		/* 821AA728h case    1:*/		return 0x821AA72C;
		  /* 821AA72Ch */ case    2:  		/* mr R11, R3 */
		/* 821AA72Ch case    2:*/		regs.R11 = regs.R3;
		/* 821AA72Ch case    2:*/		return 0x821AA730;
	}
	return 0x821AA730;
} // Block from 821AA724h-821AA730h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA730h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA730( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA730) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA730);
		  /* 821AA730h */ case    0:  		/* lwz R10, <#[R11 + 8]> */
		/* 821AA730h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000008) );
		/* 821AA730h case    0:*/		return 0x821AA734;
		  /* 821AA734h */ case    1:  		/* addi R9, R10, 4 */
		/* 821AA734h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R10,0x4);
		/* 821AA734h case    1:*/		return 0x821AA738;
		  /* 821AA738h */ case    2:  		/* addi R8, R10, 1 */
		/* 821AA738h case    2:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R10,0x1);
		/* 821AA738h case    2:*/		return 0x821AA73C;
		  /* 821AA73Ch */ case    3:  		/* rlwinm R10, R9, 2, 0, 29 */
		/* 821AA73Ch case    3:*/		cpu::op::rlwinm<0,2,0,29>(regs,&regs.R10,regs.R9);
		/* 821AA73Ch case    3:*/		return 0x821AA740;
		  /* 821AA740h */ case    4:  		/* stw R8, <#[R11 + 8]> */
		/* 821AA740h case    4:*/		cpu::mem::store32( regs, regs.R8, (uint32)(regs.R11 + 0x00000008) );
		/* 821AA740h case    4:*/		return 0x821AA744;
		  /* 821AA744h */ case    5:  		/* stwx R31, <#[R10 + R11]> */
		/* 821AA744h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R10 + regs.R11 + 0x00000000) );
		/* 821AA744h case    5:*/		return 0x821AA748;
	}
	return 0x821AA748;
} // Block from 821AA730h-821AA748h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AA748h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA748( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA748) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA748);
		  /* 821AA748h */ case    0:  		/* mr R4, R31 */
		/* 821AA748h case    0:*/		regs.R4 = regs.R31;
		/* 821AA748h case    0:*/		return 0x821AA74C;
		  /* 821AA74Ch */ case    1:  		/* mr R3, R15 */
		/* 821AA74Ch case    1:*/		regs.R3 = regs.R15;
		/* 821AA74Ch case    1:*/		return 0x821AA750;
		  /* 821AA750h */ case    2:  		/* bl -40088 */
		/* 821AA750h case    2:*/		regs.LR = 0x821AA754; return 0x821A0AB8;
		/* 821AA750h case    2:*/		return 0x821AA754;
		  /* 821AA754h */ case    3:  		/* mr R4, R27 */
		/* 821AA754h case    3:*/		regs.R4 = regs.R27;
		/* 821AA754h case    3:*/		return 0x821AA758;
		  /* 821AA758h */ case    4:  		/* mr R3, R15 */
		/* 821AA758h case    4:*/		regs.R3 = regs.R15;
		/* 821AA758h case    4:*/		return 0x821AA75C;
		  /* 821AA75Ch */ case    5:  		/* bl -40100 */
		/* 821AA75Ch case    5:*/		regs.LR = 0x821AA760; return 0x821A0AB8;
		/* 821AA75Ch case    5:*/		return 0x821AA760;
		  /* 821AA760h */ case    6:  		/* mr R4, R21 */
		/* 821AA760h case    6:*/		regs.R4 = regs.R21;
		/* 821AA760h case    6:*/		return 0x821AA764;
		  /* 821AA764h */ case    7:  		/* mr R3, R15 */
		/* 821AA764h case    7:*/		regs.R3 = regs.R15;
		/* 821AA764h case    7:*/		return 0x821AA768;
		  /* 821AA768h */ case    8:  		/* bl -40112 */
		/* 821AA768h case    8:*/		regs.LR = 0x821AA76C; return 0x821A0AB8;
		/* 821AA768h case    8:*/		return 0x821AA76C;
		  /* 821AA76Ch */ case    9:  		/* mr R4, R24 */
		/* 821AA76Ch case    9:*/		regs.R4 = regs.R24;
		/* 821AA76Ch case    9:*/		return 0x821AA770;
		  /* 821AA770h */ case   10:  		/* mr R3, R15 */
		/* 821AA770h case   10:*/		regs.R3 = regs.R15;
		/* 821AA770h case   10:*/		return 0x821AA774;
		  /* 821AA774h */ case   11:  		/* bl -40124 */
		/* 821AA774h case   11:*/		regs.LR = 0x821AA778; return 0x821A0AB8;
		/* 821AA774h case   11:*/		return 0x821AA778;
		  /* 821AA778h */ case   12:  		/* mr R3, R27 */
		/* 821AA778h case   12:*/		regs.R3 = regs.R27;
		/* 821AA778h case   12:*/		return 0x821AA77C;
		  /* 821AA77Ch */ case   13:  		/* b 620 */
		/* 821AA77Ch case   13:*/		return 0x821AA9E8;
		/* 821AA77Ch case   13:*/		return 0x821AA780;
	}
	return 0x821AA780;
} // Block from 821AA748h-821AA780h (14 instructions)

//////////////////////////////////////////////////////
// Block at 821AA780h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA780( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA780) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA780);
		  /* 821AA780h */ case    0:  		/* rlwinm. R11, R16, 0, 24, 31 */
		/* 821AA780h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R16);
		/* 821AA780h case    0:*/		return 0x821AA784;
		  /* 821AA784h */ case    1:  		/* bc 4, CR0_EQ, 18748 */
		/* 821AA784h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AF0C0;  }
		/* 821AA784h case    1:*/		return 0x821AA788;
	}
	return 0x821AA788;
} // Block from 821AA780h-821AA788h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA788h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA788( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA788) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA788);
		  /* 821AA788h */ case    0:  		/* lwz R11, <#[R1 + 1244]> */
		/* 821AA788h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA788h case    0:*/		return 0x821AA78C;
		  /* 821AA78Ch */ case    1:  		/* lwz R26, <#[R11 + 8]> */
		/* 821AA78Ch case    1:*/		cpu::mem::load32z( regs, &regs.R26, (uint32)(regs.R11 + 0x00000008) );
		/* 821AA78Ch case    1:*/		return 0x821AA790;
		  /* 821AA790h */ case    2:  		/* rlwinm. R11, R26, 9, 31, 31 */
		/* 821AA790h case    2:*/		cpu::op::rlwinm<1,9,31,31>(regs,&regs.R11,regs.R26);
		/* 821AA790h case    2:*/		return 0x821AA794;
		  /* 821AA794h */ case    3:  		/* bc 4, CR0_EQ, 592 */
		/* 821AA794h case    3:*/		if ( !regs.CR[0].eq ) { return 0x821AA9E4;  }
		/* 821AA794h case    3:*/		return 0x821AA798;
		  /* 821AA798h */ case    4:  		/* addi R11, R1, 112 */
		/* 821AA798h case    4:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x70);
		/* 821AA798h case    4:*/		return 0x821AA79C;
		  /* 821AA79Ch */ case    5:  		/* lwz R17, <#[R1 + 1244]> */
		/* 821AA79Ch case    5:*/		cpu::mem::load32z( regs, &regs.R17, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AA79Ch case    5:*/		return 0x821AA7A0;
		  /* 821AA7A0h */ case    6:  		/* li R23, 0 */
		/* 821AA7A0h case    6:*/		cpu::op::li<0>(regs,&regs.R23,0x0);
		/* 821AA7A0h case    6:*/		return 0x821AA7A4;
		  /* 821AA7A4h */ case    7:  		/* addi R21, R17, 4 */
		/* 821AA7A4h case    7:*/		cpu::op::addi<0>(regs,&regs.R21,regs.R17,0x4);
		/* 821AA7A4h case    7:*/		return 0x821AA7A8;
		  /* 821AA7A8h */ case    8:  		/* li R18, 1 */
		/* 821AA7A8h case    8:*/		cpu::op::li<0>(regs,&regs.R18,0x1);
		/* 821AA7A8h case    8:*/		return 0x821AA7AC;
		  /* 821AA7ACh */ case    9:  		/* stw R23, <#[R11]> */
		/* 821AA7ACh case    9:*/		cpu::mem::store32( regs, regs.R23, (uint32)(regs.R11 + 0x00000000) );
		/* 821AA7ACh case    9:*/		return 0x821AA7B0;
		  /* 821AA7B0h */ case   10:  		/* lwz R31, <#[R17 + 4]> */
		/* 821AA7B0h case   10:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R17 + 0x00000004) );
		/* 821AA7B0h case   10:*/		return 0x821AA7B4;
		  /* 821AA7B4h */ case   11:  		/* cmplwi CR6, R31, 0 */
		/* 821AA7B4h case   11:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AA7B4h case   11:*/		return 0x821AA7B8;
		  /* 821AA7B8h */ case   12:  		/* bc 12, CR6_EQ, 112 */
		/* 821AA7B8h case   12:*/		if ( regs.CR[6].eq ) { return 0x821AA828;  }
		/* 821AA7B8h case   12:*/		return 0x821AA7BC;
		  /* 821AA7BCh */ case   13:  		/* lwz R11, <#[R31 + 16]> */
		/* 821AA7BCh case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821AA7BCh case   13:*/		return 0x821AA7C0;
		  /* 821AA7C0h */ case   14:  		/* cmplwi CR6, R11, 0 */
		/* 821AA7C0h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AA7C0h case   14:*/		return 0x821AA7C4;
		  /* 821AA7C4h */ case   15:  		/* bc 12, CR6_EQ, 92 */
		/* 821AA7C4h case   15:*/		if ( regs.CR[6].eq ) { return 0x821AA820;  }
		/* 821AA7C4h case   15:*/		return 0x821AA7C8;
		  /* 821AA7C8h */ case   16:  		/* lwz R11, <#[R31]> */
		/* 821AA7C8h case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AA7C8h case   16:*/		return 0x821AA7CC;
		  /* 821AA7CCh */ case   17:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821AA7CCh case   17:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821AA7CCh case   17:*/		return 0x821AA7D0;
		  /* 821AA7D0h */ case   18:  		/* bc 12, CR0_EQ, 80 */
		/* 821AA7D0h case   18:*/		if ( regs.CR[0].eq ) { return 0x821AA820;  }
		/* 821AA7D0h case   18:*/		return 0x821AA7D4;
		  /* 821AA7D4h */ case   19:  		/* mr R3, R31 */
		/* 821AA7D4h case   19:*/		regs.R3 = regs.R31;
		/* 821AA7D4h case   19:*/		return 0x821AA7D8;
		  /* 821AA7D8h */ case   20:  		/* bl -288152 */
		/* 821AA7D8h case   20:*/		regs.LR = 0x821AA7DC; return 0x82164240;
		/* 821AA7D8h case   20:*/		return 0x821AA7DC;
		  /* 821AA7DCh */ case   21:  		/* li R10, 4 */
		/* 821AA7DCh case   21:*/		cpu::op::li<0>(regs,&regs.R10,0x4);
		/* 821AA7DCh case   21:*/		return 0x821AA7E0;
		  /* 821AA7E0h */ case   22:  		/* mr R8, R23 */
		/* 821AA7E0h case   22:*/		regs.R8 = regs.R23;
		/* 821AA7E0h case   22:*/		return 0x821AA7E4;
		  /* 821AA7E4h */ case   23:  		/* mr R11, R23 */
		/* 821AA7E4h case   23:*/		regs.R11 = regs.R23;
		/* 821AA7E4h case   23:*/		return 0x821AA7E8;
		  /* 821AA7E8h */ case   24:  		/* mtspr CTR, R10 */
		/* 821AA7E8h case   24:*/		regs.CTR = regs.R10;
		/* 821AA7E8h case   24:*/		return 0x821AA7EC;
		  /* 821AA7ECh */ case   25:  		/* slw R10, R18, R8 */
		/* 821AA7ECh case   25:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R18,regs.R8);
		/* 821AA7ECh case   25:*/		return 0x821AA7F0;
		  /* 821AA7F0h */ case   26:  		/* and. R10, R10, R3 */
		/* 821AA7F0h case   26:*/		cpu::op::and<1>(regs,&regs.R10,regs.R10,regs.R3);
		/* 821AA7F0h case   26:*/		return 0x821AA7F4;
		  /* 821AA7F4h */ case   27:  		/* bc 12, CR0_EQ, 32 */
		/* 821AA7F4h case   27:*/		if ( regs.CR[0].eq ) { return 0x821AA814;  }
		/* 821AA7F4h case   27:*/		return 0x821AA7F8;
		  /* 821AA7F8h */ case   28:  		/* rlwinm R9, R11, 29, 3, 29 */
		/* 821AA7F8h case   28:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R11);
		/* 821AA7F8h case   28:*/		return 0x821AA7FC;
		  /* 821AA7FCh */ case   29:  		/* addi R10, R1, 112 */
		/* 821AA7FCh case   29:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821AA7FCh case   29:*/		return 0x821AA800;
		  /* 821AA800h */ case   30:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821AA800h case   30:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821AA800h case   30:*/		return 0x821AA804;
		  /* 821AA804h */ case   31:  		/* slw R7, R3, R7 */
		/* 821AA804h case   31:*/		cpu::op::slw<0>(regs,&regs.R7,regs.R3,regs.R7);
		/* 821AA804h case   31:*/		return 0x821AA808;
		  /* 821AA808h */ case   32:  		/* lwzx R6, <#[R9 + R10]> */
		/* 821AA808h case   32:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821AA808h case   32:*/		return 0x821AA80C;
		  /* 821AA80Ch */ case   33:  		/* or R7, R7, R6 */
		/* 821AA80Ch case   33:*/		cpu::op::or<0>(regs,&regs.R7,regs.R7,regs.R6);
		/* 821AA80Ch case   33:*/		return 0x821AA810;
		  /* 821AA810h */ case   34:  		/* stwx R7, <#[R9 + R10]> */
		/* 821AA810h case   34:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821AA810h case   34:*/		return 0x821AA814;
	}
	return 0x821AA814;
} // Block from 821AA788h-821AA814h (35 instructions)

//////////////////////////////////////////////////////
// Block at 821AA814h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA814( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA814) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA814);
		  /* 821AA814h */ case    0:  		/* addi R8, R8, 1 */
		/* 821AA814h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821AA814h case    0:*/		return 0x821AA818;
		  /* 821AA818h */ case    1:  		/* addi R11, R11, 4 */
		/* 821AA818h case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AA818h case    1:*/		return 0x821AA81C;
		  /* 821AA81Ch */ case    2:  		/* bc 16, CR0_LT, -48 */
		/* 821AA81Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821AA7EC;  }
		/* 821AA81Ch case    2:*/		return 0x821AA820;
	}
	return 0x821AA820;
} // Block from 821AA814h-821AA820h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA820h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA820( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA820) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA820);
		  /* 821AA820h */ case    0:  		/* lwz R31, <#[R31 + 8]> */
		/* 821AA820h case    0:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R31 + 0x00000008) );
		/* 821AA820h case    0:*/		return 0x821AA824;
		  /* 821AA824h */ case    1:  		/* b -112 */
		/* 821AA824h case    1:*/		return 0x821AA7B4;
		/* 821AA824h case    1:*/		return 0x821AA828;
	}
	return 0x821AA828;
} // Block from 821AA820h-821AA828h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AA828h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA828( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA828) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA828);
		  /* 821AA828h */ case    0:  		/* addi R27, R17, 44 */
		/* 821AA828h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R17,0x2C);
		/* 821AA828h case    0:*/		return 0x821AA82C;
		  /* 821AA82Ch */ case    1:  		/* mr R8, R23 */
		/* 821AA82Ch case    1:*/		regs.R8 = regs.R23;
		/* 821AA82Ch case    1:*/		return 0x821AA830;
		  /* 821AA830h */ case    2:  		/* rlwinm R28, R26, 13, 29, 31 */
		/* 821AA830h case    2:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R28,regs.R26);
		/* 821AA830h case    2:*/		return 0x821AA834;
		  /* 821AA834h */ case    3:  		/* mr R6, R27 */
		/* 821AA834h case    3:*/		regs.R6 = regs.R27;
		/* 821AA834h case    3:*/		return 0x821AA838;
		  /* 821AA838h */ case    4:  		/* cmplw CR6, R8, R28 */
		/* 821AA838h case    4:*/		cpu::op::cmplw<6>(regs,regs.R8,regs.R28);
		/* 821AA838h case    4:*/		return 0x821AA83C;
		  /* 821AA83Ch */ case    5:  		/* bc 4, CR6_LT, 100 */
		/* 821AA83Ch case    5:*/		if ( !regs.CR[6].lt ) { return 0x821AA8A0;  }
		/* 821AA83Ch case    5:*/		return 0x821AA840;
		  /* 821AA840h */ case    6:  		/* lwz R10, <#[R6]> */
		/* 821AA840h case    6:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R6 + 0x00000000) );
		/* 821AA840h case    6:*/		return 0x821AA844;
		  /* 821AA844h */ case    7:  		/* mr R7, R23 */
		/* 821AA844h case    7:*/		regs.R7 = regs.R23;
		/* 821AA844h case    7:*/		return 0x821AA848;
		  /* 821AA848h */ case    8:  		/* mr R11, R23 */
		/* 821AA848h case    8:*/		regs.R11 = regs.R23;
		/* 821AA848h case    8:*/		return 0x821AA84C;
		  /* 821AA84Ch */ case    9:  		/* lwz R5, <#[R10 + 12]> */
		/* 821AA84Ch case    9:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R10 + 0x0000000C) );
		/* 821AA84Ch case    9:*/		return 0x821AA850;
		  /* 821AA850h */ case   10:  		/* cmplw CR6, R7, R28 */
		/* 821AA850h case   10:*/		cpu::op::cmplw<6>(regs,regs.R7,regs.R28);
		/* 821AA850h case   10:*/		return 0x821AA854;
		  /* 821AA854h */ case   11:  		/* bc 4, CR6_LT, 64 */
		/* 821AA854h case   11:*/		if ( !regs.CR[6].lt ) { return 0x821AA894;  }
		/* 821AA854h case   11:*/		return 0x821AA858;
		  /* 821AA858h */ case   12:  		/* lwzx R10, <#[R11 + R27]> */
		/* 821AA858h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + regs.R27 + 0x00000000) );
		/* 821AA858h case   12:*/		return 0x821AA85C;
		  /* 821AA85Ch */ case   13:  		/* lwz R10, <#[R10 + 12]> */
		/* 821AA85Ch case   13:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x0000000C) );
		/* 821AA85Ch case   13:*/		return 0x821AA860;
		  /* 821AA860h */ case   14:  		/* cmplw CR6, R10, R5 */
		/* 821AA860h case   14:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R5);
		/* 821AA860h case   14:*/		return 0x821AA864;
		  /* 821AA864h */ case   15:  		/* bc 4, CR6_EQ, 36 */
		/* 821AA864h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821AA888;  }
		/* 821AA864h case   15:*/		return 0x821AA868;
		  /* 821AA868h */ case   16:  		/* rlwinm R10, R11, 29, 3, 29 */
		/* 821AA868h case   16:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R10,regs.R11);
		/* 821AA868h case   16:*/		return 0x821AA86C;
		  /* 821AA86Ch */ case   17:  		/* addi R9, R1, 112 */
		/* 821AA86Ch case   17:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0x70);
		/* 821AA86Ch case   17:*/		return 0x821AA870;
		  /* 821AA870h */ case   18:  		/* slw R4, R18, R8 */
		/* 821AA870h case   18:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R18,regs.R8);
		/* 821AA870h case   18:*/		return 0x821AA874;
		  /* 821AA874h */ case   19:  		/* rlwinm R3, R11, 0, 27, 31 */
		/* 821AA874h case   19:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R3,regs.R11);
		/* 821AA874h case   19:*/		return 0x821AA878;
		  /* 821AA878h */ case   20:  		/* lwzx R31, <#[R10 + R9]> */
		/* 821AA878h case   20:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821AA878h case   20:*/		return 0x821AA87C;
		  /* 821AA87Ch */ case   21:  		/* slw R4, R4, R3 */
		/* 821AA87Ch case   21:*/		cpu::op::slw<0>(regs,&regs.R4,regs.R4,regs.R3);
		/* 821AA87Ch case   21:*/		return 0x821AA880;
		  /* 821AA880h */ case   22:  		/* or R4, R4, R31 */
		/* 821AA880h case   22:*/		cpu::op::or<0>(regs,&regs.R4,regs.R4,regs.R31);
		/* 821AA880h case   22:*/		return 0x821AA884;
		  /* 821AA884h */ case   23:  		/* stwx R4, <#[R10 + R9]> */
		/* 821AA884h case   23:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R10 + regs.R9 + 0x00000000) );
		/* 821AA884h case   23:*/		return 0x821AA888;
	}
	return 0x821AA888;
} // Block from 821AA828h-821AA888h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821AA888h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA888( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA888) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA888);
		  /* 821AA888h */ case    0:  		/* addi R7, R7, 1 */
		/* 821AA888h case    0:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x1);
		/* 821AA888h case    0:*/		return 0x821AA88C;
		  /* 821AA88Ch */ case    1:  		/* addi R11, R11, 4 */
		/* 821AA88Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AA88Ch case    1:*/		return 0x821AA890;
		  /* 821AA890h */ case    2:  		/* b -64 */
		/* 821AA890h case    2:*/		return 0x821AA850;
		/* 821AA890h case    2:*/		return 0x821AA894;
	}
	return 0x821AA894;
} // Block from 821AA888h-821AA894h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA894h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA894( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA894) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA894);
		  /* 821AA894h */ case    0:  		/* addi R8, R8, 1 */
		/* 821AA894h case    0:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x1);
		/* 821AA894h case    0:*/		return 0x821AA898;
		  /* 821AA898h */ case    1:  		/* addi R6, R6, 4 */
		/* 821AA898h case    1:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0x4);
		/* 821AA898h case    1:*/		return 0x821AA89C;
		  /* 821AA89Ch */ case    2:  		/* b -100 */
		/* 821AA89Ch case    2:*/		return 0x821AA838;
		/* 821AA89Ch case    2:*/		return 0x821AA8A0;
	}
	return 0x821AA8A0;
} // Block from 821AA894h-821AA8A0h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AA8A0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA8A0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA8A0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA8A0);
		  /* 821AA8A0h */ case    0:  		/* li R30, -1 */
		/* 821AA8A0h case    0:*/		cpu::op::li<0>(regs,&regs.R30,0xFFFFFFFF);
		/* 821AA8A0h case    0:*/		return 0x821AA8A4;
		  /* 821AA8A4h */ case    1:  		/* li R25, 2 */
		/* 821AA8A4h case    1:*/		cpu::op::li<0>(regs,&regs.R25,0x2);
		/* 821AA8A4h case    1:*/		return 0x821AA8A8;
		  /* 821AA8A8h */ case    2:  		/* mr R29, R23 */
		/* 821AA8A8h case    2:*/		regs.R29 = regs.R23;
		/* 821AA8A8h case    2:*/		return 0x821AA8AC;
		  /* 821AA8ACh */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 821AA8ACh case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821AA8ACh case    3:*/		return 0x821AA8B0;
		  /* 821AA8B0h */ case    4:  		/* bc 12, CR6_EQ, 204 */
		/* 821AA8B0h case    4:*/		if ( regs.CR[6].eq ) { return 0x821AA97C;  }
		/* 821AA8B0h case    4:*/		return 0x821AA8B4;
		  /* 821AA8B4h */ case    5:  		/* mr R7, R23 */
		/* 821AA8B4h case    5:*/		regs.R7 = regs.R23;
		/* 821AA8B4h case    5:*/		return 0x821AA8B8;
		  /* 821AA8B8h */ case    6:  		/* mr R31, R28 */
		/* 821AA8B8h case    6:*/		regs.R31 = regs.R28;
		/* 821AA8B8h case    6:*/		return 0x821AA8BC;
		  /* 821AA8BCh */ case    7:  		/* addi R10, R7, 3 */
		/* 821AA8BCh case    7:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R7,0x3);
		/* 821AA8BCh case    7:*/		return 0x821AA8C0;
		  /* 821AA8C0h */ case    8:  		/* rlwinm R11, R7, 0, 27, 31 */
		/* 821AA8C0h case    8:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R11,regs.R7);
		/* 821AA8C0h case    8:*/		return 0x821AA8C4;
		  /* 821AA8C4h */ case    9:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821AA8C4h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821AA8C4h case    9:*/		return 0x821AA8C8;
		  /* 821AA8C8h */ case   10:  		/* rlwinm R9, R7, 29, 3, 29 */
		/* 821AA8C8h case   10:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R9,regs.R7);
		/* 821AA8C8h case   10:*/		return 0x821AA8CC;
		  /* 821AA8CCh */ case   11:  		/* slw R8, R25, R10 */
		/* 821AA8CCh case   11:*/		cpu::op::slw<0>(regs,&regs.R8,regs.R25,regs.R10);
		/* 821AA8CCh case   11:*/		return 0x821AA8D0;
		  /* 821AA8D0h */ case   12:  		/* addi R10, R1, 112 */
		/* 821AA8D0h case   12:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x70);
		/* 821AA8D0h case   12:*/		return 0x821AA8D4;
		  /* 821AA8D4h */ case   13:  		/* addi R8, R8, -1 */
		/* 821AA8D4h case   13:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0xFFFFFFFF);
		/* 821AA8D4h case   13:*/		return 0x821AA8D8;
		  /* 821AA8D8h */ case   14:  		/* slw R6, R30, R11 */
		/* 821AA8D8h case   14:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R30,regs.R11);
		/* 821AA8D8h case   14:*/		return 0x821AA8DC;
		  /* 821AA8DCh */ case   15:  		/* lwzx R4, <#[R9 + R10]> */
		/* 821AA8DCh case   15:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821AA8DCh case   15:*/		return 0x821AA8E0;
		  /* 821AA8E0h */ case   16:  		/* and R5, R8, R6 */
		/* 821AA8E0h case   16:*/		cpu::op::and<0>(regs,&regs.R5,regs.R8,regs.R6);
		/* 821AA8E0h case   16:*/		return 0x821AA8E4;
		  /* 821AA8E4h */ case   17:  		/* li R6, 4 */
		/* 821AA8E4h case   17:*/		cpu::op::li<0>(regs,&regs.R6,0x4);
		/* 821AA8E4h case   17:*/		return 0x821AA8E8;
		  /* 821AA8E8h */ case   18:  		/* and R8, R4, R5 */
		/* 821AA8E8h case   18:*/		cpu::op::and<0>(regs,&regs.R8,regs.R4,regs.R5);
		/* 821AA8E8h case   18:*/		return 0x821AA8EC;
		  /* 821AA8ECh */ case   19:  		/* mr R4, R23 */
		/* 821AA8ECh case   19:*/		regs.R4 = regs.R23;
		/* 821AA8ECh case   19:*/		return 0x821AA8F0;
		  /* 821AA8F0h */ case   20:  		/* srw R3, R8, R11 */
		/* 821AA8F0h case   20:*/		cpu::op::srw<0>(regs,&regs.R3,regs.R8,regs.R11);
		/* 821AA8F0h case   20:*/		return 0x821AA8F4;
		  /* 821AA8F4h */ case   21:  		/* mr R8, R23 */
		/* 821AA8F4h case   21:*/		regs.R8 = regs.R23;
		/* 821AA8F4h case   21:*/		return 0x821AA8F8;
		  /* 821AA8F8h */ case   22:  		/* mtspr CTR, R6 */
		/* 821AA8F8h case   22:*/		regs.CTR = regs.R6;
		/* 821AA8F8h case   22:*/		return 0x821AA8FC;
		  /* 821AA8FCh */ case   23:  		/* slw R6, R18, R4 */
		/* 821AA8FCh case   23:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R18,regs.R4);
		/* 821AA8FCh case   23:*/		return 0x821AA900;
		  /* 821AA900h */ case   24:  		/* and. R6, R6, R3 */
		/* 821AA900h case   24:*/		cpu::op::and<1>(regs,&regs.R6,regs.R6,regs.R3);
		/* 821AA900h case   24:*/		return 0x821AA904;
		  /* 821AA904h */ case   25:  		/* bc 12, CR0_EQ, 96 */
		/* 821AA904h case   25:*/		if ( regs.CR[0].eq ) { return 0x821AA964;  }
		/* 821AA904h case   25:*/		return 0x821AA908;
		  /* 821AA908h */ case   26:  		/* addi R6, R8, 3 */
		/* 821AA908h case   26:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R8,0x3);
		/* 821AA908h case   26:*/		return 0x821AA90C;
		  /* 821AA90Ch */ case   27:  		/* lwzx R24, <#[R9 + R10]> */
		/* 821AA90Ch case   27:*/		cpu::mem::load32z( regs, &regs.R24, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821AA90Ch case   27:*/		return 0x821AA910;
		  /* 821AA910h */ case   28:  		/* addi R20, R1, 112 */
		/* 821AA910h case   28:*/		cpu::op::addi<0>(regs,&regs.R20,regs.R1,0x70);
		/* 821AA910h case   28:*/		return 0x821AA914;
		  /* 821AA914h */ case   29:  		/* rlwinm R22, R8, 29, 3, 29 */
		/* 821AA914h case   29:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R22,regs.R8);
		/* 821AA914h case   29:*/		return 0x821AA918;
		  /* 821AA918h */ case   30:  		/* rlwinm R6, R6, 0, 27, 31 */
		/* 821AA918h case   30:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R6,regs.R6);
		/* 821AA918h case   30:*/		return 0x821AA91C;
		  /* 821AA91Ch */ case   31:  		/* and R24, R24, R5 */
		/* 821AA91Ch case   31:*/		cpu::op::and<0>(regs,&regs.R24,regs.R24,regs.R5);
		/* 821AA91Ch case   31:*/		return 0x821AA920;
		  /* 821AA920h */ case   32:  		/* slw R6, R25, R6 */
		/* 821AA920h case   32:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R25,regs.R6);
		/* 821AA920h case   32:*/		return 0x821AA924;
		  /* 821AA924h */ case   33:  		/* lwzx R22, <#[R22 + R20]> */
		/* 821AA924h case   33:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R22 + regs.R20 + 0x00000000) );
		/* 821AA924h case   33:*/		return 0x821AA928;
		  /* 821AA928h */ case   34:  		/* addi R6, R6, -1 */
		/* 821AA928h case   34:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R6,0xFFFFFFFF);
		/* 821AA928h case   34:*/		return 0x821AA92C;
		  /* 821AA92Ch */ case   35:  		/* rlwinm R20, R8, 0, 27, 31 */
		/* 821AA92Ch case   35:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R20,regs.R8);
		/* 821AA92Ch case   35:*/		return 0x821AA930;
		  /* 821AA930h */ case   36:  		/* and R6, R6, R22 */
		/* 821AA930h case   36:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R22);
		/* 821AA930h case   36:*/		return 0x821AA934;
		  /* 821AA934h */ case   37:  		/* slw R19, R30, R20 */
		/* 821AA934h case   37:*/		cpu::op::slw<0>(regs,&regs.R19,regs.R30,regs.R20);
		/* 821AA934h case   37:*/		return 0x821AA938;
		  /* 821AA938h */ case   38:  		/* and R6, R6, R19 */
		/* 821AA938h case   38:*/		cpu::op::and<0>(regs,&regs.R6,regs.R6,regs.R19);
		/* 821AA938h case   38:*/		return 0x821AA93C;
		  /* 821AA93Ch */ case   39:  		/* srw R24, R24, R11 */
		/* 821AA93Ch case   39:*/		cpu::op::srw<0>(regs,&regs.R24,regs.R24,regs.R11);
		/* 821AA93Ch case   39:*/		return 0x821AA940;
		  /* 821AA940h */ case   40:  		/* srw R6, R6, R20 */
		/* 821AA940h case   40:*/		cpu::op::srw<0>(regs,&regs.R6,regs.R6,regs.R20);
		/* 821AA940h case   40:*/		return 0x821AA944;
		  /* 821AA944h */ case   41:  		/* or R6, R6, R24 */
		/* 821AA944h case   41:*/		cpu::op::or<0>(regs,&regs.R6,regs.R6,regs.R24);
		/* 821AA944h case   41:*/		return 0x821AA948;
		  /* 821AA948h */ case   42:  		/* cmplw CR6, R6, R24 */
		/* 821AA948h case   42:*/		cpu::op::cmplw<6>(regs,regs.R6,regs.R24);
		/* 821AA948h case   42:*/		return 0x821AA94C;
		  /* 821AA94Ch */ case   43:  		/* bc 12, CR6_EQ, 24 */
		/* 821AA94Ch case   43:*/		if ( regs.CR[6].eq ) { return 0x821AA964;  }
		/* 821AA94Ch case   43:*/		return 0x821AA950;
		  /* 821AA950h */ case   44:  		/* lwzx R29, <#[R9 + R10]> */
		/* 821AA950h case   44:*/		cpu::mem::load32z( regs, &regs.R29, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821AA950h case   44:*/		return 0x821AA954;
		  /* 821AA954h */ case   45:  		/* slw R6, R6, R11 */
		/* 821AA954h case   45:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R6,regs.R11);
		/* 821AA954h case   45:*/		return 0x821AA958;
		  /* 821AA958h */ case   46:  		/* or R6, R6, R29 */
		/* 821AA958h case   46:*/		cpu::op::or<0>(regs,&regs.R6,regs.R6,regs.R29);
		/* 821AA958h case   46:*/		return 0x821AA95C;
		  /* 821AA95Ch */ case   47:  		/* mr R29, R18 */
		/* 821AA95Ch case   47:*/		regs.R29 = regs.R18;
		/* 821AA95Ch case   47:*/		return 0x821AA960;
		  /* 821AA960h */ case   48:  		/* stwx R6, <#[R9 + R10]> */
		/* 821AA960h case   48:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R9 + regs.R10 + 0x00000000) );
		/* 821AA960h case   48:*/		return 0x821AA964;
	}
	return 0x821AA964;
} // Block from 821AA8A0h-821AA964h (49 instructions)

//////////////////////////////////////////////////////
// Block at 821AA964h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA964( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA964) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA964);
		  /* 821AA964h */ case    0:  		/* addi R4, R4, 1 */
		/* 821AA964h case    0:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R4,0x1);
		/* 821AA964h case    0:*/		return 0x821AA968;
		  /* 821AA968h */ case    1:  		/* addi R8, R8, 4 */
		/* 821AA968h case    1:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R8,0x4);
		/* 821AA968h case    1:*/		return 0x821AA96C;
		  /* 821AA96Ch */ case    2:  		/* bc 16, CR0_LT, -112 */
		/* 821AA96Ch case    2:*/		regs.CTR -= 1;
		if ( (uint32)regs.CTR != 0 ) { return 0x821AA8FC;  }
		/* 821AA96Ch case    2:*/		return 0x821AA970;
		  /* 821AA970h */ case    3:  		/* addic. R31, R31, -1 */
		/* 821AA970h case    3:*/		cpu::op::addic<1>(regs,&regs.R31,regs.R31,0xFFFFFFFF);
		/* 821AA970h case    3:*/		return 0x821AA974;
		  /* 821AA974h */ case    4:  		/* addi R7, R7, 4 */
		/* 821AA974h case    4:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R7,0x4);
		/* 821AA974h case    4:*/		return 0x821AA978;
		  /* 821AA978h */ case    5:  		/* bc 4, CR0_EQ, -188 */
		/* 821AA978h case    5:*/		if ( !regs.CR[0].eq ) { return 0x821AA8BC;  }
		/* 821AA978h case    5:*/		return 0x821AA97C;
	}
	return 0x821AA97C;
} // Block from 821AA964h-821AA97Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AA97Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA97C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA97C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA97C);
		  /* 821AA97Ch */ case    0:  		/* rlwinm. R11, R29, 0, 24, 31 */
		/* 821AA97Ch case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R29);
		/* 821AA97Ch case    0:*/		return 0x821AA980;
		  /* 821AA980h */ case    1:  		/* bc 4, CR0_EQ, -216 */
		/* 821AA980h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AA8A8;  }
		/* 821AA980h case    1:*/		return 0x821AA984;
		  /* 821AA984h */ case    2:  		/* mr R9, R23 */
		/* 821AA984h case    2:*/		regs.R9 = regs.R23;
		/* 821AA984h case    2:*/		return 0x821AA988;
		  /* 821AA988h */ case    3:  		/* cmplwi CR6, R28, 0 */
		/* 821AA988h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821AA988h case    3:*/		return 0x821AA98C;
		  /* 821AA98Ch */ case    4:  		/* bc 12, CR6_EQ, 88 */
		/* 821AA98Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821AA98Ch case    4:*/		return 0x821AA990;
		  /* 821AA990h */ case    5:  		/* mr R11, R23 */
		/* 821AA990h case    5:*/		regs.R11 = regs.R23;
		/* 821AA990h case    5:*/		return 0x821AA994;
		  /* 821AA994h */ case    6:  		/* addi R10, R11, 3 */
		/* 821AA994h case    6:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x3);
		/* 821AA994h case    6:*/		return 0x821AA998;
		  /* 821AA998h */ case    7:  		/* addi R7, R1, 112 */
		/* 821AA998h case    7:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x70);
		/* 821AA998h case    7:*/		return 0x821AA99C;
		  /* 821AA99Ch */ case    8:  		/* rlwinm R8, R11, 29, 3, 29 */
		/* 821AA99Ch case    8:*/		cpu::op::rlwinm<0,29,3,29>(regs,&regs.R8,regs.R11);
		/* 821AA99Ch case    8:*/		return 0x821AA9A0;
		  /* 821AA9A0h */ case    9:  		/* rlwinm R10, R10, 0, 27, 31 */
		/* 821AA9A0h case    9:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R10,regs.R10);
		/* 821AA9A0h case    9:*/		return 0x821AA9A4;
		  /* 821AA9A4h */ case   10:  		/* slw R10, R25, R10 */
		/* 821AA9A4h case   10:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R25,regs.R10);
		/* 821AA9A4h case   10:*/		return 0x821AA9A8;
		  /* 821AA9A8h */ case   11:  		/* lwzx R8, <#[R8 + R7]> */
		/* 821AA9A8h case   11:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R8 + regs.R7 + 0x00000000) );
		/* 821AA9A8h case   11:*/		return 0x821AA9AC;
		  /* 821AA9ACh */ case   12:  		/* rlwinm R7, R11, 0, 27, 31 */
		/* 821AA9ACh case   12:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R7,regs.R11);
		/* 821AA9ACh case   12:*/		return 0x821AA9B0;
		  /* 821AA9B0h */ case   13:  		/* addi R10, R10, -1 */
		/* 821AA9B0h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R10,0xFFFFFFFF);
		/* 821AA9B0h case   13:*/		return 0x821AA9B4;
		  /* 821AA9B4h */ case   14:  		/* slw R6, R30, R7 */
		/* 821AA9B4h case   14:*/		cpu::op::slw<0>(regs,&regs.R6,regs.R30,regs.R7);
		/* 821AA9B4h case   14:*/		return 0x821AA9B8;
		  /* 821AA9B8h */ case   15:  		/* and R10, R10, R8 */
		/* 821AA9B8h case   15:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R8);
		/* 821AA9B8h case   15:*/		return 0x821AA9BC;
		  /* 821AA9BCh */ case   16:  		/* and R10, R10, R6 */
		/* 821AA9BCh case   16:*/		cpu::op::and<0>(regs,&regs.R10,regs.R10,regs.R6);
		/* 821AA9BCh case   16:*/		return 0x821AA9C0;
		  /* 821AA9C0h */ case   17:  		/* srw. R24, R10, R7 */
		/* 821AA9C0h case   17:*/		cpu::op::srw<1>(regs,&regs.R24,regs.R10,regs.R7);
		/* 821AA9C0h case   17:*/		return 0x821AA9C4;
		  /* 821AA9C4h */ case   18:  		/* bc 12, CR0_EQ, 52 */
		/* 821AA9C4h case   18:*/		if ( regs.CR[0].eq ) { return 0x821AA9F8;  }
		/* 821AA9C4h case   18:*/		return 0x821AA9C8;
		  /* 821AA9C8h */ case   19:  		/* rlwinm R10, R26, 31, 28, 31 */
		/* 821AA9C8h case   19:*/		cpu::op::rlwinm<0,31,28,31>(regs,&regs.R10,regs.R26);
		/* 821AA9C8h case   19:*/		return 0x821AA9CC;
		  /* 821AA9CCh */ case   20:  		/* subf. R31, R24, R10 */
		/* 821AA9CCh case   20:*/		cpu::op::subf<1>(regs,&regs.R31,regs.R24,regs.R10);
		/* 821AA9CCh case   20:*/		return 0x821AA9D0;
		  /* 821AA9D0h */ case   21:  		/* bc 4, CR0_EQ, 52 */
		/* 821AA9D0h case   21:*/		if ( !regs.CR[0].eq ) { return 0x821AAA04;  }
		/* 821AA9D0h case   21:*/		return 0x821AA9D4;
		  /* 821AA9D4h */ case   22:  		/* addi R9, R9, 1 */
		/* 821AA9D4h case   22:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R9,0x1);
		/* 821AA9D4h case   22:*/		return 0x821AA9D8;
		  /* 821AA9D8h */ case   23:  		/* addi R11, R11, 4 */
		/* 821AA9D8h case   23:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AA9D8h case   23:*/		return 0x821AA9DC;
		  /* 821AA9DCh */ case   24:  		/* cmplw CR6, R9, R28 */
		/* 821AA9DCh case   24:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R28);
		/* 821AA9DCh case   24:*/		return 0x821AA9E0;
		  /* 821AA9E0h */ case   25:  		/* bc 12, CR6_LT, -76 */
		/* 821AA9E0h case   25:*/		if ( regs.CR[6].lt ) { return 0x821AA994;  }
		/* 821AA9E0h case   25:*/		return 0x821AA9E4;
	}
	return 0x821AA9E4;
} // Block from 821AA97Ch-821AA9E4h (26 instructions)

//////////////////////////////////////////////////////
// Block at 821AA9E4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA9E4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA9E4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA9E4);
		  /* 821AA9E4h */ case    0:  		/* li R3, 0 */
		/* 821AA9E4h case    0:*/		cpu::op::li<0>(regs,&regs.R3,0x0);
		/* 821AA9E4h case    0:*/		return 0x821AA9E8;
	}
	return 0x821AA9E8;
} // Block from 821AA9E4h-821AA9E8h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AA9E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA9E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA9E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA9E8);
		  /* 821AA9E8h */ case    0:  		/* addi R1, R1, 1216 */
		/* 821AA9E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R1,regs.R1,0x4C0);
		/* 821AA9E8h case    0:*/		return 0x821AA9EC;
		  /* 821AA9ECh */ case    1:  		/* addi R12, R1, -152 */
		/* 821AA9ECh case    1:*/		cpu::op::addi<0>(regs,&regs.R12,regs.R1,0xFFFFFF68);
		/* 821AA9ECh case    1:*/		return 0x821AA9F0;
		  /* 821AA9F0h */ case    2:  		/* bl -1152396 */
		/* 821AA9F0h case    2:*/		regs.LR = 0x821AA9F4; return 0x82091464;
		/* 821AA9F0h case    2:*/		return 0x821AA9F4;
		  /* 821AA9F4h */ case    3:  		/* b -1152900 */
		/* 821AA9F4h case    3:*/		return 0x82091270;
		/* 821AA9F4h case    3:*/		return 0x821AA9F8;
	}
	return 0x821AA9F8;
} // Block from 821AA9E8h-821AA9F8h (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AA9F8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AA9F8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AA9F8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AA9F8);
		  /* 821AA9F8h */ case    0:  		/* li R4, 4800 */
		/* 821AA9F8h case    0:*/		cpu::op::li<0>(regs,&regs.R4,0x12C0);
		/* 821AA9F8h case    0:*/		return 0x821AA9FC;
		  /* 821AA9FCh */ case    1:  		/* lwz R3, <#[R1 + 1236]> */
		/* 821AA9FCh case    1:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AA9FCh case    1:*/		return 0x821AAA00;
		  /* 821AAA00h */ case    2:  		/* bl -363416 */
		/* 821AAA00h case    2:*/		regs.LR = 0x821AAA04; return 0x82151E68;
		/* 821AAA00h case    2:*/		return 0x821AAA04;
	}
	return 0x821AAA04;
} // Block from 821AA9F8h-821AAA04h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AAA04h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAA04( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAA04) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAA04);
		  /* 821AAA04h */ case    0:  		/* lis R11, -28311 */
		/* 821AAA04h case    0:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821AAA04h case    0:*/		return 0x821AAA08;
		  /* 821AAA08h */ case    1:  		/* lwz R19, <#[R1 + 1236]> */
		/* 821AAA08h case    1:*/		cpu::mem::load32z( regs, &regs.R19, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AAA08h case    1:*/		return 0x821AAA0C;
		  /* 821AAA0Ch */ case    2:  		/* lis R10, 0 */
		/* 821AAA0Ch case    2:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 821AAA0Ch case    2:*/		return 0x821AAA10;
		  /* 821AAA10h */ case    3:  		/* ori R11, R11, 5192 */
		/* 821AAA10h case    3:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821AAA10h case    3:*/		return 0x821AAA14;
		  /* 821AAA14h */ case    4:  		/* ori R10, R10, 36262 */
		/* 821AAA14h case    4:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8DA6);
		/* 821AAA14h case    4:*/		return 0x821AAA18;
		  /* 821AAA18h */ case    5:  		/* rldicl R9, R24, 0, 32 */
		/* 821AAA18h case    5:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R24);
		/* 821AAA18h case    5:*/		return 0x821AAA1C;
		  /* 821AAA1Ch */ case    6:  		/* rldimi R11, R10, 32, 0 */
		/* 821AAA1Ch case    6:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R10);
		/* 821AAA1Ch case    6:*/		return 0x821AAA20;
		  /* 821AAA20h */ case    7:  		/* mr R3, R19 */
		/* 821AAA20h case    7:*/		regs.R3 = regs.R19;
		/* 821AAA20h case    7:*/		return 0x821AAA24;
		  /* 821AAA24h */ case    8:  		/* srd R11, R11, R9 */
		/* 821AAA24h case    8:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AAA24h case    8:*/		return 0x821AAA28;
		  /* 821AAA28h */ case    9:  		/* srd R11, R11, R9 */
		/* 821AAA28h case    9:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AAA28h case    9:*/		return 0x821AAA2C;
		  /* 821AAA2Ch */ case   10:  		/* srd R11, R11, R9 */
		/* 821AAA2Ch case   10:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AAA2Ch case   10:*/		return 0x821AAA30;
		  /* 821AAA30h */ case   11:  		/* mr R5, R17 */
		/* 821AAA30h case   11:*/		regs.R5 = regs.R17;
		/* 821AAA30h case   11:*/		return 0x821AAA34;
		  /* 821AAA34h */ case   12:  		/* rlwinm R6, R11, 0, 29, 31 */
		/* 821AAA34h case   12:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R6,regs.R11);
		/* 821AAA34h case   12:*/		return 0x821AAA38;
		  /* 821AAA38h */ case   13:  		/* li R4, 0 */
		/* 821AAA38h case   13:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AAA38h case   13:*/		return 0x821AAA3C;
		  /* 821AAA3Ch */ case   14:  		/* bl -52380 */
		/* 821AAA3Ch case   14:*/		regs.LR = 0x821AAA40; return 0x8219DDA0;
		/* 821AAA3Ch case   14:*/		return 0x821AAA40;
		  /* 821AAA40h */ case   15:  		/* lis R11, -28311 */
		/* 821AAA40h case   15:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF9169);
		/* 821AAA40h case   15:*/		return 0x821AAA44;
		  /* 821AAA44h */ case   16:  		/* lis R10, 0 */
		/* 821AAA44h case   16:*/		cpu::op::lis<0>(regs,&regs.R10,0x0);
		/* 821AAA44h case   16:*/		return 0x821AAA48;
		  /* 821AAA48h */ case   17:  		/* ori R11, R11, 5192 */
		/* 821AAA48h case   17:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1448);
		/* 821AAA48h case   17:*/		return 0x821AAA4C;
		  /* 821AAA4Ch */ case   18:  		/* ori R10, R10, 36262 */
		/* 821AAA4Ch case   18:*/		cpu::op::ori<0>(regs,&regs.R10,regs.R10,0x8DA6);
		/* 821AAA4Ch case   18:*/		return 0x821AAA50;
		  /* 821AAA50h */ case   19:  		/* rldicl R9, R31, 0, 32 */
		/* 821AAA50h case   19:*/		cpu::op::rldicl<0,0,32>(regs,&regs.R9,regs.R31);
		/* 821AAA50h case   19:*/		return 0x821AAA54;
		  /* 821AAA54h */ case   20:  		/* rldimi R11, R10, 32, 0 */
		/* 821AAA54h case   20:*/		cpu::op::rldimi<0,32,0>(regs,&regs.R11,regs.R10);
		/* 821AAA54h case   20:*/		return 0x821AAA58;
		  /* 821AAA58h */ case   21:  		/* mr R26, R3 */
		/* 821AAA58h case   21:*/		regs.R26 = regs.R3;
		/* 821AAA58h case   21:*/		return 0x821AAA5C;
		  /* 821AAA5Ch */ case   22:  		/* srd R11, R11, R9 */
		/* 821AAA5Ch case   22:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AAA5Ch case   22:*/		return 0x821AAA60;
		  /* 821AAA60h */ case   23:  		/* srd R11, R11, R9 */
		/* 821AAA60h case   23:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AAA60h case   23:*/		return 0x821AAA64;
		  /* 821AAA64h */ case   24:  		/* srd R11, R11, R9 */
		/* 821AAA64h case   24:*/		cpu::op::srd<0>(regs,&regs.R11,regs.R11,regs.R9);
		/* 821AAA64h case   24:*/		return 0x821AAA68;
		  /* 821AAA68h */ case   25:  		/* mr R5, R17 */
		/* 821AAA68h case   25:*/		regs.R5 = regs.R17;
		/* 821AAA68h case   25:*/		return 0x821AAA6C;
		  /* 821AAA6Ch */ case   26:  		/* rlwinm R6, R11, 0, 29, 31 */
		/* 821AAA6Ch case   26:*/		cpu::op::rlwinm<0,0,29,31>(regs,&regs.R6,regs.R11);
		/* 821AAA6Ch case   26:*/		return 0x821AAA70;
		  /* 821AAA70h */ case   27:  		/* li R4, 0 */
		/* 821AAA70h case   27:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AAA70h case   27:*/		return 0x821AAA74;
		  /* 821AAA74h */ case   28:  		/* mr R3, R19 */
		/* 821AAA74h case   28:*/		regs.R3 = regs.R19;
		/* 821AAA74h case   28:*/		return 0x821AAA78;
		  /* 821AAA78h */ case   29:  		/* bl -52440 */
		/* 821AAA78h case   29:*/		regs.LR = 0x821AAA7C; return 0x8219DDA0;
		/* 821AAA78h case   29:*/		return 0x821AAA7C;
		  /* 821AAA7Ch */ case   30:  		/* mr R29, R23 */
		/* 821AAA7Ch case   30:*/		regs.R29 = regs.R23;
		/* 821AAA7Ch case   30:*/		return 0x821AAA80;
		  /* 821AAA80h */ case   31:  		/* mr R30, R23 */
		/* 821AAA80h case   31:*/		regs.R30 = regs.R23;
		/* 821AAA80h case   31:*/		return 0x821AAA84;
		  /* 821AAA84h */ case   32:  		/* mr R22, R23 */
		/* 821AAA84h case   32:*/		regs.R22 = regs.R23;
		/* 821AAA84h case   32:*/		return 0x821AAA88;
		  /* 821AAA88h */ case   33:  		/* mr R25, R3 */
		/* 821AAA88h case   33:*/		regs.R25 = regs.R3;
		/* 821AAA88h case   33:*/		return 0x821AAA8C;
		  /* 821AAA8Ch */ case   34:  		/* mr R28, R23 */
		/* 821AAA8Ch case   34:*/		regs.R28 = regs.R23;
		/* 821AAA8Ch case   34:*/		return 0x821AAA90;
		  /* 821AAA90h */ case   35:  		/* mr R31, R23 */
		/* 821AAA90h case   35:*/		regs.R31 = regs.R23;
		/* 821AAA90h case   35:*/		return 0x821AAA94;
		  /* 821AAA94h */ case   36:  		/* li R20, 3 */
		/* 821AAA94h case   36:*/		cpu::op::li<0>(regs,&regs.R20,0x3);
		/* 821AAA94h case   36:*/		return 0x821AAA98;
		  /* 821AAA98h */ case   37:  		/* lwz R11, <#[R17 + 8]> */
		/* 821AAA98h case   37:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R17 + 0x00000008) );
		/* 821AAA98h case   37:*/		return 0x821AAA9C;
		  /* 821AAA9Ch */ case   38:  		/* rlwinm R11, R11, 13, 29, 31 */
		/* 821AAA9Ch case   38:*/		cpu::op::rlwinm<0,13,29,31>(regs,&regs.R11,regs.R11);
		/* 821AAA9Ch case   38:*/		return 0x821AAAA0;
		  /* 821AAAA0h */ case   39:  		/* cmplw CR6, R28, R11 */
		/* 821AAAA0h case   39:*/		cpu::op::cmplw<6>(regs,regs.R28,regs.R11);
		/* 821AAAA0h case   39:*/		return 0x821AAAA4;
		  /* 821AAAA4h */ case   40:  		/* bc 4, CR6_LT, 104 */
		/* 821AAAA4h case   40:*/		if ( !regs.CR[6].lt ) { return 0x821AAB0C;  }
		/* 821AAAA4h case   40:*/		return 0x821AAAA8;
		  /* 821AAAA8h */ case   41:  		/* slw R11, R18, R28 */
		/* 821AAAA8h case   41:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R18,regs.R28);
		/* 821AAAA8h case   41:*/		return 0x821AAAAC;
		  /* 821AAAACh */ case   42:  		/* lwz R5, <#[R27]> */
		/* 821AAAACh case   42:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R27 + 0x00000000) );
		/* 821AAAACh case   42:*/		return 0x821AAAB0;
		  /* 821AAAB0h */ case   43:  		/* and. R11, R11, R24 */
		/* 821AAAB0h case   43:*/		cpu::op::and<1>(regs,&regs.R11,regs.R11,regs.R24);
		/* 821AAAB0h case   43:*/		return 0x821AAAB4;
		  /* 821AAAB4h */ case   44:  		/* bc 12, CR0_EQ, 40 */
		/* 821AAAB4h case   44:*/		if ( regs.CR[0].eq ) { return 0x821AAADC;  }
		/* 821AAAB4h case   44:*/		return 0x821AAAB8;
		  /* 821AAAB8h */ case   45:  		/* mr R4, R29 */
		/* 821AAAB8h case   45:*/		regs.R4 = regs.R29;
		/* 821AAAB8h case   45:*/		return 0x821AAABC;
		  /* 821AAABCh */ case   46:  		/* mr R3, R26 */
		/* 821AAABCh case   46:*/		regs.R3 = regs.R26;
		/* 821AAABCh case   46:*/		return 0x821AAAC0;
		  /* 821AAAC0h */ case   47:  		/* bl -238608 */
		/* 821AAAC0h case   47:*/		regs.LR = 0x821AAAC4; return 0x821706B0;
		/* 821AAAC0h case   47:*/		return 0x821AAAC4;
		  /* 821AAAC4h */ case   48:  		/* slw R11, R20, R31 */
		/* 821AAAC4h case   48:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R31);
		/* 821AAAC4h case   48:*/		return 0x821AAAC8;
		  /* 821AAAC8h */ case   49:  		/* slw R10, R29, R31 */
		/* 821AAAC8h case   49:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R29,regs.R31);
		/* 821AAAC8h case   49:*/		return 0x821AAACC;
		  /* 821AAACCh */ case   50:  		/* andc R11, R22, R11 */
		/* 821AAACCh case   50:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R22,regs.R11);
		/* 821AAACCh case   50:*/		return 0x821AAAD0;
		  /* 821AAAD0h */ case   51:  		/* addi R29, R29, 1 */
		/* 821AAAD0h case   51:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821AAAD0h case   51:*/		return 0x821AAAD4;
		  /* 821AAAD4h */ case   52:  		/* or R22, R11, R10 */
		/* 821AAAD4h case   52:*/		cpu::op::or<0>(regs,&regs.R22,regs.R11,regs.R10);
		/* 821AAAD4h case   52:*/		return 0x821AAAD8;
		  /* 821AAAD8h */ case   53:  		/* b 36 */
		/* 821AAAD8h case   53:*/		return 0x821AAAFC;
		/* 821AAAD8h case   53:*/		return 0x821AAADC;
	}
	return 0x821AAADC;
} // Block from 821AAA04h-821AAADCh (54 instructions)

//////////////////////////////////////////////////////
// Block at 821AAADCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAADC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAADC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAADC);
		  /* 821AAADCh */ case    0:  		/* mr R4, R30 */
		/* 821AAADCh case    0:*/		regs.R4 = regs.R30;
		/* 821AAADCh case    0:*/		return 0x821AAAE0;
		  /* 821AAAE0h */ case    1:  		/* mr R3, R25 */
		/* 821AAAE0h case    1:*/		regs.R3 = regs.R25;
		/* 821AAAE0h case    1:*/		return 0x821AAAE4;
		  /* 821AAAE4h */ case    2:  		/* bl -238644 */
		/* 821AAAE4h case    2:*/		regs.LR = 0x821AAAE8; return 0x821706B0;
		/* 821AAAE4h case    2:*/		return 0x821AAAE8;
		  /* 821AAAE8h */ case    3:  		/* slw R11, R20, R31 */
		/* 821AAAE8h case    3:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R31);
		/* 821AAAE8h case    3:*/		return 0x821AAAEC;
		  /* 821AAAECh */ case    4:  		/* slw R10, R30, R31 */
		/* 821AAAECh case    4:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R30,regs.R31);
		/* 821AAAECh case    4:*/		return 0x821AAAF0;
		  /* 821AAAF0h */ case    5:  		/* andc R11, R23, R11 */
		/* 821AAAF0h case    5:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R23,regs.R11);
		/* 821AAAF0h case    5:*/		return 0x821AAAF4;
		  /* 821AAAF4h */ case    6:  		/* addi R30, R30, 1 */
		/* 821AAAF4h case    6:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R30,0x1);
		/* 821AAAF4h case    6:*/		return 0x821AAAF8;
		  /* 821AAAF8h */ case    7:  		/* or R23, R11, R10 */
		/* 821AAAF8h case    7:*/		cpu::op::or<0>(regs,&regs.R23,regs.R11,regs.R10);
		/* 821AAAF8h case    7:*/		return 0x821AAAFC;
	}
	return 0x821AAAFC;
} // Block from 821AAADCh-821AAAFCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AAAFCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAAFC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAAFC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAAFC);
		  /* 821AAAFCh */ case    0:  		/* addi R28, R28, 1 */
		/* 821AAAFCh case    0:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R28,0x1);
		/* 821AAAFCh case    0:*/		return 0x821AAB00;
		  /* 821AAB00h */ case    1:  		/* addi R27, R27, 4 */
		/* 821AAB00h case    1:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R27,0x4);
		/* 821AAB00h case    1:*/		return 0x821AAB04;
		  /* 821AAB04h */ case    2:  		/* addi R31, R31, 2 */
		/* 821AAB04h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 821AAB04h case    2:*/		return 0x821AAB08;
		  /* 821AAB08h */ case    3:  		/* b -112 */
		/* 821AAB08h case    3:*/		return 0x821AAA98;
		/* 821AAB08h case    3:*/		return 0x821AAB0C;
	}
	return 0x821AAB0C;
} // Block from 821AAAFCh-821AAB0Ch (4 instructions)

//////////////////////////////////////////////////////
// Block at 821AAB0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAB0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAB0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAB0C);
		  /* 821AAB0Ch */ case    0:  		/* mr R29, R21 */
		/* 821AAB0Ch case    0:*/		regs.R29 = regs.R21;
		/* 821AAB0Ch case    0:*/		return 0x821AAB10;
		  /* 821AAB10h */ case    1:  		/* lwz R31, <#[R29]> */
		/* 821AAB10h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R29 + 0x00000000) );
		/* 821AAB10h case    1:*/		return 0x821AAB14;
		  /* 821AAB14h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821AAB14h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AAB14h case    2:*/		return 0x821AAB18;
		  /* 821AAB18h */ case    3:  		/* bc 12, CR6_EQ, 288 */
		/* 821AAB18h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AAC38;  }
		/* 821AAB18h case    3:*/		return 0x821AAB1C;
		  /* 821AAB1Ch */ case    4:  		/* lwz R30, <#[R31 + 16]> */
		/* 821AAB1Ch case    4:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R31 + 0x00000010) );
		/* 821AAB1Ch case    4:*/		return 0x821AAB20;
		  /* 821AAB20h */ case    5:  		/* cmplwi CR6, R30, 0 */
		/* 821AAB20h case    5:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821AAB20h case    5:*/		return 0x821AAB24;
		  /* 821AAB24h */ case    6:  		/* bc 12, CR6_EQ, 256 */
		/* 821AAB24h case    6:*/		if ( regs.CR[6].eq ) { return 0x821AAC24;  }
		/* 821AAB24h case    6:*/		return 0x821AAB28;
		  /* 821AAB28h */ case    7:  		/* lwz R11, <#[R31]> */
		/* 821AAB28h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AAB28h case    7:*/		return 0x821AAB2C;
		  /* 821AAB2Ch */ case    8:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821AAB2Ch case    8:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821AAB2Ch case    8:*/		return 0x821AAB30;
		  /* 821AAB30h */ case    9:  		/* bc 12, CR0_EQ, 148 */
		/* 821AAB30h case    9:*/		if ( regs.CR[0].eq ) { return 0x821AABC4;  }
		/* 821AAB30h case    9:*/		return 0x821AAB34;
		  /* 821AAB34h */ case   10:  		/* mr R3, R31 */
		/* 821AAB34h case   10:*/		regs.R3 = regs.R31;
		/* 821AAB34h case   10:*/		return 0x821AAB38;
		  /* 821AAB38h */ case   11:  		/* bl -289016 */
		/* 821AAB38h case   11:*/		regs.LR = 0x821AAB3C; return 0x82164240;
		/* 821AAB38h case   11:*/		return 0x821AAB3C;
		  /* 821AAB3Ch */ case   12:  		/* and. R11, R3, R24 */
		/* 821AAB3Ch case   12:*/		cpu::op::and<1>(regs,&regs.R11,regs.R3,regs.R24);
		/* 821AAB3Ch case   12:*/		return 0x821AAB40;
		  /* 821AAB40h */ case   13:  		/* lwz R11, <#[R31 + 12]> */
		/* 821AAB40h case   13:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AAB40h case   13:*/		return 0x821AAB44;
		  /* 821AAB44h */ case   14:  		/* addi R11, R11, 4 */
		/* 821AAB44h case   14:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AAB44h case   14:*/		return 0x821AAB48;
		  /* 821AAB48h */ case   15:  		/* lwz R10, <#[R11]> */
		/* 821AAB48h case   15:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AAB48h case   15:*/		return 0x821AAB4C;
		  /* 821AAB4Ch */ case   16:  		/* cmplw CR6, R10, R31 */
		/* 821AAB4Ch case   16:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821AAB4Ch case   16:*/		return 0x821AAB50;
		  /* 821AAB50h */ case   17:  		/* bc 12, CR0_EQ, 56 */
		/* 821AAB50h case   17:*/		if ( regs.CR[0].eq ) { return 0x821AAB88;  }
		/* 821AAB50h case   17:*/		return 0x821AAB54;
		  /* 821AAB54h */ case   18:  		/* bc 12, CR6_EQ, 20 */
		/* 821AAB54h case   18:*/		if ( regs.CR[6].eq ) { return 0x821AAB68;  }
		/* 821AAB54h case   18:*/		return 0x821AAB58;
		  /* 821AAB58h */ case   19:  		/* addi R11, R10, 8 */
		/* 821AAB58h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821AAB58h case   19:*/		return 0x821AAB5C;
		  /* 821AAB5Ch */ case   20:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AAB5Ch case   20:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AAB5Ch case   20:*/		return 0x821AAB60;
		  /* 821AAB60h */ case   21:  		/* cmplw CR6, R10, R31 */
		/* 821AAB60h case   21:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821AAB60h case   21:*/		return 0x821AAB64;
		  /* 821AAB64h */ case   22:  		/* bc 4, CR6_EQ, -12 */
		/* 821AAB64h case   22:*/		if ( !regs.CR[6].eq ) { return 0x821AAB58;  }
		/* 821AAB64h case   22:*/		return 0x821AAB68;
	}
	return 0x821AAB68;
} // Block from 821AAB0Ch-821AAB68h (23 instructions)

//////////////////////////////////////////////////////
// Block at 821AAB68h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAB68( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAB68) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAB68);
		  /* 821AAB68h */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 821AAB68h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821AAB68h case    0:*/		return 0x821AAB6C;
		  /* 821AAB6Ch */ case    1:  		/* mr R4, R22 */
		/* 821AAB6Ch case    1:*/		regs.R4 = regs.R22;
		/* 821AAB6Ch case    1:*/		return 0x821AAB70;
		  /* 821AAB70h */ case    2:  		/* stw R10, <#[R11]> */
		/* 821AAB70h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AAB70h case    2:*/		return 0x821AAB74;
		  /* 821AAB74h */ case    3:  		/* lwz R11, <#[R26 + 4]> */
		/* 821AAB74h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000004) );
		/* 821AAB74h case    3:*/		return 0x821AAB78;
		  /* 821AAB78h */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 821AAB78h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AAB78h case    4:*/		return 0x821AAB7C;
		  /* 821AAB7Ch */ case    5:  		/* stw R31, <#[R26 + 4]> */
		/* 821AAB7Ch case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R26 + 0x00000004) );
		/* 821AAB7Ch case    5:*/		return 0x821AAB80;
		  /* 821AAB80h */ case    6:  		/* stw R26, <#[R31 + 12]> */
		/* 821AAB80h case    6:*/		cpu::mem::store32( regs, regs.R26, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AAB80h case    6:*/		return 0x821AAB84;
		  /* 821AAB84h */ case    7:  		/* b 52 */
		/* 821AAB84h case    7:*/		return 0x821AABB8;
		/* 821AAB84h case    7:*/		return 0x821AAB88;
	}
	return 0x821AAB88;
} // Block from 821AAB68h-821AAB88h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AAB88h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAB88( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAB88) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAB88);
		  /* 821AAB88h */ case    0:  		/* bc 12, CR6_EQ, 20 */
		/* 821AAB88h case    0:*/		if ( regs.CR[6].eq ) { return 0x821AAB9C;  }
		/* 821AAB88h case    0:*/		return 0x821AAB8C;
		  /* 821AAB8Ch */ case    1:  		/* addi R11, R10, 8 */
		/* 821AAB8Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821AAB8Ch case    1:*/		return 0x821AAB90;
		  /* 821AAB90h */ case    2:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AAB90h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AAB90h case    2:*/		return 0x821AAB94;
		  /* 821AAB94h */ case    3:  		/* cmplw CR6, R10, R31 */
		/* 821AAB94h case    3:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821AAB94h case    3:*/		return 0x821AAB98;
		  /* 821AAB98h */ case    4:  		/* bc 4, CR6_EQ, -12 */
		/* 821AAB98h case    4:*/		if ( !regs.CR[6].eq ) { return 0x821AAB8C;  }
		/* 821AAB98h case    4:*/		return 0x821AAB9C;
	}
	return 0x821AAB9C;
} // Block from 821AAB88h-821AAB9Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AAB9Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAB9C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAB9C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAB9C);
		  /* 821AAB9Ch */ case    0:  		/* lwz R10, <#[R31 + 8]> */
		/* 821AAB9Ch case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821AAB9Ch case    0:*/		return 0x821AABA0;
		  /* 821AABA0h */ case    1:  		/* mr R4, R23 */
		/* 821AABA0h case    1:*/		regs.R4 = regs.R23;
		/* 821AABA0h case    1:*/		return 0x821AABA4;
		  /* 821AABA4h */ case    2:  		/* stw R10, <#[R11]> */
		/* 821AABA4h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AABA4h case    2:*/		return 0x821AABA8;
		  /* 821AABA8h */ case    3:  		/* lwz R11, <#[R25 + 4]> */
		/* 821AABA8h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821AABA8h case    3:*/		return 0x821AABAC;
		  /* 821AABACh */ case    4:  		/* stw R11, <#[R31 + 8]> */
		/* 821AABACh case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AABACh case    4:*/		return 0x821AABB0;
		  /* 821AABB0h */ case    5:  		/* stw R31, <#[R25 + 4]> */
		/* 821AABB0h case    5:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000004) );
		/* 821AABB0h case    5:*/		return 0x821AABB4;
		  /* 821AABB4h */ case    6:  		/* stw R25, <#[R31 + 12]> */
		/* 821AABB4h case    6:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AABB4h case    6:*/		return 0x821AABB8;
	}
	return 0x821AABB8;
} // Block from 821AAB9Ch-821AABB8h (7 instructions)

//////////////////////////////////////////////////////
// Block at 821AABB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AABB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AABB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AABB8);
		  /* 821AABB8h */ case    0:  		/* mr R3, R31 */
		/* 821AABB8h case    0:*/		regs.R3 = regs.R31;
		/* 821AABB8h case    0:*/		return 0x821AABBC;
		  /* 821AABBCh */ case    1:  		/* bl -237140 */
		/* 821AABBCh case    1:*/		regs.LR = 0x821AABC0; return 0x82170D68;
		/* 821AABBCh case    1:*/		return 0x821AABC0;
		  /* 821AABC0h */ case    2:  		/* b 88 */
		/* 821AABC0h case    2:*/		return 0x821AAC18;
		/* 821AABC0h case    2:*/		return 0x821AABC4;
	}
	return 0x821AABC4;
} // Block from 821AABB8h-821AABC4h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AABC4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AABC4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AABC4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AABC4);
		  /* 821AABC4h */ case    0:  		/* mr R5, R26 */
		/* 821AABC4h case    0:*/		regs.R5 = regs.R26;
		/* 821AABC4h case    0:*/		return 0x821AABC8;
		  /* 821AABC8h */ case    1:  		/* mr R4, R31 */
		/* 821AABC8h case    1:*/		regs.R4 = regs.R31;
		/* 821AABC8h case    1:*/		return 0x821AABCC;
		  /* 821AABCCh */ case    2:  		/* mr R3, R19 */
		/* 821AABCCh case    2:*/		regs.R3 = regs.R19;
		/* 821AABCCh case    2:*/		return 0x821AABD0;
		  /* 821AABD0h */ case    3:  		/* bl -236256 */
		/* 821AABD0h case    3:*/		regs.LR = 0x821AABD4; return 0x821710F0;
		/* 821AABD0h case    3:*/		return 0x821AABD4;
		  /* 821AABD4h */ case    4:  		/* mr R4, R3 */
		/* 821AABD4h case    4:*/		regs.R4 = regs.R3;
		/* 821AABD4h case    4:*/		return 0x821AABD8;
		  /* 821AABD8h */ case    5:  		/* mr R3, R30 */
		/* 821AABD8h case    5:*/		regs.R3 = regs.R30;
		/* 821AABD8h case    5:*/		return 0x821AABDC;
		  /* 821AABDCh */ case    6:  		/* bl -207380 */
		/* 821AABDCh case    6:*/		regs.LR = 0x821AABE0; return 0x821781C8;
		/* 821AABDCh case    6:*/		return 0x821AABE0;
		  /* 821AABE0h */ case    7:  		/* lwz R11, <#[R31 + 12]> */
		/* 821AABE0h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AABE0h case    7:*/		return 0x821AABE4;
		  /* 821AABE4h */ case    8:  		/* addi R11, R11, 4 */
		/* 821AABE4h case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AABE4h case    8:*/		return 0x821AABE8;
		  /* 821AABE8h */ case    9:  		/* lwz R10, <#[R11]> */
		/* 821AABE8h case    9:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AABE8h case    9:*/		return 0x821AABEC;
		  /* 821AABECh */ case   10:  		/* b 12 */
		/* 821AABECh case   10:*/		return 0x821AABF8;
		/* 821AABECh case   10:*/		return 0x821AABF0;
		  /* 821AABF0h */ case   11:  		/* addi R11, R10, 8 */
		/* 821AABF0h case   11:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x8);
		/* 821AABF0h case   11:*/		return 0x821AABF4;
		  /* 821AABF4h */ case   12:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AABF4h case   12:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AABF4h case   12:*/		return 0x821AABF8;
	}
	return 0x821AABF8;
} // Block from 821AABC4h-821AABF8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821AABF8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AABF8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AABF8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AABF8);
		  /* 821AABF8h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821AABF8h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821AABF8h case    0:*/		return 0x821AABFC;
		  /* 821AABFCh */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AABFCh case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AABF0;  }
		/* 821AABFCh case    1:*/		return 0x821AAC00;
		  /* 821AAC00h */ case    2:  		/* lwz R10, <#[R31 + 8]> */
		/* 821AAC00h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000008) );
		/* 821AAC00h case    2:*/		return 0x821AAC04;
		  /* 821AAC04h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821AAC04h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AAC04h case    3:*/		return 0x821AAC08;
		  /* 821AAC08h */ case    4:  		/* lwz R11, <#[R25 + 4]> */
		/* 821AAC08h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000004) );
		/* 821AAC08h case    4:*/		return 0x821AAC0C;
		  /* 821AAC0Ch */ case    5:  		/* stw R11, <#[R31 + 8]> */
		/* 821AAC0Ch case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AAC0Ch case    5:*/		return 0x821AAC10;
		  /* 821AAC10h */ case    6:  		/* stw R31, <#[R25 + 4]> */
		/* 821AAC10h case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000004) );
		/* 821AAC10h case    6:*/		return 0x821AAC14;
		  /* 821AAC14h */ case    7:  		/* stw R25, <#[R31 + 12]> */
		/* 821AAC14h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x0000000C) );
		/* 821AAC14h case    7:*/		return 0x821AAC18;
	}
	return 0x821AAC18;
} // Block from 821AABF8h-821AAC18h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AAC18h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAC18( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAC18) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAC18);
		  /* 821AAC18h */ case    0:  		/* mr R3, R19 */
		/* 821AAC18h case    0:*/		regs.R3 = regs.R19;
		/* 821AAC18h case    0:*/		return 0x821AAC1C;
		  /* 821AAC1Ch */ case    1:  		/* lwz R4, <#[R31 + 16]> */
		/* 821AAC1Ch case    1:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R31 + 0x00000010) );
		/* 821AAC1Ch case    1:*/		return 0x821AAC20;
		  /* 821AAC20h */ case    2:  		/* bl -41320 */
		/* 821AAC20h case    2:*/		regs.LR = 0x821AAC24; return 0x821A0AB8;
		/* 821AAC20h case    2:*/		return 0x821AAC24;
	}
	return 0x821AAC24;
} // Block from 821AAC18h-821AAC24h (3 instructions)

//////////////////////////////////////////////////////
// Block at 821AAC24h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAC24( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAC24) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAC24);
		  /* 821AAC24h */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821AAC24h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AAC24h case    0:*/		return 0x821AAC28;
		  /* 821AAC28h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821AAC28h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821AAC28h case    1:*/		return 0x821AAC2C;
		  /* 821AAC2Ch */ case    2:  		/* bc 4, CR6_EQ, -284 */
		/* 821AAC2Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AAB10;  }
		/* 821AAC2Ch case    2:*/		return 0x821AAC30;
		  /* 821AAC30h */ case    3:  		/* addi R29, R31, 8 */
		/* 821AAC30h case    3:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R31,0x8);
		/* 821AAC30h case    3:*/		return 0x821AAC34;
		  /* 821AAC34h */ case    4:  		/* b -292 */
		/* 821AAC34h case    4:*/		return 0x821AAB10;
		/* 821AAC34h case    4:*/		return 0x821AAC38;
	}
	return 0x821AAC38;
} // Block from 821AAC24h-821AAC38h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AAC38h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAC38( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAC38) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAC38);
		  /* 821AAC38h */ case    0:  		/* mr R30, R17 */
		/* 821AAC38h case    0:*/		regs.R30 = regs.R17;
		/* 821AAC38h case    0:*/		return 0x821AAC3C;
		  /* 821AAC3Ch */ case    1:  		/* lwz R31, <#[R30]> */
		/* 821AAC3Ch case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R30 + 0x00000000) );
		/* 821AAC3Ch case    1:*/		return 0x821AAC40;
		  /* 821AAC40h */ case    2:  		/* cmplwi CR6, R31, 0 */
		/* 821AAC40h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AAC40h case    2:*/		return 0x821AAC44;
		  /* 821AAC44h */ case    3:  		/* bc 12, CR6_EQ, 100 */
		/* 821AAC44h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AACA8;  }
		/* 821AAC44h case    3:*/		return 0x821AAC48;
		  /* 821AAC48h */ case    4:  		/* lwz R11, <#[R31]> */
		/* 821AAC48h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AAC48h case    4:*/		return 0x821AAC4C;
		  /* 821AAC4Ch */ case    5:  		/* rlwinm. R11, R11, 0, 4, 6 */
		/* 821AAC4Ch case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R11,regs.R11);
		/* 821AAC4Ch case    5:*/		return 0x821AAC50;
		  /* 821AAC50h */ case    6:  		/* bc 4, CR0_EQ, 68 */
		/* 821AAC50h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AAC94;  }
		/* 821AAC50h case    6:*/		return 0x821AAC54;
		  /* 821AAC54h */ case    7:  		/* mr R4, R31 */
		/* 821AAC54h case    7:*/		regs.R4 = regs.R31;
		/* 821AAC54h case    7:*/		return 0x821AAC58;
		  /* 821AAC58h */ case    8:  		/* mr R3, R26 */
		/* 821AAC58h case    8:*/		regs.R3 = regs.R26;
		/* 821AAC58h case    8:*/		return 0x821AAC5C;
		  /* 821AAC5Ch */ case    9:  		/* bl -207508 */
		/* 821AAC5Ch case    9:*/		regs.LR = 0x821AAC60; return 0x821781C8;
		/* 821AAC5Ch case    9:*/		return 0x821AAC60;
		  /* 821AAC60h */ case   10:  		/* lwz R11, <#[R31 + 16]> */
		/* 821AAC60h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000010) );
		/* 821AAC60h case   10:*/		return 0x821AAC64;
		  /* 821AAC64h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821AAC64h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AAC64h case   11:*/		return 0x821AAC68;
		  /* 821AAC68h */ case   12:  		/* b 12 */
		/* 821AAC68h case   12:*/		return 0x821AAC74;
		/* 821AAC68h case   12:*/		return 0x821AAC6C;
		  /* 821AAC6Ch */ case   13:  		/* addi R11, R10, 4 */
		/* 821AAC6Ch case   13:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R10,0x4);
		/* 821AAC6Ch case   13:*/		return 0x821AAC70;
		  /* 821AAC70h */ case   14:  		/* lwz R10, <#[R10 + 4]> */
		/* 821AAC70h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000004) );
		/* 821AAC70h case   14:*/		return 0x821AAC74;
	}
	return 0x821AAC74;
} // Block from 821AAC38h-821AAC74h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AAC74h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAC74( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAC74) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAC74);
		  /* 821AAC74h */ case    0:  		/* cmplw CR6, R10, R31 */
		/* 821AAC74h case    0:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R31);
		/* 821AAC74h case    0:*/		return 0x821AAC78;
		  /* 821AAC78h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AAC78h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AAC6C;  }
		/* 821AAC78h case    1:*/		return 0x821AAC7C;
		  /* 821AAC7Ch */ case    2:  		/* lwz R10, <#[R31 + 4]> */
		/* 821AAC7Ch case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000004) );
		/* 821AAC7Ch case    2:*/		return 0x821AAC80;
		  /* 821AAC80h */ case    3:  		/* stw R10, <#[R11]> */
		/* 821AAC80h case    3:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AAC80h case    3:*/		return 0x821AAC84;
		  /* 821AAC84h */ case    4:  		/* lwz R11, <#[R25]> */
		/* 821AAC84h case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000000) );
		/* 821AAC84h case    4:*/		return 0x821AAC88;
		  /* 821AAC88h */ case    5:  		/* stw R11, <#[R31 + 4]> */
		/* 821AAC88h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000004) );
		/* 821AAC88h case    5:*/		return 0x821AAC8C;
		  /* 821AAC8Ch */ case    6:  		/* stw R31, <#[R25]> */
		/* 821AAC8Ch case    6:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R25 + 0x00000000) );
		/* 821AAC8Ch case    6:*/		return 0x821AAC90;
		  /* 821AAC90h */ case    7:  		/* stw R25, <#[R31 + 16]> */
		/* 821AAC90h case    7:*/		cpu::mem::store32( regs, regs.R25, (uint32)(regs.R31 + 0x00000010) );
		/* 821AAC90h case    7:*/		return 0x821AAC94;
	}
	return 0x821AAC94;
} // Block from 821AAC74h-821AAC94h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AAC94h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAC94( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAC94) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAC94);
		  /* 821AAC94h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821AAC94h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AAC94h case    0:*/		return 0x821AAC98;
		  /* 821AAC98h */ case    1:  		/* cmplw CR6, R11, R31 */
		/* 821AAC98h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R31);
		/* 821AAC98h case    1:*/		return 0x821AAC9C;
		  /* 821AAC9Ch */ case    2:  		/* bc 4, CR6_EQ, -96 */
		/* 821AAC9Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AAC3C;  }
		/* 821AAC9Ch case    2:*/		return 0x821AACA0;
		  /* 821AACA0h */ case    3:  		/* addi R30, R31, 4 */
		/* 821AACA0h case    3:*/		cpu::op::addi<0>(regs,&regs.R30,regs.R31,0x4);
		/* 821AACA0h case    3:*/		return 0x821AACA4;
		  /* 821AACA4h */ case    4:  		/* b -104 */
		/* 821AACA4h case    4:*/		return 0x821AAC3C;
		/* 821AACA4h case    4:*/		return 0x821AACA8;
	}
	return 0x821AACA8;
} // Block from 821AAC94h-821AACA8h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AACA8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AACA8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AACA8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AACA8);
		  /* 821AACA8h */ case    0:  		/* mr R4, R26 */
		/* 821AACA8h case    0:*/		regs.R4 = regs.R26;
		/* 821AACA8h case    0:*/		return 0x821AACAC;
		  /* 821AACACh */ case    1:  		/* mr R3, R19 */
		/* 821AACACh case    1:*/		regs.R3 = regs.R19;
		/* 821AACACh case    1:*/		return 0x821AACB0;
		  /* 821AACB0h */ case    2:  		/* bl 46904 */
		/* 821AACB0h case    2:*/		regs.LR = 0x821AACB4; return 0x821B63E8;
		/* 821AACB0h case    2:*/		return 0x821AACB4;
		  /* 821AACB4h */ case    3:  		/* lwz R11, <#[R26 + 8]> */
		/* 821AACB4h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AACB4h case    3:*/		return 0x821AACB8;
		  /* 821AACB8h */ case    4:  		/* mr R4, R25 */
		/* 821AACB8h case    4:*/		regs.R4 = regs.R25;
		/* 821AACB8h case    4:*/		return 0x821AACBC;
		  /* 821AACBCh */ case    5:  		/* oris R11, R11, 256 */
		/* 821AACBCh case    5:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AACBCh case    5:*/		return 0x821AACC0;
		  /* 821AACC0h */ case    6:  		/* mr R3, R19 */
		/* 821AACC0h case    6:*/		regs.R3 = regs.R19;
		/* 821AACC0h case    6:*/		return 0x821AACC4;
		  /* 821AACC4h */ case    7:  		/* stw R11, <#[R26 + 8]> */
		/* 821AACC4h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R26 + 0x00000008) );
		/* 821AACC4h case    7:*/		return 0x821AACC8;
		  /* 821AACC8h */ case    8:  		/* bl 46880 */
		/* 821AACC8h case    8:*/		regs.LR = 0x821AACCC; return 0x821B63E8;
		/* 821AACC8h case    8:*/		return 0x821AACCC;
		  /* 821AACCCh */ case    9:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AACCCh case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AACCCh case    9:*/		return 0x821AACD0;
		  /* 821AACD0h */ case   10:  		/* mr R4, R26 */
		/* 821AACD0h case   10:*/		regs.R4 = regs.R26;
		/* 821AACD0h case   10:*/		return 0x821AACD4;
		  /* 821AACD4h */ case   11:  		/* oris R11, R11, 256 */
		/* 821AACD4h case   11:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AACD4h case   11:*/		return 0x821AACD8;
		  /* 821AACD8h */ case   12:  		/* mr R3, R19 */
		/* 821AACD8h case   12:*/		regs.R3 = regs.R19;
		/* 821AACD8h case   12:*/		return 0x821AACDC;
		  /* 821AACDCh */ case   13:  		/* stw R11, <#[R25 + 8]> */
		/* 821AACDCh case   13:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AACDCh case   13:*/		return 0x821AACE0;
		  /* 821AACE0h */ case   14:  		/* bl -41512 */
		/* 821AACE0h case   14:*/		regs.LR = 0x821AACE4; return 0x821A0AB8;
		/* 821AACE0h case   14:*/		return 0x821AACE4;
		  /* 821AACE4h */ case   15:  		/* mr R4, R25 */
		/* 821AACE4h case   15:*/		regs.R4 = regs.R25;
		/* 821AACE4h case   15:*/		return 0x821AACE8;
		  /* 821AACE8h */ case   16:  		/* mr R3, R19 */
		/* 821AACE8h case   16:*/		regs.R3 = regs.R19;
		/* 821AACE8h case   16:*/		return 0x821AACEC;
		  /* 821AACECh */ case   17:  		/* bl -41524 */
		/* 821AACECh case   17:*/		regs.LR = 0x821AACF0; return 0x821A0AB8;
		/* 821AACECh case   17:*/		return 0x821AACF0;
		  /* 821AACF0h */ case   18:  		/* li R6, 1 */
		/* 821AACF0h case   18:*/		cpu::op::li<0>(regs,&regs.R6,0x1);
		/* 821AACF0h case   18:*/		return 0x821AACF4;
		  /* 821AACF4h */ case   19:  		/* mr R4, R17 */
		/* 821AACF4h case   19:*/		regs.R4 = regs.R17;
		/* 821AACF4h case   19:*/		return 0x821AACF8;
		  /* 821AACF8h */ case   20:  		/* lwz R5, <#[R19 + 652]> */
		/* 821AACF8h case   20:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R19 + 0x0000028C) );
		/* 821AACF8h case   20:*/		return 0x821AACFC;
		  /* 821AACFCh */ case   21:  		/* mr R3, R19 */
		/* 821AACFCh case   21:*/		regs.R3 = regs.R19;
		/* 821AACFCh case   21:*/		return 0x821AAD00;
		  /* 821AAD00h */ case   22:  		/* bl 526024 */
		/* 821AAD00h case   22:*/		regs.LR = 0x821AAD04; return 0x8222B3C8;
		/* 821AAD00h case   22:*/		return 0x821AAD04;
		  /* 821AAD04h */ case   23:  		/* mr R3, R26 */
		/* 821AAD04h case   23:*/		regs.R3 = regs.R26;
		/* 821AAD04h case   23:*/		return 0x821AAD08;
		  /* 821AAD08h */ case   24:  		/* b -800 */
		/* 821AAD08h case   24:*/		return 0x821AA9E8;
		/* 821AAD08h case   24:*/		return 0x821AAD0C;
	}
	return 0x821AAD0C;
} // Block from 821AACA8h-821AAD0Ch (25 instructions)

//////////////////////////////////////////////////////
// Block at 821AAD0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAD0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAD0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAD0C);
		  /* 821AAD0Ch */ case    0:  		/* lwz R7, <#[R25 + 52]> */
		/* 821AAD0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R25 + 0x00000034) );
		/* 821AAD0Ch case    0:*/		return 0x821AAD10;
		  /* 821AAD10h */ case    1:  		/* lwz R31, <#[R25 + 44]> */
		/* 821AAD10h case    1:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AAD10h case    1:*/		return 0x821AAD14;
		  /* 821AAD14h */ case    2:  		/* lwz R27, <#[R25 + 48]> */
		/* 821AAD14h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R25 + 0x00000030) );
		/* 821AAD14h case    2:*/		return 0x821AAD18;
		  /* 821AAD18h */ case    3:  		/* lwz R23, <#[R7 + 12]> */
		/* 821AAD18h case    3:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R7 + 0x0000000C) );
		/* 821AAD18h case    3:*/		return 0x821AAD1C;
		  /* 821AAD1Ch */ case    4:  		/* lwz R11, <#[R23 + 8]> */
		/* 821AAD1Ch case    4:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821AAD1Ch case    4:*/		return 0x821AAD20;
		  /* 821AAD20h */ case    5:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821AAD20h case    5:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821AAD20h case    5:*/		return 0x821AAD24;
		  /* 821AAD24h */ case    6:  		/* cmplwi CR6, R10, 2 */
		/* 821AAD24h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000002);
		/* 821AAD24h case    6:*/		return 0x821AAD28;
		  /* 821AAD28h */ case    7:  		/* bc 4, CR6_EQ, 1356 */
		/* 821AAD28h case    7:*/		if ( !regs.CR[6].eq ) { return 0x821AB274;  }
		/* 821AAD28h case    7:*/		return 0x821AAD2C;
		  /* 821AAD2Ch */ case    8:  		/* lwz R9, <#[R7]> */
		/* 821AAD2Ch case    8:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R7 + 0x00000000) );
		/* 821AAD2Ch case    8:*/		return 0x821AAD30;
		  /* 821AAD30h */ case    9:  		/* rlwinm. R9, R9, 0, 27, 31 */
		/* 821AAD30h case    9:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R9,regs.R9);
		/* 821AAD30h case    9:*/		return 0x821AAD34;
		  /* 821AAD34h */ case   10:  		/* bc 4, CR0_EQ, 1344 */
		/* 821AAD34h case   10:*/		if ( !regs.CR[0].eq ) { return 0x821AB274;  }
		/* 821AAD34h case   10:*/		return 0x821AAD38;
		  /* 821AAD38h */ case   11:  		/* lwz R9, <#[R23 + 4]> */
		/* 821AAD38h case   11:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000004) );
		/* 821AAD38h case   11:*/		return 0x821AAD3C;
		  /* 821AAD3Ch */ case   12:  		/* cmplwi CR6, R9, 0 */
		/* 821AAD3Ch case   12:*/		cpu::op::cmplwi<6>(regs,regs.R9,0x00000000);
		/* 821AAD3Ch case   12:*/		return 0x821AAD40;
		  /* 821AAD40h */ case   13:  		/* bc 12, CR6_EQ, 32 */
		/* 821AAD40h case   13:*/		if ( regs.CR[6].eq ) { return 0x821AAD60;  }
		/* 821AAD40h case   13:*/		return 0x821AAD44;
		  /* 821AAD44h */ case   14:  		/* lwz R10, <#[R9 + 16]> */
		/* 821AAD44h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R9 + 0x00000010) );
		/* 821AAD44h case   14:*/		return 0x821AAD48;
		  /* 821AAD48h */ case   15:  		/* cmplwi CR6, R10, 0 */
		/* 821AAD48h case   15:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AAD48h case   15:*/		return 0x821AAD4C;
		  /* 821AAD4Ch */ case   16:  		/* bc 12, CR6_EQ, 12 */
		/* 821AAD4Ch case   16:*/		if ( regs.CR[6].eq ) { return 0x821AAD58;  }
		/* 821AAD4Ch case   16:*/		return 0x821AAD50;
		  /* 821AAD50h */ case   17:  		/* cmplw CR6, R10, R25 */
		/* 821AAD50h case   17:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R25);
		/* 821AAD50h case   17:*/		return 0x821AAD54;
		  /* 821AAD54h */ case   18:  		/* bc 4, CR6_EQ, 1064 */
		/* 821AAD54h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821AB17C;  }
		/* 821AAD54h case   18:*/		return 0x821AAD58;
	}
	return 0x821AAD58;
} // Block from 821AAD0Ch-821AAD58h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AAD58h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAD58( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAD58) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAD58);
		  /* 821AAD58h */ case    0:  		/* lwz R9, <#[R9 + 8]> */
		/* 821AAD58h case    0:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000008) );
		/* 821AAD58h case    0:*/		return 0x821AAD5C;
		  /* 821AAD5Ch */ case    1:  		/* b -32 */
		/* 821AAD5Ch case    1:*/		return 0x821AAD3C;
		/* 821AAD5Ch case    1:*/		return 0x821AAD60;
	}
	return 0x821AAD60;
} // Block from 821AAD58h-821AAD60h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AAD60h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAD60( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAD60) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAD60);
		  /* 821AAD60h */ case    0:  		/* oris R10, R11, 1024 */
		/* 821AAD60h case    0:*/		cpu::op::oris<0>(regs,&regs.R10,regs.R11,0x400);
		/* 821AAD60h case    0:*/		return 0x821AAD64;
		  /* 821AAD64h */ case    1:  		/* rlwinm R22, R11, 6, 31, 31 */
		/* 821AAD64h case    1:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R22,regs.R11);
		/* 821AAD64h case    1:*/		return 0x821AAD68;
		  /* 821AAD68h */ case    2:  		/* stw R10, <#[R23 + 8]> */
		/* 821AAD68h case    2:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R23 + 0x00000008) );
		/* 821AAD68h case    2:*/		return 0x821AAD6C;
		  /* 821AAD6Ch */ case    3:  		/* rlwinm R21, R8, 6, 31, 31 */
		/* 821AAD6Ch case    3:*/		cpu::op::rlwinm<0,6,31,31>(regs,&regs.R21,regs.R8);
		/* 821AAD6Ch case    3:*/		return 0x821AAD70;
		  /* 821AAD70h */ case    4:  		/* mr R24, R30 */
		/* 821AAD70h case    4:*/		regs.R24 = regs.R30;
		/* 821AAD70h case    4:*/		return 0x821AAD74;
		  /* 821AAD74h */ case    5:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AAD74h case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AAD74h case    5:*/		return 0x821AAD78;
		  /* 821AAD78h */ case    6:  		/* oris R11, R11, 1024 */
		/* 821AAD78h case    6:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x400);
		/* 821AAD78h case    6:*/		return 0x821AAD7C;
		  /* 821AAD7Ch */ case    7:  		/* stw R11, <#[R25 + 8]> */
		/* 821AAD7Ch case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AAD7Ch case    7:*/		return 0x821AAD80;
		  /* 821AAD80h */ case    8:  		/* lwz R11, <#[R20 + 652]> */
		/* 821AAD80h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R20 + 0x0000028C) );
		/* 821AAD80h case    8:*/		return 0x821AAD84;
		  /* 821AAD84h */ case    9:  		/* lwz R11, <#[R11 + 4]> */
		/* 821AAD84h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000004) );
		/* 821AAD84h case    9:*/		return 0x821AAD88;
		  /* 821AAD88h */ case   10:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821AAD88h case   10:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AAD88h case   10:*/		return 0x821AAD8C;
		  /* 821AAD8Ch */ case   11:  		/* bc 4, CR0_EQ, 44 */
		/* 821AAD8Ch case   11:*/		if ( !regs.CR[0].eq ) { return 0x821AADB8;  }
		/* 821AAD8Ch case   11:*/		return 0x821AAD90;
		  /* 821AAD90h */ case   12:  		/* cmplwi CR0, R11, 0 */
		/* 821AAD90h case   12:*/		cpu::op::cmplwi<0>(regs,regs.R11,0x00000000);
		/* 821AAD90h case   12:*/		return 0x821AAD94;
		  /* 821AAD94h */ case   13:  		/* bc 12, CR0_EQ, 36 */
		/* 821AAD94h case   13:*/		if ( regs.CR[0].eq ) { return 0x821AADB8;  }
		/* 821AAD94h case   13:*/		return 0x821AAD98;
		  /* 821AAD98h */ case   14:  		/* rlwinm R10, R11, 0, 0, 30 */
		/* 821AAD98h case   14:*/		cpu::op::rlwinm<0,0,0,30>(regs,&regs.R10,regs.R11);
		/* 821AAD98h case   14:*/		return 0x821AAD9C;
		  /* 821AAD9Ch */ case   15:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AAD9Ch case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AAD9Ch case   15:*/		return 0x821AADA0;
		  /* 821AADA0h */ case   16:  		/* add R24, R11, R24 */
		/* 821AADA0h case   16:*/		cpu::op::add<0>(regs,&regs.R24,regs.R11,regs.R24);
		/* 821AADA0h case   16:*/		return 0x821AADA4;
		  /* 821AADA4h */ case   17:  		/* lwz R11, <#[R10 + 4]> */
		/* 821AADA4h case   17:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000004) );
		/* 821AADA4h case   17:*/		return 0x821AADA8;
		  /* 821AADA8h */ case   18:  		/* rlwinm. R10, R11, 0, 31, 31 */
		/* 821AADA8h case   18:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R10,regs.R11);
		/* 821AADA8h case   18:*/		return 0x821AADAC;
		  /* 821AADACh */ case   19:  		/* bc 4, CR0_EQ, 12 */
		/* 821AADACh case   19:*/		if ( !regs.CR[0].eq ) { return 0x821AADB8;  }
		/* 821AADACh case   19:*/		return 0x821AADB0;
		  /* 821AADB0h */ case   20:  		/* cmplwi CR6, R11, 0 */
		/* 821AADB0h case   20:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AADB0h case   20:*/		return 0x821AADB4;
		  /* 821AADB4h */ case   21:  		/* bc 4, CR6_EQ, -28 */
		/* 821AADB4h case   21:*/		if ( !regs.CR[6].eq ) { return 0x821AAD98;  }
		/* 821AADB4h case   21:*/		return 0x821AADB8;
	}
	return 0x821AADB8;
} // Block from 821AAD60h-821AADB8h (22 instructions)

//////////////////////////////////////////////////////
// Block at 821AADB8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AADB8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AADB8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AADB8);
		  /* 821AADB8h */ case    0:  		/* lwz R11, <#[R7]> */
		/* 821AADB8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821AADB8h case    0:*/		return 0x821AADBC;
		  /* 821AADBCh */ case    1:  		/* li R10, 1 */
		/* 821AADBCh case    1:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AADBCh case    1:*/		return 0x821AADC0;
		  /* 821AADC0h */ case    2:  		/* li R9, 0 */
		/* 821AADC0h case    2:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AADC0h case    2:*/		return 0x821AADC4;
		  /* 821AADC4h */ case    3:  		/* lwz R3, <#[R23 + 44]> */
		/* 821AADC4h case    3:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x0000002C) );
		/* 821AADC4h case    3:*/		return 0x821AADC8;
		  /* 821AADC8h */ case    4:  		/* rlwinm R29, R11, 27, 30, 31 */
		/* 821AADC8h case    4:*/		cpu::op::rlwinm<0,27,30,31>(regs,&regs.R29,regs.R11);
		/* 821AADC8h case    4:*/		return 0x821AADCC;
		  /* 821AADCCh */ case    5:  		/* lwz R8, <#[R25 + 28]> */
		/* 821AADCCh case    5:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821AADCCh case    5:*/		return 0x821AADD0;
		  /* 821AADD0h */ case    6:  		/* addi R7, R1, 440 */
		/* 821AADD0h case    6:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1B8);
		/* 821AADD0h case    6:*/		return 0x821AADD4;
		  /* 821AADD4h */ case    7:  		/* mr R4, R29 */
		/* 821AADD4h case    7:*/		regs.R4 = regs.R29;
		/* 821AADD4h case    7:*/		return 0x821AADD8;
		  /* 821AADD8h */ case    8:  		/* addi R6, R1, 456 */
		/* 821AADD8h case    8:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1C8);
		/* 821AADD8h case    8:*/		return 0x821AADDC;
		  /* 821AADDCh */ case    9:  		/* addi R5, R1, 296 */
		/* 821AADDCh case    9:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x128);
		/* 821AADDCh case    9:*/		return 0x821AADE0;
		  /* 821AADE0h */ case   10:  		/* bl 493296 */
		/* 821AADE0h case   10:*/		regs.LR = 0x821AADE4; return 0x822234D0;
		/* 821AADE0h case   10:*/		return 0x821AADE4;
		  /* 821AADE4h */ case   11:  		/* li R10, 1 */
		/* 821AADE4h case   11:*/		cpu::op::li<0>(regs,&regs.R10,0x1);
		/* 821AADE4h case   11:*/		return 0x821AADE8;
		  /* 821AADE8h */ case   12:  		/* li R9, 0 */
		/* 821AADE8h case   12:*/		cpu::op::li<0>(regs,&regs.R9,0x0);
		/* 821AADE8h case   12:*/		return 0x821AADEC;
		  /* 821AADECh */ case   13:  		/* lwz R8, <#[R25 + 28]> */
		/* 821AADECh case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821AADECh case   13:*/		return 0x821AADF0;
		  /* 821AADF0h */ case   14:  		/* addi R7, R1, 416 */
		/* 821AADF0h case   14:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x1A0);
		/* 821AADF0h case   14:*/		return 0x821AADF4;
		  /* 821AADF4h */ case   15:  		/* lwz R3, <#[R23 + 48]> */
		/* 821AADF4h case   15:*/		cpu::mem::load32z( regs, &regs.R3, (uint32)(regs.R23 + 0x00000030) );
		/* 821AADF4h case   15:*/		return 0x821AADF8;
		  /* 821AADF8h */ case   16:  		/* addi R6, R1, 468 */
		/* 821AADF8h case   16:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0x1D4);
		/* 821AADF8h case   16:*/		return 0x821AADFC;
		  /* 821AADFCh */ case   17:  		/* addi R5, R1, 316 */
		/* 821AADFCh case   17:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x13C);
		/* 821AADFCh case   17:*/		return 0x821AAE00;
		  /* 821AAE00h */ case   18:  		/* mr R4, R29 */
		/* 821AAE00h case   18:*/		regs.R4 = regs.R29;
		/* 821AAE00h case   18:*/		return 0x821AAE04;
		  /* 821AAE04h */ case   19:  		/* bl 493260 */
		/* 821AAE04h case   19:*/		regs.LR = 0x821AAE08; return 0x822234D0;
		/* 821AAE04h case   19:*/		return 0x821AAE08;
		  /* 821AAE08h */ case   20:  		/* mr R3, R20 */
		/* 821AAE08h case   20:*/		regs.R3 = regs.R20;
		/* 821AAE08h case   20:*/		return 0x821AAE0C;
		  /* 821AAE0Ch */ case   21:  		/* lwz R6, <#[R1 + 440]> */
		/* 821AAE0Ch case   21:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000001B8) );
		/* 821AAE0Ch case   21:*/		return 0x821AAE10;
		  /* 821AAE10h */ case   22:  		/* lwz R5, <#[R1 + 456]> */
		/* 821AAE10h case   22:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001C8) );
		/* 821AAE10h case   22:*/		return 0x821AAE14;
		  /* 821AAE14h */ case   23:  		/* lwz R4, <#[R1 + 296]> */
		/* 821AAE14h case   23:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x00000128) );
		/* 821AAE14h case   23:*/		return 0x821AAE18;
		  /* 821AAE18h */ case   24:  		/* bl -208048 */
		/* 821AAE18h case   24:*/		regs.LR = 0x821AAE1C; return 0x82178168;
		/* 821AAE18h case   24:*/		return 0x821AAE1C;
		  /* 821AAE1Ch */ case   25:  		/* mr R29, R3 */
		/* 821AAE1Ch case   25:*/		regs.R29 = regs.R3;
		/* 821AAE1Ch case   25:*/		return 0x821AAE20;
		  /* 821AAE20h */ case   26:  		/* lwz R6, <#[R1 + 416]> */
		/* 821AAE20h case   26:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000001A0) );
		/* 821AAE20h case   26:*/		return 0x821AAE24;
		  /* 821AAE24h */ case   27:  		/* mr R3, R20 */
		/* 821AAE24h case   27:*/		regs.R3 = regs.R20;
		/* 821AAE24h case   27:*/		return 0x821AAE28;
		  /* 821AAE28h */ case   28:  		/* lwz R5, <#[R1 + 468]> */
		/* 821AAE28h case   28:*/		cpu::mem::load32z( regs, &regs.R5, (uint32)(regs.R1 + 0x000001D4) );
		/* 821AAE28h case   28:*/		return 0x821AAE2C;
		  /* 821AAE2Ch */ case   29:  		/* lwz R4, <#[R1 + 316]> */
		/* 821AAE2Ch case   29:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x0000013C) );
		/* 821AAE2Ch case   29:*/		return 0x821AAE30;
		  /* 821AAE30h */ case   30:  		/* bl -208072 */
		/* 821AAE30h case   30:*/		regs.LR = 0x821AAE34; return 0x82178168;
		/* 821AAE30h case   30:*/		return 0x821AAE34;
		  /* 821AAE34h */ case   31:  		/* addi R9, R1, 240 */
		/* 821AAE34h case   31:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xF0);
		/* 821AAE34h case   31:*/		return 0x821AAE38;
		  /* 821AAE38h */ case   32:  		/* addi R11, R1, 152 */
		/* 821AAE38h case   32:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0x98);
		/* 821AAE38h case   32:*/		return 0x821AAE3C;
		  /* 821AAE3Ch */ case   33:  		/* stw R30, <#[R1 + 152]> */
		/* 821AAE3Ch case   33:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000098) );
		/* 821AAE3Ch case   33:*/		return 0x821AAE40;
		  /* 821AAE40h */ case   34:  		/* stw R9, <#[R1 + 108]> */
		/* 821AAE40h case   34:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R1 + 0x0000006C) );
		/* 821AAE40h case   34:*/		return 0x821AAE44;
		  /* 821AAE44h */ case   35:  		/* addi R10, R1, 132 */
		/* 821AAE44h case   35:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0x84);
		/* 821AAE44h case   35:*/		return 0x821AAE48;
		  /* 821AAE48h */ case   36:  		/* stw R11, <#[R1 + 84]> */
		/* 821AAE48h case   36:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821AAE48h case   36:*/		return 0x821AAE4C;
		  /* 821AAE4Ch */ case   37:  		/* mr R28, R3 */
		/* 821AAE4Ch case   37:*/		regs.R28 = regs.R3;
		/* 821AAE4Ch case   37:*/		return 0x821AAE50;
		  /* 821AAE50h */ case   38:  		/* addi R11, R1, 208 */
		/* 821AAE50h case   38:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xD0);
		/* 821AAE50h case   38:*/		return 0x821AAE54;
		  /* 821AAE54h */ case   39:  		/* stw R10, <#[R1 + 92]> */
		/* 821AAE54h case   39:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AAE54h case   39:*/		return 0x821AAE58;
		  /* 821AAE58h */ case   40:  		/* mr R9, R3 */
		/* 821AAE58h case   40:*/		regs.R9 = regs.R3;
		/* 821AAE58h case   40:*/		return 0x821AAE5C;
		  /* 821AAE5Ch */ case   41:  		/* stw R30, <#[R1 + 132]> */
		/* 821AAE5Ch case   41:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R1 + 0x00000084) );
		/* 821AAE5Ch case   41:*/		return 0x821AAE60;
		  /* 821AAE60h */ case   42:  		/* mr R10, R25 */
		/* 821AAE60h case   42:*/		regs.R10 = regs.R25;
		/* 821AAE60h case   42:*/		return 0x821AAE64;
		  /* 821AAE64h */ case   43:  		/* stw R11, <#[R1 + 100]> */
		/* 821AAE64h case   43:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000064) );
		/* 821AAE64h case   43:*/		return 0x821AAE68;
		  /* 821AAE68h */ case   44:  		/* mr R8, R29 */
		/* 821AAE68h case   44:*/		regs.R8 = regs.R29;
		/* 821AAE68h case   44:*/		return 0x821AAE6C;
		  /* 821AAE6Ch */ case   45:  		/* mr R7, R23 */
		/* 821AAE6Ch case   45:*/		regs.R7 = regs.R23;
		/* 821AAE6Ch case   45:*/		return 0x821AAE70;
		  /* 821AAE70h */ case   46:  		/* mr R6, R27 */
		/* 821AAE70h case   46:*/		regs.R6 = regs.R27;
		/* 821AAE70h case   46:*/		return 0x821AAE74;
		  /* 821AAE74h */ case   47:  		/* mr R5, R31 */
		/* 821AAE74h case   47:*/		regs.R5 = regs.R31;
		/* 821AAE74h case   47:*/		return 0x821AAE78;
		  /* 821AAE78h */ case   48:  		/* mr R4, R25 */
		/* 821AAE78h case   48:*/		regs.R4 = regs.R25;
		/* 821AAE78h case   48:*/		return 0x821AAE7C;
		  /* 821AAE7Ch */ case   49:  		/* mr R3, R20 */
		/* 821AAE7Ch case   49:*/		regs.R3 = regs.R20;
		/* 821AAE7Ch case   49:*/		return 0x821AAE80;
		  /* 821AAE80h */ case   50:  		/* bl -42824 */
		/* 821AAE80h case   50:*/		regs.LR = 0x821AAE84; return 0x821A0738;
		/* 821AAE80h case   50:*/		return 0x821AAE84;
		  /* 821AAE84h */ case   51:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AAE84h case   51:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AAE84h case   51:*/		return 0x821AAE88;
		  /* 821AAE88h */ case   52:  		/* bc 12, CR0_EQ, 576 */
		/* 821AAE88h case   52:*/		if ( regs.CR[0].eq ) { return 0x821AB0C8;  }
		/* 821AAE88h case   52:*/		return 0x821AAE8C;
		  /* 821AAE8Ch */ case   53:  		/* lwz R11, <#[R1 + 208]> */
		/* 821AAE8Ch case   53:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 821AAE8Ch case   53:*/		return 0x821AAE90;
		  /* 821AAE90h */ case   54:  		/* rlwinm. R11, R11, 0, 21, 27 */
		/* 821AAE90h case   54:*/		cpu::op::rlwinm<1,0,21,27>(regs,&regs.R11,regs.R11);
		/* 821AAE90h case   54:*/		return 0x821AAE94;
		  /* 821AAE94h */ case   55:  		/* bc 12, CR0_EQ, 16 */
		/* 821AAE94h case   55:*/		if ( regs.CR[0].eq ) { return 0x821AAEA4;  }
		/* 821AAE94h case   55:*/		return 0x821AAE98;
		  /* 821AAE98h */ case   56:  		/* lwz R11, <#[R1 + 240]> */
		/* 821AAE98h case   56:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 821AAE98h case   56:*/		return 0x821AAE9C;
		  /* 821AAE9Ch */ case   57:  		/* rlwinm. R11, R11, 0, 21, 27 */
		/* 821AAE9Ch case   57:*/		cpu::op::rlwinm<1,0,21,27>(regs,&regs.R11,regs.R11);
		/* 821AAE9Ch case   57:*/		return 0x821AAEA0;
		  /* 821AAEA0h */ case   58:  		/* bc 4, CR0_EQ, 552 */
		/* 821AAEA0h case   58:*/		if ( !regs.CR[0].eq ) { return 0x821AB0C8;  }
		/* 821AAEA0h case   58:*/		return 0x821AAEA4;
	}
	return 0x821AAEA4;
} // Block from 821AADB8h-821AAEA4h (59 instructions)

//////////////////////////////////////////////////////
// Block at 821AAEA4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAEA4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAEA4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAEA4);
		  /* 821AAEA4h */ case    0:  		/* addi R10, R1, 208 */
		/* 821AAEA4h case    0:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xD0);
		/* 821AAEA4h case    0:*/		return 0x821AAEA8;
		  /* 821AAEA8h */ case    1:  		/* lwz R8, <#[R25 + 28]> */
		/* 821AAEA8h case    1:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R25 + 0x0000001C) );
		/* 821AAEA8h case    1:*/		return 0x821AAEAC;
		  /* 821AAEACh */ case    2:  		/* mr R9, R25 */
		/* 821AAEACh case    2:*/		regs.R9 = regs.R25;
		/* 821AAEACh case    2:*/		return 0x821AAEB0;
		  /* 821AAEB0h */ case    3:  		/* lwz R7, <#[R1 + 152]> */
		/* 821AAEB0h case    3:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000098) );
		/* 821AAEB0h case    3:*/		return 0x821AAEB4;
		  /* 821AAEB4h */ case    4:  		/* mr R6, R23 */
		/* 821AAEB4h case    4:*/		regs.R6 = regs.R23;
		/* 821AAEB4h case    4:*/		return 0x821AAEB8;
		  /* 821AAEB8h */ case    5:  		/* mr R5, R31 */
		/* 821AAEB8h case    5:*/		regs.R5 = regs.R31;
		/* 821AAEB8h case    5:*/		return 0x821AAEBC;
		  /* 821AAEBCh */ case    6:  		/* mr R4, R25 */
		/* 821AAEBCh case    6:*/		regs.R4 = regs.R25;
		/* 821AAEBCh case    6:*/		return 0x821AAEC0;
		  /* 821AAEC0h */ case    7:  		/* mr R3, R20 */
		/* 821AAEC0h case    7:*/		regs.R3 = regs.R20;
		/* 821AAEC0h case    7:*/		return 0x821AAEC4;
		  /* 821AAEC4h */ case    8:  		/* bl -33740 */
		/* 821AAEC4h case    8:*/		regs.LR = 0x821AAEC8; return 0x821A2AF8;
		/* 821AAEC4h case    8:*/		return 0x821AAEC8;
		  /* 821AAEC8h */ case    9:  		/* lwz R4, <#[R3 + 12]> */
		/* 821AAEC8h case    9:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R3 + 0x0000000C) );
		/* 821AAEC8h case    9:*/		return 0x821AAECC;
		  /* 821AAECCh */ case   10:  		/* mr R26, R3 */
		/* 821AAECCh case   10:*/		regs.R26 = regs.R3;
		/* 821AAECCh case   10:*/		return 0x821AAED0;
		  /* 821AAED0h */ case   11:  		/* mr R31, R30 */
		/* 821AAED0h case   11:*/		regs.R31 = regs.R30;
		/* 821AAED0h case   11:*/		return 0x821AAED4;
		  /* 821AAED4h */ case   12:  		/* lwz R11, <#[R4 + 8]> */
		/* 821AAED4h case   12:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821AAED4h case   12:*/		return 0x821AAED8;
		  /* 821AAED8h */ case   13:  		/* rlwinm R11, R11, 25, 25, 31 */
		/* 821AAED8h case   13:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R11,regs.R11);
		/* 821AAED8h case   13:*/		return 0x821AAEDC;
		  /* 821AAEDCh */ case   14:  		/* cmplwi CR6, R11, 1 */
		/* 821AAEDCh case   14:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000001);
		/* 821AAEDCh case   14:*/		return 0x821AAEE0;
		  /* 821AAEE0h */ case   15:  		/* bc 12, CR6_LT, 16 */
		/* 821AAEE0h case   15:*/		if ( regs.CR[6].lt ) { return 0x821AAEF0;  }
		/* 821AAEE0h case   15:*/		return 0x821AAEE4;
		  /* 821AAEE4h */ case   16:  		/* cmplwi CR6, R11, 102 */
		/* 821AAEE4h case   16:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000066);
		/* 821AAEE4h case   16:*/		return 0x821AAEE8;
		  /* 821AAEE8h */ case   17:  		/* li R11, 1 */
		/* 821AAEE8h case   17:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AAEE8h case   17:*/		return 0x821AAEEC;
		  /* 821AAEECh */ case   18:  		/* bc 4, CR6_GT, 8 */
		/* 821AAEECh case   18:*/		if ( !regs.CR[6].gt ) { return 0x821AAEF4;  }
		/* 821AAEECh case   18:*/		return 0x821AAEF0;
	}
	return 0x821AAEF0;
} // Block from 821AAEA4h-821AAEF0h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AAEF0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAEF0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAEF0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAEF0);
		  /* 821AAEF0h */ case    0:  		/* mr R11, R30 */
		/* 821AAEF0h case    0:*/		regs.R11 = regs.R30;
		/* 821AAEF0h case    0:*/		return 0x821AAEF4;
	}
	return 0x821AAEF4;
} // Block from 821AAEF0h-821AAEF4h (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AAEF4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAEF4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAEF4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAEF4);
		  /* 821AAEF4h */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AAEF4h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AAEF4h case    0:*/		return 0x821AAEF8;
		  /* 821AAEF8h */ case    1:  		/* bc 12, CR0_EQ, 20 */
		/* 821AAEF8h case    1:*/		if ( regs.CR[0].eq ) { return 0x821AAF0C;  }
		/* 821AAEF8h case    1:*/		return 0x821AAEFC;
		  /* 821AAEFCh */ case    2:  		/* mr R5, R20 */
		/* 821AAEFCh case    2:*/		regs.R5 = regs.R20;
		/* 821AAEFCh case    2:*/		return 0x821AAF00;
		  /* 821AAF00h */ case    3:  		/* mr R3, R25 */
		/* 821AAF00h case    3:*/		regs.R3 = regs.R25;
		/* 821AAF00h case    3:*/		return 0x821AAF04;
		  /* 821AAF04h */ case    4:  		/* bl -208092 */
		/* 821AAF04h case    4:*/		regs.LR = 0x821AAF08; return 0x82178228;
		/* 821AAF04h case    4:*/		return 0x821AAF08;
		  /* 821AAF08h */ case    5:  		/* mr R31, R3 */
		/* 821AAF08h case    5:*/		regs.R31 = regs.R3;
		/* 821AAF08h case    5:*/		return 0x821AAF0C;
	}
	return 0x821AAF0C;
} // Block from 821AAEF4h-821AAF0Ch (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AAF0Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAF0C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAF0C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAF0C);
		  /* 821AAF0Ch */ case    0:  		/* lwz R30, <#[R1 + 132]> */
		/* 821AAF0Ch case    0:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R1 + 0x00000084) );
		/* 821AAF0Ch case    0:*/		return 0x821AAF10;
		  /* 821AAF10h */ case    1:  		/* addi R9, R1, 240 */
		/* 821AAF10h case    1:*/		cpu::op::addi<0>(regs,&regs.R9,regs.R1,0xF0);
		/* 821AAF10h case    1:*/		return 0x821AAF14;
		  /* 821AAF14h */ case    2:  		/* mr R8, R25 */
		/* 821AAF14h case    2:*/		regs.R8 = regs.R25;
		/* 821AAF14h case    2:*/		return 0x821AAF18;
		  /* 821AAF18h */ case    3:  		/* mr R7, R30 */
		/* 821AAF18h case    3:*/		regs.R7 = regs.R30;
		/* 821AAF18h case    3:*/		return 0x821AAF1C;
		  /* 821AAF1Ch */ case    4:  		/* mr R6, R23 */
		/* 821AAF1Ch case    4:*/		regs.R6 = regs.R23;
		/* 821AAF1Ch case    4:*/		return 0x821AAF20;
		  /* 821AAF20h */ case    5:  		/* mr R5, R27 */
		/* 821AAF20h case    5:*/		regs.R5 = regs.R27;
		/* 821AAF20h case    5:*/		return 0x821AAF24;
		  /* 821AAF24h */ case    6:  		/* mr R4, R25 */
		/* 821AAF24h case    6:*/		regs.R4 = regs.R25;
		/* 821AAF24h case    6:*/		return 0x821AAF28;
		  /* 821AAF28h */ case    7:  		/* mr R3, R20 */
		/* 821AAF28h case    7:*/		regs.R3 = regs.R20;
		/* 821AAF28h case    7:*/		return 0x821AAF2C;
		  /* 821AAF2Ch */ case    8:  		/* bl -43556 */
		/* 821AAF2Ch case    8:*/		regs.LR = 0x821AAF30; return 0x821A0508;
		/* 821AAF2Ch case    8:*/		return 0x821AAF30;
		  /* 821AAF30h */ case    9:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AAF30h case    9:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AAF30h case    9:*/		return 0x821AAF34;
		  /* 821AAF34h */ case   10:  		/* bc 12, CR0_EQ, 372 */
		/* 821AAF34h case   10:*/		if ( regs.CR[0].eq ) { return 0x821AB0A8;  }
		/* 821AAF34h case   10:*/		return 0x821AAF38;
		  /* 821AAF38h */ case   11:  		/* lwz R25, <#[R1 + 208]> */
		/* 821AAF38h case   11:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000000D0) );
		/* 821AAF38h case   11:*/		return 0x821AAF3C;
		  /* 821AAF3Ch */ case   12:  		/* rlwinm. R11, R25, 0, 21, 27 */
		/* 821AAF3Ch case   12:*/		cpu::op::rlwinm<1,0,21,27>(regs,&regs.R11,regs.R25);
		/* 821AAF3Ch case   12:*/		return 0x821AAF40;
		  /* 821AAF40h */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821AAF40h case   13:*/		if ( regs.CR[0].eq ) { return 0x821AAF50;  }
		/* 821AAF40h case   13:*/		return 0x821AAF44;
		  /* 821AAF44h */ case   14:  		/* lwz R11, <#[R1 + 240]> */
		/* 821AAF44h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 821AAF44h case   14:*/		return 0x821AAF48;
		  /* 821AAF48h */ case   15:  		/* rlwinm. R11, R11, 0, 21, 27 */
		/* 821AAF48h case   15:*/		cpu::op::rlwinm<1,0,21,27>(regs,&regs.R11,regs.R11);
		/* 821AAF48h case   15:*/		return 0x821AAF4C;
		  /* 821AAF4Ch */ case   16:  		/* bc 4, CR0_EQ, 348 */
		/* 821AAF4Ch case   16:*/		if ( !regs.CR[0].eq ) { return 0x821AB0A8;  }
		/* 821AAF4Ch case   16:*/		return 0x821AAF50;
	}
	return 0x821AAF50;
} // Block from 821AAF0Ch-821AAF50h (17 instructions)

//////////////////////////////////////////////////////
// Block at 821AAF50h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAF50( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAF50) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAF50);
		  /* 821AAF50h */ case    0:  		/* lwz R28, <#[R1 + 1244]> */
		/* 821AAF50h case    0:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AAF50h case    0:*/		return 0x821AAF54;
		  /* 821AAF54h */ case    1:  		/* mr R5, R27 */
		/* 821AAF54h case    1:*/		regs.R5 = regs.R27;
		/* 821AAF54h case    1:*/		return 0x821AAF58;
		  /* 821AAF58h */ case    2:  		/* lwz R27, <#[R1 + 1236]> */
		/* 821AAF58h case    2:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AAF58h case    2:*/		return 0x821AAF5C;
		  /* 821AAF5Ch */ case    3:  		/* addi R10, R1, 240 */
		/* 821AAF5Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 821AAF5Ch case    3:*/		return 0x821AAF60;
		  /* 821AAF60h */ case    4:  		/* mr R9, R28 */
		/* 821AAF60h case    4:*/		regs.R9 = regs.R28;
		/* 821AAF60h case    4:*/		return 0x821AAF64;
		  /* 821AAF64h */ case    5:  		/* mr R7, R30 */
		/* 821AAF64h case    5:*/		regs.R7 = regs.R30;
		/* 821AAF64h case    5:*/		return 0x821AAF68;
		  /* 821AAF68h */ case    6:  		/* mr R6, R23 */
		/* 821AAF68h case    6:*/		regs.R6 = regs.R23;
		/* 821AAF68h case    6:*/		return 0x821AAF6C;
		  /* 821AAF6Ch */ case    7:  		/* mr R4, R28 */
		/* 821AAF6Ch case    7:*/		regs.R4 = regs.R28;
		/* 821AAF6Ch case    7:*/		return 0x821AAF70;
		  /* 821AAF70h */ case    8:  		/* lwz R8, <#[R28 + 28]> */
		/* 821AAF70h case    8:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R28 + 0x0000001C) );
		/* 821AAF70h case    8:*/		return 0x821AAF74;
		  /* 821AAF74h */ case    9:  		/* mr R3, R27 */
		/* 821AAF74h case    9:*/		regs.R3 = regs.R27;
		/* 821AAF74h case    9:*/		return 0x821AAF78;
		  /* 821AAF78h */ case   10:  		/* bl -33920 */
		/* 821AAF78h case   10:*/		regs.LR = 0x821AAF7C; return 0x821A2AF8;
		/* 821AAF78h case   10:*/		return 0x821AAF7C;
		  /* 821AAF7Ch */ case   11:  		/* mr R29, R3 */
		/* 821AAF7Ch case   11:*/		regs.R29 = regs.R3;
		/* 821AAF7Ch case   11:*/		return 0x821AAF80;
		  /* 821AAF80h */ case   12:  		/* cmplwi CR6, R31, 0 */
		/* 821AAF80h case   12:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AAF80h case   12:*/		return 0x821AAF84;
		  /* 821AAF84h */ case   13:  		/* bc 12, CR6_EQ, 20 */
		/* 821AAF84h case   13:*/		if ( regs.CR[6].eq ) { return 0x821AAF98;  }
		/* 821AAF84h case   13:*/		return 0x821AAF88;
		  /* 821AAF88h */ case   14:  		/* mr R5, R27 */
		/* 821AAF88h case   14:*/		regs.R5 = regs.R27;
		/* 821AAF88h case   14:*/		return 0x821AAF8C;
		  /* 821AAF8Ch */ case   15:  		/* mr R4, R31 */
		/* 821AAF8Ch case   15:*/		regs.R4 = regs.R31;
		/* 821AAF8Ch case   15:*/		return 0x821AAF90;
		  /* 821AAF90h */ case   16:  		/* mr R3, R28 */
		/* 821AAF90h case   16:*/		regs.R3 = regs.R28;
		/* 821AAF90h case   16:*/		return 0x821AAF94;
		  /* 821AAF94h */ case   17:  		/* bl -206468 */
		/* 821AAF94h case   17:*/		regs.LR = 0x821AAF98; return 0x82178910;
		/* 821AAF94h case   17:*/		return 0x821AAF98;
	}
	return 0x821AAF98;
} // Block from 821AAF50h-821AAF98h (18 instructions)

//////////////////////////////////////////////////////
// Block at 821AAF98h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAF98( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAF98) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAF98);
		  /* 821AAF98h */ case    0:  		/* mr R7, R29 */
		/* 821AAF98h case    0:*/		regs.R7 = regs.R29;
		/* 821AAF98h case    0:*/		return 0x821AAF9C;
		  /* 821AAF9Ch */ case    1:  		/* mr R6, R26 */
		/* 821AAF9Ch case    1:*/		regs.R6 = regs.R26;
		/* 821AAF9Ch case    1:*/		return 0x821AAFA0;
		  /* 821AAFA0h */ case    2:  		/* mr R5, R28 */
		/* 821AAFA0h case    2:*/		regs.R5 = regs.R28;
		/* 821AAFA0h case    2:*/		return 0x821AAFA4;
		  /* 821AAFA4h */ case    3:  		/* li R4, 0 */
		/* 821AAFA4h case    3:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AAFA4h case    3:*/		return 0x821AAFA8;
		  /* 821AAFA8h */ case    4:  		/* mr R3, R27 */
		/* 821AAFA8h case    4:*/		regs.R3 = regs.R27;
		/* 821AAFA8h case    4:*/		return 0x821AAFAC;
		  /* 821AAFACh */ case    5:  		/* bl -51692 */
		/* 821AAFACh case    5:*/		regs.LR = 0x821AAFB0; return 0x8219E5C0;
		/* 821AAFACh case    5:*/		return 0x821AAFB0;
		  /* 821AAFB0h */ case    6:  		/* mr R30, R3 */
		/* 821AAFB0h case    6:*/		regs.R30 = regs.R3;
		/* 821AAFB0h case    6:*/		return 0x821AAFB4;
		  /* 821AAFB4h */ case    7:  		/* mr R8, R23 */
		/* 821AAFB4h case    7:*/		regs.R8 = regs.R23;
		/* 821AAFB4h case    7:*/		return 0x821AAFB8;
		  /* 821AAFB8h */ case    8:  		/* lwz R11, <#[R8]> */
		/* 821AAFB8h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821AAFB8h case    8:*/		return 0x821AAFBC;
		  /* 821AAFBCh */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821AAFBCh case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AAFBCh case    9:*/		return 0x821AAFC0;
		  /* 821AAFC0h */ case   10:  		/* bc 12, CR6_EQ, 88 */
		/* 821AAFC0h case   10:*/		if ( regs.CR[6].eq ) { return 0x821AB018;  }
		/* 821AAFC0h case   10:*/		return 0x821AAFC4;
		  /* 821AAFC4h */ case   11:  		/* lwz R10, <#[R11]> */
		/* 821AAFC4h case   11:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AAFC4h case   11:*/		return 0x821AAFC8;
		  /* 821AAFC8h */ case   12:  		/* rlwinm. R10, R10, 0, 4, 6 */
		/* 821AAFC8h case   12:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R10);
		/* 821AAFC8h case   12:*/		return 0x821AAFCC;
		  /* 821AAFCCh */ case   13:  		/* bc 4, CR0_EQ, 56 */
		/* 821AAFCCh case   13:*/		if ( !regs.CR[0].eq ) { return 0x821AB004;  }
		/* 821AAFCCh case   13:*/		return 0x821AAFD0;
		  /* 821AAFD0h */ case   14:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AAFD0h case   14:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AAFD0h case   14:*/		return 0x821AAFD4;
		  /* 821AAFD4h */ case   15:  		/* lwz R9, <#[R10]> */
		/* 821AAFD4h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AAFD4h case   15:*/		return 0x821AAFD8;
		  /* 821AAFD8h */ case   16:  		/* b 12 */
		/* 821AAFD8h case   16:*/		return 0x821AAFE4;
		/* 821AAFD8h case   16:*/		return 0x821AAFDC;
		  /* 821AAFDCh */ case   17:  		/* addi R10, R9, 4 */
		/* 821AAFDCh case   17:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821AAFDCh case   17:*/		return 0x821AAFE0;
		  /* 821AAFE0h */ case   18:  		/* lwz R9, <#[R9 + 4]> */
		/* 821AAFE0h case   18:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821AAFE0h case   18:*/		return 0x821AAFE4;
	}
	return 0x821AAFE4;
} // Block from 821AAF98h-821AAFE4h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AAFE4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AAFE4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AAFE4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AAFE4);
		  /* 821AAFE4h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AAFE4h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AAFE4h case    0:*/		return 0x821AAFE8;
		  /* 821AAFE8h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AAFE8h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AAFDC;  }
		/* 821AAFE8h case    1:*/		return 0x821AAFEC;
		  /* 821AAFECh */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821AAFECh case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AAFECh case    2:*/		return 0x821AAFF0;
		  /* 821AAFF0h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AAFF0h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AAFF0h case    3:*/		return 0x821AAFF4;
		  /* 821AAFF4h */ case    4:  		/* lwz R10, <#[R30]> */
		/* 821AAFF4h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R30 + 0x00000000) );
		/* 821AAFF4h case    4:*/		return 0x821AAFF8;
		  /* 821AAFF8h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821AAFF8h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AAFF8h case    5:*/		return 0x821AAFFC;
		  /* 821AAFFCh */ case    6:  		/* stw R11, <#[R30]> */
		/* 821AAFFCh case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AAFFCh case    6:*/		return 0x821AB000;
		  /* 821AB000h */ case    7:  		/* stw R30, <#[R11 + 16]> */
		/* 821AB000h case    7:*/		cpu::mem::store32( regs, regs.R30, (uint32)(regs.R11 + 0x00000010) );
		/* 821AB000h case    7:*/		return 0x821AB004;
	}
	return 0x821AB004;
} // Block from 821AAFE4h-821AB004h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AB004h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB004( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB004) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB004);
		  /* 821AB004h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821AB004h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821AB004h case    0:*/		return 0x821AB008;
		  /* 821AB008h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821AB008h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821AB008h case    1:*/		return 0x821AB00C;
		  /* 821AB00Ch */ case    2:  		/* bc 4, CR6_EQ, -84 */
		/* 821AB00Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AAFB8;  }
		/* 821AB00Ch case    2:*/		return 0x821AB010;
		  /* 821AB010h */ case    3:  		/* addi R8, R11, 4 */
		/* 821AB010h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821AB010h case    3:*/		return 0x821AB014;
		  /* 821AB014h */ case    4:  		/* b -92 */
		/* 821AB014h case    4:*/		return 0x821AAFB8;
		/* 821AB014h case    4:*/		return 0x821AB018;
	}
	return 0x821AB018;
} // Block from 821AB004h-821AB018h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB018h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB018( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB018) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB018);
		  /* 821AB018h */ case    0:  		/* rlwinm. R5, R25, 17, 29, 31 */
		/* 821AB018h case    0:*/		cpu::op::rlwinm<1,17,29,31>(regs,&regs.R5,regs.R25);
		/* 821AB018h case    0:*/		return 0x821AB01C;
		  /* 821AB01Ch */ case    1:  		/* bc 12, CR0_EQ, 16 */
		/* 821AB01Ch case    1:*/		if ( regs.CR[0].eq ) { return 0x821AB02C;  }
		/* 821AB01Ch case    1:*/		return 0x821AB020;
		  /* 821AB020h */ case    2:  		/* mr R4, R30 */
		/* 821AB020h case    2:*/		regs.R4 = regs.R30;
		/* 821AB020h case    2:*/		return 0x821AB024;
		  /* 821AB024h */ case    3:  		/* mr R3, R27 */
		/* 821AB024h case    3:*/		regs.R3 = regs.R27;
		/* 821AB024h case    3:*/		return 0x821AB028;
		  /* 821AB028h */ case    4:  		/* bl -56456 */
		/* 821AB028h case    4:*/		regs.LR = 0x821AB02C; return 0x8219D3A0;
		/* 821AB028h case    4:*/		return 0x821AB02C;
	}
	return 0x821AB02C;
} // Block from 821AB018h-821AB02Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB02Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB02C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB02C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB02C);
		  /* 821AB02Ch */ case    0:  		/* lwz R11, <#[R28 + 8]> */
		/* 821AB02Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821AB02Ch case    0:*/		return 0x821AB030;
		  /* 821AB030h */ case    1:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AB030h case    1:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AB030h case    1:*/		return 0x821AB034;
		  /* 821AB034h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821AB034h case    2:*/		if ( regs.CR[0].eq ) { return 0x821AB044;  }
		/* 821AB034h case    2:*/		return 0x821AB038;
		  /* 821AB038h */ case    3:  		/* lwz R11, <#[R30 + 8]> */
		/* 821AB038h case    3:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AB038h case    3:*/		return 0x821AB03C;
		  /* 821AB03Ch */ case    4:  		/* ori R11, R11, 1 */
		/* 821AB03Ch case    4:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AB03Ch case    4:*/		return 0x821AB040;
		  /* 821AB040h */ case    5:  		/* stw R11, <#[R30 + 8]> */
		/* 821AB040h case    5:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R30 + 0x00000008) );
		/* 821AB040h case    5:*/		return 0x821AB044;
	}
	return 0x821AB044;
} // Block from 821AB02Ch-821AB044h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AB044h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB044( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB044) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB044);
		  /* 821AB044h */ case    0:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821AB044h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821AB044h case    0:*/		return 0x821AB048;
		  /* 821AB048h */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821AB048h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AB058;  }
		/* 821AB048h case    1:*/		return 0x821AB04C;
		  /* 821AB04Ch */ case    2:  		/* lwz R11, <#[R23 + 8]> */
		/* 821AB04Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821AB04Ch case    2:*/		return 0x821AB050;
		  /* 821AB050h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AB050h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AB050h case    3:*/		return 0x821AB054;
		  /* 821AB054h */ case    4:  		/* stw R11, <#[R23 + 8]> */
		/* 821AB054h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821AB054h case    4:*/		return 0x821AB058;
	}
	return 0x821AB058;
} // Block from 821AB044h-821AB058h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB058h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB058( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB058) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB058);
		  /* 821AB058h */ case    0:  		/* rlwinm. R11, R21, 0, 24, 31 */
		/* 821AB058h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R21);
		/* 821AB058h case    0:*/		return 0x821AB05C;
		  /* 821AB05Ch */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821AB05Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AB06C;  }
		/* 821AB05Ch case    1:*/		return 0x821AB060;
		  /* 821AB060h */ case    2:  		/* lwz R11, <#[R28 + 8]> */
		/* 821AB060h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821AB060h case    2:*/		return 0x821AB064;
		  /* 821AB064h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AB064h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AB064h case    3:*/		return 0x821AB068;
		  /* 821AB068h */ case    4:  		/* stw R11, <#[R28 + 8]> */
		/* 821AB068h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821AB068h case    4:*/		return 0x821AB06C;
	}
	return 0x821AB06C;
} // Block from 821AB058h-821AB06Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB06Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB06C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB06C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB06C);
		  /* 821AB06Ch */ case    0:  		/* lwz R11, <#[R29]> */
		/* 821AB06Ch case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R29 + 0x00000000) );
		/* 821AB06Ch case    0:*/		return 0x821AB070;
		  /* 821AB070h */ case    1:  		/* li R8, 1 */
		/* 821AB070h case    1:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821AB070h case    1:*/		return 0x821AB074;
		  /* 821AB074h */ case    2:  		/* lwz R10, <#[R26]> */
		/* 821AB074h case    2:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R26 + 0x00000000) );
		/* 821AB074h case    2:*/		return 0x821AB078;
		  /* 821AB078h */ case    3:  		/* li R6, 0 */
		/* 821AB078h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AB078h case    3:*/		return 0x821AB07C;
		  /* 821AB07Ch */ case    4:  		/* rlwinm R11, R11, 29, 3, 31 */
		/* 821AB07Ch case    4:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R11,regs.R11);
		/* 821AB07Ch case    4:*/		return 0x821AB080;
		  /* 821AB080h */ case    5:  		/* rlwinm R10, R10, 29, 3, 31 */
		/* 821AB080h case    5:*/		cpu::op::rlwinm<0,29,3,31>(regs,&regs.R10,regs.R10);
		/* 821AB080h case    5:*/		return 0x821AB084;
		  /* 821AB084h */ case    6:  		/* mr R5, R30 */
		/* 821AB084h case    6:*/		regs.R5 = regs.R30;
		/* 821AB084h case    6:*/		return 0x821AB088;
		  /* 821AB088h */ case    7:  		/* or R11, R11, R10 */
		/* 821AB088h case    7:*/		cpu::op::or<0>(regs,&regs.R11,regs.R11,regs.R10);
		/* 821AB088h case    7:*/		return 0x821AB08C;
		  /* 821AB08Ch */ case    8:  		/* mr R4, R28 */
		/* 821AB08Ch case    8:*/		regs.R4 = regs.R28;
		/* 821AB08Ch case    8:*/		return 0x821AB090;
		  /* 821AB090h */ case    9:  		/* rlwinm R7, R11, 0, 31, 31 */
		/* 821AB090h case    9:*/		cpu::op::rlwinm<0,0,31,31>(regs,&regs.R7,regs.R11);
		/* 821AB090h case    9:*/		return 0x821AB094;
		  /* 821AB094h */ case   10:  		/* mr R3, R27 */
		/* 821AB094h case   10:*/		regs.R3 = regs.R27;
		/* 821AB094h case   10:*/		return 0x821AB098;
		  /* 821AB098h */ case   11:  		/* bl -25656 */
		/* 821AB098h case   11:*/		regs.LR = 0x821AB09C; return 0x821A4C60;
		/* 821AB098h case   11:*/		return 0x821AB09C;
		  /* 821AB09Ch */ case   12:  		/* mr R4, R23 */
		/* 821AB09Ch case   12:*/		regs.R4 = regs.R23;
		/* 821AB09Ch case   12:*/		return 0x821AB0A0;
		  /* 821AB0A0h */ case   13:  		/* mr R3, R27 */
		/* 821AB0A0h case   13:*/		regs.R3 = regs.R27;
		/* 821AB0A0h case   13:*/		return 0x821AB0A4;
		  /* 821AB0A4h */ case   14:  		/* b 16408 */
		/* 821AB0A4h case   14:*/		return 0x821AF0BC;
		/* 821AB0A4h case   14:*/		return 0x821AB0A8;
	}
	return 0x821AB0A8;
} // Block from 821AB06Ch-821AB0A8h (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AB0A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB0A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB0A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB0A8);
		  /* 821AB0A8h */ case    0:  		/* lwz R20, <#[R1 + 1236]> */
		/* 821AB0A8h case    0:*/		cpu::mem::load32z( regs, &regs.R20, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AB0A8h case    0:*/		return 0x821AB0AC;
		  /* 821AB0ACh */ case    1:  		/* cmplwi CR6, R31, 0 */
		/* 821AB0ACh case    1:*/		cpu::op::cmplwi<6>(regs,regs.R31,0x00000000);
		/* 821AB0ACh case    1:*/		return 0x821AB0B0;
		  /* 821AB0B0h */ case    2:  		/* lwz R25, <#[R1 + 1244]> */
		/* 821AB0B0h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R1 + 0x000004DC) );
		/* 821AB0B0h case    2:*/		return 0x821AB0B4;
		  /* 821AB0B4h */ case    3:  		/* bc 12, CR6_EQ, 20 */
		/* 821AB0B4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AB0C8;  }
		/* 821AB0B4h case    3:*/		return 0x821AB0B8;
		  /* 821AB0B8h */ case    4:  		/* mr R4, R31 */
		/* 821AB0B8h case    4:*/		regs.R4 = regs.R31;
		/* 821AB0B8h case    4:*/		return 0x821AB0BC;
		  /* 821AB0BCh */ case    5:  		/* mr R5, R20 */
		/* 821AB0BCh case    5:*/		regs.R5 = regs.R20;
		/* 821AB0BCh case    5:*/		return 0x821AB0C0;
		  /* 821AB0C0h */ case    6:  		/* mr R3, R25 */
		/* 821AB0C0h case    6:*/		regs.R3 = regs.R25;
		/* 821AB0C0h case    6:*/		return 0x821AB0C4;
		  /* 821AB0C4h */ case    7:  		/* bl -206772 */
		/* 821AB0C4h case    7:*/		regs.LR = 0x821AB0C8; return 0x82178910;
		/* 821AB0C4h case    7:*/		return 0x821AB0C8;
	}
	return 0x821AB0C8;
} // Block from 821AB0A8h-821AB0C8h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AB0C8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB0C8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB0C8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB0C8);
		  /* 821AB0C8h */ case    0:  		/* lwz R11, <#[R1 + 296]> */
		/* 821AB0C8h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x00000128) );
		/* 821AB0C8h case    0:*/		return 0x821AB0CC;
		  /* 821AB0CCh */ case    1:  		/* addi R10, R11, 4 */
		/* 821AB0CCh case    1:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AB0CCh case    1:*/		return 0x821AB0D0;
		  /* 821AB0D0h */ case    2:  		/* lwz R11, <#[R10]> */
		/* 821AB0D0h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB0D0h case    2:*/		return 0x821AB0D4;
		  /* 821AB0D4h */ case    3:  		/* b 12 */
		/* 821AB0D4h case    3:*/		return 0x821AB0E0;
		/* 821AB0D4h case    3:*/		return 0x821AB0D8;
		  /* 821AB0D8h */ case    4:  		/* addi R10, R11, 8 */
		/* 821AB0D8h case    4:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AB0D8h case    4:*/		return 0x821AB0DC;
		  /* 821AB0DCh */ case    5:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AB0DCh case    5:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AB0DCh case    5:*/		return 0x821AB0E0;
	}
	return 0x821AB0E0;
} // Block from 821AB0C8h-821AB0E0h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AB0E0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB0E0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB0E0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB0E0);
		  /* 821AB0E0h */ case    0:  		/* cmplw CR6, R11, R29 */
		/* 821AB0E0h case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R29);
		/* 821AB0E0h case    0:*/		return 0x821AB0E4;
		  /* 821AB0E4h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AB0E4h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AB0D8;  }
		/* 821AB0E4h case    1:*/		return 0x821AB0E8;
		  /* 821AB0E8h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AB0E8h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AB0E8h case    2:*/		return 0x821AB0EC;
		  /* 821AB0ECh */ case    3:  		/* li R6, 26 */
		/* 821AB0ECh case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AB0ECh case    3:*/		return 0x821AB0F0;
		  /* 821AB0F0h */ case    4:  		/* li R5, 20 */
		/* 821AB0F0h case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AB0F0h case    4:*/		return 0x821AB0F4;
		  /* 821AB0F4h */ case    5:  		/* mr R4, R29 */
		/* 821AB0F4h case    5:*/		regs.R4 = regs.R29;
		/* 821AB0F4h case    5:*/		return 0x821AB0F8;
		  /* 821AB0F8h */ case    6:  		/* mr R3, R20 */
		/* 821AB0F8h case    6:*/		regs.R3 = regs.R20;
		/* 821AB0F8h case    6:*/		return 0x821AB0FC;
		  /* 821AB0FCh */ case    7:  		/* stw R11, <#[R10]> */
		/* 821AB0FCh case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB0FCh case    7:*/		return 0x821AB100;
		  /* 821AB100h */ case    8:  		/* bl -287848 */
		/* 821AB100h case    8:*/		regs.LR = 0x821AB104; return 0x82164C98;
		/* 821AB100h case    8:*/		return 0x821AB104;
		  /* 821AB104h */ case    9:  		/* lwz R11, <#[R1 + 316]> */
		/* 821AB104h case    9:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x0000013C) );
		/* 821AB104h case    9:*/		return 0x821AB108;
		  /* 821AB108h */ case   10:  		/* addi R10, R11, 4 */
		/* 821AB108h case   10:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x4);
		/* 821AB108h case   10:*/		return 0x821AB10C;
		  /* 821AB10Ch */ case   11:  		/* lwz R11, <#[R10]> */
		/* 821AB10Ch case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB10Ch case   11:*/		return 0x821AB110;
		  /* 821AB110h */ case   12:  		/* b 12 */
		/* 821AB110h case   12:*/		return 0x821AB11C;
		/* 821AB110h case   12:*/		return 0x821AB114;
		  /* 821AB114h */ case   13:  		/* addi R10, R11, 8 */
		/* 821AB114h case   13:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R11,0x8);
		/* 821AB114h case   13:*/		return 0x821AB118;
		  /* 821AB118h */ case   14:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AB118h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AB118h case   14:*/		return 0x821AB11C;
	}
	return 0x821AB11C;
} // Block from 821AB0E0h-821AB11Ch (15 instructions)

//////////////////////////////////////////////////////
// Block at 821AB11Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB11C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB11C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB11C);
		  /* 821AB11Ch */ case    0:  		/* cmplw CR6, R11, R28 */
		/* 821AB11Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R28);
		/* 821AB11Ch case    0:*/		return 0x821AB120;
		  /* 821AB120h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AB120h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AB114;  }
		/* 821AB120h case    1:*/		return 0x821AB124;
		  /* 821AB124h */ case    2:  		/* lwz R11, <#[R11 + 8]> */
		/* 821AB124h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R11 + 0x00000008) );
		/* 821AB124h case    2:*/		return 0x821AB128;
		  /* 821AB128h */ case    3:  		/* li R6, 26 */
		/* 821AB128h case    3:*/		cpu::op::li<0>(regs,&regs.R6,0x1A);
		/* 821AB128h case    3:*/		return 0x821AB12C;
		  /* 821AB12Ch */ case    4:  		/* li R5, 20 */
		/* 821AB12Ch case    4:*/		cpu::op::li<0>(regs,&regs.R5,0x14);
		/* 821AB12Ch case    4:*/		return 0x821AB130;
		  /* 821AB130h */ case    5:  		/* mr R4, R28 */
		/* 821AB130h case    5:*/		regs.R4 = regs.R28;
		/* 821AB130h case    5:*/		return 0x821AB134;
		  /* 821AB134h */ case    6:  		/* mr R3, R20 */
		/* 821AB134h case    6:*/		regs.R3 = regs.R20;
		/* 821AB134h case    6:*/		return 0x821AB138;
		  /* 821AB138h */ case    7:  		/* stw R11, <#[R10]> */
		/* 821AB138h case    7:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB138h case    7:*/		return 0x821AB13C;
		  /* 821AB13Ch */ case    8:  		/* bl -287908 */
		/* 821AB13Ch case    8:*/		regs.LR = 0x821AB140; return 0x82164C98;
		/* 821AB13Ch case    8:*/		return 0x821AB140;
		  /* 821AB140h */ case    9:  		/* li R6, 0 */
		/* 821AB140h case    9:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AB140h case    9:*/		return 0x821AB144;
		  /* 821AB144h */ case   10:  		/* li R5, 1 */
		/* 821AB144h case   10:*/		cpu::op::li<0>(regs,&regs.R5,0x1);
		/* 821AB144h case   10:*/		return 0x821AB148;
		  /* 821AB148h */ case   11:  		/* mr R4, R24 */
		/* 821AB148h case   11:*/		regs.R4 = regs.R24;
		/* 821AB148h case   11:*/		return 0x821AB14C;
		  /* 821AB14Ch */ case   12:  		/* mr R3, R20 */
		/* 821AB14Ch case   12:*/		regs.R3 = regs.R20;
		/* 821AB14Ch case   12:*/		return 0x821AB150;
		  /* 821AB150h */ case   13:  		/* bl -29392 */
		/* 821AB150h case   13:*/		regs.LR = 0x821AB154; return 0x821A3E80;
		/* 821AB150h case   13:*/		return 0x821AB154;
		  /* 821AB154h */ case   14:  		/* rlwinm. R11, R22, 0, 24, 31 */
		/* 821AB154h case   14:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R22);
		/* 821AB154h case   14:*/		return 0x821AB158;
		  /* 821AB158h */ case   15:  		/* bc 4, CR0_EQ, 16 */
		/* 821AB158h case   15:*/		if ( !regs.CR[0].eq ) { return 0x821AB168;  }
		/* 821AB158h case   15:*/		return 0x821AB15C;
		  /* 821AB15Ch */ case   16:  		/* lwz R11, <#[R23 + 8]> */
		/* 821AB15Ch case   16:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821AB15Ch case   16:*/		return 0x821AB160;
		  /* 821AB160h */ case   17:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AB160h case   17:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AB160h case   17:*/		return 0x821AB164;
		  /* 821AB164h */ case   18:  		/* stw R11, <#[R23 + 8]> */
		/* 821AB164h case   18:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R23 + 0x00000008) );
		/* 821AB164h case   18:*/		return 0x821AB168;
	}
	return 0x821AB168;
} // Block from 821AB11Ch-821AB168h (19 instructions)

//////////////////////////////////////////////////////
// Block at 821AB168h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB168( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB168) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB168);
		  /* 821AB168h */ case    0:  		/* rlwinm. R11, R21, 0, 24, 31 */
		/* 821AB168h case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R21);
		/* 821AB168h case    0:*/		return 0x821AB16C;
		  /* 821AB16Ch */ case    1:  		/* bc 4, CR0_EQ, 16 */
		/* 821AB16Ch case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AB17C;  }
		/* 821AB16Ch case    1:*/		return 0x821AB170;
		  /* 821AB170h */ case    2:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AB170h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AB170h case    2:*/		return 0x821AB174;
		  /* 821AB174h */ case    3:  		/* rlwinm R11, R11, 0, 6, 4 */
		/* 821AB174h case    3:*/		cpu::op::rlwinm<0,0,6,4>(regs,&regs.R11,regs.R11);
		/* 821AB174h case    3:*/		return 0x821AB178;
		  /* 821AB178h */ case    4:  		/* stw R11, <#[R25 + 8]> */
		/* 821AB178h case    4:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AB178h case    4:*/		return 0x821AB17C;
	}
	return 0x821AB17C;
} // Block from 821AB168h-821AB17Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB17Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB17C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB17C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB17C);
		  /* 821AB17Ch */ case    0:  		/* lwz R23, <#[R1 + 1236]> */
		/* 821AB17Ch case    0:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AB17Ch case    0:*/		return 0x821AB180;
		  /* 821AB180h */ case    1:  		/* addi R24, R25, 4 */
		/* 821AB180h case    1:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R25,0x4);
		/* 821AB180h case    1:*/		return 0x821AB184;
		  /* 821AB184h */ case    2:  		/* lwz R25, <#[R24]> */
		/* 821AB184h case    2:*/		cpu::mem::load32z( regs, &regs.R25, (uint32)(regs.R24 + 0x00000000) );
		/* 821AB184h case    2:*/		return 0x821AB188;
		  /* 821AB188h */ case    3:  		/* cmplwi CR6, R25, 0 */
		/* 821AB188h case    3:*/		cpu::op::cmplwi<6>(regs,regs.R25,0x00000000);
		/* 821AB188h case    3:*/		return 0x821AB18C;
		  /* 821AB18Ch */ case    4:  		/* bc 12, CR6_EQ, -1960 */
		/* 821AB18Ch case    4:*/		if ( regs.CR[6].eq ) { return 0x821AA9E4;  }
		/* 821AB18Ch case    4:*/		return 0x821AB190;
		  /* 821AB190h */ case    5:  		/* lwz R4, <#[R25 + 16]> */
		/* 821AB190h case    5:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R25 + 0x00000010) );
		/* 821AB190h case    5:*/		return 0x821AB194;
		  /* 821AB194h */ case    6:  		/* cmplwi CR6, R4, 0 */
		/* 821AB194h case    6:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AB194h case    6:*/		return 0x821AB198;
		  /* 821AB198h */ case    7:  		/* bc 12, CR6_EQ, 1004 */
		/* 821AB198h case    7:*/		if ( regs.CR[6].eq ) { return 0x821AB584;  }
		/* 821AB198h case    7:*/		return 0x821AB19C;
		  /* 821AB19Ch */ case    8:  		/* lwz R11, <#[R4 + 8]> */
		/* 821AB19Ch case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R4 + 0x00000008) );
		/* 821AB19Ch case    8:*/		return 0x821AB1A0;
		  /* 821AB1A0h */ case    9:  		/* rlwinm R10, R11, 25, 25, 31 */
		/* 821AB1A0h case    9:*/		cpu::op::rlwinm<0,25,25,31>(regs,&regs.R10,regs.R11);
		/* 821AB1A0h case    9:*/		return 0x821AB1A4;
		  /* 821AB1A4h */ case   10:  		/* cmplwi CR6, R10, 1 */
		/* 821AB1A4h case   10:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000001);
		/* 821AB1A4h case   10:*/		return 0x821AB1A8;
		  /* 821AB1A8h */ case   11:  		/* bc 12, CR6_EQ, 980 */
		/* 821AB1A8h case   11:*/		if ( regs.CR[6].eq ) { return 0x821AB57C;  }
		/* 821AB1A8h case   11:*/		return 0x821AB1AC;
		  /* 821AB1ACh */ case   12:  		/* cmplwi CR6, R10, 18 */
		/* 821AB1ACh case   12:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000012);
		/* 821AB1ACh case   12:*/		return 0x821AB1B0;
		  /* 821AB1B0h */ case   13:  		/* bc 12, CR6_EQ, 972 */
		/* 821AB1B0h case   13:*/		if ( regs.CR[6].eq ) { return 0x821AB57C;  }
		/* 821AB1B0h case   13:*/		return 0x821AB1B4;
		  /* 821AB1B4h */ case   14:  		/* cmplwi CR6, R10, 110 */
		/* 821AB1B4h case   14:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x0000006E);
		/* 821AB1B4h case   14:*/		return 0x821AB1B8;
		  /* 821AB1B8h */ case   15:  		/* bc 4, CR6_EQ, 972 */
		/* 821AB1B8h case   15:*/		if ( !regs.CR[6].eq ) { return 0x821AB584;  }
		/* 821AB1B8h case   15:*/		return 0x821AB1BC;
		  /* 821AB1BCh */ case   16:  		/* rlwinm. R10, R11, 13, 29, 31 */
		/* 821AB1BCh case   16:*/		cpu::op::rlwinm<1,13,29,31>(regs,&regs.R10,regs.R11);
		/* 821AB1BCh case   16:*/		return 0x821AB1C0;
		  /* 821AB1C0h */ case   17:  		/* li R26, 0 */
		/* 821AB1C0h case   17:*/		cpu::op::li<0>(regs,&regs.R26,0x0);
		/* 821AB1C0h case   17:*/		return 0x821AB1C4;
		  /* 821AB1C4h */ case   18:  		/* bc 12, CR0_EQ, 36 */
		/* 821AB1C4h case   18:*/		if ( regs.CR[0].eq ) { return 0x821AB1E8;  }
		/* 821AB1C4h case   18:*/		return 0x821AB1C8;
		  /* 821AB1C8h */ case   19:  		/* addi R11, R4, 44 */
		/* 821AB1C8h case   19:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R4,0x2C);
		/* 821AB1C8h case   19:*/		return 0x821AB1CC;
		  /* 821AB1CCh */ case   20:  		/* lwz R9, <#[R11]> */
		/* 821AB1CCh case   20:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB1CCh case   20:*/		return 0x821AB1D0;
		  /* 821AB1D0h */ case   21:  		/* cmplw CR6, R9, R25 */
		/* 821AB1D0h case   21:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R25);
		/* 821AB1D0h case   21:*/		return 0x821AB1D4;
		  /* 821AB1D4h */ case   22:  		/* bc 12, CR6_EQ, 20 */
		/* 821AB1D4h case   22:*/		if ( regs.CR[6].eq ) { return 0x821AB1E8;  }
		/* 821AB1D4h case   22:*/		return 0x821AB1D8;
		  /* 821AB1D8h */ case   23:  		/* addi R26, R26, 1 */
		/* 821AB1D8h case   23:*/		cpu::op::addi<0>(regs,&regs.R26,regs.R26,0x1);
		/* 821AB1D8h case   23:*/		return 0x821AB1DC;
		  /* 821AB1DCh */ case   24:  		/* addi R11, R11, 4 */
		/* 821AB1DCh case   24:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R11,0x4);
		/* 821AB1DCh case   24:*/		return 0x821AB1E0;
		  /* 821AB1E0h */ case   25:  		/* cmplw CR6, R26, R10 */
		/* 821AB1E0h case   25:*/		cpu::op::cmplw<6>(regs,regs.R26,regs.R10);
		/* 821AB1E0h case   25:*/		return 0x821AB1E4;
		  /* 821AB1E4h */ case   26:  		/* bc 12, CR6_LT, -24 */
		/* 821AB1E4h case   26:*/		if ( regs.CR[6].lt ) { return 0x821AB1CC;  }
		/* 821AB1E4h case   26:*/		return 0x821AB1E8;
	}
	return 0x821AB1E8;
} // Block from 821AB17Ch-821AB1E8h (27 instructions)

//////////////////////////////////////////////////////
// Block at 821AB1E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB1E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB1E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB1E8);
		  /* 821AB1E8h */ case    0:  		/* addi R27, R4, 4 */
		/* 821AB1E8h case    0:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R4,0x4);
		/* 821AB1E8h case    0:*/		return 0x821AB1EC;
		  /* 821AB1ECh */ case    1:  		/* lwz R30, <#[R27]> */
		/* 821AB1ECh case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R27 + 0x00000000) );
		/* 821AB1ECh case    1:*/		return 0x821AB1F0;
		  /* 821AB1F0h */ case    2:  		/* cmplwi CR6, R30, 0 */
		/* 821AB1F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R30,0x00000000);
		/* 821AB1F0h case    2:*/		return 0x821AB1F4;
		  /* 821AB1F4h */ case    3:  		/* bc 12, CR6_EQ, 912 */
		/* 821AB1F4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AB584;  }
		/* 821AB1F4h case    3:*/		return 0x821AB1F8;
		  /* 821AB1F8h */ case    4:  		/* lwz R28, <#[R30 + 16]> */
		/* 821AB1F8h case    4:*/		cpu::mem::load32z( regs, &regs.R28, (uint32)(regs.R30 + 0x00000010) );
		/* 821AB1F8h case    4:*/		return 0x821AB1FC;
		  /* 821AB1FCh */ case    5:  		/* cmplwi CR6, R28, 0 */
		/* 821AB1FCh case    5:*/		cpu::op::cmplwi<6>(regs,regs.R28,0x00000000);
		/* 821AB1FCh case    5:*/		return 0x821AB200;
		  /* 821AB200h */ case    6:  		/* bc 12, CR6_EQ, 96 */
		/* 821AB200h case    6:*/		if ( regs.CR[6].eq ) { return 0x821AB260;  }
		/* 821AB200h case    6:*/		return 0x821AB204;
		  /* 821AB204h */ case    7:  		/* lwz R11, <#[R28 + 8]> */
		/* 821AB204h case    7:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000008) );
		/* 821AB204h case    7:*/		return 0x821AB208;
		  /* 821AB208h */ case    8:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AB208h case    8:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AB208h case    8:*/		return 0x821AB20C;
		  /* 821AB20Ch */ case    9:  		/* cmplwi CR6, R11, 128 */
		/* 821AB20Ch case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000080);
		/* 821AB20Ch case    9:*/		return 0x821AB210;
		  /* 821AB210h */ case   10:  		/* bc 4, CR6_EQ, 80 */
		/* 821AB210h case   10:*/		if ( !regs.CR[6].eq ) { return 0x821AB260;  }
		/* 821AB210h case   10:*/		return 0x821AB214;
		  /* 821AB214h */ case   11:  		/* lwz R11, <#[R30]> */
		/* 821AB214h case   11:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AB214h case   11:*/		return 0x821AB218;
		  /* 821AB218h */ case   12:  		/* li R29, 0 */
		/* 821AB218h case   12:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821AB218h case   12:*/		return 0x821AB21C;
		  /* 821AB21Ch */ case   13:  		/* rlwinm. R10, R11, 0, 4, 6 */
		/* 821AB21Ch case   13:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R10,regs.R11);
		/* 821AB21Ch case   13:*/		return 0x821AB220;
		  /* 821AB220h */ case   14:  		/* bc 12, CR0_EQ, 64 */
		/* 821AB220h case   14:*/		if ( regs.CR[0].eq ) { return 0x821AB260;  }
		/* 821AB220h case   14:*/		return 0x821AB224;
		  /* 821AB224h */ case   15:  		/* li R31, 0 */
		/* 821AB224h case   15:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AB224h case   15:*/		return 0x821AB228;
		  /* 821AB228h */ case   16:  		/* rlwinm R11, R11, 27, 24, 31 */
		/* 821AB228h case   16:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R11,regs.R11);
		/* 821AB228h case   16:*/		return 0x821AB22C;
		  /* 821AB22Ch */ case   17:  		/* srw R11, R11, R31 */
		/* 821AB22Ch case   17:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R11,regs.R31);
		/* 821AB22Ch case   17:*/		return 0x821AB230;
		  /* 821AB230h */ case   18:  		/* rlwinm R11, R11, 0, 30, 31 */
		/* 821AB230h case   18:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R11,regs.R11);
		/* 821AB230h case   18:*/		return 0x821AB234;
		  /* 821AB234h */ case   19:  		/* cmpw CR6, R11, R26 */
		/* 821AB234h case   19:*/		cpu::op::cmpw<6>(regs,regs.R11,regs.R26);
		/* 821AB234h case   19:*/		return 0x821AB238;
		  /* 821AB238h */ case   20:  		/* bc 4, CR6_EQ, 16 */
		/* 821AB238h case   20:*/		if ( !regs.CR[6].eq ) { return 0x821AB248;  }
		/* 821AB238h case   20:*/		return 0x821AB23C;
		  /* 821AB23Ch */ case   21:  		/* mr R4, R28 */
		/* 821AB23Ch case   21:*/		regs.R4 = regs.R28;
		/* 821AB23Ch case   21:*/		return 0x821AB240;
		  /* 821AB240h */ case   22:  		/* mr R3, R23 */
		/* 821AB240h case   22:*/		regs.R3 = regs.R23;
		/* 821AB240h case   22:*/		return 0x821AB244;
		  /* 821AB244h */ case   23:  		/* bl -42892 */
		/* 821AB244h case   23:*/		regs.LR = 0x821AB248; return 0x821A0AB8;
		/* 821AB244h case   23:*/		return 0x821AB248;
	}
	return 0x821AB248;
} // Block from 821AB1E8h-821AB248h (24 instructions)

//////////////////////////////////////////////////////
// Block at 821AB248h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB248( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB248) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB248);
		  /* 821AB248h */ case    0:  		/* lwz R11, <#[R30]> */
		/* 821AB248h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R30 + 0x00000000) );
		/* 821AB248h case    0:*/		return 0x821AB24C;
		  /* 821AB24Ch */ case    1:  		/* addi R29, R29, 1 */
		/* 821AB24Ch case    1:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821AB24Ch case    1:*/		return 0x821AB250;
		  /* 821AB250h */ case    2:  		/* addi R31, R31, 2 */
		/* 821AB250h case    2:*/		cpu::op::addi<0>(regs,&regs.R31,regs.R31,0x2);
		/* 821AB250h case    2:*/		return 0x821AB254;
		  /* 821AB254h */ case    3:  		/* rlwinm R10, R11, 7, 29, 31 */
		/* 821AB254h case    3:*/		cpu::op::rlwinm<0,7,29,31>(regs,&regs.R10,regs.R11);
		/* 821AB254h case    3:*/		return 0x821AB258;
		  /* 821AB258h */ case    4:  		/* cmplw CR6, R29, R10 */
		/* 821AB258h case    4:*/		cpu::op::cmplw<6>(regs,regs.R29,regs.R10);
		/* 821AB258h case    4:*/		return 0x821AB25C;
		  /* 821AB25Ch */ case    5:  		/* bc 12, CR6_LT, -52 */
		/* 821AB25Ch case    5:*/		if ( regs.CR[6].lt ) { return 0x821AB228;  }
		/* 821AB25Ch case    5:*/		return 0x821AB260;
	}
	return 0x821AB260;
} // Block from 821AB248h-821AB260h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AB260h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB260( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB260) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB260);
		  /* 821AB260h */ case    0:  		/* lwz R11, <#[R27]> */
		/* 821AB260h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R27 + 0x00000000) );
		/* 821AB260h case    0:*/		return 0x821AB264;
		  /* 821AB264h */ case    1:  		/* cmplw CR6, R11, R30 */
		/* 821AB264h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R30);
		/* 821AB264h case    1:*/		return 0x821AB268;
		  /* 821AB268h */ case    2:  		/* bc 4, CR6_EQ, -124 */
		/* 821AB268h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AB1EC;  }
		/* 821AB268h case    2:*/		return 0x821AB26C;
		  /* 821AB26Ch */ case    3:  		/* addi R27, R30, 8 */
		/* 821AB26Ch case    3:*/		cpu::op::addi<0>(regs,&regs.R27,regs.R30,0x8);
		/* 821AB26Ch case    3:*/		return 0x821AB270;
		  /* 821AB270h */ case    4:  		/* b -132 */
		/* 821AB270h case    4:*/		return 0x821AB1EC;
		/* 821AB270h case    4:*/		return 0x821AB274;
	}
	return 0x821AB274;
} // Block from 821AB260h-821AB274h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB274h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB274( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB274) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB274);
		  /* 821AB274h */ case    0:  		/* cmplwi CR6, R10, 18 */
		/* 821AB274h case    0:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000012);
		/* 821AB274h case    0:*/		return 0x821AB278;
		  /* 821AB278h */ case    1:  		/* bc 4, CR6_EQ, -252 */
		/* 821AB278h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AB17C;  }
		/* 821AB278h case    1:*/		return 0x821AB27C;
		  /* 821AB27Ch */ case    2:  		/* lwz R11, <#[R7]> */
		/* 821AB27Ch case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R7 + 0x00000000) );
		/* 821AB27Ch case    2:*/		return 0x821AB280;
		  /* 821AB280h */ case    3:  		/* rlwinm. R11, R11, 0, 27, 31 */
		/* 821AB280h case    3:*/		cpu::op::rlwinm<1,0,27,31>(regs,&regs.R11,regs.R11);
		/* 821AB280h case    3:*/		return 0x821AB284;
		  /* 821AB284h */ case    4:  		/* bc 4, CR0_EQ, -264 */
		/* 821AB284h case    4:*/		if ( !regs.CR[0].eq ) { return 0x821AB17C;  }
		/* 821AB284h case    4:*/		return 0x821AB288;
		  /* 821AB288h */ case    5:  		/* lwz R10, <#[R23 + 4]> */
		/* 821AB288h case    5:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R23 + 0x00000004) );
		/* 821AB288h case    5:*/		return 0x821AB28C;
		  /* 821AB28Ch */ case    6:  		/* cmplwi CR6, R10, 0 */
		/* 821AB28Ch case    6:*/		cpu::op::cmplwi<6>(regs,regs.R10,0x00000000);
		/* 821AB28Ch case    6:*/		return 0x821AB290;
		  /* 821AB290h */ case    7:  		/* bc 12, CR6_EQ, 40 */
		/* 821AB290h case    7:*/		if ( regs.CR[6].eq ) { return 0x821AB2B8;  }
		/* 821AB290h case    7:*/		return 0x821AB294;
		  /* 821AB294h */ case    8:  		/* lwz R11, <#[R10 + 16]> */
		/* 821AB294h case    8:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R10 + 0x00000010) );
		/* 821AB294h case    8:*/		return 0x821AB298;
		  /* 821AB298h */ case    9:  		/* cmplwi CR6, R11, 0 */
		/* 821AB298h case    9:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AB298h case    9:*/		return 0x821AB29C;
		  /* 821AB29Ch */ case   10:  		/* bc 12, CR6_EQ, 12 */
		/* 821AB29Ch case   10:*/		if ( regs.CR[6].eq ) { return 0x821AB2A8;  }
		/* 821AB29Ch case   10:*/		return 0x821AB2A0;
		  /* 821AB2A0h */ case   11:  		/* cmplw CR6, R11, R25 */
		/* 821AB2A0h case   11:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821AB2A0h case   11:*/		return 0x821AB2A4;
		  /* 821AB2A4h */ case   12:  		/* bc 4, CR6_EQ, 12 */
		/* 821AB2A4h case   12:*/		if ( !regs.CR[6].eq ) { return 0x821AB2B0;  }
		/* 821AB2A4h case   12:*/		return 0x821AB2A8;
	}
	return 0x821AB2A8;
} // Block from 821AB274h-821AB2A8h (13 instructions)

//////////////////////////////////////////////////////
// Block at 821AB2A8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB2A8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB2A8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB2A8);
		  /* 821AB2A8h */ case    0:  		/* lwz R10, <#[R10 + 8]> */
		/* 821AB2A8h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R10 + 0x00000008) );
		/* 821AB2A8h case    0:*/		return 0x821AB2AC;
		  /* 821AB2ACh */ case    1:  		/* b -32 */
		/* 821AB2ACh case    1:*/		return 0x821AB28C;
		/* 821AB2ACh case    1:*/		return 0x821AB2B0;
	}
	return 0x821AB2B0;
} // Block from 821AB2A8h-821AB2B0h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AB2B0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB2B0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB2B0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB2B0);
		  /* 821AB2B0h */ case    0:  		/* li R11, 1 */
		/* 821AB2B0h case    0:*/		cpu::op::li<0>(regs,&regs.R11,0x1);
		/* 821AB2B0h case    0:*/		return 0x821AB2B4;
		  /* 821AB2B4h */ case    1:  		/* b 8 */
		/* 821AB2B4h case    1:*/		return 0x821AB2BC;
		/* 821AB2B4h case    1:*/		return 0x821AB2B8;
	}
	return 0x821AB2B8;
} // Block from 821AB2B0h-821AB2B8h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AB2B8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB2B8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB2B8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB2B8);
		  /* 821AB2B8h */ case    0:  		/* mr R11, R30 */
		/* 821AB2B8h case    0:*/		regs.R11 = regs.R30;
		/* 821AB2B8h case    0:*/		return 0x821AB2BC;
	}
	return 0x821AB2BC;
} // Block from 821AB2B8h-821AB2BCh (1 instructions)

//////////////////////////////////////////////////////
// Block at 821AB2BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB2BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB2BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB2BC);
		  /* 821AB2BCh */ case    0:  		/* rlwinm. R11, R11, 0, 24, 31 */
		/* 821AB2BCh case    0:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R11);
		/* 821AB2BCh case    0:*/		return 0x821AB2C0;
		  /* 821AB2C0h */ case    1:  		/* bc 4, CR0_EQ, -324 */
		/* 821AB2C0h case    1:*/		if ( !regs.CR[0].eq ) { return 0x821AB17C;  }
		/* 821AB2C0h case    1:*/		return 0x821AB2C4;
		  /* 821AB2C4h */ case    2:  		/* addi R6, R1, 240 */
		/* 821AB2C4h case    2:*/		cpu::op::addi<0>(regs,&regs.R6,regs.R1,0xF0);
		/* 821AB2C4h case    2:*/		return 0x821AB2C8;
		  /* 821AB2C8h */ case    3:  		/* lwz R31, <#[R25 + 44]> */
		/* 821AB2C8h case    3:*/		cpu::mem::load32z( regs, &regs.R31, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AB2C8h case    3:*/		return 0x821AB2CC;
		  /* 821AB2CCh */ case    4:  		/* addi R5, R1, 120 */
		/* 821AB2CCh case    4:*/		cpu::op::addi<0>(regs,&regs.R5,regs.R1,0x78);
		/* 821AB2CCh case    4:*/		return 0x821AB2D0;
		  /* 821AB2D0h */ case    5:  		/* lwz R30, <#[R25 + 48]> */
		/* 821AB2D0h case    5:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R25 + 0x00000030) );
		/* 821AB2D0h case    5:*/		return 0x821AB2D4;
		  /* 821AB2D4h */ case    6:  		/* addi R4, R1, 184 */
		/* 821AB2D4h case    6:*/		cpu::op::addi<0>(regs,&regs.R4,regs.R1,0xB8);
		/* 821AB2D4h case    6:*/		return 0x821AB2D8;
		  /* 821AB2D8h */ case    7:  		/* stw R6, <#[R1 + 100]> */
		/* 821AB2D8h case    7:*/		cpu::mem::store32( regs, regs.R6, (uint32)(regs.R1 + 0x00000064) );
		/* 821AB2D8h case    7:*/		return 0x821AB2DC;
		  /* 821AB2DCh */ case    8:  		/* addi R11, R1, 208 */
		/* 821AB2DCh case    8:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xD0);
		/* 821AB2DCh case    8:*/		return 0x821AB2E0;
		  /* 821AB2E0h */ case    9:  		/* stw R5, <#[R1 + 92]> */
		/* 821AB2E0h case    9:*/		cpu::mem::store32( regs, regs.R5, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AB2E0h case    9:*/		return 0x821AB2E4;
		  /* 821AB2E4h */ case   10:  		/* stw R4, <#[R1 + 84]> */
		/* 821AB2E4h case   10:*/		cpu::mem::store32( regs, regs.R4, (uint32)(regs.R1 + 0x00000054) );
		/* 821AB2E4h case   10:*/		return 0x821AB2E8;
		  /* 821AB2E8h */ case   11:  		/* mr R10, R25 */
		/* 821AB2E8h case   11:*/		regs.R10 = regs.R25;
		/* 821AB2E8h case   11:*/		return 0x821AB2EC;
		  /* 821AB2ECh */ case   12:  		/* mr R7, R23 */
		/* 821AB2ECh case   12:*/		regs.R7 = regs.R23;
		/* 821AB2ECh case   12:*/		return 0x821AB2F0;
		  /* 821AB2F0h */ case   13:  		/* lwz R8, <#[R23 + 44]> */
		/* 821AB2F0h case   13:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R23 + 0x0000002C) );
		/* 821AB2F0h case   13:*/		return 0x821AB2F4;
		  /* 821AB2F4h */ case   14:  		/* mr R6, R30 */
		/* 821AB2F4h case   14:*/		regs.R6 = regs.R30;
		/* 821AB2F4h case   14:*/		return 0x821AB2F8;
		  /* 821AB2F8h */ case   15:  		/* lwz R9, <#[R23 + 48]> */
		/* 821AB2F8h case   15:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R23 + 0x00000030) );
		/* 821AB2F8h case   15:*/		return 0x821AB2FC;
		  /* 821AB2FCh */ case   16:  		/* mr R5, R31 */
		/* 821AB2FCh case   16:*/		regs.R5 = regs.R31;
		/* 821AB2FCh case   16:*/		return 0x821AB300;
		  /* 821AB300h */ case   17:  		/* stw R11, <#[R1 + 108]> */
		/* 821AB300h case   17:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821AB300h case   17:*/		return 0x821AB304;
		  /* 821AB304h */ case   18:  		/* mr R4, R25 */
		/* 821AB304h case   18:*/		regs.R4 = regs.R25;
		/* 821AB304h case   18:*/		return 0x821AB308;
		  /* 821AB308h */ case   19:  		/* mr R3, R20 */
		/* 821AB308h case   19:*/		regs.R3 = regs.R20;
		/* 821AB308h case   19:*/		return 0x821AB30C;
		  /* 821AB30Ch */ case   20:  		/* bl -43988 */
		/* 821AB30Ch case   20:*/		regs.LR = 0x821AB310; return 0x821A0738;
		/* 821AB30Ch case   20:*/		return 0x821AB310;
		  /* 821AB310h */ case   21:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AB310h case   21:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AB310h case   21:*/		return 0x821AB314;
		  /* 821AB314h */ case   22:  		/* bc 12, CR0_EQ, -408 */
		/* 821AB314h case   22:*/		if ( regs.CR[0].eq ) { return 0x821AB17C;  }
		/* 821AB314h case   22:*/		return 0x821AB318;
		  /* 821AB318h */ case   23:  		/* lwz R11, <#[R1 + 208]> */
		/* 821AB318h case   23:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000D0) );
		/* 821AB318h case   23:*/		return 0x821AB31C;
		  /* 821AB31Ch */ case   24:  		/* lwz R9, <#[R1 + 240]> */
		/* 821AB31Ch case   24:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x000000F0) );
		/* 821AB31Ch case   24:*/		return 0x821AB320;
		  /* 821AB320h */ case   25:  		/* rlwinm R10, R11, 28, 25, 31 */
		/* 821AB320h case   25:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R10,regs.R11);
		/* 821AB320h case   25:*/		return 0x821AB324;
		  /* 821AB324h */ case   26:  		/* lwz R8, <#[R20 + 664]> */
		/* 821AB324h case   26:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R20 + 0x00000298) );
		/* 821AB324h case   26:*/		return 0x821AB328;
		  /* 821AB328h */ case   27:  		/* rlwinm R11, R9, 28, 25, 31 */
		/* 821AB328h case   27:*/		cpu::op::rlwinm<0,28,25,31>(regs,&regs.R11,regs.R9);
		/* 821AB328h case   27:*/		return 0x821AB32C;
		  /* 821AB32Ch */ case   28:  		/* add R11, R10, R11 */
		/* 821AB32Ch case   28:*/		cpu::op::add<0>(regs,&regs.R11,regs.R10,regs.R11);
		/* 821AB32Ch case   28:*/		return 0x821AB330;
		  /* 821AB330h */ case   29:  		/* cmplw CR6, R11, R8 */
		/* 821AB330h case   29:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R8);
		/* 821AB330h case   29:*/		return 0x821AB334;
		  /* 821AB334h */ case   30:  		/* bc 12, CR6_GT, -440 */
		/* 821AB334h case   30:*/		if ( regs.CR[6].gt ) { return 0x821AB17C;  }
		/* 821AB334h case   30:*/		return 0x821AB338;
		  /* 821AB338h */ case   31:  		/* addi R11, R1, 208 */
		/* 821AB338h case   31:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xD0);
		/* 821AB338h case   31:*/		return 0x821AB33C;
		  /* 821AB33Ch */ case   32:  		/* lwz R9, <#[R1 + 120]> */
		/* 821AB33Ch case   32:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R1 + 0x00000078) );
		/* 821AB33Ch case   32:*/		return 0x821AB340;
		  /* 821AB340h */ case   33:  		/* addi R10, R1, 240 */
		/* 821AB340h case   33:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R1,0xF0);
		/* 821AB340h case   33:*/		return 0x821AB344;
		  /* 821AB344h */ case   34:  		/* lwz R8, <#[R1 + 184]> */
		/* 821AB344h case   34:*/		cpu::mem::load32z( regs, &regs.R8, (uint32)(regs.R1 + 0x000000B8) );
		/* 821AB344h case   34:*/		return 0x821AB348;
		  /* 821AB348h */ case   35:  		/* stw R11, <#[R1 + 108]> */
		/* 821AB348h case   35:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x0000006C) );
		/* 821AB348h case   35:*/		return 0x821AB34C;
		  /* 821AB34Ch */ case   36:  		/* addi R7, R1, 120 */
		/* 821AB34Ch case   36:*/		cpu::op::addi<0>(regs,&regs.R7,regs.R1,0x78);
		/* 821AB34Ch case   36:*/		return 0x821AB350;
		  /* 821AB350h */ case   37:  		/* addi R11, R1, 184 */
		/* 821AB350h case   37:*/		cpu::op::addi<0>(regs,&regs.R11,regs.R1,0xB8);
		/* 821AB350h case   37:*/		return 0x821AB354;
		  /* 821AB354h */ case   38:  		/* stw R10, <#[R1 + 100]> */
		/* 821AB354h case   38:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R1 + 0x00000064) );
		/* 821AB354h case   38:*/		return 0x821AB358;
		  /* 821AB358h */ case   39:  		/* stw R7, <#[R1 + 92]> */
		/* 821AB358h case   39:*/		cpu::mem::store32( regs, regs.R7, (uint32)(regs.R1 + 0x0000005C) );
		/* 821AB358h case   39:*/		return 0x821AB35C;
		  /* 821AB35Ch */ case   40:  		/* mr R10, R25 */
		/* 821AB35Ch case   40:*/		regs.R10 = regs.R25;
		/* 821AB35Ch case   40:*/		return 0x821AB360;
		  /* 821AB360h */ case   41:  		/* stw R11, <#[R1 + 84]> */
		/* 821AB360h case   41:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R1 + 0x00000054) );
		/* 821AB360h case   41:*/		return 0x821AB364;
		  /* 821AB364h */ case   42:  		/* mr R7, R23 */
		/* 821AB364h case   42:*/		regs.R7 = regs.R23;
		/* 821AB364h case   42:*/		return 0x821AB368;
		  /* 821AB368h */ case   43:  		/* mr R6, R30 */
		/* 821AB368h case   43:*/		regs.R6 = regs.R30;
		/* 821AB368h case   43:*/		return 0x821AB36C;
		  /* 821AB36Ch */ case   44:  		/* mr R5, R31 */
		/* 821AB36Ch case   44:*/		regs.R5 = regs.R31;
		/* 821AB36Ch case   44:*/		return 0x821AB370;
		  /* 821AB370h */ case   45:  		/* mr R4, R25 */
		/* 821AB370h case   45:*/		regs.R4 = regs.R25;
		/* 821AB370h case   45:*/		return 0x821AB374;
		  /* 821AB374h */ case   46:  		/* mr R3, R20 */
		/* 821AB374h case   46:*/		regs.R3 = regs.R20;
		/* 821AB374h case   46:*/		return 0x821AB378;
		  /* 821AB378h */ case   47:  		/* bl -18320 */
		/* 821AB378h case   47:*/		regs.LR = 0x821AB37C; return 0x821A6BE8;
		/* 821AB378h case   47:*/		return 0x821AB37C;
		  /* 821AB37Ch */ case   48:  		/* rlwinm. R11, R3, 0, 24, 31 */
		/* 821AB37Ch case   48:*/		cpu::op::rlwinm<1,0,24,31>(regs,&regs.R11,regs.R3);
		/* 821AB37Ch case   48:*/		return 0x821AB380;
		  /* 821AB380h */ case   49:  		/* bc 12, CR0_EQ, -516 */
		/* 821AB380h case   49:*/		if ( regs.CR[0].eq ) { return 0x821AB17C;  }
		/* 821AB380h case   49:*/		return 0x821AB384;
		  /* 821AB384h */ case   50:  		/* mr R5, R25 */
		/* 821AB384h case   50:*/		regs.R5 = regs.R25;
		/* 821AB384h case   50:*/		return 0x821AB388;
		  /* 821AB388h */ case   51:  		/* lwz R7, <#[R1 + 120]> */
		/* 821AB388h case   51:*/		cpu::mem::load32z( regs, &regs.R7, (uint32)(regs.R1 + 0x00000078) );
		/* 821AB388h case   51:*/		return 0x821AB38C;
		  /* 821AB38Ch */ case   52:  		/* li R4, 0 */
		/* 821AB38Ch case   52:*/		cpu::op::li<0>(regs,&regs.R4,0x0);
		/* 821AB38Ch case   52:*/		return 0x821AB390;
		  /* 821AB390h */ case   53:  		/* lwz R6, <#[R1 + 184]> */
		/* 821AB390h case   53:*/		cpu::mem::load32z( regs, &regs.R6, (uint32)(regs.R1 + 0x000000B8) );
		/* 821AB390h case   53:*/		return 0x821AB394;
		  /* 821AB394h */ case   54:  		/* mr R3, R20 */
		/* 821AB394h case   54:*/		regs.R3 = regs.R20;
		/* 821AB394h case   54:*/		return 0x821AB398;
		  /* 821AB398h */ case   55:  		/* bl -52896 */
		/* 821AB398h case   55:*/		regs.LR = 0x821AB39C; return 0x8219E4F8;
		/* 821AB398h case   55:*/		return 0x821AB39C;
		  /* 821AB39Ch */ case   56:  		/* lwz R4, <#[R1 + 248]> */
		/* 821AB39Ch case   56:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000F8) );
		/* 821AB39Ch case   56:*/		return 0x821AB3A0;
		  /* 821AB3A0h */ case   57:  		/* mr R31, R3 */
		/* 821AB3A0h case   57:*/		regs.R31 = regs.R3;
		/* 821AB3A0h case   57:*/		return 0x821AB3A4;
		  /* 821AB3A4h */ case   58:  		/* cmplwi CR6, R4, 0 */
		/* 821AB3A4h case   58:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AB3A4h case   58:*/		return 0x821AB3A8;
		  /* 821AB3A8h */ case   59:  		/* bc 12, CR6_EQ, 28 */
		/* 821AB3A8h case   59:*/		if ( regs.CR[6].eq ) { return 0x821AB3C4;  }
		/* 821AB3A8h case   59:*/		return 0x821AB3AC;
		  /* 821AB3ACh */ case   60:  		/* li R5, 0 */
		/* 821AB3ACh case   60:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AB3ACh case   60:*/		return 0x821AB3B0;
		  /* 821AB3B0h */ case   61:  		/* mr R3, R20 */
		/* 821AB3B0h case   61:*/		regs.R3 = regs.R20;
		/* 821AB3B0h case   61:*/		return 0x821AB3B4;
		  /* 821AB3B4h */ case   62:  		/* bl -240740 */
		/* 821AB3B4h case   62:*/		regs.LR = 0x821AB3B8; return 0x82170750;
		/* 821AB3B4h case   62:*/		return 0x821AB3B8;
		  /* 821AB3B8h */ case   63:  		/* mr R4, R3 */
		/* 821AB3B8h case   63:*/		regs.R4 = regs.R3;
		/* 821AB3B8h case   63:*/		return 0x821AB3BC;
		  /* 821AB3BCh */ case   64:  		/* mr R3, R31 */
		/* 821AB3BCh case   64:*/		regs.R3 = regs.R31;
		/* 821AB3BCh case   64:*/		return 0x821AB3C0;
		  /* 821AB3C0h */ case   65:  		/* bl -209400 */
		/* 821AB3C0h case   65:*/		regs.LR = 0x821AB3C4; return 0x821781C8;
		/* 821AB3C0h case   65:*/		return 0x821AB3C4;
	}
	return 0x821AB3C4;
} // Block from 821AB2BCh-821AB3C4h (66 instructions)

//////////////////////////////////////////////////////
// Block at 821AB3C4h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB3C4( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB3C4) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB3C4);
		  /* 821AB3C4h */ case    0:  		/* lwz R4, <#[R1 + 216]> */
		/* 821AB3C4h case    0:*/		cpu::mem::load32z( regs, &regs.R4, (uint32)(regs.R1 + 0x000000D8) );
		/* 821AB3C4h case    0:*/		return 0x821AB3C8;
		  /* 821AB3C8h */ case    1:  		/* cmplwi CR6, R4, 0 */
		/* 821AB3C8h case    1:*/		cpu::op::cmplwi<6>(regs,regs.R4,0x00000000);
		/* 821AB3C8h case    1:*/		return 0x821AB3CC;
		  /* 821AB3CCh */ case    2:  		/* bc 12, CR6_EQ, 28 */
		/* 821AB3CCh case    2:*/		if ( regs.CR[6].eq ) { return 0x821AB3E8;  }
		/* 821AB3CCh case    2:*/		return 0x821AB3D0;
		  /* 821AB3D0h */ case    3:  		/* li R5, 0 */
		/* 821AB3D0h case    3:*/		cpu::op::li<0>(regs,&regs.R5,0x0);
		/* 821AB3D0h case    3:*/		return 0x821AB3D4;
		  /* 821AB3D4h */ case    4:  		/* mr R3, R20 */
		/* 821AB3D4h case    4:*/		regs.R3 = regs.R20;
		/* 821AB3D4h case    4:*/		return 0x821AB3D8;
		  /* 821AB3D8h */ case    5:  		/* bl -240776 */
		/* 821AB3D8h case    5:*/		regs.LR = 0x821AB3DC; return 0x82170750;
		/* 821AB3D8h case    5:*/		return 0x821AB3DC;
		  /* 821AB3DCh */ case    6:  		/* mr R4, R3 */
		/* 821AB3DCh case    6:*/		regs.R4 = regs.R3;
		/* 821AB3DCh case    6:*/		return 0x821AB3E0;
		  /* 821AB3E0h */ case    7:  		/* mr R3, R31 */
		/* 821AB3E0h case    7:*/		regs.R3 = regs.R31;
		/* 821AB3E0h case    7:*/		return 0x821AB3E4;
		  /* 821AB3E4h */ case    8:  		/* bl -209436 */
		/* 821AB3E4h case    8:*/		regs.LR = 0x821AB3E8; return 0x821781C8;
		/* 821AB3E4h case    8:*/		return 0x821AB3E8;
	}
	return 0x821AB3E8;
} // Block from 821AB3C4h-821AB3E8h (9 instructions)

//////////////////////////////////////////////////////
// Block at 821AB3E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB3E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB3E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB3E8);
		  /* 821AB3E8h */ case    0:  		/* mr R8, R25 */
		/* 821AB3E8h case    0:*/		regs.R8 = regs.R25;
		/* 821AB3E8h case    0:*/		return 0x821AB3EC;
		  /* 821AB3ECh */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821AB3ECh case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821AB3ECh case    1:*/		return 0x821AB3F0;
		  /* 821AB3F0h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821AB3F0h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AB3F0h case    2:*/		return 0x821AB3F4;
		  /* 821AB3F4h */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821AB3F4h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AB45C;  }
		/* 821AB3F4h case    3:*/		return 0x821AB3F8;
		  /* 821AB3F8h */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821AB3F8h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB3F8h case    4:*/		return 0x821AB3FC;
		  /* 821AB3FCh */ case    5:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821AB3FCh case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821AB3FCh case    5:*/		return 0x821AB400;
		  /* 821AB400h */ case    6:  		/* bc 4, CR0_EQ, 72 */
		/* 821AB400h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AB448;  }
		/* 821AB400h case    6:*/		return 0x821AB404;
		  /* 821AB404h */ case    7:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821AB404h case    7:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821AB404h case    7:*/		return 0x821AB408;
		  /* 821AB408h */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821AB408h case    8:*/		if ( regs.CR[0].eq ) { return 0x821AB414;  }
		/* 821AB408h case    8:*/		return 0x821AB40C;
		  /* 821AB40Ch */ case    9:  		/* rlwinm. R10, R10, 0, 7, 18 */
		/* 821AB40Ch case    9:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R10);
		/* 821AB40Ch case    9:*/		return 0x821AB410;
		  /* 821AB410h */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 821AB410h case   10:*/		if ( regs.CR[0].eq ) { return 0x821AB448;  }
		/* 821AB410h case   10:*/		return 0x821AB414;
	}
	return 0x821AB414;
} // Block from 821AB3E8h-821AB414h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AB414h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB414( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB414) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB414);
		  /* 821AB414h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AB414h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AB414h case    0:*/		return 0x821AB418;
		  /* 821AB418h */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821AB418h case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB418h case    1:*/		return 0x821AB41C;
		  /* 821AB41Ch */ case    2:  		/* b 12 */
		/* 821AB41Ch case    2:*/		return 0x821AB428;
		/* 821AB41Ch case    2:*/		return 0x821AB420;
		  /* 821AB420h */ case    3:  		/* addi R10, R9, 4 */
		/* 821AB420h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821AB420h case    3:*/		return 0x821AB424;
		  /* 821AB424h */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821AB424h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821AB424h case    4:*/		return 0x821AB428;
	}
	return 0x821AB428;
} // Block from 821AB414h-821AB428h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB428h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB428( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB428) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB428);
		  /* 821AB428h */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AB428h case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AB428h case    0:*/		return 0x821AB42C;
		  /* 821AB42Ch */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AB42Ch case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AB420;  }
		/* 821AB42Ch case    1:*/		return 0x821AB430;
		  /* 821AB430h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821AB430h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AB430h case    2:*/		return 0x821AB434;
		  /* 821AB434h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AB434h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB434h case    3:*/		return 0x821AB438;
		  /* 821AB438h */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821AB438h case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821AB438h case    4:*/		return 0x821AB43C;
		  /* 821AB43Ch */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821AB43Ch case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AB43Ch case    5:*/		return 0x821AB440;
		  /* 821AB440h */ case    6:  		/* stw R11, <#[R31]> */
		/* 821AB440h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AB440h case    6:*/		return 0x821AB444;
		  /* 821AB444h */ case    7:  		/* stw R31, <#[R11 + 16]> */
		/* 821AB444h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821AB444h case    7:*/		return 0x821AB448;
	}
	return 0x821AB448;
} // Block from 821AB428h-821AB448h (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AB448h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB448( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB448) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB448);
		  /* 821AB448h */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821AB448h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821AB448h case    0:*/		return 0x821AB44C;
		  /* 821AB44Ch */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821AB44Ch case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821AB44Ch case    1:*/		return 0x821AB450;
		  /* 821AB450h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821AB450h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AB3EC;  }
		/* 821AB450h case    2:*/		return 0x821AB454;
		  /* 821AB454h */ case    3:  		/* addi R8, R11, 4 */
		/* 821AB454h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821AB454h case    3:*/		return 0x821AB458;
		  /* 821AB458h */ case    4:  		/* b -108 */
		/* 821AB458h case    4:*/		return 0x821AB3EC;
		/* 821AB458h case    4:*/		return 0x821AB45C;
	}
	return 0x821AB45C;
} // Block from 821AB448h-821AB45Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB45Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB45C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB45C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB45C);
		  /* 821AB45Ch */ case    0:  		/* mr R8, R23 */
		/* 821AB45Ch case    0:*/		regs.R8 = regs.R23;
		/* 821AB45Ch case    0:*/		return 0x821AB460;
		  /* 821AB460h */ case    1:  		/* lwz R11, <#[R8]> */
		/* 821AB460h case    1:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R8 + 0x00000000) );
		/* 821AB460h case    1:*/		return 0x821AB464;
		  /* 821AB464h */ case    2:  		/* cmplwi CR6, R11, 0 */
		/* 821AB464h case    2:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00000000);
		/* 821AB464h case    2:*/		return 0x821AB468;
		  /* 821AB468h */ case    3:  		/* bc 12, CR6_EQ, 104 */
		/* 821AB468h case    3:*/		if ( regs.CR[6].eq ) { return 0x821AB4D0;  }
		/* 821AB468h case    3:*/		return 0x821AB46C;
		  /* 821AB46Ch */ case    4:  		/* lwz R10, <#[R11]> */
		/* 821AB46Ch case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000000) );
		/* 821AB46Ch case    4:*/		return 0x821AB470;
		  /* 821AB470h */ case    5:  		/* rlwinm. R9, R10, 0, 4, 6 */
		/* 821AB470h case    5:*/		cpu::op::rlwinm<1,0,4,6>(regs,&regs.R9,regs.R10);
		/* 821AB470h case    5:*/		return 0x821AB474;
		  /* 821AB474h */ case    6:  		/* bc 4, CR0_EQ, 72 */
		/* 821AB474h case    6:*/		if ( !regs.CR[0].eq ) { return 0x821AB4BC;  }
		/* 821AB474h case    6:*/		return 0x821AB478;
		  /* 821AB478h */ case    7:  		/* rlwinm. R9, R10, 2, 31, 31 */
		/* 821AB478h case    7:*/		cpu::op::rlwinm<1,2,31,31>(regs,&regs.R9,regs.R10);
		/* 821AB478h case    7:*/		return 0x821AB47C;
		  /* 821AB47Ch */ case    8:  		/* bc 12, CR0_EQ, 12 */
		/* 821AB47Ch case    8:*/		if ( regs.CR[0].eq ) { return 0x821AB488;  }
		/* 821AB47Ch case    8:*/		return 0x821AB480;
		  /* 821AB480h */ case    9:  		/* rlwinm. R10, R10, 0, 7, 18 */
		/* 821AB480h case    9:*/		cpu::op::rlwinm<1,0,7,18>(regs,&regs.R10,regs.R10);
		/* 821AB480h case    9:*/		return 0x821AB484;
		  /* 821AB484h */ case   10:  		/* bc 12, CR0_EQ, 56 */
		/* 821AB484h case   10:*/		if ( regs.CR[0].eq ) { return 0x821AB4BC;  }
		/* 821AB484h case   10:*/		return 0x821AB488;
	}
	return 0x821AB488;
} // Block from 821AB45Ch-821AB488h (11 instructions)

//////////////////////////////////////////////////////
// Block at 821AB488h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB488( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB488) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB488);
		  /* 821AB488h */ case    0:  		/* lwz R10, <#[R11 + 16]> */
		/* 821AB488h case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R11 + 0x00000010) );
		/* 821AB488h case    0:*/		return 0x821AB48C;
		  /* 821AB48Ch */ case    1:  		/* lwz R9, <#[R10]> */
		/* 821AB48Ch case    1:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB48Ch case    1:*/		return 0x821AB490;
		  /* 821AB490h */ case    2:  		/* b 12 */
		/* 821AB490h case    2:*/		return 0x821AB49C;
		/* 821AB490h case    2:*/		return 0x821AB494;
		  /* 821AB494h */ case    3:  		/* addi R10, R9, 4 */
		/* 821AB494h case    3:*/		cpu::op::addi<0>(regs,&regs.R10,regs.R9,0x4);
		/* 821AB494h case    3:*/		return 0x821AB498;
		  /* 821AB498h */ case    4:  		/* lwz R9, <#[R9 + 4]> */
		/* 821AB498h case    4:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R9 + 0x00000004) );
		/* 821AB498h case    4:*/		return 0x821AB49C;
	}
	return 0x821AB49C;
} // Block from 821AB488h-821AB49Ch (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB49Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB49C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB49C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB49C);
		  /* 821AB49Ch */ case    0:  		/* cmplw CR6, R9, R11 */
		/* 821AB49Ch case    0:*/		cpu::op::cmplw<6>(regs,regs.R9,regs.R11);
		/* 821AB49Ch case    0:*/		return 0x821AB4A0;
		  /* 821AB4A0h */ case    1:  		/* bc 4, CR6_EQ, -12 */
		/* 821AB4A0h case    1:*/		if ( !regs.CR[6].eq ) { return 0x821AB494;  }
		/* 821AB4A0h case    1:*/		return 0x821AB4A4;
		  /* 821AB4A4h */ case    2:  		/* lwz R9, <#[R11 + 4]> */
		/* 821AB4A4h case    2:*/		cpu::mem::load32z( regs, &regs.R9, (uint32)(regs.R11 + 0x00000004) );
		/* 821AB4A4h case    2:*/		return 0x821AB4A8;
		  /* 821AB4A8h */ case    3:  		/* stw R9, <#[R10]> */
		/* 821AB4A8h case    3:*/		cpu::mem::store32( regs, regs.R9, (uint32)(regs.R10 + 0x00000000) );
		/* 821AB4A8h case    3:*/		return 0x821AB4AC;
		  /* 821AB4ACh */ case    4:  		/* lwz R10, <#[R31]> */
		/* 821AB4ACh case    4:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R31 + 0x00000000) );
		/* 821AB4ACh case    4:*/		return 0x821AB4B0;
		  /* 821AB4B0h */ case    5:  		/* stw R10, <#[R11 + 4]> */
		/* 821AB4B0h case    5:*/		cpu::mem::store32( regs, regs.R10, (uint32)(regs.R11 + 0x00000004) );
		/* 821AB4B0h case    5:*/		return 0x821AB4B4;
		  /* 821AB4B4h */ case    6:  		/* stw R11, <#[R31]> */
		/* 821AB4B4h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000000) );
		/* 821AB4B4h case    6:*/		return 0x821AB4B8;
		  /* 821AB4B8h */ case    7:  		/* stw R31, <#[R11 + 16]> */
		/* 821AB4B8h case    7:*/		cpu::mem::store32( regs, regs.R31, (uint32)(regs.R11 + 0x00000010) );
		/* 821AB4B8h case    7:*/		return 0x821AB4BC;
	}
	return 0x821AB4BC;
} // Block from 821AB49Ch-821AB4BCh (8 instructions)

//////////////////////////////////////////////////////
// Block at 821AB4BCh
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB4BC( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB4BC) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB4BC);
		  /* 821AB4BCh */ case    0:  		/* lwz R10, <#[R8]> */
		/* 821AB4BCh case    0:*/		cpu::mem::load32z( regs, &regs.R10, (uint32)(regs.R8 + 0x00000000) );
		/* 821AB4BCh case    0:*/		return 0x821AB4C0;
		  /* 821AB4C0h */ case    1:  		/* cmplw CR6, R10, R11 */
		/* 821AB4C0h case    1:*/		cpu::op::cmplw<6>(regs,regs.R10,regs.R11);
		/* 821AB4C0h case    1:*/		return 0x821AB4C4;
		  /* 821AB4C4h */ case    2:  		/* bc 4, CR6_EQ, -100 */
		/* 821AB4C4h case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AB460;  }
		/* 821AB4C4h case    2:*/		return 0x821AB4C8;
		  /* 821AB4C8h */ case    3:  		/* addi R8, R11, 4 */
		/* 821AB4C8h case    3:*/		cpu::op::addi<0>(regs,&regs.R8,regs.R11,0x4);
		/* 821AB4C8h case    3:*/		return 0x821AB4CC;
		  /* 821AB4CCh */ case    4:  		/* b -108 */
		/* 821AB4CCh case    4:*/		return 0x821AB460;
		/* 821AB4CCh case    4:*/		return 0x821AB4D0;
	}
	return 0x821AB4D0;
} // Block from 821AB4BCh-821AB4D0h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB4D0h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB4D0( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB4D0) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB4D0);
		  /* 821AB4D0h */ case    0:  		/* lwz R11, <#[R1 + 240]> */
		/* 821AB4D0h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R1 + 0x000000F0) );
		/* 821AB4D0h case    0:*/		return 0x821AB4D4;
		  /* 821AB4D4h */ case    1:  		/* rlwinm. R5, R11, 17, 29, 31 */
		/* 821AB4D4h case    1:*/		cpu::op::rlwinm<1,17,29,31>(regs,&regs.R5,regs.R11);
		/* 821AB4D4h case    1:*/		return 0x821AB4D8;
		  /* 821AB4D8h */ case    2:  		/* bc 12, CR0_EQ, 16 */
		/* 821AB4D8h case    2:*/		if ( regs.CR[0].eq ) { return 0x821AB4E8;  }
		/* 821AB4D8h case    2:*/		return 0x821AB4DC;
		  /* 821AB4DCh */ case    3:  		/* mr R4, R31 */
		/* 821AB4DCh case    3:*/		regs.R4 = regs.R31;
		/* 821AB4DCh case    3:*/		return 0x821AB4E0;
		  /* 821AB4E0h */ case    4:  		/* mr R3, R20 */
		/* 821AB4E0h case    4:*/		regs.R3 = regs.R20;
		/* 821AB4E0h case    4:*/		return 0x821AB4E4;
		  /* 821AB4E4h */ case    5:  		/* bl -57668 */
		/* 821AB4E4h case    5:*/		regs.LR = 0x821AB4E8; return 0x8219D3A0;
		/* 821AB4E4h case    5:*/		return 0x821AB4E8;
	}
	return 0x821AB4E8;
} // Block from 821AB4D0h-821AB4E8h (6 instructions)

//////////////////////////////////////////////////////
// Block at 821AB4E8h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB4E8( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB4E8) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB4E8);
		  /* 821AB4E8h */ case    0:  		/* mr R4, R31 */
		/* 821AB4E8h case    0:*/		regs.R4 = regs.R31;
		/* 821AB4E8h case    0:*/		return 0x821AB4EC;
		  /* 821AB4ECh */ case    1:  		/* lwz R30, <#[R23 + 52]> */
		/* 821AB4ECh case    1:*/		cpu::mem::load32z( regs, &regs.R30, (uint32)(regs.R23 + 0x00000034) );
		/* 821AB4ECh case    1:*/		return 0x821AB4F0;
		  /* 821AB4F0h */ case    2:  		/* mr R3, R20 */
		/* 821AB4F0h case    2:*/		regs.R3 = regs.R20;
		/* 821AB4F0h case    2:*/		return 0x821AB4F4;
		  /* 821AB4F4h */ case    3:  		/* bl -210164 */
		/* 821AB4F4h case    3:*/		regs.LR = 0x821AB4F8; return 0x82178000;
		/* 821AB4F4h case    3:*/		return 0x821AB4F8;
		  /* 821AB4F8h */ case    4:  		/* mr R6, R3 */
		/* 821AB4F8h case    4:*/		regs.R6 = regs.R3;
		/* 821AB4F8h case    4:*/		return 0x821AB4FC;
		  /* 821AB4FCh */ case    5:  		/* mr R5, R31 */
		/* 821AB4FCh case    5:*/		regs.R5 = regs.R31;
		/* 821AB4FCh case    5:*/		return 0x821AB500;
		  /* 821AB500h */ case    6:  		/* li R4, 1 */
		/* 821AB500h case    6:*/		cpu::op::li<0>(regs,&regs.R4,0x1);
		/* 821AB500h case    6:*/		return 0x821AB504;
		  /* 821AB504h */ case    7:  		/* mr R3, R20 */
		/* 821AB504h case    7:*/		regs.R3 = regs.R20;
		/* 821AB504h case    7:*/		return 0x821AB508;
		  /* 821AB508h */ case    8:  		/* mr R7, R30 */
		/* 821AB508h case    8:*/		regs.R7 = regs.R30;
		/* 821AB508h case    8:*/		return 0x821AB50C;
		  /* 821AB50Ch */ case    9:  		/* bl -55076 */
		/* 821AB50Ch case    9:*/		regs.LR = 0x821AB510; return 0x8219DDE8;
		/* 821AB50Ch case    9:*/		return 0x821AB510;
		  /* 821AB510h */ case   10:  		/* lwz R11, <#[R25 + 8]> */
		/* 821AB510h case   10:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R25 + 0x00000008) );
		/* 821AB510h case   10:*/		return 0x821AB514;
		  /* 821AB514h */ case   11:  		/* mr R30, R3 */
		/* 821AB514h case   11:*/		regs.R30 = regs.R3;
		/* 821AB514h case   11:*/		return 0x821AB518;
		  /* 821AB518h */ case   12:  		/* rlwinm. R11, R11, 0, 31, 31 */
		/* 821AB518h case   12:*/		cpu::op::rlwinm<1,0,31,31>(regs,&regs.R11,regs.R11);
		/* 821AB518h case   12:*/		return 0x821AB51C;
		  /* 821AB51Ch */ case   13:  		/* bc 12, CR0_EQ, 16 */
		/* 821AB51Ch case   13:*/		if ( regs.CR[0].eq ) { return 0x821AB52C;  }
		/* 821AB51Ch case   13:*/		return 0x821AB520;
		  /* 821AB520h */ case   14:  		/* lwz R11, <#[R3 + 8]> */
		/* 821AB520h case   14:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AB520h case   14:*/		return 0x821AB524;
		  /* 821AB524h */ case   15:  		/* ori R11, R11, 1 */
		/* 821AB524h case   15:*/		cpu::op::ori<0>(regs,&regs.R11,regs.R11,0x1);
		/* 821AB524h case   15:*/		return 0x821AB528;
		  /* 821AB528h */ case   16:  		/* stw R11, <#[R3 + 8]> */
		/* 821AB528h case   16:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R3 + 0x00000008) );
		/* 821AB528h case   16:*/		return 0x821AB52C;
	}
	return 0x821AB52C;
} // Block from 821AB4E8h-821AB52Ch (17 instructions)

//////////////////////////////////////////////////////
// Block at 821AB52Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB52C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB52C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB52C);
		  /* 821AB52Ch */ case    0:  		/* mr R3, R31 */
		/* 821AB52Ch case    0:*/		regs.R3 = regs.R31;
		/* 821AB52Ch case    0:*/		return 0x821AB530;
		  /* 821AB530h */ case    1:  		/* bl -209336 */
		/* 821AB530h case    1:*/		regs.LR = 0x821AB534; return 0x82178378;
		/* 821AB530h case    1:*/		return 0x821AB534;
		  /* 821AB534h */ case    2:  		/* lwz R11, <#[R31 + 8]> */
		/* 821AB534h case    2:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AB534h case    2:*/		return 0x821AB538;
		  /* 821AB538h */ case    3:  		/* li R8, 1 */
		/* 821AB538h case    3:*/		cpu::op::li<0>(regs,&regs.R8,0x1);
		/* 821AB538h case    3:*/		return 0x821AB53C;
		  /* 821AB53Ch */ case    4:  		/* oris R11, R11, 256 */
		/* 821AB53Ch case    4:*/		cpu::op::oris<0>(regs,&regs.R11,regs.R11,0x100);
		/* 821AB53Ch case    4:*/		return 0x821AB540;
		  /* 821AB540h */ case    5:  		/* li R7, 1 */
		/* 821AB540h case    5:*/		cpu::op::li<0>(regs,&regs.R7,0x1);
		/* 821AB540h case    5:*/		return 0x821AB544;
		  /* 821AB544h */ case    6:  		/* stw R11, <#[R31 + 8]> */
		/* 821AB544h case    6:*/		cpu::mem::store32( regs, regs.R11, (uint32)(regs.R31 + 0x00000008) );
		/* 821AB544h case    6:*/		return 0x821AB548;
		  /* 821AB548h */ case    7:  		/* li R6, 0 */
		/* 821AB548h case    7:*/		cpu::op::li<0>(regs,&regs.R6,0x0);
		/* 821AB548h case    7:*/		return 0x821AB54C;
		  /* 821AB54Ch */ case    8:  		/* mr R5, R30 */
		/* 821AB54Ch case    8:*/		regs.R5 = regs.R30;
		/* 821AB54Ch case    8:*/		return 0x821AB550;
		  /* 821AB550h */ case    9:  		/* mr R4, R25 */
		/* 821AB550h case    9:*/		regs.R4 = regs.R25;
		/* 821AB550h case    9:*/		return 0x821AB554;
		  /* 821AB554h */ case   10:  		/* mr R3, R20 */
		/* 821AB554h case   10:*/		regs.R3 = regs.R20;
		/* 821AB554h case   10:*/		return 0x821AB558;
		  /* 821AB558h */ case   11:  		/* bl -26872 */
		/* 821AB558h case   11:*/		regs.LR = 0x821AB55C; return 0x821A4C60;
		/* 821AB558h case   11:*/		return 0x821AB55C;
		  /* 821AB55Ch */ case   12:  		/* mr R4, R31 */
		/* 821AB55Ch case   12:*/		regs.R4 = regs.R31;
		/* 821AB55Ch case   12:*/		return 0x821AB560;
		  /* 821AB560h */ case   13:  		/* mr R3, R20 */
		/* 821AB560h case   13:*/		regs.R3 = regs.R20;
		/* 821AB560h case   13:*/		return 0x821AB564;
		  /* 821AB564h */ case   14:  		/* bl -43692 */
		/* 821AB564h case   14:*/		regs.LR = 0x821AB568; return 0x821A0AB8;
		/* 821AB564h case   14:*/		return 0x821AB568;
		  /* 821AB568h */ case   15:  		/* mr R4, R25 */
		/* 821AB568h case   15:*/		regs.R4 = regs.R25;
		/* 821AB568h case   15:*/		return 0x821AB56C;
		  /* 821AB56Ch */ case   16:  		/* mr R3, R20 */
		/* 821AB56Ch case   16:*/		regs.R3 = regs.R20;
		/* 821AB56Ch case   16:*/		return 0x821AB570;
		  /* 821AB570h */ case   17:  		/* bl -43704 */
		/* 821AB570h case   17:*/		regs.LR = 0x821AB574; return 0x821A0AB8;
		/* 821AB570h case   17:*/		return 0x821AB574;
		  /* 821AB574h */ case   18:  		/* lwz R27, <#[R1 + 1236]> */
		/* 821AB574h case   18:*/		cpu::mem::load32z( regs, &regs.R27, (uint32)(regs.R1 + 0x000004D4) );
		/* 821AB574h case   18:*/		return 0x821AB578;
		  /* 821AB578h */ case   19:  		/* b -1244 */
		/* 821AB578h case   19:*/		return 0x821AB09C;
		/* 821AB578h case   19:*/		return 0x821AB57C;
	}
	return 0x821AB57C;
} // Block from 821AB52Ch-821AB57Ch (20 instructions)

//////////////////////////////////////////////////////
// Block at 821AB57Ch
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB57C( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB57C) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB57C);
		  /* 821AB57Ch */ case    0:  		/* mr R3, R23 */
		/* 821AB57Ch case    0:*/		regs.R3 = regs.R23;
		/* 821AB57Ch case    0:*/		return 0x821AB580;
		  /* 821AB580h */ case    1:  		/* bl -43720 */
		/* 821AB580h case    1:*/		regs.LR = 0x821AB584; return 0x821A0AB8;
		/* 821AB580h case    1:*/		return 0x821AB584;
	}
	return 0x821AB584;
} // Block from 821AB57Ch-821AB584h (2 instructions)

//////////////////////////////////////////////////////
// Block at 821AB584h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB584( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB584) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB584);
		  /* 821AB584h */ case    0:  		/* lwz R11, <#[R24]> */
		/* 821AB584h case    0:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R24 + 0x00000000) );
		/* 821AB584h case    0:*/		return 0x821AB588;
		  /* 821AB588h */ case    1:  		/* cmplw CR6, R11, R25 */
		/* 821AB588h case    1:*/		cpu::op::cmplw<6>(regs,regs.R11,regs.R25);
		/* 821AB588h case    1:*/		return 0x821AB58C;
		  /* 821AB58Ch */ case    2:  		/* bc 4, CR6_EQ, -1032 */
		/* 821AB58Ch case    2:*/		if ( !regs.CR[6].eq ) { return 0x821AB184;  }
		/* 821AB58Ch case    2:*/		return 0x821AB590;
		  /* 821AB590h */ case    3:  		/* addi R24, R25, 8 */
		/* 821AB590h case    3:*/		cpu::op::addi<0>(regs,&regs.R24,regs.R25,0x8);
		/* 821AB590h case    3:*/		return 0x821AB594;
		  /* 821AB594h */ case    4:  		/* b -1040 */
		/* 821AB594h case    4:*/		return 0x821AB184;
		/* 821AB594h case    4:*/		return 0x821AB598;
	}
	return 0x821AB598;
} // Block from 821AB584h-821AB598h (5 instructions)

//////////////////////////////////////////////////////
// Block at 821AB598h
//////////////////////////////////////////////////////
uint64 __fastcall _code__block821AB598( uint64 ip, cpu::CpuRegs& regs )
{
	const uint32 local_instr = (uint32)(ip - 0x821AB598) / 4;
	switch ( local_instr )
	{
		default:	runtime::InvalidAddress(ip, 0x821AB598);
		  /* 821AB598h */ case    0:  		/* lwz R21, <#[R25 + 44]> */
		/* 821AB598h case    0:*/		cpu::mem::load32z( regs, &regs.R21, (uint32)(regs.R25 + 0x0000002C) );
		/* 821AB598h case    0:*/		return 0x821AB59C;
		  /* 821AB59Ch */ case    1:  		/* lis R11, -32256 */
		/* 821AB59Ch case    1:*/		cpu::op::lis<0>(regs,&regs.R11,0xFFFF8200);
		/* 821AB59Ch case    1:*/		return 0x821AB5A0;
		  /* 821AB5A0h */ case    2:  		/* lwz R16, <#[R25 + 52]> */
		/* 821AB5A0h case    2:*/		cpu::mem::load32z( regs, &regs.R16, (uint32)(regs.R25 + 0x00000034) );
		/* 821AB5A0h case    2:*/		return 0x821AB5A4;
		  /* 821AB5A4h */ case    3:  		/* lis R10, -32256 */
		/* 821AB5A4h case    3:*/		cpu::op::lis<0>(regs,&regs.R10,0xFFFF8200);
		/* 821AB5A4h case    3:*/		return 0x821AB5A8;
		  /* 821AB5A8h */ case    4:  		/* lwz R15, <#[R25 + 48]> */
		/* 821AB5A8h case    4:*/		cpu::mem::load32z( regs, &regs.R15, (uint32)(regs.R25 + 0x00000030) );
		/* 821AB5A8h case    4:*/		return 0x821AB5AC;
		  /* 821AB5ACh */ case    5:  		/* lis R9, -32256 */
		/* 821AB5ACh case    5:*/		cpu::op::lis<0>(regs,&regs.R9,0xFFFF8200);
		/* 821AB5ACh case    5:*/		return 0x821AB5B0;
		  /* 821AB5B0h */ case    6:  		/* lwz R23, <#[R21 + 12]> */
		/* 821AB5B0h case    6:*/		cpu::mem::load32z( regs, &regs.R23, (uint32)(regs.R21 + 0x0000000C) );
		/* 821AB5B0h case    6:*/		return 0x821AB5B4;
		  /* 821AB5B4h */ case    7:  		/* lfd FR31, <#[R11 + 1808]> */
		/* 821AB5B4h case    7:*/		cpu::mem::load64f( regs, &regs.FR31, (uint32)(regs.R11 + 0x00000710) );
		/* 821AB5B4h case    7:*/		return 0x821AB5B8;
		  /* 821AB5B8h */ case    8:  		/* lwz R22, <#[R16 + 12]> */
		/* 821AB5B8h case    8:*/		cpu::mem::load32z( regs, &regs.R22, (uint32)(regs.R16 + 0x0000000C) );
		/* 821AB5B8h case    8:*/		return 0x821AB5BC;
		  /* 821AB5BCh */ case    9:  		/* lfs FR28, <#[R10 + 1792]> */
		/* 821AB5BCh case    9:*/		cpu::mem::load32f( regs, &regs.FR28, (uint32)(regs.R10 + 0x00000700) );
		/* 821AB5BCh case    9:*/		return 0x821AB5C0;
		  /* 821AB5C0h */ case   10:  		/* addi R28, R23, 8 */
		/* 821AB5C0h case   10:*/		cpu::op::addi<0>(regs,&regs.R28,regs.R23,0x8);
		/* 821AB5C0h case   10:*/		return 0x821AB5C4;
		  /* 821AB5C4h */ case   11:  		/* lwz R14, <#[R15 + 12]> */
		/* 821AB5C4h case   11:*/		cpu::mem::load32z( regs, &regs.R14, (uint32)(regs.R15 + 0x0000000C) );
		/* 821AB5C4h case   11:*/		return 0x821AB5C8;
		  /* 821AB5C8h */ case   12:  		/* lfs FR30, <#[R9 + 1816]> */
		/* 821AB5C8h case   12:*/		cpu::mem::load32f( regs, &regs.FR30, (uint32)(regs.R9 + 0x00000718) );
		/* 821AB5C8h case   12:*/		return 0x821AB5CC;
		  /* 821AB5CCh */ case   13:  		/* stw R28, <#[R1 + 112]> */
		/* 821AB5CCh case   13:*/		cpu::mem::store32( regs, regs.R28, (uint32)(regs.R1 + 0x00000070) );
		/* 821AB5CCh case   13:*/		return 0x821AB5D0;
		  /* 821AB5D0h */ case   14:  		/* stw R22, <#[R1 + 132]> */
		/* 821AB5D0h case   14:*/		cpu::mem::store32( regs, regs.R22, (uint32)(regs.R1 + 0x00000084) );
		/* 821AB5D0h case   14:*/		return 0x821AB5D4;
		  /* 821AB5D4h */ case   15:  		/* lwz R11, <#[R28]> */
		/* 821AB5D4h case   15:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R28 + 0x00000000) );
		/* 821AB5D4h case   15:*/		return 0x821AB5D8;
		  /* 821AB5D8h */ case   16:  		/* rlwinm R11, R11, 0, 18, 24 */
		/* 821AB5D8h case   16:*/		cpu::op::rlwinm<0,0,18,24>(regs,&regs.R11,regs.R11);
		/* 821AB5D8h case   16:*/		return 0x821AB5DC;
		  /* 821AB5DCh */ case   17:  		/* cmplwi CR6, R11, 16000 */
		/* 821AB5DCh case   17:*/		cpu::op::cmplwi<6>(regs,regs.R11,0x00003E80);
		/* 821AB5DCh case   17:*/		return 0x821AB5E0;
		  /* 821AB5E0h */ case   18:  		/* bc 4, CR6_EQ, 2632 */
		/* 821AB5E0h case   18:*/		if ( !regs.CR[6].eq ) { return 0x821AC028;  }
		/* 821AB5E0h case   18:*/		return 0x821AB5E4;
		  /* 821AB5E4h */ case   19:  		/* lwz R11, <#[R21]> */
		/* 821AB5E4h case   19:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AB5E4h case   19:*/		return 0x821AB5E8;
		  /* 821AB5E8h */ case   20:  		/* li R24, 0 */
		/* 821AB5E8h case   20:*/		cpu::op::li<0>(regs,&regs.R24,0x0);
		/* 821AB5E8h case   20:*/		return 0x821AB5EC;
		  /* 821AB5ECh */ case   21:  		/* li R29, 0 */
		/* 821AB5ECh case   21:*/		cpu::op::li<0>(regs,&regs.R29,0x0);
		/* 821AB5ECh case   21:*/		return 0x821AB5F0;
		  /* 821AB5F0h */ case   22:  		/* rlwinm. R25, R11, 7, 29, 31 */
		/* 821AB5F0h case   22:*/		cpu::op::rlwinm<1,7,29,31>(regs,&regs.R25,regs.R11);
		/* 821AB5F0h case   22:*/		return 0x821AB5F4;
		  /* 821AB5F4h */ case   23:  		/* li R20, 3 */
		/* 821AB5F4h case   23:*/		cpu::op::li<0>(regs,&regs.R20,0x3);
		/* 821AB5F4h case   23:*/		return 0x821AB5F8;
		  /* 821AB5F8h */ case   24:  		/* li R19, 1 */
		/* 821AB5F8h case   24:*/		cpu::op::li<0>(regs,&regs.R19,0x1);
		/* 821AB5F8h case   24:*/		return 0x821AB5FC;
		  /* 821AB5FCh */ case   25:  		/* bc 12, CR0_EQ, 80 */
		/* 821AB5FCh case   25:*/		if ( regs.CR[0].eq ) { return 0x821AB64C;  }
		/* 821AB5FCh case   25:*/		return 0x821AB600;
		  /* 821AB600h */ case   26:  		/* li R31, 0 */
		/* 821AB600h case   26:*/		cpu::op::li<0>(regs,&regs.R31,0x0);
		/* 821AB600h case   26:*/		return 0x821AB604;
		  /* 821AB604h */ case   27:  		/* mr R30, R25 */
		/* 821AB604h case   27:*/		regs.R30 = regs.R25;
		/* 821AB604h case   27:*/		return 0x821AB608;
		  /* 821AB608h */ case   28:  		/* lwz R11, <#[R21]> */
		/* 821AB608h case   28:*/		cpu::mem::load32z( regs, &regs.R11, (uint32)(regs.R21 + 0x00000000) );
		/* 821AB608h case   28:*/		return 0x821AB60C;
		  /* 821AB60Ch */ case   29:  		/* mr R3, R23 */
		/* 821AB60Ch case   29:*/		regs.R3 = regs.R23;
		/* 821AB60Ch case   29:*/		return 0x821AB610;
		  /* 821AB610h */ case   30:  		/* rlwinm R10, R11, 27, 24, 31 */
		/* 821AB610h case   30:*/		cpu::op::rlwinm<0,27,24,31>(regs,&regs.R10,regs.R11);
		/* 821AB610h case   30:*/		return 0x821AB614;
		  /* 821AB614h */ case   31:  		/* rlwinm R5, R11, 0, 27, 31 */
		/* 821AB614h case   31:*/		cpu::op::rlwinm<0,0,27,31>(regs,&regs.R5,regs.R11);
		/* 821AB614h case   31:*/		return 0x821AB618;
		  /* 821AB618h */ case   32:  		/* srw R11, R10, R31 */
		/* 821AB618h case   32:*/		cpu::op::srw<0>(regs,&regs.R11,regs.R10,regs.R31);
		/* 821AB618h case   32:*/		return 0x821AB61C;
		  /* 821AB61Ch */ case   33:  		/* rlwinm R4, R11, 0, 30, 31 */
		/* 821AB61Ch case   33:*/		cpu::op::rlwinm<0,0,30,31>(regs,&regs.R4,regs.R11);
		/* 821AB61Ch case   33:*/		return 0x821AB620;
		  /* 821AB620h */ case   34:  		/* bl 483432 */
		/* 821AB620h case   34:*/		regs.LR = 0x821AB624; return 0x82221688;
		/* 821AB620h case   34:*/		return 0x821AB624;
		  /* 821AB624h */ case   35:  		/* fcmpu CR6, FR1, FR31 */
		/* 821AB624h case   35:*/		cpu::op::fcmpu<6>(regs,regs.FR1,regs.FR31);
		/* 821AB624h case   35:*/		return 0x821AB628;
		  /* 821AB628h */ case   36:  		/* bc 12, CR6_EQ, 24 */
		/* 821AB628h case   36:*/		if ( regs.CR[6].eq ) { return 0x821AB640;  }
		/* 821AB628h case   36:*/		return 0x821AB62C;
		  /* 821AB62Ch */ case   37:  		/* slw R11, R20, R31 */
		/* 821AB62Ch case   37:*/		cpu::op::slw<0>(regs,&regs.R11,regs.R20,regs.R31);
		/* 821AB62Ch case   37:*/		return 0x821AB630;
		  /* 821AB630h */ case   38:  		/* andc R11, R24, R11 */
		/* 821AB630h case   38:*/		cpu::op::andc<0>(regs,&regs.R11,regs.R24,regs.R11);
		/* 821AB630h case   38:*/		return 0x821AB634;
		  /* 821AB634h */ case   39:  		/* slw R10, R19, R31 */
		/* 821AB634h case   39:*/		cpu::op::slw<0>(regs,&regs.R10,regs.R19,regs.R31);
		/* 821AB634h case   39:*/		return 0x821AB638;
		  /* 821AB638h */ case   40:  		/* or R24, R11, R10 */
		/* 821AB638h case   40:*/		cpu::op::or<0>(regs,&regs.R24,regs.R11,regs.R10);
		/* 821AB638h case   40:*/		return 0x821AB63C;
		  /* 821AB63Ch */ case   41:  		/* addi R29, R29, 1 */
		/* 821AB63Ch case   41:*/		cpu::op::addi<0>(regs,&regs.R29,regs.R29,0x1);
		/* 821AB63Ch case   41:*/		return 0x821AB640;
	}
	return 0x821AB640;
} // Block from 821AB598h-821AB640h (42 instructions)

